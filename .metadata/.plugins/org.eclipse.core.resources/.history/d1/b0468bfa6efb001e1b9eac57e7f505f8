/*
 * Screens.c
 *
 *  Created on: Apr 13, 2024
 *      Author: zawad
 */
#include "Screens.h"
#include "ds1307.h"
#include "Pills.h"

void authenticate(void (*nextScreen)()){
	   fillScreen(ILI9488_WHITE);
		uint16_t touchX = 0, touchY = 0;
	   fillRect(100, 30,75,75, ILI9488_RED);
	   drawCharTest(130, 55, '1', ILI9488_WHITE,ILI9488_RED, 3);
	   fillRect(200, 30,75,75, ILI9488_RED);
	   drawCharTest(230, 55, '2', ILI9488_WHITE,ILI9488_RED, 3);
	   fillRect(300, 30,75,75, ILI9488_RED);
	   drawCharTest(319, 55, '3', ILI9488_WHITE,ILI9488_RED, 3);
	   fillRect(100, 130,75,75, ILI9488_RED);
	   drawCharTest(130, 150, '4', ILI9488_WHITE,ILI9488_RED, 3);
	   fillRect(200, 130,75,75, ILI9488_RED);
	   drawCharTest(230, 150, '5', ILI9488_WHITE,ILI9488_RED, 3);
	   fillRect(300, 130,75,75, ILI9488_RED);
	   drawCharTest(319, 150, '6', ILI9488_WHITE,ILI9488_RED, 3);
	   fillRect(100, 230,75,75, ILI9488_RED);
	   drawCharTest(130, 250, '7', ILI9488_WHITE,ILI9488_RED, 3);
	   fillRect(200, 230,75,75, ILI9488_RED);
	   drawCharTest(230, 250, '8', ILI9488_WHITE,ILI9488_RED, 3);
	   fillRect(300, 230,75,75, ILI9488_RED);
	   drawCharTest(319, 250, '9', ILI9488_WHITE,ILI9488_RED, 3);
	   //drawChar(135, 61, '1', ILI9488_BLACK,ILI9488_RED, 1);


	   uint16_t count = 0;
	   char entered[6] = "     ";
	   char passcode[6] = "12345";

	  while (1)
	  {
		  touchX = getX();
		  touchY = getY();

		  ILI9488_printText(entered, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);

		  //absolutely horrible password checking...but works for testing TODO: make this not horrible.
		  if(count == 5){
			  if (!strcmp(entered, passcode)){
				  nextScreen();

			  }
			  else {
				char not_success_msg [10] = "Invalid";
				  fillScreen(ILI9488_WHITE);
				  ILI9488_printText(not_success_msg, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 2);
			  }
			  break;
		  }

		  /*
		   * 75, 52
			75, 67
			97, 55
			97, 67
		   */
		  if(touchX >= 75 && touchX < 97 && touchY >= 52 && touchY < 67){
			fillRect(100, 30,75,75, ILI9488_GREEN);
			HAL_Delay(250);
			entered[count] = '1';
			count++;
		    fillRect(100, 30,75,75, ILI9488_RED);
		    drawCharTest(130, 55, '1', ILI9488_WHITE,ILI9488_RED, 3);
		  }

		  /*
		   * 2nd box:
			97, 52
			287, 52
			97, 67
			287, 67
		   */
		  if(touchX >= 100 && touchX < 287 && touchY >= 52 && touchY < 67){
			fillRect(200, 30,75,75, ILI9488_GREEN);
			HAL_Delay(250);
			entered[count] = '2';
			count++;
			fillRect(200, 30,75,75, ILI9488_RED);
			drawCharTest(230, 55, '2', ILI9488_WHITE,ILI9488_RED, 3);

		  }
		  /*else
			  fillRect(200, 30,75,75, ILI9488_RED);*/
		  //fillRect(touchX, touchY,5,5, ILI9488_RED);
		  //HAL_Delay(250);

		  /*3rd box:
			299, 52
			390, 52
			299, 67
			390, 167*/
		  if(touchX >= 299 && touchX < 372 && touchY >= 52 && touchY < 160){
			fillRect(300, 30,75,75, ILI9488_GREEN);
			HAL_Delay(250);
			entered[count] = '3';
			count++;
			fillRect(300, 30,75,75, ILI9488_RED);
			drawCharTest(319, 55, '3', ILI9488_WHITE,ILI9488_RED, 3);
		  }


			/*4th box:
			 * 75, 163
			 * 75, 219
			 * 97, 163
			 * 97, 219
			 *
			 *
			 */
			if(touchX >= 75 && touchX < 97 && touchY >= 163 && touchY < 219){
				fillRect(100, 130,75,75, ILI9488_GREEN);
				HAL_Delay(250);
				entered[count] = '4';
				count++;
				fillRect(100, 130,75,75, ILI9488_RED);
				drawCharTest(130, 150, '4', ILI9488_WHITE,ILI9488_RED, 3);

			}

			/*5th box:
			 * 97, 165
			 * 262, 165
			 * 97, 207
			 * 262, 207
			 */
			 if(touchX >= 100 && touchX < 262 && touchY >= 165 && touchY < 207){
				fillRect(200, 130,75,75, ILI9488_GREEN);
				HAL_Delay(250);
				entered[count] = '5';
				count++;
				fillRect(200, 130,75,75, ILI9488_RED);
				drawCharTest(230, 150, '5', ILI9488_WHITE,ILI9488_RED, 3);

			 }

			  /*6th box:
			 * 294, 166
			 * 381, 167
			 * 299, 207
			 * 372, 207
			 */
			 if(touchX >= 299 && touchX < 372 && touchY >= 167 && touchY < 207){
				fillRect(300, 130,75,75, ILI9488_GREEN);
				HAL_Delay(250);
				entered[count] = '6';
				count++;
				fillRect(300, 130,75,75, ILI9488_RED);
				drawCharTest(319, 150, '6', ILI9488_WHITE,ILI9488_RED, 3);
			 }


			/*7th box:
			 * 75, 242
			 * 97, 242
			 * 75, 309
			 * 97, 309
			 */
			if(touchX >= 75 && touchX < 97 && touchY >= 242 && touchY < 309){
				fillRect(100, 230,75,75, ILI9488_GREEN);
				HAL_Delay(250);
				entered[count] = '7';
				count++;
				fillRect(100, 230,75,75, ILI9488_RED);
				drawCharTest(130, 250, '7', ILI9488_WHITE,ILI9488_RED, 3);
			}


			/*8th box:
			 * 97, 242
			 * 262, 242
			 * 97, 309
			 * 287, 306
			 */
			if(touchX >= 100 && touchX < 280 && touchY >= 242 && touchY < 309){
				fillRect(200, 230,75,75, ILI9488_GREEN);
				HAL_Delay(250);
				entered[count] = '8';
				count++;
				fillRect(200, 230,75,75, ILI9488_RED);
				drawCharTest(230, 250, '8', ILI9488_WHITE,ILI9488_RED, 3);
			}



			/*9th box:
			 * 299, 242
			 * 381, 242
			 * 299, 309
			 * 372, 309
			 */
			if(touchX >= 299 && touchX < 372 && touchY >= 242 && touchY < 309){
			   fillRect(300, 230,75,75, ILI9488_GREEN);
			   HAL_Delay(250);
			   entered[count] = '9';
			   fillRect(300, 230,75,75, ILI9488_RED);
			   drawCharTest(319, 250, '9', ILI9488_WHITE,ILI9488_RED, 3);
			   count++;
			}

	  }

}

void Dispense(){
	char success_msg [10] = "Dispensing...";
	fillScreen(ILI9488_WHITE);
	ILI9488_printText(success_msg, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_Delay(2000);
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
	HAL_Delay(2000);

	return;
}



void LockScreen(){
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
	const char *MONTHS_OF_YEAR[12] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};


	uint8_t date = DS1307_GetDate();
	uint8_t month = DS1307_GetMonth();
	uint16_t year = DS1307_GetYear();
	uint8_t dow = DS1307_GetDayOfWeek();
	uint8_t hour = DS1307_GetHour();
	uint8_t minute = DS1307_GetMinute();
	uint8_t second = DS1307_GetSecond();
	char buffer[100] = { 0 };
	char ampm[4] = "AM";
	char formattedMinute[4];
	if (minute < 10){
		sprintf(formattedMinute, "0%i", minute);
	}
	else{
		sprintf(formattedMinute, "%i", minute);
	}
 	//convert to 12hr time
	if (hour == 0){
		hour = 12;
	}
	else if (hour > 12){
		hour = hour - 12;
		sprintf(ampm, "%s", "PM");
	}
	/* May show warning below. Ignore and proceed. */
	sprintf(buffer, "Now: %s, %s %i %i, %i:%s:%i %s",
	DAYS_OF_WEEK[dow], MONTHS_OF_YEAR[month - 1], date, year, hour, formattedMinute, second, ampm);
	ILI9488_printText(buffer, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
	HAL_Delay(50);

	update_next_pill_idx(DS1307_GetDayOfWeek(), DS1307_GetHour(), DS1307_GetMinute());

	 uint8_t pil = 0;
	 for (pil = 0; pil < 3; pil++){

		 //12 hour time for every pill
		 pillEntry temp = getPillInfo(pil);
		 uint8_t tempHour = temp.hour;
		 char tempampm[4] = "AM";
		 char pillTime [50];
		 char pillFormatMinute [4];


		 if (temp.min < 10){
				sprintf(pillFormatMinute, "0%i", temp.min);
			}

		 else{
				sprintf(pillFormatMinute, "%i", temp.min);
			}
		 if (tempHour == 0){
			tempHour = 12;
		 }
		 else if (tempHour > 12){
			tempHour = tempHour - 12;
			sprintf(tempampm, "%s", "PM");
		 }

		sprintf(pillTime, "Pill Due at %s, %s %i @ %i:%i %s", DAYS_OF_WEEK[temp.dayofWeek], MONTHS_OF_YEAR[month - 1], date + (temp.dayofWeek - dow),tempHour,  pillFormatMinute, tempampm);
		//overdue pills.
		if (pil < get_next_pill_idx()){
			ILI9488_printText(temp.name, 10, (pil + 1) * 50, ILI9488_RED, ILI9488_WHITE, 1);
			ILI9488_printText(pillTime, 10, (pil + 1)*50 + 10, ILI9488_RED, ILI9488_WHITE, 1);
		}
		else {
			ILI9488_printText(temp.name, 10, (pil + 1) * 50, ILI9488_BLACK, ILI9488_WHITE, 1);
			ILI9488_printText(pillTime, 10, (pil + 1) * 50 + 10, ILI9488_BLACK, ILI9488_WHITE, 1);
		}
	 }
	 HAL_Delay(1000);
}


