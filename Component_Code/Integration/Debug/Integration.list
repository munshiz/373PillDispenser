
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ee34  0800b278  0800b278  0000c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a0ac  0801a0ac  0001c060  2**0
                  CONTENTS
  4 .ARM          00000008  0801a0ac  0801a0ac  0001b0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a0b4  0801a0b4  0001c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a0b4  0801a0b4  0001b0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a0b8  0801a0b8  0001b0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0801a0bc  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa4  20000060  0801a11c  0001c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  0801a11c  0001cb04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001729b  00000000  00000000  0001c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003183  00000000  00000000  0003332b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  000364b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eaf  00000000  00000000  00037798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c3d5  00000000  00000000  00038647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019434  00000000  00000000  00064a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104da8  00000000  00000000  0007de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182bf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d8  00000000  00000000  00182c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00188014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b260 	.word	0x0800b260

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	0800b260 	.word	0x0800b260

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <addNewEntry>:
static uint8_t last_taken_pill_idx = 0;

uint8_t used_slots = 0; //stores dispenser availablity through one-hot encoding


void addNewEntry(uint8_t dispenserNum, char * name, uint8_t dayofWeek, uint8_t hour, uint8_t min){
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6039      	str	r1, [r7, #0]
 80005c8:	4611      	mov	r1, r2
 80005ca:	461a      	mov	r2, r3
 80005cc:	4603      	mov	r3, r0
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	460b      	mov	r3, r1
 80005d2:	71bb      	strb	r3, [r7, #6]
 80005d4:	4613      	mov	r3, r2
 80005d6:	717b      	strb	r3, [r7, #5]
	//uint8_t ID; uint8_t dispenserNum; char * name; uint8_t dayofWeek; uint8_t hour; uint8_t min; uint8_t taken;
	pillEntry wew = {numPills, dispenserNum, name, dayofWeek, hour, min, 1};
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	221f      	movs	r2, #31
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f00a f9bd 	bl	800a960 <memset>
 80005e6:	4b21      	ldr	r3, [pc, #132]	@ (800066c <addNewEntry+0xac>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	723b      	strb	r3, [r7, #8]
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	727b      	strb	r3, [r7, #9]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	72bb      	strb	r3, [r7, #10]
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	72fb      	strb	r3, [r7, #11]
 80005fa:	797b      	ldrb	r3, [r7, #5]
 80005fc:	733b      	strb	r3, [r7, #12]
 80005fe:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000602:	737b      	strb	r3, [r7, #13]
 8000604:	2301      	movs	r3, #1
 8000606:	73bb      	strb	r3, [r7, #14]
	pillList[numPills] = wew;
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <addNewEntry+0xac>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <addNewEntry+0xb0>)
 8000610:	460b      	mov	r3, r1
 8000612:	015b      	lsls	r3, r3, #5
 8000614:	1a5b      	subs	r3, r3, r1
 8000616:	4413      	add	r3, r2
 8000618:	461d      	mov	r5, r3
 800061a:	f107 0408 	add.w	r4, r7, #8
 800061e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000620:	6028      	str	r0, [r5, #0]
 8000622:	6069      	str	r1, [r5, #4]
 8000624:	60aa      	str	r2, [r5, #8]
 8000626:	60eb      	str	r3, [r5, #12]
 8000628:	cc07      	ldmia	r4!, {r0, r1, r2}
 800062a:	6128      	str	r0, [r5, #16]
 800062c:	6169      	str	r1, [r5, #20]
 800062e:	61aa      	str	r2, [r5, #24]
 8000630:	8823      	ldrh	r3, [r4, #0]
 8000632:	78a2      	ldrb	r2, [r4, #2]
 8000634:	83ab      	strh	r3, [r5, #28]
 8000636:	4613      	mov	r3, r2
 8000638:	77ab      	strb	r3, [r5, #30]
	numPills++;
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <addNewEntry+0xac>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <addNewEntry+0xac>)
 8000644:	701a      	strb	r2, [r3, #0]
	used_slots |= 0x1 << dispenserNum;
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2201      	movs	r2, #1
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	b25a      	sxtb	r2, r3
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <addNewEntry+0xb4>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b25b      	sxtb	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	b25b      	sxtb	r3, r3
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <addNewEntry+0xb4>)
 800065e:	701a      	strb	r2, [r3, #0]
	sortEntries();
 8000660:	f000 f80a 	bl	8000678 <sortEntries>
	//update_next_pill_idx(DS1307_GetDayOfWeek, DS1307_GetHour, DS1307_GetMinute);
}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	@ 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bdb0      	pop	{r4, r5, r7, pc}
 800066c:	2000007c 	.word	0x2000007c
 8000670:	20000080 	.word	0x20000080
 8000674:	20000690 	.word	0x20000690

08000678 <sortEntries>:

void sortEntries(){
 8000678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800067c:	b096      	sub	sp, #88	@ 0x58
 800067e:	af0c      	add	r7, sp, #48	@ 0x30
	uint8_t i = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t j = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t minimum_idx = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	//WOOOO SELECTION SORT MY BELOVED!!!!
	for (i = 0; i < numPills; i++){
 8000692:	2300      	movs	r3, #0
 8000694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000698:	e0b1      	b.n	80007fe <sortEntries+0x186>
		minimum_idx = i;
 800069a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800069e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		for (j = i + 1; j < numPills; j++){
 80006a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006a6:	3301      	adds	r3, #1
 80006a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80006ac:	e043      	b.n	8000736 <sortEntries+0xbe>
			if (compPillEntry(pillList[j], pillList[minimum_idx])){
 80006ae:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80006b2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80006b6:	4858      	ldr	r0, [pc, #352]	@ (8000818 <sortEntries+0x1a0>)
 80006b8:	460b      	mov	r3, r1
 80006ba:	015b      	lsls	r3, r3, #5
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	18c6      	adds	r6, r0, r3
 80006c0:	4955      	ldr	r1, [pc, #340]	@ (8000818 <sortEntries+0x1a0>)
 80006c2:	4613      	mov	r3, r2
 80006c4:	015b      	lsls	r3, r3, #5
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	ac04      	add	r4, sp, #16
 80006cc:	461d      	mov	r5, r3
 80006ce:	6828      	ldr	r0, [r5, #0]
 80006d0:	6869      	ldr	r1, [r5, #4]
 80006d2:	68aa      	ldr	r2, [r5, #8]
 80006d4:	68eb      	ldr	r3, [r5, #12]
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	6928      	ldr	r0, [r5, #16]
 80006da:	6969      	ldr	r1, [r5, #20]
 80006dc:	69aa      	ldr	r2, [r5, #24]
 80006de:	c407      	stmia	r4!, {r0, r1, r2}
 80006e0:	8bab      	ldrh	r3, [r5, #28]
 80006e2:	7faa      	ldrb	r2, [r5, #30]
 80006e4:	8023      	strh	r3, [r4, #0]
 80006e6:	4613      	mov	r3, r2
 80006e8:	70a3      	strb	r3, [r4, #2]
 80006ea:	6833      	ldr	r3, [r6, #0]
 80006ec:	4698      	mov	r8, r3
 80006ee:	6873      	ldr	r3, [r6, #4]
 80006f0:	469e      	mov	lr, r3
 80006f2:	68b3      	ldr	r3, [r6, #8]
 80006f4:	469c      	mov	ip, r3
 80006f6:	68f3      	ldr	r3, [r6, #12]
 80006f8:	461d      	mov	r5, r3
 80006fa:	466b      	mov	r3, sp
 80006fc:	f106 0410 	add.w	r4, r6, #16
 8000700:	6820      	ldr	r0, [r4, #0]
 8000702:	6861      	ldr	r1, [r4, #4]
 8000704:	68a2      	ldr	r2, [r4, #8]
 8000706:	c307      	stmia	r3!, {r0, r1, r2}
 8000708:	89a2      	ldrh	r2, [r4, #12]
 800070a:	7ba1      	ldrb	r1, [r4, #14]
 800070c:	801a      	strh	r2, [r3, #0]
 800070e:	460a      	mov	r2, r1
 8000710:	709a      	strb	r2, [r3, #2]
 8000712:	4640      	mov	r0, r8
 8000714:	4671      	mov	r1, lr
 8000716:	4662      	mov	r2, ip
 8000718:	462b      	mov	r3, r5
 800071a:	f000 f881 	bl	8000820 <compPillEntry>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <sortEntries+0xb4>
				minimum_idx = j;
 8000724:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000728:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		for (j = i + 1; j < numPills; j++){
 800072c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000730:	3301      	adds	r3, #1
 8000732:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000736:	4b39      	ldr	r3, [pc, #228]	@ (800081c <sortEntries+0x1a4>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800073e:	429a      	cmp	r2, r3
 8000740:	d3b5      	bcc.n	80006ae <sortEntries+0x36>
			}
		}
		pillEntry temp = pillList[i];
 8000742:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000746:	4934      	ldr	r1, [pc, #208]	@ (8000818 <sortEntries+0x1a0>)
 8000748:	4613      	mov	r3, r2
 800074a:	015b      	lsls	r3, r3, #5
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	440b      	add	r3, r1
 8000750:	1d3c      	adds	r4, r7, #4
 8000752:	461d      	mov	r5, r3
 8000754:	6828      	ldr	r0, [r5, #0]
 8000756:	6869      	ldr	r1, [r5, #4]
 8000758:	68aa      	ldr	r2, [r5, #8]
 800075a:	68eb      	ldr	r3, [r5, #12]
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	6928      	ldr	r0, [r5, #16]
 8000760:	6969      	ldr	r1, [r5, #20]
 8000762:	69aa      	ldr	r2, [r5, #24]
 8000764:	c407      	stmia	r4!, {r0, r1, r2}
 8000766:	8bab      	ldrh	r3, [r5, #28]
 8000768:	7faa      	ldrb	r2, [r5, #30]
 800076a:	8023      	strh	r3, [r4, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	70a3      	strb	r3, [r4, #2]
		pillList[i] = pillList[minimum_idx];
 8000770:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000774:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8000778:	4827      	ldr	r0, [pc, #156]	@ (8000818 <sortEntries+0x1a0>)
 800077a:	460b      	mov	r3, r1
 800077c:	015b      	lsls	r3, r3, #5
 800077e:	1a5b      	subs	r3, r3, r1
 8000780:	4418      	add	r0, r3
 8000782:	4925      	ldr	r1, [pc, #148]	@ (8000818 <sortEntries+0x1a0>)
 8000784:	4613      	mov	r3, r2
 8000786:	015b      	lsls	r3, r3, #5
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	18ca      	adds	r2, r1, r3
 800078c:	4603      	mov	r3, r0
 800078e:	6814      	ldr	r4, [r2, #0]
 8000790:	6850      	ldr	r0, [r2, #4]
 8000792:	6891      	ldr	r1, [r2, #8]
 8000794:	68d5      	ldr	r5, [r2, #12]
 8000796:	601c      	str	r4, [r3, #0]
 8000798:	6058      	str	r0, [r3, #4]
 800079a:	6099      	str	r1, [r3, #8]
 800079c:	60dd      	str	r5, [r3, #12]
 800079e:	6914      	ldr	r4, [r2, #16]
 80007a0:	6950      	ldr	r0, [r2, #20]
 80007a2:	6991      	ldr	r1, [r2, #24]
 80007a4:	611c      	str	r4, [r3, #16]
 80007a6:	6158      	str	r0, [r3, #20]
 80007a8:	6199      	str	r1, [r3, #24]
 80007aa:	8b91      	ldrh	r1, [r2, #28]
 80007ac:	7f92      	ldrb	r2, [r2, #30]
 80007ae:	8399      	strh	r1, [r3, #28]
 80007b0:	779a      	strb	r2, [r3, #30]
		pillList[minimum_idx] = temp;
 80007b2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80007b6:	4918      	ldr	r1, [pc, #96]	@ (8000818 <sortEntries+0x1a0>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	015b      	lsls	r3, r3, #5
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	440b      	add	r3, r1
 80007c0:	461d      	mov	r5, r3
 80007c2:	1d3c      	adds	r4, r7, #4
 80007c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c6:	6028      	str	r0, [r5, #0]
 80007c8:	6069      	str	r1, [r5, #4]
 80007ca:	60aa      	str	r2, [r5, #8]
 80007cc:	60eb      	str	r3, [r5, #12]
 80007ce:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007d0:	6128      	str	r0, [r5, #16]
 80007d2:	6169      	str	r1, [r5, #20]
 80007d4:	61aa      	str	r2, [r5, #24]
 80007d6:	8823      	ldrh	r3, [r4, #0]
 80007d8:	78a2      	ldrb	r2, [r4, #2]
 80007da:	83ab      	strh	r3, [r5, #28]
 80007dc:	4613      	mov	r3, r2
 80007de:	77ab      	strb	r3, [r5, #30]
		pillList[i].ID = i;
 80007e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80007e4:	490c      	ldr	r1, [pc, #48]	@ (8000818 <sortEntries+0x1a0>)
 80007e6:	4613      	mov	r3, r2
 80007e8:	015b      	lsls	r3, r3, #5
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	440b      	add	r3, r1
 80007ee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80007f2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numPills; i++){
 80007f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007f8:	3301      	adds	r3, #1
 80007fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80007fe:	4b07      	ldr	r3, [pc, #28]	@ (800081c <sortEntries+0x1a4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000806:	429a      	cmp	r2, r3
 8000808:	f4ff af47 	bcc.w	800069a <sortEntries+0x22>

	}
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	@ 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000818:	20000080 	.word	0x20000080
 800081c:	2000007c 	.word	0x2000007c

08000820 <compPillEntry>:

//returns 1 if lhs is less than rhs
uint8_t compPillEntry(pillEntry lhs, pillEntry rhs){
 8000820:	b084      	sub	sp, #16
 8000822:	b490      	push	{r4, r7}
 8000824:	af00      	add	r7, sp, #0
 8000826:	f107 0408 	add.w	r4, r7, #8
 800082a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (!(lhs.dayofWeek == rhs.dayofWeek)){
 800082e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000832:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000836:	429a      	cmp	r2, r3
 8000838:	d009      	beq.n	800084e <compPillEntry+0x2e>
		return lhs.dayofWeek < rhs.dayofWeek;
 800083a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800083e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000842:	429a      	cmp	r2, r3
 8000844:	bf34      	ite	cc
 8000846:	2301      	movcc	r3, #1
 8000848:	2300      	movcs	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	e020      	b.n	8000890 <compPillEntry+0x70>
	}

	if (!(lhs.hour == rhs.hour)){
 800084e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000852:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000856:	429a      	cmp	r2, r3
 8000858:	d009      	beq.n	800086e <compPillEntry+0x4e>
		return lhs.hour < rhs.hour;
 800085a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800085e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000862:	429a      	cmp	r2, r3
 8000864:	bf34      	ite	cc
 8000866:	2301      	movcc	r3, #1
 8000868:	2300      	movcs	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	e010      	b.n	8000890 <compPillEntry+0x70>
	}

	if (!(lhs.min == rhs.min)){
 800086e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000872:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000876:	429a      	cmp	r2, r3
 8000878:	d009      	beq.n	800088e <compPillEntry+0x6e>
		return lhs.min < rhs.min;
 800087a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800087e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000882:	429a      	cmp	r2, r3
 8000884:	bf34      	ite	cc
 8000886:	2301      	movcc	r3, #1
 8000888:	2300      	movcs	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	e000      	b.n	8000890 <compPillEntry+0x70>
	}

	return 0;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bc90      	pop	{r4, r7}
 8000896:	b004      	add	sp, #16
 8000898:	4770      	bx	lr
	...

0800089c <update_last_due_pill_idx>:

uint8_t update_last_due_pill_idx(uint8_t dayofweek, uint8_t hour, uint8_t min){
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	460b      	mov	r3, r1
 80008a8:	71bb      	strb	r3, [r7, #6]
 80008aa:	4613      	mov	r3, r2
 80008ac:	717b      	strb	r3, [r7, #5]

	uint8_t i = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]
	//find closest next pill to the current time. Actual search algorithms be damned.
	for (i = 0; i < numPills; i++){
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	e04d      	b.n	8000954 <update_last_due_pill_idx+0xb8>
		if (!(dayofweek == pillList[i].dayofWeek)){
 80008b8:	7bfa      	ldrb	r2, [r7, #15]
 80008ba:	4931      	ldr	r1, [pc, #196]	@ (8000980 <update_last_due_pill_idx+0xe4>)
 80008bc:	4613      	mov	r3, r2
 80008be:	015b      	lsls	r3, r3, #5
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	331b      	adds	r3, #27
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	79fa      	ldrb	r2, [r7, #7]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d00d      	beq.n	80008ea <update_last_due_pill_idx+0x4e>
			if (dayofweek < pillList[i].dayofWeek){
 80008ce:	7bfa      	ldrb	r2, [r7, #15]
 80008d0:	492b      	ldr	r1, [pc, #172]	@ (8000980 <update_last_due_pill_idx+0xe4>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	015b      	lsls	r3, r3, #5
 80008d6:	1a9b      	subs	r3, r3, r2
 80008d8:	440b      	add	r3, r1
 80008da:	331b      	adds	r3, #27
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d202      	bcs.n	80008ea <update_last_due_pill_idx+0x4e>
				next_time_pill_idx = i;
 80008e4:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <update_last_due_pill_idx+0xe8>)
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	7013      	strb	r3, [r2, #0]
			}

		}

		if (!(hour == pillList[i].hour)){
 80008ea:	7bfa      	ldrb	r2, [r7, #15]
 80008ec:	4924      	ldr	r1, [pc, #144]	@ (8000980 <update_last_due_pill_idx+0xe4>)
 80008ee:	4613      	mov	r3, r2
 80008f0:	015b      	lsls	r3, r3, #5
 80008f2:	1a9b      	subs	r3, r3, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	331c      	adds	r3, #28
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	79ba      	ldrb	r2, [r7, #6]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d00d      	beq.n	800091c <update_last_due_pill_idx+0x80>
			if (dayofweek < pillList[i].dayofWeek){
 8000900:	7bfa      	ldrb	r2, [r7, #15]
 8000902:	491f      	ldr	r1, [pc, #124]	@ (8000980 <update_last_due_pill_idx+0xe4>)
 8000904:	4613      	mov	r3, r2
 8000906:	015b      	lsls	r3, r3, #5
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	440b      	add	r3, r1
 800090c:	331b      	adds	r3, #27
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	79fa      	ldrb	r2, [r7, #7]
 8000912:	429a      	cmp	r2, r3
 8000914:	d202      	bcs.n	800091c <update_last_due_pill_idx+0x80>
				next_time_pill_idx = i;
 8000916:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <update_last_due_pill_idx+0xe8>)
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	7013      	strb	r3, [r2, #0]
			}
		}

		if (!(min == pillList[i].min)){
 800091c:	7bfa      	ldrb	r2, [r7, #15]
 800091e:	4918      	ldr	r1, [pc, #96]	@ (8000980 <update_last_due_pill_idx+0xe4>)
 8000920:	4613      	mov	r3, r2
 8000922:	015b      	lsls	r3, r3, #5
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	440b      	add	r3, r1
 8000928:	331d      	adds	r3, #29
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	797a      	ldrb	r2, [r7, #5]
 800092e:	429a      	cmp	r2, r3
 8000930:	d00d      	beq.n	800094e <update_last_due_pill_idx+0xb2>
			if (dayofweek < pillList[i].dayofWeek){
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	4912      	ldr	r1, [pc, #72]	@ (8000980 <update_last_due_pill_idx+0xe4>)
 8000936:	4613      	mov	r3, r2
 8000938:	015b      	lsls	r3, r3, #5
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	440b      	add	r3, r1
 800093e:	331b      	adds	r3, #27
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	79fa      	ldrb	r2, [r7, #7]
 8000944:	429a      	cmp	r2, r3
 8000946:	d202      	bcs.n	800094e <update_last_due_pill_idx+0xb2>
				next_time_pill_idx = i;
 8000948:	4a0e      	ldr	r2, [pc, #56]	@ (8000984 <update_last_due_pill_idx+0xe8>)
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < numPills; i++){
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	3301      	adds	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <update_last_due_pill_idx+0xec>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	7bfa      	ldrb	r2, [r7, #15]
 800095a:	429a      	cmp	r2, r3
 800095c:	d3ac      	bcc.n	80008b8 <update_last_due_pill_idx+0x1c>
			}
		}
	}
	last_taken_pill_idx = (i == 0) ? 0 : i -1;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <update_last_due_pill_idx+0xd0>
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3b01      	subs	r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	e000      	b.n	800096e <update_last_due_pill_idx+0xd2>
 800096c:	2300      	movs	r3, #0
 800096e:	4a07      	ldr	r2, [pc, #28]	@ (800098c <update_last_due_pill_idx+0xf0>)
 8000970:	7013      	strb	r3, [r2, #0]

}
 8000972:	bf00      	nop
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	20000080 	.word	0x20000080
 8000984:	2000068e 	.word	0x2000068e
 8000988:	2000007c 	.word	0x2000007c
 800098c:	2000068f 	.word	0x2000068f

08000990 <get_next_pill_idx>:

uint8_t get_next_pill_idx(){
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	if (numPills == 1){
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <get_next_pill_idx+0x20>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d101      	bne.n	80009a0 <get_next_pill_idx+0x10>
		return 1;
 800099c:	2301      	movs	r3, #1
 800099e:	e001      	b.n	80009a4 <get_next_pill_idx+0x14>
	}
	else{
	return next_time_pill_idx;
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <get_next_pill_idx+0x24>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
	}
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000007c 	.word	0x2000007c
 80009b4:	2000068e 	.word	0x2000068e

080009b8 <getPillInfo>:
		last_taken_pill_idx = next_time_pill_idx - 1;
	}

}

pillEntry getPillInfo(uint8_t idx){
 80009b8:	b4b0      	push	{r4, r5, r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	return pillList[idx];
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	490e      	ldr	r1, [pc, #56]	@ (8000a04 <getPillInfo+0x4c>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	015b      	lsls	r3, r3, #5
 80009ce:	1a9b      	subs	r3, r3, r2
 80009d0:	18ca      	adds	r2, r1, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	6814      	ldr	r4, [r2, #0]
 80009d6:	6850      	ldr	r0, [r2, #4]
 80009d8:	6891      	ldr	r1, [r2, #8]
 80009da:	68d5      	ldr	r5, [r2, #12]
 80009dc:	601c      	str	r4, [r3, #0]
 80009de:	6058      	str	r0, [r3, #4]
 80009e0:	6099      	str	r1, [r3, #8]
 80009e2:	60dd      	str	r5, [r3, #12]
 80009e4:	6914      	ldr	r4, [r2, #16]
 80009e6:	6950      	ldr	r0, [r2, #20]
 80009e8:	6991      	ldr	r1, [r2, #24]
 80009ea:	611c      	str	r4, [r3, #16]
 80009ec:	6158      	str	r0, [r3, #20]
 80009ee:	6199      	str	r1, [r3, #24]
 80009f0:	8b91      	ldrh	r1, [r2, #28]
 80009f2:	7f92      	ldrb	r2, [r2, #30]
 80009f4:	8399      	strh	r1, [r3, #28]
 80009f6:	779a      	strb	r2, [r3, #30]
}
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bcb0      	pop	{r4, r5, r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000080 	.word	0x20000080

08000a08 <getNumPills>:

uint8_t getNumPills(){
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	return numPills;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <getNumPills+0x14>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	2000007c 	.word	0x2000007c

08000a20 <dispenserAvailable>:

uint8_t dispenserAvailable(uint8_t disp){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	return (~used_slots & (0x1 << disp)) >> disp;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <dispenserAvailable+0x30>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2101      	movs	r1, #1
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	401a      	ands	r2, r3
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	fa42 f303 	asr.w	r3, r2, r3
 8000a40:	b2db      	uxtb	r3, r3
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000690 	.word	0x20000690

08000a54 <deleteDispenser>:

void deleteDispenser(uint8_t disp){
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	b091      	sub	sp, #68	@ 0x44
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	466b      	mov	r3, sp
 8000a62:	60bb      	str	r3, [r7, #8]
	used_slots &= ~(0x1 << disp);
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	2201      	movs	r2, #1
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	b25a      	sxtb	r2, r3
 8000a72:	4b98      	ldr	r3, [pc, #608]	@ (8000cd4 <deleteDispenser+0x280>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	4013      	ands	r3, r2
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b95      	ldr	r3, [pc, #596]	@ (8000cd4 <deleteDispenser+0x280>)
 8000a80:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t newNumPills = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	pillEntry temp [numPills];
 8000a8e:	4b92      	ldr	r3, [pc, #584]	@ (8000cd8 <deleteDispenser+0x284>)
 8000a90:	781e      	ldrb	r6, [r3, #0]
 8000a92:	4633      	mov	r3, r6
 8000a94:	3b01      	subs	r3, #1
 8000a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a98:	b2f3      	uxtb	r3, r6
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	f04f 0100 	mov.w	r1, #0
 8000aac:	0159      	lsls	r1, r3, #5
 8000aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000ab2:	0150      	lsls	r0, r2, #5
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	6839      	ldr	r1, [r7, #0]
 8000aba:	ebb2 0801 	subs.w	r8, r2, r1
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	eb63 0901 	sbc.w	r9, r3, r1
 8000ac4:	f04f 0200 	mov.w	r2, #0
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ad0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ad4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ad8:	b2f3      	uxtb	r3, r6
 8000ada:	2200      	movs	r2, #0
 8000adc:	469a      	mov	sl, r3
 8000ade:	4693      	mov	fp, r2
 8000ae0:	4652      	mov	r2, sl
 8000ae2:	465b      	mov	r3, fp
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	f04f 0100 	mov.w	r1, #0
 8000aec:	0159      	lsls	r1, r3, #5
 8000aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000af2:	0150      	lsls	r0, r2, #5
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	ebb2 040a 	subs.w	r4, r2, sl
 8000afc:	eb63 050b 	sbc.w	r5, r3, fp
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	00eb      	lsls	r3, r5, #3
 8000b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b0e:	00e2      	lsls	r2, r4, #3
 8000b10:	4632      	mov	r2, r6
 8000b12:	4613      	mov	r3, r2
 8000b14:	015b      	lsls	r3, r3, #5
 8000b16:	1a9b      	subs	r3, r3, r2
 8000b18:	3307      	adds	r3, #7
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	ebad 0d03 	sub.w	sp, sp, r3
 8000b22:	466b      	mov	r3, sp
 8000b24:	3300      	adds	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
	for (i = 0; i < numPills; i++){
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000b2e:	e08d      	b.n	8000c4c <deleteDispenser+0x1f8>
		if (pillList[i].dispenserNum != disp){
 8000b30:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000b34:	4969      	ldr	r1, [pc, #420]	@ (8000cdc <deleteDispenser+0x288>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	015b      	lsls	r3, r3, #5
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	3301      	adds	r3, #1
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	7bfa      	ldrb	r2, [r7, #15]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d07c      	beq.n	8000c42 <deleteDispenser+0x1ee>
			pillEntry next =  {pillList[i].ID, pillList[i].dispenserNum, " ", pillList[i].hour, pillList[i].min, pillList[i].taken};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	221f      	movs	r2, #31
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f009 ff05 	bl	800a960 <memset>
 8000b56:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000b5a:	4960      	ldr	r1, [pc, #384]	@ (8000cdc <deleteDispenser+0x288>)
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	015b      	lsls	r3, r3, #5
 8000b60:	1a9b      	subs	r3, r3, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	753b      	strb	r3, [r7, #20]
 8000b68:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000b6c:	495b      	ldr	r1, [pc, #364]	@ (8000cdc <deleteDispenser+0x288>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	015b      	lsls	r3, r3, #5
 8000b72:	1a9b      	subs	r3, r3, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	3301      	adds	r3, #1
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	757b      	strb	r3, [r7, #21]
 8000b7c:	4b58      	ldr	r3, [pc, #352]	@ (8000ce0 <deleteDispenser+0x28c>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	82fb      	strh	r3, [r7, #22]
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	f8c3 2013 	str.w	r2, [r3, #19]
 8000b96:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000b9a:	4950      	ldr	r1, [pc, #320]	@ (8000cdc <deleteDispenser+0x288>)
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	015b      	lsls	r3, r3, #5
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	331c      	adds	r3, #28
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000bac:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000bb0:	494a      	ldr	r1, [pc, #296]	@ (8000cdc <deleteDispenser+0x288>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	015b      	lsls	r3, r3, #5
 8000bb6:	1a9b      	subs	r3, r3, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	331d      	adds	r3, #29
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8000bc2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000bc6:	4945      	ldr	r1, [pc, #276]	@ (8000cdc <deleteDispenser+0x288>)
 8000bc8:	4613      	mov	r3, r2
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	1a9b      	subs	r3, r3, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	331e      	adds	r3, #30
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
			memcpy(next.name, pillList[i].name, 25);
 8000bd8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000bdc:	4613      	mov	r3, r2
 8000bde:	015b      	lsls	r3, r3, #5
 8000be0:	1a9b      	subs	r3, r3, r2
 8000be2:	4a3e      	ldr	r2, [pc, #248]	@ (8000cdc <deleteDispenser+0x288>)
 8000be4:	4413      	add	r3, r2
 8000be6:	1c9a      	adds	r2, r3, #2
 8000be8:	f107 0316 	add.w	r3, r7, #22
 8000bec:	6810      	ldr	r0, [r2, #0]
 8000bee:	6851      	ldr	r1, [r2, #4]
 8000bf0:	6895      	ldr	r5, [r2, #8]
 8000bf2:	68d4      	ldr	r4, [r2, #12]
 8000bf4:	6018      	str	r0, [r3, #0]
 8000bf6:	6059      	str	r1, [r3, #4]
 8000bf8:	609d      	str	r5, [r3, #8]
 8000bfa:	60dc      	str	r4, [r3, #12]
 8000bfc:	6910      	ldr	r0, [r2, #16]
 8000bfe:	6951      	ldr	r1, [r2, #20]
 8000c00:	6118      	str	r0, [r3, #16]
 8000c02:	6159      	str	r1, [r3, #20]
 8000c04:	7e12      	ldrb	r2, [r2, #24]
 8000c06:	761a      	strb	r2, [r3, #24]
			temp[newNumPills] = next;
 8000c08:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000c0c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000c0e:	4613      	mov	r3, r2
 8000c10:	015b      	lsls	r3, r3, #5
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	461d      	mov	r5, r3
 8000c18:	f107 0414 	add.w	r4, r7, #20
 8000c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1e:	6028      	str	r0, [r5, #0]
 8000c20:	6069      	str	r1, [r5, #4]
 8000c22:	60aa      	str	r2, [r5, #8]
 8000c24:	60eb      	str	r3, [r5, #12]
 8000c26:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000c28:	6128      	str	r0, [r5, #16]
 8000c2a:	6169      	str	r1, [r5, #20]
 8000c2c:	61aa      	str	r2, [r5, #24]
 8000c2e:	8823      	ldrh	r3, [r4, #0]
 8000c30:	78a2      	ldrb	r2, [r4, #2]
 8000c32:	83ab      	strh	r3, [r5, #28]
 8000c34:	4613      	mov	r3, r2
 8000c36:	77ab      	strb	r3, [r5, #30]
			newNumPills++;
 8000c38:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for (i = 0; i < numPills; i++){
 8000c42:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c46:	3301      	adds	r3, #1
 8000c48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <deleteDispenser+0x284>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f4ff af6b 	bcc.w	8000b30 <deleteDispenser+0xdc>
		}
	}


	for (i = 0; i < newNumPills; i++){
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000c60:	e025      	b.n	8000cae <deleteDispenser+0x25a>
		pillList[i] = temp[i];
 8000c62:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000c66:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8000c6a:	481c      	ldr	r0, [pc, #112]	@ (8000cdc <deleteDispenser+0x288>)
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	015b      	lsls	r3, r3, #5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	4418      	add	r0, r3
 8000c74:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000c76:	4613      	mov	r3, r2
 8000c78:	015b      	lsls	r3, r3, #5
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	18ca      	adds	r2, r1, r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6814      	ldr	r4, [r2, #0]
 8000c82:	6850      	ldr	r0, [r2, #4]
 8000c84:	6891      	ldr	r1, [r2, #8]
 8000c86:	68d5      	ldr	r5, [r2, #12]
 8000c88:	601c      	str	r4, [r3, #0]
 8000c8a:	6058      	str	r0, [r3, #4]
 8000c8c:	6099      	str	r1, [r3, #8]
 8000c8e:	60dd      	str	r5, [r3, #12]
 8000c90:	6914      	ldr	r4, [r2, #16]
 8000c92:	6950      	ldr	r0, [r2, #20]
 8000c94:	6991      	ldr	r1, [r2, #24]
 8000c96:	611c      	str	r4, [r3, #16]
 8000c98:	6158      	str	r0, [r3, #20]
 8000c9a:	6199      	str	r1, [r3, #24]
 8000c9c:	8b91      	ldrh	r1, [r2, #28]
 8000c9e:	7f92      	ldrb	r2, [r2, #30]
 8000ca0:	8399      	strh	r1, [r3, #28]
 8000ca2:	779a      	strb	r2, [r3, #30]
	for (i = 0; i < newNumPills; i++){
 8000ca4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000cae:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000cb2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3d3      	bcc.n	8000c62 <deleteDispenser+0x20e>
	}

	sortEntries();
 8000cba:	f7ff fcdd 	bl	8000678 <sortEntries>
	numPills = newNumPills;
 8000cbe:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <deleteDispenser+0x284>)
 8000cc0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000cc4:	7013      	strb	r3, [r2, #0]
	return;
 8000cc6:	bf00      	nop
 8000cc8:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8000ccc:	3744      	adds	r7, #68	@ 0x44
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd4:	20000690 	.word	0x20000690
 8000cd8:	2000007c 	.word	0x2000007c
 8000cdc:	20000080 	.word	0x20000080
 8000ce0:	0800b278 	.word	0x0800b278

08000ce4 <clearPillList>:


void clearPillList(){
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	numPills = 0;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <clearPillList+0x14>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	2000007c 	.word	0x2000007c

08000cfc <loadNewPillsDisplay>:

void loadNewPillsDisplay(uint8_t dispNum, uint8_t pillOption, uint8_t * daysofWeek, uint8_t hour, uint8_t Minute, uint8_t AMPM){
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b08d      	sub	sp, #52	@ 0x34
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	603a      	str	r2, [r7, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	71bb      	strb	r3, [r7, #6]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char name[25];

	switch (pillOption){
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	3b67      	subs	r3, #103	@ 0x67
 8000d1c:	2b12      	cmp	r3, #18
 8000d1e:	d849      	bhi.n	8000db4 <loadNewPillsDisplay+0xb8>
 8000d20:	a201      	add	r2, pc, #4	@ (adr r2, 8000d28 <loadNewPillsDisplay+0x2c>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d95 	.word	0x08000d95
 8000d2c:	08000da5 	.word	0x08000da5
 8000d30:	08000db5 	.word	0x08000db5
 8000d34:	08000db5 	.word	0x08000db5
 8000d38:	08000db5 	.word	0x08000db5
 8000d3c:	08000db5 	.word	0x08000db5
 8000d40:	08000db5 	.word	0x08000db5
 8000d44:	08000db5 	.word	0x08000db5
 8000d48:	08000db5 	.word	0x08000db5
 8000d4c:	08000db5 	.word	0x08000db5
 8000d50:	08000db5 	.word	0x08000db5
 8000d54:	08000d75 	.word	0x08000d75
 8000d58:	08000db5 	.word	0x08000db5
 8000d5c:	08000db5 	.word	0x08000db5
 8000d60:	08000db5 	.word	0x08000db5
 8000d64:	08000db5 	.word	0x08000db5
 8000d68:	08000db5 	.word	0x08000db5
 8000d6c:	08000db5 	.word	0x08000db5
 8000d70:	08000d85 	.word	0x08000d85
	case 'r':
		memcpy(name, "Red Skittle", 12);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	220c      	movs	r2, #12
 8000d7a:	492a      	ldr	r1, [pc, #168]	@ (8000e24 <loadNewPillsDisplay+0x128>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fe23 	bl	800a9c8 <memcpy>
		break;
 8000d82:	e017      	b.n	8000db4 <loadNewPillsDisplay+0xb8>
	case 'y':
		memcpy(name, "Yellow Skittle", 15);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	220f      	movs	r2, #15
 8000d8a:	4927      	ldr	r1, [pc, #156]	@ (8000e28 <loadNewPillsDisplay+0x12c>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f009 fe1b 	bl	800a9c8 <memcpy>
		break;
 8000d92:	e00f      	b.n	8000db4 <loadNewPillsDisplay+0xb8>
	case 'g':
		memcpy(name, "Green Skittle", 14);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	220e      	movs	r2, #14
 8000d9a:	4924      	ldr	r1, [pc, #144]	@ (8000e2c <loadNewPillsDisplay+0x130>)
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f009 fe13 	bl	800a9c8 <memcpy>
		break;
 8000da2:	e007      	b.n	8000db4 <loadNewPillsDisplay+0xb8>
	case 'h':
		memcpy(name, "Hot Tamale", 11);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	220b      	movs	r2, #11
 8000daa:	4921      	ldr	r1, [pc, #132]	@ (8000e30 <loadNewPillsDisplay+0x134>)
 8000dac:	4618      	mov	r0, r3
 8000dae:	f009 fe0b 	bl	800a9c8 <memcpy>
		break;
 8000db2:	bf00      	nop
	}




	for (i = 0; i < 7; i++){
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dba:	e02a      	b.n	8000e12 <loadNewPillsDisplay+0x116>
		if (daysofWeek[i]){
 8000dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d01e      	beq.n	8000e08 <loadNewPillsDisplay+0x10c>
			loadNewPillEntry(dispNum, name, i, hour % 12 + (AMPM * 12), Minute);
 8000dca:	797a      	ldrb	r2, [r7, #5]
 8000dcc:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <loadNewPillsDisplay+0x138>)
 8000dce:	fba3 1302 	umull	r1, r3, r3, r2
 8000dd2:	08d9      	lsrs	r1, r3, #3
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	440b      	add	r3, r1
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000de4:	4619      	mov	r1, r3
 8000de6:	0049      	lsls	r1, r1, #1
 8000de8:	440b      	add	r3, r1
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b2dc      	uxtb	r4, r3
 8000df2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000df6:	f107 010c 	add.w	r1, r7, #12
 8000dfa:	79f8      	ldrb	r0, [r7, #7]
 8000dfc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	4623      	mov	r3, r4
 8000e04:	f000 f818 	bl	8000e38 <loadNewPillEntry>
	for (i = 0; i < 7; i++){
 8000e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d9d0      	bls.n	8000dbc <loadNewPillsDisplay+0xc0>

		}
	}

}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	372c      	adds	r7, #44	@ 0x2c
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	0800b294 	.word	0x0800b294
 8000e28:	0800b2a0 	.word	0x0800b2a0
 8000e2c:	0800b2b0 	.word	0x0800b2b0
 8000e30:	0800b2c0 	.word	0x0800b2c0
 8000e34:	aaaaaaab 	.word	0xaaaaaaab

08000e38 <loadNewPillEntry>:
//explicitly ONLY for when we are loading in a pre-sorted list of entries.
void loadNewPillEntry(uint8_t dispenserNum, char * name, uint8_t dayofWeek, uint8_t hour, uint8_t min){
 8000e38:	b4b0      	push	{r4, r5, r7}
 8000e3a:	b08b      	sub	sp, #44	@ 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6039      	str	r1, [r7, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	461a      	mov	r2, r3
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	71bb      	strb	r3, [r7, #6]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	717b      	strb	r3, [r7, #5]
	//uint8_t ID; uint8_t dispenserNum; char * name; uint8_t dayofWeek; uint8_t hour; uint8_t min; uint8_t taken;
	//lmao don't know how to do this a better way but it might work ig
	pillEntry wew = {numPills, dispenserNum, " ", dayofWeek, hour, min, 1};
 8000e50:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <loadNewPillEntry+0xdc>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	723b      	strb	r3, [r7, #8]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	727b      	strb	r3, [r7, #9]
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <loadNewPillEntry+0xe0>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	817b      	strh	r3, [r7, #10]
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	f8c3 2013 	str.w	r2, [r3, #19]
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000e7a:	797b      	ldrb	r3, [r7, #5]
 8000e7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000e80:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000e84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	memcpy(wew.name, name, 25);
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	f107 030a 	add.w	r3, r7, #10
 8000e94:	6810      	ldr	r0, [r2, #0]
 8000e96:	6851      	ldr	r1, [r2, #4]
 8000e98:	6895      	ldr	r5, [r2, #8]
 8000e9a:	68d4      	ldr	r4, [r2, #12]
 8000e9c:	6018      	str	r0, [r3, #0]
 8000e9e:	6059      	str	r1, [r3, #4]
 8000ea0:	609d      	str	r5, [r3, #8]
 8000ea2:	60dc      	str	r4, [r3, #12]
 8000ea4:	6910      	ldr	r0, [r2, #16]
 8000ea6:	6951      	ldr	r1, [r2, #20]
 8000ea8:	6118      	str	r0, [r3, #16]
 8000eaa:	6159      	str	r1, [r3, #20]
 8000eac:	7e12      	ldrb	r2, [r2, #24]
 8000eae:	761a      	strb	r2, [r3, #24]
	used_slots |= 0x1 << dispenserNum;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	b25a      	sxtb	r2, r3
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <loadNewPillEntry+0xe4>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <loadNewPillEntry+0xe4>)
 8000ec8:	701a      	strb	r2, [r3, #0]
	pillList[numPills] = wew;
 8000eca:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <loadNewPillEntry+0xdc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <loadNewPillEntry+0xe8>)
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	015b      	lsls	r3, r3, #5
 8000ed6:	1a5b      	subs	r3, r3, r1
 8000ed8:	4413      	add	r3, r2
 8000eda:	461d      	mov	r5, r3
 8000edc:	f107 0408 	add.w	r4, r7, #8
 8000ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee2:	6028      	str	r0, [r5, #0]
 8000ee4:	6069      	str	r1, [r5, #4]
 8000ee6:	60aa      	str	r2, [r5, #8]
 8000ee8:	60eb      	str	r3, [r5, #12]
 8000eea:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000eec:	6128      	str	r0, [r5, #16]
 8000eee:	6169      	str	r1, [r5, #20]
 8000ef0:	61aa      	str	r2, [r5, #24]
 8000ef2:	8823      	ldrh	r3, [r4, #0]
 8000ef4:	78a2      	ldrb	r2, [r4, #2]
 8000ef6:	83ab      	strh	r3, [r5, #28]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	77ab      	strb	r3, [r5, #30]
	numPills++;
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <loadNewPillEntry+0xdc>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <loadNewPillEntry+0xdc>)
 8000f06:	701a      	strb	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	372c      	adds	r7, #44	@ 0x2c
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bcb0      	pop	{r4, r5, r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	2000007c 	.word	0x2000007c
 8000f18:	0800b278 	.word	0x0800b278
 8000f1c:	20000690 	.word	0x20000690
 8000f20:	20000080 	.word	0x20000080

08000f24 <automaticDispense>:


void automaticDispense(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	uint8_t i = last_taken_pill_idx;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <automaticDispense+0x64>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
	for (; i < next_time_pill_idx; i++){
 8000f30:	e01c      	b.n	8000f6c <automaticDispense+0x48>
		switch(pillList[i].dispenserNum){
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	4915      	ldr	r1, [pc, #84]	@ (8000f8c <automaticDispense+0x68>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3301      	adds	r3, #1
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d00c      	beq.n	8000f60 <automaticDispense+0x3c>
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	dc0d      	bgt.n	8000f66 <automaticDispense+0x42>
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <automaticDispense+0x30>
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d003      	beq.n	8000f5a <automaticDispense+0x36>
 8000f52:	e008      	b.n	8000f66 <automaticDispense+0x42>
		case 0:
			Dispense1();
 8000f54:	f000 f81e 	bl	8000f94 <Dispense1>
			break;
 8000f58:	e005      	b.n	8000f66 <automaticDispense+0x42>
		case 1:
			Dispense2();
 8000f5a:	f000 f84b 	bl	8000ff4 <Dispense2>
			break;
 8000f5e:	e002      	b.n	8000f66 <automaticDispense+0x42>
		case 2:
			Dispense3();
 8000f60:	f000 f87c 	bl	800105c <Dispense3>
			break;
 8000f64:	bf00      	nop
	for (; i < next_time_pill_idx; i++){
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <automaticDispense+0x6c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3dd      	bcc.n	8000f32 <automaticDispense+0xe>
		}
	}
	last_taken_pill_idx = i - 1;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b02      	ldr	r3, [pc, #8]	@ (8000f88 <automaticDispense+0x64>)
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000068f 	.word	0x2000068f
 8000f8c:	20000080 	.word	0x20000080
 8000f90:	2000068e 	.word	0x2000068e

08000f94 <Dispense1>:

void Dispense1(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f9e:	4813      	ldr	r0, [pc, #76]	@ (8000fec <Dispense1+0x58>)
 8000fa0:	f005 fcc0 	bl	8006924 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <Dispense1+0x5c>)
 8000faa:	f005 fcbb 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	480f      	ldr	r0, [pc, #60]	@ (8000ff0 <Dispense1+0x5c>)
 8000fb4:	f005 fcb6 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000fb8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fbc:	f005 fa16 	bl	80063ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	480a      	ldr	r0, [pc, #40]	@ (8000ff0 <Dispense1+0x5c>)
 8000fc6:	f005 fcad 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <Dispense1+0x5c>)
 8000fd0:	f005 fca8 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000fd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fd8:	f005 fa08 	bl	80063ec <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe2:	4802      	ldr	r0, [pc, #8]	@ (8000fec <Dispense1+0x58>)
 8000fe4:	f005 fc9e 	bl	8006924 <HAL_GPIO_WritePin>

	return;
 8000fe8:	bf00      	nop
}
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	48000800 	.word	0x48000800
 8000ff0:	48001400 	.word	0x48001400

08000ff4 <Dispense2>:

void Dispense2(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ffe:	4815      	ldr	r0, [pc, #84]	@ (8001054 <Dispense2+0x60>)
 8001000:	f005 fc90 	bl	8006924 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800100a:	4812      	ldr	r0, [pc, #72]	@ (8001054 <Dispense2+0x60>)
 800100c:	f005 fc8a 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001016:	4810      	ldr	r0, [pc, #64]	@ (8001058 <Dispense2+0x64>)
 8001018:	f005 fc84 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800101c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001020:	f005 f9e4 	bl	80063ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800102a:	480b      	ldr	r0, [pc, #44]	@ (8001058 <Dispense2+0x64>)
 800102c:	f005 fc7a 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001036:	4807      	ldr	r0, [pc, #28]	@ (8001054 <Dispense2+0x60>)
 8001038:	f005 fc74 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800103c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001040:	f005 f9d4 	bl	80063ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800104a:	4802      	ldr	r0, [pc, #8]	@ (8001054 <Dispense2+0x60>)
 800104c:	f005 fc6a 	bl	8006924 <HAL_GPIO_WritePin>

	return;
 8001050:	bf00      	nop
}
 8001052:	bd80      	pop	{r7, pc}
 8001054:	48001000 	.word	0x48001000
 8001058:	48001400 	.word	0x48001400

0800105c <Dispense3>:

void Dispense3(){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001066:	4815      	ldr	r0, [pc, #84]	@ (80010bc <Dispense3+0x60>)
 8001068:	f005 fc5c 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001072:	4812      	ldr	r0, [pc, #72]	@ (80010bc <Dispense3+0x60>)
 8001074:	f005 fc56 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800107e:	4810      	ldr	r0, [pc, #64]	@ (80010c0 <Dispense3+0x64>)
 8001080:	f005 fc50 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001084:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001088:	f005 f9b0 	bl	80063ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001092:	480a      	ldr	r0, [pc, #40]	@ (80010bc <Dispense3+0x60>)
 8001094:	f005 fc46 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109e:	4808      	ldr	r0, [pc, #32]	@ (80010c0 <Dispense3+0x64>)
 80010a0:	f005 fc40 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80010a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010a8:	f005 f9a0 	bl	80063ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b2:	4802      	ldr	r0, [pc, #8]	@ (80010bc <Dispense3+0x60>)
 80010b4:	f005 fc36 	bl	8006924 <HAL_GPIO_WritePin>
	return;
 80010b8:	bf00      	nop
}
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	48001400 	.word	0x48001400
 80010c0:	48001000 	.word	0x48001000

080010c4 <lock>:
 */

#ifndef INC_STEPPER_H_
#define INC_STEPPER_H_

void lock(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2102      	movs	r1, #2
 80010ce:	4810      	ldr	r0, [pc, #64]	@ (8001110 <lock+0x4c>)
 80010d0:	f005 fc28 	bl	8006924 <HAL_GPIO_WritePin>
    for(int i=1;i<=100;i++){  //Moving stepper motor forward
 80010d4:	2301      	movs	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	e012      	b.n	8001100 <lock+0x3c>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2101      	movs	r1, #1
 80010de:	480c      	ldr	r0, [pc, #48]	@ (8001110 <lock+0x4c>)
 80010e0:	f005 fc20 	bl	8006924 <HAL_GPIO_WritePin>
      HAL_Delay(25);
 80010e4:	2019      	movs	r0, #25
 80010e6:	f005 f981 	bl	80063ec <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	4808      	ldr	r0, [pc, #32]	@ (8001110 <lock+0x4c>)
 80010f0:	f005 fc18 	bl	8006924 <HAL_GPIO_WritePin>
      HAL_Delay(25);
 80010f4:	2019      	movs	r0, #25
 80010f6:	f005 f979 	bl	80063ec <HAL_Delay>
    for(int i=1;i<=100;i++){  //Moving stepper motor forward
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b64      	cmp	r3, #100	@ 0x64
 8001104:	dde9      	ble.n	80010da <lock+0x16>
    }
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	48000800 	.word	0x48000800

08001114 <unlock>:
void unlock(){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2102      	movs	r1, #2
 800111e:	4810      	ldr	r0, [pc, #64]	@ (8001160 <unlock+0x4c>)
 8001120:	f005 fc00 	bl	8006924 <HAL_GPIO_WritePin>
    for(int i=1;i<=100;i++){  //Moving stepper motor forward
 8001124:	2301      	movs	r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	e012      	b.n	8001150 <unlock+0x3c>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	2101      	movs	r1, #1
 800112e:	480c      	ldr	r0, [pc, #48]	@ (8001160 <unlock+0x4c>)
 8001130:	f005 fbf8 	bl	8006924 <HAL_GPIO_WritePin>
      HAL_Delay(25);
 8001134:	2019      	movs	r0, #25
 8001136:	f005 f959 	bl	80063ec <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	4808      	ldr	r0, [pc, #32]	@ (8001160 <unlock+0x4c>)
 8001140:	f005 fbf0 	bl	8006924 <HAL_GPIO_WritePin>
      HAL_Delay(25);
 8001144:	2019      	movs	r0, #25
 8001146:	f005 f951 	bl	80063ec <HAL_Delay>
    for(int i=1;i<=100;i++){  //Moving stepper motor forward
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3301      	adds	r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b64      	cmp	r3, #100	@ 0x64
 8001154:	dde9      	ble.n	800112a <unlock+0x16>
    }
};
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	48000800 	.word	0x48000800

08001164 <authenticate>:
#define _Open_Sans_Bold_128      &Open_Sans_Bold_128

	uint16_t touchX = 0;
	uint16_t touchY = 0;

void authenticate(){
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af02      	add	r7, sp, #8
	   fillScreen(ILI9488_WHITE);
 800116a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800116e:	f003 f973 	bl	8004458 <fillScreen>
		uint16_t touchX = 0, touchY = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	83bb      	strh	r3, [r7, #28]
 8001176:	2300      	movs	r3, #0
 8001178:	837b      	strh	r3, [r7, #26]
	   fillRect(100, 30,75,75, ILI9488_RED);
 800117a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	234b      	movs	r3, #75	@ 0x4b
 8001182:	224b      	movs	r2, #75	@ 0x4b
 8001184:	211e      	movs	r1, #30
 8001186:	2064      	movs	r0, #100	@ 0x64
 8001188:	f003 f980 	bl	800448c <fillRect>
	   drawCharTest(130, 55, '1', ILI9488_WHITE,ILI9488_RED, 3);
 800118c:	2303      	movs	r3, #3
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800119a:	2231      	movs	r2, #49	@ 0x31
 800119c:	2137      	movs	r1, #55	@ 0x37
 800119e:	2082      	movs	r0, #130	@ 0x82
 80011a0:	f003 fc78 	bl	8004a94 <drawCharTest>
	   fillRect(200, 30,75,75, ILI9488_RED);
 80011a4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	234b      	movs	r3, #75	@ 0x4b
 80011ac:	224b      	movs	r2, #75	@ 0x4b
 80011ae:	211e      	movs	r1, #30
 80011b0:	20c8      	movs	r0, #200	@ 0xc8
 80011b2:	f003 f96b 	bl	800448c <fillRect>
	   drawCharTest(230, 55, '2', ILI9488_WHITE,ILI9488_RED, 3);
 80011b6:	2303      	movs	r3, #3
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c4:	2232      	movs	r2, #50	@ 0x32
 80011c6:	2137      	movs	r1, #55	@ 0x37
 80011c8:	20e6      	movs	r0, #230	@ 0xe6
 80011ca:	f003 fc63 	bl	8004a94 <drawCharTest>
	   fillRect(300, 30,75,75, ILI9488_RED);
 80011ce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	234b      	movs	r3, #75	@ 0x4b
 80011d6:	224b      	movs	r2, #75	@ 0x4b
 80011d8:	211e      	movs	r1, #30
 80011da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011de:	f003 f955 	bl	800448c <fillRect>
	   drawCharTest(319, 55, '3', ILI9488_WHITE,ILI9488_RED, 3);
 80011e2:	2303      	movs	r3, #3
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011f0:	2233      	movs	r2, #51	@ 0x33
 80011f2:	2137      	movs	r1, #55	@ 0x37
 80011f4:	f240 103f 	movw	r0, #319	@ 0x13f
 80011f8:	f003 fc4c 	bl	8004a94 <drawCharTest>
	   fillRect(100, 130,75,75, ILI9488_RED);
 80011fc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	234b      	movs	r3, #75	@ 0x4b
 8001204:	224b      	movs	r2, #75	@ 0x4b
 8001206:	2182      	movs	r1, #130	@ 0x82
 8001208:	2064      	movs	r0, #100	@ 0x64
 800120a:	f003 f93f 	bl	800448c <fillRect>
	   drawCharTest(130, 150, '4', ILI9488_WHITE,ILI9488_RED, 3);
 800120e:	2303      	movs	r3, #3
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800121c:	2234      	movs	r2, #52	@ 0x34
 800121e:	2196      	movs	r1, #150	@ 0x96
 8001220:	2082      	movs	r0, #130	@ 0x82
 8001222:	f003 fc37 	bl	8004a94 <drawCharTest>
	   fillRect(200, 130,75,75, ILI9488_RED);
 8001226:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	234b      	movs	r3, #75	@ 0x4b
 800122e:	224b      	movs	r2, #75	@ 0x4b
 8001230:	2182      	movs	r1, #130	@ 0x82
 8001232:	20c8      	movs	r0, #200	@ 0xc8
 8001234:	f003 f92a 	bl	800448c <fillRect>
	   drawCharTest(230, 150, '5', ILI9488_WHITE,ILI9488_RED, 3);
 8001238:	2303      	movs	r3, #3
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001246:	2235      	movs	r2, #53	@ 0x35
 8001248:	2196      	movs	r1, #150	@ 0x96
 800124a:	20e6      	movs	r0, #230	@ 0xe6
 800124c:	f003 fc22 	bl	8004a94 <drawCharTest>
	   fillRect(300, 130,75,75, ILI9488_RED);
 8001250:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	234b      	movs	r3, #75	@ 0x4b
 8001258:	224b      	movs	r2, #75	@ 0x4b
 800125a:	2182      	movs	r1, #130	@ 0x82
 800125c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001260:	f003 f914 	bl	800448c <fillRect>
	   drawCharTest(319, 150, '6', ILI9488_WHITE,ILI9488_RED, 3);
 8001264:	2303      	movs	r3, #3
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001272:	2236      	movs	r2, #54	@ 0x36
 8001274:	2196      	movs	r1, #150	@ 0x96
 8001276:	f240 103f 	movw	r0, #319	@ 0x13f
 800127a:	f003 fc0b 	bl	8004a94 <drawCharTest>
	   fillRect(100, 230,75,75, ILI9488_RED);
 800127e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	234b      	movs	r3, #75	@ 0x4b
 8001286:	224b      	movs	r2, #75	@ 0x4b
 8001288:	21e6      	movs	r1, #230	@ 0xe6
 800128a:	2064      	movs	r0, #100	@ 0x64
 800128c:	f003 f8fe 	bl	800448c <fillRect>
	   drawCharTest(130, 250, '7', ILI9488_WHITE,ILI9488_RED, 3);
 8001290:	2303      	movs	r3, #3
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800129e:	2237      	movs	r2, #55	@ 0x37
 80012a0:	21fa      	movs	r1, #250	@ 0xfa
 80012a2:	2082      	movs	r0, #130	@ 0x82
 80012a4:	f003 fbf6 	bl	8004a94 <drawCharTest>
	   fillRect(200, 230,75,75, ILI9488_RED);
 80012a8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	234b      	movs	r3, #75	@ 0x4b
 80012b0:	224b      	movs	r2, #75	@ 0x4b
 80012b2:	21e6      	movs	r1, #230	@ 0xe6
 80012b4:	20c8      	movs	r0, #200	@ 0xc8
 80012b6:	f003 f8e9 	bl	800448c <fillRect>
	   drawCharTest(230, 250, '8', ILI9488_WHITE,ILI9488_RED, 3);
 80012ba:	2303      	movs	r3, #3
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c8:	2238      	movs	r2, #56	@ 0x38
 80012ca:	21fa      	movs	r1, #250	@ 0xfa
 80012cc:	20e6      	movs	r0, #230	@ 0xe6
 80012ce:	f003 fbe1 	bl	8004a94 <drawCharTest>
	   fillRect(300, 230,75,75, ILI9488_RED);
 80012d2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	234b      	movs	r3, #75	@ 0x4b
 80012da:	224b      	movs	r2, #75	@ 0x4b
 80012dc:	21e6      	movs	r1, #230	@ 0xe6
 80012de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012e2:	f003 f8d3 	bl	800448c <fillRect>
	   drawCharTest(319, 250, '9', ILI9488_WHITE,ILI9488_RED, 3);
 80012e6:	2303      	movs	r3, #3
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012f4:	2239      	movs	r2, #57	@ 0x39
 80012f6:	21fa      	movs	r1, #250	@ 0xfa
 80012f8:	f240 103f 	movw	r0, #319	@ 0x13f
 80012fc:	f003 fbca 	bl	8004a94 <drawCharTest>
	   //drawChar(135, 61, '1', ILI9488_BLACK,ILI9488_RED, 1);


	   uint16_t count = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	83fb      	strh	r3, [r7, #30]
	   char entered[6] = "     ";
 8001304:	4a27      	ldr	r2, [pc, #156]	@ (80013a4 <authenticate+0x240>)
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130e:	6018      	str	r0, [r3, #0]
 8001310:	3304      	adds	r3, #4
 8001312:	8019      	strh	r1, [r3, #0]
	   char passcode[6] = "12345";
 8001314:	4a24      	ldr	r2, [pc, #144]	@ (80013a8 <authenticate+0x244>)
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800131e:	6018      	str	r0, [r3, #0]
 8001320:	3304      	adds	r3, #4
 8001322:	8019      	strh	r1, [r3, #0]

	  while (1)
	  {
		  touchX = getX();
 8001324:	f004 ffb0 	bl	8006288 <getX>
 8001328:	4603      	mov	r3, r0
 800132a:	83bb      	strh	r3, [r7, #28]
		  touchY = getY();
 800132c:	f004 ffb6 	bl	800629c <getY>
 8001330:	4603      	mov	r3, r0
 8001332:	837b      	strh	r3, [r7, #26]

		  ILI9488_printText(entered, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 8001334:	f107 0014 	add.w	r0, r7, #20
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	220a      	movs	r2, #10
 8001346:	210a      	movs	r1, #10
 8001348:	f003 fd2a 	bl	8004da0 <ILI9488_printText>

		  //absolutely horrible password checking...but works for testing TODO: make this not horrible.
		  if(count == 5){
 800134c:	8bfb      	ldrh	r3, [r7, #30]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d12e      	bne.n	80013b0 <authenticate+0x24c>
			  if (!strcmp(entered, passcode)){
 8001352:	f107 020c 	add.w	r2, r7, #12
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7fe ff57 	bl	8000210 <strcmp>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <authenticate+0x20a>
				  Home_Screen();
 8001368:	f000 fcd6 	bl	8001d18 <Home_Screen>
 800136c:	e220      	b.n	80017b0 <authenticate+0x64c>
				  return;

			  }
			  else {
				  char not_success_msg [10] = "Invalid, try again";
 800136e:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <authenticate+0x248>)
 8001370:	463b      	mov	r3, r7
 8001372:	ca07      	ldmia	r2, {r0, r1, r2}
 8001374:	c303      	stmia	r3!, {r0, r1}
 8001376:	801a      	strh	r2, [r3, #0]
				  
				  ILI9488_printText(not_success_msg, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 2);
 8001378:	4638      	mov	r0, r7
 800137a:	2302      	movs	r3, #2
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	220a      	movs	r2, #10
 8001388:	210a      	movs	r1, #10
 800138a:	f003 fd09 	bl	8004da0 <ILI9488_printText>
				  memset(passcode,' ', 5);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2205      	movs	r2, #5
 8001394:	2120      	movs	r1, #32
 8001396:	4618      	mov	r0, r3
 8001398:	f009 fae2 	bl	800a960 <memset>
				  count = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	83fb      	strh	r3, [r7, #30]

			  }
			  break;
 80013a0:	e206      	b.n	80017b0 <authenticate+0x64c>
 80013a2:	bf00      	nop
 80013a4:	0800b2cc 	.word	0x0800b2cc
 80013a8:	0800b2d4 	.word	0x0800b2d4
 80013ac:	0800b2dc 	.word	0x0800b2dc
		   * 75, 52
			75, 67
			97, 55
			97, 67
		   */
		  if(touchX >= 75 && touchX < 97 && touchY >= 52 && touchY < 67){
 80013b0:	8bbb      	ldrh	r3, [r7, #28]
 80013b2:	2b4a      	cmp	r3, #74	@ 0x4a
 80013b4:	d932      	bls.n	800141c <authenticate+0x2b8>
 80013b6:	8bbb      	ldrh	r3, [r7, #28]
 80013b8:	2b60      	cmp	r3, #96	@ 0x60
 80013ba:	d82f      	bhi.n	800141c <authenticate+0x2b8>
 80013bc:	8b7b      	ldrh	r3, [r7, #26]
 80013be:	2b33      	cmp	r3, #51	@ 0x33
 80013c0:	d92c      	bls.n	800141c <authenticate+0x2b8>
 80013c2:	8b7b      	ldrh	r3, [r7, #26]
 80013c4:	2b42      	cmp	r3, #66	@ 0x42
 80013c6:	d829      	bhi.n	800141c <authenticate+0x2b8>
			fillRect(100, 30,75,75, ILI9488_GREEN);
 80013c8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	234b      	movs	r3, #75	@ 0x4b
 80013d0:	224b      	movs	r2, #75	@ 0x4b
 80013d2:	211e      	movs	r1, #30
 80013d4:	2064      	movs	r0, #100	@ 0x64
 80013d6:	f003 f859 	bl	800448c <fillRect>
			HAL_Delay(250);
 80013da:	20fa      	movs	r0, #250	@ 0xfa
 80013dc:	f005 f806 	bl	80063ec <HAL_Delay>
			entered[count] = '1';
 80013e0:	8bfb      	ldrh	r3, [r7, #30]
 80013e2:	3320      	adds	r3, #32
 80013e4:	443b      	add	r3, r7
 80013e6:	2231      	movs	r2, #49	@ 0x31
 80013e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
			count++;
 80013ec:	8bfb      	ldrh	r3, [r7, #30]
 80013ee:	3301      	adds	r3, #1
 80013f0:	83fb      	strh	r3, [r7, #30]
		    fillRect(100, 30,75,75, ILI9488_RED);
 80013f2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	234b      	movs	r3, #75	@ 0x4b
 80013fa:	224b      	movs	r2, #75	@ 0x4b
 80013fc:	211e      	movs	r1, #30
 80013fe:	2064      	movs	r0, #100	@ 0x64
 8001400:	f003 f844 	bl	800448c <fillRect>
		    drawCharTest(130, 55, '1', ILI9488_WHITE,ILI9488_RED, 3);
 8001404:	2303      	movs	r3, #3
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001412:	2231      	movs	r2, #49	@ 0x31
 8001414:	2137      	movs	r1, #55	@ 0x37
 8001416:	2082      	movs	r0, #130	@ 0x82
 8001418:	f003 fb3c 	bl	8004a94 <drawCharTest>
			97, 52
			287, 52
			97, 67
			287, 67
		   */
		  if(touchX >= 100 && touchX < 287 && touchY >= 52 && touchY < 67){
 800141c:	8bbb      	ldrh	r3, [r7, #28]
 800141e:	2b63      	cmp	r3, #99	@ 0x63
 8001420:	d933      	bls.n	800148a <authenticate+0x326>
 8001422:	8bbb      	ldrh	r3, [r7, #28]
 8001424:	f5b3 7f8f 	cmp.w	r3, #286	@ 0x11e
 8001428:	d82f      	bhi.n	800148a <authenticate+0x326>
 800142a:	8b7b      	ldrh	r3, [r7, #26]
 800142c:	2b33      	cmp	r3, #51	@ 0x33
 800142e:	d92c      	bls.n	800148a <authenticate+0x326>
 8001430:	8b7b      	ldrh	r3, [r7, #26]
 8001432:	2b42      	cmp	r3, #66	@ 0x42
 8001434:	d829      	bhi.n	800148a <authenticate+0x326>
			fillRect(200, 30,75,75, ILI9488_GREEN);
 8001436:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	234b      	movs	r3, #75	@ 0x4b
 800143e:	224b      	movs	r2, #75	@ 0x4b
 8001440:	211e      	movs	r1, #30
 8001442:	20c8      	movs	r0, #200	@ 0xc8
 8001444:	f003 f822 	bl	800448c <fillRect>
			HAL_Delay(250);
 8001448:	20fa      	movs	r0, #250	@ 0xfa
 800144a:	f004 ffcf 	bl	80063ec <HAL_Delay>
			entered[count] = '2';
 800144e:	8bfb      	ldrh	r3, [r7, #30]
 8001450:	3320      	adds	r3, #32
 8001452:	443b      	add	r3, r7
 8001454:	2232      	movs	r2, #50	@ 0x32
 8001456:	f803 2c0c 	strb.w	r2, [r3, #-12]
			count++;
 800145a:	8bfb      	ldrh	r3, [r7, #30]
 800145c:	3301      	adds	r3, #1
 800145e:	83fb      	strh	r3, [r7, #30]
			fillRect(200, 30,75,75, ILI9488_RED);
 8001460:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	234b      	movs	r3, #75	@ 0x4b
 8001468:	224b      	movs	r2, #75	@ 0x4b
 800146a:	211e      	movs	r1, #30
 800146c:	20c8      	movs	r0, #200	@ 0xc8
 800146e:	f003 f80d 	bl	800448c <fillRect>
			drawCharTest(230, 55, '2', ILI9488_WHITE,ILI9488_RED, 3);
 8001472:	2303      	movs	r3, #3
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001480:	2232      	movs	r2, #50	@ 0x32
 8001482:	2137      	movs	r1, #55	@ 0x37
 8001484:	20e6      	movs	r0, #230	@ 0xe6
 8001486:	f003 fb05 	bl	8004a94 <drawCharTest>
		  /*3rd box:
			299, 52
			390, 52
			299, 67
			390, 167*/
		  if(touchX >= 299 && touchX < 372 && touchY >= 52 && touchY < 160){
 800148a:	8bbb      	ldrh	r3, [r7, #28]
 800148c:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8001490:	d936      	bls.n	8001500 <authenticate+0x39c>
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 8001498:	d232      	bcs.n	8001500 <authenticate+0x39c>
 800149a:	8b7b      	ldrh	r3, [r7, #26]
 800149c:	2b33      	cmp	r3, #51	@ 0x33
 800149e:	d92f      	bls.n	8001500 <authenticate+0x39c>
 80014a0:	8b7b      	ldrh	r3, [r7, #26]
 80014a2:	2b9f      	cmp	r3, #159	@ 0x9f
 80014a4:	d82c      	bhi.n	8001500 <authenticate+0x39c>
			fillRect(300, 30,75,75, ILI9488_GREEN);
 80014a6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	234b      	movs	r3, #75	@ 0x4b
 80014ae:	224b      	movs	r2, #75	@ 0x4b
 80014b0:	211e      	movs	r1, #30
 80014b2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014b6:	f002 ffe9 	bl	800448c <fillRect>
			HAL_Delay(250);
 80014ba:	20fa      	movs	r0, #250	@ 0xfa
 80014bc:	f004 ff96 	bl	80063ec <HAL_Delay>
			entered[count] = '3';
 80014c0:	8bfb      	ldrh	r3, [r7, #30]
 80014c2:	3320      	adds	r3, #32
 80014c4:	443b      	add	r3, r7
 80014c6:	2233      	movs	r2, #51	@ 0x33
 80014c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
			count++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
			fillRect(300, 30,75,75, ILI9488_RED);
 80014d2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	234b      	movs	r3, #75	@ 0x4b
 80014da:	224b      	movs	r2, #75	@ 0x4b
 80014dc:	211e      	movs	r1, #30
 80014de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014e2:	f002 ffd3 	bl	800448c <fillRect>
			drawCharTest(319, 55, '3', ILI9488_WHITE,ILI9488_RED, 3);
 80014e6:	2303      	movs	r3, #3
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014f4:	2233      	movs	r2, #51	@ 0x33
 80014f6:	2137      	movs	r1, #55	@ 0x37
 80014f8:	f240 103f 	movw	r0, #319	@ 0x13f
 80014fc:	f003 faca 	bl	8004a94 <drawCharTest>
			 * 97, 163
			 * 97, 219
			 *
			 *
			 */
			if(touchX >= 75 && touchX < 97 && touchY >= 163 && touchY < 219){
 8001500:	8bbb      	ldrh	r3, [r7, #28]
 8001502:	2b4a      	cmp	r3, #74	@ 0x4a
 8001504:	d932      	bls.n	800156c <authenticate+0x408>
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	2b60      	cmp	r3, #96	@ 0x60
 800150a:	d82f      	bhi.n	800156c <authenticate+0x408>
 800150c:	8b7b      	ldrh	r3, [r7, #26]
 800150e:	2ba2      	cmp	r3, #162	@ 0xa2
 8001510:	d92c      	bls.n	800156c <authenticate+0x408>
 8001512:	8b7b      	ldrh	r3, [r7, #26]
 8001514:	2bda      	cmp	r3, #218	@ 0xda
 8001516:	d829      	bhi.n	800156c <authenticate+0x408>
				fillRect(100, 130,75,75, ILI9488_GREEN);
 8001518:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	234b      	movs	r3, #75	@ 0x4b
 8001520:	224b      	movs	r2, #75	@ 0x4b
 8001522:	2182      	movs	r1, #130	@ 0x82
 8001524:	2064      	movs	r0, #100	@ 0x64
 8001526:	f002 ffb1 	bl	800448c <fillRect>
				HAL_Delay(250);
 800152a:	20fa      	movs	r0, #250	@ 0xfa
 800152c:	f004 ff5e 	bl	80063ec <HAL_Delay>
				entered[count] = '4';
 8001530:	8bfb      	ldrh	r3, [r7, #30]
 8001532:	3320      	adds	r3, #32
 8001534:	443b      	add	r3, r7
 8001536:	2234      	movs	r2, #52	@ 0x34
 8001538:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 800153c:	8bfb      	ldrh	r3, [r7, #30]
 800153e:	3301      	adds	r3, #1
 8001540:	83fb      	strh	r3, [r7, #30]
				fillRect(100, 130,75,75, ILI9488_RED);
 8001542:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	234b      	movs	r3, #75	@ 0x4b
 800154a:	224b      	movs	r2, #75	@ 0x4b
 800154c:	2182      	movs	r1, #130	@ 0x82
 800154e:	2064      	movs	r0, #100	@ 0x64
 8001550:	f002 ff9c 	bl	800448c <fillRect>
				drawCharTest(130, 150, '4', ILI9488_WHITE,ILI9488_RED, 3);
 8001554:	2303      	movs	r3, #3
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001562:	2234      	movs	r2, #52	@ 0x34
 8001564:	2196      	movs	r1, #150	@ 0x96
 8001566:	2082      	movs	r0, #130	@ 0x82
 8001568:	f003 fa94 	bl	8004a94 <drawCharTest>
			 * 97, 165
			 * 262, 165
			 * 97, 207
			 * 262, 207
			 */
			 if(touchX >= 100 && touchX < 262 && touchY >= 165 && touchY < 207){
 800156c:	8bbb      	ldrh	r3, [r7, #28]
 800156e:	2b63      	cmp	r3, #99	@ 0x63
 8001570:	d933      	bls.n	80015da <authenticate+0x476>
 8001572:	8bbb      	ldrh	r3, [r7, #28]
 8001574:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001578:	d22f      	bcs.n	80015da <authenticate+0x476>
 800157a:	8b7b      	ldrh	r3, [r7, #26]
 800157c:	2ba4      	cmp	r3, #164	@ 0xa4
 800157e:	d92c      	bls.n	80015da <authenticate+0x476>
 8001580:	8b7b      	ldrh	r3, [r7, #26]
 8001582:	2bce      	cmp	r3, #206	@ 0xce
 8001584:	d829      	bhi.n	80015da <authenticate+0x476>
				fillRect(200, 130,75,75, ILI9488_GREEN);
 8001586:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	234b      	movs	r3, #75	@ 0x4b
 800158e:	224b      	movs	r2, #75	@ 0x4b
 8001590:	2182      	movs	r1, #130	@ 0x82
 8001592:	20c8      	movs	r0, #200	@ 0xc8
 8001594:	f002 ff7a 	bl	800448c <fillRect>
				HAL_Delay(250);
 8001598:	20fa      	movs	r0, #250	@ 0xfa
 800159a:	f004 ff27 	bl	80063ec <HAL_Delay>
				entered[count] = '5';
 800159e:	8bfb      	ldrh	r3, [r7, #30]
 80015a0:	3320      	adds	r3, #32
 80015a2:	443b      	add	r3, r7
 80015a4:	2235      	movs	r2, #53	@ 0x35
 80015a6:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 80015aa:	8bfb      	ldrh	r3, [r7, #30]
 80015ac:	3301      	adds	r3, #1
 80015ae:	83fb      	strh	r3, [r7, #30]
				fillRect(200, 130,75,75, ILI9488_RED);
 80015b0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	234b      	movs	r3, #75	@ 0x4b
 80015b8:	224b      	movs	r2, #75	@ 0x4b
 80015ba:	2182      	movs	r1, #130	@ 0x82
 80015bc:	20c8      	movs	r0, #200	@ 0xc8
 80015be:	f002 ff65 	bl	800448c <fillRect>
				drawCharTest(230, 150, '5', ILI9488_WHITE,ILI9488_RED, 3);
 80015c2:	2303      	movs	r3, #3
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015d0:	2235      	movs	r2, #53	@ 0x35
 80015d2:	2196      	movs	r1, #150	@ 0x96
 80015d4:	20e6      	movs	r0, #230	@ 0xe6
 80015d6:	f003 fa5d 	bl	8004a94 <drawCharTest>
			 * 294, 166
			 * 381, 167
			 * 299, 207
			 * 372, 207
			 */
			 if(touchX >= 299 && touchX < 372 && touchY >= 167 && touchY < 207){
 80015da:	8bbb      	ldrh	r3, [r7, #28]
 80015dc:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 80015e0:	d936      	bls.n	8001650 <authenticate+0x4ec>
 80015e2:	8bbb      	ldrh	r3, [r7, #28]
 80015e4:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 80015e8:	d232      	bcs.n	8001650 <authenticate+0x4ec>
 80015ea:	8b7b      	ldrh	r3, [r7, #26]
 80015ec:	2ba6      	cmp	r3, #166	@ 0xa6
 80015ee:	d92f      	bls.n	8001650 <authenticate+0x4ec>
 80015f0:	8b7b      	ldrh	r3, [r7, #26]
 80015f2:	2bce      	cmp	r3, #206	@ 0xce
 80015f4:	d82c      	bhi.n	8001650 <authenticate+0x4ec>
				fillRect(300, 130,75,75, ILI9488_GREEN);
 80015f6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	234b      	movs	r3, #75	@ 0x4b
 80015fe:	224b      	movs	r2, #75	@ 0x4b
 8001600:	2182      	movs	r1, #130	@ 0x82
 8001602:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001606:	f002 ff41 	bl	800448c <fillRect>
				HAL_Delay(250);
 800160a:	20fa      	movs	r0, #250	@ 0xfa
 800160c:	f004 feee 	bl	80063ec <HAL_Delay>
				entered[count] = '6';
 8001610:	8bfb      	ldrh	r3, [r7, #30]
 8001612:	3320      	adds	r3, #32
 8001614:	443b      	add	r3, r7
 8001616:	2236      	movs	r2, #54	@ 0x36
 8001618:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 800161c:	8bfb      	ldrh	r3, [r7, #30]
 800161e:	3301      	adds	r3, #1
 8001620:	83fb      	strh	r3, [r7, #30]
				fillRect(300, 130,75,75, ILI9488_RED);
 8001622:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	234b      	movs	r3, #75	@ 0x4b
 800162a:	224b      	movs	r2, #75	@ 0x4b
 800162c:	2182      	movs	r1, #130	@ 0x82
 800162e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001632:	f002 ff2b 	bl	800448c <fillRect>
				drawCharTest(319, 150, '6', ILI9488_WHITE,ILI9488_RED, 3);
 8001636:	2303      	movs	r3, #3
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001644:	2236      	movs	r2, #54	@ 0x36
 8001646:	2196      	movs	r1, #150	@ 0x96
 8001648:	f240 103f 	movw	r0, #319	@ 0x13f
 800164c:	f003 fa22 	bl	8004a94 <drawCharTest>
			 * 75, 242
			 * 97, 242
			 * 75, 309
			 * 97, 309
			 */
			if(touchX >= 75 && touchX < 97 && touchY >= 242 && touchY < 309){
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	2b4a      	cmp	r3, #74	@ 0x4a
 8001654:	d933      	bls.n	80016be <authenticate+0x55a>
 8001656:	8bbb      	ldrh	r3, [r7, #28]
 8001658:	2b60      	cmp	r3, #96	@ 0x60
 800165a:	d830      	bhi.n	80016be <authenticate+0x55a>
 800165c:	8b7b      	ldrh	r3, [r7, #26]
 800165e:	2bf1      	cmp	r3, #241	@ 0xf1
 8001660:	d92d      	bls.n	80016be <authenticate+0x55a>
 8001662:	8b7b      	ldrh	r3, [r7, #26]
 8001664:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8001668:	d829      	bhi.n	80016be <authenticate+0x55a>
				fillRect(100, 230,75,75, ILI9488_GREEN);
 800166a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	234b      	movs	r3, #75	@ 0x4b
 8001672:	224b      	movs	r2, #75	@ 0x4b
 8001674:	21e6      	movs	r1, #230	@ 0xe6
 8001676:	2064      	movs	r0, #100	@ 0x64
 8001678:	f002 ff08 	bl	800448c <fillRect>
				HAL_Delay(250);
 800167c:	20fa      	movs	r0, #250	@ 0xfa
 800167e:	f004 feb5 	bl	80063ec <HAL_Delay>
				entered[count] = '7';
 8001682:	8bfb      	ldrh	r3, [r7, #30]
 8001684:	3320      	adds	r3, #32
 8001686:	443b      	add	r3, r7
 8001688:	2237      	movs	r2, #55	@ 0x37
 800168a:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 800168e:	8bfb      	ldrh	r3, [r7, #30]
 8001690:	3301      	adds	r3, #1
 8001692:	83fb      	strh	r3, [r7, #30]
				fillRect(100, 230,75,75, ILI9488_RED);
 8001694:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	234b      	movs	r3, #75	@ 0x4b
 800169c:	224b      	movs	r2, #75	@ 0x4b
 800169e:	21e6      	movs	r1, #230	@ 0xe6
 80016a0:	2064      	movs	r0, #100	@ 0x64
 80016a2:	f002 fef3 	bl	800448c <fillRect>
				drawCharTest(130, 250, '7', ILI9488_WHITE,ILI9488_RED, 3);
 80016a6:	2303      	movs	r3, #3
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016b4:	2237      	movs	r2, #55	@ 0x37
 80016b6:	21fa      	movs	r1, #250	@ 0xfa
 80016b8:	2082      	movs	r0, #130	@ 0x82
 80016ba:	f003 f9eb 	bl	8004a94 <drawCharTest>
			 * 97, 242
			 * 262, 242
			 * 97, 309
			 * 287, 306
			 */
			if(touchX >= 100 && touchX < 280 && touchY >= 242 && touchY < 309){
 80016be:	8bbb      	ldrh	r3, [r7, #28]
 80016c0:	2b63      	cmp	r3, #99	@ 0x63
 80016c2:	d934      	bls.n	800172e <authenticate+0x5ca>
 80016c4:	8bbb      	ldrh	r3, [r7, #28]
 80016c6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80016ca:	d230      	bcs.n	800172e <authenticate+0x5ca>
 80016cc:	8b7b      	ldrh	r3, [r7, #26]
 80016ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80016d0:	d92d      	bls.n	800172e <authenticate+0x5ca>
 80016d2:	8b7b      	ldrh	r3, [r7, #26]
 80016d4:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80016d8:	d829      	bhi.n	800172e <authenticate+0x5ca>
				fillRect(200, 230,75,75, ILI9488_GREEN);
 80016da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	234b      	movs	r3, #75	@ 0x4b
 80016e2:	224b      	movs	r2, #75	@ 0x4b
 80016e4:	21e6      	movs	r1, #230	@ 0xe6
 80016e6:	20c8      	movs	r0, #200	@ 0xc8
 80016e8:	f002 fed0 	bl	800448c <fillRect>
				HAL_Delay(250);
 80016ec:	20fa      	movs	r0, #250	@ 0xfa
 80016ee:	f004 fe7d 	bl	80063ec <HAL_Delay>
				entered[count] = '8';
 80016f2:	8bfb      	ldrh	r3, [r7, #30]
 80016f4:	3320      	adds	r3, #32
 80016f6:	443b      	add	r3, r7
 80016f8:	2238      	movs	r2, #56	@ 0x38
 80016fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 80016fe:	8bfb      	ldrh	r3, [r7, #30]
 8001700:	3301      	adds	r3, #1
 8001702:	83fb      	strh	r3, [r7, #30]
				fillRect(200, 230,75,75, ILI9488_RED);
 8001704:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	234b      	movs	r3, #75	@ 0x4b
 800170c:	224b      	movs	r2, #75	@ 0x4b
 800170e:	21e6      	movs	r1, #230	@ 0xe6
 8001710:	20c8      	movs	r0, #200	@ 0xc8
 8001712:	f002 febb 	bl	800448c <fillRect>
				drawCharTest(230, 250, '8', ILI9488_WHITE,ILI9488_RED, 3);
 8001716:	2303      	movs	r3, #3
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001724:	2238      	movs	r2, #56	@ 0x38
 8001726:	21fa      	movs	r1, #250	@ 0xfa
 8001728:	20e6      	movs	r0, #230	@ 0xe6
 800172a:	f003 f9b3 	bl	8004a94 <drawCharTest>
			 * 299, 242
			 * 381, 242
			 * 299, 309
			 * 372, 309
			 */
			if(touchX >= 299 && touchX < 372 && touchY >= 242 && touchY < 309){
 800172e:	8bbb      	ldrh	r3, [r7, #28]
 8001730:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8001734:	f67f adf6 	bls.w	8001324 <authenticate+0x1c0>
 8001738:	8bbb      	ldrh	r3, [r7, #28]
 800173a:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 800173e:	f4bf adf1 	bcs.w	8001324 <authenticate+0x1c0>
 8001742:	8b7b      	ldrh	r3, [r7, #26]
 8001744:	2bf1      	cmp	r3, #241	@ 0xf1
 8001746:	f67f aded 	bls.w	8001324 <authenticate+0x1c0>
 800174a:	8b7b      	ldrh	r3, [r7, #26]
 800174c:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8001750:	f63f ade8 	bhi.w	8001324 <authenticate+0x1c0>
			   fillRect(300, 230,75,75, ILI9488_GREEN);
 8001754:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	234b      	movs	r3, #75	@ 0x4b
 800175c:	224b      	movs	r2, #75	@ 0x4b
 800175e:	21e6      	movs	r1, #230	@ 0xe6
 8001760:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001764:	f002 fe92 	bl	800448c <fillRect>
			   HAL_Delay(250);
 8001768:	20fa      	movs	r0, #250	@ 0xfa
 800176a:	f004 fe3f 	bl	80063ec <HAL_Delay>
			   entered[count] = '9';
 800176e:	8bfb      	ldrh	r3, [r7, #30]
 8001770:	3320      	adds	r3, #32
 8001772:	443b      	add	r3, r7
 8001774:	2239      	movs	r2, #57	@ 0x39
 8001776:	f803 2c0c 	strb.w	r2, [r3, #-12]
			   fillRect(300, 230,75,75, ILI9488_RED);
 800177a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	234b      	movs	r3, #75	@ 0x4b
 8001782:	224b      	movs	r2, #75	@ 0x4b
 8001784:	21e6      	movs	r1, #230	@ 0xe6
 8001786:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800178a:	f002 fe7f 	bl	800448c <fillRect>
			   drawCharTest(319, 250, '9', ILI9488_WHITE,ILI9488_RED, 3);
 800178e:	2303      	movs	r3, #3
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800179c:	2239      	movs	r2, #57	@ 0x39
 800179e:	21fa      	movs	r1, #250	@ 0xfa
 80017a0:	f240 103f 	movw	r0, #319	@ 0x13f
 80017a4:	f003 f976 	bl	8004a94 <drawCharTest>
			   count++;
 80017a8:	8bfb      	ldrh	r3, [r7, #30]
 80017aa:	3301      	adds	r3, #1
 80017ac:	83fb      	strh	r3, [r7, #30]
		  touchX = getX();
 80017ae:	e5b9      	b.n	8001324 <authenticate+0x1c0>
			}

	  }

}
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop

080017b8 <DispenseScreen>:


void DispenseScreen(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af02      	add	r7, sp, #8
	char success_msg [10] = "Dispensing...";
 80017be:	4a0c      	ldr	r2, [pc, #48]	@ (80017f0 <DispenseScreen+0x38>)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c4:	c303      	stmia	r3!, {r0, r1}
 80017c6:	801a      	strh	r2, [r3, #0]
	fillScreen(ILI9488_WHITE);
 80017c8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80017cc:	f002 fe44 	bl	8004458 <fillScreen>
	ILI9488_printText(success_msg, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 80017d0:	1d38      	adds	r0, r7, #4
 80017d2:	2301      	movs	r3, #1
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	220a      	movs	r2, #10
 80017e0:	210a      	movs	r1, #10
 80017e2:	f003 fadd 	bl	8004da0 <ILI9488_printText>

	return;
 80017e6:	bf00      	nop
}
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800b2e8 	.word	0x0800b2e8

080017f4 <scan_pill_screen>:

void scan_pill_screen(){
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b09c      	sub	sp, #112	@ 0x70
 80017f8:	af02      	add	r7, sp, #8
	char Place [50] = "Place Pill in Scanner";
 80017fa:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <scan_pill_screen+0xa0>)
 80017fc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001800:	461d      	mov	r5, r3
 8001802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001806:	e895 0003 	ldmia.w	r5, {r0, r1}
 800180a:	6020      	str	r0, [r4, #0]
 800180c:	3404      	adds	r4, #4
 800180e:	8021      	strh	r1, [r4, #0]
 8001810:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	615a      	str	r2, [r3, #20]
 8001822:	619a      	str	r2, [r3, #24]
	char count [50];
	uint8_t i = 5;
 8001824:	2305      	movs	r3, #5
 8001826:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	while (i != 0){
 800182a:	e029      	b.n	8001880 <scan_pill_screen+0x8c>
			fillScreen(ILI9488_WHITE);
 800182c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001830:	f002 fe12 	bl	8004458 <fillScreen>
			sprintf(count, "Scanning pill in %i seconds", i);
 8001834:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001838:	463b      	mov	r3, r7
 800183a:	4917      	ldr	r1, [pc, #92]	@ (8001898 <scan_pill_screen+0xa4>)
 800183c:	4618      	mov	r0, r3
 800183e:	f009 f86f 	bl	800a920 <siprintf>
			LCD_Font(10, 30, Place, _Open_Sans_Bold_36, 1, ILI9488_WHITE);
 8001842:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001846:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2301      	movs	r3, #1
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <scan_pill_screen+0xa8>)
 8001852:	211e      	movs	r1, #30
 8001854:	200a      	movs	r0, #10
 8001856:	f003 fbf0 	bl	800503a <LCD_Font>
			LCD_Font(10, 80, count, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 800185a:	463a      	mov	r2, r7
 800185c:	2300      	movs	r3, #0
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	2301      	movs	r3, #1
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <scan_pill_screen+0xa8>)
 8001866:	2150      	movs	r1, #80	@ 0x50
 8001868:	200a      	movs	r0, #10
 800186a:	f003 fbe6 	bl	800503a <LCD_Font>
			HAL_Delay(1000);
 800186e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001872:	f004 fdbb 	bl	80063ec <HAL_Delay>
			i--;
 8001876:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800187a:	3b01      	subs	r3, #1
 800187c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	while (i != 0){
 8001880:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1d1      	bne.n	800182c <scan_pill_screen+0x38>


	//Scan();


}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3768      	adds	r7, #104	@ 0x68
 800188e:	46bd      	mov	sp, r7
 8001890:	bdb0      	pop	{r4, r5, r7, pc}
 8001892:	bf00      	nop
 8001894:	0800b310 	.word	0x0800b310
 8001898:	0800b2f4 	.word	0x0800b2f4
 800189c:	0800e9e0 	.word	0x0800e9e0

080018a0 <LockScreen>:
	ILI9488_printText(weee, 10,10,ILI9488_BLACK, ILI9488_WHITE, 1);

}


void LockScreen(){
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	b0d3      	sub	sp, #332	@ 0x14c
 80018a4:	af06      	add	r7, sp, #24
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 80018a6:	4bb1      	ldr	r3, [pc, #708]	@ (8001b6c <LockScreen+0x2cc>)
 80018a8:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 80018ac:	461d      	mov	r5, r3
 80018ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const char *MONTHS_OF_YEAR[12] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
 80018ba:	4bad      	ldr	r3, [pc, #692]	@ (8001b70 <LockScreen+0x2d0>)
 80018bc:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 80018c0:	461d      	mov	r5, r3
 80018c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	uint8_t last_min = DS1307_GetMinute();
 80018d2:	f002 fa79 	bl	8003dc8 <DS1307_GetMinute>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
	char unlockButton[] = "Unlock";
 80018dc:	4aa5      	ldr	r2, [pc, #660]	@ (8001b74 <LockScreen+0x2d4>)
 80018de:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80018e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e6:	6018      	str	r0, [r3, #0]
 80018e8:	3304      	adds	r3, #4
 80018ea:	8019      	strh	r1, [r3, #0]
 80018ec:	3302      	adds	r3, #2
 80018ee:	0c0a      	lsrs	r2, r1, #16
 80018f0:	701a      	strb	r2, [r3, #0]

	fillScreen(ILI9488_WHITE);
 80018f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80018f6:	f002 fdaf 	bl	8004458 <fillScreen>

	fillRect(50, 250, 350, 50, ILI9488_RED);
 80018fa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2332      	movs	r3, #50	@ 0x32
 8001902:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001906:	21fa      	movs	r1, #250	@ 0xfa
 8001908:	2032      	movs	r0, #50	@ 0x32
 800190a:	f002 fdbf 	bl	800448c <fillRect>
	LCD_Font(200, 280, unlockButton, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800190e:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8001912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2301      	movs	r3, #1
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	4b96      	ldr	r3, [pc, #600]	@ (8001b78 <LockScreen+0x2d8>)
 800191e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001922:	20c8      	movs	r0, #200	@ 0xc8
 8001924:	f003 fb89 	bl	800503a <LCD_Font>

	while (1) {

	touchX = getX();
 8001928:	f004 fcae 	bl	8006288 <getX>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	4b92      	ldr	r3, [pc, #584]	@ (8001b7c <LockScreen+0x2dc>)
 8001932:	801a      	strh	r2, [r3, #0]
	touchY = getY();
 8001934:	f004 fcb2 	bl	800629c <getY>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4b90      	ldr	r3, [pc, #576]	@ (8001b80 <LockScreen+0x2e0>)
 800193e:	801a      	strh	r2, [r3, #0]

	uint8_t date = DS1307_GetDate();
 8001940:	f002 f9fa 	bl	8003d38 <DS1307_GetDate>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
	uint8_t month = DS1307_GetMonth();
 800194a:	f002 fa01 	bl	8003d50 <DS1307_GetMonth>
 800194e:	4603      	mov	r3, r0
 8001950:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
	uint16_t year = DS1307_GetYear();
 8001954:	f002 fa08 	bl	8003d68 <DS1307_GetYear>
 8001958:	4603      	mov	r3, r0
 800195a:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
	uint8_t dow = DS1307_GetDayOfWeek();
 800195e:	f002 f9df 	bl	8003d20 <DS1307_GetDayOfWeek>
 8001962:	4603      	mov	r3, r0
 8001964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	uint8_t hour = DS1307_GetHour();
 8001968:	f002 fa1f 	bl	8003daa <DS1307_GetHour>
 800196c:	4603      	mov	r3, r0
 800196e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
	uint8_t minute = DS1307_GetMinute();
 8001972:	f002 fa29 	bl	8003dc8 <DS1307_GetMinute>
 8001976:	4603      	mov	r3, r0
 8001978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
	//uint8_t second = DS1307_GetSecond();

	char buffer[100] = { 0 };
 800197c:	2300      	movs	r3, #0
 800197e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001980:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001984:	2260      	movs	r2, #96	@ 0x60
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f008 ffe9 	bl	800a960 <memset>
	char ampm[4] = "AM";
 800198e:	f644 5341 	movw	r3, #19777	@ 0x4d41
 8001992:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	char formattedMinute[4];
	if (minute < 10){
 8001996:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800199a:	2b09      	cmp	r3, #9
 800199c:	d808      	bhi.n	80019b0 <LockScreen+0x110>
		sprintf(formattedMinute, "0%i", minute);
 800199e:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80019a2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80019a6:	4977      	ldr	r1, [pc, #476]	@ (8001b84 <LockScreen+0x2e4>)
 80019a8:	4618      	mov	r0, r3
 80019aa:	f008 ffb9 	bl	800a920 <siprintf>
 80019ae:	e007      	b.n	80019c0 <LockScreen+0x120>
	}
	else{
		sprintf(formattedMinute, "%i", minute);
 80019b0:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80019b4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80019b8:	4973      	ldr	r1, [pc, #460]	@ (8001b88 <LockScreen+0x2e8>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f008 ffb0 	bl	800a920 <siprintf>
	}
 	//convert to 12hr time
	if (hour == 0){
 80019c0:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <LockScreen+0x130>
		hour = 12;
 80019c8:	230c      	movs	r3, #12
 80019ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80019ce:	e00f      	b.n	80019f0 <LockScreen+0x150>
	}
	else if (hour > 12){
 80019d0:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80019d4:	2b0c      	cmp	r3, #12
 80019d6:	d90b      	bls.n	80019f0 <LockScreen+0x150>
		hour = hour - 12;
 80019d8:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80019dc:	3b0c      	subs	r3, #12
 80019de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
		sprintf(ampm, "%s", "PM");
 80019e2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80019e6:	4a69      	ldr	r2, [pc, #420]	@ (8001b8c <LockScreen+0x2ec>)
 80019e8:	4969      	ldr	r1, [pc, #420]	@ (8001b90 <LockScreen+0x2f0>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f008 ff98 	bl	800a920 <siprintf>
	}

	if (minute != last_min){
 80019f0:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80019f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d01a      	beq.n	8001a32 <LockScreen+0x192>
		fillScreen(ILI9488_WHITE);
 80019fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a00:	f002 fd2a 	bl	8004458 <fillScreen>
		fillRect(50, 250, 350, 50, ILI9488_RED);
 8001a04:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2332      	movs	r3, #50	@ 0x32
 8001a0c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001a10:	21fa      	movs	r1, #250	@ 0xfa
 8001a12:	2032      	movs	r0, #50	@ 0x32
 8001a14:	f002 fd3a 	bl	800448c <fillRect>
		LCD_Font(200, 280, unlockButton, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8001a18:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8001a1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	2301      	movs	r3, #1
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	4b54      	ldr	r3, [pc, #336]	@ (8001b78 <LockScreen+0x2d8>)
 8001a28:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001a2c:	20c8      	movs	r0, #200	@ 0xc8
 8001a2e:	f003 fb04 	bl	800503a <LCD_Font>
	}

	/* May show warning below. Ignore and proceed. */
	sprintf(buffer, "%i:%s %s", hour, formattedMinute, ampm);
 8001a32:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 8001a36:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8001a3a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001a3e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	460b      	mov	r3, r1
 8001a46:	4953      	ldr	r1, [pc, #332]	@ (8001b94 <LockScreen+0x2f4>)
 8001a48:	f008 ff6a 	bl	800a920 <siprintf>
	LCD_Font(10, 30, buffer, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 8001a4c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001a50:	2300      	movs	r3, #0
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	2301      	movs	r3, #1
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4b4f      	ldr	r3, [pc, #316]	@ (8001b98 <LockScreen+0x2f8>)
 8001a5a:	211e      	movs	r1, #30
 8001a5c:	200a      	movs	r0, #10
 8001a5e:	f003 faec 	bl	800503a <LCD_Font>
	sprintf(buffer, "%s, %s %i %i", DAYS_OF_WEEK[dow], MONTHS_OF_YEAR[month - 1], date, year);
 8001a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001a6c:	443b      	add	r3, r7
 8001a6e:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8001a72:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 8001a76:	3b01      	subs	r3, #1
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001a7e:	443b      	add	r3, r7
 8001a80:	f853 4c58 	ldr.w	r4, [r3, #-88]
 8001a84:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8001a88:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8001a8c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001a90:	9201      	str	r2, [sp, #4]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4623      	mov	r3, r4
 8001a96:	460a      	mov	r2, r1
 8001a98:	4940      	ldr	r1, [pc, #256]	@ (8001b9c <LockScreen+0x2fc>)
 8001a9a:	f008 ff41 	bl	800a920 <siprintf>
	//ILI9488_printText(buffer, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
	LCD_Font(10, 55, buffer, _Open_Sans_Bold_24, 1, ILI9488_BLACK);
 8001a9e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba0 <LockScreen+0x300>)
 8001aac:	2137      	movs	r1, #55	@ 0x37
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f003 fac3 	bl	800503a <LCD_Font>

	HAL_Delay(50);
 8001ab4:	2032      	movs	r0, #50	@ 0x32
 8001ab6:	f004 fc99 	bl	80063ec <HAL_Delay>


	update_last_due_pill_idx(DS1307_GetDayOfWeek(), DS1307_GetHour(), DS1307_GetMinute());
 8001aba:	f002 f931 	bl	8003d20 <DS1307_GetDayOfWeek>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461c      	mov	r4, r3
 8001ac2:	f002 f972 	bl	8003daa <DS1307_GetHour>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461d      	mov	r5, r3
 8001aca:	f002 f97d 	bl	8003dc8 <DS1307_GetMinute>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7fe fee1 	bl	800089c <update_last_due_pill_idx>

	 uint8_t pil = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
	 uint8_t listSize = (getNumPills() <= 3) ? getNumPills() : 3;
 8001ae0:	f7fe ff92 	bl	8000a08 <getNumPills>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d803      	bhi.n	8001af2 <LockScreen+0x252>
 8001aea:	f7fe ff8d 	bl	8000a08 <getNumPills>
 8001aee:	4603      	mov	r3, r0
 8001af0:	e000      	b.n	8001af4 <LockScreen+0x254>
 8001af2:	2303      	movs	r3, #3
 8001af4:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
	 for (pil = 0; pil < listSize; pil++){
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 8001afe:	e0ef      	b.n	8001ce0 <LockScreen+0x440>

		 //12 hour time for every pill
		 pillEntry temp = getPillInfo(pil);
 8001b00:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001b04:	f897 212d 	ldrb.w	r2, [r7, #301]	@ 0x12d
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe ff54 	bl	80009b8 <getPillInfo>
		 uint8_t tempHour = temp.hour;
 8001b10:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8001b14:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
		 char tempampm[4] = "AM";
 8001b18:	f644 5341 	movw	r3, #19777	@ 0x4d41
 8001b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		 char pillTime [50];
		 char pillFormatMinute [5] = " ";
 8001b20:	2320      	movs	r3, #32
 8001b22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0


		 if (temp.min < 10){
 8001b2c:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d809      	bhi.n	8001b48 <LockScreen+0x2a8>
				sprintf(pillFormatMinute, "0%i", temp.min);
 8001b34:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b3e:	4911      	ldr	r1, [pc, #68]	@ (8001b84 <LockScreen+0x2e4>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f008 feed 	bl	800a920 <siprintf>
 8001b46:	e008      	b.n	8001b5a <LockScreen+0x2ba>
			}

		 else{
				sprintf(pillFormatMinute, "%i", temp.min);
 8001b48:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b52:	490d      	ldr	r1, [pc, #52]	@ (8001b88 <LockScreen+0x2e8>)
 8001b54:	4618      	mov	r0, r3
 8001b56:	f008 fee3 	bl	800a920 <siprintf>
			}
		 if (tempHour == 0){
 8001b5a:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d120      	bne.n	8001ba4 <LockScreen+0x304>
			tempHour = 12;
 8001b62:	230c      	movs	r3, #12
 8001b64:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 8001b68:	e02c      	b.n	8001bc4 <LockScreen+0x324>
 8001b6a:	bf00      	nop
 8001b6c:	0800b3e4 	.word	0x0800b3e4
 8001b70:	0800b46c 	.word	0x0800b46c
 8001b74:	0800b49c 	.word	0x0800b49c
 8001b78:	0800c6bc 	.word	0x0800c6bc
 8001b7c:	20000692 	.word	0x20000692
 8001b80:	20000694 	.word	0x20000694
 8001b84:	0800b354 	.word	0x0800b354
 8001b88:	0800b358 	.word	0x0800b358
 8001b8c:	0800b35c 	.word	0x0800b35c
 8001b90:	0800b360 	.word	0x0800b360
 8001b94:	0800b364 	.word	0x0800b364
 8001b98:	0800e9e0 	.word	0x0800e9e0
 8001b9c:	0800b370 	.word	0x0800b370
 8001ba0:	0800d2d8 	.word	0x0800d2d8
		 }
		 else if (tempHour > 12){
 8001ba4:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d90b      	bls.n	8001bc4 <LockScreen+0x324>
			tempHour = tempHour - 12;
 8001bac:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8001bb0:	3b0c      	subs	r3, #12
 8001bb2:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
			sprintf(tempampm, "%s", "PM");
 8001bb6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bba:	4a51      	ldr	r2, [pc, #324]	@ (8001d00 <LockScreen+0x460>)
 8001bbc:	4951      	ldr	r1, [pc, #324]	@ (8001d04 <LockScreen+0x464>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f008 feae 	bl	800a920 <siprintf>
		 }

		sprintf(pillTime, "%s due at %s, %s %i @ %i:%s %s",temp.name,  DAYS_OF_WEEK[temp.dayofWeek], MONTHS_OF_YEAR[month - 1], date + (temp.dayofWeek - dow),tempHour,  pillFormatMinute, tempampm);
 8001bc4:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001bce:	443b      	add	r3, r7
 8001bd0:	f853 6c28 	ldr.w	r6, [r3, #-40]
 8001bd4:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001be0:	443b      	add	r3, r7
 8001be2:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001be6:	f897 112b 	ldrb.w	r1, [r7, #299]	@ 0x12b
 8001bea:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8001bf4:	1a82      	subs	r2, r0, r2
 8001bf6:	440a      	add	r2, r1
 8001bf8:	f897 112c 	ldrb.w	r1, [r7, #300]	@ 0x12c
 8001bfc:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001c00:	1c85      	adds	r5, r0, #2
 8001c02:	1d3c      	adds	r4, r7, #4
 8001c04:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8001c08:	9004      	str	r0, [sp, #16]
 8001c0a:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8001c0e:	9003      	str	r0, [sp, #12]
 8001c10:	9102      	str	r1, [sp, #8]
 8001c12:	9201      	str	r2, [sp, #4]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	4633      	mov	r3, r6
 8001c18:	462a      	mov	r2, r5
 8001c1a:	493b      	ldr	r1, [pc, #236]	@ (8001d08 <LockScreen+0x468>)
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f008 fe7f 	bl	800a920 <siprintf>
		//overdue pills.
		uint8_t overdue_idx = get_next_pill_idx();
 8001c22:	f7fe feb5 	bl	8000990 <get_next_pill_idx>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
		if (pil < overdue_idx){
 8001c2c:	f897 212d 	ldrb.w	r2, [r7, #301]	@ 0x12d
 8001c30:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d218      	bcs.n	8001c6a <LockScreen+0x3ca>
			LCD_Font(10, (pil + 1)*70 + 10, pillTime, _Open_Sans_Bold_16, 1, ILI9488_RED);
 8001c38:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	461a      	mov	r2, r3
 8001c48:	00d2      	lsls	r2, r2, #3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	330a      	adds	r3, #10
 8001c52:	b299      	uxth	r1, r3
 8001c54:	1d3a      	adds	r2, r7, #4
 8001c56:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	4b2a      	ldr	r3, [pc, #168]	@ (8001d0c <LockScreen+0x46c>)
 8001c62:	200a      	movs	r0, #10
 8001c64:	f003 f9e9 	bl	800503a <LCD_Font>
 8001c68:	e016      	b.n	8001c98 <LockScreen+0x3f8>
		}
		else {
			LCD_Font(10, (pil + 1) *70 + 10, pillTime,  _Open_Sans_Bold_16, 1, ILI9488_BLACK);
 8001c6a:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8001c6e:	3301      	adds	r3, #1
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	00d2      	lsls	r2, r2, #3
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	330a      	adds	r3, #10
 8001c84:	b299      	uxth	r1, r3
 8001c86:	1d3a      	adds	r2, r7, #4
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <LockScreen+0x46c>)
 8001c92:	200a      	movs	r0, #10
 8001c94:	f003 f9d1 	bl	800503a <LCD_Font>
		}

		//LCD_Font(temp.name, 10, (pil + 1) * 80, ILI9488_BLACK, ILI9488_WHITE, 1);


		if (touchX >= 50 && touchX < 400 && touchY >= 250 && touchY < 300) {
 8001c98:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <LockScreen+0x470>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	2b31      	cmp	r3, #49	@ 0x31
 8001c9e:	d91a      	bls.n	8001cd6 <LockScreen+0x436>
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <LockScreen+0x470>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001ca8:	d215      	bcs.n	8001cd6 <LockScreen+0x436>
 8001caa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <LockScreen+0x474>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	2bf9      	cmp	r3, #249	@ 0xf9
 8001cb0:	d911      	bls.n	8001cd6 <LockScreen+0x436>
 8001cb2:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <LockScreen+0x474>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001cba:	d20c      	bcs.n	8001cd6 <LockScreen+0x436>
			fillRect(50, 250, 350, 50, ILI9488_GREEN);
 8001cbc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2332      	movs	r3, #50	@ 0x32
 8001cc4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001cc8:	21fa      	movs	r1, #250	@ 0xfa
 8001cca:	2032      	movs	r0, #50	@ 0x32
 8001ccc:	f002 fbde 	bl	800448c <fillRect>
			authenticate();
 8001cd0:	f7ff fa48 	bl	8001164 <authenticate>
			return;
 8001cd4:	e010      	b.n	8001cf8 <LockScreen+0x458>
	 for (pil = 0; pil < listSize; pil++){
 8001cd6:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 8001ce0:	f897 212d 	ldrb.w	r2, [r7, #301]	@ 0x12d
 8001ce4:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f4ff af09 	bcc.w	8001b00 <LockScreen+0x260>
			
		}

	 }

	 last_min = minute;
 8001cee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8001cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
	while (1) {
 8001cf6:	e617      	b.n	8001928 <LockScreen+0x88>

	}
}
 8001cf8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d00:	0800b35c 	.word	0x0800b35c
 8001d04:	0800b360 	.word	0x0800b360
 8001d08:	0800b380 	.word	0x0800b380
 8001d0c:	0800bd78 	.word	0x0800bd78
 8001d10:	20000692 	.word	0x20000692
 8001d14:	20000694 	.word	0x20000694

08001d18 <Home_Screen>:

void Home_Screen() {
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b099      	sub	sp, #100	@ 0x64
 8001d1c:	af02      	add	r7, sp, #8

	char refill[] = "Refill";
 8001d1e:	4ab8      	ldr	r2, [pc, #736]	@ (8002000 <Home_Screen+0x2e8>)
 8001d20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d28:	6018      	str	r0, [r3, #0]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	8019      	strh	r1, [r3, #0]
 8001d2e:	3302      	adds	r3, #2
 8001d30:	0c0a      	lsrs	r2, r1, #16
 8001d32:	701a      	strb	r2, [r3, #0]
	char scan[] = "Scan";
 8001d34:	4ab3      	ldr	r2, [pc, #716]	@ (8002004 <Home_Screen+0x2ec>)
 8001d36:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d3e:	6018      	str	r0, [r3, #0]
 8001d40:	3304      	adds	r3, #4
 8001d42:	7019      	strb	r1, [r3, #0]
	char dispense[] = "Dispense";
 8001d44:	4ab0      	ldr	r2, [pc, #704]	@ (8002008 <Home_Screen+0x2f0>)
 8001d46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d4c:	c303      	stmia	r3!, {r0, r1}
 8001d4e:	701a      	strb	r2, [r3, #0]
	char new_pill[] = "New Pill";
 8001d50:	4aae      	ldr	r2, [pc, #696]	@ (800200c <Home_Screen+0x2f4>)
 8001d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d56:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d58:	c303      	stmia	r3!, {r0, r1}
 8001d5a:	701a      	strb	r2, [r3, #0]
	char fingerprint[] = "Fingerprints";
 8001d5c:	4bac      	ldr	r3, [pc, #688]	@ (8002010 <Home_Screen+0x2f8>)
 8001d5e:	f107 041c 	add.w	r4, r7, #28
 8001d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d64:	c407      	stmia	r4!, {r0, r1, r2}
 8001d66:	7023      	strb	r3, [r4, #0]
	char back[] = "Back";
 8001d68:	4aaa      	ldr	r2, [pc, #680]	@ (8002014 <Home_Screen+0x2fc>)
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d72:	6018      	str	r0, [r3, #0]
 8001d74:	3304      	adds	r3, #4
 8001d76:	7019      	strb	r1, [r3, #0]
	char option;
	uint8_t redraw = 1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	fillScreen(ILI9488_WHITE);
 8001d7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d82:	f002 fb69 	bl	8004458 <fillScreen>


	while (1){

	if (redraw){
 8001d86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8088 	beq.w	8001ea0 <Home_Screen+0x188>
		fillScreen(ILI9488_WHITE);
 8001d90:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d94:	f002 fb60 	bl	8004458 <fillScreen>
		fillRect(70, 40, 150, 75, ILI9488_RED);
 8001d98:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	234b      	movs	r3, #75	@ 0x4b
 8001da0:	2296      	movs	r2, #150	@ 0x96
 8001da2:	2128      	movs	r1, #40	@ 0x28
 8001da4:	2046      	movs	r0, #70	@ 0x46
 8001da6:	f002 fb71 	bl	800448c <fillRect>
		LCD_Font(120, 80, refill, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8001daa:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001dae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	2301      	movs	r3, #1
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4b97      	ldr	r3, [pc, #604]	@ (8002018 <Home_Screen+0x300>)
 8001dba:	2150      	movs	r1, #80	@ 0x50
 8001dbc:	2078      	movs	r0, #120	@ 0x78
 8001dbe:	f003 f93c 	bl	800503a <LCD_Font>

		fillRect(250, 40, 150, 75, ILI9488_RED);
 8001dc2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	234b      	movs	r3, #75	@ 0x4b
 8001dca:	2296      	movs	r2, #150	@ 0x96
 8001dcc:	2128      	movs	r1, #40	@ 0x28
 8001dce:	20fa      	movs	r0, #250	@ 0xfa
 8001dd0:	f002 fb5c 	bl	800448c <fillRect>
		LCD_Font(300, 80, scan, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8001dd4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001dd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	2301      	movs	r3, #1
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	4b8d      	ldr	r3, [pc, #564]	@ (8002018 <Home_Screen+0x300>)
 8001de4:	2150      	movs	r1, #80	@ 0x50
 8001de6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001dea:	f003 f926 	bl	800503a <LCD_Font>

		fillRect(70, 125, 150, 75, ILI9488_RED);
 8001dee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	234b      	movs	r3, #75	@ 0x4b
 8001df6:	2296      	movs	r2, #150	@ 0x96
 8001df8:	217d      	movs	r1, #125	@ 0x7d
 8001dfa:	2046      	movs	r0, #70	@ 0x46
 8001dfc:	f002 fb46 	bl	800448c <fillRect>
		LCD_Font(120, 165, back, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8001e00:	f107 0214 	add.w	r2, r7, #20
 8001e04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	4b82      	ldr	r3, [pc, #520]	@ (8002018 <Home_Screen+0x300>)
 8001e10:	21a5      	movs	r1, #165	@ 0xa5
 8001e12:	2078      	movs	r0, #120	@ 0x78
 8001e14:	f003 f911 	bl	800503a <LCD_Font>

		fillRect(250, 125, 150, 75, ILI9488_RED);
 8001e18:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	234b      	movs	r3, #75	@ 0x4b
 8001e20:	2296      	movs	r2, #150	@ 0x96
 8001e22:	217d      	movs	r1, #125	@ 0x7d
 8001e24:	20fa      	movs	r0, #250	@ 0xfa
 8001e26:	f002 fb31 	bl	800448c <fillRect>
		LCD_Font(280, 165, dispense, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8001e2a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001e2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	2301      	movs	r3, #1
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4b77      	ldr	r3, [pc, #476]	@ (8002018 <Home_Screen+0x300>)
 8001e3a:	21a5      	movs	r1, #165	@ 0xa5
 8001e3c:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001e40:	f003 f8fb 	bl	800503a <LCD_Font>

		fillRect(70, 210, 150, 75, ILI9488_RED);
 8001e44:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	234b      	movs	r3, #75	@ 0x4b
 8001e4c:	2296      	movs	r2, #150	@ 0x96
 8001e4e:	21d2      	movs	r1, #210	@ 0xd2
 8001e50:	2046      	movs	r0, #70	@ 0x46
 8001e52:	f002 fb1b 	bl	800448c <fillRect>
		LCD_Font(100, 250, new_pill, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8001e56:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001e5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	2301      	movs	r3, #1
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4b6c      	ldr	r3, [pc, #432]	@ (8002018 <Home_Screen+0x300>)
 8001e66:	21fa      	movs	r1, #250	@ 0xfa
 8001e68:	2064      	movs	r0, #100	@ 0x64
 8001e6a:	f003 f8e6 	bl	800503a <LCD_Font>

		fillRect(250, 210, 150, 75, ILI9488_RED);
 8001e6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	234b      	movs	r3, #75	@ 0x4b
 8001e76:	2296      	movs	r2, #150	@ 0x96
 8001e78:	21d2      	movs	r1, #210	@ 0xd2
 8001e7a:	20fa      	movs	r0, #250	@ 0xfa
 8001e7c:	f002 fb06 	bl	800448c <fillRect>
		LCD_Font(260, 250, fingerprint, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8001e80:	f107 021c 	add.w	r2, r7, #28
 8001e84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	4b62      	ldr	r3, [pc, #392]	@ (8002018 <Home_Screen+0x300>)
 8001e90:	21fa      	movs	r1, #250	@ 0xfa
 8001e92:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001e96:	f003 f8d0 	bl	800503a <LCD_Font>
		redraw=0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	}
	touchX = getX();
 8001ea0:	f004 f9f2 	bl	8006288 <getX>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b5c      	ldr	r3, [pc, #368]	@ (800201c <Home_Screen+0x304>)
 8001eaa:	801a      	strh	r2, [r3, #0]
	touchY = getY();
 8001eac:	f004 f9f6 	bl	800629c <getY>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002020 <Home_Screen+0x308>)
 8001eb6:	801a      	strh	r2, [r3, #0]

	char touch[20];


	sprintf(touch, "                ");
 8001eb8:	463b      	mov	r3, r7
 8001eba:	495a      	ldr	r1, [pc, #360]	@ (8002024 <Home_Screen+0x30c>)
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f008 fd2f 	bl	800a920 <siprintf>
	LCD_Font(10, 10, touch, _Open_Sans_Bold_16, 1, ILI9488_BLACK);
 8001ec2:	463a      	mov	r2, r7
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	4b56      	ldr	r3, [pc, #344]	@ (8002028 <Home_Screen+0x310>)
 8001ece:	210a      	movs	r1, #10
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f003 f8b2 	bl	800503a <LCD_Font>

	sprintf(touch, "x = %i, y = %i", touchX, touchY);
 8001ed6:	4b51      	ldr	r3, [pc, #324]	@ (800201c <Home_Screen+0x304>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b50      	ldr	r3, [pc, #320]	@ (8002020 <Home_Screen+0x308>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	4638      	mov	r0, r7
 8001ee2:	4952      	ldr	r1, [pc, #328]	@ (800202c <Home_Screen+0x314>)
 8001ee4:	f008 fd1c 	bl	800a920 <siprintf>
	LCD_Font(10, 10, touch, _Open_Sans_Bold_16, 1, ILI9488_BLACK);
 8001ee8:	463a      	mov	r2, r7
 8001eea:	2300      	movs	r3, #0
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <Home_Screen+0x310>)
 8001ef4:	210a      	movs	r1, #10
 8001ef6:	200a      	movs	r0, #10
 8001ef8:	f003 f89f 	bl	800503a <LCD_Font>

	// Touch function for Refill
	if (touchX >= 70 && touchX < 220 && touchY >= 40 && touchY < 115) {
 8001efc:	4b47      	ldr	r3, [pc, #284]	@ (800201c <Home_Screen+0x304>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	2b45      	cmp	r3, #69	@ 0x45
 8001f02:	d91d      	bls.n	8001f40 <Home_Screen+0x228>
 8001f04:	4b45      	ldr	r3, [pc, #276]	@ (800201c <Home_Screen+0x304>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	2bdb      	cmp	r3, #219	@ 0xdb
 8001f0a:	d819      	bhi.n	8001f40 <Home_Screen+0x228>
 8001f0c:	4b44      	ldr	r3, [pc, #272]	@ (8002020 <Home_Screen+0x308>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	2b27      	cmp	r3, #39	@ 0x27
 8001f12:	d915      	bls.n	8001f40 <Home_Screen+0x228>
 8001f14:	4b42      	ldr	r3, [pc, #264]	@ (8002020 <Home_Screen+0x308>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	2b72      	cmp	r3, #114	@ 0x72
 8001f1a:	d811      	bhi.n	8001f40 <Home_Screen+0x228>
		fillRect(70, 40, 150, 75, ILI9488_GREEN);
 8001f1c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	234b      	movs	r3, #75	@ 0x4b
 8001f24:	2296      	movs	r2, #150	@ 0x96
 8001f26:	2128      	movs	r1, #40	@ 0x28
 8001f28:	2046      	movs	r0, #70	@ 0x46
 8001f2a:	f002 faaf 	bl	800448c <fillRect>
		option = 'r';
 8001f2e:	2372      	movs	r3, #114	@ 0x72
 8001f30:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		lid_open_screen();
 8001f34:	f000 fb4c 	bl	80025d0 <lid_open_screen>
		redraw = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8001f3e:	e0c6      	b.n	80020ce <Home_Screen+0x3b6>

		// Insert Function for refill - this literally just opens the lid
	}

	// Touch function for Scan
	else if (touchX >= 250 && touchX < 400 && touchY >= 40 && touchY < 115) {
 8001f40:	4b36      	ldr	r3, [pc, #216]	@ (800201c <Home_Screen+0x304>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	2bf9      	cmp	r3, #249	@ 0xf9
 8001f46:	d91e      	bls.n	8001f86 <Home_Screen+0x26e>
 8001f48:	4b34      	ldr	r3, [pc, #208]	@ (800201c <Home_Screen+0x304>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001f50:	d219      	bcs.n	8001f86 <Home_Screen+0x26e>
 8001f52:	4b33      	ldr	r3, [pc, #204]	@ (8002020 <Home_Screen+0x308>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	2b27      	cmp	r3, #39	@ 0x27
 8001f58:	d915      	bls.n	8001f86 <Home_Screen+0x26e>
 8001f5a:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <Home_Screen+0x308>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	2b72      	cmp	r3, #114	@ 0x72
 8001f60:	d811      	bhi.n	8001f86 <Home_Screen+0x26e>
		fillRect(250, 40, 150, 75, ILI9488_GREEN);
 8001f62:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	234b      	movs	r3, #75	@ 0x4b
 8001f6a:	2296      	movs	r2, #150	@ 0x96
 8001f6c:	2128      	movs	r1, #40	@ 0x28
 8001f6e:	20fa      	movs	r0, #250	@ 0xfa
 8001f70:	f002 fa8c 	bl	800448c <fillRect>
		option = 's';
 8001f74:	2373      	movs	r3, #115	@ 0x73
 8001f76:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		scan_pill_screen();
 8001f7a:	f7ff fc3b 	bl	80017f4 <scan_pill_screen>
		redraw = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8001f84:	e0a3      	b.n	80020ce <Home_Screen+0x3b6>
		// Insert function for Pixycam stuff
	}


	// Touch function for Dispense
	else if (touchX >= 215 && touchX < 418 && touchY >= 125 && touchY < 200) {
 8001f86:	4b25      	ldr	r3, [pc, #148]	@ (800201c <Home_Screen+0x304>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	2bd6      	cmp	r3, #214	@ 0xd6
 8001f8c:	d91e      	bls.n	8001fcc <Home_Screen+0x2b4>
 8001f8e:	4b23      	ldr	r3, [pc, #140]	@ (800201c <Home_Screen+0x304>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	f5b3 7fd1 	cmp.w	r3, #418	@ 0x1a2
 8001f96:	d219      	bcs.n	8001fcc <Home_Screen+0x2b4>
 8001f98:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <Home_Screen+0x308>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	2b7c      	cmp	r3, #124	@ 0x7c
 8001f9e:	d915      	bls.n	8001fcc <Home_Screen+0x2b4>
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <Home_Screen+0x308>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	2bc7      	cmp	r3, #199	@ 0xc7
 8001fa6:	d811      	bhi.n	8001fcc <Home_Screen+0x2b4>
		fillRect(250, 125, 150, 75, ILI9488_GREEN);
 8001fa8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	234b      	movs	r3, #75	@ 0x4b
 8001fb0:	2296      	movs	r2, #150	@ 0x96
 8001fb2:	217d      	movs	r1, #125	@ 0x7d
 8001fb4:	20fa      	movs	r0, #250	@ 0xfa
 8001fb6:	f002 fa69 	bl	800448c <fillRect>
		Dispense_Auto_Manual();
 8001fba:	f000 f891 	bl	80020e0 <Dispense_Auto_Manual>
		option = 'd';
 8001fbe:	2364      	movs	r3, #100	@ 0x64
 8001fc0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		redraw = 1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8001fca:	e080      	b.n	80020ce <Home_Screen+0x3b6>

	}

	//BACK
	else if (touchX >= 6 && touchX < 226 && touchY >= 125 && touchY < 200) {
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <Home_Screen+0x304>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d92d      	bls.n	8002030 <Home_Screen+0x318>
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <Home_Screen+0x304>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2be1      	cmp	r3, #225	@ 0xe1
 8001fda:	d829      	bhi.n	8002030 <Home_Screen+0x318>
 8001fdc:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <Home_Screen+0x308>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	2b7c      	cmp	r3, #124	@ 0x7c
 8001fe2:	d925      	bls.n	8002030 <Home_Screen+0x318>
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <Home_Screen+0x308>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	2bc7      	cmp	r3, #199	@ 0xc7
 8001fea:	d821      	bhi.n	8002030 <Home_Screen+0x318>
		fillRect(70, 125, 150, 75, ILI9488_GREEN);
 8001fec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	234b      	movs	r3, #75	@ 0x4b
 8001ff4:	2296      	movs	r2, #150	@ 0x96
 8001ff6:	217d      	movs	r1, #125	@ 0x7d
 8001ff8:	2046      	movs	r0, #70	@ 0x46
 8001ffa:	f002 fa47 	bl	800448c <fillRect>
		return;
 8001ffe:	e067      	b.n	80020d0 <Home_Screen+0x3b8>
 8002000:	0800b4c8 	.word	0x0800b4c8
 8002004:	0800b4d0 	.word	0x0800b4d0
 8002008:	0800b4d8 	.word	0x0800b4d8
 800200c:	0800b4e4 	.word	0x0800b4e4
 8002010:	0800b4f0 	.word	0x0800b4f0
 8002014:	0800b500 	.word	0x0800b500
 8002018:	0800c6bc 	.word	0x0800c6bc
 800201c:	20000692 	.word	0x20000692
 8002020:	20000694 	.word	0x20000694
 8002024:	0800b4a4 	.word	0x0800b4a4
 8002028:	0800bd78 	.word	0x0800bd78
 800202c:	0800b4b8 	.word	0x0800b4b8
		redraw = 1;
	
	}

	// Touch function for New Pill
	else if (touchX >= 70 && touchX < 220 && touchY >= 210 && touchY < 285) {
 8002030:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <Home_Screen+0x3c0>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	2b45      	cmp	r3, #69	@ 0x45
 8002036:	d91f      	bls.n	8002078 <Home_Screen+0x360>
 8002038:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <Home_Screen+0x3c0>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	2bdb      	cmp	r3, #219	@ 0xdb
 800203e:	d81b      	bhi.n	8002078 <Home_Screen+0x360>
 8002040:	4b26      	ldr	r3, [pc, #152]	@ (80020dc <Home_Screen+0x3c4>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	2bd1      	cmp	r3, #209	@ 0xd1
 8002046:	d917      	bls.n	8002078 <Home_Screen+0x360>
 8002048:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <Home_Screen+0x3c4>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8002050:	d812      	bhi.n	8002078 <Home_Screen+0x360>
		//
		fillRect(70, 210, 150, 75, ILI9488_GREEN);
 8002052:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	234b      	movs	r3, #75	@ 0x4b
 800205a:	2296      	movs	r2, #150	@ 0x96
 800205c:	21d2      	movs	r1, #210	@ 0xd2
 800205e:	2046      	movs	r0, #70	@ 0x46
 8002060:	f002 fa14 	bl	800448c <fillRect>
		dispenserChoose(2);
 8002064:	2002      	movs	r0, #2
 8002066:	f000 f90f 	bl	8002288 <dispenserChoose>
		option = 'n';
 800206a:	236e      	movs	r3, #110	@ 0x6e
 800206c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		redraw = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002076:	e02a      	b.n	80020ce <Home_Screen+0x3b6>

	}

	// Touch function for Fingerprints
	else if (touchX >= 250 && touchX < 400 && touchY >= 210 && touchY < 285) {
 8002078:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <Home_Screen+0x3c0>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	2bf9      	cmp	r3, #249	@ 0xf9
 800207e:	f67f ae82 	bls.w	8001d86 <Home_Screen+0x6e>
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <Home_Screen+0x3c0>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800208a:	f4bf ae7c 	bcs.w	8001d86 <Home_Screen+0x6e>
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <Home_Screen+0x3c4>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	2bd1      	cmp	r3, #209	@ 0xd1
 8002094:	f67f ae77 	bls.w	8001d86 <Home_Screen+0x6e>
 8002098:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <Home_Screen+0x3c4>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80020a0:	f63f ae71 	bhi.w	8001d86 <Home_Screen+0x6e>
		fillRect(250, 210, 150, 75, ILI9488_GREEN);
 80020a4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	234b      	movs	r3, #75	@ 0x4b
 80020ac:	2296      	movs	r2, #150	@ 0x96
 80020ae:	21d2      	movs	r1, #210	@ 0xd2
 80020b0:	20fa      	movs	r0, #250	@ 0xfa
 80020b2:	f002 f9eb 	bl	800448c <fillRect>
		FingerPrint_Manager();
 80020b6:	f000 fafd 	bl	80026b4 <FingerPrint_Manager>
		HAL_Delay(1000);
 80020ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020be:	f004 f995 	bl	80063ec <HAL_Delay>
		option = 'f';
 80020c2:	2366      	movs	r3, #102	@ 0x66
 80020c4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		redraw = 1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	while (1){
 80020ce:	e65a      	b.n	8001d86 <Home_Screen+0x6e>
	}
	}

}
 80020d0:	375c      	adds	r7, #92	@ 0x5c
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000692 	.word	0x20000692
 80020dc:	20000694 	.word	0x20000694

080020e0 <Dispense_Auto_Manual>:

void Dispense_Auto_Manual() {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af02      	add	r7, sp, #8

	fillScreen(ILI9488_WHITE);
 80020e6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80020ea:	f002 f9b5 	bl	8004458 <fillScreen>



	char manual[] = "Manual";
 80020ee:	4a60      	ldr	r2, [pc, #384]	@ (8002270 <Dispense_Auto_Manual+0x190>)
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020f8:	6018      	str	r0, [r3, #0]
 80020fa:	3304      	adds	r3, #4
 80020fc:	8019      	strh	r1, [r3, #0]
 80020fe:	3302      	adds	r3, #2
 8002100:	0c0a      	lsrs	r2, r1, #16
 8002102:	701a      	strb	r2, [r3, #0]
	char automatic[] = "Automatic";
 8002104:	4a5b      	ldr	r2, [pc, #364]	@ (8002274 <Dispense_Auto_Manual+0x194>)
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	ca07      	ldmia	r2, {r0, r1, r2}
 800210c:	c303      	stmia	r3!, {r0, r1}
 800210e:	801a      	strh	r2, [r3, #0]
	char back[] = "Back";
 8002110:	4a59      	ldr	r2, [pc, #356]	@ (8002278 <Dispense_Auto_Manual+0x198>)
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002118:	6018      	str	r0, [r3, #0]
 800211a:	3304      	adds	r3, #4
 800211c:	7019      	strb	r1, [r3, #0]

	fillRect(50, 50, 150, 150, ILI9488_RED);
 800211e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2396      	movs	r3, #150	@ 0x96
 8002126:	2296      	movs	r2, #150	@ 0x96
 8002128:	2132      	movs	r1, #50	@ 0x32
 800212a:	2032      	movs	r0, #50	@ 0x32
 800212c:	f002 f9ae 	bl	800448c <fillRect>
	LCD_Font(80, 140, manual, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002130:	f107 0218 	add.w	r2, r7, #24
 8002134:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	2301      	movs	r3, #1
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4b4f      	ldr	r3, [pc, #316]	@ (800227c <Dispense_Auto_Manual+0x19c>)
 8002140:	218c      	movs	r1, #140	@ 0x8c
 8002142:	2050      	movs	r0, #80	@ 0x50
 8002144:	f002 ff79 	bl	800503a <LCD_Font>

	fillRect(250, 50, 150, 150, ILI9488_RED);
 8002148:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2396      	movs	r3, #150	@ 0x96
 8002150:	2296      	movs	r2, #150	@ 0x96
 8002152:	2132      	movs	r1, #50	@ 0x32
 8002154:	20fa      	movs	r0, #250	@ 0xfa
 8002156:	f002 f999 	bl	800448c <fillRect>
	LCD_Font(270, 140, automatic, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800215a:	f107 020c 	add.w	r2, r7, #12
 800215e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2301      	movs	r3, #1
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	4b44      	ldr	r3, [pc, #272]	@ (800227c <Dispense_Auto_Manual+0x19c>)
 800216a:	218c      	movs	r1, #140	@ 0x8c
 800216c:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002170:	f002 ff63 	bl	800503a <LCD_Font>

	fillRect(50, 250, 350, 50, ILI9488_RED);
 8002174:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2332      	movs	r3, #50	@ 0x32
 800217c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002180:	21fa      	movs	r1, #250	@ 0xfa
 8002182:	2032      	movs	r0, #50	@ 0x32
 8002184:	f002 f982 	bl	800448c <fillRect>
	LCD_Font(200, 280, back, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002188:	1d3a      	adds	r2, r7, #4
 800218a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	2301      	movs	r3, #1
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4b39      	ldr	r3, [pc, #228]	@ (800227c <Dispense_Auto_Manual+0x19c>)
 8002196:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800219a:	20c8      	movs	r0, #200	@ 0xc8
 800219c:	f002 ff4d 	bl	800503a <LCD_Font>

	while (1){

		touchX = getX();
 80021a0:	f004 f872 	bl	8006288 <getX>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b35      	ldr	r3, [pc, #212]	@ (8002280 <Dispense_Auto_Manual+0x1a0>)
 80021aa:	801a      	strh	r2, [r3, #0]
		touchY = getY();
 80021ac:	f004 f876 	bl	800629c <getY>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <Dispense_Auto_Manual+0x1a4>)
 80021b6:	801a      	strh	r2, [r3, #0]


	if (touchX >= 50 && touchX < 200 && touchY >= 50 && touchY < 200) {
 80021b8:	4b31      	ldr	r3, [pc, #196]	@ (8002280 <Dispense_Auto_Manual+0x1a0>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	2b31      	cmp	r3, #49	@ 0x31
 80021be:	d918      	bls.n	80021f2 <Dispense_Auto_Manual+0x112>
 80021c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002280 <Dispense_Auto_Manual+0x1a0>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80021c6:	d814      	bhi.n	80021f2 <Dispense_Auto_Manual+0x112>
 80021c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002284 <Dispense_Auto_Manual+0x1a4>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	2b31      	cmp	r3, #49	@ 0x31
 80021ce:	d910      	bls.n	80021f2 <Dispense_Auto_Manual+0x112>
 80021d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <Dispense_Auto_Manual+0x1a4>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80021d6:	d80c      	bhi.n	80021f2 <Dispense_Auto_Manual+0x112>
		fillRect(50, 50, 150, 150, ILI9488_GREEN);
 80021d8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	2396      	movs	r3, #150	@ 0x96
 80021e0:	2296      	movs	r2, #150	@ 0x96
 80021e2:	2132      	movs	r1, #50	@ 0x32
 80021e4:	2032      	movs	r0, #50	@ 0x32
 80021e6:	f002 f951 	bl	800448c <fillRect>
		dispenserChoose(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 f84c 	bl	8002288 <dispenserChoose>
		return;
 80021f0:	e03a      	b.n	8002268 <Dispense_Auto_Manual+0x188>
	}




	if (touchX >= 250 && touchX < 400 && touchY >= 50 && touchY < 200) {
 80021f2:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <Dispense_Auto_Manual+0x1a0>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	2bf9      	cmp	r3, #249	@ 0xf9
 80021f8:	d91a      	bls.n	8002230 <Dispense_Auto_Manual+0x150>
 80021fa:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <Dispense_Auto_Manual+0x1a0>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002202:	d215      	bcs.n	8002230 <Dispense_Auto_Manual+0x150>
 8002204:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <Dispense_Auto_Manual+0x1a4>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	2b31      	cmp	r3, #49	@ 0x31
 800220a:	d911      	bls.n	8002230 <Dispense_Auto_Manual+0x150>
 800220c:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <Dispense_Auto_Manual+0x1a4>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	2bc7      	cmp	r3, #199	@ 0xc7
 8002212:	d80d      	bhi.n	8002230 <Dispense_Auto_Manual+0x150>
		fillRect(250, 50, 150, 150, ILI9488_GREEN);
 8002214:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2396      	movs	r3, #150	@ 0x96
 800221c:	2296      	movs	r2, #150	@ 0x96
 800221e:	2132      	movs	r1, #50	@ 0x32
 8002220:	20fa      	movs	r0, #250	@ 0xfa
 8002222:	f002 f933 	bl	800448c <fillRect>
		DispenseScreen();
 8002226:	f7ff fac7 	bl	80017b8 <DispenseScreen>
		automaticDispense();
 800222a:	f7fe fe7b 	bl	8000f24 <automaticDispense>
		return;
 800222e:	e01b      	b.n	8002268 <Dispense_Auto_Manual+0x188>
	}



	if (touchX >= 50 && touchX < 400 && touchY >= 250 && touchY < 300) {
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <Dispense_Auto_Manual+0x1a0>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2b31      	cmp	r3, #49	@ 0x31
 8002236:	d9b3      	bls.n	80021a0 <Dispense_Auto_Manual+0xc0>
 8002238:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <Dispense_Auto_Manual+0x1a0>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002240:	d2ae      	bcs.n	80021a0 <Dispense_Auto_Manual+0xc0>
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <Dispense_Auto_Manual+0x1a4>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	2bf9      	cmp	r3, #249	@ 0xf9
 8002248:	d9aa      	bls.n	80021a0 <Dispense_Auto_Manual+0xc0>
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <Dispense_Auto_Manual+0x1a4>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002252:	d2a5      	bcs.n	80021a0 <Dispense_Auto_Manual+0xc0>
		fillRect(50, 250, 350, 50, ILI9488_GREEN);
 8002254:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2332      	movs	r3, #50	@ 0x32
 800225c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002260:	21fa      	movs	r1, #250	@ 0xfa
 8002262:	2032      	movs	r0, #50	@ 0x32
 8002264:	f002 f912 	bl	800448c <fillRect>
		return;
	}
	}

}
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	0800b508 	.word	0x0800b508
 8002274:	0800b510 	.word	0x0800b510
 8002278:	0800b500 	.word	0x0800b500
 800227c:	0800c6bc 	.word	0x0800c6bc
 8002280:	20000692 	.word	0x20000692
 8002284:	20000694 	.word	0x20000694

08002288 <dispenserChoose>:

//0 - Delete, 1 - manual dispense, 2 - loadNewPill.
void dispenserChoose(uint8_t mode) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b08c      	sub	sp, #48	@ 0x30
 800228c:	af02      	add	r7, sp, #8
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	char one[] = "1";
 8002292:	2331      	movs	r3, #49	@ 0x31
 8002294:	83bb      	strh	r3, [r7, #28]
	char two[] = "2";
 8002296:	2332      	movs	r3, #50	@ 0x32
 8002298:	833b      	strh	r3, [r7, #24]
	char three[] = "3";
 800229a:	2333      	movs	r3, #51	@ 0x33
 800229c:	82bb      	strh	r3, [r7, #20]
	char back[] = "Back";
 800229e:	4ab3      	ldr	r2, [pc, #716]	@ (800256c <dispenserChoose+0x2e4>)
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022a8:	6018      	str	r0, [r3, #0]
 80022aa:	3304      	adds	r3, #4
 80022ac:	7019      	strb	r1, [r3, #0]

	uint8_t dispOneEnabled;
	uint8_t dispTwoEnabled;
	uint8_t dispThreeEnabled;
	fillScreen(ILI9488_WHITE);
 80022ae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022b2:	f002 f8d1 	bl	8004458 <fillScreen>

	if (mode == 1 || mode == 0){
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d002      	beq.n	80022c2 <dispenserChoose+0x3a>
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d121      	bne.n	8002306 <dispenserChoose+0x7e>
		 dispOneEnabled = !dispenserAvailable(0);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7fe fbac 	bl	8000a20 <dispenserAvailable>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		 dispTwoEnabled = !dispenserAvailable(1);
 80022d8:	2001      	movs	r0, #1
 80022da:	f7fe fba1 	bl	8000a20 <dispenserAvailable>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		 dispThreeEnabled = !dispenserAvailable(2);
 80022ee:	2002      	movs	r0, #2
 80022f0:	f7fe fb96 	bl	8000a20 <dispenserAvailable>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf0c      	ite	eq
 80022fa:	2301      	moveq	r3, #1
 80022fc:	2300      	movne	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002304:	e011      	b.n	800232a <dispenserChoose+0xa2>

	}

	else{
		 dispOneEnabled = dispenserAvailable(0);
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe fb8a 	bl	8000a20 <dispenserAvailable>
 800230c:	4603      	mov	r3, r0
 800230e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		 dispTwoEnabled = dispenserAvailable(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f7fe fb84 	bl	8000a20 <dispenserAvailable>
 8002318:	4603      	mov	r3, r0
 800231a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		 dispThreeEnabled = dispenserAvailable(2);
 800231e:	2002      	movs	r0, #2
 8002320:	f7fe fb7e 	bl	8000a20 <dispenserAvailable>
 8002324:	4603      	mov	r3, r0
 8002326:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}

		uint16_t dispOneColor = dispOneEnabled ? ILI9488_RED : ILI9488_DARKGREY;
 800232a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <dispenserChoose+0xb0>
 8002332:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002336:	e001      	b.n	800233c <dispenserChoose+0xb4>
 8002338:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800233c:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint16_t dispTwoColor = dispTwoEnabled ? ILI9488_RED : ILI9488_DARKGREY;
 800233e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <dispenserChoose+0xc4>
 8002346:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800234a:	e001      	b.n	8002350 <dispenserChoose+0xc8>
 800234c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8002350:	843b      	strh	r3, [r7, #32]
		uint16_t dispThreeColor = dispThreeEnabled ? ILI9488_RED : ILI9488_DARKGREY;
 8002352:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <dispenserChoose+0xd8>
 800235a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800235e:	e001      	b.n	8002364 <dispenserChoose+0xdc>
 8002360:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8002364:	83fb      	strh	r3, [r7, #30]

		fillRect(50, 50, 100, 150, dispOneColor);
 8002366:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2396      	movs	r3, #150	@ 0x96
 800236c:	2264      	movs	r2, #100	@ 0x64
 800236e:	2132      	movs	r1, #50	@ 0x32
 8002370:	2032      	movs	r0, #50	@ 0x32
 8002372:	f002 f88b 	bl	800448c <fillRect>
		LCD_Font(90, 150, one, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002376:	f107 021c 	add.w	r2, r7, #28
 800237a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2301      	movs	r3, #1
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4b7a      	ldr	r3, [pc, #488]	@ (8002570 <dispenserChoose+0x2e8>)
 8002386:	2196      	movs	r1, #150	@ 0x96
 8002388:	205a      	movs	r0, #90	@ 0x5a
 800238a:	f002 fe56 	bl	800503a <LCD_Font>

		fillRect(200, 50, 100, 150, dispTwoColor);
 800238e:	8c3b      	ldrh	r3, [r7, #32]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2396      	movs	r3, #150	@ 0x96
 8002394:	2264      	movs	r2, #100	@ 0x64
 8002396:	2132      	movs	r1, #50	@ 0x32
 8002398:	20c8      	movs	r0, #200	@ 0xc8
 800239a:	f002 f877 	bl	800448c <fillRect>
		LCD_Font(240, 150, two, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800239e:	f107 0218 	add.w	r2, r7, #24
 80023a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2301      	movs	r3, #1
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4b70      	ldr	r3, [pc, #448]	@ (8002570 <dispenserChoose+0x2e8>)
 80023ae:	2196      	movs	r1, #150	@ 0x96
 80023b0:	20f0      	movs	r0, #240	@ 0xf0
 80023b2:	f002 fe42 	bl	800503a <LCD_Font>


		fillRect(350, 50, 100, 150, dispThreeColor);
 80023b6:	8bfb      	ldrh	r3, [r7, #30]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2396      	movs	r3, #150	@ 0x96
 80023bc:	2264      	movs	r2, #100	@ 0x64
 80023be:	2132      	movs	r1, #50	@ 0x32
 80023c0:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80023c4:	f002 f862 	bl	800448c <fillRect>
		LCD_Font(390, 150, three, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 80023c8:	f107 0214 	add.w	r2, r7, #20
 80023cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	2301      	movs	r3, #1
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4b66      	ldr	r3, [pc, #408]	@ (8002570 <dispenserChoose+0x2e8>)
 80023d8:	2196      	movs	r1, #150	@ 0x96
 80023da:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 80023de:	f002 fe2c 	bl	800503a <LCD_Font>

		fillRect(70, 250, 350, 50, ILI9488_RED);
 80023e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2332      	movs	r3, #50	@ 0x32
 80023ea:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80023ee:	21fa      	movs	r1, #250	@ 0xfa
 80023f0:	2046      	movs	r0, #70	@ 0x46
 80023f2:	f002 f84b 	bl	800448c <fillRect>
		LCD_Font(220, 280, back, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 80023f6:	f107 020c 	add.w	r2, r7, #12
 80023fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2301      	movs	r3, #1
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4b5a      	ldr	r3, [pc, #360]	@ (8002570 <dispenserChoose+0x2e8>)
 8002406:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800240a:	20dc      	movs	r0, #220	@ 0xdc
 800240c:	f002 fe15 	bl	800503a <LCD_Font>
		// 1 for Delete, 0 for Manual

	uint8_t choice = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	while (1){
	touchX = getX();
 8002416:	f003 ff37 	bl	8006288 <getX>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	4b55      	ldr	r3, [pc, #340]	@ (8002574 <dispenserChoose+0x2ec>)
 8002420:	801a      	strh	r2, [r3, #0]
	touchY = getY();
 8002422:	f003 ff3b 	bl	800629c <getY>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	4b53      	ldr	r3, [pc, #332]	@ (8002578 <dispenserChoose+0x2f0>)
 800242c:	801a      	strh	r2, [r3, #0]




	if (dispOneEnabled && touchX >= 50 && touchX < 150 && touchY >= 50 && touchY < 200) {
 800242e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01c      	beq.n	8002470 <dispenserChoose+0x1e8>
 8002436:	4b4f      	ldr	r3, [pc, #316]	@ (8002574 <dispenserChoose+0x2ec>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	2b31      	cmp	r3, #49	@ 0x31
 800243c:	d918      	bls.n	8002470 <dispenserChoose+0x1e8>
 800243e:	4b4d      	ldr	r3, [pc, #308]	@ (8002574 <dispenserChoose+0x2ec>)
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	2b95      	cmp	r3, #149	@ 0x95
 8002444:	d814      	bhi.n	8002470 <dispenserChoose+0x1e8>
 8002446:	4b4c      	ldr	r3, [pc, #304]	@ (8002578 <dispenserChoose+0x2f0>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	2b31      	cmp	r3, #49	@ 0x31
 800244c:	d910      	bls.n	8002470 <dispenserChoose+0x1e8>
 800244e:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <dispenserChoose+0x2f0>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	2bc7      	cmp	r3, #199	@ 0xc7
 8002454:	d80c      	bhi.n	8002470 <dispenserChoose+0x1e8>
		fillRect(50, 50, 100, 150, ILI9488_GREEN);
 8002456:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2396      	movs	r3, #150	@ 0x96
 800245e:	2264      	movs	r2, #100	@ 0x64
 8002460:	2132      	movs	r1, #50	@ 0x32
 8002462:	2032      	movs	r0, #50	@ 0x32
 8002464:	f002 f812 	bl	800448c <fillRect>
		choice = 1;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		break;
 800246e:	e066      	b.n	800253e <dispenserChoose+0x2b6>
		//return;
	}



	if (dispTwoEnabled && touchX >= 200 && touchX < 300 && touchY >= 50 && touchY < 200) {
 8002470:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01d      	beq.n	80024b4 <dispenserChoose+0x22c>
 8002478:	4b3e      	ldr	r3, [pc, #248]	@ (8002574 <dispenserChoose+0x2ec>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	2bc7      	cmp	r3, #199	@ 0xc7
 800247e:	d919      	bls.n	80024b4 <dispenserChoose+0x22c>
 8002480:	4b3c      	ldr	r3, [pc, #240]	@ (8002574 <dispenserChoose+0x2ec>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002488:	d214      	bcs.n	80024b4 <dispenserChoose+0x22c>
 800248a:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <dispenserChoose+0x2f0>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	2b31      	cmp	r3, #49	@ 0x31
 8002490:	d910      	bls.n	80024b4 <dispenserChoose+0x22c>
 8002492:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <dispenserChoose+0x2f0>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	2bc7      	cmp	r3, #199	@ 0xc7
 8002498:	d80c      	bhi.n	80024b4 <dispenserChoose+0x22c>
		fillRect(200, 50, 100, 150, ILI9488_GREEN);
 800249a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2396      	movs	r3, #150	@ 0x96
 80024a2:	2264      	movs	r2, #100	@ 0x64
 80024a4:	2132      	movs	r1, #50	@ 0x32
 80024a6:	20c8      	movs	r0, #200	@ 0xc8
 80024a8:	f001 fff0 	bl	800448c <fillRect>
		choice = 2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		break;
 80024b2:	e044      	b.n	800253e <dispenserChoose+0x2b6>
		//return;
	}


	if (dispThreeEnabled && touchX >= 350 && touchX < 450 && touchY >= 50 && touchY < 200) {
 80024b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01f      	beq.n	80024fc <dispenserChoose+0x274>
 80024bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002574 <dispenserChoose+0x2ec>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80024c4:	d31a      	bcc.n	80024fc <dispenserChoose+0x274>
 80024c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002574 <dispenserChoose+0x2ec>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80024ce:	d215      	bcs.n	80024fc <dispenserChoose+0x274>
 80024d0:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <dispenserChoose+0x2f0>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	2b31      	cmp	r3, #49	@ 0x31
 80024d6:	d911      	bls.n	80024fc <dispenserChoose+0x274>
 80024d8:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <dispenserChoose+0x2f0>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80024de:	d80d      	bhi.n	80024fc <dispenserChoose+0x274>
		fillRect(350, 50, 100, 150, ILI9488_GREEN);
 80024e0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2396      	movs	r3, #150	@ 0x96
 80024e8:	2264      	movs	r2, #100	@ 0x64
 80024ea:	2132      	movs	r1, #50	@ 0x32
 80024ec:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80024f0:	f001 ffcc 	bl	800448c <fillRect>
		choice = 3;
 80024f4:	2303      	movs	r3, #3
 80024f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		break;
 80024fa:	e020      	b.n	800253e <dispenserChoose+0x2b6>
	}



	if (touchX >= 70 && touchX < 400 && touchY >= 250 && touchY < 300) {
 80024fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <dispenserChoose+0x2ec>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	2b45      	cmp	r3, #69	@ 0x45
 8002502:	d988      	bls.n	8002416 <dispenserChoose+0x18e>
 8002504:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <dispenserChoose+0x2ec>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800250c:	d283      	bcs.n	8002416 <dispenserChoose+0x18e>
 800250e:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <dispenserChoose+0x2f0>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	2bf9      	cmp	r3, #249	@ 0xf9
 8002514:	f67f af7f 	bls.w	8002416 <dispenserChoose+0x18e>
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <dispenserChoose+0x2f0>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002520:	f4bf af79 	bcs.w	8002416 <dispenserChoose+0x18e>
		fillRect(70, 250, 350, 50, ILI9488_GREEN);
 8002524:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2332      	movs	r3, #50	@ 0x32
 800252c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002530:	21fa      	movs	r1, #250	@ 0xfa
 8002532:	2046      	movs	r0, #70	@ 0x46
 8002534:	f001 ffaa 	bl	800448c <fillRect>
		choice = 4;
 8002538:	2304      	movs	r3, #4
 800253a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	}

	//go back home.
	if (choice == 4) {
 800253e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002542:	2b04      	cmp	r3, #4
 8002544:	d03e      	beq.n	80025c4 <dispenserChoose+0x33c>
		return;
	}

	switch (mode){
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d033      	beq.n	80025b4 <dispenserChoose+0x32c>
 800254c:	2b02      	cmp	r3, #2
 800254e:	dc3c      	bgt.n	80025ca <dispenserChoose+0x342>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <dispenserChoose+0x2d2>
 8002554:	2b01      	cmp	r3, #1
 8002556:	d011      	beq.n	800257c <dispenserChoose+0x2f4>
 8002558:	e037      	b.n	80025ca <dispenserChoose+0x342>
	case 0: //delete
		deleteDispenser(choice - 1);
 800255a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800255e:	3b01      	subs	r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fa76 	bl	8000a54 <deleteDispenser>
		break;
 8002568:	e02f      	b.n	80025ca <dispenserChoose+0x342>
 800256a:	bf00      	nop
 800256c:	0800b500 	.word	0x0800b500
 8002570:	0800c6bc 	.word	0x0800c6bc
 8002574:	20000692 	.word	0x20000692
 8002578:	20000694 	.word	0x20000694
	case 1: //manual dispense
		//insert manual dispense function here
		switch(choice - 1){
 800257c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002580:	3b01      	subs	r3, #1
 8002582:	2b02      	cmp	r3, #2
 8002584:	d010      	beq.n	80025a8 <dispenserChoose+0x320>
 8002586:	2b02      	cmp	r3, #2
 8002588:	dc1e      	bgt.n	80025c8 <dispenserChoose+0x340>
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <dispenserChoose+0x30c>
 800258e:	2b01      	cmp	r3, #1
 8002590:	d005      	beq.n	800259e <dispenserChoose+0x316>
		case 2:
			DispenseScreen();
			Dispense3();
			break;
		}
		break;
 8002592:	e019      	b.n	80025c8 <dispenserChoose+0x340>
			DispenseScreen();
 8002594:	f7ff f910 	bl	80017b8 <DispenseScreen>
			Dispense1();
 8002598:	f7fe fcfc 	bl	8000f94 <Dispense1>
			break;
 800259c:	e009      	b.n	80025b2 <dispenserChoose+0x32a>
			DispenseScreen();
 800259e:	f7ff f90b 	bl	80017b8 <DispenseScreen>
			Dispense2();
 80025a2:	f7fe fd27 	bl	8000ff4 <Dispense2>
			break;
 80025a6:	e004      	b.n	80025b2 <dispenserChoose+0x32a>
			DispenseScreen();
 80025a8:	f7ff f906 	bl	80017b8 <DispenseScreen>
			Dispense3();
 80025ac:	f7fe fd56 	bl	800105c <Dispense3>
			break;
 80025b0:	bf00      	nop
		break;
 80025b2:	e009      	b.n	80025c8 <dispenserChoose+0x340>
	case 2:
		New_Pill_Screen(choice -  1);
 80025b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 f9bd 	bl	800293c <New_Pill_Screen>
		break;
 80025c2:	e002      	b.n	80025ca <dispenserChoose+0x342>
		return;
 80025c4:	bf00      	nop
 80025c6:	e000      	b.n	80025ca <dispenserChoose+0x342>
		break;
 80025c8:	bf00      	nop

	}


}
 80025ca:	3728      	adds	r7, #40	@ 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <lid_open_screen>:



void lid_open_screen(){
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b089      	sub	sp, #36	@ 0x24
 80025d4:	af02      	add	r7, sp, #8
	char unlockButton[] = "Re-Lock";
 80025d6:	4a32      	ldr	r2, [pc, #200]	@ (80026a0 <lid_open_screen+0xd0>)
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025e0:	e883 0003 	stmia.w	r3, {r0, r1}

	char lockingMsg[] = "Re-locking lid";
 80025e4:	4b2f      	ldr	r3, [pc, #188]	@ (80026a4 <lid_open_screen+0xd4>)
 80025e6:	463c      	mov	r4, r7
 80025e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ea:	c407      	stmia	r4!, {r0, r1, r2}
 80025ec:	8023      	strh	r3, [r4, #0]
 80025ee:	3402      	adds	r4, #2
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	7023      	strb	r3, [r4, #0]

	fillScreen(ILI9488_WHITE);
 80025f4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80025f8:	f001 ff2e 	bl	8004458 <fillScreen>
	fillRect(50, 250, 350, 50, ILI9488_RED);
 80025fc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2332      	movs	r3, #50	@ 0x32
 8002604:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002608:	21fa      	movs	r1, #250	@ 0xfa
 800260a:	2032      	movs	r0, #50	@ 0x32
 800260c:	f001 ff3e 	bl	800448c <fillRect>
	LCD_Font(200, 280, unlockButton, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002610:	f107 0210 	add.w	r2, r7, #16
 8002614:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	2301      	movs	r3, #1
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <lid_open_screen+0xd8>)
 8002620:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002624:	20c8      	movs	r0, #200	@ 0xc8
 8002626:	f002 fd08 	bl	800503a <LCD_Font>
	unlock();
 800262a:	f7fe fd73 	bl	8001114 <unlock>
	while(1){
		touchX = getX();
 800262e:	f003 fe2b 	bl	8006288 <getX>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <lid_open_screen+0xdc>)
 8002638:	801a      	strh	r2, [r3, #0]
		touchY = getY();
 800263a:	f003 fe2f 	bl	800629c <getY>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <lid_open_screen+0xe0>)
 8002644:	801a      	strh	r2, [r3, #0]
	if (touchX >= 50 && touchX < 400 && touchY >= 250 && touchY < 300) {
 8002646:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <lid_open_screen+0xdc>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	2b31      	cmp	r3, #49	@ 0x31
 800264c:	d9ef      	bls.n	800262e <lid_open_screen+0x5e>
 800264e:	4b17      	ldr	r3, [pc, #92]	@ (80026ac <lid_open_screen+0xdc>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002656:	d2ea      	bcs.n	800262e <lid_open_screen+0x5e>
 8002658:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <lid_open_screen+0xe0>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	2bf9      	cmp	r3, #249	@ 0xf9
 800265e:	d9e6      	bls.n	800262e <lid_open_screen+0x5e>
 8002660:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <lid_open_screen+0xe0>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002668:	d2e1      	bcs.n	800262e <lid_open_screen+0x5e>
		fillRect(50, 250, 350, 50, ILI9488_GREEN);
 800266a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2332      	movs	r3, #50	@ 0x32
 8002672:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002676:	21fa      	movs	r1, #250	@ 0xfa
 8002678:	2032      	movs	r0, #50	@ 0x32
 800267a:	f001 ff07 	bl	800448c <fillRect>
		LCD_Font(10, 50, lockingMsg, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800267e:	463a      	mov	r2, r7
 8002680:	2300      	movs	r3, #0
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2301      	movs	r3, #1
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	4b07      	ldr	r3, [pc, #28]	@ (80026a8 <lid_open_screen+0xd8>)
 800268a:	2132      	movs	r1, #50	@ 0x32
 800268c:	200a      	movs	r0, #10
 800268e:	f002 fcd4 	bl	800503a <LCD_Font>
		lock();
 8002692:	f7fe fd17 	bl	80010c4 <lock>
		return;
 8002696:	bf00      	nop
	}
	}
}
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd90      	pop	{r4, r7, pc}
 800269e:	bf00      	nop
 80026a0:	0800b51c 	.word	0x0800b51c
 80026a4:	0800b524 	.word	0x0800b524
 80026a8:	0800c6bc 	.word	0x0800c6bc
 80026ac:	20000692 	.word	0x20000692
 80026b0:	20000694 	.word	0x20000694

080026b4 <FingerPrint_Manager>:

void FingerPrint_Manager() {
 80026b4:	b5b0      	push	{r4, r5, r7, lr}
 80026b6:	b09c      	sub	sp, #112	@ 0x70
 80026b8:	af02      	add	r7, sp, #8

	fillScreen(ILI9488_WHITE);
 80026ba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80026be:	f001 fecb 	bl	8004458 <fillScreen>

	uint16_t touchX = 0, touchY = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	 //the keys:

	fillRect(125, 30, 250, 75, ILI9488_RED);
 80026ce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	234b      	movs	r3, #75	@ 0x4b
 80026d6:	22fa      	movs	r2, #250	@ 0xfa
 80026d8:	211e      	movs	r1, #30
 80026da:	207d      	movs	r0, #125	@ 0x7d
 80026dc:	f001 fed6 	bl	800448c <fillRect>
	char addFing[] = "Add Fingerprint";
 80026e0:	4b91      	ldr	r3, [pc, #580]	@ (8002928 <FingerPrint_Manager+0x274>)
 80026e2:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80026e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	LCD_Font(165, 70, addFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 80026ec:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80026f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	2301      	movs	r3, #1
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4b8c      	ldr	r3, [pc, #560]	@ (800292c <FingerPrint_Manager+0x278>)
 80026fc:	2146      	movs	r1, #70	@ 0x46
 80026fe:	20a5      	movs	r0, #165	@ 0xa5
 8002700:	f002 fc9b 	bl	800503a <LCD_Font>

	fillRect(125, 130, 250, 75, ILI9488_RED);
 8002704:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	234b      	movs	r3, #75	@ 0x4b
 800270c:	22fa      	movs	r2, #250	@ 0xfa
 800270e:	2182      	movs	r1, #130	@ 0x82
 8002710:	207d      	movs	r0, #125	@ 0x7d
 8002712:	f001 febb 	bl	800448c <fillRect>
	char scanFing[] = "Scan Fingerprint";
 8002716:	4b86      	ldr	r3, [pc, #536]	@ (8002930 <FingerPrint_Manager+0x27c>)
 8002718:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800271c:	461d      	mov	r5, r3
 800271e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	7023      	strb	r3, [r4, #0]


	LCD_Font(165, 170, scanFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002726:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800272a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2301      	movs	r3, #1
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4b7d      	ldr	r3, [pc, #500]	@ (800292c <FingerPrint_Manager+0x278>)
 8002736:	21aa      	movs	r1, #170	@ 0xaa
 8002738:	20a5      	movs	r0, #165	@ 0xa5
 800273a:	f002 fc7e 	bl	800503a <LCD_Font>


	fillRect(125, 230, 250, 75, ILI9488_RED);
 800273e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	234b      	movs	r3, #75	@ 0x4b
 8002746:	22fa      	movs	r2, #250	@ 0xfa
 8002748:	21e6      	movs	r1, #230	@ 0xe6
 800274a:	207d      	movs	r0, #125	@ 0x7d
 800274c:	f001 fe9e 	bl	800448c <fillRect>
	char delFing[] = "Delete Fingerprint";
 8002750:	4b78      	ldr	r3, [pc, #480]	@ (8002934 <FingerPrint_Manager+0x280>)
 8002752:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002756:	461d      	mov	r5, r3
 8002758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	8022      	strh	r2, [r4, #0]
 8002762:	3402      	adds	r4, #2
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	7023      	strb	r3, [r4, #0]


	LCD_Font(165, 270, delFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002768:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800276c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	2301      	movs	r3, #1
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	4b6d      	ldr	r3, [pc, #436]	@ (800292c <FingerPrint_Manager+0x278>)
 8002778:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800277c:	20a5      	movs	r0, #165	@ 0xa5
 800277e:	f002 fc5c 	bl	800503a <LCD_Font>
		//char buf2[20];
		//char buf3[20];

			//ILI9488_printTextTest(buf1, 250 , 25, ILI9488_BLACK, ILI9488_WHITE, 2);
		   //ILI9488_printText(buf3, 150, 25, ILI9488_WHITE, ILI9488_WHITE, 1);
		LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002782:	1d3a      	adds	r2, r7, #4
 8002784:	2300      	movs	r3, #0
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2301      	movs	r3, #1
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4b67      	ldr	r3, [pc, #412]	@ (800292c <FingerPrint_Manager+0x278>)
 800278e:	2119      	movs	r1, #25
 8002790:	2019      	movs	r0, #25
 8002792:	f002 fc52 	bl	800503a <LCD_Font>
		touchX = getX();
 8002796:	f003 fd77 	bl	8006288 <getX>
 800279a:	4603      	mov	r3, r0
 800279c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		touchY = getY();
 80027a0:	f003 fd7c 	bl	800629c <getY>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sprintf(buf, "x=%3d y=%3d", touchX, touchY);
 80027aa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80027ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80027b2:	f107 0018 	add.w	r0, r7, #24
 80027b6:	4960      	ldr	r1, [pc, #384]	@ (8002938 <FingerPrint_Manager+0x284>)
 80027b8:	f008 f8b2 	bl	800a920 <siprintf>
		sprintf(buf1, "x=%3d y=%3d", touchX, touchY);
 80027bc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80027c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80027c4:	1d38      	adds	r0, r7, #4
 80027c6:	495c      	ldr	r1, [pc, #368]	@ (8002938 <FingerPrint_Manager+0x284>)
 80027c8:	f008 f8aa 	bl	800a920 <siprintf>
		//sprintf(buf2,"count=%3d entered=%3d",count,entered[count]);
		//sprintf(buf3,"count=%3d entered=%3d",count,entered[count]);

		//ILI9488_printTextTest(buf1, 250, 25, ILI9488_BLACK,  ILI9488_WHITE, 2);
		//ILI9488_printText(buf3, 150, 25, ILI9488_BLACK, ILI9488_BLACK, 1);
		LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80027cc:	1d3a      	adds	r2, r7, #4
 80027ce:	2300      	movs	r3, #0
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	2301      	movs	r3, #1
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	4b55      	ldr	r3, [pc, #340]	@ (800292c <FingerPrint_Manager+0x278>)
 80027d8:	2119      	movs	r1, #25
 80027da:	2019      	movs	r0, #25
 80027dc:	f002 fc2d 	bl	800503a <LCD_Font>
		  390, 67
		  390, 165
		 */


		if (touchX >= 79 && touchX < 390 && touchY >= 55 && touchY < 165) {
 80027e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80027e4:	2b4e      	cmp	r3, #78	@ 0x4e
 80027e6:	d92f      	bls.n	8002848 <FingerPrint_Manager+0x194>
 80027e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80027ec:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 80027f0:	d22a      	bcs.n	8002848 <FingerPrint_Manager+0x194>
 80027f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80027f6:	2b36      	cmp	r3, #54	@ 0x36
 80027f8:	d926      	bls.n	8002848 <FingerPrint_Manager+0x194>
 80027fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80027fe:	2ba4      	cmp	r3, #164	@ 0xa4
 8002800:	d822      	bhi.n	8002848 <FingerPrint_Manager+0x194>
			fillRect(125, 30, 250, 75, ILI9488_GREEN);
 8002802:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	234b      	movs	r3, #75	@ 0x4b
 800280a:	22fa      	movs	r2, #250	@ 0xfa
 800280c:	211e      	movs	r1, #30
 800280e:	207d      	movs	r0, #125	@ 0x7d
 8002810:	f001 fe3c 	bl	800448c <fillRect>
			HAL_Delay(300);
 8002814:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002818:	f003 fde8 	bl	80063ec <HAL_Delay>
			fillRect(125, 30, 250, 75, ILI9488_RED);
 800281c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	234b      	movs	r3, #75	@ 0x4b
 8002824:	22fa      	movs	r2, #250	@ 0xfa
 8002826:	211e      	movs	r1, #30
 8002828:	207d      	movs	r0, #125	@ 0x7d
 800282a:	f001 fe2f 	bl	800448c <fillRect>
			LCD_Font(165, 70, addFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800282e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002832:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2301      	movs	r3, #1
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	4b3b      	ldr	r3, [pc, #236]	@ (800292c <FingerPrint_Manager+0x278>)
 800283e:	2146      	movs	r1, #70	@ 0x46
 8002840:	20a5      	movs	r0, #165	@ 0xa5
 8002842:	f002 fbfa 	bl	800503a <LCD_Font>
			return;
 8002846:	e06c      	b.n	8002922 <FingerPrint_Manager+0x26e>
		  79, 169
		  79, 233
		  377, 172
		  377, 207
		 */
		if (touchX >= 79 && touchX < 377 && touchY >= 169 && touchY < 233) {
 8002848:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800284c:	2b4e      	cmp	r3, #78	@ 0x4e
 800284e:	d92f      	bls.n	80028b0 <FingerPrint_Manager+0x1fc>
 8002850:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002854:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 8002858:	d82a      	bhi.n	80028b0 <FingerPrint_Manager+0x1fc>
 800285a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800285e:	2ba8      	cmp	r3, #168	@ 0xa8
 8002860:	d926      	bls.n	80028b0 <FingerPrint_Manager+0x1fc>
 8002862:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002866:	2be8      	cmp	r3, #232	@ 0xe8
 8002868:	d822      	bhi.n	80028b0 <FingerPrint_Manager+0x1fc>
			fillRect(125, 130, 250, 75, ILI9488_GREEN);
 800286a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	234b      	movs	r3, #75	@ 0x4b
 8002872:	22fa      	movs	r2, #250	@ 0xfa
 8002874:	2182      	movs	r1, #130	@ 0x82
 8002876:	207d      	movs	r0, #125	@ 0x7d
 8002878:	f001 fe08 	bl	800448c <fillRect>
			HAL_Delay(300);
 800287c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002880:	f003 fdb4 	bl	80063ec <HAL_Delay>
			fillRect(125, 130, 250, 75, ILI9488_RED);
 8002884:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	234b      	movs	r3, #75	@ 0x4b
 800288c:	22fa      	movs	r2, #250	@ 0xfa
 800288e:	2182      	movs	r1, #130	@ 0x82
 8002890:	207d      	movs	r0, #125	@ 0x7d
 8002892:	f001 fdfb 	bl	800448c <fillRect>
			LCD_Font(165, 170, scanFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002896:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800289a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2301      	movs	r3, #1
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4b21      	ldr	r3, [pc, #132]	@ (800292c <FingerPrint_Manager+0x278>)
 80028a6:	21aa      	movs	r1, #170	@ 0xaa
 80028a8:	20a5      	movs	r0, #165	@ 0xa5
 80028aa:	f002 fbc6 	bl	800503a <LCD_Font>
			return;
 80028ae:	e038      	b.n	8002922 <FingerPrint_Manager+0x26e>
		/*Delete Finger Print:
		  79, 248
		  377, 254
		  97, 305
		  372, 312*/
		if (touchX >= 79 && touchX < 377 && touchY >= 248 && touchY < 312) {
 80028b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80028b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80028b6:	f67f af64 	bls.w	8002782 <FingerPrint_Manager+0xce>
 80028ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80028be:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 80028c2:	f63f af5e 	bhi.w	8002782 <FingerPrint_Manager+0xce>
 80028c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80028ca:	2bf7      	cmp	r3, #247	@ 0xf7
 80028cc:	f67f af59 	bls.w	8002782 <FingerPrint_Manager+0xce>
 80028d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80028d4:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80028d8:	f4bf af53 	bcs.w	8002782 <FingerPrint_Manager+0xce>
			fillRect(125, 230, 250, 75, ILI9488_GREEN);
 80028dc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	234b      	movs	r3, #75	@ 0x4b
 80028e4:	22fa      	movs	r2, #250	@ 0xfa
 80028e6:	21e6      	movs	r1, #230	@ 0xe6
 80028e8:	207d      	movs	r0, #125	@ 0x7d
 80028ea:	f001 fdcf 	bl	800448c <fillRect>
			HAL_Delay(300);
 80028ee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80028f2:	f003 fd7b 	bl	80063ec <HAL_Delay>
			fillRect(125, 230, 250, 75, ILI9488_RED);
 80028f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	234b      	movs	r3, #75	@ 0x4b
 80028fe:	22fa      	movs	r2, #250	@ 0xfa
 8002900:	21e6      	movs	r1, #230	@ 0xe6
 8002902:	207d      	movs	r0, #125	@ 0x7d
 8002904:	f001 fdc2 	bl	800448c <fillRect>
			LCD_Font(165, 270, delFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002908:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800290c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2301      	movs	r3, #1
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4b05      	ldr	r3, [pc, #20]	@ (800292c <FingerPrint_Manager+0x278>)
 8002918:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800291c:	20a5      	movs	r0, #165	@ 0xa5
 800291e:	f002 fb8c 	bl	800503a <LCD_Font>

		}


}
}
 8002922:	3768      	adds	r7, #104	@ 0x68
 8002924:	46bd      	mov	sp, r7
 8002926:	bdb0      	pop	{r4, r5, r7, pc}
 8002928:	0800b540 	.word	0x0800b540
 800292c:	0800c6bc 	.word	0x0800c6bc
 8002930:	0800b550 	.word	0x0800b550
 8002934:	0800b564 	.word	0x0800b564
 8002938:	0800b534 	.word	0x0800b534

0800293c <New_Pill_Screen>:


void New_Pill_Screen(uint8_t dispNum) {
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b097      	sub	sp, #92	@ 0x5c
 8002940:	af02      	add	r7, sp, #8
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]

	fillScreen(ILI9488_WHITE);
 8002946:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800294a:	f001 fd85 	bl	8004458 <fillScreen>

	char red_skittle[] = "Red Skittle";
 800294e:	4aa0      	ldr	r2, [pc, #640]	@ (8002bd0 <New_Pill_Screen+0x294>)
 8002950:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002954:	ca07      	ldmia	r2, {r0, r1, r2}
 8002956:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char yellow_skittle[] = "Yellow Skittle";
 800295a:	4b9e      	ldr	r3, [pc, #632]	@ (8002bd4 <New_Pill_Screen+0x298>)
 800295c:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8002960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002962:	c407      	stmia	r4!, {r0, r1, r2}
 8002964:	8023      	strh	r3, [r4, #0]
 8002966:	3402      	adds	r4, #2
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	7023      	strb	r3, [r4, #0]
	char green_skittle[] = "Green Skittle";
 800296c:	4b9a      	ldr	r3, [pc, #616]	@ (8002bd8 <New_Pill_Screen+0x29c>)
 800296e:	f107 0420 	add.w	r4, r7, #32
 8002972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002974:	c407      	stmia	r4!, {r0, r1, r2}
 8002976:	8023      	strh	r3, [r4, #0]
	char hot_tamale[] = "Hot Tamale";
 8002978:	4a98      	ldr	r2, [pc, #608]	@ (8002bdc <New_Pill_Screen+0x2a0>)
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002980:	c303      	stmia	r3!, {r0, r1}
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	3302      	adds	r3, #2
 8002986:	0c12      	lsrs	r2, r2, #16
 8002988:	701a      	strb	r2, [r3, #0]
	char home[] = "  Back";
 800298a:	4a95      	ldr	r2, [pc, #596]	@ (8002be0 <New_Pill_Screen+0x2a4>)
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002994:	6018      	str	r0, [r3, #0]
 8002996:	3304      	adds	r3, #4
 8002998:	8019      	strh	r1, [r3, #0]
 800299a:	3302      	adds	r3, #2
 800299c:	0c0a      	lsrs	r2, r1, #16
 800299e:	701a      	strb	r2, [r3, #0]
	char option;


	fillRect(70, 40, 150, 75, ILI9488_RED);
 80029a0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	234b      	movs	r3, #75	@ 0x4b
 80029a8:	2296      	movs	r2, #150	@ 0x96
 80029aa:	2128      	movs	r1, #40	@ 0x28
 80029ac:	2046      	movs	r0, #70	@ 0x46
 80029ae:	f001 fd6d 	bl	800448c <fillRect>
	LCD_Font(100, 80, red_skittle, _Open_Sans_Bold_16, 1, ILI9488_WHITE);
 80029b2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80029b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	2301      	movs	r3, #1
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4b88      	ldr	r3, [pc, #544]	@ (8002be4 <New_Pill_Screen+0x2a8>)
 80029c2:	2150      	movs	r1, #80	@ 0x50
 80029c4:	2064      	movs	r0, #100	@ 0x64
 80029c6:	f002 fb38 	bl	800503a <LCD_Font>
	fillRect(250, 40, 150, 75, ILI9488_RED);
 80029ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	234b      	movs	r3, #75	@ 0x4b
 80029d2:	2296      	movs	r2, #150	@ 0x96
 80029d4:	2128      	movs	r1, #40	@ 0x28
 80029d6:	20fa      	movs	r0, #250	@ 0xfa
 80029d8:	f001 fd58 	bl	800448c <fillRect>
	LCD_Font(260, 80, yellow_skittle, _Open_Sans_Bold_16, 1, ILI9488_WHITE);
 80029dc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80029e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	2301      	movs	r3, #1
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4b7e      	ldr	r3, [pc, #504]	@ (8002be4 <New_Pill_Screen+0x2a8>)
 80029ec:	2150      	movs	r1, #80	@ 0x50
 80029ee:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80029f2:	f002 fb22 	bl	800503a <LCD_Font>

	fillRect(160, 125, 150, 75, ILI9488_RED);
 80029f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	234b      	movs	r3, #75	@ 0x4b
 80029fe:	2296      	movs	r2, #150	@ 0x96
 8002a00:	217d      	movs	r1, #125	@ 0x7d
 8002a02:	20a0      	movs	r0, #160	@ 0xa0
 8002a04:	f001 fd42 	bl	800448c <fillRect>
	LCD_Font(190, 165, home, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002a08:	f107 020c 	add.w	r2, r7, #12
 8002a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	2301      	movs	r3, #1
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4b74      	ldr	r3, [pc, #464]	@ (8002be8 <New_Pill_Screen+0x2ac>)
 8002a18:	21a5      	movs	r1, #165	@ 0xa5
 8002a1a:	20be      	movs	r0, #190	@ 0xbe
 8002a1c:	f002 fb0d 	bl	800503a <LCD_Font>


	fillRect(70, 210, 150, 75, ILI9488_RED);
 8002a20:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	234b      	movs	r3, #75	@ 0x4b
 8002a28:	2296      	movs	r2, #150	@ 0x96
 8002a2a:	21d2      	movs	r1, #210	@ 0xd2
 8002a2c:	2046      	movs	r0, #70	@ 0x46
 8002a2e:	f001 fd2d 	bl	800448c <fillRect>
	LCD_Font(80, 250, green_skittle, _Open_Sans_Bold_16, 1, ILI9488_WHITE);
 8002a32:	f107 0220 	add.w	r2, r7, #32
 8002a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4b68      	ldr	r3, [pc, #416]	@ (8002be4 <New_Pill_Screen+0x2a8>)
 8002a42:	21fa      	movs	r1, #250	@ 0xfa
 8002a44:	2050      	movs	r0, #80	@ 0x50
 8002a46:	f002 faf8 	bl	800503a <LCD_Font>
	fillRect(250, 210, 150, 75, ILI9488_RED);
 8002a4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	234b      	movs	r3, #75	@ 0x4b
 8002a52:	2296      	movs	r2, #150	@ 0x96
 8002a54:	21d2      	movs	r1, #210	@ 0xd2
 8002a56:	20fa      	movs	r0, #250	@ 0xfa
 8002a58:	f001 fd18 	bl	800448c <fillRect>
	LCD_Font(280, 250, hot_tamale, _Open_Sans_Bold_16, 1, ILI9488_WHITE);
 8002a5c:	f107 0214 	add.w	r2, r7, #20
 8002a60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	2301      	movs	r3, #1
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002be4 <New_Pill_Screen+0x2a8>)
 8002a6c:	21fa      	movs	r1, #250	@ 0xfa
 8002a6e:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8002a72:	f002 fae2 	bl	800503a <LCD_Font>


	while (1){

		touchX = getX();
 8002a76:	f003 fc07 	bl	8006288 <getX>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002a80:	801a      	strh	r2, [r3, #0]
		touchY = getY();
 8002a82:	f003 fc0b 	bl	800629c <getY>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b59      	ldr	r3, [pc, #356]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002a8c:	801a      	strh	r2, [r3, #0]


	if (touchX >= 70 && touchX < 220 && touchY >= 40 && touchY < 115) {
 8002a8e:	4b57      	ldr	r3, [pc, #348]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	2b45      	cmp	r3, #69	@ 0x45
 8002a94:	d918      	bls.n	8002ac8 <New_Pill_Screen+0x18c>
 8002a96:	4b55      	ldr	r3, [pc, #340]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	2bdb      	cmp	r3, #219	@ 0xdb
 8002a9c:	d814      	bhi.n	8002ac8 <New_Pill_Screen+0x18c>
 8002a9e:	4b54      	ldr	r3, [pc, #336]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	2b27      	cmp	r3, #39	@ 0x27
 8002aa4:	d910      	bls.n	8002ac8 <New_Pill_Screen+0x18c>
 8002aa6:	4b52      	ldr	r3, [pc, #328]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	2b72      	cmp	r3, #114	@ 0x72
 8002aac:	d80c      	bhi.n	8002ac8 <New_Pill_Screen+0x18c>
		fillRect(70, 40, 150, 75, ILI9488_GREEN);
 8002aae:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	234b      	movs	r3, #75	@ 0x4b
 8002ab6:	2296      	movs	r2, #150	@ 0x96
 8002ab8:	2128      	movs	r1, #40	@ 0x28
 8002aba:	2046      	movs	r0, #70	@ 0x46
 8002abc:	f001 fce6 	bl	800448c <fillRect>
		option = 'r';
 8002ac0:	2372      	movs	r3, #114	@ 0x72
 8002ac2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		break;
 8002ac6:	e078      	b.n	8002bba <New_Pill_Screen+0x27e>
	}

	if (touchX >= 250 && touchX < 400 && touchY >= 40 && touchY < 115) {
 8002ac8:	4b48      	ldr	r3, [pc, #288]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	2bf9      	cmp	r3, #249	@ 0xf9
 8002ace:	d919      	bls.n	8002b04 <New_Pill_Screen+0x1c8>
 8002ad0:	4b46      	ldr	r3, [pc, #280]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002ad8:	d214      	bcs.n	8002b04 <New_Pill_Screen+0x1c8>
 8002ada:	4b45      	ldr	r3, [pc, #276]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	2b27      	cmp	r3, #39	@ 0x27
 8002ae0:	d910      	bls.n	8002b04 <New_Pill_Screen+0x1c8>
 8002ae2:	4b43      	ldr	r3, [pc, #268]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	2b72      	cmp	r3, #114	@ 0x72
 8002ae8:	d80c      	bhi.n	8002b04 <New_Pill_Screen+0x1c8>
		fillRect(250, 40, 150, 75, ILI9488_GREEN);
 8002aea:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	234b      	movs	r3, #75	@ 0x4b
 8002af2:	2296      	movs	r2, #150	@ 0x96
 8002af4:	2128      	movs	r1, #40	@ 0x28
 8002af6:	20fa      	movs	r0, #250	@ 0xfa
 8002af8:	f001 fcc8 	bl	800448c <fillRect>

		option = 'y';
 8002afc:	2379      	movs	r3, #121	@ 0x79
 8002afe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		break;
 8002b02:	e05a      	b.n	8002bba <New_Pill_Screen+0x27e>
	}

	// Home
	else if (touchX >= 160 && touchX < 310 && touchY >= 125 && touchY < 200) {
 8002b04:	4b39      	ldr	r3, [pc, #228]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	2b9f      	cmp	r3, #159	@ 0x9f
 8002b0a:	d916      	bls.n	8002b3a <New_Pill_Screen+0x1fe>
 8002b0c:	4b37      	ldr	r3, [pc, #220]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8002b14:	d211      	bcs.n	8002b3a <New_Pill_Screen+0x1fe>
 8002b16:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	2b7c      	cmp	r3, #124	@ 0x7c
 8002b1c:	d90d      	bls.n	8002b3a <New_Pill_Screen+0x1fe>
 8002b1e:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b24:	d809      	bhi.n	8002b3a <New_Pill_Screen+0x1fe>
		fillRect(160, 125, 150, 75, ILI9488_GREEN);
 8002b26:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	234b      	movs	r3, #75	@ 0x4b
 8002b2e:	2296      	movs	r2, #150	@ 0x96
 8002b30:	217d      	movs	r1, #125	@ 0x7d
 8002b32:	20a0      	movs	r0, #160	@ 0xa0
 8002b34:	f001 fcaa 	bl	800448c <fillRect>
 8002b38:	e046      	b.n	8002bc8 <New_Pill_Screen+0x28c>
		return;
	}


	if (touchX >= 70 && touchX < 220 && touchY >= 210 && touchY < 285) {
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	2b45      	cmp	r3, #69	@ 0x45
 8002b40:	d919      	bls.n	8002b76 <New_Pill_Screen+0x23a>
 8002b42:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	2bdb      	cmp	r3, #219	@ 0xdb
 8002b48:	d815      	bhi.n	8002b76 <New_Pill_Screen+0x23a>
 8002b4a:	4b29      	ldr	r3, [pc, #164]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	2bd1      	cmp	r3, #209	@ 0xd1
 8002b50:	d911      	bls.n	8002b76 <New_Pill_Screen+0x23a>
 8002b52:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8002b5a:	d80c      	bhi.n	8002b76 <New_Pill_Screen+0x23a>
		fillRect(70, 210, 150, 75, ILI9488_GREEN);
 8002b5c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	234b      	movs	r3, #75	@ 0x4b
 8002b64:	2296      	movs	r2, #150	@ 0x96
 8002b66:	21d2      	movs	r1, #210	@ 0xd2
 8002b68:	2046      	movs	r0, #70	@ 0x46
 8002b6a:	f001 fc8f 	bl	800448c <fillRect>
		option = 'g';
 8002b6e:	2367      	movs	r3, #103	@ 0x67
 8002b70:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		break;
 8002b74:	e021      	b.n	8002bba <New_Pill_Screen+0x27e>
	}

	if (touchX >= 250 && touchX < 400 && touchY >= 210 && touchY < 285) {
 8002b76:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	2bf9      	cmp	r3, #249	@ 0xf9
 8002b7c:	f67f af7b 	bls.w	8002a76 <New_Pill_Screen+0x13a>
 8002b80:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <New_Pill_Screen+0x2b0>)
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002b88:	f4bf af75 	bcs.w	8002a76 <New_Pill_Screen+0x13a>
 8002b8c:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	2bd1      	cmp	r3, #209	@ 0xd1
 8002b92:	f67f af70 	bls.w	8002a76 <New_Pill_Screen+0x13a>
 8002b96:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <New_Pill_Screen+0x2b4>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8002b9e:	f63f af6a 	bhi.w	8002a76 <New_Pill_Screen+0x13a>
		fillRect(250, 210, 150, 75, ILI9488_GREEN);
 8002ba2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	234b      	movs	r3, #75	@ 0x4b
 8002baa:	2296      	movs	r2, #150	@ 0x96
 8002bac:	21d2      	movs	r1, #210	@ 0xd2
 8002bae:	20fa      	movs	r0, #250	@ 0xfa
 8002bb0:	f001 fc6c 	bl	800448c <fillRect>
		option = 'h';
 8002bb4:	2368      	movs	r3, #104	@ 0x68
 8002bb6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		break;
	}
	}
	weekdaySelector(dispNum, option);
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f816 	bl	8002bf4 <weekdaySelector>


}
 8002bc8:	3754      	adds	r7, #84	@ 0x54
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd90      	pop	{r4, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	0800b578 	.word	0x0800b578
 8002bd4:	0800b584 	.word	0x0800b584
 8002bd8:	0800b594 	.word	0x0800b594
 8002bdc:	0800b5a4 	.word	0x0800b5a4
 8002be0:	0800b5b0 	.word	0x0800b5b0
 8002be4:	0800bd78 	.word	0x0800bd78
 8002be8:	0800c6bc 	.word	0x0800c6bc
 8002bec:	20000692 	.word	0x20000692
 8002bf0:	20000694 	.word	0x20000694

08002bf4 <weekdaySelector>:

void weekdaySelector(char dispNum, char pillOption){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b09c      	sub	sp, #112	@ 0x70
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	71fb      	strb	r3, [r7, #7]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71bb      	strb	r3, [r7, #6]
	fillScreen(ILI9488_WHITE);
 8002c04:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c08:	f001 fc26 	bl	8004458 <fillScreen>

	   uint16_t touchX = 0, touchY = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c


	   uint8_t Sunday = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	   uint8_t Monday = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	   uint8_t Tuesday = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	   uint8_t Wednesday = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	   uint8_t Thursday = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	   uint8_t Friday = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	   uint8_t Saturday = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61




	   char addSunday[] = "SUN";
 8002c42:	4bb5      	ldr	r3, [pc, #724]	@ (8002f18 <weekdaySelector+0x324>)
 8002c44:	65bb      	str	r3, [r7, #88]	@ 0x58
	   char addMonday[] = "MON";
 8002c46:	4bb5      	ldr	r3, [pc, #724]	@ (8002f1c <weekdaySelector+0x328>)
 8002c48:	657b      	str	r3, [r7, #84]	@ 0x54
	   char addTuesday[] = "TUE";
 8002c4a:	4bb5      	ldr	r3, [pc, #724]	@ (8002f20 <weekdaySelector+0x32c>)
 8002c4c:	653b      	str	r3, [r7, #80]	@ 0x50
	   char addWednesday[] = "WED";
 8002c4e:	4bb5      	ldr	r3, [pc, #724]	@ (8002f24 <weekdaySelector+0x330>)
 8002c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
	   char addThursday[] = "THU";
 8002c52:	4bb5      	ldr	r3, [pc, #724]	@ (8002f28 <weekdaySelector+0x334>)
 8002c54:	64bb      	str	r3, [r7, #72]	@ 0x48
	   char addFriday[] = "FRI";
 8002c56:	4bb5      	ldr	r3, [pc, #724]	@ (8002f2c <weekdaySelector+0x338>)
 8002c58:	647b      	str	r3, [r7, #68]	@ 0x44
	   char addSaturday[] = "SAT";
 8002c5a:	4bb5      	ldr	r3, [pc, #724]	@ (8002f30 <weekdaySelector+0x33c>)
 8002c5c:	643b      	str	r3, [r7, #64]	@ 0x40
	   char addNext[] = "Next";
 8002c5e:	4ab5      	ldr	r2, [pc, #724]	@ (8002f34 <weekdaySelector+0x340>)
 8002c60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c68:	6018      	str	r0, [r3, #0]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	7019      	strb	r1, [r3, #0]

	   //Sunday
	   fillRect(65, 30,75,75, ILI9488_RED);
 8002c6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	234b      	movs	r3, #75	@ 0x4b
 8002c76:	224b      	movs	r2, #75	@ 0x4b
 8002c78:	211e      	movs	r1, #30
 8002c7a:	2041      	movs	r0, #65	@ 0x41
 8002c7c:	f001 fc06 	bl	800448c <fillRect>


	   //Monday
	   fillRect(150, 30,75,75, ILI9488_RED);
 8002c80:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	234b      	movs	r3, #75	@ 0x4b
 8002c88:	224b      	movs	r2, #75	@ 0x4b
 8002c8a:	211e      	movs	r1, #30
 8002c8c:	2096      	movs	r0, #150	@ 0x96
 8002c8e:	f001 fbfd 	bl	800448c <fillRect>

	   //Tuesday
	   fillRect(235, 30,75,75, ILI9488_RED);
 8002c92:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	234b      	movs	r3, #75	@ 0x4b
 8002c9a:	224b      	movs	r2, #75	@ 0x4b
 8002c9c:	211e      	movs	r1, #30
 8002c9e:	20eb      	movs	r0, #235	@ 0xeb
 8002ca0:	f001 fbf4 	bl	800448c <fillRect>

	   //Wednesday
	   fillRect(320, 30,75,75, ILI9488_RED);
 8002ca4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	234b      	movs	r3, #75	@ 0x4b
 8002cac:	224b      	movs	r2, #75	@ 0x4b
 8002cae:	211e      	movs	r1, #30
 8002cb0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8002cb4:	f001 fbea 	bl	800448c <fillRect>


	   //char addSunday[] = "S";

	   //Thursday
	   fillRect(105, 120,75,75, ILI9488_RED);
 8002cb8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	234b      	movs	r3, #75	@ 0x4b
 8002cc0:	224b      	movs	r2, #75	@ 0x4b
 8002cc2:	2178      	movs	r1, #120	@ 0x78
 8002cc4:	2069      	movs	r0, #105	@ 0x69
 8002cc6:	f001 fbe1 	bl	800448c <fillRect>


	   //Friday
	   fillRect(190, 120,75,75, ILI9488_RED);
 8002cca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	234b      	movs	r3, #75	@ 0x4b
 8002cd2:	224b      	movs	r2, #75	@ 0x4b
 8002cd4:	2178      	movs	r1, #120	@ 0x78
 8002cd6:	20be      	movs	r0, #190	@ 0xbe
 8002cd8:	f001 fbd8 	bl	800448c <fillRect>


	   //Saturday
	   fillRect(275, 120,75,75, ILI9488_RED);
 8002cdc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	234b      	movs	r3, #75	@ 0x4b
 8002ce4:	224b      	movs	r2, #75	@ 0x4b
 8002ce6:	2178      	movs	r1, #120	@ 0x78
 8002ce8:	f240 1013 	movw	r0, #275	@ 0x113
 8002cec:	f001 fbce 	bl	800448c <fillRect>


	   //Next button
	   fillRect(50, 250, 350, 50, ILI9488_RED);
 8002cf0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2332      	movs	r3, #50	@ 0x32
 8002cf8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002cfc:	21fa      	movs	r1, #250	@ 0xfa
 8002cfe:	2032      	movs	r0, #50	@ 0x32
 8002d00:	f001 fbc4 	bl	800448c <fillRect>


	   LCD_Font(85, 70, addSunday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002d04:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	4b89      	ldr	r3, [pc, #548]	@ (8002f38 <weekdaySelector+0x344>)
 8002d12:	2146      	movs	r1, #70	@ 0x46
 8002d14:	2055      	movs	r0, #85	@ 0x55
 8002d16:	f002 f990 	bl	800503a <LCD_Font>
	   LCD_Font(160, 70, addMonday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002d1a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2301      	movs	r3, #1
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	4b84      	ldr	r3, [pc, #528]	@ (8002f38 <weekdaySelector+0x344>)
 8002d28:	2146      	movs	r1, #70	@ 0x46
 8002d2a:	20a0      	movs	r0, #160	@ 0xa0
 8002d2c:	f002 f985 	bl	800503a <LCD_Font>
	   LCD_Font(255, 70, addTuesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002d30:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002d34:	2300      	movs	r3, #0
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f38 <weekdaySelector+0x344>)
 8002d3e:	2146      	movs	r1, #70	@ 0x46
 8002d40:	20ff      	movs	r0, #255	@ 0xff
 8002d42:	f002 f97a 	bl	800503a <LCD_Font>
	   LCD_Font(335, 70, addWednesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002d46:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	2301      	movs	r3, #1
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	4b79      	ldr	r3, [pc, #484]	@ (8002f38 <weekdaySelector+0x344>)
 8002d54:	2146      	movs	r1, #70	@ 0x46
 8002d56:	f240 104f 	movw	r0, #335	@ 0x14f
 8002d5a:	f002 f96e 	bl	800503a <LCD_Font>
	   LCD_Font(125, 160, addThursday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002d5e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002d62:	2300      	movs	r3, #0
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	2301      	movs	r3, #1
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	4b73      	ldr	r3, [pc, #460]	@ (8002f38 <weekdaySelector+0x344>)
 8002d6c:	21a0      	movs	r1, #160	@ 0xa0
 8002d6e:	207d      	movs	r0, #125	@ 0x7d
 8002d70:	f002 f963 	bl	800503a <LCD_Font>
	   LCD_Font(210, 160, addFriday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002d74:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	4b6d      	ldr	r3, [pc, #436]	@ (8002f38 <weekdaySelector+0x344>)
 8002d82:	21a0      	movs	r1, #160	@ 0xa0
 8002d84:	20d2      	movs	r0, #210	@ 0xd2
 8002d86:	f002 f958 	bl	800503a <LCD_Font>
	   LCD_Font(295, 160, addSaturday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002d8a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	2301      	movs	r3, #1
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4b68      	ldr	r3, [pc, #416]	@ (8002f38 <weekdaySelector+0x344>)
 8002d98:	21a0      	movs	r1, #160	@ 0xa0
 8002d9a:	f240 1027 	movw	r0, #295	@ 0x127
 8002d9e:	f002 f94c 	bl	800503a <LCD_Font>

	   LCD_Font(200, 285, addNext, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002da2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002da6:	2300      	movs	r3, #0
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2301      	movs	r3, #1
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4b62      	ldr	r3, [pc, #392]	@ (8002f38 <weekdaySelector+0x344>)
 8002db0:	f240 111d 	movw	r1, #285	@ 0x11d
 8002db4:	20c8      	movs	r0, #200	@ 0xc8
 8002db6:	f002 f940 	bl	800503a <LCD_Font>
	  {

		  char buf[20];
		  char buf1[20];

		  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002dba:	f107 0210 	add.w	r2, r7, #16
 8002dbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4b5b      	ldr	r3, [pc, #364]	@ (8002f38 <weekdaySelector+0x344>)
 8002dca:	2119      	movs	r1, #25
 8002dcc:	2019      	movs	r0, #25
 8002dce:	f002 f934 	bl	800503a <LCD_Font>
		  	  touchX = getX();
 8002dd2:	f003 fa59 	bl	8006288 <getX>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		  	  touchY = getY();
 8002ddc:	f003 fa5e 	bl	800629c <getY>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		  	  sprintf(buf,"x=%3d y=%3d",touchX,touchY);
 8002de6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002dea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002dee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002df2:	4952      	ldr	r1, [pc, #328]	@ (8002f3c <weekdaySelector+0x348>)
 8002df4:	f007 fd94 	bl	800a920 <siprintf>
		  	  sprintf(buf1,"x=%3d y=%3d",touchX,touchY);
 8002df8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002dfc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002e00:	f107 0010 	add.w	r0, r7, #16
 8002e04:	494d      	ldr	r1, [pc, #308]	@ (8002f3c <weekdaySelector+0x348>)
 8002e06:	f007 fd8b 	bl	800a920 <siprintf>

		  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002e0a:	f107 0210 	add.w	r2, r7, #16
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	2301      	movs	r3, #1
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4b48      	ldr	r3, [pc, #288]	@ (8002f38 <weekdaySelector+0x344>)
 8002e18:	2119      	movs	r1, #25
 8002e1a:	2019      	movs	r0, #25
 8002e1c:	f002 f90d 	bl	800503a <LCD_Font>



		  	  if(touchX >= 6 && touchX < 88 && touchY >= 55 && touchY < 161){
 8002e20:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d946      	bls.n	8002eb6 <weekdaySelector+0x2c2>
 8002e28:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002e2c:	2b57      	cmp	r3, #87	@ 0x57
 8002e2e:	d842      	bhi.n	8002eb6 <weekdaySelector+0x2c2>
 8002e30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002e34:	2b36      	cmp	r3, #54	@ 0x36
 8002e36:	d93e      	bls.n	8002eb6 <weekdaySelector+0x2c2>
 8002e38:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002e3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e3e:	d83a      	bhi.n	8002eb6 <weekdaySelector+0x2c2>
		  		  if(Sunday == 0){
 8002e40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11b      	bne.n	8002e80 <weekdaySelector+0x28c>
		  			  fillRect(65, 30,75,75, ILI9488_GREEN);
 8002e48:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	234b      	movs	r3, #75	@ 0x4b
 8002e50:	224b      	movs	r2, #75	@ 0x4b
 8002e52:	211e      	movs	r1, #30
 8002e54:	2041      	movs	r0, #65	@ 0x41
 8002e56:	f001 fb19 	bl	800448c <fillRect>
		  			  LCD_Font(85, 70, addSunday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002e5a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	2301      	movs	r3, #1
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	4b34      	ldr	r3, [pc, #208]	@ (8002f38 <weekdaySelector+0x344>)
 8002e68:	2146      	movs	r1, #70	@ 0x46
 8002e6a:	2055      	movs	r0, #85	@ 0x55
 8002e6c:	f002 f8e5 	bl	800503a <LCD_Font>
		  			  Sunday = 1;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		  			  HAL_Delay(300);
 8002e76:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002e7a:	f003 fab7 	bl	80063ec <HAL_Delay>
 8002e7e:	e01a      	b.n	8002eb6 <weekdaySelector+0x2c2>
		  		  }
		  		  else{
		  			  Sunday = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		  			  fillRect(65, 30,75,75, ILI9488_RED);
 8002e86:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	234b      	movs	r3, #75	@ 0x4b
 8002e8e:	224b      	movs	r2, #75	@ 0x4b
 8002e90:	211e      	movs	r1, #30
 8002e92:	2041      	movs	r0, #65	@ 0x41
 8002e94:	f001 fafa 	bl	800448c <fillRect>
		  			  LCD_Font(85, 70, addSunday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002e98:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	4b24      	ldr	r3, [pc, #144]	@ (8002f38 <weekdaySelector+0x344>)
 8002ea6:	2146      	movs	r1, #70	@ 0x46
 8002ea8:	2055      	movs	r0, #85	@ 0x55
 8002eaa:	f002 f8c6 	bl	800503a <LCD_Font>
		  			  HAL_Delay(300);
 8002eae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002eb2:	f003 fa9b 	bl	80063ec <HAL_Delay>

		  		  }
		  	  }

		  	if(touchX >= 88 && touchX < 221 && touchY >= 55 && touchY < 161){
 8002eb6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002eba:	2b57      	cmp	r3, #87	@ 0x57
 8002ebc:	d95b      	bls.n	8002f76 <weekdaySelector+0x382>
 8002ebe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002ec2:	2bdc      	cmp	r3, #220	@ 0xdc
 8002ec4:	d857      	bhi.n	8002f76 <weekdaySelector+0x382>
 8002ec6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002eca:	2b36      	cmp	r3, #54	@ 0x36
 8002ecc:	d953      	bls.n	8002f76 <weekdaySelector+0x382>
 8002ece:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002ed2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ed4:	d84f      	bhi.n	8002f76 <weekdaySelector+0x382>
		  		  		  if(Monday == 0){
 8002ed6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d130      	bne.n	8002f40 <weekdaySelector+0x34c>
		  		  			  fillRect(150, 30,75,75, ILI9488_GREEN);
 8002ede:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	234b      	movs	r3, #75	@ 0x4b
 8002ee6:	224b      	movs	r2, #75	@ 0x4b
 8002ee8:	211e      	movs	r1, #30
 8002eea:	2096      	movs	r0, #150	@ 0x96
 8002eec:	f001 face 	bl	800448c <fillRect>
		  		  			  LCD_Font(160, 70, addMonday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002ef0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2301      	movs	r3, #1
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <weekdaySelector+0x344>)
 8002efe:	2146      	movs	r1, #70	@ 0x46
 8002f00:	20a0      	movs	r0, #160	@ 0xa0
 8002f02:	f002 f89a 	bl	800503a <LCD_Font>
		  		  			  Monday = 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
		  		  			  HAL_Delay(300);
 8002f0c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002f10:	f003 fa6c 	bl	80063ec <HAL_Delay>
 8002f14:	e02f      	b.n	8002f76 <weekdaySelector+0x382>
 8002f16:	bf00      	nop
 8002f18:	004e5553 	.word	0x004e5553
 8002f1c:	004e4f4d 	.word	0x004e4f4d
 8002f20:	00455554 	.word	0x00455554
 8002f24:	00444557 	.word	0x00444557
 8002f28:	00554854 	.word	0x00554854
 8002f2c:	00495246 	.word	0x00495246
 8002f30:	00544153 	.word	0x00544153
 8002f34:	0800b5b8 	.word	0x0800b5b8
 8002f38:	0800c6bc 	.word	0x0800c6bc
 8002f3c:	0800b534 	.word	0x0800b534
		  		  		  }
		  		  		  else{
		  		  			  Monday = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
		  		  			  fillRect(150, 30,75,75, ILI9488_RED);
 8002f46:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	234b      	movs	r3, #75	@ 0x4b
 8002f4e:	224b      	movs	r2, #75	@ 0x4b
 8002f50:	211e      	movs	r1, #30
 8002f52:	2096      	movs	r0, #150	@ 0x96
 8002f54:	f001 fa9a 	bl	800448c <fillRect>
		  		  			  LCD_Font(160, 70, addMonday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002f58:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2301      	movs	r3, #1
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4bb8      	ldr	r3, [pc, #736]	@ (8003248 <weekdaySelector+0x654>)
 8002f66:	2146      	movs	r1, #70	@ 0x46
 8002f68:	20a0      	movs	r0, #160	@ 0xa0
 8002f6a:	f002 f866 	bl	800503a <LCD_Font>
		  		  			  HAL_Delay(300);
 8002f6e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002f72:	f003 fa3b 	bl	80063ec <HAL_Delay>

		  		  		  }
		  		  	  }


			if(touchX >= 245 && touchX < 299 && touchY >= 55 && touchY < 161){
 8002f76:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002f7a:	2bf4      	cmp	r3, #244	@ 0xf4
 8002f7c:	d947      	bls.n	800300e <weekdaySelector+0x41a>
 8002f7e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002f82:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8002f86:	d842      	bhi.n	800300e <weekdaySelector+0x41a>
 8002f88:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002f8c:	2b36      	cmp	r3, #54	@ 0x36
 8002f8e:	d93e      	bls.n	800300e <weekdaySelector+0x41a>
 8002f90:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002f94:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f96:	d83a      	bhi.n	800300e <weekdaySelector+0x41a>
			  		  		  if(Tuesday == 0){
 8002f98:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11b      	bne.n	8002fd8 <weekdaySelector+0x3e4>
			  		  			  fillRect(235, 30,75,75, ILI9488_GREEN);
 8002fa0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	234b      	movs	r3, #75	@ 0x4b
 8002fa8:	224b      	movs	r2, #75	@ 0x4b
 8002faa:	211e      	movs	r1, #30
 8002fac:	20eb      	movs	r0, #235	@ 0xeb
 8002fae:	f001 fa6d 	bl	800448c <fillRect>
			  		  			  LCD_Font(255, 70, addTuesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002fb2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	2301      	movs	r3, #1
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	4ba2      	ldr	r3, [pc, #648]	@ (8003248 <weekdaySelector+0x654>)
 8002fc0:	2146      	movs	r1, #70	@ 0x46
 8002fc2:	20ff      	movs	r0, #255	@ 0xff
 8002fc4:	f002 f839 	bl	800503a <LCD_Font>
			  		  			  Tuesday = 1;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			  		  			  HAL_Delay(300);
 8002fce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002fd2:	f003 fa0b 	bl	80063ec <HAL_Delay>
 8002fd6:	e01a      	b.n	800300e <weekdaySelector+0x41a>
			  		  		  }
			  		  		  else{
			  		  			  Tuesday = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			  		  			  fillRect(235, 30,75,75, ILI9488_RED);
 8002fde:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	234b      	movs	r3, #75	@ 0x4b
 8002fe6:	224b      	movs	r2, #75	@ 0x4b
 8002fe8:	211e      	movs	r1, #30
 8002fea:	20eb      	movs	r0, #235	@ 0xeb
 8002fec:	f001 fa4e 	bl	800448c <fillRect>
			  		  			  LCD_Font(255, 70, addTuesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002ff0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	4b92      	ldr	r3, [pc, #584]	@ (8003248 <weekdaySelector+0x654>)
 8002ffe:	2146      	movs	r1, #70	@ 0x46
 8003000:	20ff      	movs	r0, #255	@ 0xff
 8003002:	f002 f81a 	bl	800503a <LCD_Font>
			  		  			  HAL_Delay(300);
 8003006:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800300a:	f003 f9ef 	bl	80063ec <HAL_Delay>

			  		  		  }
			  		  	  }


			if(touchX >= 308 && touchX < 390 && touchY >= 67 && touchY < 161){
 800300e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003012:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8003016:	d34b      	bcc.n	80030b0 <weekdaySelector+0x4bc>
 8003018:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800301c:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 8003020:	d246      	bcs.n	80030b0 <weekdaySelector+0x4bc>
 8003022:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003026:	2b42      	cmp	r3, #66	@ 0x42
 8003028:	d942      	bls.n	80030b0 <weekdaySelector+0x4bc>
 800302a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800302e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003030:	d83e      	bhi.n	80030b0 <weekdaySelector+0x4bc>
					  		  		  if(Wednesday == 0){
 8003032:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11d      	bne.n	8003076 <weekdaySelector+0x482>
					  		  			  fillRect(320, 30,75,75, ILI9488_GREEN);
 800303a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	234b      	movs	r3, #75	@ 0x4b
 8003042:	224b      	movs	r2, #75	@ 0x4b
 8003044:	211e      	movs	r1, #30
 8003046:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800304a:	f001 fa1f 	bl	800448c <fillRect>
					  		  			  LCD_Font(335, 70, addWednesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800304e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003052:	2300      	movs	r3, #0
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	2301      	movs	r3, #1
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4b7b      	ldr	r3, [pc, #492]	@ (8003248 <weekdaySelector+0x654>)
 800305c:	2146      	movs	r1, #70	@ 0x46
 800305e:	f240 104f 	movw	r0, #335	@ 0x14f
 8003062:	f001 ffea 	bl	800503a <LCD_Font>
					  		  			  Wednesday = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
					  		  			  HAL_Delay(300);
 800306c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003070:	f003 f9bc 	bl	80063ec <HAL_Delay>
 8003074:	e01c      	b.n	80030b0 <weekdaySelector+0x4bc>
					  		  		  }
					  		  		  else{
					  		  			  Wednesday = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
					  		  			  fillRect(320, 30,75,75, ILI9488_RED);
 800307c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	234b      	movs	r3, #75	@ 0x4b
 8003084:	224b      	movs	r2, #75	@ 0x4b
 8003086:	211e      	movs	r1, #30
 8003088:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800308c:	f001 f9fe 	bl	800448c <fillRect>
					  		  			  LCD_Font(335, 70, addWednesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003090:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003094:	2300      	movs	r3, #0
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	2301      	movs	r3, #1
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4b6a      	ldr	r3, [pc, #424]	@ (8003248 <weekdaySelector+0x654>)
 800309e:	2146      	movs	r1, #70	@ 0x46
 80030a0:	f240 104f 	movw	r0, #335	@ 0x14f
 80030a4:	f001 ffc9 	bl	800503a <LCD_Font>
					  		  			  HAL_Delay(300);
 80030a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80030ac:	f003 f99e 	bl	80063ec <HAL_Delay>

					  		  		  }
					  		  	  }


			if(touchX >= 75 && touchX < 97 && touchY >= 165 && touchY < 207){
 80030b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80030b4:	2b4a      	cmp	r3, #74	@ 0x4a
 80030b6:	d946      	bls.n	8003146 <weekdaySelector+0x552>
 80030b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80030bc:	2b60      	cmp	r3, #96	@ 0x60
 80030be:	d842      	bhi.n	8003146 <weekdaySelector+0x552>
 80030c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80030c4:	2ba4      	cmp	r3, #164	@ 0xa4
 80030c6:	d93e      	bls.n	8003146 <weekdaySelector+0x552>
 80030c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80030cc:	2bce      	cmp	r3, #206	@ 0xce
 80030ce:	d83a      	bhi.n	8003146 <weekdaySelector+0x552>
							  		  		  if(Thursday == 0){
 80030d0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11b      	bne.n	8003110 <weekdaySelector+0x51c>
							  		  			  fillRect(105, 120,75,75, ILI9488_GREEN);
 80030d8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	234b      	movs	r3, #75	@ 0x4b
 80030e0:	224b      	movs	r2, #75	@ 0x4b
 80030e2:	2178      	movs	r1, #120	@ 0x78
 80030e4:	2069      	movs	r0, #105	@ 0x69
 80030e6:	f001 f9d1 	bl	800448c <fillRect>
							  		  			  LCD_Font(125, 160, addThursday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80030ea:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80030ee:	2300      	movs	r3, #0
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	2301      	movs	r3, #1
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4b54      	ldr	r3, [pc, #336]	@ (8003248 <weekdaySelector+0x654>)
 80030f8:	21a0      	movs	r1, #160	@ 0xa0
 80030fa:	207d      	movs	r0, #125	@ 0x7d
 80030fc:	f001 ff9d 	bl	800503a <LCD_Font>
							  		  			  Thursday = 1;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
							  		  			  HAL_Delay(300);
 8003106:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800310a:	f003 f96f 	bl	80063ec <HAL_Delay>
 800310e:	e01a      	b.n	8003146 <weekdaySelector+0x552>
							  		  		  }
							  		  		  else{
							  		  			  Thursday = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
							  		  			  fillRect(105, 120,75,75, ILI9488_RED);
 8003116:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	234b      	movs	r3, #75	@ 0x4b
 800311e:	224b      	movs	r2, #75	@ 0x4b
 8003120:	2178      	movs	r1, #120	@ 0x78
 8003122:	2069      	movs	r0, #105	@ 0x69
 8003124:	f001 f9b2 	bl	800448c <fillRect>
							  		  			  LCD_Font(125, 160, addThursday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003128:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800312c:	2300      	movs	r3, #0
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2301      	movs	r3, #1
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	4b44      	ldr	r3, [pc, #272]	@ (8003248 <weekdaySelector+0x654>)
 8003136:	21a0      	movs	r1, #160	@ 0xa0
 8003138:	207d      	movs	r0, #125	@ 0x7d
 800313a:	f001 ff7e 	bl	800503a <LCD_Font>
							  		  			  HAL_Delay(300);
 800313e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003142:	f003 f953 	bl	80063ec <HAL_Delay>
							  		  		  }
							  		  	  }



			if(touchX >= 184 && touchX < 258 && touchY >= 165 && touchY < 207){
 8003146:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800314a:	2bb7      	cmp	r3, #183	@ 0xb7
 800314c:	d947      	bls.n	80031de <weekdaySelector+0x5ea>
 800314e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003152:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003156:	d242      	bcs.n	80031de <weekdaySelector+0x5ea>
 8003158:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800315c:	2ba4      	cmp	r3, #164	@ 0xa4
 800315e:	d93e      	bls.n	80031de <weekdaySelector+0x5ea>
 8003160:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003164:	2bce      	cmp	r3, #206	@ 0xce
 8003166:	d83a      	bhi.n	80031de <weekdaySelector+0x5ea>
									  		  		  if(Friday == 0){
 8003168:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11b      	bne.n	80031a8 <weekdaySelector+0x5b4>
									  		  			  fillRect(190, 120,75,75, ILI9488_GREEN);
 8003170:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	234b      	movs	r3, #75	@ 0x4b
 8003178:	224b      	movs	r2, #75	@ 0x4b
 800317a:	2178      	movs	r1, #120	@ 0x78
 800317c:	20be      	movs	r0, #190	@ 0xbe
 800317e:	f001 f985 	bl	800448c <fillRect>
									  		  			  LCD_Font(210, 160, addFriday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003182:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8003186:	2300      	movs	r3, #0
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2301      	movs	r3, #1
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4b2e      	ldr	r3, [pc, #184]	@ (8003248 <weekdaySelector+0x654>)
 8003190:	21a0      	movs	r1, #160	@ 0xa0
 8003192:	20d2      	movs	r0, #210	@ 0xd2
 8003194:	f001 ff51 	bl	800503a <LCD_Font>
									  		  			  Friday = 1;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
									  		  			  HAL_Delay(300);
 800319e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80031a2:	f003 f923 	bl	80063ec <HAL_Delay>
 80031a6:	e01a      	b.n	80031de <weekdaySelector+0x5ea>
									  		  		  }
									  		  		  else{
									  		  			  Friday = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
									  		  			  fillRect(190, 120,75,75, ILI9488_RED);
 80031ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	234b      	movs	r3, #75	@ 0x4b
 80031b6:	224b      	movs	r2, #75	@ 0x4b
 80031b8:	2178      	movs	r1, #120	@ 0x78
 80031ba:	20be      	movs	r0, #190	@ 0xbe
 80031bc:	f001 f966 	bl	800448c <fillRect>
									  		  			  LCD_Font(210, 160, addFriday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80031c0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80031c4:	2300      	movs	r3, #0
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	2301      	movs	r3, #1
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <weekdaySelector+0x654>)
 80031ce:	21a0      	movs	r1, #160	@ 0xa0
 80031d0:	20d2      	movs	r0, #210	@ 0xd2
 80031d2:	f001 ff32 	bl	800503a <LCD_Font>
									  		  			  HAL_Delay(300);
 80031d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80031da:	f003 f907 	bl	80063ec <HAL_Delay>
									  		  		  }
									  		  	  }



				 if(touchX >= 262 && touchX < 335 && touchY >= 165 && touchY < 207){
 80031de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80031e2:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80031e6:	d34e      	bcc.n	8003286 <weekdaySelector+0x692>
 80031e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80031ec:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 80031f0:	d849      	bhi.n	8003286 <weekdaySelector+0x692>
 80031f2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80031f6:	2ba4      	cmp	r3, #164	@ 0xa4
 80031f8:	d945      	bls.n	8003286 <weekdaySelector+0x692>
 80031fa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80031fe:	2bce      	cmp	r3, #206	@ 0xce
 8003200:	d841      	bhi.n	8003286 <weekdaySelector+0x692>
				  if(Saturday == 0){
 8003202:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8003206:	2b00      	cmp	r3, #0
 8003208:	d120      	bne.n	800324c <weekdaySelector+0x658>
					  fillRect(275, 120,75,75, ILI9488_GREEN);
 800320a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	234b      	movs	r3, #75	@ 0x4b
 8003212:	224b      	movs	r2, #75	@ 0x4b
 8003214:	2178      	movs	r1, #120	@ 0x78
 8003216:	f240 1013 	movw	r0, #275	@ 0x113
 800321a:	f001 f937 	bl	800448c <fillRect>
					  LCD_Font(295, 160, addSaturday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800321e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003222:	2300      	movs	r3, #0
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	2301      	movs	r3, #1
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <weekdaySelector+0x654>)
 800322c:	21a0      	movs	r1, #160	@ 0xa0
 800322e:	f240 1027 	movw	r0, #295	@ 0x127
 8003232:	f001 ff02 	bl	800503a <LCD_Font>
					  Saturday = 1;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
					  HAL_Delay(300);
 800323c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003240:	f003 f8d4 	bl	80063ec <HAL_Delay>
 8003244:	e01f      	b.n	8003286 <weekdaySelector+0x692>
 8003246:	bf00      	nop
 8003248:	0800c6bc 	.word	0x0800c6bc
				  }
				  else{
					  Saturday = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
					  fillRect(275, 120,75,75, ILI9488_RED);
 8003252:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	234b      	movs	r3, #75	@ 0x4b
 800325a:	224b      	movs	r2, #75	@ 0x4b
 800325c:	2178      	movs	r1, #120	@ 0x78
 800325e:	f240 1013 	movw	r0, #275	@ 0x113
 8003262:	f001 f913 	bl	800448c <fillRect>
					  LCD_Font(295, 160, addSaturday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003266:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800326a:	2300      	movs	r3, #0
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	2301      	movs	r3, #1
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	4b32      	ldr	r3, [pc, #200]	@ (800333c <weekdaySelector+0x748>)
 8003274:	21a0      	movs	r1, #160	@ 0xa0
 8003276:	f240 1027 	movw	r0, #295	@ 0x127
 800327a:	f001 fede 	bl	800503a <LCD_Font>
					  HAL_Delay(300);
 800327e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003282:	f003 f8b3 	bl	80063ec <HAL_Delay>

				  }
			  }


				 if(touchX >= 6 && touchX < 392 && touchY >= 265 && touchY < 306){
 8003286:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800328a:	2b05      	cmp	r3, #5
 800328c:	f67f ad95 	bls.w	8002dba <weekdaySelector+0x1c6>
 8003290:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003294:	f5b3 7fc4 	cmp.w	r3, #392	@ 0x188
 8003298:	f4bf ad8f 	bcs.w	8002dba <weekdaySelector+0x1c6>
 800329c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80032a0:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80032a4:	f67f ad89 	bls.w	8002dba <weekdaySelector+0x1c6>
 80032a8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80032ac:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 80032b0:	f4bf ad83 	bcs.w	8002dba <weekdaySelector+0x1c6>
					 	 	fillRect(50, 250, 350, 50, ILI9488_GREEN);
 80032b4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2332      	movs	r3, #50	@ 0x32
 80032bc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80032c0:	21fa      	movs	r1, #250	@ 0xfa
 80032c2:	2032      	movs	r0, #50	@ 0x32
 80032c4:	f001 f8e2 	bl	800448c <fillRect>
					  		HAL_Delay(300);
 80032c8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80032cc:	f003 f88e 	bl	80063ec <HAL_Delay>
					  		fillRect(50, 250, 350, 50, ILI9488_RED);
 80032d0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2332      	movs	r3, #50	@ 0x32
 80032d8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80032dc:	21fa      	movs	r1, #250	@ 0xfa
 80032de:	2032      	movs	r0, #50	@ 0x32
 80032e0:	f001 f8d4 	bl	800448c <fillRect>
					  		LCD_Font(200, 285, addNext, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80032e4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80032e8:	2300      	movs	r3, #0
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	2301      	movs	r3, #1
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4b12      	ldr	r3, [pc, #72]	@ (800333c <weekdaySelector+0x748>)
 80032f2:	f240 111d 	movw	r1, #285	@ 0x11d
 80032f6:	20c8      	movs	r0, #200	@ 0xc8
 80032f8:	f001 fe9f 	bl	800503a <LCD_Font>

					  		uint8_t days [7] = {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};
 80032fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003300:	723b      	strb	r3, [r7, #8]
 8003302:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003306:	727b      	strb	r3, [r7, #9]
 8003308:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800330c:	72bb      	strb	r3, [r7, #10]
 800330e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003312:	72fb      	strb	r3, [r7, #11]
 8003314:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8003318:	733b      	strb	r3, [r7, #12]
 800331a:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800331e:	737b      	strb	r3, [r7, #13]
 8003320:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8003324:	73bb      	strb	r3, [r7, #14]
					  		timeSet(dispNum, pillOption, days);
 8003326:	f107 0208 	add.w	r2, r7, #8
 800332a:	79b9      	ldrb	r1, [r7, #6]
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f806 	bl	8003340 <timeSet>
					  		return;
 8003334:	bf00      	nop


	  }


}
 8003336:	3768      	adds	r7, #104	@ 0x68
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	0800c6bc 	.word	0x0800c6bc

08003340 <timeSet>:

void timeSet(uint8_t dispNum, uint8_t pillOption, uint8_t * daysOfWeek){
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b0a7      	sub	sp, #156	@ 0x9c
 8003344:	af02      	add	r7, sp, #8
 8003346:	4603      	mov	r3, r0
 8003348:	603a      	str	r2, [r7, #0]
 800334a:	71fb      	strb	r3, [r7, #7]
 800334c:	460b      	mov	r3, r1
 800334e:	71bb      	strb	r3, [r7, #6]
		fillScreen(ILI9488_WHITE);
 8003350:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003354:	f001 f880 	bl	8004458 <fillScreen>
	   uint16_t touchX = 0, touchY = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800335e:	2300      	movs	r3, #0
 8003360:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

	   //the keys:

	   uint16_t Hour = 12;
 8003364:	230c      	movs	r3, #12
 8003366:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	   uint16_t Minute = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	   uint8_t PM = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

	   char hourPrint[20];
	   char minPrint[20];

	   //convert int to string
	   sprintf(hourPrint, "%d", Hour);
 8003376:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800337a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800337e:	49ca      	ldr	r1, [pc, #808]	@ (80036a8 <timeSet+0x368>)
 8003380:	4618      	mov	r0, r3
 8003382:	f007 facd 	bl	800a920 <siprintf>
	   sprintf(minPrint, "%d", Minute);
 8003386:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800338a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800338e:	49c6      	ldr	r1, [pc, #792]	@ (80036a8 <timeSet+0x368>)
 8003390:	4618      	mov	r0, r3
 8003392:	f007 fac5 	bl	800a920 <siprintf>


	   strcat(minPrint, "0");
 8003396:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800339a:	4618      	mov	r0, r3
 800339c:	f7fc ff30 	bl	8000200 <strlen>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80033a8:	4413      	add	r3, r2
 80033aa:	49c0      	ldr	r1, [pc, #768]	@ (80036ac <timeSet+0x36c>)
 80033ac:	461a      	mov	r2, r3
 80033ae:	460b      	mov	r3, r1
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	8013      	strh	r3, [r2, #0]



	   char  downwardArrow[] = "<";
 80033b4:	233c      	movs	r3, #60	@ 0x3c
 80033b6:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	   char upwardArrow[] = ">";
 80033ba:	233e      	movs	r3, #62	@ 0x3e
 80033bc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

	   char colon[] = ":";
 80033c0:	233a      	movs	r3, #58	@ 0x3a
 80033c2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	   char am[] = "AM";
 80033c6:	4aba      	ldr	r2, [pc, #744]	@ (80036b0 <timeSet+0x370>)
 80033c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	4611      	mov	r1, r2
 80033d0:	8019      	strh	r1, [r3, #0]
 80033d2:	3302      	adds	r3, #2
 80033d4:	0c12      	lsrs	r2, r2, #16
 80033d6:	701a      	strb	r2, [r3, #0]
	   char pm[] = "PM";
 80033d8:	4ab6      	ldr	r2, [pc, #728]	@ (80036b4 <timeSet+0x374>)
 80033da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	4611      	mov	r1, r2
 80033e2:	8019      	strh	r1, [r3, #0]
 80033e4:	3302      	adds	r3, #2
 80033e6:	0c12      	lsrs	r2, r2, #16
 80033e8:	701a      	strb	r2, [r3, #0]
	   char addNext[] = "Next";
 80033ea:	4ab3      	ldr	r2, [pc, #716]	@ (80036b8 <timeSet+0x378>)
 80033ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033f4:	6018      	str	r0, [r3, #0]
 80033f6:	3304      	adds	r3, #4
 80033f8:	7019      	strb	r1, [r3, #0]
	   char addAnother[] = "Another Time";
 80033fa:	4bb0      	ldr	r3, [pc, #704]	@ (80036bc <timeSet+0x37c>)
 80033fc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8003400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003402:	c407      	stmia	r4!, {r0, r1, r2}
 8003404:	7023      	strb	r3, [r4, #0]

	   //minute down arrow
	   fillRect(275, 185,50,50, ILI9488_RED);
 8003406:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2332      	movs	r3, #50	@ 0x32
 800340e:	2232      	movs	r2, #50	@ 0x32
 8003410:	21b9      	movs	r1, #185	@ 0xb9
 8003412:	f240 1013 	movw	r0, #275	@ 0x113
 8003416:	f001 f839 	bl	800448c <fillRect>


	   //minute up arrow
	   fillRect(275, 25,50,50, ILI9488_RED);
 800341a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	2332      	movs	r3, #50	@ 0x32
 8003422:	2232      	movs	r2, #50	@ 0x32
 8003424:	2119      	movs	r1, #25
 8003426:	f240 1013 	movw	r0, #275	@ 0x113
 800342a:	f001 f82f 	bl	800448c <fillRect>


	   //hour down arrow
	   fillRect(75, 185,50,50, ILI9488_RED);
 800342e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2332      	movs	r3, #50	@ 0x32
 8003436:	2232      	movs	r2, #50	@ 0x32
 8003438:	21b9      	movs	r1, #185	@ 0xb9
 800343a:	204b      	movs	r0, #75	@ 0x4b
 800343c:	f001 f826 	bl	800448c <fillRect>


	     //hour up arrow
	   fillRect(75, 25,50,50, ILI9488_RED);
 8003440:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2332      	movs	r3, #50	@ 0x32
 8003448:	2232      	movs	r2, #50	@ 0x32
 800344a:	2119      	movs	r1, #25
 800344c:	204b      	movs	r0, #75	@ 0x4b
 800344e:	f001 f81d 	bl	800448c <fillRect>

	   //am arrow
	   fillRect(382, 50,85,65, ILI9488_GREEN);
 8003452:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2341      	movs	r3, #65	@ 0x41
 800345a:	2255      	movs	r2, #85	@ 0x55
 800345c:	2132      	movs	r1, #50	@ 0x32
 800345e:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8003462:	f001 f813 	bl	800448c <fillRect>

	   //PM arrow
	   fillRect(382, 135,85,65, ILI9488_RED);
 8003466:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2341      	movs	r3, #65	@ 0x41
 800346e:	2255      	movs	r2, #85	@ 0x55
 8003470:	2187      	movs	r1, #135	@ 0x87
 8003472:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8003476:	f001 f809 	bl	800448c <fillRect>


	   //Next button.
	   fillRect(340, 250,105,55, ILI9488_RED);
 800347a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2337      	movs	r3, #55	@ 0x37
 8003482:	2269      	movs	r2, #105	@ 0x69
 8003484:	21fa      	movs	r1, #250	@ 0xfa
 8003486:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800348a:	f000 ffff 	bl	800448c <fillRect>

	   //Add another button.
	   fillRect(15, 250,295,55, ILI9488_RED);
 800348e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2337      	movs	r3, #55	@ 0x37
 8003496:	f240 1227 	movw	r2, #295	@ 0x127
 800349a:	21fa      	movs	r1, #250	@ 0xfa
 800349c:	200f      	movs	r0, #15
 800349e:	f000 fff5 	bl	800448c <fillRect>



	   LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80034a2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80034a6:	2300      	movs	r3, #0
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	2301      	movs	r3, #1
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4b84      	ldr	r3, [pc, #528]	@ (80036c0 <timeSet+0x380>)
 80034b0:	21a5      	movs	r1, #165	@ 0xa5
 80034b2:	202d      	movs	r0, #45	@ 0x2d
 80034b4:	f001 fdc1 	bl	800503a <LCD_Font>
	   LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80034b8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80034bc:	2300      	movs	r3, #0
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	2301      	movs	r3, #1
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	4b7e      	ldr	r3, [pc, #504]	@ (80036c0 <timeSet+0x380>)
 80034c6:	21a5      	movs	r1, #165	@ 0xa5
 80034c8:	20fa      	movs	r0, #250	@ 0xfa
 80034ca:	f001 fdb6 	bl	800503a <LCD_Font>
	   LCD_Font(195, 165, colon, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80034ce:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80034d2:	2300      	movs	r3, #0
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	2301      	movs	r3, #1
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4b79      	ldr	r3, [pc, #484]	@ (80036c0 <timeSet+0x380>)
 80034dc:	21a5      	movs	r1, #165	@ 0xa5
 80034de:	20c3      	movs	r0, #195	@ 0xc3
 80034e0:	f001 fdab 	bl	800503a <LCD_Font>
	   LCD_Font(385, 100, am, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 80034e4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80034e8:	2300      	movs	r3, #0
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	2301      	movs	r3, #1
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	4b74      	ldr	r3, [pc, #464]	@ (80036c4 <timeSet+0x384>)
 80034f2:	2164      	movs	r1, #100	@ 0x64
 80034f4:	f240 1081 	movw	r0, #385	@ 0x181
 80034f8:	f001 fd9f 	bl	800503a <LCD_Font>
	   LCD_Font(385, 180, pm, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 80034fc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8003500:	2300      	movs	r3, #0
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	2301      	movs	r3, #1
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4b6e      	ldr	r3, [pc, #440]	@ (80036c4 <timeSet+0x384>)
 800350a:	21b4      	movs	r1, #180	@ 0xb4
 800350c:	f240 1081 	movw	r0, #385	@ 0x181
 8003510:	f001 fd93 	bl	800503a <LCD_Font>


	   //next and another time
	   LCD_Font(350, 295, addNext, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 8003514:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003518:	2300      	movs	r3, #0
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	2301      	movs	r3, #1
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	4b69      	ldr	r3, [pc, #420]	@ (80036c8 <timeSet+0x388>)
 8003522:	f240 1127 	movw	r1, #295	@ 0x127
 8003526:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800352a:	f001 fd86 	bl	800503a <LCD_Font>
	   LCD_Font(25, 295, addAnother, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 800352e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003532:	2300      	movs	r3, #0
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	2301      	movs	r3, #1
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4b63      	ldr	r3, [pc, #396]	@ (80036c8 <timeSet+0x388>)
 800353c:	f240 1127 	movw	r1, #295	@ 0x127
 8003540:	2019      	movs	r0, #25
 8003542:	f001 fd7a 	bl	800503a <LCD_Font>

	   	   setRotation(2);
 8003546:	2002      	movs	r0, #2
 8003548:	f001 f8e4 	bl	8004714 <setRotation>
		  LCD_Font(35, 200, downwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 800354c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8003550:	2300      	movs	r3, #0
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	2301      	movs	r3, #1
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	4b5a      	ldr	r3, [pc, #360]	@ (80036c4 <timeSet+0x384>)
 800355a:	21c8      	movs	r1, #200	@ 0xc8
 800355c:	2023      	movs	r0, #35	@ 0x23
 800355e:	f001 fd6c 	bl	800503a <LCD_Font>
		  LCD_Font(200, 200, upwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8003562:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8003566:	2300      	movs	r3, #0
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2301      	movs	r3, #1
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	4b55      	ldr	r3, [pc, #340]	@ (80036c4 <timeSet+0x384>)
 8003570:	21c8      	movs	r1, #200	@ 0xc8
 8003572:	20c8      	movs	r0, #200	@ 0xc8
 8003574:	f001 fd61 	bl	800503a <LCD_Font>

		  LCD_Font(35, 400, downwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8003578:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800357c:	2300      	movs	r3, #0
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	2301      	movs	r3, #1
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4b4f      	ldr	r3, [pc, #316]	@ (80036c4 <timeSet+0x384>)
 8003586:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800358a:	2023      	movs	r0, #35	@ 0x23
 800358c:	f001 fd55 	bl	800503a <LCD_Font>
		  LCD_Font(200, 400, upwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8003590:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8003594:	2300      	movs	r3, #0
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	2301      	movs	r3, #1
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	4b49      	ldr	r3, [pc, #292]	@ (80036c4 <timeSet+0x384>)
 800359e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80035a2:	20c8      	movs	r0, #200	@ 0xc8
 80035a4:	f001 fd49 	bl	800503a <LCD_Font>
		  setRotation(1);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f001 f8b3 	bl	8004714 <setRotation>


		  char buf[20];
		  char buf1[20];

		  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 80035ae:	f107 0208 	add.w	r2, r7, #8
 80035b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	2301      	movs	r3, #1
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4b43      	ldr	r3, [pc, #268]	@ (80036cc <timeSet+0x38c>)
 80035be:	2119      	movs	r1, #25
 80035c0:	2019      	movs	r0, #25
 80035c2:	f001 fd3a 	bl	800503a <LCD_Font>
		  	  touchX = getX();
 80035c6:	f002 fe5f 	bl	8006288 <getX>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
		  	  touchY = getY();
 80035d0:	f002 fe64 	bl	800629c <getY>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		  	  sprintf(buf,"x=%3d y=%3d",touchX,touchY);
 80035da:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 80035de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035e2:	f107 001c 	add.w	r0, r7, #28
 80035e6:	493a      	ldr	r1, [pc, #232]	@ (80036d0 <timeSet+0x390>)
 80035e8:	f007 f99a 	bl	800a920 <siprintf>
		  	  sprintf(buf1,"x=%3d y=%3d",touchX,touchY);
 80035ec:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 80035f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035f4:	f107 0008 	add.w	r0, r7, #8
 80035f8:	4935      	ldr	r1, [pc, #212]	@ (80036d0 <timeSet+0x390>)
 80035fa:	f007 f991 	bl	800a920 <siprintf>

		  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80035fe:	f107 0208 	add.w	r2, r7, #8
 8003602:	2300      	movs	r3, #0
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	2301      	movs	r3, #1
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	4b30      	ldr	r3, [pc, #192]	@ (80036cc <timeSet+0x38c>)
 800360c:	2119      	movs	r1, #25
 800360e:	2019      	movs	r0, #25
 8003610:	f001 fd13 	bl	800503a <LCD_Font>
				390, 169
				464, 172
		  	   */


		  	  if(touchX >= 390 && touchX < 464 && touchY >= 67 && touchY < 172){
 8003614:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003618:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 800361c:	d35a      	bcc.n	80036d4 <timeSet+0x394>
 800361e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003622:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8003626:	d255      	bcs.n	80036d4 <timeSet+0x394>
 8003628:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800362c:	2b42      	cmp	r3, #66	@ 0x42
 800362e:	d951      	bls.n	80036d4 <timeSet+0x394>
 8003630:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003634:	2bab      	cmp	r3, #171	@ 0xab
 8003636:	d84d      	bhi.n	80036d4 <timeSet+0x394>
		  		  if(PM == 1){
 8003638:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800363c:	2b01      	cmp	r3, #1
 800363e:	d149      	bne.n	80036d4 <timeSet+0x394>

		  			  //make PM 0.
		  			  PM = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

		  			  //make AM Green & PM Red

		  			 //am arrow
		  			   fillRect(382, 50,85,65, ILI9488_GREEN);
 8003646:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2341      	movs	r3, #65	@ 0x41
 800364e:	2255      	movs	r2, #85	@ 0x55
 8003650:	2132      	movs	r1, #50	@ 0x32
 8003652:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8003656:	f000 ff19 	bl	800448c <fillRect>

		  			   //PM arrow
		  			   fillRect(382, 135,85,65, ILI9488_RED);
 800365a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2341      	movs	r3, #65	@ 0x41
 8003662:	2255      	movs	r2, #85	@ 0x55
 8003664:	2187      	movs	r1, #135	@ 0x87
 8003666:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 800366a:	f000 ff0f 	bl	800448c <fillRect>


		  			 LCD_Font(385, 100, am, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 800366e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003672:	2300      	movs	r3, #0
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	2301      	movs	r3, #1
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <timeSet+0x384>)
 800367c:	2164      	movs	r1, #100	@ 0x64
 800367e:	f240 1081 	movw	r0, #385	@ 0x181
 8003682:	f001 fcda 	bl	800503a <LCD_Font>
		  			 LCD_Font(385, 180, pm, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8003686:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800368a:	2300      	movs	r3, #0
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	2301      	movs	r3, #1
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <timeSet+0x384>)
 8003694:	21b4      	movs	r1, #180	@ 0xb4
 8003696:	f240 1081 	movw	r0, #385	@ 0x181
 800369a:	f001 fcce 	bl	800503a <LCD_Font>

		  			  HAL_Delay(300);
 800369e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80036a2:	f002 fea3 	bl	80063ec <HAL_Delay>
 80036a6:	e015      	b.n	80036d4 <timeSet+0x394>
 80036a8:	0800b5c0 	.word	0x0800b5c0
 80036ac:	0800b5c4 	.word	0x0800b5c4
 80036b0:	0800b5c8 	.word	0x0800b5c8
 80036b4:	0800b35c 	.word	0x0800b35c
 80036b8:	0800b5b8 	.word	0x0800b5b8
 80036bc:	0800b5cc 	.word	0x0800b5cc
 80036c0:	08019afc 	.word	0x08019afc
 80036c4:	08010f4c 	.word	0x08010f4c
 80036c8:	0800e9e0 	.word	0x0800e9e0
 80036cc:	0800c6bc 	.word	0x0800c6bc
 80036d0:	0800b534 	.word	0x0800b534
				390, 172
				464, 192
				393, 207
				464, 207
		  	   */
		  	if(touchX >= 390 && touchX < 464 && touchY >= 172 && touchY < 207){
 80036d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80036d8:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 80036dc:	d343      	bcc.n	8003766 <timeSet+0x426>
 80036de:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80036e2:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 80036e6:	d23e      	bcs.n	8003766 <timeSet+0x426>
 80036e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036ec:	2bab      	cmp	r3, #171	@ 0xab
 80036ee:	d93a      	bls.n	8003766 <timeSet+0x426>
 80036f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036f4:	2bce      	cmp	r3, #206	@ 0xce
 80036f6:	d836      	bhi.n	8003766 <timeSet+0x426>
		  		  		  if(PM == 0){
 80036f8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d132      	bne.n	8003766 <timeSet+0x426>

		  		  			  //make PM 0.
		  		  			  PM = 1;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

		  		  			  //make AM RED & PM Green
						   //am arrow
						     fillRect(382, 50,85,65, ILI9488_RED);
 8003706:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	2341      	movs	r3, #65	@ 0x41
 800370e:	2255      	movs	r2, #85	@ 0x55
 8003710:	2132      	movs	r1, #50	@ 0x32
 8003712:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8003716:	f000 feb9 	bl	800448c <fillRect>

						     //PM arrow
						     fillRect(382, 135,85,65, ILI9488_GREEN);
 800371a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2341      	movs	r3, #65	@ 0x41
 8003722:	2255      	movs	r2, #85	@ 0x55
 8003724:	2187      	movs	r1, #135	@ 0x87
 8003726:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 800372a:	f000 feaf 	bl	800448c <fillRect>


						   LCD_Font(385, 100, am, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 800372e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003732:	2300      	movs	r3, #0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2301      	movs	r3, #1
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	4bc8      	ldr	r3, [pc, #800]	@ (8003a5c <timeSet+0x71c>)
 800373c:	2164      	movs	r1, #100	@ 0x64
 800373e:	f240 1081 	movw	r0, #385	@ 0x181
 8003742:	f001 fc7a 	bl	800503a <LCD_Font>
						     LCD_Font(385, 180, pm, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8003746:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800374a:	2300      	movs	r3, #0
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2301      	movs	r3, #1
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4bc2      	ldr	r3, [pc, #776]	@ (8003a5c <timeSet+0x71c>)
 8003754:	21b4      	movs	r1, #180	@ 0xb4
 8003756:	f240 1081 	movw	r0, #385	@ 0x181
 800375a:	f001 fc6e 	bl	800503a <LCD_Font>
		  		  			  HAL_Delay(300);
 800375e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003762:	f002 fe43 	bl	80063ec <HAL_Delay>
				335, 265
				464, 271
				335, 309
				464, 312
		  		  			  			  		  	  		  	 */
		  				 if(touchX >= 335 && touchX < 464 && touchY >= 265 && touchY < 312){
 8003766:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800376a:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 800376e:	d929      	bls.n	80037c4 <timeSet+0x484>
 8003770:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003774:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8003778:	d224      	bcs.n	80037c4 <timeSet+0x484>
 800377a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800377e:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8003782:	d91f      	bls.n	80037c4 <timeSet+0x484>
 8003784:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003788:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800378c:	d21a      	bcs.n	80037c4 <timeSet+0x484>
		  					 	 	fillRect(340, 250,105,55, ILI9488_GREEN);
 800378e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2337      	movs	r3, #55	@ 0x37
 8003796:	2269      	movs	r2, #105	@ 0x69
 8003798:	21fa      	movs	r1, #250	@ 0xfa
 800379a:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800379e:	f000 fe75 	bl	800448c <fillRect>
		  					  		loadNewPillsDisplay(dispNum, pillOption, daysOfWeek, Hour, Minute, PM);
 80037a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80037a6:	b2dc      	uxtb	r4, r3
 80037a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	79b9      	ldrb	r1, [r7, #6]
 80037b0:	79f8      	ldrb	r0, [r7, #7]
 80037b2:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 80037b6:	9201      	str	r2, [sp, #4]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4623      	mov	r3, r4
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	f7fd fa9d 	bl	8000cfc <loadNewPillsDisplay>
		  					  		return;
 80037c2:	e227      	b.n	8003c14 <timeSet+0x8d4>
						1, 265
						308, 265
						1, 312
						299, 306
																		 */
								 if(touchX >= 1 && touchX < 308 && touchY >= 265 && touchY < 312){
 80037c4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d033      	beq.n	8003834 <timeSet+0x4f4>
 80037cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037d0:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80037d4:	d22e      	bcs.n	8003834 <timeSet+0x4f4>
 80037d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037da:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80037de:	d929      	bls.n	8003834 <timeSet+0x4f4>
 80037e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037e4:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80037e8:	d224      	bcs.n	8003834 <timeSet+0x4f4>
									 	 	 fillRect(15, 250,295,55, ILI9488_GREEN);
 80037ea:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2337      	movs	r3, #55	@ 0x37
 80037f2:	f240 1227 	movw	r2, #295	@ 0x127
 80037f6:	21fa      	movs	r1, #250	@ 0xfa
 80037f8:	200f      	movs	r0, #15
 80037fa:	f000 fe47 	bl	800448c <fillRect>
											HAL_Delay(300);
 80037fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003802:	f002 fdf3 	bl	80063ec <HAL_Delay>
											loadNewPillsDisplay(dispNum, pillOption, daysOfWeek, Hour, Minute, PM);
 8003806:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800380a:	b2dc      	uxtb	r4, r3
 800380c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8003810:	b2db      	uxtb	r3, r3
 8003812:	79b9      	ldrb	r1, [r7, #6]
 8003814:	79f8      	ldrb	r0, [r7, #7]
 8003816:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800381a:	9201      	str	r2, [sp, #4]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4623      	mov	r3, r4
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	f7fd fa6b 	bl	8000cfc <loadNewPillsDisplay>
											timeSet(dispNum, pillOption, daysOfWeek);
 8003826:	79b9      	ldrb	r1, [r7, #6]
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fd87 	bl	8003340 <timeSet>
											return;
 8003832:	e1ef      	b.n	8003c14 <timeSet+0x8d4>
					262, 55
					331, 55
					271, 67
					326, 67
						  			  		  	  		  	 */
				 if(touchX >= 262 && touchX < 331 && touchY >= 55 && touchY < 67){
 8003834:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003838:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800383c:	d365      	bcc.n	800390a <timeSet+0x5ca>
 800383e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003842:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8003846:	d860      	bhi.n	800390a <timeSet+0x5ca>
 8003848:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800384c:	2b36      	cmp	r3, #54	@ 0x36
 800384e:	d95c      	bls.n	800390a <timeSet+0x5ca>
 8003850:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003854:	2b42      	cmp	r3, #66	@ 0x42
 8003856:	d858      	bhi.n	800390a <timeSet+0x5ca>
					 	 	fillRect(275, 25,50,50, ILI9488_GREEN);
 8003858:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2332      	movs	r3, #50	@ 0x32
 8003860:	2232      	movs	r2, #50	@ 0x32
 8003862:	2119      	movs	r1, #25
 8003864:	f240 1013 	movw	r0, #275	@ 0x113
 8003868:	f000 fe10 	bl	800448c <fillRect>
					  		HAL_Delay(300);
 800386c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003870:	f002 fdbc 	bl	80063ec <HAL_Delay>
					  		fillRect(275, 25,50,50, ILI9488_RED);
 8003874:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2332      	movs	r3, #50	@ 0x32
 800387c:	2232      	movs	r2, #50	@ 0x32
 800387e:	2119      	movs	r1, #25
 8003880:	f240 1013 	movw	r0, #275	@ 0x113
 8003884:	f000 fe02 	bl	800448c <fillRect>


							//print minPrint
					  		LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8003888:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800388c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2301      	movs	r3, #1
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4b72      	ldr	r3, [pc, #456]	@ (8003a60 <timeSet+0x720>)
 8003898:	21a5      	movs	r1, #165	@ 0xa5
 800389a:	20fa      	movs	r0, #250	@ 0xfa
 800389c:	f001 fbcd 	bl	800503a <LCD_Font>
							if(Minute == 0){
 80038a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <timeSet+0x580>
								Minute = 30;
 80038a8:	231e      	movs	r3, #30
 80038aa:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
							   //copying over minPrint
							   sprintf(minPrint, "%d", Minute);
 80038ae:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 80038b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80038b6:	496b      	ldr	r1, [pc, #428]	@ (8003a64 <timeSet+0x724>)
 80038b8:	4618      	mov	r0, r3
 80038ba:	f007 f831 	bl	800a920 <siprintf>
 80038be:	e019      	b.n	80038f4 <timeSet+0x5b4>
							}
							else{
								Minute = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
							   //copying over minPrint
							   sprintf(minPrint, "%d", Minute);
 80038c6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 80038ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80038ce:	4965      	ldr	r1, [pc, #404]	@ (8003a64 <timeSet+0x724>)
 80038d0:	4618      	mov	r0, r3
 80038d2:	f007 f825 	bl	800a920 <siprintf>
							   strcat(minPrint, "0");
 80038d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fc90 	bl	8000200 <strlen>
 80038e0:	4603      	mov	r3, r0
 80038e2:	461a      	mov	r2, r3
 80038e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80038e8:	4413      	add	r3, r2
 80038ea:	495f      	ldr	r1, [pc, #380]	@ (8003a68 <timeSet+0x728>)
 80038ec:	461a      	mov	r2, r3
 80038ee:	460b      	mov	r3, r1
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	8013      	strh	r3, [r2, #0]




							//print minPrint
							LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80038f4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80038f8:	2300      	movs	r3, #0
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2301      	movs	r3, #1
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	4b57      	ldr	r3, [pc, #348]	@ (8003a60 <timeSet+0x720>)
 8003902:	21a5      	movs	r1, #165	@ 0xa5
 8003904:	20fa      	movs	r0, #250	@ 0xfa
 8003906:	f001 fb98 	bl	800503a <LCD_Font>
		  		/*minute bottom arrow:
				262, 201
				331, 207
				287, 262
				326, 259*/
		  			 if(touchX >= 262 && touchX < 331 && touchY >= 201 && touchY < 262){
 800390a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800390e:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8003912:	d366      	bcc.n	80039e2 <timeSet+0x6a2>
 8003914:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003918:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 800391c:	d861      	bhi.n	80039e2 <timeSet+0x6a2>
 800391e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003922:	2bc8      	cmp	r3, #200	@ 0xc8
 8003924:	d95d      	bls.n	80039e2 <timeSet+0x6a2>
 8003926:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800392a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800392e:	d258      	bcs.n	80039e2 <timeSet+0x6a2>
		  				 	 fillRect(275, 185,50,50, ILI9488_GREEN);
 8003930:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	2332      	movs	r3, #50	@ 0x32
 8003938:	2232      	movs	r2, #50	@ 0x32
 800393a:	21b9      	movs	r1, #185	@ 0xb9
 800393c:	f240 1013 	movw	r0, #275	@ 0x113
 8003940:	f000 fda4 	bl	800448c <fillRect>
					  		HAL_Delay(300);
 8003944:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003948:	f002 fd50 	bl	80063ec <HAL_Delay>
					  		fillRect(275, 185,50,50, ILI9488_RED);
 800394c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2332      	movs	r3, #50	@ 0x32
 8003954:	2232      	movs	r2, #50	@ 0x32
 8003956:	21b9      	movs	r1, #185	@ 0xb9
 8003958:	f240 1013 	movw	r0, #275	@ 0x113
 800395c:	f000 fd96 	bl	800448c <fillRect>
							//print minPrint
					  		LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8003960:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8003964:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	2301      	movs	r3, #1
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a60 <timeSet+0x720>)
 8003970:	21a5      	movs	r1, #165	@ 0xa5
 8003972:	20fa      	movs	r0, #250	@ 0xfa
 8003974:	f001 fb61 	bl	800503a <LCD_Font>
							if(Minute == 30){
 8003978:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800397c:	2b1e      	cmp	r3, #30
 800397e:	d11a      	bne.n	80039b6 <timeSet+0x676>
								Minute = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
							   //copying over minPrint
							   sprintf(minPrint, "%d", Minute);
 8003986:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800398a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800398e:	4935      	ldr	r1, [pc, #212]	@ (8003a64 <timeSet+0x724>)
 8003990:	4618      	mov	r0, r3
 8003992:	f006 ffc5 	bl	800a920 <siprintf>
							   strcat(minPrint, "0");
 8003996:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800399a:	4618      	mov	r0, r3
 800399c:	f7fc fc30 	bl	8000200 <strlen>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80039a8:	4413      	add	r3, r2
 80039aa:	492f      	ldr	r1, [pc, #188]	@ (8003a68 <timeSet+0x728>)
 80039ac:	461a      	mov	r2, r3
 80039ae:	460b      	mov	r3, r1
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	8013      	strh	r3, [r2, #0]
 80039b4:	e00a      	b.n	80039cc <timeSet+0x68c>
							}
							else{
								Minute = 30;
 80039b6:	231e      	movs	r3, #30
 80039b8:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
							   //copying over minPrint
							   sprintf(minPrint, "%d", Minute);
 80039bc:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 80039c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80039c4:	4927      	ldr	r1, [pc, #156]	@ (8003a64 <timeSet+0x724>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f006 ffaa 	bl	800a920 <siprintf>




							//print minPrint
							LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80039cc:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80039d0:	2300      	movs	r3, #0
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	2301      	movs	r3, #1
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <timeSet+0x720>)
 80039da:	21a5      	movs	r1, #165	@ 0xa5
 80039dc:	20fa      	movs	r0, #250	@ 0xfa
 80039de:	f001 fb2c 	bl	800503a <LCD_Font>
		  							6, 52
									66, 55
									6, 67
									79, 67
		  								  			  		  	  		  	 */
		  						 if(touchX >= 6 && touchX < 79 && touchY >= 52 && touchY < 67){
 80039e2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	f240 808a 	bls.w	8003b00 <timeSet+0x7c0>
 80039ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80039f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80039f2:	f200 8085 	bhi.w	8003b00 <timeSet+0x7c0>
 80039f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039fa:	2b33      	cmp	r3, #51	@ 0x33
 80039fc:	f240 8080 	bls.w	8003b00 <timeSet+0x7c0>
 8003a00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a04:	2b42      	cmp	r3, #66	@ 0x42
 8003a06:	d87b      	bhi.n	8003b00 <timeSet+0x7c0>
		  							 	 	 fillRect(75, 25,50,50, ILI9488_GREEN);
 8003a08:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2332      	movs	r3, #50	@ 0x32
 8003a10:	2232      	movs	r2, #50	@ 0x32
 8003a12:	2119      	movs	r1, #25
 8003a14:	204b      	movs	r0, #75	@ 0x4b
 8003a16:	f000 fd39 	bl	800448c <fillRect>
		  							  		HAL_Delay(300);
 8003a1a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003a1e:	f002 fce5 	bl	80063ec <HAL_Delay>
		  							  		fillRect(75, 25,50,50, ILI9488_RED);
 8003a22:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	2332      	movs	r3, #50	@ 0x32
 8003a2a:	2232      	movs	r2, #50	@ 0x32
 8003a2c:	2119      	movs	r1, #25
 8003a2e:	204b      	movs	r0, #75	@ 0x4b
 8003a30:	f000 fd2c 	bl	800448c <fillRect>



		  									//print minPrint

		  									if(Hour == 12){
 8003a34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003a38:	2b0c      	cmp	r3, #12
 8003a3a:	d117      	bne.n	8003a6c <timeSet+0x72c>
		  										Hour = 1;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8003a42:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4b03      	ldr	r3, [pc, #12]	@ (8003a60 <timeSet+0x720>)
 8003a52:	21a5      	movs	r1, #165	@ 0xa5
 8003a54:	202d      	movs	r0, #45	@ 0x2d
 8003a56:	f001 faf0 	bl	800503a <LCD_Font>
 8003a5a:	e02e      	b.n	8003aba <timeSet+0x77a>
 8003a5c:	08010f4c 	.word	0x08010f4c
 8003a60:	08019afc 	.word	0x08019afc
 8003a64:	0800b5c0 	.word	0x0800b5c0
 8003a68:	0800b5c4 	.word	0x0800b5c4
		  									}
		  									else if(Hour > 9){
 8003a6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003a70:	2b09      	cmp	r3, #9
 8003a72:	d911      	bls.n	8003a98 <timeSet+0x758>
		  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8003a74:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003a78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	2301      	movs	r3, #1
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	4b66      	ldr	r3, [pc, #408]	@ (8003c1c <timeSet+0x8dc>)
 8003a84:	21a5      	movs	r1, #165	@ 0xa5
 8003a86:	202d      	movs	r0, #45	@ 0x2d
 8003a88:	f001 fad7 	bl	800503a <LCD_Font>
		  										Hour++;
 8003a8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003a90:	3301      	adds	r3, #1
 8003a92:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8003a96:	e010      	b.n	8003aba <timeSet+0x77a>
		  									}

		  									else{
		  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8003a98:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003a9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aa0:	9301      	str	r3, [sp, #4]
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c1c <timeSet+0x8dc>)
 8003aa8:	21a5      	movs	r1, #165	@ 0xa5
 8003aaa:	204b      	movs	r0, #75	@ 0x4b
 8003aac:	f001 fac5 	bl	800503a <LCD_Font>
		  										Hour++;
 8003ab0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		  									}



		  										sprintf(hourPrint, "%d", Hour);
 8003aba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8003abe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003ac2:	4957      	ldr	r1, [pc, #348]	@ (8003c20 <timeSet+0x8e0>)
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f006 ff2b 	bl	800a920 <siprintf>




		  									//print minPrint
		  									if(Hour < 10){
 8003aca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d80b      	bhi.n	8003aea <timeSet+0x7aa>
		  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8003ad2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2301      	movs	r3, #1
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	4b4f      	ldr	r3, [pc, #316]	@ (8003c1c <timeSet+0x8dc>)
 8003ae0:	21a5      	movs	r1, #165	@ 0xa5
 8003ae2:	204b      	movs	r0, #75	@ 0x4b
 8003ae4:	f001 faa9 	bl	800503a <LCD_Font>
 8003ae8:	e00a      	b.n	8003b00 <timeSet+0x7c0>
		  									}
		  									else{
		  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8003aea:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003aee:	2300      	movs	r3, #0
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	2301      	movs	r3, #1
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	4b49      	ldr	r3, [pc, #292]	@ (8003c1c <timeSet+0x8dc>)
 8003af8:	21a5      	movs	r1, #165	@ 0xa5
 8003afa:	202d      	movs	r0, #45	@ 0x2d
 8003afc:	f001 fa9d 	bl	800503a <LCD_Font>
		  							  							75, 201
																79, 201
																75, 262
																79, 262
		  							  								  			  		  	  		  	 */
		  							  						 if(touchX >= 75 && touchX < 79 && touchY >= 201 && touchY < 262){
 8003b00:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003b04:	2b4a      	cmp	r3, #74	@ 0x4a
 8003b06:	f67f ad52 	bls.w	80035ae <timeSet+0x26e>
 8003b0a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003b0e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b10:	f63f ad4d 	bhi.w	80035ae <timeSet+0x26e>
 8003b14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b18:	2bc8      	cmp	r3, #200	@ 0xc8
 8003b1a:	f67f ad48 	bls.w	80035ae <timeSet+0x26e>
 8003b1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b22:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8003b26:	f4bf ad42 	bcs.w	80035ae <timeSet+0x26e>
		  							  							fillRect(75, 185,50,50, ILI9488_GREEN);
 8003b2a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2332      	movs	r3, #50	@ 0x32
 8003b32:	2232      	movs	r2, #50	@ 0x32
 8003b34:	21b9      	movs	r1, #185	@ 0xb9
 8003b36:	204b      	movs	r0, #75	@ 0x4b
 8003b38:	f000 fca8 	bl	800448c <fillRect>
		  							  							  		HAL_Delay(300);
 8003b3c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003b40:	f002 fc54 	bl	80063ec <HAL_Delay>
		  							  							  	fillRect(75, 185,50,50, ILI9488_RED);
 8003b44:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	2332      	movs	r3, #50	@ 0x32
 8003b4c:	2232      	movs	r2, #50	@ 0x32
 8003b4e:	21b9      	movs	r1, #185	@ 0xb9
 8003b50:	204b      	movs	r0, #75	@ 0x4b
 8003b52:	f000 fc9b 	bl	800448c <fillRect>



		  							  									//print minPrint

		  							  									if(Hour == 1){
 8003b56:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10f      	bne.n	8003b7e <timeSet+0x83e>
		  							  										Hour = 12;
 8003b5e:	230c      	movs	r3, #12
 8003b60:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		  							  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8003b64:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003b68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	2301      	movs	r3, #1
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	4b2a      	ldr	r3, [pc, #168]	@ (8003c1c <timeSet+0x8dc>)
 8003b74:	21a5      	movs	r1, #165	@ 0xa5
 8003b76:	204b      	movs	r0, #75	@ 0x4b
 8003b78:	f001 fa5f 	bl	800503a <LCD_Font>
 8003b7c:	e026      	b.n	8003bcc <timeSet+0x88c>
		  							  									}
		  							  									else if(Hour > 9){
 8003b7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	d911      	bls.n	8003baa <timeSet+0x86a>
		  							  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8003b86:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003b8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	2301      	movs	r3, #1
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	4b21      	ldr	r3, [pc, #132]	@ (8003c1c <timeSet+0x8dc>)
 8003b96:	21a5      	movs	r1, #165	@ 0xa5
 8003b98:	202d      	movs	r0, #45	@ 0x2d
 8003b9a:	f001 fa4e 	bl	800503a <LCD_Font>
		  							  										Hour--;
 8003b9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8003ba8:	e010      	b.n	8003bcc <timeSet+0x88c>
		  							  									}

		  							  									else{
		  							  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8003baa:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <timeSet+0x8dc>)
 8003bba:	21a5      	movs	r1, #165	@ 0xa5
 8003bbc:	204b      	movs	r0, #75	@ 0x4b
 8003bbe:	f001 fa3c 	bl	800503a <LCD_Font>
		  							  										Hour--;
 8003bc2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		  							  									}



		  							  										sprintf(hourPrint, "%d", Hour);
 8003bcc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8003bd0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003bd4:	4912      	ldr	r1, [pc, #72]	@ (8003c20 <timeSet+0x8e0>)
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f006 fea2 	bl	800a920 <siprintf>




		  							  									//print minPrint
		  							  									if(Hour < 10){
 8003bdc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	d80b      	bhi.n	8003bfc <timeSet+0x8bc>
		  							  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8003be4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003be8:	2300      	movs	r3, #0
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	2301      	movs	r3, #1
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <timeSet+0x8dc>)
 8003bf2:	21a5      	movs	r1, #165	@ 0xa5
 8003bf4:	204b      	movs	r0, #75	@ 0x4b
 8003bf6:	f001 fa20 	bl	800503a <LCD_Font>
 8003bfa:	e4d8      	b.n	80035ae <timeSet+0x26e>
		  							  									}
		  							  									else{
		  							  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8003bfc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003c00:	2300      	movs	r3, #0
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	2301      	movs	r3, #1
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <timeSet+0x8dc>)
 8003c0a:	21a5      	movs	r1, #165	@ 0xa5
 8003c0c:	202d      	movs	r0, #45	@ 0x2d
 8003c0e:	f001 fa14 	bl	800503a <LCD_Font>
	  {
 8003c12:	e4cc      	b.n	80035ae <timeSet+0x26e>


	  }


}
 8003c14:	3794      	adds	r7, #148	@ 0x94
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd90      	pop	{r4, r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08019afc 	.word	0x08019afc
 8003c20:	0800b5c0 	.word	0x0800b5c0

08003c24 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8003c2c:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <DS1307_Init+0x1c>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8003c32:	2000      	movs	r0, #0
 8003c34:	f000 f806 	bl	8003c44 <DS1307_SetClockHalt>
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000698 	.word	0x20000698

08003c44 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <DS1307_SetClockHalt+0x14>
 8003c54:	2380      	movs	r3, #128	@ 0x80
 8003c56:	e000      	b.n	8003c5a <DS1307_SetClockHalt+0x16>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f000 f83d 	bl	8003cdc <DS1307_GetRegByte>
 8003c62:	4603      	mov	r3, r0
 8003c64:	b25b      	sxtb	r3, r3
 8003c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c6a:	b25a      	sxtb	r2, r3
 8003c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	b25b      	sxtb	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	4619      	mov	r1, r3
 8003c78:	2000      	movs	r0, #0
 8003c7a:	f000 f811 	bl	8003ca0 <DS1307_SetRegByte>
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 8003c86:	b580      	push	{r7, lr}
 8003c88:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f000 f826 	bl	8003cdc <DS1307_GetRegByte>
 8003c90:	4603      	mov	r3, r0
 8003c92:	11db      	asrs	r3, r3, #7
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	b2db      	uxtb	r3, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	460a      	mov	r2, r1
 8003caa:	71fb      	strb	r3, [r7, #7]
 8003cac:	4613      	mov	r3, r2
 8003cae:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	733b      	strb	r3, [r7, #12]
 8003cb4:	79bb      	ldrb	r3, [r7, #6]
 8003cb6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8003cb8:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <DS1307_SetRegByte+0x38>)
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	f107 020c 	add.w	r2, r7, #12
 8003cc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	21d0      	movs	r1, #208	@ 0xd0
 8003cca:	f002 fedf 	bl	8006a8c <HAL_I2C_Master_Transmit>
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000698 	.word	0x20000698

08003cdc <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <DS1307_GetRegByte+0x40>)
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	1dfa      	adds	r2, r7, #7
 8003cec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	21d0      	movs	r1, #208	@ 0xd0
 8003cf6:	f002 fec9 	bl	8006a8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8003cfa:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <DS1307_GetRegByte+0x40>)
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f107 020f 	add.w	r2, r7, #15
 8003d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2301      	movs	r3, #1
 8003d0a:	21d0      	movs	r1, #208	@ 0xd0
 8003d0c:	f002 ffd6 	bl	8006cbc <HAL_I2C_Master_Receive>
	return val;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000698 	.word	0x20000698

08003d20 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8003d24:	2003      	movs	r0, #3
 8003d26:	f7ff ffd9 	bl	8003cdc <DS1307_GetRegByte>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f8f7 	bl	8003f20 <DS1307_DecodeBCD>
 8003d32:	4603      	mov	r3, r0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8003d3c:	2004      	movs	r0, #4
 8003d3e:	f7ff ffcd 	bl	8003cdc <DS1307_GetRegByte>
 8003d42:	4603      	mov	r3, r0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f8eb 	bl	8003f20 <DS1307_DecodeBCD>
 8003d4a:	4603      	mov	r3, r0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8003d54:	2005      	movs	r0, #5
 8003d56:	f7ff ffc1 	bl	8003cdc <DS1307_GetRegByte>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 f8df 	bl	8003f20 <DS1307_DecodeBCD>
 8003d62:	4603      	mov	r3, r0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8003d6e:	2010      	movs	r0, #16
 8003d70:	f7ff ffb4 	bl	8003cdc <DS1307_GetRegByte>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	0092      	lsls	r2, r2, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	0091      	lsls	r1, r2, #2
 8003d80:	461a      	mov	r2, r3
 8003d82:	460b      	mov	r3, r1
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8003d8a:	2006      	movs	r0, #6
 8003d8c:	f7ff ffa6 	bl	8003cdc <DS1307_GetRegByte>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f8c4 	bl	8003f20 <DS1307_DecodeBCD>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	4413      	add	r3, r2
 8003da0:	b29b      	uxth	r3, r3
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8003daa:	b580      	push	{r7, lr}
 8003dac:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8003dae:	2002      	movs	r0, #2
 8003db0:	f7ff ff94 	bl	8003cdc <DS1307_GetRegByte>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f8af 	bl	8003f20 <DS1307_DecodeBCD>
 8003dc2:	4603      	mov	r3, r0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8003dcc:	2001      	movs	r0, #1
 8003dce:	f7ff ff85 	bl	8003cdc <DS1307_GetRegByte>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f8a3 	bl	8003f20 <DS1307_DecodeBCD>
 8003dda:	4603      	mov	r3, r0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f8b1 	bl	8003f54 <DS1307_EncodeBCD>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4619      	mov	r1, r3
 8003df6:	2003      	movs	r0, #3
 8003df8:	f7ff ff52 	bl	8003ca0 <DS1307_SetRegByte>
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f89f 	bl	8003f54 <DS1307_EncodeBCD>
 8003e16:	4603      	mov	r3, r0
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2004      	movs	r0, #4
 8003e1c:	f7ff ff40 	bl	8003ca0 <DS1307_SetRegByte>
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f88d 	bl	8003f54 <DS1307_EncodeBCD>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	2005      	movs	r0, #5
 8003e40:	f7ff ff2e 	bl	8003ca0 <DS1307_SetRegByte>
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	4a10      	ldr	r2, [pc, #64]	@ (8003e9c <DS1307_SetYear+0x50>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	4619      	mov	r1, r3
 8003e66:	2010      	movs	r0, #16
 8003e68:	f7ff ff1a 	bl	8003ca0 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8003e9c <DS1307_SetYear+0x50>)
 8003e70:	fba2 1203 	umull	r1, r2, r2, r3
 8003e74:	0952      	lsrs	r2, r2, #5
 8003e76:	2164      	movs	r1, #100	@ 0x64
 8003e78:	fb01 f202 	mul.w	r2, r1, r2
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f866 	bl	8003f54 <DS1307_EncodeBCD>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	2006      	movs	r0, #6
 8003e8e:	f7ff ff07 	bl	8003ca0 <DS1307_SetRegByte>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	51eb851f 	.word	0x51eb851f

08003ea0 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f84e 	bl	8003f54 <DS1307_EncodeBCD>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4619      	mov	r1, r3
 8003ebc:	2002      	movs	r0, #2
 8003ebe:	f7ff feef 	bl	8003ca0 <DS1307_SetRegByte>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f83c 	bl	8003f54 <DS1307_EncodeBCD>
 8003edc:	4603      	mov	r3, r0
 8003ede:	4619      	mov	r1, r3
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f7ff fedd 	bl	8003ca0 <DS1307_SetRegByte>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8003ef8:	f7ff fec5 	bl	8003c86 <DS1307_GetClockHalt>
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8003f00:	79fa      	ldrb	r2, [r7, #7]
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f823 	bl	8003f54 <DS1307_EncodeBCD>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4619      	mov	r1, r3
 8003f12:	2000      	movs	r0, #0
 8003f14:	f7ff fec4 	bl	8003ca0 <DS1307_SetRegByte>
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	0092      	lsls	r2, r2, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	b2db      	uxtb	r3, r3
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8003f5e:	79fa      	ldrb	r2, [r7, #7]
 8003f60:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <DS1307_EncodeBCD+0x40>)
 8003f62:	fba3 1302 	umull	r1, r3, r3, r2
 8003f66:	08d9      	lsrs	r1, r3, #3
 8003f68:	460b      	mov	r3, r1
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	4907      	ldr	r1, [pc, #28]	@ (8003f94 <DS1307_EncodeBCD+0x40>)
 8003f78:	fba1 1303 	umull	r1, r3, r1, r3
 8003f7c:	08db      	lsrs	r3, r3, #3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	4413      	add	r3, r2
 8003f86:	b2db      	uxtb	r3, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	cccccccd 	.word	0xcccccccd

08003f98 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2140      	movs	r1, #64	@ 0x40
 8003faa:	480c      	ldr	r0, [pc, #48]	@ (8003fdc <ILI9488_SendCommand+0x44>)
 8003fac:	f002 fcba 	bl	8006924 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4809      	ldr	r0, [pc, #36]	@ (8003fdc <ILI9488_SendCommand+0x44>)
 8003fb6:	f002 fcb5 	bl	8006924 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 8003fba:	f107 010f 	add.w	r1, r7, #15
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4807      	ldr	r0, [pc, #28]	@ (8003fe0 <ILI9488_SendCommand+0x48>)
 8003fc4:	f004 fff1 	bl	8008faa <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8003fc8:	2201      	movs	r2, #1
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4803      	ldr	r0, [pc, #12]	@ (8003fdc <ILI9488_SendCommand+0x44>)
 8003fce:	f002 fca9 	bl	8006924 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	48000c00 	.word	0x48000c00
 8003fe0:	200007c0 	.word	0x200007c0

08003fe4 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	2140      	movs	r1, #64	@ 0x40
 8003ff6:	480c      	ldr	r0, [pc, #48]	@ (8004028 <ILI9488_SendData+0x44>)
 8003ff8:	f002 fc94 	bl	8006924 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2101      	movs	r1, #1
 8004000:	4809      	ldr	r0, [pc, #36]	@ (8004028 <ILI9488_SendData+0x44>)
 8004002:	f002 fc8f 	bl	8006924 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 8004006:	f107 010f 	add.w	r1, r7, #15
 800400a:	2301      	movs	r3, #1
 800400c:	2201      	movs	r2, #1
 800400e:	4807      	ldr	r0, [pc, #28]	@ (800402c <ILI9488_SendData+0x48>)
 8004010:	f004 ffcb 	bl	8008faa <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8004014:	2201      	movs	r2, #1
 8004016:	2101      	movs	r1, #1
 8004018:	4803      	ldr	r0, [pc, #12]	@ (8004028 <ILI9488_SendData+0x44>)
 800401a:	f002 fc83 	bl	8006924 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	48000c00 	.word	0x48000c00
 800402c:	200007c0 	.word	0x200007c0

08004030 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	DC_DATA();
 800403a:	2201      	movs	r2, #1
 800403c:	2140      	movs	r1, #64	@ 0x40
 800403e:	4815      	ldr	r0, [pc, #84]	@ (8004094 <ILI9488_SendData_Multi+0x64>)
 8004040:	f002 fc70 	bl	8006924 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 8004044:	2200      	movs	r2, #0
 8004046:	2101      	movs	r1, #1
 8004048:	4812      	ldr	r0, [pc, #72]	@ (8004094 <ILI9488_SendData_Multi+0x64>)
 800404a:	f002 fc6b 	bl	8006924 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 800404e:	e015      	b.n	800407c <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004056:	bf28      	it	cs
 8004058:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 800405c:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 800405e:	89fa      	ldrh	r2, [r7, #14]
 8004060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	480c      	ldr	r0, [pc, #48]	@ (8004098 <ILI9488_SendData_Multi+0x68>)
 8004068:	f004 ff9f 	bl	8008faa <HAL_SPI_Transmit>
		buff += chunk_size;
 800406c:	89fb      	ldrh	r3, [r7, #14]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e6      	bne.n	8004050 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 8004082:	2201      	movs	r2, #1
 8004084:	2101      	movs	r1, #1
 8004086:	4803      	ldr	r0, [pc, #12]	@ (8004094 <ILI9488_SendData_Multi+0x64>)
 8004088:	f002 fc4c 	bl	8006924 <HAL_GPIO_WritePin>
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	48000c00 	.word	0x48000c00
 8004098:	200007c0 	.word	0x200007c0

0800409c <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 80040a0:	2201      	movs	r2, #1
 80040a2:	2101      	movs	r1, #1
 80040a4:	486c      	ldr	r0, [pc, #432]	@ (8004258 <ILI9488_Init+0x1bc>)
 80040a6:	f002 fc3d 	bl	8006924 <HAL_GPIO_WritePin>
	RST_A();
 80040aa:	2200      	movs	r2, #0
 80040ac:	2180      	movs	r1, #128	@ 0x80
 80040ae:	486a      	ldr	r0, [pc, #424]	@ (8004258 <ILI9488_Init+0x1bc>)
 80040b0:	f002 fc38 	bl	8006924 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 80040b4:	200a      	movs	r0, #10
 80040b6:	f002 f999 	bl	80063ec <HAL_Delay>
		 RST_D();
 80040ba:	2201      	movs	r2, #1
 80040bc:	2180      	movs	r1, #128	@ 0x80
 80040be:	4866      	ldr	r0, [pc, #408]	@ (8004258 <ILI9488_Init+0x1bc>)
 80040c0:	f002 fc30 	bl	8006924 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 80040c4:	4b65      	ldr	r3, [pc, #404]	@ (800425c <ILI9488_Init+0x1c0>)
 80040c6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80040ca:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 80040cc:	4b64      	ldr	r3, [pc, #400]	@ (8004260 <ILI9488_Init+0x1c4>)
 80040ce:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80040d2:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 80040d4:	20e0      	movs	r0, #224	@ 0xe0
 80040d6:	f7ff ff5f 	bl	8003f98 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 80040da:	2000      	movs	r0, #0
 80040dc:	f7ff ff82 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 80040e0:	2003      	movs	r0, #3
 80040e2:	f7ff ff7f 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 80040e6:	2009      	movs	r0, #9
 80040e8:	f7ff ff7c 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 80040ec:	2008      	movs	r0, #8
 80040ee:	f7ff ff79 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 80040f2:	2016      	movs	r0, #22
 80040f4:	f7ff ff76 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 80040f8:	200a      	movs	r0, #10
 80040fa:	f7ff ff73 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 80040fe:	203f      	movs	r0, #63	@ 0x3f
 8004100:	f7ff ff70 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8004104:	2078      	movs	r0, #120	@ 0x78
 8004106:	f7ff ff6d 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 800410a:	204c      	movs	r0, #76	@ 0x4c
 800410c:	f7ff ff6a 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8004110:	2009      	movs	r0, #9
 8004112:	f7ff ff67 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8004116:	200a      	movs	r0, #10
 8004118:	f7ff ff64 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 800411c:	2008      	movs	r0, #8
 800411e:	f7ff ff61 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8004122:	2016      	movs	r0, #22
 8004124:	f7ff ff5e 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8004128:	201a      	movs	r0, #26
 800412a:	f7ff ff5b 	bl	8003fe4 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 800412e:	200f      	movs	r0, #15
 8004130:	f7ff ff58 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 8004134:	20e1      	movs	r0, #225	@ 0xe1
 8004136:	f7ff ff2f 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 800413a:	2000      	movs	r0, #0
 800413c:	f7ff ff52 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 8004140:	2016      	movs	r0, #22
 8004142:	f7ff ff4f 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 8004146:	2019      	movs	r0, #25
 8004148:	f7ff ff4c 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 800414c:	2003      	movs	r0, #3
 800414e:	f7ff ff49 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 8004152:	200f      	movs	r0, #15
 8004154:	f7ff ff46 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 8004158:	2005      	movs	r0, #5
 800415a:	f7ff ff43 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 800415e:	2032      	movs	r0, #50	@ 0x32
 8004160:	f7ff ff40 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 8004164:	2045      	movs	r0, #69	@ 0x45
 8004166:	f7ff ff3d 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 800416a:	2046      	movs	r0, #70	@ 0x46
 800416c:	f7ff ff3a 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 8004170:	2004      	movs	r0, #4
 8004172:	f7ff ff37 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 8004176:	200e      	movs	r0, #14
 8004178:	f7ff ff34 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 800417c:	200d      	movs	r0, #13
 800417e:	f7ff ff31 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 8004182:	2035      	movs	r0, #53	@ 0x35
 8004184:	f7ff ff2e 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 8004188:	2037      	movs	r0, #55	@ 0x37
 800418a:	f7ff ff2b 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 800418e:	200f      	movs	r0, #15
 8004190:	f7ff ff28 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 8004194:	20c0      	movs	r0, #192	@ 0xc0
 8004196:	f7ff feff 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 800419a:	2017      	movs	r0, #23
 800419c:	f7ff ff22 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 80041a0:	2015      	movs	r0, #21
 80041a2:	f7ff ff1f 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 80041a6:	20c1      	movs	r0, #193	@ 0xc1
 80041a8:	f7ff fef6 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 80041ac:	2041      	movs	r0, #65	@ 0x41
 80041ae:	f7ff ff19 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 80041b2:	20c5      	movs	r0, #197	@ 0xc5
 80041b4:	f7ff fef0 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 80041b8:	2000      	movs	r0, #0
 80041ba:	f7ff ff13 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 80041be:	2012      	movs	r0, #18
 80041c0:	f7ff ff10 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 80041c4:	2080      	movs	r0, #128	@ 0x80
 80041c6:	f7ff ff0d 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 80041ca:	2036      	movs	r0, #54	@ 0x36
 80041cc:	f7ff fee4 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 80041d0:	2048      	movs	r0, #72	@ 0x48
 80041d2:	f7ff ff07 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 80041d6:	203a      	movs	r0, #58	@ 0x3a
 80041d8:	f7ff fede 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 80041dc:	2066      	movs	r0, #102	@ 0x66
 80041de:	f7ff ff01 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 80041e2:	20b0      	movs	r0, #176	@ 0xb0
 80041e4:	f7ff fed8 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 80041e8:	2080      	movs	r0, #128	@ 0x80
 80041ea:	f7ff fefb 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 80041ee:	20b1      	movs	r0, #177	@ 0xb1
 80041f0:	f7ff fed2 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 80041f4:	20a0      	movs	r0, #160	@ 0xa0
 80041f6:	f7ff fef5 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 80041fa:	20b4      	movs	r0, #180	@ 0xb4
 80041fc:	f7ff fecc 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8004200:	2002      	movs	r0, #2
 8004202:	f7ff feef 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8004206:	20b6      	movs	r0, #182	@ 0xb6
 8004208:	f7ff fec6 	bl	8003f98 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 800420c:	2002      	movs	r0, #2
 800420e:	f7ff fee9 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 8004212:	2002      	movs	r0, #2
 8004214:	f7ff fee6 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8004218:	20e9      	movs	r0, #233	@ 0xe9
 800421a:	f7ff febd 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 800421e:	2000      	movs	r0, #0
 8004220:	f7ff fee0 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 8004224:	20f7      	movs	r0, #247	@ 0xf7
 8004226:	f7ff feb7 	bl	8003f98 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 800422a:	20a9      	movs	r0, #169	@ 0xa9
 800422c:	f7ff feda 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 8004230:	2051      	movs	r0, #81	@ 0x51
 8004232:	f7ff fed7 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 8004236:	202c      	movs	r0, #44	@ 0x2c
 8004238:	f7ff fed4 	bl	8003fe4 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 800423c:	2082      	movs	r0, #130	@ 0x82
 800423e:	f7ff fed1 	bl	8003fe4 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 8004242:	2011      	movs	r0, #17
 8004244:	f7ff fea8 	bl	8003f98 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 8004248:	2078      	movs	r0, #120	@ 0x78
 800424a:	f002 f8cf 	bl	80063ec <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 800424e:	2029      	movs	r0, #41	@ 0x29
 8004250:	f7ff fea2 	bl	8003f98 <ILI9488_SendCommand>

}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	48000c00 	.word	0x48000c00
 800425c:	200006ae 	.word	0x200006ae
 8004260:	200006b0 	.word	0x200006b0

08004264 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	4604      	mov	r4, r0
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	461a      	mov	r2, r3
 8004272:	4623      	mov	r3, r4
 8004274:	80fb      	strh	r3, [r7, #6]
 8004276:	4603      	mov	r3, r0
 8004278:	80bb      	strh	r3, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	807b      	strh	r3, [r7, #2]
 800427e:	4613      	mov	r3, r2
 8004280:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 8004282:	202a      	movs	r0, #42	@ 0x2a
 8004284:	f7ff fe88 	bl	8003f98 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	b29b      	uxth	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	733b      	strb	r3, [r7, #12]
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	737b      	strb	r3, [r7, #13]
 8004298:	887b      	ldrh	r3, [r7, #2]
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	b29b      	uxth	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	73bb      	strb	r3, [r7, #14]
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 80042a8:	f107 030c 	add.w	r3, r7, #12
 80042ac:	2104      	movs	r1, #4
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff febe 	bl	8004030 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 80042b4:	202b      	movs	r0, #43	@ 0x2b
 80042b6:	f7ff fe6f 	bl	8003f98 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 80042ba:	88bb      	ldrh	r3, [r7, #4]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	b29b      	uxth	r3, r3
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	723b      	strb	r3, [r7, #8]
 80042c4:	88bb      	ldrh	r3, [r7, #4]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	727b      	strb	r3, [r7, #9]
 80042ca:	883b      	ldrh	r3, [r7, #0]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	72bb      	strb	r3, [r7, #10]
 80042d4:	883b      	ldrh	r3, [r7, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 80042da:	f107 0308 	add.w	r3, r7, #8
 80042de:	2104      	movs	r1, #4
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fea5 	bl	8004030 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 80042e6:	202c      	movs	r0, #44	@ 0x2c
 80042e8:	f7ff fe56 	bl	8003f98 <ILI9488_SendCommand>
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd90      	pop	{r4, r7, pc}

080042f4 <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	80fb      	strh	r3, [r7, #6]
 80042fe:	460b      	mov	r3, r1
 8004300:	80bb      	strh	r3, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8004306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db36      	blt.n	800437c <drawPixel+0x88>
 800430e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004312:	4a1c      	ldr	r2, [pc, #112]	@ (8004384 <drawPixel+0x90>)
 8004314:	8812      	ldrh	r2, [r2, #0]
 8004316:	4293      	cmp	r3, r2
 8004318:	da30      	bge.n	800437c <drawPixel+0x88>
 800431a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	db2c      	blt.n	800437c <drawPixel+0x88>
 8004322:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004326:	4a18      	ldr	r2, [pc, #96]	@ (8004388 <drawPixel+0x94>)
 8004328:	8812      	ldrh	r2, [r2, #0]
 800432a:	4293      	cmp	r3, r2
 800432c:	da26      	bge.n	800437c <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 800432e:	88f8      	ldrh	r0, [r7, #6]
 8004330:	88b9      	ldrh	r1, [r7, #4]
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	3301      	adds	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	88bb      	ldrh	r3, [r7, #4]
 800433a:	3301      	adds	r3, #1
 800433c:	b29b      	uxth	r3, r3
 800433e:	f7ff ff91 	bl	8004264 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8004342:	4b12      	ldr	r3, [pc, #72]	@ (800438c <drawPixel+0x98>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a12      	ldr	r2, [pc, #72]	@ (8004390 <drawPixel+0x9c>)
 8004348:	8811      	ldrh	r1, [r2, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f002 fae9 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8004352:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <drawPixel+0xa0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a10      	ldr	r2, [pc, #64]	@ (8004398 <drawPixel+0xa4>)
 8004358:	8811      	ldrh	r1, [r2, #0]
 800435a:	2200      	movs	r2, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f002 fae1 	bl	8006924 <HAL_GPIO_WritePin>

	write16BitColor(color);
 8004362:	887b      	ldrh	r3, [r7, #2]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fd5d 	bl	8004e24 <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800436a:	4b0a      	ldr	r3, [pc, #40]	@ (8004394 <drawPixel+0xa0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <drawPixel+0xa4>)
 8004370:	8811      	ldrh	r1, [r2, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f002 fad5 	bl	8006924 <HAL_GPIO_WritePin>
 800437a:	e000      	b.n	800437e <drawPixel+0x8a>
		return;
 800437c:	bf00      	nop

}
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	200006ae 	.word	0x200006ae
 8004388:	200006b0 	.word	0x200006b0
 800438c:	200006a8 	.word	0x200006a8
 8004390:	200006ac 	.word	0x200006ac
 8004394:	200006a0 	.word	0x200006a0
 8004398:	200006a4 	.word	0x200006a4

0800439c <drawPixelSize>:

void drawPixelSize(int16_t x, int16_t y, uint16_t color, uint16_t size)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	80fb      	strh	r3, [r7, #6]
 80043ae:	4603      	mov	r3, r0
 80043b0:	80bb      	strh	r3, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	807b      	strh	r3, [r7, #2]
 80043b6:	4613      	mov	r3, r2
 80043b8:	803b      	strh	r3, [r7, #0]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 80043ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	db39      	blt.n	8004436 <drawPixelSize+0x9a>
 80043c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <drawPixelSize+0xa4>)
 80043c8:	8812      	ldrh	r2, [r2, #0]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	da33      	bge.n	8004436 <drawPixelSize+0x9a>
 80043ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	db2f      	blt.n	8004436 <drawPixelSize+0x9a>
 80043d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043da:	4a1a      	ldr	r2, [pc, #104]	@ (8004444 <drawPixelSize+0xa8>)
 80043dc:	8812      	ldrh	r2, [r2, #0]
 80043de:	4293      	cmp	r3, r2
 80043e0:	da29      	bge.n	8004436 <drawPixelSize+0x9a>
		return;

	setAddrWindow(x, y, x + size, y + size);
 80043e2:	88f8      	ldrh	r0, [r7, #6]
 80043e4:	88b9      	ldrh	r1, [r7, #4]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	883b      	ldrh	r3, [r7, #0]
 80043ea:	4413      	add	r3, r2
 80043ec:	b29c      	uxth	r4, r3
 80043ee:	88ba      	ldrh	r2, [r7, #4]
 80043f0:	883b      	ldrh	r3, [r7, #0]
 80043f2:	4413      	add	r3, r2
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4622      	mov	r2, r4
 80043f8:	f7ff ff34 	bl	8004264 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 80043fc:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <drawPixelSize+0xac>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a12      	ldr	r2, [pc, #72]	@ (800444c <drawPixelSize+0xb0>)
 8004402:	8811      	ldrh	r1, [r2, #0]
 8004404:	2201      	movs	r2, #1
 8004406:	4618      	mov	r0, r3
 8004408:	f002 fa8c 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800440c:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <drawPixelSize+0xb4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a10      	ldr	r2, [pc, #64]	@ (8004454 <drawPixelSize+0xb8>)
 8004412:	8811      	ldrh	r1, [r2, #0]
 8004414:	2200      	movs	r2, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f002 fa84 	bl	8006924 <HAL_GPIO_WritePin>

	write16BitColor(color);
 800441c:	887b      	ldrh	r3, [r7, #2]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fd00 	bl	8004e24 <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8004424:	4b0a      	ldr	r3, [pc, #40]	@ (8004450 <drawPixelSize+0xb4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a0a      	ldr	r2, [pc, #40]	@ (8004454 <drawPixelSize+0xb8>)
 800442a:	8811      	ldrh	r1, [r2, #0]
 800442c:	2201      	movs	r2, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f002 fa78 	bl	8006924 <HAL_GPIO_WritePin>
 8004434:	e000      	b.n	8004438 <drawPixelSize+0x9c>
		return;
 8004436:	bf00      	nop

}
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bd90      	pop	{r4, r7, pc}
 800443e:	bf00      	nop
 8004440:	200006ae 	.word	0x200006ae
 8004444:	200006b0 	.word	0x200006b0
 8004448:	200006a8 	.word	0x200006a8
 800444c:	200006ac 	.word	0x200006ac
 8004450:	200006a0 	.word	0x200006a0
 8004454:	200006a4 	.word	0x200006a4

08004458 <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af02      	add	r7, sp, #8
 800445e:	4603      	mov	r3, r0
 8004460:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 8004462:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <fillScreen+0x2c>)
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b21a      	sxth	r2, r3
 8004468:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <fillScreen+0x30>)
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b219      	sxth	r1, r3
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	460b      	mov	r3, r1
 8004474:	2100      	movs	r1, #0
 8004476:	2000      	movs	r0, #0
 8004478:	f000 f808 	bl	800448c <fillRect>
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	200006ae 	.word	0x200006ae
 8004488:	200006b0 	.word	0x200006b0

0800448c <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800448c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004490:	b08a      	sub	sp, #40	@ 0x28
 8004492:	af00      	add	r7, sp, #0
 8004494:	4606      	mov	r6, r0
 8004496:	4608      	mov	r0, r1
 8004498:	4611      	mov	r1, r2
 800449a:	461a      	mov	r2, r3
 800449c:	4633      	mov	r3, r6
 800449e:	80fb      	strh	r3, [r7, #6]
 80044a0:	4603      	mov	r3, r0
 80044a2:	80bb      	strh	r3, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	807b      	strh	r3, [r7, #2]
 80044a8:	4613      	mov	r3, r2
 80044aa:	803b      	strh	r3, [r7, #0]
 80044ac:	466b      	mov	r3, sp
 80044ae:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 80044b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044b4:	4a8f      	ldr	r2, [pc, #572]	@ (80046f4 <fillRect+0x268>)
 80044b6:	8812      	ldrh	r2, [r2, #0]
 80044b8:	4293      	cmp	r3, r2
 80044ba:	da05      	bge.n	80044c8 <fillRect+0x3c>
 80044bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80044c0:	4a8d      	ldr	r2, [pc, #564]	@ (80046f8 <fillRect+0x26c>)
 80044c2:	8812      	ldrh	r2, [r2, #0]
 80044c4:	4293      	cmp	r3, r2
 80044c6:	db01      	blt.n	80044cc <fillRect+0x40>
		return;
 80044c8:	46d5      	mov	sp, sl
 80044ca:	e10f      	b.n	80046ec <fillRect+0x260>
	if ((x + w - 1) >= width)
 80044cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044d4:	4413      	add	r3, r2
 80044d6:	4a87      	ldr	r2, [pc, #540]	@ (80046f4 <fillRect+0x268>)
 80044d8:	8812      	ldrh	r2, [r2, #0]
 80044da:	4293      	cmp	r3, r2
 80044dc:	dd05      	ble.n	80044ea <fillRect+0x5e>
		w = width - x;
 80044de:	4b85      	ldr	r3, [pc, #532]	@ (80046f4 <fillRect+0x268>)
 80044e0:	881a      	ldrh	r2, [r3, #0]
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 80044ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80044ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80044f2:	4413      	add	r3, r2
 80044f4:	4a80      	ldr	r2, [pc, #512]	@ (80046f8 <fillRect+0x26c>)
 80044f6:	8812      	ldrh	r2, [r2, #0]
 80044f8:	4293      	cmp	r3, r2
 80044fa:	dd05      	ble.n	8004508 <fillRect+0x7c>
		h = height - y;
 80044fc:	4b7e      	ldr	r3, [pc, #504]	@ (80046f8 <fillRect+0x26c>)
 80044fe:	881a      	ldrh	r2, [r3, #0]
 8004500:	88bb      	ldrh	r3, [r7, #4]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	b29b      	uxth	r3, r3
 8004506:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8004508:	88f8      	ldrh	r0, [r7, #6]
 800450a:	88b9      	ldrh	r1, [r7, #4]
 800450c:	88fa      	ldrh	r2, [r7, #6]
 800450e:	887b      	ldrh	r3, [r7, #2]
 8004510:	4413      	add	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29e      	uxth	r6, r3
 8004518:	88ba      	ldrh	r2, [r7, #4]
 800451a:	883b      	ldrh	r3, [r7, #0]
 800451c:	4413      	add	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	4632      	mov	r2, r6
 8004526:	f7ff fe9d 	bl	8004264 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 800452a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800452e:	0adb      	lsrs	r3, r3, #11
 8004530:	b29b      	uxth	r3, r3
 8004532:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 8004534:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004538:	115b      	asrs	r3, r3, #5
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004540:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 8004542:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 800454e:	7efa      	ldrb	r2, [r7, #27]
 8004550:	4613      	mov	r3, r2
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	4a69      	ldr	r2, [pc, #420]	@ (80046fc <fillRect+0x270>)
 8004558:	fb82 1203 	smull	r1, r2, r2, r3
 800455c:	441a      	add	r2, r3
 800455e:	1112      	asrs	r2, r2, #4
 8004560:	17db      	asrs	r3, r3, #31
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 8004566:	7eba      	ldrb	r2, [r7, #26]
 8004568:	4613      	mov	r3, r2
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	4a64      	ldr	r2, [pc, #400]	@ (8004700 <fillRect+0x274>)
 8004570:	fb82 1203 	smull	r1, r2, r2, r3
 8004574:	441a      	add	r2, r3
 8004576:	1152      	asrs	r2, r2, #5
 8004578:	17db      	asrs	r3, r3, #31
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 800457e:	7e7a      	ldrb	r2, [r7, #25]
 8004580:	4613      	mov	r3, r2
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	4a5d      	ldr	r2, [pc, #372]	@ (80046fc <fillRect+0x270>)
 8004588:	fb82 1203 	smull	r1, r2, r2, r3
 800458c:	441a      	add	r2, r3
 800458e:	1112      	asrs	r2, r2, #4
 8004590:	17db      	asrs	r3, r3, #31
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 8004596:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800459a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800459e:	fb03 f202 	mul.w	r2, r3, r2
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b0:	d204      	bcs.n	80045bc <fillRect+0x130>
		cnt = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	623b      	str	r3, [r7, #32]
		buf_size = n;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	e02f      	b.n	800461c <fillRect+0x190>
	}
	else {
		cnt = n/3;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4a51      	ldr	r2, [pc, #324]	@ (8004704 <fillRect+0x278>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 80045c8:	2303      	movs	r3, #3
 80045ca:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4a4e      	ldr	r2, [pc, #312]	@ (8004708 <fillRect+0x27c>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	0bdb      	lsrs	r3, r3, #15
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e0:	e014      	b.n	800460c <fillRect+0x180>
			if(n%i == 0){
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80045ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ec:	fb01 f202 	mul.w	r2, r1, r2
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d107      	bne.n	8004606 <fillRect+0x17a>
				cnt = i;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	61fb      	str	r3, [r7, #28]
				break;
 8004604:	e00a      	b.n	800461c <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	3301      	adds	r3, #1
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4a3d      	ldr	r2, [pc, #244]	@ (8004704 <fillRect+0x278>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004618:	429a      	cmp	r2, r3
 800461a:	d3e2      	bcc.n	80045e2 <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 800461c:	69f9      	ldr	r1, [r7, #28]
 800461e:	460b      	mov	r3, r1
 8004620:	3b01      	subs	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	2300      	movs	r3, #0
 8004626:	4688      	mov	r8, r1
 8004628:	4699      	mov	r9, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800463a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800463e:	2300      	movs	r3, #0
 8004640:	460c      	mov	r4, r1
 8004642:	461d      	mov	r5, r3
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	00eb      	lsls	r3, r5, #3
 800464e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004652:	00e2      	lsls	r2, r4, #3
 8004654:	1dcb      	adds	r3, r1, #7
 8004656:	08db      	lsrs	r3, r3, #3
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	ebad 0d03 	sub.w	sp, sp, r3
 800465e:	466b      	mov	r3, sp
 8004660:	3300      	adds	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8004664:	2300      	movs	r3, #0
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
 8004668:	e019      	b.n	800469e <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 800466a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	7ef9      	ldrb	r1, [r7, #27]
 8004676:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8004678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	3301      	adds	r3, #1
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	7eb9      	ldrb	r1, [r7, #26]
 8004686:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8004688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	3302      	adds	r3, #2
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	7e79      	ldrb	r1, [r7, #25]
 8004696:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	3301      	adds	r3, #1
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4a18      	ldr	r2, [pc, #96]	@ (8004704 <fillRect+0x278>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d3dd      	bcc.n	800466a <fillRect+0x1de>
	}
	DC_DATA();
 80046ae:	2201      	movs	r2, #1
 80046b0:	2140      	movs	r1, #64	@ 0x40
 80046b2:	4816      	ldr	r0, [pc, #88]	@ (800470c <fillRect+0x280>)
 80046b4:	f002 f936 	bl	8006924 <HAL_GPIO_WritePin>
	CS_A();
 80046b8:	2200      	movs	r2, #0
 80046ba:	2101      	movs	r1, #1
 80046bc:	4813      	ldr	r0, [pc, #76]	@ (800470c <fillRect+0x280>)
 80046be:	f002 f931 	bl	8006924 <HAL_GPIO_WritePin>
		while(cnt>0)
 80046c2:	e00a      	b.n	80046da <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	4810      	ldr	r0, [pc, #64]	@ (8004710 <fillRect+0x284>)
 80046d0:	f004 fc6b 	bl	8008faa <HAL_SPI_Transmit>

			cnt -= 1;
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f1      	bne.n	80046c4 <fillRect+0x238>
		}
		CS_D();
 80046e0:	2201      	movs	r2, #1
 80046e2:	2101      	movs	r1, #1
 80046e4:	4809      	ldr	r0, [pc, #36]	@ (800470c <fillRect+0x280>)
 80046e6:	f002 f91d 	bl	8006924 <HAL_GPIO_WritePin>
 80046ea:	46d5      	mov	sp, sl

}
 80046ec:	3728      	adds	r7, #40	@ 0x28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f4:	200006ae 	.word	0x200006ae
 80046f8:	200006b0 	.word	0x200006b0
 80046fc:	84210843 	.word	0x84210843
 8004700:	82082083 	.word	0x82082083
 8004704:	aaaaaaab 	.word	0xaaaaaaab
 8004708:	80008001 	.word	0x80008001
 800470c:	48000c00 	.word	0x48000c00
 8004710:	200007c0 	.word	0x200007c0

08004714 <setRotation>:


void setRotation(uint8_t r)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 800471e:	2036      	movs	r0, #54	@ 0x36
 8004720:	f7ff fc3a 	bl	8003f98 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b03      	cmp	r3, #3
 8004730:	d83a      	bhi.n	80047a8 <setRotation+0x94>
 8004732:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <setRotation+0x24>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	08004749 	.word	0x08004749
 800473c:	08004761 	.word	0x08004761
 8004740:	08004779 	.word	0x08004779
 8004744:	08004791 	.word	0x08004791
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 8004748:	2048      	movs	r0, #72	@ 0x48
 800474a:	f7ff fc4b 	bl	8003fe4 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 800474e:	4b18      	ldr	r3, [pc, #96]	@ (80047b0 <setRotation+0x9c>)
 8004750:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004754:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8004756:	4b17      	ldr	r3, [pc, #92]	@ (80047b4 <setRotation+0xa0>)
 8004758:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800475c:	801a      	strh	r2, [r3, #0]
		break;
 800475e:	e023      	b.n	80047a8 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8004760:	2028      	movs	r0, #40	@ 0x28
 8004762:	f7ff fc3f 	bl	8003fe4 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8004766:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <setRotation+0x9c>)
 8004768:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800476c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 800476e:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <setRotation+0xa0>)
 8004770:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004774:	801a      	strh	r2, [r3, #0]
		break;
 8004776:	e017      	b.n	80047a8 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 8004778:	2088      	movs	r0, #136	@ 0x88
 800477a:	f7ff fc33 	bl	8003fe4 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 800477e:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <setRotation+0x9c>)
 8004780:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004784:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8004786:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <setRotation+0xa0>)
 8004788:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800478c:	801a      	strh	r2, [r3, #0]
		break;
 800478e:	e00b      	b.n	80047a8 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8004790:	20e8      	movs	r0, #232	@ 0xe8
 8004792:	f7ff fc27 	bl	8003fe4 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8004796:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <setRotation+0x9c>)
 8004798:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800479c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 800479e:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <setRotation+0xa0>)
 80047a0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80047a4:	801a      	strh	r2, [r3, #0]
		break;
 80047a6:	bf00      	nop
	}

}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	200006ae 	.word	0x200006ae
 80047b4:	200006b0 	.word	0x200006b0

080047b8 <drawChar>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

//11. Text printing functions
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80047b8:	b5b0      	push	{r4, r5, r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af02      	add	r7, sp, #8
 80047be:	4604      	mov	r4, r0
 80047c0:	4608      	mov	r0, r1
 80047c2:	4611      	mov	r1, r2
 80047c4:	461a      	mov	r2, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	80fb      	strh	r3, [r7, #6]
 80047ca:	4603      	mov	r3, r0
 80047cc:	80bb      	strh	r3, [r7, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	70fb      	strb	r3, [r7, #3]
 80047d2:	4613      	mov	r3, r2
 80047d4:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 80047d6:	4bac      	ldr	r3, [pc, #688]	@ (8004a88 <drawChar+0x2d0>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d003      	beq.n	80047e6 <drawChar+0x2e>
 80047de:	4baa      	ldr	r3, [pc, #680]	@ (8004a88 <drawChar+0x2d0>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d120      	bne.n	8004828 <drawChar+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 80047e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80047ee:	f280 8144 	bge.w	8004a7a <drawChar+0x2c2>
 80047f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80047f6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80047fa:	f280 813e 	bge.w	8004a7a <drawChar+0x2c2>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80047fe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004802:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004806:	4613      	mov	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4413      	add	r3, r2
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8004810:	2b00      	cmp	r3, #0
 8004812:	f340 8132 	ble.w	8004a7a <drawChar+0x2c2>
     ((y + 8 * size - 1) < 0))   // Clip top
 8004816:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800481a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8004822:	2b00      	cmp	r3, #0
 8004824:	dc22      	bgt.n	800486c <drawChar+0xb4>
    return;
 8004826:	e128      	b.n	8004a7a <drawChar+0x2c2>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8004828:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800482c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004830:	f280 8125 	bge.w	8004a7e <drawChar+0x2c6>
 8004834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004838:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800483c:	f280 811f 	bge.w	8004a7e <drawChar+0x2c6>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8004840:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004844:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004848:	4613      	mov	r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4413      	add	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8004852:	2b00      	cmp	r3, #0
 8004854:	f340 8113 	ble.w	8004a7e <drawChar+0x2c6>
     ((x + 8 * size - 1) < 0))   // Clip top
 8004858:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800485c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8004864:	2b00      	cmp	r3, #0
 8004866:	f340 810a 	ble.w	8004a7e <drawChar+0x2c6>
 800486a:	e000      	b.n	800486e <drawChar+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 800486c:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800486e:	4b87      	ldr	r3, [pc, #540]	@ (8004a8c <drawChar+0x2d4>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	f083 0301 	eor.w	r3, r3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <drawChar+0xd0>
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	2baf      	cmp	r3, #175	@ 0xaf
 8004880:	d902      	bls.n	8004888 <drawChar+0xd0>
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	3301      	adds	r3, #1
 8004886:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8004888:	2300      	movs	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e0ef      	b.n	8004a6e <drawChar+0x2b6>
    uint8_t line;
    if (i == 5)
 800488e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004892:	2b05      	cmp	r3, #5
 8004894:	d102      	bne.n	800489c <drawChar+0xe4>
      line = 0x0;
 8004896:	2300      	movs	r3, #0
 8004898:	73bb      	strb	r3, [r7, #14]
 800489a:	e00b      	b.n	80048b4 <drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048aa:	4413      	add	r3, r2
 80048ac:	4a78      	ldr	r2, [pc, #480]	@ (8004a90 <drawChar+0x2d8>)
 80048ae:	4413      	add	r3, r2
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80048b4:	2300      	movs	r3, #0
 80048b6:	737b      	strb	r3, [r7, #13]
 80048b8:	e0ce      	b.n	8004a58 <drawChar+0x2a0>
      if (line & 0x1) {
 80048ba:	7bbb      	ldrb	r3, [r7, #14]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d05e      	beq.n	8004982 <drawChar+0x1ca>
        if (size == 1) // default size
 80048c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d112      	bne.n	80048f2 <drawChar+0x13a>
        	drawPixel(x+i, y+j, color);
 80048cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	4413      	add	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	b218      	sxth	r0, r3
 80048da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	88bb      	ldrh	r3, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	b21b      	sxth	r3, r3
 80048e8:	883a      	ldrh	r2, [r7, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	f7ff fd02 	bl	80042f4 <drawPixel>
 80048f0:	e0a9      	b.n	8004a46 <drawChar+0x28e>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80048f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	fb12 f303 	smulbb	r3, r2, r3
 8004902:	b29a      	uxth	r2, r3
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	4413      	add	r3, r2
 8004908:	b29b      	uxth	r3, r3
 800490a:	b218      	sxth	r0, r3
 800490c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004910:	b29a      	uxth	r2, r3
 8004912:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004916:	b29b      	uxth	r3, r3
 8004918:	fb12 f303 	smulbb	r3, r2, r3
 800491c:	b29a      	uxth	r2, r3
 800491e:	88bb      	ldrh	r3, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	b29b      	uxth	r3, r3
 8004924:	b21c      	sxth	r4, r3
 8004926:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800492a:	b29a      	uxth	r2, r3
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	4413      	add	r3, r2
 8004930:	b29a      	uxth	r2, r3
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	b299      	uxth	r1, r3
 8004938:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800493c:	b29b      	uxth	r3, r3
 800493e:	fb11 f303 	smulbb	r3, r1, r3
 8004942:	b29b      	uxth	r3, r3
 8004944:	4413      	add	r3, r2
 8004946:	b29b      	uxth	r3, r3
 8004948:	b21d      	sxth	r5, r3
 800494a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800494e:	b29a      	uxth	r2, r3
 8004950:	88bb      	ldrh	r3, [r7, #4]
 8004952:	4413      	add	r3, r2
 8004954:	b29a      	uxth	r2, r3
 8004956:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800495a:	b299      	uxth	r1, r3
 800495c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004960:	b29b      	uxth	r3, r3
 8004962:	fb11 f303 	smulbb	r3, r1, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	4413      	add	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	3301      	adds	r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	b21a      	sxth	r2, r3
 8004972:	883b      	ldrh	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	4613      	mov	r3, r2
 8004978:	462a      	mov	r2, r5
 800497a:	4621      	mov	r1, r4
 800497c:	f7ff fd86 	bl	800448c <fillRect>
 8004980:	e061      	b.n	8004a46 <drawChar+0x28e>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }
      } else if (bg != color) {
 8004982:	8c3a      	ldrh	r2, [r7, #32]
 8004984:	883b      	ldrh	r3, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d05d      	beq.n	8004a46 <drawChar+0x28e>
        if (size == 1) // default size
 800498a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800498e:	2b01      	cmp	r3, #1
 8004990:	d112      	bne.n	80049b8 <drawChar+0x200>
        	drawPixel(x+i, y+j, bg);
 8004992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004996:	b29a      	uxth	r2, r3
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	4413      	add	r3, r2
 800499c:	b29b      	uxth	r3, r3
 800499e:	b218      	sxth	r0, r3
 80049a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	88bb      	ldrh	r3, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	b21b      	sxth	r3, r3
 80049ae:	8c3a      	ldrh	r2, [r7, #32]
 80049b0:	4619      	mov	r1, r3
 80049b2:	f7ff fc9f 	bl	80042f4 <drawPixel>
 80049b6:	e046      	b.n	8004a46 <drawChar+0x28e>
        else {  // big size
        	fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 80049b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049bc:	b29a      	uxth	r2, r3
 80049be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	fb12 f303 	smulbb	r3, r2, r3
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	4413      	add	r3, r2
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	b218      	sxth	r0, r3
 80049d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049dc:	b29b      	uxth	r3, r3
 80049de:	fb12 f303 	smulbb	r3, r2, r3
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	88bb      	ldrh	r3, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	b21c      	sxth	r4, r3
 80049ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	4413      	add	r3, r2
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fc:	b299      	uxth	r1, r3
 80049fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	fb11 f303 	smulbb	r3, r1, r3
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	b21d      	sxth	r5, r3
 8004a10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	88bb      	ldrh	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004a20:	b299      	uxth	r1, r3
 8004a22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	fb11 f303 	smulbb	r3, r1, r3
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3301      	adds	r3, #1
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	b21a      	sxth	r2, r3
 8004a38:	8c3b      	ldrh	r3, [r7, #32]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	462a      	mov	r2, r5
 8004a40:	4621      	mov	r1, r4
 8004a42:	f7ff fd23 	bl	800448c <fillRect>
        }
      }
      line >>= 1;
 8004a46:	7bbb      	ldrb	r3, [r7, #14]
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8004a4c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	737b      	strb	r3, [r7, #13]
 8004a58:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004a5c:	2b07      	cmp	r3, #7
 8004a5e:	f77f af2c 	ble.w	80048ba <drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	3301      	adds	r3, #1
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	73fb      	strb	r3, [r7, #15]
 8004a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	f77f af0b 	ble.w	800488e <drawChar+0xd6>
 8004a78:	e002      	b.n	8004a80 <drawChar+0x2c8>
    return;
 8004a7a:	bf00      	nop
 8004a7c:	e000      	b.n	8004a80 <drawChar+0x2c8>
    return;
 8004a7e:	bf00      	nop
    }
  }
}
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bdb0      	pop	{r4, r5, r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	2000069c 	.word	0x2000069c
 8004a90:	08019b08 	.word	0x08019b08

08004a94 <drawCharTest>:


void drawCharTest(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8004a94:	b5b0      	push	{r4, r5, r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	80fb      	strh	r3, [r7, #6]
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	80bb      	strh	r3, [r7, #4]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	70fb      	strb	r3, [r7, #3]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8004ab2:	4bb7      	ldr	r3, [pc, #732]	@ (8004d90 <drawCharTest+0x2fc>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d003      	beq.n	8004ac2 <drawCharTest+0x2e>
 8004aba:	4bb5      	ldr	r3, [pc, #724]	@ (8004d90 <drawCharTest+0x2fc>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d120      	bne.n	8004b04 <drawCharTest+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8004ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ac6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004aca:	f280 815a 	bge.w	8004d82 <drawCharTest+0x2ee>
 8004ace:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ad2:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8004ad6:	f280 8154 	bge.w	8004d82 <drawCharTest+0x2ee>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8004ada:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004ade:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f340 8148 	ble.w	8004d82 <drawCharTest+0x2ee>
     ((y + 8 * size - 1) < 0))   // Clip top
 8004af2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004af6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	dc22      	bgt.n	8004b48 <drawCharTest+0xb4>
    return;
 8004b02:	e13e      	b.n	8004d82 <drawCharTest+0x2ee>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8004b04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b08:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b0c:	f280 813b 	bge.w	8004d86 <drawCharTest+0x2f2>
 8004b10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b14:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8004b18:	f280 8135 	bge.w	8004d86 <drawCharTest+0x2f2>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8004b1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004b20:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f340 8129 	ble.w	8004d86 <drawCharTest+0x2f2>
     ((x + 8 * size - 1) < 0))   // Clip top
 8004b34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f340 8120 	ble.w	8004d86 <drawCharTest+0x2f2>
 8004b46:	e000      	b.n	8004b4a <drawCharTest+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8004b48:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8004b4a:	4b92      	ldr	r3, [pc, #584]	@ (8004d94 <drawCharTest+0x300>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f083 0301 	eor.w	r3, r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <drawCharTest+0xd0>
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	2baf      	cmp	r3, #175	@ 0xaf
 8004b5c:	d902      	bls.n	8004b64 <drawCharTest+0xd0>
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	3301      	adds	r3, #1
 8004b62:	70fb      	strb	r3, [r7, #3]

  //6
  for (int8_t i=0; i<6; i++ ) {
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]
 8004b68:	e105      	b.n	8004d76 <drawCharTest+0x2e2>
    uint8_t line;
    if (i == 5)
 8004b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d102      	bne.n	8004b78 <drawCharTest+0xe4>
      line = 0x0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73bb      	strb	r3, [r7, #14]
 8004b76:	e00b      	b.n	8004b90 <drawCharTest+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b86:	4413      	add	r3, r2
 8004b88:	4a83      	ldr	r2, [pc, #524]	@ (8004d98 <drawCharTest+0x304>)
 8004b8a:	4413      	add	r3, r2
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8004b90:	2300      	movs	r3, #0
 8004b92:	737b      	strb	r3, [r7, #13]
 8004b94:	e0e4      	b.n	8004d60 <drawCharTest+0x2cc>
      if (line & 0x1) {
 8004b96:	7bbb      	ldrb	r3, [r7, #14]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d073      	beq.n	8004c88 <drawCharTest+0x1f4>
        if (size == 1) // default size
 8004ba0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d112      	bne.n	8004bce <drawCharTest+0x13a>
        	drawPixel(x+i, y+j, color);
 8004ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	b218      	sxth	r0, r3
 8004bb6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	88bb      	ldrh	r3, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	883a      	ldrh	r2, [r7, #0]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f7ff fb94 	bl	80042f4 <drawPixel>
 8004bcc:	e047      	b.n	8004c5e <drawCharTest+0x1ca>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), (size + x+(i*size))/10, (size+1 + y+(j*size))/10, color);
 8004bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	fb12 f303 	smulbb	r3, r2, r3
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	4413      	add	r3, r2
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	b218      	sxth	r0, r3
 8004be8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	fb12 f303 	smulbb	r3, r2, r3
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	88bb      	ldrh	r3, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	b21c      	sxth	r4, r3
 8004c02:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c0a:	441a      	add	r2, r3
 8004c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c10:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	4a60      	ldr	r2, [pc, #384]	@ (8004d9c <drawCharTest+0x308>)
 8004c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8004c20:	1092      	asrs	r2, r2, #2
 8004c22:	17db      	asrs	r3, r3, #31
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	b21d      	sxth	r5, r3
 8004c28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c32:	441a      	add	r2, r3
 8004c34:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004c38:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	4a56      	ldr	r2, [pc, #344]	@ (8004d9c <drawCharTest+0x308>)
 8004c44:	fb82 1203 	smull	r1, r2, r2, r3
 8004c48:	1092      	asrs	r2, r2, #2
 8004c4a:	17db      	asrs	r3, r3, #31
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	b21a      	sxth	r2, r3
 8004c50:	883b      	ldrh	r3, [r7, #0]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	462a      	mov	r2, r5
 8004c58:	4621      	mov	r1, r4
 8004c5a:	f7ff fc17 	bl	800448c <fillRect>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }

        drawPixelSize(x + i, y + i, color, size);
 8004c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	4413      	add	r3, r2
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	b218      	sxth	r0, r3
 8004c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	88bb      	ldrh	r3, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	b219      	sxth	r1, r3
 8004c7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	883a      	ldrh	r2, [r7, #0]
 8004c82:	f7ff fb8b 	bl	800439c <drawPixelSize>
 8004c86:	e062      	b.n	8004d4e <drawCharTest+0x2ba>
      } else if (bg != color) {
 8004c88:	8c3a      	ldrh	r2, [r7, #32]
 8004c8a:	883b      	ldrh	r3, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d05e      	beq.n	8004d4e <drawCharTest+0x2ba>
        if (size == 1) // default size
 8004c90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d112      	bne.n	8004cbe <drawCharTest+0x22a>
        	drawPixel(x+i, y+j, bg);
 8004c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	b218      	sxth	r0, r3
 8004ca6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	88bb      	ldrh	r3, [r7, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	b21b      	sxth	r3, r3
 8004cb4:	8c3a      	ldrh	r2, [r7, #32]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7ff fb1c 	bl	80042f4 <drawPixel>
 8004cbc:	e047      	b.n	8004d4e <drawCharTest+0x2ba>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), (size + x+(i*size))/10, (size+1 + y+(j*size))/10, bg);
 8004cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	fb12 f303 	smulbb	r3, r2, r3
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	b218      	sxth	r0, r3
 8004cd8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	fb12 f303 	smulbb	r3, r2, r3
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	88bb      	ldrh	r3, [r7, #4]
 8004cec:	4413      	add	r3, r2
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	b21c      	sxth	r4, r3
 8004cf2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cfa:	441a      	add	r2, r3
 8004cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d00:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	4a24      	ldr	r2, [pc, #144]	@ (8004d9c <drawCharTest+0x308>)
 8004d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8004d10:	1092      	asrs	r2, r2, #2
 8004d12:	17db      	asrs	r3, r3, #31
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	b21d      	sxth	r5, r3
 8004d18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d22:	441a      	add	r2, r3
 8004d24:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004d28:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	4a1a      	ldr	r2, [pc, #104]	@ (8004d9c <drawCharTest+0x308>)
 8004d34:	fb82 1203 	smull	r1, r2, r2, r3
 8004d38:	1092      	asrs	r2, r2, #2
 8004d3a:	17db      	asrs	r3, r3, #31
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	b21a      	sxth	r2, r3
 8004d40:	8c3b      	ldrh	r3, [r7, #32]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	462a      	mov	r2, r5
 8004d48:	4621      	mov	r1, r4
 8004d4a:	f7ff fb9f 	bl	800448c <fillRect>
        }
      }
      line >>= 1;
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8004d54:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	737b      	strb	r3, [r7, #13]
 8004d60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004d64:	2b07      	cmp	r3, #7
 8004d66:	f77f af16 	ble.w	8004b96 <drawCharTest+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8004d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	73fb      	strb	r3, [r7, #15]
 8004d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	f77f aef5 	ble.w	8004b6a <drawCharTest+0xd6>
 8004d80:	e002      	b.n	8004d88 <drawCharTest+0x2f4>
    return;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <drawCharTest+0x2f4>
    return;
 8004d86:	bf00      	nop
    }
  }
}
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000000 	.word	0x20000000
 8004d94:	2000069c 	.word	0x2000069c
 8004d98:	08019b08 	.word	0x08019b08
 8004d9c:	66666667 	.word	0x66666667

08004da0 <ILI9488_printText>:

void ILI9488_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b089      	sub	sp, #36	@ 0x24
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	4608      	mov	r0, r1
 8004daa:	4611      	mov	r1, r2
 8004dac:	461a      	mov	r2, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	817b      	strh	r3, [r7, #10]
 8004db2:	460b      	mov	r3, r1
 8004db4:	813b      	strh	r3, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8004dba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	0052      	lsls	r2, r2, #1
 8004dc4:	4413      	add	r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	82fb      	strh	r3, [r7, #22]
 8004dd0:	e01a      	b.n	8004e08 <ILI9488_printText+0x68>
	{
		drawChar(x+(offset*i), y, text[i],color,bg,size);
 8004dd2:	8abb      	ldrh	r3, [r7, #20]
 8004dd4:	8afa      	ldrh	r2, [r7, #22]
 8004dd6:	fb12 f303 	smulbb	r3, r2, r3
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	897b      	ldrh	r3, [r7, #10]
 8004dde:	4413      	add	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	b218      	sxth	r0, r3
 8004de4:	8afb      	ldrh	r3, [r7, #22]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	781a      	ldrb	r2, [r3, #0]
 8004dec:	88fc      	ldrh	r4, [r7, #6]
 8004dee:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8004df2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	4623      	mov	r3, r4
 8004dfe:	f7ff fcdb 	bl	80047b8 <drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8004e02:	8afb      	ldrh	r3, [r7, #22]
 8004e04:	3301      	adds	r3, #1
 8004e06:	82fb      	strh	r3, [r7, #22]
 8004e08:	8afb      	ldrh	r3, [r7, #22]
 8004e0a:	2b27      	cmp	r3, #39	@ 0x27
 8004e0c:	d805      	bhi.n	8004e1a <ILI9488_printText+0x7a>
 8004e0e:	8afb      	ldrh	r3, [r7, #22]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1db      	bne.n	8004dd2 <ILI9488_printText+0x32>
	}
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
	...

08004e24 <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	0adb      	lsrs	r3, r3, #11
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	115b      	asrs	r3, r3, #5
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e40:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	4a17      	ldr	r2, [pc, #92]	@ (8004eb4 <write16BitColor+0x90>)
 8004e56:	fb82 1203 	smull	r1, r2, r2, r3
 8004e5a:	441a      	add	r2, r3
 8004e5c:	1112      	asrs	r2, r2, #4
 8004e5e:	17db      	asrs	r3, r3, #31
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8004e64:	7bba      	ldrb	r2, [r7, #14]
 8004e66:	4613      	mov	r3, r2
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	4a12      	ldr	r2, [pc, #72]	@ (8004eb8 <write16BitColor+0x94>)
 8004e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8004e72:	441a      	add	r2, r3
 8004e74:	1152      	asrs	r2, r2, #5
 8004e76:	17db      	asrs	r3, r3, #31
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8004e7c:	7b7a      	ldrb	r2, [r7, #13]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	4a0b      	ldr	r2, [pc, #44]	@ (8004eb4 <write16BitColor+0x90>)
 8004e86:	fb82 1203 	smull	r1, r2, r2, r3
 8004e8a:	441a      	add	r2, r3
 8004e8c:	1112      	asrs	r2, r2, #4
 8004e8e:	17db      	asrs	r3, r3, #31
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	723b      	strb	r3, [r7, #8]
 8004e98:	7bbb      	ldrb	r3, [r7, #14]
 8004e9a:	727b      	strb	r3, [r7, #9]
 8004e9c:	7b7b      	ldrb	r3, [r7, #13]
 8004e9e:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 8004ea0:	f107 0308 	add.w	r3, r7, #8
 8004ea4:	2103      	movs	r1, #3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff f8c2 	bl	8004030 <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	84210843 	.word	0x84210843
 8004eb8:	82082083 	.word	0x82082083

08004ebc <LCD_Char>:

void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font,
              uint8_t size, uint32_t color24) {
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b08b      	sub	sp, #44	@ 0x2c
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60ba      	str	r2, [r7, #8]
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	81fb      	strh	r3, [r7, #14]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	81bb      	strh	r3, [r7, #12]
  uint8_t *bitmap = font->bitmap;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	617b      	str	r3, [r7, #20]
  uint16_t bo = glyph->bitmapOffset;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	83fb      	strh	r3, [r7, #30]
  uint8_t bits = 0, bit = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	777b      	strb	r3, [r7, #29]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	773b      	strb	r3, [r7, #28]
  uint16_t set_pixels = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	837b      	strh	r3, [r7, #26]
  uint8_t cur_x, cur_y;
  for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	763b      	strb	r3, [r7, #24]
 8004eea:	e09b      	b.n	8005024 <LCD_Char+0x168>
    for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 8004eec:	2300      	movs	r3, #0
 8004eee:	767b      	strb	r3, [r7, #25]
 8004ef0:	e056      	b.n	8004fa0 <LCD_Char+0xe4>
      if (bit == 0) {
 8004ef2:	7f3b      	ldrb	r3, [r7, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <LCD_Char+0x50>
        bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004ef8:	8bfb      	ldrh	r3, [r7, #30]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	83fa      	strh	r2, [r7, #30]
 8004efe:	461a      	mov	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	777b      	strb	r3, [r7, #29]
        bit = 0x80;
 8004f08:	2380      	movs	r3, #128	@ 0x80
 8004f0a:	773b      	strb	r3, [r7, #28]
      }
      if (bits & bit)
 8004f0c:	7f7a      	ldrb	r2, [r7, #29]
 8004f0e:	7f3b      	ldrb	r3, [r7, #28]
 8004f10:	4013      	ands	r3, r2
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <LCD_Char+0x64>
        set_pixels++;
 8004f18:	8b7b      	ldrh	r3, [r7, #26]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	837b      	strh	r3, [r7, #26]
 8004f1e:	e039      	b.n	8004f94 <LCD_Char+0xd8>
      else if (set_pixels > 0) {
 8004f20:	8b7b      	ldrh	r3, [r7, #26]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d036      	beq.n	8004f94 <LCD_Char+0xd8>
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	7e7b      	ldrb	r3, [r7, #25]
 8004f30:	441a      	add	r2, r3
 8004f32:	8b7b      	ldrh	r3, [r7, #26]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	fb12 f303 	smulbb	r3, r2, r3
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	89fb      	ldrh	r3, [r7, #14]
 8004f46:	4413      	add	r3, r2
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	b218      	sxth	r0, r3
                 y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004f52:	461a      	mov	r2, r3
 8004f54:	7e3b      	ldrb	r3, [r7, #24]
 8004f56:	4413      	add	r3, r2
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	fb12 f303 	smulbb	r3, r2, r3
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	89bb      	ldrh	r3, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8004f6c:	b219      	sxth	r1, r3
                 y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8004f6e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	8b7a      	ldrh	r2, [r7, #26]
 8004f76:	fb12 f303 	smulbb	r3, r2, r3
 8004f7a:	b29b      	uxth	r3, r3
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8004f7c:	b21a      	sxth	r2, r3
 8004f7e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004f82:	b21c      	sxth	r4, r3
 8004f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	f7ff fa7e 	bl	800448c <fillRect>
                 color24);
        set_pixels = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	837b      	strh	r3, [r7, #26]
      }
      bit >>= 1;
 8004f94:	7f3b      	ldrb	r3, [r7, #28]
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	773b      	strb	r3, [r7, #28]
    for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 8004f9a:	7e7b      	ldrb	r3, [r7, #25]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	767b      	strb	r3, [r7, #25]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	789b      	ldrb	r3, [r3, #2]
 8004fa4:	7e7a      	ldrb	r2, [r7, #25]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d3a3      	bcc.n	8004ef2 <LCD_Char+0x36>
    }
    if (set_pixels > 0) {
 8004faa:	8b7b      	ldrh	r3, [r7, #26]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d036      	beq.n	800501e <LCD_Char+0x162>
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	7e7b      	ldrb	r3, [r7, #25]
 8004fba:	441a      	add	r2, r3
 8004fbc:	8b7b      	ldrh	r3, [r7, #26]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	fb12 f303 	smulbb	r3, r2, r3
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	89fb      	ldrh	r3, [r7, #14]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	b218      	sxth	r0, r3
               y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	7e3b      	ldrb	r3, [r7, #24]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	fb12 f303 	smulbb	r3, r2, r3
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	89bb      	ldrh	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	b29b      	uxth	r3, r3
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8004ff6:	b219      	sxth	r1, r3
               y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8004ff8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	8b7a      	ldrh	r2, [r7, #26]
 8005000:	fb12 f303 	smulbb	r3, r2, r3
 8005004:	b29b      	uxth	r3, r3
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8005006:	b21a      	sxth	r2, r3
 8005008:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800500c:	b21c      	sxth	r4, r3
 800500e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005010:	b29b      	uxth	r3, r3
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4623      	mov	r3, r4
 8005016:	f7ff fa39 	bl	800448c <fillRect>
               color24);
      set_pixels = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	837b      	strh	r3, [r7, #26]
  for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 800501e:	7e3b      	ldrb	r3, [r7, #24]
 8005020:	3301      	adds	r3, #1
 8005022:	763b      	strb	r3, [r7, #24]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	78db      	ldrb	r3, [r3, #3]
 8005028:	7e3a      	ldrb	r2, [r7, #24]
 800502a:	429a      	cmp	r2, r3
 800502c:	f4ff af5e 	bcc.w	8004eec <LCD_Char+0x30>
    }
  }
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	3724      	adds	r7, #36	@ 0x24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd90      	pop	{r4, r7, pc}

0800503a <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font,
              uint8_t size, uint32_t color24) {
 800503a:	b590      	push	{r4, r7, lr}
 800503c:	b08f      	sub	sp, #60	@ 0x3c
 800503e:	af02      	add	r7, sp, #8
 8005040:	60ba      	str	r2, [r7, #8]
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	4603      	mov	r3, r0
 8005046:	81fb      	strh	r3, [r7, #14]
 8005048:	460b      	mov	r3, r1
 800504a:	81bb      	strh	r3, [r7, #12]
  int16_t cursor_x = x;
 800504c:	89fb      	ldrh	r3, [r7, #14]
 800504e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  int16_t cursor_y = y;
 8005050:	89bb      	ldrh	r3, [r7, #12]
 8005052:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  GFXfont font;
  memcpy(&font, p_font, sizeof(GFXfont));
 8005054:	f107 031c 	add.w	r3, r7, #28
 8005058:	220c      	movs	r2, #12
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4618      	mov	r0, r3
 800505e:	f005 fcb3 	bl	800a9c8 <memcpy>
  for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8005062:	2300      	movs	r3, #0
 8005064:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005066:	e056      	b.n	8005116 <LCD_Font+0xdc>
    char c = text[text_pos];
 8005068:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	4413      	add	r3, r2
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if (c == '\n') {
 8005074:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005078:	2b0a      	cmp	r3, #10
 800507a:	d10f      	bne.n	800509c <LCD_Font+0x62>
      cursor_x = x;
 800507c:	89fb      	ldrh	r3, [r7, #14]
 800507e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      cursor_y += font.yAdvance * size;
 8005080:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005084:	461a      	mov	r2, r3
 8005086:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800508a:	b29b      	uxth	r3, r3
 800508c:	fb12 f303 	smulbb	r3, r2, r3
 8005090:	b29a      	uxth	r2, r3
 8005092:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005094:	4413      	add	r3, r2
 8005096:	b29b      	uxth	r3, r3
 8005098:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800509a:	e039      	b.n	8005110 <LCD_Font+0xd6>
    } else if (c >= font.first && c <= font.last && c != '\r') {
 800509c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050a0:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d333      	bcc.n	8005110 <LCD_Font+0xd6>
 80050a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80050ac:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d82d      	bhi.n	8005110 <LCD_Font+0xd6>
 80050b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80050b8:	2b0d      	cmp	r3, #13
 80050ba:	d029      	beq.n	8005110 <LCD_Font+0xd6>
      GFXglyph glyph;
      memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 80050bc:	6a3a      	ldr	r2, [r7, #32]
 80050be:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80050c2:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80050c6:	1a5b      	subs	r3, r3, r1
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	18d1      	adds	r1, r2, r3
 80050cc:	f107 0314 	add.w	r3, r7, #20
 80050d0:	2208      	movs	r2, #8
 80050d2:	4618      	mov	r0, r3
 80050d4:	f005 fc78 	bl	800a9c8 <memcpy>
      LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80050d8:	f107 041c 	add.w	r4, r7, #28
 80050dc:	f107 0214 	add.w	r2, r7, #20
 80050e0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80050e4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80050e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	4623      	mov	r3, r4
 80050f4:	f7ff fee2 	bl	8004ebc <LCD_Char>
      cursor_x += glyph.xAdvance * size;
 80050f8:	7e3b      	ldrb	r3, [r7, #24]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8005100:	b29b      	uxth	r3, r3
 8005102:	fb12 f303 	smulbb	r3, r2, r3
 8005106:	b29a      	uxth	r2, r3
 8005108:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800510a:	4413      	add	r3, r2
 800510c:	b29b      	uxth	r3, r3
 800510e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8005110:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005112:	3301      	adds	r3, #1
 8005114:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005116:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8005118:	68b8      	ldr	r0, [r7, #8]
 800511a:	f7fb f871 	bl	8000200 <strlen>
 800511e:	4603      	mov	r3, r0
 8005120:	429c      	cmp	r4, r3
 8005122:	d3a1      	bcc.n	8005068 <LCD_Font+0x2e>
    }
  }
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	3734      	adds	r7, #52	@ 0x34
 800512a:	46bd      	mov	sp, r7
 800512c:	bd90      	pop	{r4, r7, pc}
	...

08005130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005136:	f001 f8e4 	bl	8006302 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800513a:	f000 f86f 	bl	800521c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800513e:	f000 fa91 	bl	8005664 <MX_GPIO_Init>
  MX_SPI2_Init();
 8005142:	f000 f97b 	bl	800543c <MX_SPI2_Init>
  MX_SPI3_Init();
 8005146:	f000 f9b7 	bl	80054b8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800514a:	f000 f9f3 	bl	8005534 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800514e:	f000 fa3d 	bl	80055cc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8005152:	f000 f8b5 	bl	80052c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005156:	f000 f933 	bl	80053c0 <MX_SPI1_Init>
  MX_I2C2_Init();
 800515a:	f000 f8f1 	bl	8005340 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ILI9488_Init();
 800515e:	f7fe ff9d 	bl	800409c <ILI9488_Init>
  XPT2046_Init();
 8005162:	f000 ffad 	bl	80060c0 <XPT2046_Init>

  HAL_Delay(250);
 8005166:	20fa      	movs	r0, #250	@ 0xfa
 8005168:	f001 f940 	bl	80063ec <HAL_Delay>
  setRotation(1);
 800516c:	2001      	movs	r0, #1
 800516e:	f7ff fad1 	bl	8004714 <setRotation>
  fillScreen(ILI9488_WHITE);
 8005172:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005176:	f7ff f96f 	bl	8004458 <fillScreen>
  DS1307_Init(&hi2c1);
 800517a:	4822      	ldr	r0, [pc, #136]	@ (8005204 <main+0xd4>)
 800517c:	f7fe fd52 	bl	8003c24 <DS1307_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	DS1307_Init(&hi2c1);
 8005180:	4820      	ldr	r0, [pc, #128]	@ (8005204 <main+0xd4>)
 8005182:	f7fe fd4f 	bl	8003c24 <DS1307_Init>
	xbee_init(&huart2);
 8005186:	4820      	ldr	r0, [pc, #128]	@ (8005208 <main+0xd8>)
 8005188:	f000 fdf6 	bl	8005d78 <xbee_init>
	/* To test leap year correction. */
	DS1307_SetDate(4);
 800518c:	2004      	movs	r0, #4
 800518e:	f7fe fe39 	bl	8003e04 <DS1307_SetDate>
	DS1307_SetMonth(3);
 8005192:	2003      	movs	r0, #3
 8005194:	f7fe fe48 	bl	8003e28 <DS1307_SetMonth>
	DS1307_SetYear(2024);
 8005198:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 800519c:	f7fe fe56 	bl	8003e4c <DS1307_SetYear>
	DS1307_SetDayOfWeek(2);
 80051a0:	2002      	movs	r0, #2
 80051a2:	f7fe fe1d 	bl	8003de0 <DS1307_SetDayOfWeek>
	DS1307_SetHour(22);
 80051a6:	2016      	movs	r0, #22
 80051a8:	f7fe fe7a 	bl	8003ea0 <DS1307_SetHour>
	DS1307_SetMinute(13);
 80051ac:	200d      	movs	r0, #13
 80051ae:	f7fe fe8c 	bl	8003eca <DS1307_SetMinute>
	DS1307_SetSecond(30);
 80051b2:	201e      	movs	r0, #30
 80051b4:	f7fe fe9b 	bl	8003eee <DS1307_SetSecond>

	HAL_Delay(1000);
 80051b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051bc:	f001 f916 	bl	80063ec <HAL_Delay>

	//Monday at 11:00.
	addNewEntry(0, "WEEWOO2", 1, 11, 00);
 80051c0:	2300      	movs	r3, #0
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	230b      	movs	r3, #11
 80051c6:	2201      	movs	r2, #1
 80051c8:	4910      	ldr	r1, [pc, #64]	@ (800520c <main+0xdc>)
 80051ca:	2000      	movs	r0, #0
 80051cc:	f7fb f9f8 	bl	80005c0 <addNewEntry>
	//Friday at 5:30.
	addNewEntry(0, "WEEWOO3", 6, 5, 30);
 80051d0:	231e      	movs	r3, #30
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2305      	movs	r3, #5
 80051d6:	2206      	movs	r2, #6
 80051d8:	490d      	ldr	r1, [pc, #52]	@ (8005210 <main+0xe0>)
 80051da:	2000      	movs	r0, #0
 80051dc:	f7fb f9f0 	bl	80005c0 <addNewEntry>
	//Sunday at 12:00.
	addNewEntry(0, "WEEWOO1", 0, 12, 00);
 80051e0:	2300      	movs	r3, #0
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	230c      	movs	r3, #12
 80051e6:	2200      	movs	r2, #0
 80051e8:	490a      	ldr	r1, [pc, #40]	@ (8005214 <main+0xe4>)
 80051ea:	2000      	movs	r0, #0
 80051ec:	f7fb f9e8 	bl	80005c0 <addNewEntry>

	uint8_t tx_buff [10] = {0,1,2,3,4,5,6,7,8,9};
 80051f0:	4a09      	ldr	r2, [pc, #36]	@ (8005218 <main+0xe8>)
 80051f2:	1d3b      	adds	r3, r7, #4
 80051f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80051f6:	c303      	stmia	r3!, {r0, r1}
 80051f8:	801a      	strh	r2, [r3, #0]
	systemInit();
 80051fa:	f000 fdcd 	bl	8005d98 <systemInit>
//xbeeDownloadPills();
  while (1)
  {
	  LockScreen();
 80051fe:	f7fc fb4f 	bl	80018a0 <LockScreen>
 8005202:	e7fc      	b.n	80051fe <main+0xce>
 8005204:	200006b4 	.word	0x200006b4
 8005208:	20000888 	.word	0x20000888
 800520c:	0800b5dc 	.word	0x0800b5dc
 8005210:	0800b5e4 	.word	0x0800b5e4
 8005214:	0800b5ec 	.word	0x0800b5ec
 8005218:	0800b5f4 	.word	0x0800b5f4

0800521c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b096      	sub	sp, #88	@ 0x58
 8005220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005222:	f107 0314 	add.w	r3, r7, #20
 8005226:	2244      	movs	r2, #68	@ 0x44
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f005 fb98 	bl	800a960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005230:	463b      	mov	r3, r7
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	609a      	str	r2, [r3, #8]
 800523a:	60da      	str	r2, [r3, #12]
 800523c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800523e:	2000      	movs	r0, #0
 8005240:	f002 f97c 	bl	800753c <HAL_PWREx_ControlVoltageScaling>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800524a:	f000 faeb 	bl	8005824 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800524e:	2310      	movs	r3, #16
 8005250:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005252:	2301      	movs	r3, #1
 8005254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800525a:	2360      	movs	r3, #96	@ 0x60
 800525c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800525e:	2302      	movs	r3, #2
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005262:	2301      	movs	r3, #1
 8005264:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005266:	2301      	movs	r3, #1
 8005268:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800526a:	233c      	movs	r3, #60	@ 0x3c
 800526c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800526e:	2302      	movs	r3, #2
 8005270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005272:	2302      	movs	r3, #2
 8005274:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005276:	2302      	movs	r3, #2
 8005278:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	4618      	mov	r0, r3
 8005280:	f002 fa00 	bl	8007684 <HAL_RCC_OscConfig>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800528a:	f000 facb 	bl	8005824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800528e:	230f      	movs	r3, #15
 8005290:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005292:	2303      	movs	r3, #3
 8005294:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005296:	2300      	movs	r3, #0
 8005298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80052a2:	463b      	mov	r3, r7
 80052a4:	2105      	movs	r1, #5
 80052a6:	4618      	mov	r0, r3
 80052a8:	f002 fe06 	bl	8007eb8 <HAL_RCC_ClockConfig>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80052b2:	f000 fab7 	bl	8005824 <Error_Handler>
  }
}
 80052b6:	bf00      	nop
 80052b8:	3758      	adds	r7, #88	@ 0x58
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80052c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <MX_I2C1_Init+0x78>)
 80052c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80052ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052cc:	4a1b      	ldr	r2, [pc, #108]	@ (800533c <MX_I2C1_Init+0x7c>)
 80052ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80052d0:	4b18      	ldr	r3, [pc, #96]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052d6:	4b17      	ldr	r3, [pc, #92]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052d8:	2201      	movs	r2, #1
 80052da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052dc:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80052e2:	4b14      	ldr	r3, [pc, #80]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80052e8:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052ee:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052fa:	480e      	ldr	r0, [pc, #56]	@ (8005334 <MX_I2C1_Init+0x74>)
 80052fc:	f001 fb2a 	bl	8006954 <HAL_I2C_Init>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005306:	f000 fa8d 	bl	8005824 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800530a:	2100      	movs	r1, #0
 800530c:	4809      	ldr	r0, [pc, #36]	@ (8005334 <MX_I2C1_Init+0x74>)
 800530e:	f002 f85d 	bl	80073cc <HAL_I2CEx_ConfigAnalogFilter>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005318:	f000 fa84 	bl	8005824 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800531c:	2100      	movs	r1, #0
 800531e:	4805      	ldr	r0, [pc, #20]	@ (8005334 <MX_I2C1_Init+0x74>)
 8005320:	f002 f89f 	bl	8007462 <HAL_I2CEx_ConfigDigitalFilter>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800532a:	f000 fa7b 	bl	8005824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800532e:	bf00      	nop
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	200006b4 	.word	0x200006b4
 8005338:	40005400 	.word	0x40005400
 800533c:	307075b1 	.word	0x307075b1

08005340 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005344:	4b1b      	ldr	r3, [pc, #108]	@ (80053b4 <MX_I2C2_Init+0x74>)
 8005346:	4a1c      	ldr	r2, [pc, #112]	@ (80053b8 <MX_I2C2_Init+0x78>)
 8005348:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800534a:	4b1a      	ldr	r3, [pc, #104]	@ (80053b4 <MX_I2C2_Init+0x74>)
 800534c:	4a1b      	ldr	r2, [pc, #108]	@ (80053bc <MX_I2C2_Init+0x7c>)
 800534e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005350:	4b18      	ldr	r3, [pc, #96]	@ (80053b4 <MX_I2C2_Init+0x74>)
 8005352:	2200      	movs	r2, #0
 8005354:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005356:	4b17      	ldr	r3, [pc, #92]	@ (80053b4 <MX_I2C2_Init+0x74>)
 8005358:	2201      	movs	r2, #1
 800535a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800535c:	4b15      	ldr	r3, [pc, #84]	@ (80053b4 <MX_I2C2_Init+0x74>)
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005362:	4b14      	ldr	r3, [pc, #80]	@ (80053b4 <MX_I2C2_Init+0x74>)
 8005364:	2200      	movs	r2, #0
 8005366:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005368:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <MX_I2C2_Init+0x74>)
 800536a:	2200      	movs	r2, #0
 800536c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800536e:	4b11      	ldr	r3, [pc, #68]	@ (80053b4 <MX_I2C2_Init+0x74>)
 8005370:	2200      	movs	r2, #0
 8005372:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005374:	4b0f      	ldr	r3, [pc, #60]	@ (80053b4 <MX_I2C2_Init+0x74>)
 8005376:	2200      	movs	r2, #0
 8005378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800537a:	480e      	ldr	r0, [pc, #56]	@ (80053b4 <MX_I2C2_Init+0x74>)
 800537c:	f001 faea 	bl	8006954 <HAL_I2C_Init>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005386:	f000 fa4d 	bl	8005824 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800538a:	2100      	movs	r1, #0
 800538c:	4809      	ldr	r0, [pc, #36]	@ (80053b4 <MX_I2C2_Init+0x74>)
 800538e:	f002 f81d 	bl	80073cc <HAL_I2CEx_ConfigAnalogFilter>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005398:	f000 fa44 	bl	8005824 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800539c:	2100      	movs	r1, #0
 800539e:	4805      	ldr	r0, [pc, #20]	@ (80053b4 <MX_I2C2_Init+0x74>)
 80053a0:	f002 f85f 	bl	8007462 <HAL_I2CEx_ConfigDigitalFilter>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80053aa:	f000 fa3b 	bl	8005824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80053ae:	bf00      	nop
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000708 	.word	0x20000708
 80053b8:	40005800 	.word	0x40005800
 80053bc:	307075b1 	.word	0x307075b1

080053c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80053c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005434 <MX_SPI1_Init+0x74>)
 80053c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005438 <MX_SPI1_Init+0x78>)
 80053c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80053ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005434 <MX_SPI1_Init+0x74>)
 80053cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80053d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80053d2:	4b18      	ldr	r3, [pc, #96]	@ (8005434 <MX_SPI1_Init+0x74>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80053d8:	4b16      	ldr	r3, [pc, #88]	@ (8005434 <MX_SPI1_Init+0x74>)
 80053da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80053de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80053e0:	4b14      	ldr	r3, [pc, #80]	@ (8005434 <MX_SPI1_Init+0x74>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80053e6:	4b13      	ldr	r3, [pc, #76]	@ (8005434 <MX_SPI1_Init+0x74>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80053ec:	4b11      	ldr	r3, [pc, #68]	@ (8005434 <MX_SPI1_Init+0x74>)
 80053ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005434 <MX_SPI1_Init+0x74>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005434 <MX_SPI1_Init+0x74>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005400:	4b0c      	ldr	r3, [pc, #48]	@ (8005434 <MX_SPI1_Init+0x74>)
 8005402:	2200      	movs	r2, #0
 8005404:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005406:	4b0b      	ldr	r3, [pc, #44]	@ (8005434 <MX_SPI1_Init+0x74>)
 8005408:	2200      	movs	r2, #0
 800540a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800540c:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <MX_SPI1_Init+0x74>)
 800540e:	2207      	movs	r2, #7
 8005410:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005412:	4b08      	ldr	r3, [pc, #32]	@ (8005434 <MX_SPI1_Init+0x74>)
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005418:	4b06      	ldr	r3, [pc, #24]	@ (8005434 <MX_SPI1_Init+0x74>)
 800541a:	2208      	movs	r2, #8
 800541c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800541e:	4805      	ldr	r0, [pc, #20]	@ (8005434 <MX_SPI1_Init+0x74>)
 8005420:	f003 fd20 	bl	8008e64 <HAL_SPI_Init>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800542a:	f000 f9fb 	bl	8005824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	2000075c 	.word	0x2000075c
 8005438:	40013000 	.word	0x40013000

0800543c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005440:	4b1b      	ldr	r3, [pc, #108]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005442:	4a1c      	ldr	r2, [pc, #112]	@ (80054b4 <MX_SPI2_Init+0x78>)
 8005444:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005446:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800544c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800544e:	4b18      	ldr	r3, [pc, #96]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005454:	4b16      	ldr	r3, [pc, #88]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005456:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800545a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800545c:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <MX_SPI2_Init+0x74>)
 800545e:	2200      	movs	r2, #0
 8005460:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005462:	4b13      	ldr	r3, [pc, #76]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005464:	2200      	movs	r2, #0
 8005466:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005468:	4b11      	ldr	r3, [pc, #68]	@ (80054b0 <MX_SPI2_Init+0x74>)
 800546a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800546e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005470:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005472:	2200      	movs	r2, #0
 8005474:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005476:	4b0e      	ldr	r3, [pc, #56]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005478:	2200      	movs	r2, #0
 800547a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800547c:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <MX_SPI2_Init+0x74>)
 800547e:	2200      	movs	r2, #0
 8005480:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005482:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005484:	2200      	movs	r2, #0
 8005486:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005488:	4b09      	ldr	r3, [pc, #36]	@ (80054b0 <MX_SPI2_Init+0x74>)
 800548a:	2207      	movs	r2, #7
 800548c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800548e:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005494:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <MX_SPI2_Init+0x74>)
 8005496:	2208      	movs	r2, #8
 8005498:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800549a:	4805      	ldr	r0, [pc, #20]	@ (80054b0 <MX_SPI2_Init+0x74>)
 800549c:	f003 fce2 	bl	8008e64 <HAL_SPI_Init>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80054a6:	f000 f9bd 	bl	8005824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	200007c0 	.word	0x200007c0
 80054b4:	40003800 	.word	0x40003800

080054b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80054bc:	4b1b      	ldr	r3, [pc, #108]	@ (800552c <MX_SPI3_Init+0x74>)
 80054be:	4a1c      	ldr	r2, [pc, #112]	@ (8005530 <MX_SPI3_Init+0x78>)
 80054c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80054c2:	4b1a      	ldr	r3, [pc, #104]	@ (800552c <MX_SPI3_Init+0x74>)
 80054c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80054c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80054ca:	4b18      	ldr	r3, [pc, #96]	@ (800552c <MX_SPI3_Init+0x74>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80054d0:	4b16      	ldr	r3, [pc, #88]	@ (800552c <MX_SPI3_Init+0x74>)
 80054d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80054d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80054d8:	4b14      	ldr	r3, [pc, #80]	@ (800552c <MX_SPI3_Init+0x74>)
 80054da:	2200      	movs	r2, #0
 80054dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80054de:	4b13      	ldr	r3, [pc, #76]	@ (800552c <MX_SPI3_Init+0x74>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80054e4:	4b11      	ldr	r3, [pc, #68]	@ (800552c <MX_SPI3_Init+0x74>)
 80054e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80054ec:	4b0f      	ldr	r3, [pc, #60]	@ (800552c <MX_SPI3_Init+0x74>)
 80054ee:	2218      	movs	r2, #24
 80054f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80054f2:	4b0e      	ldr	r3, [pc, #56]	@ (800552c <MX_SPI3_Init+0x74>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80054f8:	4b0c      	ldr	r3, [pc, #48]	@ (800552c <MX_SPI3_Init+0x74>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054fe:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <MX_SPI3_Init+0x74>)
 8005500:	2200      	movs	r2, #0
 8005502:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005504:	4b09      	ldr	r3, [pc, #36]	@ (800552c <MX_SPI3_Init+0x74>)
 8005506:	2207      	movs	r2, #7
 8005508:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800550a:	4b08      	ldr	r3, [pc, #32]	@ (800552c <MX_SPI3_Init+0x74>)
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005510:	4b06      	ldr	r3, [pc, #24]	@ (800552c <MX_SPI3_Init+0x74>)
 8005512:	2208      	movs	r2, #8
 8005514:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005516:	4805      	ldr	r0, [pc, #20]	@ (800552c <MX_SPI3_Init+0x74>)
 8005518:	f003 fca4 	bl	8008e64 <HAL_SPI_Init>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8005522:	f000 f97f 	bl	8005824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000824 	.word	0x20000824
 8005530:	40003c00 	.word	0x40003c00

08005534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005538:	4b22      	ldr	r3, [pc, #136]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 800553a:	4a23      	ldr	r2, [pc, #140]	@ (80055c8 <MX_USART2_UART_Init+0x94>)
 800553c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800553e:	4b21      	ldr	r3, [pc, #132]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 8005540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005546:	4b1f      	ldr	r3, [pc, #124]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 8005548:	2200      	movs	r2, #0
 800554a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800554c:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 800554e:	2200      	movs	r2, #0
 8005550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005552:	4b1c      	ldr	r3, [pc, #112]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 8005554:	2200      	movs	r2, #0
 8005556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005558:	4b1a      	ldr	r3, [pc, #104]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 800555a:	220c      	movs	r2, #12
 800555c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800555e:	4b19      	ldr	r3, [pc, #100]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 8005560:	2200      	movs	r2, #0
 8005562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005564:	4b17      	ldr	r3, [pc, #92]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 8005566:	2200      	movs	r2, #0
 8005568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800556a:	4b16      	ldr	r3, [pc, #88]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 800556c:	2200      	movs	r2, #0
 800556e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005570:	4b14      	ldr	r3, [pc, #80]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 8005572:	2200      	movs	r2, #0
 8005574:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005576:	4b13      	ldr	r3, [pc, #76]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 8005578:	2200      	movs	r2, #0
 800557a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800557c:	4811      	ldr	r0, [pc, #68]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 800557e:	f004 fa0f 	bl	80099a0 <HAL_UART_Init>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005588:	f000 f94c 	bl	8005824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800558c:	2100      	movs	r1, #0
 800558e:	480d      	ldr	r0, [pc, #52]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 8005590:	f005 f8fc 	bl	800a78c <HAL_UARTEx_SetTxFifoThreshold>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800559a:	f000 f943 	bl	8005824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800559e:	2100      	movs	r1, #0
 80055a0:	4808      	ldr	r0, [pc, #32]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 80055a2:	f005 f931 	bl	800a808 <HAL_UARTEx_SetRxFifoThreshold>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80055ac:	f000 f93a 	bl	8005824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80055b0:	4804      	ldr	r0, [pc, #16]	@ (80055c4 <MX_USART2_UART_Init+0x90>)
 80055b2:	f005 f8b2 	bl	800a71a <HAL_UARTEx_DisableFifoMode>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80055bc:	f000 f932 	bl	8005824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80055c0:	bf00      	nop
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000888 	.word	0x20000888
 80055c8:	40004400 	.word	0x40004400

080055cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80055d0:	4b22      	ldr	r3, [pc, #136]	@ (800565c <MX_USART3_UART_Init+0x90>)
 80055d2:	4a23      	ldr	r2, [pc, #140]	@ (8005660 <MX_USART3_UART_Init+0x94>)
 80055d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80055d6:	4b21      	ldr	r3, [pc, #132]	@ (800565c <MX_USART3_UART_Init+0x90>)
 80055d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80055dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80055de:	4b1f      	ldr	r3, [pc, #124]	@ (800565c <MX_USART3_UART_Init+0x90>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80055e4:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <MX_USART3_UART_Init+0x90>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80055ea:	4b1c      	ldr	r3, [pc, #112]	@ (800565c <MX_USART3_UART_Init+0x90>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80055f0:	4b1a      	ldr	r3, [pc, #104]	@ (800565c <MX_USART3_UART_Init+0x90>)
 80055f2:	220c      	movs	r2, #12
 80055f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055f6:	4b19      	ldr	r3, [pc, #100]	@ (800565c <MX_USART3_UART_Init+0x90>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80055fc:	4b17      	ldr	r3, [pc, #92]	@ (800565c <MX_USART3_UART_Init+0x90>)
 80055fe:	2200      	movs	r2, #0
 8005600:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005602:	4b16      	ldr	r3, [pc, #88]	@ (800565c <MX_USART3_UART_Init+0x90>)
 8005604:	2200      	movs	r2, #0
 8005606:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005608:	4b14      	ldr	r3, [pc, #80]	@ (800565c <MX_USART3_UART_Init+0x90>)
 800560a:	2200      	movs	r2, #0
 800560c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800560e:	4b13      	ldr	r3, [pc, #76]	@ (800565c <MX_USART3_UART_Init+0x90>)
 8005610:	2200      	movs	r2, #0
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005614:	4811      	ldr	r0, [pc, #68]	@ (800565c <MX_USART3_UART_Init+0x90>)
 8005616:	f004 f9c3 	bl	80099a0 <HAL_UART_Init>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005620:	f000 f900 	bl	8005824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005624:	2100      	movs	r1, #0
 8005626:	480d      	ldr	r0, [pc, #52]	@ (800565c <MX_USART3_UART_Init+0x90>)
 8005628:	f005 f8b0 	bl	800a78c <HAL_UARTEx_SetTxFifoThreshold>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005632:	f000 f8f7 	bl	8005824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005636:	2100      	movs	r1, #0
 8005638:	4808      	ldr	r0, [pc, #32]	@ (800565c <MX_USART3_UART_Init+0x90>)
 800563a:	f005 f8e5 	bl	800a808 <HAL_UARTEx_SetRxFifoThreshold>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005644:	f000 f8ee 	bl	8005824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005648:	4804      	ldr	r0, [pc, #16]	@ (800565c <MX_USART3_UART_Init+0x90>)
 800564a:	f005 f866 	bl	800a71a <HAL_UARTEx_DisableFifoMode>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005654:	f000 f8e6 	bl	8005824 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005658:	bf00      	nop
 800565a:	bd80      	pop	{r7, pc}
 800565c:	2000091c 	.word	0x2000091c
 8005660:	40004800 	.word	0x40004800

08005664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08c      	sub	sp, #48	@ 0x30
 8005668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800566a:	f107 031c 	add.w	r3, r7, #28
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	609a      	str	r2, [r3, #8]
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800567a:	4b64      	ldr	r3, [pc, #400]	@ (800580c <MX_GPIO_Init+0x1a8>)
 800567c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800567e:	4a63      	ldr	r2, [pc, #396]	@ (800580c <MX_GPIO_Init+0x1a8>)
 8005680:	f043 0320 	orr.w	r3, r3, #32
 8005684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005686:	4b61      	ldr	r3, [pc, #388]	@ (800580c <MX_GPIO_Init+0x1a8>)
 8005688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005692:	4b5e      	ldr	r3, [pc, #376]	@ (800580c <MX_GPIO_Init+0x1a8>)
 8005694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005696:	4a5d      	ldr	r2, [pc, #372]	@ (800580c <MX_GPIO_Init+0x1a8>)
 8005698:	f043 0304 	orr.w	r3, r3, #4
 800569c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800569e:	4b5b      	ldr	r3, [pc, #364]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056aa:	4b58      	ldr	r3, [pc, #352]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ae:	4a57      	ldr	r2, [pc, #348]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056b6:	4b55      	ldr	r3, [pc, #340]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80056c2:	4b52      	ldr	r3, [pc, #328]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c6:	4a51      	ldr	r2, [pc, #324]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056c8:	f043 0310 	orr.w	r3, r3, #16
 80056cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056ce:	4b4f      	ldr	r3, [pc, #316]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056da:	4b4c      	ldr	r3, [pc, #304]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056de:	4a4b      	ldr	r2, [pc, #300]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056e6:	4b49      	ldr	r3, [pc, #292]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056f2:	4b46      	ldr	r3, [pc, #280]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056f6:	4a45      	ldr	r2, [pc, #276]	@ (800580c <MX_GPIO_Init+0x1a8>)
 80056f8:	f043 0308 	orr.w	r3, r3, #8
 80056fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056fe:	4b43      	ldr	r3, [pc, #268]	@ (800580c <MX_GPIO_Init+0x1a8>)
 8005700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Actuator1_IN1_Pin|Actuaor1_IN2_Pin|Actuator2_IN1_Pin|Actuator3_In1_Pin
 800570a:	2200      	movs	r2, #0
 800570c:	f24e 0128 	movw	r1, #57384	@ 0xe028
 8005710:	483f      	ldr	r0, [pc, #252]	@ (8005810 <MX_GPIO_Init+0x1ac>)
 8005712:	f001 f907 	bl	8006924 <HAL_GPIO_WritePin>
                          |Actuator_3_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin, GPIO_PIN_RESET);
 8005716:	2200      	movs	r2, #0
 8005718:	f240 2103 	movw	r1, #515	@ 0x203
 800571c:	483d      	ldr	r0, [pc, #244]	@ (8005814 <MX_GPIO_Init+0x1b0>)
 800571e:	f001 f901 	bl	8006924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pixy_CS_GPIO_Port, Pixy_CS_Pin, GPIO_PIN_RESET);
 8005722:	2200      	movs	r2, #0
 8005724:	2110      	movs	r1, #16
 8005726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800572a:	f001 f8fb 	bl	8006924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Actuator2_IN2_Pin|Actuator2_En_Pin|Actuator_3_In2_Pin, GPIO_PIN_RESET);
 800572e:	2200      	movs	r2, #0
 8005730:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 8005734:	4838      	ldr	r0, [pc, #224]	@ (8005818 <MX_GPIO_Init+0x1b4>)
 8005736:	f001 f8f5 	bl	8006924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800573a:	2201      	movs	r2, #1
 800573c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005740:	4836      	ldr	r0, [pc, #216]	@ (800581c <MX_GPIO_Init+0x1b8>)
 8005742:	f001 f8ef 	bl	8006924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8005746:	2200      	movs	r2, #0
 8005748:	21c1      	movs	r1, #193	@ 0xc1
 800574a:	4835      	ldr	r0, [pc, #212]	@ (8005820 <MX_GPIO_Init+0x1bc>)
 800574c:	f001 f8ea 	bl	8006924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Actuator1_IN1_Pin Actuaor1_IN2_Pin Actuator2_IN1_Pin Actuator3_In1_Pin
                           Actuator_3_EN_Pin */
  GPIO_InitStruct.Pin = Actuator1_IN1_Pin|Actuaor1_IN2_Pin|Actuator2_IN1_Pin|Actuator3_In1_Pin
 8005750:	f24e 0328 	movw	r3, #57384	@ 0xe028
 8005754:	61fb      	str	r3, [r7, #28]
                          |Actuator_3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005756:	2301      	movs	r3, #1
 8005758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575a:	2300      	movs	r3, #0
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800575e:	2300      	movs	r3, #0
 8005760:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005762:	f107 031c 	add.w	r3, r7, #28
 8005766:	4619      	mov	r1, r3
 8005768:	4829      	ldr	r0, [pc, #164]	@ (8005810 <MX_GPIO_Init+0x1ac>)
 800576a:	f000 ff49 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper_Step_Pin Stepper_Dir_Pin Actuator_1_EN_Pin */
  GPIO_InitStruct.Pin = Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin;
 800576e:	f240 2303 	movw	r3, #515	@ 0x203
 8005772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005774:	2301      	movs	r3, #1
 8005776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005778:	2300      	movs	r3, #0
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800577c:	2300      	movs	r3, #0
 800577e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005780:	f107 031c 	add.w	r3, r7, #28
 8005784:	4619      	mov	r1, r3
 8005786:	4823      	ldr	r0, [pc, #140]	@ (8005814 <MX_GPIO_Init+0x1b0>)
 8005788:	f000 ff3a 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pixy_CS_Pin */
  GPIO_InitStruct.Pin = Pixy_CS_Pin;
 800578c:	2310      	movs	r3, #16
 800578e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005790:	2301      	movs	r3, #1
 8005792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005794:	2300      	movs	r3, #0
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005798:	2300      	movs	r3, #0
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Pixy_CS_GPIO_Port, &GPIO_InitStruct);
 800579c:	f107 031c 	add.w	r3, r7, #28
 80057a0:	4619      	mov	r1, r3
 80057a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80057a6:	f000 ff2b 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator2_IN2_Pin Actuator2_En_Pin Actuator_3_In2_Pin */
  GPIO_InitStruct.Pin = Actuator2_IN2_Pin|Actuator2_En_Pin|Actuator_3_In2_Pin;
 80057aa:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 80057ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057b0:	2301      	movs	r3, #1
 80057b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057b8:	2300      	movs	r3, #0
 80057ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057bc:	f107 031c 	add.w	r3, r7, #28
 80057c0:	4619      	mov	r1, r3
 80057c2:	4815      	ldr	r0, [pc, #84]	@ (8005818 <MX_GPIO_Init+0x1b4>)
 80057c4:	f000 ff1c 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80057c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057ce:	2301      	movs	r3, #1
 80057d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d6:	2300      	movs	r3, #0
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80057da:	f107 031c 	add.w	r3, r7, #28
 80057de:	4619      	mov	r1, r3
 80057e0:	480e      	ldr	r0, [pc, #56]	@ (800581c <MX_GPIO_Init+0x1b8>)
 80057e2:	f000 ff0d 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 80057e6:	23c1      	movs	r3, #193	@ 0xc1
 80057e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057ea:	2301      	movs	r3, #1
 80057ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f2:	2300      	movs	r3, #0
 80057f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057f6:	f107 031c 	add.w	r3, r7, #28
 80057fa:	4619      	mov	r1, r3
 80057fc:	4808      	ldr	r0, [pc, #32]	@ (8005820 <MX_GPIO_Init+0x1bc>)
 80057fe:	f000 feff 	bl	8006600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005802:	bf00      	nop
 8005804:	3730      	adds	r7, #48	@ 0x30
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000
 8005810:	48001400 	.word	0x48001400
 8005814:	48000800 	.word	0x48000800
 8005818:	48001000 	.word	0x48001000
 800581c:	48000400 	.word	0x48000400
 8005820:	48000c00 	.word	0x48000c00

08005824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005828:	b672      	cpsid	i
}
 800582a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800582c:	e7fe      	b.n	800582c <Error_Handler+0x8>
	...

08005830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005836:	4b0f      	ldr	r3, [pc, #60]	@ (8005874 <HAL_MspInit+0x44>)
 8005838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800583a:	4a0e      	ldr	r2, [pc, #56]	@ (8005874 <HAL_MspInit+0x44>)
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	6613      	str	r3, [r2, #96]	@ 0x60
 8005842:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <HAL_MspInit+0x44>)
 8005844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <HAL_MspInit+0x44>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	4a08      	ldr	r2, [pc, #32]	@ (8005874 <HAL_MspInit+0x44>)
 8005854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005858:	6593      	str	r3, [r2, #88]	@ 0x58
 800585a:	4b06      	ldr	r3, [pc, #24]	@ (8005874 <HAL_MspInit+0x44>)
 800585c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800585e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40021000 	.word	0x40021000

08005878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b0b0      	sub	sp, #192	@ 0xc0
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005880:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	609a      	str	r2, [r3, #8]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005890:	f107 0318 	add.w	r3, r7, #24
 8005894:	2294      	movs	r2, #148	@ 0x94
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f005 f861 	bl	800a960 <memset>
  if(hi2c->Instance==I2C1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a42      	ldr	r2, [pc, #264]	@ (80059ac <HAL_I2C_MspInit+0x134>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d13c      	bne.n	8005922 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80058a8:	2340      	movs	r3, #64	@ 0x40
 80058aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80058ac:	2300      	movs	r3, #0
 80058ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058b0:	f107 0318 	add.w	r3, r7, #24
 80058b4:	4618      	mov	r0, r3
 80058b6:	f002 fdbd 	bl	8008434 <HAL_RCCEx_PeriphCLKConfig>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80058c0:	f7ff ffb0 	bl	8005824 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058c4:	4b3a      	ldr	r3, [pc, #232]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 80058c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c8:	4a39      	ldr	r2, [pc, #228]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 80058ca:	f043 0302 	orr.w	r3, r3, #2
 80058ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058d0:	4b37      	ldr	r3, [pc, #220]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 80058d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80058dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80058e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058e4:	2312      	movs	r3, #18
 80058e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f0:	2303      	movs	r3, #3
 80058f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80058f6:	2304      	movs	r3, #4
 80058f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005900:	4619      	mov	r1, r3
 8005902:	482c      	ldr	r0, [pc, #176]	@ (80059b4 <HAL_I2C_MspInit+0x13c>)
 8005904:	f000 fe7c 	bl	8006600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005908:	4b29      	ldr	r3, [pc, #164]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 800590a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590c:	4a28      	ldr	r2, [pc, #160]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 800590e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005912:	6593      	str	r3, [r2, #88]	@ 0x58
 8005914:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005920:	e03f      	b.n	80059a2 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a24      	ldr	r2, [pc, #144]	@ (80059b8 <HAL_I2C_MspInit+0x140>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d13a      	bne.n	80059a2 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005930:	2300      	movs	r3, #0
 8005932:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005934:	f107 0318 	add.w	r3, r7, #24
 8005938:	4618      	mov	r0, r3
 800593a:	f002 fd7b 	bl	8008434 <HAL_RCCEx_PeriphCLKConfig>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8005944:	f7ff ff6e 	bl	8005824 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005948:	4b19      	ldr	r3, [pc, #100]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 800594a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594c:	4a18      	ldr	r2, [pc, #96]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 800594e:	f043 0320 	orr.w	r3, r3, #32
 8005952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005954:	4b16      	ldr	r3, [pc, #88]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 8005956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005960:	2303      	movs	r3, #3
 8005962:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005966:	2312      	movs	r3, #18
 8005968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800596c:	2301      	movs	r3, #1
 800596e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005972:	2303      	movs	r3, #3
 8005974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005978:	2304      	movs	r3, #4
 800597a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800597e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005982:	4619      	mov	r1, r3
 8005984:	480d      	ldr	r0, [pc, #52]	@ (80059bc <HAL_I2C_MspInit+0x144>)
 8005986:	f000 fe3b 	bl	8006600 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800598a:	4b09      	ldr	r3, [pc, #36]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 800598c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598e:	4a08      	ldr	r2, [pc, #32]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 8005990:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005994:	6593      	str	r3, [r2, #88]	@ 0x58
 8005996:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <HAL_I2C_MspInit+0x138>)
 8005998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800599e:	60bb      	str	r3, [r7, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
}
 80059a2:	bf00      	nop
 80059a4:	37c0      	adds	r7, #192	@ 0xc0
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40005400 	.word	0x40005400
 80059b0:	40021000 	.word	0x40021000
 80059b4:	48000400 	.word	0x48000400
 80059b8:	40005800 	.word	0x40005800
 80059bc:	48001400 	.word	0x48001400

080059c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	@ 0x38
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a45      	ldr	r2, [pc, #276]	@ (8005af4 <HAL_SPI_MspInit+0x134>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d129      	bne.n	8005a36 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80059e2:	4b45      	ldr	r3, [pc, #276]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 80059e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e6:	4a44      	ldr	r2, [pc, #272]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 80059e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80059ee:	4b42      	ldr	r3, [pc, #264]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 80059f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059fa:	4b3f      	ldr	r3, [pc, #252]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 80059fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fe:	4a3e      	ldr	r2, [pc, #248]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a06:	4b3c      	ldr	r3, [pc, #240]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005a12:	23e0      	movs	r3, #224	@ 0xe0
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a16:	2302      	movs	r3, #2
 8005a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a22:	2305      	movs	r3, #5
 8005a24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a30:	f000 fde6 	bl	8006600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005a34:	e05a      	b.n	8005aec <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a30      	ldr	r2, [pc, #192]	@ (8005afc <HAL_SPI_MspInit+0x13c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d128      	bne.n	8005a92 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a40:	4b2d      	ldr	r3, [pc, #180]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a44:	4a2c      	ldr	r2, [pc, #176]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a58:	4b27      	ldr	r3, [pc, #156]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a5c:	4a26      	ldr	r2, [pc, #152]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005a5e:	f043 0308 	orr.w	r3, r3, #8
 8005a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a64:	4b24      	ldr	r3, [pc, #144]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8005a70:	231a      	movs	r3, #26
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a74:	2302      	movs	r3, #2
 8005a76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a80:	2305      	movs	r3, #5
 8005a82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a88:	4619      	mov	r1, r3
 8005a8a:	481d      	ldr	r0, [pc, #116]	@ (8005b00 <HAL_SPI_MspInit+0x140>)
 8005a8c:	f000 fdb8 	bl	8006600 <HAL_GPIO_Init>
}
 8005a90:	e02c      	b.n	8005aec <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI3)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1b      	ldr	r2, [pc, #108]	@ (8005b04 <HAL_SPI_MspInit+0x144>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d127      	bne.n	8005aec <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005a9c:	4b16      	ldr	r3, [pc, #88]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa0:	4a15      	ldr	r2, [pc, #84]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aa8:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ab4:	4b10      	ldr	r3, [pc, #64]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005aba:	f043 0302 	orr.w	r3, r3, #2
 8005abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <HAL_SPI_MspInit+0x138>)
 8005ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005acc:	2338      	movs	r3, #56	@ 0x38
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005adc:	2306      	movs	r3, #6
 8005ade:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4808      	ldr	r0, [pc, #32]	@ (8005b08 <HAL_SPI_MspInit+0x148>)
 8005ae8:	f000 fd8a 	bl	8006600 <HAL_GPIO_Init>
}
 8005aec:	bf00      	nop
 8005aee:	3738      	adds	r7, #56	@ 0x38
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40013000 	.word	0x40013000
 8005af8:	40021000 	.word	0x40021000
 8005afc:	40003800 	.word	0x40003800
 8005b00:	48000c00 	.word	0x48000c00
 8005b04:	40003c00 	.word	0x40003c00
 8005b08:	48000400 	.word	0x48000400

08005b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b0b2      	sub	sp, #200	@ 0xc8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b14:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b24:	f107 0320 	add.w	r3, r7, #32
 8005b28:	2294      	movs	r2, #148	@ 0x94
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f004 ff17 	bl	800a960 <memset>
  if(huart->Instance==USART2)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a53      	ldr	r2, [pc, #332]	@ (8005c84 <HAL_UART_MspInit+0x178>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d15d      	bne.n	8005bf8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005b40:	2300      	movs	r3, #0
 8005b42:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b44:	f107 0320 	add.w	r3, r7, #32
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f002 fc73 	bl	8008434 <HAL_RCCEx_PeriphCLKConfig>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005b54:	f7ff fe66 	bl	8005824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b58:	4b4b      	ldr	r3, [pc, #300]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b64:	4b48      	ldr	r3, [pc, #288]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b70:	4b45      	ldr	r3, [pc, #276]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b74:	4a44      	ldr	r2, [pc, #272]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b7c:	4b42      	ldr	r3, [pc, #264]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b88:	4b3f      	ldr	r3, [pc, #252]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8c:	4a3e      	ldr	r2, [pc, #248]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005b8e:	f043 0308 	orr.w	r3, r3, #8
 8005b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b94:	4b3c      	ldr	r3, [pc, #240]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bb8:	2307      	movs	r3, #7
 8005bba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bbe:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005bc8:	f000 fd1a 	bl	8006600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005bcc:	2320      	movs	r3, #32
 8005bce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bde:	2303      	movs	r3, #3
 8005be0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005be4:	2307      	movs	r3, #7
 8005be6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bea:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4826      	ldr	r0, [pc, #152]	@ (8005c8c <HAL_UART_MspInit+0x180>)
 8005bf2:	f000 fd05 	bl	8006600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005bf6:	e040      	b.n	8005c7a <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	@ (8005c90 <HAL_UART_MspInit+0x184>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d13b      	bne.n	8005c7a <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005c02:	2304      	movs	r3, #4
 8005c04:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005c06:	2300      	movs	r3, #0
 8005c08:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c0a:	f107 0320 	add.w	r3, r7, #32
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f002 fc10 	bl	8008434 <HAL_RCCEx_PeriphCLKConfig>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_UART_MspInit+0x112>
      Error_Handler();
 8005c1a:	f7ff fe03 	bl	8005824 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c22:	4a19      	ldr	r2, [pc, #100]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c2a:	4b17      	ldr	r3, [pc, #92]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c36:	4b14      	ldr	r3, [pc, #80]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c3a:	4a13      	ldr	r2, [pc, #76]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005c3c:	f043 0308 	orr.w	r3, r3, #8
 8005c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c42:	4b11      	ldr	r3, [pc, #68]	@ (8005c88 <HAL_UART_MspInit+0x17c>)
 8005c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005c4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005c52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c56:	2302      	movs	r3, #2
 8005c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c62:	2303      	movs	r3, #3
 8005c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c68:	2307      	movs	r3, #7
 8005c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c6e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8005c72:	4619      	mov	r1, r3
 8005c74:	4805      	ldr	r0, [pc, #20]	@ (8005c8c <HAL_UART_MspInit+0x180>)
 8005c76:	f000 fcc3 	bl	8006600 <HAL_GPIO_Init>
}
 8005c7a:	bf00      	nop
 8005c7c:	37c8      	adds	r7, #200	@ 0xc8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40004400 	.word	0x40004400
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	48000c00 	.word	0x48000c00
 8005c90:	40004800 	.word	0x40004800

08005c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c98:	e7fe      	b.n	8005c98 <NMI_Handler+0x4>

08005c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c9e:	e7fe      	b.n	8005c9e <HardFault_Handler+0x4>

08005ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ca4:	e7fe      	b.n	8005ca4 <MemManage_Handler+0x4>

08005ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005caa:	e7fe      	b.n	8005caa <BusFault_Handler+0x4>

08005cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cb0:	e7fe      	b.n	8005cb0 <UsageFault_Handler+0x4>

08005cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cc4:	bf00      	nop
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cd2:	bf00      	nop
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ce0:	f000 fb64 	bl	80063ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ce4:	bf00      	nop
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cf0:	4a14      	ldr	r2, [pc, #80]	@ (8005d44 <_sbrk+0x5c>)
 8005cf2:	4b15      	ldr	r3, [pc, #84]	@ (8005d48 <_sbrk+0x60>)
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005cfc:	4b13      	ldr	r3, [pc, #76]	@ (8005d4c <_sbrk+0x64>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d04:	4b11      	ldr	r3, [pc, #68]	@ (8005d4c <_sbrk+0x64>)
 8005d06:	4a12      	ldr	r2, [pc, #72]	@ (8005d50 <_sbrk+0x68>)
 8005d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d0a:	4b10      	ldr	r3, [pc, #64]	@ (8005d4c <_sbrk+0x64>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4413      	add	r3, r2
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d207      	bcs.n	8005d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d18:	f004 fe2a 	bl	800a970 <__errno>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	220c      	movs	r2, #12
 8005d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d26:	e009      	b.n	8005d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d28:	4b08      	ldr	r3, [pc, #32]	@ (8005d4c <_sbrk+0x64>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d2e:	4b07      	ldr	r3, [pc, #28]	@ (8005d4c <_sbrk+0x64>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	4a05      	ldr	r2, [pc, #20]	@ (8005d4c <_sbrk+0x64>)
 8005d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	200a0000 	.word	0x200a0000
 8005d48:	00000400 	.word	0x00000400
 8005d4c:	200009b0 	.word	0x200009b0
 8005d50:	20000b08 	.word	0x20000b08

08005d54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005d58:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <SystemInit+0x20>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5e:	4a05      	ldr	r2, [pc, #20]	@ (8005d74 <SystemInit+0x20>)
 8005d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	e000ed00 	.word	0xe000ed00

08005d78 <xbee_init>:


UART_HandleTypeDef * xbee_uart;

//Sets UART Handle for our UART Stuff.
void xbee_init(UART_HandleTypeDef * uart_handle) {
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	xbee_uart = uart_handle;
 8005d80:	4a04      	ldr	r2, [pc, #16]	@ (8005d94 <xbee_init+0x1c>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6013      	str	r3, [r2, #0]
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	200009b4 	.word	0x200009b4

08005d98 <systemInit>:

//Initial Setup w/ server. Sets correct time, receives existing pill data and configuration information from server.
void systemInit(){
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
	 xbeeGetHour();
 8005d9c:	f000 f810 	bl	8005dc0 <xbeeGetHour>
	 xbeeGetMin();
 8005da0:	f000 f832 	bl	8005e08 <xbeeGetMin>
	 xbeeGetYear();
 8005da4:	f000 f84e 	bl	8005e44 <xbeeGetYear>
	 xbeeGetDayOfWeek();
 8005da8:	f000 f870 	bl	8005e8c <xbeeGetDayOfWeek>
	 xbeeGetMonth();
 8005dac:	f000 f88c 	bl	8005ec8 <xbeeGetMonth>
	 xbeeGetSec();
 8005db0:	f000 f8a8 	bl	8005f04 <xbeeGetSec>
	 xbeeGetDate();
 8005db4:	f000 f8c4 	bl	8005f40 <xbeeGetDate>
	 xbeeDownloadPills();
 8005db8:	f000 f8e0 	bl	8005f7c <xbeeDownloadPills>
}
 8005dbc:	bf00      	nop
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <xbeeGetHour>:

	void xbeeGetHour(){
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x01;
 8005dc6:	23a1      	movs	r3, #161	@ 0xa1
 8005dc8:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8005dca:	4b0e      	ldr	r3, [pc, #56]	@ (8005e04 <xbeeGetHour+0x44>)
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	1d39      	adds	r1, r7, #4
 8005dd0:	2364      	movs	r3, #100	@ 0x64
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f003 fe34 	bl	8009a40 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <xbeeGetHour+0x44>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	4639      	mov	r1, r7
 8005dde:	2364      	movs	r3, #100	@ 0x64
 8005de0:	2201      	movs	r2, #1
 8005de2:	f003 febb 	bl	8009b5c <HAL_UART_Receive>
		DS1307_SetHour(rx_buffer[0]);
 8005de6:	783b      	ldrb	r3, [r7, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe f859 	bl	8003ea0 <DS1307_SetHour>
		uint8_t test = DS1307_GetHour();
 8005dee:	f7fd ffdc 	bl	8003daa <DS1307_GetHour>
 8005df2:	4603      	mov	r3, r0
 8005df4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(50);
 8005df6:	2032      	movs	r0, #50	@ 0x32
 8005df8:	f000 faf8 	bl	80063ec <HAL_Delay>

	}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	200009b4 	.word	0x200009b4

08005e08 <xbeeGetMin>:

	void xbeeGetMin(){
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x02;
 8005e0e:	23a2      	movs	r3, #162	@ 0xa2
 8005e10:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8005e12:	4b0b      	ldr	r3, [pc, #44]	@ (8005e40 <xbeeGetMin+0x38>)
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	1d39      	adds	r1, r7, #4
 8005e18:	2364      	movs	r3, #100	@ 0x64
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f003 fe10 	bl	8009a40 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8005e20:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <xbeeGetMin+0x38>)
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	4639      	mov	r1, r7
 8005e26:	2364      	movs	r3, #100	@ 0x64
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f003 fe97 	bl	8009b5c <HAL_UART_Receive>
		DS1307_SetMinute(rx_buffer[0]);
 8005e2e:	783b      	ldrb	r3, [r7, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe f84a 	bl	8003eca <DS1307_SetMinute>
	}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	200009b4 	.word	0x200009b4

08005e44 <xbeeGetYear>:
	void xbeeGetYear(){
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x05;
 8005e4a:	23a5      	movs	r3, #165	@ 0xa5
 8005e4c:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [2];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e88 <xbeeGetYear+0x44>)
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	1d39      	adds	r1, r7, #4
 8005e54:	2364      	movs	r3, #100	@ 0x64
 8005e56:	2201      	movs	r2, #1
 8005e58:	f003 fdf2 	bl	8009a40 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 2, 100);
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <xbeeGetYear+0x44>)
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	4639      	mov	r1, r7
 8005e62:	2364      	movs	r3, #100	@ 0x64
 8005e64:	2202      	movs	r2, #2
 8005e66:	f003 fe79 	bl	8009b5c <HAL_UART_Receive>
		DS1307_SetYear((rx_buffer[0] << 8) | rx_buffer[1]);
 8005e6a:	783b      	ldrb	r3, [r7, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	b21a      	sxth	r2, r3
 8005e70:	787b      	ldrb	r3, [r7, #1]
 8005e72:	b21b      	sxth	r3, r3
 8005e74:	4313      	orrs	r3, r2
 8005e76:	b21b      	sxth	r3, r3
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fd ffe6 	bl	8003e4c <DS1307_SetYear>
	}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	200009b4 	.word	0x200009b4

08005e8c <xbeeGetDayOfWeek>:
	void xbeeGetDayOfWeek(){
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x08;
 8005e92:	23a8      	movs	r3, #168	@ 0xa8
 8005e94:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8005e96:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec4 <xbeeGetDayOfWeek+0x38>)
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	1d39      	adds	r1, r7, #4
 8005e9c:	2364      	movs	r3, #100	@ 0x64
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f003 fdce 	bl	8009a40 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8005ea4:	4b07      	ldr	r3, [pc, #28]	@ (8005ec4 <xbeeGetDayOfWeek+0x38>)
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	2364      	movs	r3, #100	@ 0x64
 8005eac:	2201      	movs	r2, #1
 8005eae:	f003 fe55 	bl	8009b5c <HAL_UART_Receive>
		DS1307_SetDayOfWeek(rx_buffer[0]);
 8005eb2:	783b      	ldrb	r3, [r7, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fd ff93 	bl	8003de0 <DS1307_SetDayOfWeek>
	}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	200009b4 	.word	0x200009b4

08005ec8 <xbeeGetMonth>:
	void xbeeGetMonth(){
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x06;
 8005ece:	23a6      	movs	r3, #166	@ 0xa6
 8005ed0:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8005f00 <xbeeGetMonth+0x38>)
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	1d39      	adds	r1, r7, #4
 8005ed8:	2364      	movs	r3, #100	@ 0x64
 8005eda:	2201      	movs	r2, #1
 8005edc:	f003 fdb0 	bl	8009a40 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8005ee0:	4b07      	ldr	r3, [pc, #28]	@ (8005f00 <xbeeGetMonth+0x38>)
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	2364      	movs	r3, #100	@ 0x64
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f003 fe37 	bl	8009b5c <HAL_UART_Receive>
		DS1307_SetMonth(rx_buffer[0]);
 8005eee:	783b      	ldrb	r3, [r7, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fd ff99 	bl	8003e28 <DS1307_SetMonth>
	}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200009b4 	.word	0x200009b4

08005f04 <xbeeGetSec>:

	void xbeeGetSec(){
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x03;
 8005f0a:	23a3      	movs	r3, #163	@ 0xa3
 8005f0c:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8005f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f3c <xbeeGetSec+0x38>)
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	1d39      	adds	r1, r7, #4
 8005f14:	2364      	movs	r3, #100	@ 0x64
 8005f16:	2201      	movs	r2, #1
 8005f18:	f003 fd92 	bl	8009a40 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8005f1c:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <xbeeGetSec+0x38>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	4639      	mov	r1, r7
 8005f22:	2364      	movs	r3, #100	@ 0x64
 8005f24:	2201      	movs	r2, #1
 8005f26:	f003 fe19 	bl	8009b5c <HAL_UART_Receive>
		DS1307_SetSecond(rx_buffer[0]);
 8005f2a:	783b      	ldrb	r3, [r7, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fd ffde 	bl	8003eee <DS1307_SetSecond>
	}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	200009b4 	.word	0x200009b4

08005f40 <xbeeGetDate>:

	void xbeeGetDate(){
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x09;
 8005f46:	23a9      	movs	r3, #169	@ 0xa9
 8005f48:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f78 <xbeeGetDate+0x38>)
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	1d39      	adds	r1, r7, #4
 8005f50:	2364      	movs	r3, #100	@ 0x64
 8005f52:	2201      	movs	r2, #1
 8005f54:	f003 fd74 	bl	8009a40 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8005f58:	4b07      	ldr	r3, [pc, #28]	@ (8005f78 <xbeeGetDate+0x38>)
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	2364      	movs	r3, #100	@ 0x64
 8005f60:	2201      	movs	r2, #1
 8005f62:	f003 fdfb 	bl	8009b5c <HAL_UART_Receive>
		DS1307_SetDate(rx_buffer[0]);
 8005f66:	783b      	ldrb	r3, [r7, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fd ff4b 	bl	8003e04 <DS1307_SetDate>
	}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	200009b4 	.word	0x200009b4

08005f7c <xbeeDownloadPills>:
void xbeeUploadPills(){

}


void xbeeDownloadPills(){
 8005f7c:	b5b0      	push	{r4, r5, r7, lr}
 8005f7e:	b0a4      	sub	sp, #144	@ 0x90
 8005f80:	af02      	add	r7, sp, #8
	clearPillList();
 8005f82:	f7fa feaf 	bl	8000ce4 <clearPillList>
	uint8_t tx_buffer [1];
	uint8_t rx_buffer [100];
	memset(rx_buffer, 0, 100);
 8005f86:	f107 031c 	add.w	r3, r7, #28
 8005f8a:	2264      	movs	r2, #100	@ 0x64
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f004 fce6 	bl	800a960 <memset>
	tx_buffer[0] = 0xA7; //INITIATE PILL TRANSFER INFORMATION.
 8005f94:	23a7      	movs	r3, #167	@ 0xa7
 8005f96:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8005f9a:	4b31      	ldr	r3, [pc, #196]	@ (8006060 <xbeeDownloadPills+0xe4>)
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8005fa2:	2364      	movs	r3, #100	@ 0x64
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f003 fd4b 	bl	8009a40 <HAL_UART_Transmit>
	HAL_UART_Receive(xbee_uart, rx_buffer, 10, 100); //receive newNumpills
 8005faa:	4b2d      	ldr	r3, [pc, #180]	@ (8006060 <xbeeDownloadPills+0xe4>)
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	f107 011c 	add.w	r1, r7, #28
 8005fb2:	2364      	movs	r3, #100	@ 0x64
 8005fb4:	220a      	movs	r2, #10
 8005fb6:	f003 fdd1 	bl	8009b5c <HAL_UART_Receive>
	uint8_t numNewPills = rx_buffer[0];
 8005fba:	7f3b      	ldrb	r3, [r7, #28]
 8005fbc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	uint8_t i;
	for(i = 0; i < numNewPills; i++){
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005fc6:	e03f      	b.n	8006048 <xbeeDownloadPills+0xcc>
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8005fc8:	4b25      	ldr	r3, [pc, #148]	@ (8006060 <xbeeDownloadPills+0xe4>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8005fd0:	2364      	movs	r3, #100	@ 0x64
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f003 fd34 	bl	8009a40 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 29, 100);
 8005fd8:	4b21      	ldr	r3, [pc, #132]	@ (8006060 <xbeeDownloadPills+0xe4>)
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	f107 011c 	add.w	r1, r7, #28
 8005fe0:	2364      	movs	r3, #100	@ 0x64
 8005fe2:	221d      	movs	r2, #29
 8005fe4:	f003 fdba 	bl	8009b5c <HAL_UART_Receive>
		uint8_t dispenserNum = rx_buffer[0];
 8005fe8:	7f3b      	ldrb	r3, [r7, #28]
 8005fea:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		char pillName [25];
		memcpy(pillName, rx_buffer + 1, 25);
 8005fee:	f107 031c 	add.w	r3, r7, #28
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	463c      	mov	r4, r7
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	6828      	ldr	r0, [r5, #0]
 8005ffa:	6869      	ldr	r1, [r5, #4]
 8005ffc:	68aa      	ldr	r2, [r5, #8]
 8005ffe:	68eb      	ldr	r3, [r5, #12]
 8006000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006002:	6928      	ldr	r0, [r5, #16]
 8006004:	6969      	ldr	r1, [r5, #20]
 8006006:	c403      	stmia	r4!, {r0, r1}
 8006008:	7e2b      	ldrb	r3, [r5, #24]
 800600a:	7023      	strb	r3, [r4, #0]
		uint8_t dayofWeek = rx_buffer[26];
 800600c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006010:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
		uint8_t hour = rx_buffer[27];
 8006014:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006018:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		uint8_t min = rx_buffer[28];
 800601c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8006020:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		loadNewPillEntry(dispenserNum, pillName, dayofWeek, hour, min);
 8006024:	f897 4083 	ldrb.w	r4, [r7, #131]	@ 0x83
 8006028:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 800602c:	4639      	mov	r1, r7
 800602e:	f897 0085 	ldrb.w	r0, [r7, #133]	@ 0x85
 8006032:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	4623      	mov	r3, r4
 800603a:	f7fa fefd 	bl	8000e38 <loadNewPillEntry>
	for(i = 0; i < numNewPills; i++){
 800603e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006042:	3301      	adds	r3, #1
 8006044:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006048:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800604c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8006050:	429a      	cmp	r2, r3
 8006052:	d3b9      	bcc.n	8005fc8 <xbeeDownloadPills+0x4c>
	}
	sortEntries();
 8006054:	f7fa fb10 	bl	8000678 <sortEntries>
}
 8006058:	bf00      	nop
 800605a:	3788      	adds	r7, #136	@ 0x88
 800605c:	46bd      	mov	sp, r7
 800605e:	bdb0      	pop	{r4, r5, r7, pc}
 8006060:	200009b4 	.word	0x200009b4

08006064 <remap>:


extern SPI_HandleTypeDef hspi3;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	ed87 0a05 	vstr	s0, [r7, #20]
 800606e:	edc7 0a04 	vstr	s1, [r7, #16]
 8006072:	ed87 1a03 	vstr	s2, [r7, #12]
 8006076:	edc7 1a02 	vstr	s3, [r7, #8]
 800607a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800607e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006082:	edd7 7a04 	vldr	s15, [r7, #16]
 8006086:	ee37 7a67 	vsub.f32	s14, s14, s15
 800608a:	edd7 6a01 	vldr	s13, [r7, #4]
 800608e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006092:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006096:	ee67 6a27 	vmul.f32	s13, s14, s15
 800609a:	ed97 7a03 	vldr	s14, [r7, #12]
 800609e:	edd7 7a04 	vldr	s15, [r7, #16]
 80060a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80060ae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80060b2:	eeb0 0a67 	vmov.f32	s0, s15
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <XPT2046_Init>:

void XPT2046_Init(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80060ca:	4810      	ldr	r0, [pc, #64]	@ (800610c <XPT2046_Init+0x4c>)
 80060cc:	f000 fc2a 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 80060d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80060d4:	2201      	movs	r2, #1
 80060d6:	2180      	movs	r1, #128	@ 0x80
 80060d8:	480d      	ldr	r0, [pc, #52]	@ (8006110 <XPT2046_Init+0x50>)
 80060da:	f002 ff66 	bl	8008faa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 80060de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80060e2:	2201      	movs	r2, #1
 80060e4:	2100      	movs	r1, #0
 80060e6:	480a      	ldr	r0, [pc, #40]	@ (8006110 <XPT2046_Init+0x50>)
 80060e8:	f002 ff5f 	bl	8008faa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 80060ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80060f0:	2201      	movs	r2, #1
 80060f2:	2100      	movs	r1, #0
 80060f4:	4806      	ldr	r0, [pc, #24]	@ (8006110 <XPT2046_Init+0x50>)
 80060f6:	f002 ff58 	bl	8008faa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80060fa:	2201      	movs	r2, #1
 80060fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006100:	4802      	ldr	r0, [pc, #8]	@ (800610c <XPT2046_Init+0x4c>)
 8006102:	f000 fc0f 	bl	8006924 <HAL_GPIO_WritePin>
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	48000400 	.word	0x48000400
 8006110:	20000824 	.word	0x20000824

08006114 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af02      	add	r7, sp, #8
 800611a:	4603      	mov	r3, r0
 800611c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800611e:	2200      	movs	r2, #0
 8006120:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006124:	481c      	ldr	r0, [pc, #112]	@ (8006198 <getRaw+0x84>)
 8006126:	f000 fbfd 	bl	8006924 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800612a:	2001      	movs	r0, #1
 800612c:	f000 f95e 	bl	80063ec <HAL_Delay>
	HAL_SPI_Transmit(&hspi3, &address, 1, 1000);
 8006130:	1df9      	adds	r1, r7, #7
 8006132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006136:	2201      	movs	r2, #1
 8006138:	4818      	ldr	r0, [pc, #96]	@ (800619c <getRaw+0x88>)
 800613a:	f002 ff36 	bl	8008faa <HAL_SPI_Transmit>
	address = 0x00;
 800613e:	2300      	movs	r3, #0
 8006140:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 8006142:	f107 020b 	add.w	r2, r7, #11
 8006146:	1df9      	adds	r1, r7, #7
 8006148:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	2301      	movs	r3, #1
 8006150:	4812      	ldr	r0, [pc, #72]	@ (800619c <getRaw+0x88>)
 8006152:	f003 f89f 	bl	8009294 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 800615a:	2300      	movs	r3, #0
 800615c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 800615e:	f107 020b 	add.w	r2, r7, #11
 8006162:	1df9      	adds	r1, r7, #7
 8006164:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	2301      	movs	r3, #1
 800616c:	480b      	ldr	r0, [pc, #44]	@ (800619c <getRaw+0x88>)
 800616e:	f003 f891 	bl	8009294 <HAL_SPI_TransmitReceive>
	LSB = data;
 8006172:	7afb      	ldrb	r3, [r7, #11]
 8006174:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8006176:	2201      	movs	r2, #1
 8006178:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800617c:	4806      	ldr	r0, [pc, #24]	@ (8006198 <getRaw+0x84>)
 800617e:	f000 fbd1 	bl	8006924 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8006182:	89fb      	ldrh	r3, [r7, #14]
 8006184:	021a      	lsls	r2, r3, #8
 8006186:	89bb      	ldrh	r3, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	10db      	asrs	r3, r3, #3
 800618c:	b29b      	uxth	r3, r3
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	48000400 	.word	0x48000400
 800619c:	20000824 	.word	0x20000824

080061a0 <X>:

inline static uint16_t X(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80061a6:	20d0      	movs	r0, #208	@ 0xd0
 80061a8:	f7ff ffb4 	bl	8006114 <getRaw>
 80061ac:	4603      	mov	r3, r0
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b6:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8006204 <X+0x64>
 80061ba:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8006208 <X+0x68>
 80061be:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 800620c <X+0x6c>
 80061c2:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8006210 <X+0x70>
 80061c6:	eeb0 0a67 	vmov.f32	s0, s15
 80061ca:	f7ff ff4b 	bl	8006064 <remap>
 80061ce:	eef0 7a40 	vmov.f32	s15, s0
 80061d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d6:	ee17 3a90 	vmov	r3, s15
 80061da:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80061e2:	3301      	adds	r3, #1
 80061e4:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <X+0x58>
 80061ec:	88fb      	ldrh	r3, [r7, #6]
 80061ee:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80061f2:	d801      	bhi.n	80061f8 <X+0x58>
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	e000      	b.n	80061fa <X+0x5a>
	else return 0;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	439f8000 	.word	0x439f8000
 8006208:	00000000 	.word	0x00000000
 800620c:	456d8000 	.word	0x456d8000
 8006210:	43960000 	.word	0x43960000

08006214 <Y>:

inline static uint16_t Y(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 800621a:	2090      	movs	r0, #144	@ 0x90
 800621c:	f7ff ff7a 	bl	8006114 <getRaw>
 8006220:	4603      	mov	r3, r0
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8006278 <Y+0x64>
 800622e:	eddf 1a13 	vldr	s3, [pc, #76]	@ 800627c <Y+0x68>
 8006232:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8006280 <Y+0x6c>
 8006236:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8006284 <Y+0x70>
 800623a:	eeb0 0a67 	vmov.f32	s0, s15
 800623e:	f7ff ff11 	bl	8006064 <remap>
 8006242:	eef0 7a40 	vmov.f32	s15, s0
 8006246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624a:	ee17 3a90 	vmov	r3, s15
 800624e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 8006256:	3301      	adds	r3, #1
 8006258:	80fb      	strh	r3, [r7, #6]
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <Y+0x58>
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 8006266:	d801      	bhi.n	800626c <Y+0x58>
 8006268:	88fb      	ldrh	r3, [r7, #6]
 800626a:	e000      	b.n	800626e <Y+0x5a>
	else return 0;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	43ef8000 	.word	0x43ef8000
 800627c:	00000000 	.word	0x00000000
 8006280:	456a6000 	.word	0x456a6000
 8006284:	43c80000 	.word	0x43c80000

08006288 <getX>:

uint16_t getX(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
 800628e:	f7ff ffc1 	bl	8006214 <Y>
 8006292:	4603      	mov	r3, r0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <getY>:

uint16_t getY(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
 80062a2:	f7ff ff7d 	bl	80061a0 <X>
 80062a6:	4603      	mov	r3, r0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80062b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80062e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80062b4:	f7ff fd4e 	bl	8005d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062b8:	480c      	ldr	r0, [pc, #48]	@ (80062ec <LoopForever+0x6>)
  ldr r1, =_edata
 80062ba:	490d      	ldr	r1, [pc, #52]	@ (80062f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062bc:	4a0d      	ldr	r2, [pc, #52]	@ (80062f4 <LoopForever+0xe>)
  movs r3, #0
 80062be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062c0:	e002      	b.n	80062c8 <LoopCopyDataInit>

080062c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062c6:	3304      	adds	r3, #4

080062c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062cc:	d3f9      	bcc.n	80062c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062ce:	4a0a      	ldr	r2, [pc, #40]	@ (80062f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80062d0:	4c0a      	ldr	r4, [pc, #40]	@ (80062fc <LoopForever+0x16>)
  movs r3, #0
 80062d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062d4:	e001      	b.n	80062da <LoopFillZerobss>

080062d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062d8:	3204      	adds	r2, #4

080062da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062dc:	d3fb      	bcc.n	80062d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062de:	f004 fb4d 	bl	800a97c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062e2:	f7fe ff25 	bl	8005130 <main>

080062e6 <LoopForever>:

LoopForever:
    b LoopForever
 80062e6:	e7fe      	b.n	80062e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80062e8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80062ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80062f4:	0801a0bc 	.word	0x0801a0bc
  ldr r2, =_sbss
 80062f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80062fc:	20000b04 	.word	0x20000b04

08006300 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006300:	e7fe      	b.n	8006300 <ADC1_IRQHandler>

08006302 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800630c:	2003      	movs	r0, #3
 800630e:	f000 f943 	bl	8006598 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006312:	200f      	movs	r0, #15
 8006314:	f000 f80e 	bl	8006334 <HAL_InitTick>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	71fb      	strb	r3, [r7, #7]
 8006322:	e001      	b.n	8006328 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006324:	f7ff fa84 	bl	8005830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006328:	79fb      	ldrb	r3, [r7, #7]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006340:	4b17      	ldr	r3, [pc, #92]	@ (80063a0 <HAL_InitTick+0x6c>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d023      	beq.n	8006390 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006348:	4b16      	ldr	r3, [pc, #88]	@ (80063a4 <HAL_InitTick+0x70>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	4b14      	ldr	r3, [pc, #80]	@ (80063a0 <HAL_InitTick+0x6c>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	4619      	mov	r1, r3
 8006352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006356:	fbb3 f3f1 	udiv	r3, r3, r1
 800635a:	fbb2 f3f3 	udiv	r3, r2, r3
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f941 	bl	80065e6 <HAL_SYSTICK_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b0f      	cmp	r3, #15
 800636e:	d809      	bhi.n	8006384 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006370:	2200      	movs	r2, #0
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006378:	f000 f919 	bl	80065ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800637c:	4a0a      	ldr	r2, [pc, #40]	@ (80063a8 <HAL_InitTick+0x74>)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e007      	b.n	8006394 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
 8006388:	e004      	b.n	8006394 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	73fb      	strb	r3, [r7, #15]
 800638e:	e001      	b.n	8006394 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	2000000c 	.word	0x2000000c
 80063a4:	20000004 	.word	0x20000004
 80063a8:	20000008 	.word	0x20000008

080063ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80063b0:	4b06      	ldr	r3, [pc, #24]	@ (80063cc <HAL_IncTick+0x20>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	4b06      	ldr	r3, [pc, #24]	@ (80063d0 <HAL_IncTick+0x24>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4413      	add	r3, r2
 80063bc:	4a04      	ldr	r2, [pc, #16]	@ (80063d0 <HAL_IncTick+0x24>)
 80063be:	6013      	str	r3, [r2, #0]
}
 80063c0:	bf00      	nop
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	2000000c 	.word	0x2000000c
 80063d0:	200009b8 	.word	0x200009b8

080063d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return uwTick;
 80063d8:	4b03      	ldr	r3, [pc, #12]	@ (80063e8 <HAL_GetTick+0x14>)
 80063da:	681b      	ldr	r3, [r3, #0]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	200009b8 	.word	0x200009b8

080063ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063f4:	f7ff ffee 	bl	80063d4 <HAL_GetTick>
 80063f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006404:	d005      	beq.n	8006412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006406:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <HAL_Delay+0x44>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006412:	bf00      	nop
 8006414:	f7ff ffde 	bl	80063d4 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	429a      	cmp	r2, r3
 8006422:	d8f7      	bhi.n	8006414 <HAL_Delay+0x28>
  {
  }
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	2000000c 	.word	0x2000000c

08006434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006444:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <__NVIC_SetPriorityGrouping+0x44>)
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006450:	4013      	ands	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800645c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006466:	4a04      	ldr	r2, [pc, #16]	@ (8006478 <__NVIC_SetPriorityGrouping+0x44>)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	60d3      	str	r3, [r2, #12]
}
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	e000ed00 	.word	0xe000ed00

0800647c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006480:	4b04      	ldr	r3, [pc, #16]	@ (8006494 <__NVIC_GetPriorityGrouping+0x18>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	f003 0307 	and.w	r3, r3, #7
}
 800648a:	4618      	mov	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	e000ed00 	.word	0xe000ed00

08006498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	6039      	str	r1, [r7, #0]
 80064a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	db0a      	blt.n	80064c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	490c      	ldr	r1, [pc, #48]	@ (80064e4 <__NVIC_SetPriority+0x4c>)
 80064b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b6:	0112      	lsls	r2, r2, #4
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	440b      	add	r3, r1
 80064bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064c0:	e00a      	b.n	80064d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	4908      	ldr	r1, [pc, #32]	@ (80064e8 <__NVIC_SetPriority+0x50>)
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	3b04      	subs	r3, #4
 80064d0:	0112      	lsls	r2, r2, #4
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	440b      	add	r3, r1
 80064d6:	761a      	strb	r2, [r3, #24]
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	e000e100 	.word	0xe000e100
 80064e8:	e000ed00 	.word	0xe000ed00

080064ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b089      	sub	sp, #36	@ 0x24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f1c3 0307 	rsb	r3, r3, #7
 8006506:	2b04      	cmp	r3, #4
 8006508:	bf28      	it	cs
 800650a:	2304      	movcs	r3, #4
 800650c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	3304      	adds	r3, #4
 8006512:	2b06      	cmp	r3, #6
 8006514:	d902      	bls.n	800651c <NVIC_EncodePriority+0x30>
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	3b03      	subs	r3, #3
 800651a:	e000      	b.n	800651e <NVIC_EncodePriority+0x32>
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43da      	mvns	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	401a      	ands	r2, r3
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006534:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	fa01 f303 	lsl.w	r3, r1, r3
 800653e:	43d9      	mvns	r1, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006544:	4313      	orrs	r3, r2
         );
}
 8006546:	4618      	mov	r0, r3
 8006548:	3724      	adds	r7, #36	@ 0x24
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3b01      	subs	r3, #1
 8006560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006564:	d301      	bcc.n	800656a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006566:	2301      	movs	r3, #1
 8006568:	e00f      	b.n	800658a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800656a:	4a0a      	ldr	r2, [pc, #40]	@ (8006594 <SysTick_Config+0x40>)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3b01      	subs	r3, #1
 8006570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006572:	210f      	movs	r1, #15
 8006574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006578:	f7ff ff8e 	bl	8006498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <SysTick_Config+0x40>)
 800657e:	2200      	movs	r2, #0
 8006580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006582:	4b04      	ldr	r3, [pc, #16]	@ (8006594 <SysTick_Config+0x40>)
 8006584:	2207      	movs	r2, #7
 8006586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	e000e010 	.word	0xe000e010

08006598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff ff47 	bl	8006434 <__NVIC_SetPriorityGrouping>
}
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	4603      	mov	r3, r0
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80065c0:	f7ff ff5c 	bl	800647c <__NVIC_GetPriorityGrouping>
 80065c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	68b9      	ldr	r1, [r7, #8]
 80065ca:	6978      	ldr	r0, [r7, #20]
 80065cc:	f7ff ff8e 	bl	80064ec <NVIC_EncodePriority>
 80065d0:	4602      	mov	r2, r0
 80065d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff ff5d 	bl	8006498 <__NVIC_SetPriority>
}
 80065de:	bf00      	nop
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ffb0 	bl	8006554 <SysTick_Config>
 80065f4:	4603      	mov	r3, r0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800660e:	e166      	b.n	80068de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	2101      	movs	r1, #1
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	4013      	ands	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 8158 	beq.w	80068d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	2b01      	cmp	r3, #1
 8006632:	d005      	beq.n	8006640 <HAL_GPIO_Init+0x40>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d130      	bne.n	80066a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	2203      	movs	r2, #3
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	43db      	mvns	r3, r3
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4013      	ands	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006676:	2201      	movs	r2, #1
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	43db      	mvns	r3, r3
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4013      	ands	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	091b      	lsrs	r3, r3, #4
 800668c:	f003 0201 	and.w	r2, r3, #1
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d017      	beq.n	80066de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	2203      	movs	r2, #3
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4013      	ands	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d123      	bne.n	8006732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	08da      	lsrs	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3208      	adds	r2, #8
 80066f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	220f      	movs	r2, #15
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43db      	mvns	r3, r3
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4013      	ands	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	08da      	lsrs	r2, r3, #3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3208      	adds	r2, #8
 800672c:	6939      	ldr	r1, [r7, #16]
 800672e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	2203      	movs	r2, #3
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43db      	mvns	r3, r3
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4013      	ands	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 0203 	and.w	r2, r3, #3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 80b2 	beq.w	80068d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006774:	4b61      	ldr	r3, [pc, #388]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 8006776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006778:	4a60      	ldr	r2, [pc, #384]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006780:	4b5e      	ldr	r3, [pc, #376]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 8006782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800678c:	4a5c      	ldr	r2, [pc, #368]	@ (8006900 <HAL_GPIO_Init+0x300>)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	089b      	lsrs	r3, r3, #2
 8006792:	3302      	adds	r3, #2
 8006794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f003 0303 	and.w	r3, r3, #3
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	220f      	movs	r2, #15
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	43db      	mvns	r3, r3
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4013      	ands	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80067b6:	d02b      	beq.n	8006810 <HAL_GPIO_Init+0x210>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a52      	ldr	r2, [pc, #328]	@ (8006904 <HAL_GPIO_Init+0x304>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d025      	beq.n	800680c <HAL_GPIO_Init+0x20c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a51      	ldr	r2, [pc, #324]	@ (8006908 <HAL_GPIO_Init+0x308>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d01f      	beq.n	8006808 <HAL_GPIO_Init+0x208>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a50      	ldr	r2, [pc, #320]	@ (800690c <HAL_GPIO_Init+0x30c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d019      	beq.n	8006804 <HAL_GPIO_Init+0x204>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a4f      	ldr	r2, [pc, #316]	@ (8006910 <HAL_GPIO_Init+0x310>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <HAL_GPIO_Init+0x200>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a4e      	ldr	r2, [pc, #312]	@ (8006914 <HAL_GPIO_Init+0x314>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00d      	beq.n	80067fc <HAL_GPIO_Init+0x1fc>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a4d      	ldr	r2, [pc, #308]	@ (8006918 <HAL_GPIO_Init+0x318>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <HAL_GPIO_Init+0x1f8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a4c      	ldr	r2, [pc, #304]	@ (800691c <HAL_GPIO_Init+0x31c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d101      	bne.n	80067f4 <HAL_GPIO_Init+0x1f4>
 80067f0:	2307      	movs	r3, #7
 80067f2:	e00e      	b.n	8006812 <HAL_GPIO_Init+0x212>
 80067f4:	2308      	movs	r3, #8
 80067f6:	e00c      	b.n	8006812 <HAL_GPIO_Init+0x212>
 80067f8:	2306      	movs	r3, #6
 80067fa:	e00a      	b.n	8006812 <HAL_GPIO_Init+0x212>
 80067fc:	2305      	movs	r3, #5
 80067fe:	e008      	b.n	8006812 <HAL_GPIO_Init+0x212>
 8006800:	2304      	movs	r3, #4
 8006802:	e006      	b.n	8006812 <HAL_GPIO_Init+0x212>
 8006804:	2303      	movs	r3, #3
 8006806:	e004      	b.n	8006812 <HAL_GPIO_Init+0x212>
 8006808:	2302      	movs	r3, #2
 800680a:	e002      	b.n	8006812 <HAL_GPIO_Init+0x212>
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <HAL_GPIO_Init+0x212>
 8006810:	2300      	movs	r3, #0
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	f002 0203 	and.w	r2, r2, #3
 8006818:	0092      	lsls	r2, r2, #2
 800681a:	4093      	lsls	r3, r2
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006822:	4937      	ldr	r1, [pc, #220]	@ (8006900 <HAL_GPIO_Init+0x300>)
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	089b      	lsrs	r3, r3, #2
 8006828:	3302      	adds	r3, #2
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006830:	4b3b      	ldr	r3, [pc, #236]	@ (8006920 <HAL_GPIO_Init+0x320>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	43db      	mvns	r3, r3
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4013      	ands	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006854:	4a32      	ldr	r2, [pc, #200]	@ (8006920 <HAL_GPIO_Init+0x320>)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800685a:	4b31      	ldr	r3, [pc, #196]	@ (8006920 <HAL_GPIO_Init+0x320>)
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	43db      	mvns	r3, r3
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4013      	ands	r3, r2
 8006868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800687e:	4a28      	ldr	r2, [pc, #160]	@ (8006920 <HAL_GPIO_Init+0x320>)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006884:	4b26      	ldr	r3, [pc, #152]	@ (8006920 <HAL_GPIO_Init+0x320>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	43db      	mvns	r3, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4013      	ands	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006920 <HAL_GPIO_Init+0x320>)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80068ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006920 <HAL_GPIO_Init+0x320>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	43db      	mvns	r3, r3
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4013      	ands	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068d2:	4a13      	ldr	r2, [pc, #76]	@ (8006920 <HAL_GPIO_Init+0x320>)
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	3301      	adds	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f47f ae91 	bne.w	8006610 <HAL_GPIO_Init+0x10>
  }
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40021000 	.word	0x40021000
 8006900:	40010000 	.word	0x40010000
 8006904:	48000400 	.word	0x48000400
 8006908:	48000800 	.word	0x48000800
 800690c:	48000c00 	.word	0x48000c00
 8006910:	48001000 	.word	0x48001000
 8006914:	48001400 	.word	0x48001400
 8006918:	48001800 	.word	0x48001800
 800691c:	48001c00 	.word	0x48001c00
 8006920:	40010400 	.word	0x40010400

08006924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	807b      	strh	r3, [r7, #2]
 8006930:	4613      	mov	r3, r2
 8006932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006934:	787b      	ldrb	r3, [r7, #1]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800693a:	887a      	ldrh	r2, [r7, #2]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006940:	e002      	b.n	8006948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006942:	887a      	ldrh	r2, [r7, #2]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e08d      	b.n	8006a82 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fe ff7c 	bl	8005878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2224      	movs	r2, #36	@ 0x24
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0201 	bic.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d107      	bne.n	80069ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069ca:	609a      	str	r2, [r3, #8]
 80069cc:	e006      	b.n	80069dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80069da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d108      	bne.n	80069f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069f2:	605a      	str	r2, [r3, #4]
 80069f4:	e007      	b.n	8006a06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6812      	ldr	r2, [r2, #0]
 8006a10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691a      	ldr	r2, [r3, #16]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69d9      	ldr	r1, [r3, #28]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	607a      	str	r2, [r7, #4]
 8006a96:	461a      	mov	r2, r3
 8006a98:	460b      	mov	r3, r1
 8006a9a:	817b      	strh	r3, [r7, #10]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	f040 80fd 	bne.w	8006ca8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_I2C_Master_Transmit+0x30>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e0f6      	b.n	8006caa <HAL_I2C_Master_Transmit+0x21e>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ac4:	f7ff fc86 	bl	80063d4 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	2319      	movs	r3, #25
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fa0a 	bl	8006ef0 <I2C_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e0e1      	b.n	8006caa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2221      	movs	r2, #33	@ 0x21
 8006aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2210      	movs	r2, #16
 8006af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	893a      	ldrh	r2, [r7, #8]
 8006b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2bff      	cmp	r3, #255	@ 0xff
 8006b16:	d906      	bls.n	8006b26 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	22ff      	movs	r2, #255	@ 0xff
 8006b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006b1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e007      	b.n	8006b36 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006b30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b34:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d024      	beq.n	8006b88 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b42:	781a      	ldrb	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	3301      	adds	r3, #1
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	8979      	ldrh	r1, [r7, #10]
 8006b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8006cb4 <HAL_I2C_Master_Transmit+0x228>)
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 fbf1 	bl	8007368 <I2C_TransferConfig>
 8006b86:	e066      	b.n	8006c56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	8979      	ldrh	r1, [r7, #10]
 8006b90:	4b48      	ldr	r3, [pc, #288]	@ (8006cb4 <HAL_I2C_Master_Transmit+0x228>)
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fbe6 	bl	8007368 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006b9c:	e05b      	b.n	8006c56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	6a39      	ldr	r1, [r7, #32]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f9f3 	bl	8006f8e <I2C_WaitOnTXISFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e07b      	b.n	8006caa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	781a      	ldrb	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d034      	beq.n	8006c56 <HAL_I2C_Master_Transmit+0x1ca>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d130      	bne.n	8006c56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2180      	movs	r1, #128	@ 0x80
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f976 	bl	8006ef0 <I2C_WaitOnFlagUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e04d      	b.n	8006caa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2bff      	cmp	r3, #255	@ 0xff
 8006c16:	d90e      	bls.n	8006c36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	22ff      	movs	r2, #255	@ 0xff
 8006c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	8979      	ldrh	r1, [r7, #10]
 8006c26:	2300      	movs	r3, #0
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fb9a 	bl	8007368 <I2C_TransferConfig>
 8006c34:	e00f      	b.n	8006c56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	8979      	ldrh	r1, [r7, #10]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fb89 	bl	8007368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d19e      	bne.n	8006b9e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	6a39      	ldr	r1, [r7, #32]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f9d9 	bl	800701c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e01a      	b.n	8006caa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6859      	ldr	r1, [r3, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb8 <HAL_I2C_Master_Transmit+0x22c>)
 8006c88:	400b      	ands	r3, r1
 8006c8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	80002000 	.word	0x80002000
 8006cb8:	fe00e800 	.word	0xfe00e800

08006cbc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	607a      	str	r2, [r7, #4]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	460b      	mov	r3, r1
 8006cca:	817b      	strh	r3, [r7, #10]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	f040 80db 	bne.w	8006e94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_I2C_Master_Receive+0x30>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e0d4      	b.n	8006e96 <HAL_I2C_Master_Receive+0x1da>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cf4:	f7ff fb6e 	bl	80063d4 <HAL_GetTick>
 8006cf8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	2319      	movs	r3, #25
 8006d00:	2201      	movs	r2, #1
 8006d02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f8f2 	bl	8006ef0 <I2C_WaitOnFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e0bf      	b.n	8006e96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2222      	movs	r2, #34	@ 0x22
 8006d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2210      	movs	r2, #16
 8006d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	893a      	ldrh	r2, [r7, #8]
 8006d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2bff      	cmp	r3, #255	@ 0xff
 8006d46:	d90e      	bls.n	8006d66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	22ff      	movs	r2, #255	@ 0xff
 8006d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	8979      	ldrh	r1, [r7, #10]
 8006d56:	4b52      	ldr	r3, [pc, #328]	@ (8006ea0 <HAL_I2C_Master_Receive+0x1e4>)
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fb02 	bl	8007368 <I2C_TransferConfig>
 8006d64:	e06d      	b.n	8006e42 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	8979      	ldrh	r1, [r7, #10]
 8006d78:	4b49      	ldr	r3, [pc, #292]	@ (8006ea0 <HAL_I2C_Master_Receive+0x1e4>)
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 faf1 	bl	8007368 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006d86:	e05c      	b.n	8006e42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	6a39      	ldr	r1, [r7, #32]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f989 	bl	80070a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e07c      	b.n	8006e96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d034      	beq.n	8006e42 <HAL_I2C_Master_Receive+0x186>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d130      	bne.n	8006e42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	2200      	movs	r2, #0
 8006de8:	2180      	movs	r1, #128	@ 0x80
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f880 	bl	8006ef0 <I2C_WaitOnFlagUntilTimeout>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e04d      	b.n	8006e96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2bff      	cmp	r3, #255	@ 0xff
 8006e02:	d90e      	bls.n	8006e22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	22ff      	movs	r2, #255	@ 0xff
 8006e08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	8979      	ldrh	r1, [r7, #10]
 8006e12:	2300      	movs	r3, #0
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 faa4 	bl	8007368 <I2C_TransferConfig>
 8006e20:	e00f      	b.n	8006e42 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	8979      	ldrh	r1, [r7, #10]
 8006e34:	2300      	movs	r3, #0
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fa93 	bl	8007368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d19d      	bne.n	8006d88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	6a39      	ldr	r1, [r7, #32]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f8e3 	bl	800701c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e01a      	b.n	8006e96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2220      	movs	r2, #32
 8006e66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6859      	ldr	r1, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea4 <HAL_I2C_Master_Receive+0x1e8>)
 8006e74:	400b      	ands	r3, r1
 8006e76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e000      	b.n	8006e96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006e94:	2302      	movs	r3, #2
  }
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	80002400 	.word	0x80002400
 8006ea4:	fe00e800 	.word	0xfe00e800

08006ea8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d103      	bne.n	8006ec6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d007      	beq.n	8006ee4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0201 	orr.w	r2, r2, #1
 8006ee2:	619a      	str	r2, [r3, #24]
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f00:	e031      	b.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f08:	d02d      	beq.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f0a:	f7ff fa63 	bl	80063d4 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d122      	bne.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	bf0c      	ite	eq
 8006f30:	2301      	moveq	r3, #1
 8006f32:	2300      	movne	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d113      	bne.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f42:	f043 0220 	orr.w	r2, r3, #32
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e00f      	b.n	8006f86 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	bf0c      	ite	eq
 8006f76:	2301      	moveq	r3, #1
 8006f78:	2300      	movne	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d0be      	beq.n	8006f02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f9a:	e033      	b.n	8007004 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f901 	bl	80071a8 <I2C_IsErrorOccurred>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e031      	b.n	8007014 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fb6:	d025      	beq.n	8007004 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb8:	f7ff fa0c 	bl	80063d4 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d302      	bcc.n	8006fce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d11a      	bne.n	8007004 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d013      	beq.n	8007004 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe0:	f043 0220 	orr.w	r2, r3, #32
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e007      	b.n	8007014 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b02      	cmp	r3, #2
 8007010:	d1c4      	bne.n	8006f9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007028:	e02f      	b.n	800708a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f8ba 	bl	80071a8 <I2C_IsErrorOccurred>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e02d      	b.n	800709a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800703e:	f7ff f9c9 	bl	80063d4 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	d302      	bcc.n	8007054 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d11a      	bne.n	800708a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b20      	cmp	r3, #32
 8007060:	d013      	beq.n	800708a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007066:	f043 0220 	orr.w	r2, r3, #32
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e007      	b.n	800709a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b20      	cmp	r3, #32
 8007096:	d1c8      	bne.n	800702a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070b0:	e06b      	b.n	800718a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 f876 	bl	80071a8 <I2C_IsErrorOccurred>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e069      	b.n	800719a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b20      	cmp	r3, #32
 80070d2:	d138      	bne.n	8007146 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d105      	bne.n	80070ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e055      	b.n	800719a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d107      	bne.n	800710c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2210      	movs	r2, #16
 8007102:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2204      	movs	r2, #4
 8007108:	645a      	str	r2, [r3, #68]	@ 0x44
 800710a:	e002      	b.n	8007112 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2220      	movs	r2, #32
 8007118:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6859      	ldr	r1, [r3, #4]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4b1f      	ldr	r3, [pc, #124]	@ (80071a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8007126:	400b      	ands	r3, r1
 8007128:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e029      	b.n	800719a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007146:	f7ff f945 	bl	80063d4 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	429a      	cmp	r2, r3
 8007154:	d302      	bcc.n	800715c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d116      	bne.n	800718a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b04      	cmp	r3, #4
 8007168:	d00f      	beq.n	800718a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800716e:	f043 0220 	orr.w	r2, r3, #32
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2220      	movs	r2, #32
 800717a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e007      	b.n	800719a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b04      	cmp	r3, #4
 8007196:	d18c      	bne.n	80070b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	fe00e800 	.word	0xfe00e800

080071a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	@ 0x28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d068      	beq.n	80072a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2210      	movs	r2, #16
 80071da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071dc:	e049      	b.n	8007272 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071e4:	d045      	beq.n	8007272 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071e6:	f7ff f8f5 	bl	80063d4 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d302      	bcc.n	80071fc <I2C_IsErrorOccurred+0x54>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d13a      	bne.n	8007272 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007206:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800720e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800721a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800721e:	d121      	bne.n	8007264 <I2C_IsErrorOccurred+0xbc>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007226:	d01d      	beq.n	8007264 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007228:	7cfb      	ldrb	r3, [r7, #19]
 800722a:	2b20      	cmp	r3, #32
 800722c:	d01a      	beq.n	8007264 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800723c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800723e:	f7ff f8c9 	bl	80063d4 <HAL_GetTick>
 8007242:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007244:	e00e      	b.n	8007264 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007246:	f7ff f8c5 	bl	80063d4 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b19      	cmp	r3, #25
 8007252:	d907      	bls.n	8007264 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	f043 0320 	orr.w	r3, r3, #32
 800725a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007262:	e006      	b.n	8007272 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b20      	cmp	r3, #32
 8007270:	d1e9      	bne.n	8007246 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b20      	cmp	r3, #32
 800727e:	d003      	beq.n	8007288 <I2C_IsErrorOccurred+0xe0>
 8007280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0aa      	beq.n	80071de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2220      	movs	r2, #32
 8007296:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	f043 0304 	orr.w	r3, r3, #4
 800729e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	f043 0301 	orr.w	r3, r3, #1
 80072be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80072c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	f043 0308 	orr.w	r3, r3, #8
 80072e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80072ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	f043 0302 	orr.w	r3, r3, #2
 8007302:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800730c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01c      	beq.n	8007356 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fdc3 	bl	8006ea8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6859      	ldr	r1, [r3, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <I2C_IsErrorOccurred+0x1bc>)
 800732e:	400b      	ands	r3, r1
 8007330:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	431a      	orrs	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800735a:	4618      	mov	r0, r3
 800735c:	3728      	adds	r7, #40	@ 0x28
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	fe00e800 	.word	0xfe00e800

08007368 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	607b      	str	r3, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	817b      	strh	r3, [r7, #10]
 8007376:	4613      	mov	r3, r2
 8007378:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800737a:	897b      	ldrh	r3, [r7, #10]
 800737c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007380:	7a7b      	ldrb	r3, [r7, #9]
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007388:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	4313      	orrs	r3, r2
 8007392:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007396:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	0d5b      	lsrs	r3, r3, #21
 80073a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80073a6:	4b08      	ldr	r3, [pc, #32]	@ (80073c8 <I2C_TransferConfig+0x60>)
 80073a8:	430b      	orrs	r3, r1
 80073aa:	43db      	mvns	r3, r3
 80073ac:	ea02 0103 	and.w	r1, r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	03ff63ff 	.word	0x03ff63ff

080073cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d138      	bne.n	8007454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e032      	b.n	8007456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2224      	movs	r2, #36	@ 0x24
 80073fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800741e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6819      	ldr	r1, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f042 0201 	orr.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	e000      	b.n	8007456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007454:	2302      	movs	r3, #2
  }
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007462:	b480      	push	{r7}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b20      	cmp	r3, #32
 8007476:	d139      	bne.n	80074ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800747e:	2b01      	cmp	r3, #1
 8007480:	d101      	bne.n	8007486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007482:	2302      	movs	r3, #2
 8007484:	e033      	b.n	80074ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2224      	movs	r2, #36	@ 0x24
 8007492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80074b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	021b      	lsls	r3, r3, #8
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e000      	b.n	80074ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074ec:	2302      	movs	r3, #2
  }
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007500:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800750c:	d102      	bne.n	8007514 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800750e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007512:	e00b      	b.n	800752c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007514:	4b08      	ldr	r3, [pc, #32]	@ (8007538 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800751a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800751e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007522:	d102      	bne.n	800752a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007528:	e000      	b.n	800752c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800752a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800752c:	4618      	mov	r0, r3
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40007000 	.word	0x40007000

0800753c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d141      	bne.n	80075ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800754a:	4b4b      	ldr	r3, [pc, #300]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007556:	d131      	bne.n	80075bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007558:	4b47      	ldr	r3, [pc, #284]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800755a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800755e:	4a46      	ldr	r2, [pc, #280]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007568:	4b43      	ldr	r3, [pc, #268]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007570:	4a41      	ldr	r2, [pc, #260]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007578:	4b40      	ldr	r3, [pc, #256]	@ (800767c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2232      	movs	r2, #50	@ 0x32
 800757e:	fb02 f303 	mul.w	r3, r2, r3
 8007582:	4a3f      	ldr	r2, [pc, #252]	@ (8007680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007584:	fba2 2303 	umull	r2, r3, r2, r3
 8007588:	0c9b      	lsrs	r3, r3, #18
 800758a:	3301      	adds	r3, #1
 800758c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800758e:	e002      	b.n	8007596 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3b01      	subs	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007596:	4b38      	ldr	r3, [pc, #224]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800759e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a2:	d102      	bne.n	80075aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f2      	bne.n	8007590 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075aa:	4b33      	ldr	r3, [pc, #204]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b6:	d158      	bne.n	800766a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e057      	b.n	800766c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075bc:	4b2e      	ldr	r3, [pc, #184]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80075cc:	e04d      	b.n	800766a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075d4:	d141      	bne.n	800765a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80075d6:	4b28      	ldr	r3, [pc, #160]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e2:	d131      	bne.n	8007648 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075e4:	4b24      	ldr	r3, [pc, #144]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ea:	4a23      	ldr	r2, [pc, #140]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075f4:	4b20      	ldr	r3, [pc, #128]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80075fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007602:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007604:	4b1d      	ldr	r3, [pc, #116]	@ (800767c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2232      	movs	r2, #50	@ 0x32
 800760a:	fb02 f303 	mul.w	r3, r2, r3
 800760e:	4a1c      	ldr	r2, [pc, #112]	@ (8007680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007610:	fba2 2303 	umull	r2, r3, r2, r3
 8007614:	0c9b      	lsrs	r3, r3, #18
 8007616:	3301      	adds	r3, #1
 8007618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800761a:	e002      	b.n	8007622 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3b01      	subs	r3, #1
 8007620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007622:	4b15      	ldr	r3, [pc, #84]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800762a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800762e:	d102      	bne.n	8007636 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f2      	bne.n	800761c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007636:	4b10      	ldr	r3, [pc, #64]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800763e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007642:	d112      	bne.n	800766a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e011      	b.n	800766c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007648:	4b0b      	ldr	r3, [pc, #44]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800764a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800764e:	4a0a      	ldr	r2, [pc, #40]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007658:	e007      	b.n	800766a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800765a:	4b07      	ldr	r3, [pc, #28]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007662:	4a05      	ldr	r2, [pc, #20]	@ (8007678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007664:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007668:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	40007000 	.word	0x40007000
 800767c:	20000004 	.word	0x20000004
 8007680:	431bde83 	.word	0x431bde83

08007684 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f000 bc08 	b.w	8007ea8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007698:	4b96      	ldr	r3, [pc, #600]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 030c 	and.w	r3, r3, #12
 80076a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076a2:	4b94      	ldr	r3, [pc, #592]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80e4 	beq.w	8007882 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <HAL_RCC_OscConfig+0x4c>
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2b0c      	cmp	r3, #12
 80076c4:	f040 808b 	bne.w	80077de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	f040 8087 	bne.w	80077de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80076d0:	4b88      	ldr	r3, [pc, #544]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <HAL_RCC_OscConfig+0x64>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e3df      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a1a      	ldr	r2, [r3, #32]
 80076ec:	4b81      	ldr	r3, [pc, #516]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0308 	and.w	r3, r3, #8
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <HAL_RCC_OscConfig+0x7e>
 80076f8:	4b7e      	ldr	r3, [pc, #504]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007700:	e005      	b.n	800770e <HAL_RCC_OscConfig+0x8a>
 8007702:	4b7c      	ldr	r3, [pc, #496]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007708:	091b      	lsrs	r3, r3, #4
 800770a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800770e:	4293      	cmp	r3, r2
 8007710:	d223      	bcs.n	800775a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fdcc 	bl	80082b4 <RCC_SetFlashLatencyFromMSIRange>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e3c0      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007726:	4b73      	ldr	r3, [pc, #460]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a72      	ldr	r2, [pc, #456]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 800772c:	f043 0308 	orr.w	r3, r3, #8
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	4b70      	ldr	r3, [pc, #448]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	496d      	ldr	r1, [pc, #436]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007740:	4313      	orrs	r3, r2
 8007742:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007744:	4b6b      	ldr	r3, [pc, #428]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	4968      	ldr	r1, [pc, #416]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007754:	4313      	orrs	r3, r2
 8007756:	604b      	str	r3, [r1, #4]
 8007758:	e025      	b.n	80077a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800775a:	4b66      	ldr	r3, [pc, #408]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a65      	ldr	r2, [pc, #404]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007760:	f043 0308 	orr.w	r3, r3, #8
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	4b63      	ldr	r3, [pc, #396]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	4960      	ldr	r1, [pc, #384]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007774:	4313      	orrs	r3, r2
 8007776:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007778:	4b5e      	ldr	r3, [pc, #376]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	021b      	lsls	r3, r3, #8
 8007786:	495b      	ldr	r1, [pc, #364]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007788:	4313      	orrs	r3, r2
 800778a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fd8c 	bl	80082b4 <RCC_SetFlashLatencyFromMSIRange>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e380      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077a6:	f000 fcc1 	bl	800812c <HAL_RCC_GetSysClockFreq>
 80077aa:	4602      	mov	r2, r0
 80077ac:	4b51      	ldr	r3, [pc, #324]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	091b      	lsrs	r3, r3, #4
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	4950      	ldr	r1, [pc, #320]	@ (80078f8 <HAL_RCC_OscConfig+0x274>)
 80077b8:	5ccb      	ldrb	r3, [r1, r3]
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	fa22 f303 	lsr.w	r3, r2, r3
 80077c2:	4a4e      	ldr	r2, [pc, #312]	@ (80078fc <HAL_RCC_OscConfig+0x278>)
 80077c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80077c6:	4b4e      	ldr	r3, [pc, #312]	@ (8007900 <HAL_RCC_OscConfig+0x27c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fdb2 	bl	8006334 <HAL_InitTick>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d052      	beq.n	8007880 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	e364      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d032      	beq.n	800784c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80077e6:	4b43      	ldr	r3, [pc, #268]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a42      	ldr	r2, [pc, #264]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80077ec:	f043 0301 	orr.w	r3, r3, #1
 80077f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077f2:	f7fe fdef 	bl	80063d4 <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077f8:	e008      	b.n	800780c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077fa:	f7fe fdeb 	bl	80063d4 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e34d      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800780c:	4b39      	ldr	r3, [pc, #228]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0f0      	beq.n	80077fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007818:	4b36      	ldr	r3, [pc, #216]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a35      	ldr	r2, [pc, #212]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 800781e:	f043 0308 	orr.w	r3, r3, #8
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	4b33      	ldr	r3, [pc, #204]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	4930      	ldr	r1, [pc, #192]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007832:	4313      	orrs	r3, r2
 8007834:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007836:	4b2f      	ldr	r3, [pc, #188]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	492b      	ldr	r1, [pc, #172]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007846:	4313      	orrs	r3, r2
 8007848:	604b      	str	r3, [r1, #4]
 800784a:	e01a      	b.n	8007882 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800784c:	4b29      	ldr	r3, [pc, #164]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a28      	ldr	r2, [pc, #160]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007858:	f7fe fdbc 	bl	80063d4 <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007860:	f7fe fdb8 	bl	80063d4 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e31a      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007872:	4b20      	ldr	r3, [pc, #128]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f0      	bne.n	8007860 <HAL_RCC_OscConfig+0x1dc>
 800787e:	e000      	b.n	8007882 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007880:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d073      	beq.n	8007976 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d005      	beq.n	80078a0 <HAL_RCC_OscConfig+0x21c>
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b0c      	cmp	r3, #12
 8007898:	d10e      	bne.n	80078b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b03      	cmp	r3, #3
 800789e:	d10b      	bne.n	80078b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078a0:	4b14      	ldr	r3, [pc, #80]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d063      	beq.n	8007974 <HAL_RCC_OscConfig+0x2f0>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d15f      	bne.n	8007974 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e2f7      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c0:	d106      	bne.n	80078d0 <HAL_RCC_OscConfig+0x24c>
 80078c2:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a0b      	ldr	r2, [pc, #44]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80078c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e025      	b.n	800791c <HAL_RCC_OscConfig+0x298>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078d8:	d114      	bne.n	8007904 <HAL_RCC_OscConfig+0x280>
 80078da:	4b06      	ldr	r3, [pc, #24]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a05      	ldr	r2, [pc, #20]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80078e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	4b03      	ldr	r3, [pc, #12]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a02      	ldr	r2, [pc, #8]	@ (80078f4 <HAL_RCC_OscConfig+0x270>)
 80078ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	e013      	b.n	800791c <HAL_RCC_OscConfig+0x298>
 80078f4:	40021000 	.word	0x40021000
 80078f8:	0801a008 	.word	0x0801a008
 80078fc:	20000004 	.word	0x20000004
 8007900:	20000008 	.word	0x20000008
 8007904:	4ba0      	ldr	r3, [pc, #640]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a9f      	ldr	r2, [pc, #636]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 800790a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	4b9d      	ldr	r3, [pc, #628]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a9c      	ldr	r2, [pc, #624]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800791a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d013      	beq.n	800794c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007924:	f7fe fd56 	bl	80063d4 <HAL_GetTick>
 8007928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800792a:	e008      	b.n	800793e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800792c:	f7fe fd52 	bl	80063d4 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b64      	cmp	r3, #100	@ 0x64
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e2b4      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800793e:	4b92      	ldr	r3, [pc, #584]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f0      	beq.n	800792c <HAL_RCC_OscConfig+0x2a8>
 800794a:	e014      	b.n	8007976 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794c:	f7fe fd42 	bl	80063d4 <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007954:	f7fe fd3e 	bl	80063d4 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b64      	cmp	r3, #100	@ 0x64
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e2a0      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007966:	4b88      	ldr	r3, [pc, #544]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1f0      	bne.n	8007954 <HAL_RCC_OscConfig+0x2d0>
 8007972:	e000      	b.n	8007976 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d060      	beq.n	8007a44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b04      	cmp	r3, #4
 8007986:	d005      	beq.n	8007994 <HAL_RCC_OscConfig+0x310>
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	2b0c      	cmp	r3, #12
 800798c:	d119      	bne.n	80079c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b02      	cmp	r3, #2
 8007992:	d116      	bne.n	80079c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007994:	4b7c      	ldr	r3, [pc, #496]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <HAL_RCC_OscConfig+0x328>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e27d      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ac:	4b76      	ldr	r3, [pc, #472]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	061b      	lsls	r3, r3, #24
 80079ba:	4973      	ldr	r1, [pc, #460]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079c0:	e040      	b.n	8007a44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d023      	beq.n	8007a12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079ca:	4b6f      	ldr	r3, [pc, #444]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a6e      	ldr	r2, [pc, #440]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 80079d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d6:	f7fe fcfd 	bl	80063d4 <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079de:	f7fe fcf9 	bl	80063d4 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e25b      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079f0:	4b65      	ldr	r3, [pc, #404]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0f0      	beq.n	80079de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079fc:	4b62      	ldr	r3, [pc, #392]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	061b      	lsls	r3, r3, #24
 8007a0a:	495f      	ldr	r1, [pc, #380]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	604b      	str	r3, [r1, #4]
 8007a10:	e018      	b.n	8007a44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a12:	4b5d      	ldr	r3, [pc, #372]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a5c      	ldr	r2, [pc, #368]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a1e:	f7fe fcd9 	bl	80063d4 <HAL_GetTick>
 8007a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a26:	f7fe fcd5 	bl	80063d4 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e237      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a38:	4b53      	ldr	r3, [pc, #332]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f0      	bne.n	8007a26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d03c      	beq.n	8007aca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01c      	beq.n	8007a92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a58:	4b4b      	ldr	r3, [pc, #300]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007a60:	f043 0301 	orr.w	r3, r3, #1
 8007a64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a68:	f7fe fcb4 	bl	80063d4 <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a70:	f7fe fcb0 	bl	80063d4 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e212      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a82:	4b41      	ldr	r3, [pc, #260]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0ef      	beq.n	8007a70 <HAL_RCC_OscConfig+0x3ec>
 8007a90:	e01b      	b.n	8007aca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a92:	4b3d      	ldr	r3, [pc, #244]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a98:	4a3b      	ldr	r2, [pc, #236]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa2:	f7fe fc97 	bl	80063d4 <HAL_GetTick>
 8007aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007aa8:	e008      	b.n	8007abc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aaa:	f7fe fc93 	bl	80063d4 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d901      	bls.n	8007abc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e1f5      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007abc:	4b32      	ldr	r3, [pc, #200]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1ef      	bne.n	8007aaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 80a6 	beq.w	8007c24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007adc:	4b2a      	ldr	r3, [pc, #168]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10d      	bne.n	8007b04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ae8:	4b27      	ldr	r3, [pc, #156]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aec:	4a26      	ldr	r2, [pc, #152]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007af4:	4b24      	ldr	r3, [pc, #144]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007afc:	60bb      	str	r3, [r7, #8]
 8007afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b00:	2301      	movs	r3, #1
 8007b02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b04:	4b21      	ldr	r3, [pc, #132]	@ (8007b8c <HAL_RCC_OscConfig+0x508>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d118      	bne.n	8007b42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b10:	4b1e      	ldr	r3, [pc, #120]	@ (8007b8c <HAL_RCC_OscConfig+0x508>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1d      	ldr	r2, [pc, #116]	@ (8007b8c <HAL_RCC_OscConfig+0x508>)
 8007b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b1c:	f7fe fc5a 	bl	80063d4 <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b24:	f7fe fc56 	bl	80063d4 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e1b8      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b36:	4b15      	ldr	r3, [pc, #84]	@ (8007b8c <HAL_RCC_OscConfig+0x508>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0f0      	beq.n	8007b24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d108      	bne.n	8007b5c <HAL_RCC_OscConfig+0x4d8>
 8007b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b50:	4a0d      	ldr	r2, [pc, #52]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007b52:	f043 0301 	orr.w	r3, r3, #1
 8007b56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b5a:	e029      	b.n	8007bb0 <HAL_RCC_OscConfig+0x52c>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b05      	cmp	r3, #5
 8007b62:	d115      	bne.n	8007b90 <HAL_RCC_OscConfig+0x50c>
 8007b64:	4b08      	ldr	r3, [pc, #32]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b6a:	4a07      	ldr	r2, [pc, #28]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007b6c:	f043 0304 	orr.w	r3, r3, #4
 8007b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b74:	4b04      	ldr	r3, [pc, #16]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b7a:	4a03      	ldr	r2, [pc, #12]	@ (8007b88 <HAL_RCC_OscConfig+0x504>)
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b84:	e014      	b.n	8007bb0 <HAL_RCC_OscConfig+0x52c>
 8007b86:	bf00      	nop
 8007b88:	40021000 	.word	0x40021000
 8007b8c:	40007000 	.word	0x40007000
 8007b90:	4b9d      	ldr	r3, [pc, #628]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b96:	4a9c      	ldr	r2, [pc, #624]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ba0:	4b99      	ldr	r3, [pc, #612]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba6:	4a98      	ldr	r2, [pc, #608]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007ba8:	f023 0304 	bic.w	r3, r3, #4
 8007bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d016      	beq.n	8007be6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb8:	f7fe fc0c 	bl	80063d4 <HAL_GetTick>
 8007bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bbe:	e00a      	b.n	8007bd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc0:	f7fe fc08 	bl	80063d4 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e168      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bd6:	4b8c      	ldr	r3, [pc, #560]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0ed      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x53c>
 8007be4:	e015      	b.n	8007c12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be6:	f7fe fbf5 	bl	80063d4 <HAL_GetTick>
 8007bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007bec:	e00a      	b.n	8007c04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bee:	f7fe fbf1 	bl	80063d4 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e151      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c04:	4b80      	ldr	r3, [pc, #512]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1ed      	bne.n	8007bee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c12:	7ffb      	ldrb	r3, [r7, #31]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d105      	bne.n	8007c24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c18:	4b7b      	ldr	r3, [pc, #492]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d03c      	beq.n	8007caa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01c      	beq.n	8007c72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c38:	4b73      	ldr	r3, [pc, #460]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c3e:	4a72      	ldr	r2, [pc, #456]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007c40:	f043 0301 	orr.w	r3, r3, #1
 8007c44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c48:	f7fe fbc4 	bl	80063d4 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c50:	f7fe fbc0 	bl	80063d4 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e122      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c62:	4b69      	ldr	r3, [pc, #420]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0ef      	beq.n	8007c50 <HAL_RCC_OscConfig+0x5cc>
 8007c70:	e01b      	b.n	8007caa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c72:	4b65      	ldr	r3, [pc, #404]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c78:	4a63      	ldr	r2, [pc, #396]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
 8007c7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c82:	f7fe fba7 	bl	80063d4 <HAL_GetTick>
 8007c86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c88:	e008      	b.n	8007c9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c8a:	f7fe fba3 	bl	80063d4 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d901      	bls.n	8007c9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e105      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c9c:	4b5a      	ldr	r3, [pc, #360]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1ef      	bne.n	8007c8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 80f9 	beq.w	8007ea6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	f040 80cf 	bne.w	8007e5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007cbe:	4b52      	ldr	r3, [pc, #328]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f003 0203 	and.w	r2, r3, #3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d12c      	bne.n	8007d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d123      	bne.n	8007d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d11b      	bne.n	8007d2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d113      	bne.n	8007d2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	3b01      	subs	r3, #1
 8007d12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d109      	bne.n	8007d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	3b01      	subs	r3, #1
 8007d26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d071      	beq.n	8007e10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	2b0c      	cmp	r3, #12
 8007d30:	d068      	beq.n	8007e04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007d32:	4b35      	ldr	r3, [pc, #212]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d105      	bne.n	8007d4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007d3e:	4b32      	ldr	r3, [pc, #200]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e0ac      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a2d      	ldr	r2, [pc, #180]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007d54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d5a:	f7fe fb3b 	bl	80063d4 <HAL_GetTick>
 8007d5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d60:	e008      	b.n	8007d74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d62:	f7fe fb37 	bl	80063d4 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d901      	bls.n	8007d74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e099      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d74:	4b24      	ldr	r3, [pc, #144]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1f0      	bne.n	8007d62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d80:	4b21      	ldr	r3, [pc, #132]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	4b21      	ldr	r3, [pc, #132]	@ (8007e0c <HAL_RCC_OscConfig+0x788>)
 8007d86:	4013      	ands	r3, r2
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007d90:	3a01      	subs	r2, #1
 8007d92:	0112      	lsls	r2, r2, #4
 8007d94:	4311      	orrs	r1, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007d9a:	0212      	lsls	r2, r2, #8
 8007d9c:	4311      	orrs	r1, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007da2:	0852      	lsrs	r2, r2, #1
 8007da4:	3a01      	subs	r2, #1
 8007da6:	0552      	lsls	r2, r2, #21
 8007da8:	4311      	orrs	r1, r2
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007dae:	0852      	lsrs	r2, r2, #1
 8007db0:	3a01      	subs	r2, #1
 8007db2:	0652      	lsls	r2, r2, #25
 8007db4:	4311      	orrs	r1, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007dba:	06d2      	lsls	r2, r2, #27
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	4912      	ldr	r1, [pc, #72]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007dc4:	4b10      	ldr	r3, [pc, #64]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007dce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ddc:	f7fe fafa 	bl	80063d4 <HAL_GetTick>
 8007de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007de2:	e008      	b.n	8007df6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007de4:	f7fe faf6 	bl	80063d4 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e058      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007df6:	4b04      	ldr	r3, [pc, #16]	@ (8007e08 <HAL_RCC_OscConfig+0x784>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0f0      	beq.n	8007de4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e02:	e050      	b.n	8007ea6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e04f      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
 8007e08:	40021000 	.word	0x40021000
 8007e0c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e10:	4b27      	ldr	r3, [pc, #156]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d144      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007e1c:	4b24      	ldr	r3, [pc, #144]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a23      	ldr	r2, [pc, #140]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e28:	4b21      	ldr	r3, [pc, #132]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	4a20      	ldr	r2, [pc, #128]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e34:	f7fe face 	bl	80063d4 <HAL_GetTick>
 8007e38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e3c:	f7fe faca 	bl	80063d4 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e02c      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e4e:	4b18      	ldr	r3, [pc, #96]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f0      	beq.n	8007e3c <HAL_RCC_OscConfig+0x7b8>
 8007e5a:	e024      	b.n	8007ea6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b0c      	cmp	r3, #12
 8007e60:	d01f      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e62:	4b13      	ldr	r3, [pc, #76]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a12      	ldr	r2, [pc, #72]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6e:	f7fe fab1 	bl	80063d4 <HAL_GetTick>
 8007e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e74:	e008      	b.n	8007e88 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e76:	f7fe faad 	bl	80063d4 <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d901      	bls.n	8007e88 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e00f      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e88:	4b09      	ldr	r3, [pc, #36]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1f0      	bne.n	8007e76 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007e94:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e96:	68da      	ldr	r2, [r3, #12]
 8007e98:	4905      	ldr	r1, [pc, #20]	@ (8007eb0 <HAL_RCC_OscConfig+0x82c>)
 8007e9a:	4b06      	ldr	r3, [pc, #24]	@ (8007eb4 <HAL_RCC_OscConfig+0x830>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	60cb      	str	r3, [r1, #12]
 8007ea0:	e001      	b.n	8007ea6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e000      	b.n	8007ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	feeefffc 	.word	0xfeeefffc

08007eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e11d      	b.n	800810c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ed0:	4b90      	ldr	r3, [pc, #576]	@ (8008114 <HAL_RCC_ClockConfig+0x25c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d910      	bls.n	8007f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ede:	4b8d      	ldr	r3, [pc, #564]	@ (8008114 <HAL_RCC_ClockConfig+0x25c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f023 020f 	bic.w	r2, r3, #15
 8007ee6:	498b      	ldr	r1, [pc, #556]	@ (8008114 <HAL_RCC_ClockConfig+0x25c>)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eee:	4b89      	ldr	r3, [pc, #548]	@ (8008114 <HAL_RCC_ClockConfig+0x25c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d001      	beq.n	8007f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e105      	b.n	800810c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d010      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	4b81      	ldr	r3, [pc, #516]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d908      	bls.n	8007f2e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	497b      	ldr	r1, [pc, #492]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d079      	beq.n	800802e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d11e      	bne.n	8007f80 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f42:	4b75      	ldr	r3, [pc, #468]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e0dc      	b.n	800810c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007f52:	f000 fa09 	bl	8008368 <RCC_GetSysClockFreqFromPLLSource>
 8007f56:	4603      	mov	r3, r0
 8007f58:	4a70      	ldr	r2, [pc, #448]	@ (800811c <HAL_RCC_ClockConfig+0x264>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d946      	bls.n	8007fec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d140      	bne.n	8007fec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007f6a:	4b6b      	ldr	r3, [pc, #428]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f72:	4a69      	ldr	r2, [pc, #420]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007f7a:	2380      	movs	r3, #128	@ 0x80
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	e035      	b.n	8007fec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d107      	bne.n	8007f98 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f88:	4b63      	ldr	r3, [pc, #396]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d115      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e0b9      	b.n	800810c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d107      	bne.n	8007fb0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d109      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e0ad      	b.n	800810c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fb0:	4b59      	ldr	r3, [pc, #356]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e0a5      	b.n	800810c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007fc0:	f000 f8b4 	bl	800812c <HAL_RCC_GetSysClockFreq>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	4a55      	ldr	r2, [pc, #340]	@ (800811c <HAL_RCC_ClockConfig+0x264>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d90f      	bls.n	8007fec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007fcc:	4b52      	ldr	r3, [pc, #328]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d109      	bne.n	8007fec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007fe8:	2380      	movs	r3, #128	@ 0x80
 8007fea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fec:	4b4a      	ldr	r3, [pc, #296]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f023 0203 	bic.w	r2, r3, #3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	4947      	ldr	r1, [pc, #284]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ffe:	f7fe f9e9 	bl	80063d4 <HAL_GetTick>
 8008002:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008004:	e00a      	b.n	800801c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008006:	f7fe f9e5 	bl	80063d4 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008014:	4293      	cmp	r3, r2
 8008016:	d901      	bls.n	800801c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e077      	b.n	800810c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800801c:	4b3e      	ldr	r3, [pc, #248]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f003 020c 	and.w	r2, r3, #12
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	429a      	cmp	r2, r3
 800802c:	d1eb      	bne.n	8008006 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b80      	cmp	r3, #128	@ 0x80
 8008032:	d105      	bne.n	8008040 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008034:	4b38      	ldr	r3, [pc, #224]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	4a37      	ldr	r2, [pc, #220]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 800803a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800803e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d010      	beq.n	800806e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	4b31      	ldr	r3, [pc, #196]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008058:	429a      	cmp	r2, r3
 800805a:	d208      	bcs.n	800806e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800805c:	4b2e      	ldr	r3, [pc, #184]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	492b      	ldr	r1, [pc, #172]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 800806a:	4313      	orrs	r3, r2
 800806c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800806e:	4b29      	ldr	r3, [pc, #164]	@ (8008114 <HAL_RCC_ClockConfig+0x25c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d210      	bcs.n	800809e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800807c:	4b25      	ldr	r3, [pc, #148]	@ (8008114 <HAL_RCC_ClockConfig+0x25c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f023 020f 	bic.w	r2, r3, #15
 8008084:	4923      	ldr	r1, [pc, #140]	@ (8008114 <HAL_RCC_ClockConfig+0x25c>)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	4313      	orrs	r3, r2
 800808a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800808c:	4b21      	ldr	r3, [pc, #132]	@ (8008114 <HAL_RCC_ClockConfig+0x25c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 030f 	and.w	r3, r3, #15
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d001      	beq.n	800809e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e036      	b.n	800810c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	4918      	ldr	r1, [pc, #96]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d009      	beq.n	80080dc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080c8:	4b13      	ldr	r3, [pc, #76]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	4910      	ldr	r1, [pc, #64]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80080dc:	f000 f826 	bl	800812c <HAL_RCC_GetSysClockFreq>
 80080e0:	4602      	mov	r2, r0
 80080e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008118 <HAL_RCC_ClockConfig+0x260>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	091b      	lsrs	r3, r3, #4
 80080e8:	f003 030f 	and.w	r3, r3, #15
 80080ec:	490c      	ldr	r1, [pc, #48]	@ (8008120 <HAL_RCC_ClockConfig+0x268>)
 80080ee:	5ccb      	ldrb	r3, [r1, r3]
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	fa22 f303 	lsr.w	r3, r2, r3
 80080f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008124 <HAL_RCC_ClockConfig+0x26c>)
 80080fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80080fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008128 <HAL_RCC_ClockConfig+0x270>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe f917 	bl	8006334 <HAL_InitTick>
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]

  return status;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	40022000 	.word	0x40022000
 8008118:	40021000 	.word	0x40021000
 800811c:	04c4b400 	.word	0x04c4b400
 8008120:	0801a008 	.word	0x0801a008
 8008124:	20000004 	.word	0x20000004
 8008128:	20000008 	.word	0x20000008

0800812c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800812c:	b480      	push	{r7}
 800812e:	b089      	sub	sp, #36	@ 0x24
 8008130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	2300      	movs	r3, #0
 8008138:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800813a:	4b3e      	ldr	r3, [pc, #248]	@ (8008234 <HAL_RCC_GetSysClockFreq+0x108>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 030c 	and.w	r3, r3, #12
 8008142:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008144:	4b3b      	ldr	r3, [pc, #236]	@ (8008234 <HAL_RCC_GetSysClockFreq+0x108>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0303 	and.w	r3, r3, #3
 800814c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d005      	beq.n	8008160 <HAL_RCC_GetSysClockFreq+0x34>
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2b0c      	cmp	r3, #12
 8008158:	d121      	bne.n	800819e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d11e      	bne.n	800819e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008160:	4b34      	ldr	r3, [pc, #208]	@ (8008234 <HAL_RCC_GetSysClockFreq+0x108>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d107      	bne.n	800817c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800816c:	4b31      	ldr	r3, [pc, #196]	@ (8008234 <HAL_RCC_GetSysClockFreq+0x108>)
 800816e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008172:	0a1b      	lsrs	r3, r3, #8
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	61fb      	str	r3, [r7, #28]
 800817a:	e005      	b.n	8008188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800817c:	4b2d      	ldr	r3, [pc, #180]	@ (8008234 <HAL_RCC_GetSysClockFreq+0x108>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	091b      	lsrs	r3, r3, #4
 8008182:	f003 030f 	and.w	r3, r3, #15
 8008186:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008188:	4a2b      	ldr	r2, [pc, #172]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x10c>)
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008190:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10d      	bne.n	80081b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800819c:	e00a      	b.n	80081b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d102      	bne.n	80081aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80081a4:	4b25      	ldr	r3, [pc, #148]	@ (800823c <HAL_RCC_GetSysClockFreq+0x110>)
 80081a6:	61bb      	str	r3, [r7, #24]
 80081a8:	e004      	b.n	80081b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d101      	bne.n	80081b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80081b0:	4b23      	ldr	r3, [pc, #140]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x114>)
 80081b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	2b0c      	cmp	r3, #12
 80081b8:	d134      	bne.n	8008224 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80081ba:	4b1e      	ldr	r3, [pc, #120]	@ (8008234 <HAL_RCC_GetSysClockFreq+0x108>)
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d003      	beq.n	80081d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d003      	beq.n	80081d8 <HAL_RCC_GetSysClockFreq+0xac>
 80081d0:	e005      	b.n	80081de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80081d2:	4b1a      	ldr	r3, [pc, #104]	@ (800823c <HAL_RCC_GetSysClockFreq+0x110>)
 80081d4:	617b      	str	r3, [r7, #20]
      break;
 80081d6:	e005      	b.n	80081e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80081d8:	4b19      	ldr	r3, [pc, #100]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x114>)
 80081da:	617b      	str	r3, [r7, #20]
      break;
 80081dc:	e002      	b.n	80081e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	617b      	str	r3, [r7, #20]
      break;
 80081e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80081e4:	4b13      	ldr	r3, [pc, #76]	@ (8008234 <HAL_RCC_GetSysClockFreq+0x108>)
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	091b      	lsrs	r3, r3, #4
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	3301      	adds	r3, #1
 80081f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80081f2:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <HAL_RCC_GetSysClockFreq+0x108>)
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	fb03 f202 	mul.w	r2, r3, r2
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	fbb2 f3f3 	udiv	r3, r2, r3
 8008208:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800820a:	4b0a      	ldr	r3, [pc, #40]	@ (8008234 <HAL_RCC_GetSysClockFreq+0x108>)
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	0e5b      	lsrs	r3, r3, #25
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	3301      	adds	r3, #1
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008222:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008224:	69bb      	ldr	r3, [r7, #24]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3724      	adds	r7, #36	@ 0x24
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40021000 	.word	0x40021000
 8008238:	0801a020 	.word	0x0801a020
 800823c:	00f42400 	.word	0x00f42400
 8008240:	007a1200 	.word	0x007a1200

08008244 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008248:	4b03      	ldr	r3, [pc, #12]	@ (8008258 <HAL_RCC_GetHCLKFreq+0x14>)
 800824a:	681b      	ldr	r3, [r3, #0]
}
 800824c:	4618      	mov	r0, r3
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	20000004 	.word	0x20000004

0800825c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008260:	f7ff fff0 	bl	8008244 <HAL_RCC_GetHCLKFreq>
 8008264:	4602      	mov	r2, r0
 8008266:	4b06      	ldr	r3, [pc, #24]	@ (8008280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	0a1b      	lsrs	r3, r3, #8
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	4904      	ldr	r1, [pc, #16]	@ (8008284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008272:	5ccb      	ldrb	r3, [r1, r3]
 8008274:	f003 031f 	and.w	r3, r3, #31
 8008278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800827c:	4618      	mov	r0, r3
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40021000 	.word	0x40021000
 8008284:	0801a018 	.word	0x0801a018

08008288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800828c:	f7ff ffda 	bl	8008244 <HAL_RCC_GetHCLKFreq>
 8008290:	4602      	mov	r2, r0
 8008292:	4b06      	ldr	r3, [pc, #24]	@ (80082ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	0adb      	lsrs	r3, r3, #11
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	4904      	ldr	r1, [pc, #16]	@ (80082b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800829e:	5ccb      	ldrb	r3, [r1, r3]
 80082a0:	f003 031f 	and.w	r3, r3, #31
 80082a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40021000 	.word	0x40021000
 80082b0:	0801a018 	.word	0x0801a018

080082b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80082c0:	4b27      	ldr	r3, [pc, #156]	@ (8008360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80082c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80082cc:	f7ff f916 	bl	80074fc <HAL_PWREx_GetVoltageRange>
 80082d0:	6178      	str	r0, [r7, #20]
 80082d2:	e014      	b.n	80082fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80082d4:	4b22      	ldr	r3, [pc, #136]	@ (8008360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80082d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d8:	4a21      	ldr	r2, [pc, #132]	@ (8008360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80082da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082de:	6593      	str	r3, [r2, #88]	@ 0x58
 80082e0:	4b1f      	ldr	r3, [pc, #124]	@ (8008360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80082e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80082ec:	f7ff f906 	bl	80074fc <HAL_PWREx_GetVoltageRange>
 80082f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80082f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80082f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80082f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008304:	d10b      	bne.n	800831e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b80      	cmp	r3, #128	@ 0x80
 800830a:	d913      	bls.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2ba0      	cmp	r3, #160	@ 0xa0
 8008310:	d902      	bls.n	8008318 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008312:	2302      	movs	r3, #2
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	e00d      	b.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008318:	2301      	movs	r3, #1
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	e00a      	b.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b7f      	cmp	r3, #127	@ 0x7f
 8008322:	d902      	bls.n	800832a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008324:	2302      	movs	r3, #2
 8008326:	613b      	str	r3, [r7, #16]
 8008328:	e004      	b.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b70      	cmp	r3, #112	@ 0x70
 800832e:	d101      	bne.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008330:	2301      	movs	r3, #1
 8008332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008334:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f023 020f 	bic.w	r2, r3, #15
 800833c:	4909      	ldr	r1, [pc, #36]	@ (8008364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	4313      	orrs	r3, r2
 8008342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008344:	4b07      	ldr	r3, [pc, #28]	@ (8008364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 030f 	and.w	r3, r3, #15
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	429a      	cmp	r2, r3
 8008350:	d001      	beq.n	8008356 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40021000 	.word	0x40021000
 8008364:	40022000 	.word	0x40022000

08008368 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800836e:	4b2d      	ldr	r3, [pc, #180]	@ (8008424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b03      	cmp	r3, #3
 800837c:	d00b      	beq.n	8008396 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b03      	cmp	r3, #3
 8008382:	d825      	bhi.n	80083d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d008      	beq.n	800839c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d11f      	bne.n	80083d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008390:	4b25      	ldr	r3, [pc, #148]	@ (8008428 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008392:	613b      	str	r3, [r7, #16]
    break;
 8008394:	e01f      	b.n	80083d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008396:	4b25      	ldr	r3, [pc, #148]	@ (800842c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008398:	613b      	str	r3, [r7, #16]
    break;
 800839a:	e01c      	b.n	80083d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800839c:	4b21      	ldr	r3, [pc, #132]	@ (8008424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0308 	and.w	r3, r3, #8
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d107      	bne.n	80083b8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80083a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80083aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	f003 030f 	and.w	r3, r3, #15
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	e005      	b.n	80083c4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80083b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	091b      	lsrs	r3, r3, #4
 80083be:	f003 030f 	and.w	r3, r3, #15
 80083c2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80083c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008430 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083cc:	613b      	str	r3, [r7, #16]
    break;
 80083ce:	e002      	b.n	80083d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	613b      	str	r3, [r7, #16]
    break;
 80083d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083d6:	4b13      	ldr	r3, [pc, #76]	@ (8008424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	091b      	lsrs	r3, r3, #4
 80083dc:	f003 030f 	and.w	r3, r3, #15
 80083e0:	3301      	adds	r3, #1
 80083e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80083e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	0a1b      	lsrs	r3, r3, #8
 80083ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	fb03 f202 	mul.w	r2, r3, r2
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083fc:	4b09      	ldr	r3, [pc, #36]	@ (8008424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	0e5b      	lsrs	r3, r3, #25
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	3301      	adds	r3, #1
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	fbb2 f3f3 	udiv	r3, r2, r3
 8008414:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008416:	683b      	ldr	r3, [r7, #0]
}
 8008418:	4618      	mov	r0, r3
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	40021000 	.word	0x40021000
 8008428:	00f42400 	.word	0x00f42400
 800842c:	007a1200 	.word	0x007a1200
 8008430:	0801a020 	.word	0x0801a020

08008434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800843c:	2300      	movs	r3, #0
 800843e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008440:	2300      	movs	r3, #0
 8008442:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800844c:	2b00      	cmp	r3, #0
 800844e:	d040      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008454:	2b80      	cmp	r3, #128	@ 0x80
 8008456:	d02a      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008458:	2b80      	cmp	r3, #128	@ 0x80
 800845a:	d825      	bhi.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800845c:	2b60      	cmp	r3, #96	@ 0x60
 800845e:	d026      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008460:	2b60      	cmp	r3, #96	@ 0x60
 8008462:	d821      	bhi.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008464:	2b40      	cmp	r3, #64	@ 0x40
 8008466:	d006      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008468:	2b40      	cmp	r3, #64	@ 0x40
 800846a:	d81d      	bhi.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d009      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d010      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008474:	e018      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008476:	4b89      	ldr	r3, [pc, #548]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	4a88      	ldr	r2, [pc, #544]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800847c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008480:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008482:	e015      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3304      	adds	r3, #4
 8008488:	2100      	movs	r1, #0
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fb02 	bl	8008a94 <RCCEx_PLLSAI1_Config>
 8008490:	4603      	mov	r3, r0
 8008492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008494:	e00c      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3320      	adds	r3, #32
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fbed 	bl	8008c7c <RCCEx_PLLSAI2_Config>
 80084a2:	4603      	mov	r3, r0
 80084a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80084a6:	e003      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	74fb      	strb	r3, [r7, #19]
      break;
 80084ac:	e000      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80084ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084b0:	7cfb      	ldrb	r3, [r7, #19]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084b6:	4b79      	ldr	r3, [pc, #484]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80084b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084bc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084c4:	4975      	ldr	r1, [pc, #468]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80084cc:	e001      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ce:	7cfb      	ldrb	r3, [r7, #19]
 80084d0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d047      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e6:	d030      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80084e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ec:	d82a      	bhi.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80084ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084f2:	d02a      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80084f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084f8:	d824      	bhi.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80084fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084fe:	d008      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008504:	d81e      	bhi.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800850a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800850e:	d010      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008510:	e018      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008512:	4b62      	ldr	r3, [pc, #392]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	4a61      	ldr	r2, [pc, #388]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800851c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800851e:	e015      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3304      	adds	r3, #4
 8008524:	2100      	movs	r1, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fab4 	bl	8008a94 <RCCEx_PLLSAI1_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008530:	e00c      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3320      	adds	r3, #32
 8008536:	2100      	movs	r1, #0
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fb9f 	bl	8008c7c <RCCEx_PLLSAI2_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008542:	e003      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	74fb      	strb	r3, [r7, #19]
      break;
 8008548:	e000      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800854a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800854c:	7cfb      	ldrb	r3, [r7, #19]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10b      	bne.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008552:	4b52      	ldr	r3, [pc, #328]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008558:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008560:	494e      	ldr	r1, [pc, #312]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008562:	4313      	orrs	r3, r2
 8008564:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008568:	e001      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856a:	7cfb      	ldrb	r3, [r7, #19]
 800856c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 809f 	beq.w	80086ba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800857c:	2300      	movs	r3, #0
 800857e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008580:	4b46      	ldr	r3, [pc, #280]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008590:	2300      	movs	r3, #0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00d      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008596:	4b41      	ldr	r3, [pc, #260]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800859a:	4a40      	ldr	r2, [pc, #256]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800859c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80085a2:	4b3e      	ldr	r3, [pc, #248]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085ae:	2301      	movs	r3, #1
 80085b0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085b2:	4b3b      	ldr	r3, [pc, #236]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a3a      	ldr	r2, [pc, #232]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80085b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085be:	f7fd ff09 	bl	80063d4 <HAL_GetTick>
 80085c2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80085c4:	e009      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085c6:	f7fd ff05 	bl	80063d4 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d902      	bls.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	74fb      	strb	r3, [r7, #19]
        break;
 80085d8:	e005      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80085da:	4b31      	ldr	r3, [pc, #196]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0ef      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80085e6:	7cfb      	ldrb	r3, [r7, #19]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d15b      	bne.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80085ec:	4b2b      	ldr	r3, [pc, #172]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80085ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085f6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01f      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	429a      	cmp	r2, r3
 8008608:	d019      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800860a:	4b24      	ldr	r3, [pc, #144]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008614:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008616:	4b21      	ldr	r3, [pc, #132]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861c:	4a1f      	ldr	r2, [pc, #124]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800861e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008626:	4b1d      	ldr	r3, [pc, #116]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862c:	4a1b      	ldr	r2, [pc, #108]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800862e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008636:	4a19      	ldr	r2, [pc, #100]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d016      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008648:	f7fd fec4 	bl	80063d4 <HAL_GetTick>
 800864c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800864e:	e00b      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008650:	f7fd fec0 	bl	80063d4 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800865e:	4293      	cmp	r3, r2
 8008660:	d902      	bls.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	74fb      	strb	r3, [r7, #19]
            break;
 8008666:	e006      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008668:	4b0c      	ldr	r3, [pc, #48]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800866a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0ec      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8008676:	7cfb      	ldrb	r3, [r7, #19]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10c      	bne.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800867c:	4b07      	ldr	r3, [pc, #28]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008682:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800868c:	4903      	ldr	r1, [pc, #12]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800868e:	4313      	orrs	r3, r2
 8008690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008694:	e008      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008696:	7cfb      	ldrb	r3, [r7, #19]
 8008698:	74bb      	strb	r3, [r7, #18]
 800869a:	e005      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800869c:	40021000 	.word	0x40021000
 80086a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a4:	7cfb      	ldrb	r3, [r7, #19]
 80086a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086a8:	7c7b      	ldrb	r3, [r7, #17]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d105      	bne.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086ae:	4ba0      	ldr	r3, [pc, #640]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80086b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086b2:	4a9f      	ldr	r2, [pc, #636]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80086b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00a      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086c6:	4b9a      	ldr	r3, [pc, #616]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80086c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086cc:	f023 0203 	bic.w	r2, r3, #3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d4:	4996      	ldr	r1, [pc, #600]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00a      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086e8:	4b91      	ldr	r3, [pc, #580]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80086ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ee:	f023 020c 	bic.w	r2, r3, #12
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f6:	498e      	ldr	r1, [pc, #568]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800870a:	4b89      	ldr	r3, [pc, #548]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800870c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008710:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008718:	4985      	ldr	r1, [pc, #532]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800871a:	4313      	orrs	r3, r2
 800871c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00a      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800872c:	4b80      	ldr	r3, [pc, #512]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800872e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008732:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800873a:	497d      	ldr	r1, [pc, #500]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800873c:	4313      	orrs	r3, r2
 800873e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0310 	and.w	r3, r3, #16
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800874e:	4b78      	ldr	r3, [pc, #480]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008754:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800875c:	4974      	ldr	r1, [pc, #464]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008770:	4b6f      	ldr	r3, [pc, #444]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008776:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800877e:	496c      	ldr	r1, [pc, #432]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008780:	4313      	orrs	r3, r2
 8008782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008792:	4b67      	ldr	r3, [pc, #412]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008798:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087a0:	4963      	ldr	r1, [pc, #396]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087b4:	4b5e      	ldr	r3, [pc, #376]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087c2:	495b      	ldr	r1, [pc, #364]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087d6:	4b56      	ldr	r3, [pc, #344]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e4:	4952      	ldr	r1, [pc, #328]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80087f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008806:	494a      	ldr	r1, [pc, #296]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008808:	4313      	orrs	r3, r2
 800880a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800881a:	4b45      	ldr	r3, [pc, #276]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008820:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008828:	4941      	ldr	r1, [pc, #260]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800883c:	4b3c      	ldr	r3, [pc, #240]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800883e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008842:	f023 0203 	bic.w	r2, r3, #3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800884a:	4939      	ldr	r1, [pc, #228]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800884c:	4313      	orrs	r3, r2
 800884e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d028      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800885e:	4b34      	ldr	r3, [pc, #208]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008864:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800886c:	4930      	ldr	r1, [pc, #192]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800886e:	4313      	orrs	r3, r2
 8008870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800887c:	d106      	bne.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800887e:	4b2c      	ldr	r3, [pc, #176]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	4a2b      	ldr	r2, [pc, #172]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008884:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008888:	60d3      	str	r3, [r2, #12]
 800888a:	e011      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008890:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008894:	d10c      	bne.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	3304      	adds	r3, #4
 800889a:	2101      	movs	r1, #1
 800889c:	4618      	mov	r0, r3
 800889e:	f000 f8f9 	bl	8008a94 <RCCEx_PLLSAI1_Config>
 80088a2:	4603      	mov	r3, r0
 80088a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80088a6:	7cfb      	ldrb	r3, [r7, #19]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80088ac:	7cfb      	ldrb	r3, [r7, #19]
 80088ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d04d      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088c4:	d108      	bne.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80088c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088cc:	4a18      	ldr	r2, [pc, #96]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80088d2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80088d6:	e012      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80088d8:	4b15      	ldr	r3, [pc, #84]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088de:	4a14      	ldr	r2, [pc, #80]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80088e8:	4b11      	ldr	r3, [pc, #68]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088f6:	490e      	ldr	r1, [pc, #56]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008902:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008906:	d106      	bne.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008908:	4b09      	ldr	r3, [pc, #36]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	4a08      	ldr	r2, [pc, #32]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800890e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008912:	60d3      	str	r3, [r2, #12]
 8008914:	e020      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800891a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800891e:	d109      	bne.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008920:	4b03      	ldr	r3, [pc, #12]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	4a02      	ldr	r2, [pc, #8]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800892a:	60d3      	str	r3, [r2, #12]
 800892c:	e014      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800892e:	bf00      	nop
 8008930:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800893c:	d10c      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3304      	adds	r3, #4
 8008942:	2101      	movs	r1, #1
 8008944:	4618      	mov	r0, r3
 8008946:	f000 f8a5 	bl	8008a94 <RCCEx_PLLSAI1_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800894e:	7cfb      	ldrb	r3, [r7, #19]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008954:	7cfb      	ldrb	r3, [r7, #19]
 8008956:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d028      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008964:	4b4a      	ldr	r3, [pc, #296]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800896a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008972:	4947      	ldr	r1, [pc, #284]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008974:	4313      	orrs	r3, r2
 8008976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800897e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008982:	d106      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008984:	4b42      	ldr	r3, [pc, #264]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	4a41      	ldr	r2, [pc, #260]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800898a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800898e:	60d3      	str	r3, [r2, #12]
 8008990:	e011      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008996:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800899a:	d10c      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	2101      	movs	r1, #1
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f876 	bl	8008a94 <RCCEx_PLLSAI1_Config>
 80089a8:	4603      	mov	r3, r0
 80089aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80089ac:	7cfb      	ldrb	r3, [r7, #19]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80089b2:	7cfb      	ldrb	r3, [r7, #19]
 80089b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d01e      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089c2:	4b33      	ldr	r3, [pc, #204]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089d2:	492f      	ldr	r1, [pc, #188]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089e4:	d10c      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	2102      	movs	r1, #2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f851 	bl	8008a94 <RCCEx_PLLSAI1_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80089f6:	7cfb      	ldrb	r3, [r7, #19]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80089fc:	7cfb      	ldrb	r3, [r7, #19]
 80089fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a0c:	4b20      	ldr	r3, [pc, #128]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a12:	f023 0204 	bic.w	r2, r3, #4
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a1c:	491c      	ldr	r1, [pc, #112]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008a30:	4b17      	ldr	r3, [pc, #92]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a36:	f023 0218 	bic.w	r2, r3, #24
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a40:	4913      	ldr	r1, [pc, #76]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d017      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008a54:	4b0e      	ldr	r3, [pc, #56]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a64:	490a      	ldr	r1, [pc, #40]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a76:	d105      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a78:	4b05      	ldr	r3, [pc, #20]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	4a04      	ldr	r2, [pc, #16]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	40021000 	.word	0x40021000

08008a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008aa2:	4b72      	ldr	r3, [pc, #456]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00e      	beq.n	8008acc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008aae:	4b6f      	ldr	r3, [pc, #444]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f003 0203 	and.w	r2, r3, #3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d103      	bne.n	8008ac6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d142      	bne.n	8008b4c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]
 8008aca:	e03f      	b.n	8008b4c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d018      	beq.n	8008b06 <RCCEx_PLLSAI1_Config+0x72>
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d825      	bhi.n	8008b24 <RCCEx_PLLSAI1_Config+0x90>
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d002      	beq.n	8008ae2 <RCCEx_PLLSAI1_Config+0x4e>
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d009      	beq.n	8008af4 <RCCEx_PLLSAI1_Config+0x60>
 8008ae0:	e020      	b.n	8008b24 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008ae2:	4b62      	ldr	r3, [pc, #392]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d11d      	bne.n	8008b2a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008af2:	e01a      	b.n	8008b2a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008af4:	4b5d      	ldr	r3, [pc, #372]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d116      	bne.n	8008b2e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b04:	e013      	b.n	8008b2e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008b06:	4b59      	ldr	r3, [pc, #356]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10f      	bne.n	8008b32 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008b12:	4b56      	ldr	r3, [pc, #344]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d109      	bne.n	8008b32 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b22:	e006      	b.n	8008b32 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
      break;
 8008b28:	e004      	b.n	8008b34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008b2a:	bf00      	nop
 8008b2c:	e002      	b.n	8008b34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008b2e:	bf00      	nop
 8008b30:	e000      	b.n	8008b34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d108      	bne.n	8008b4c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f023 0203 	bic.w	r2, r3, #3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4949      	ldr	r1, [pc, #292]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f040 8086 	bne.w	8008c60 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008b54:	4b45      	ldr	r3, [pc, #276]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a44      	ldr	r2, [pc, #272]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b60:	f7fd fc38 	bl	80063d4 <HAL_GetTick>
 8008b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008b66:	e009      	b.n	8008b7c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b68:	f7fd fc34 	bl	80063d4 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d902      	bls.n	8008b7c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	73fb      	strb	r3, [r7, #15]
        break;
 8008b7a:	e005      	b.n	8008b88 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1ef      	bne.n	8008b68 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d168      	bne.n	8008c60 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d113      	bne.n	8008bbc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008b94:	4b35      	ldr	r3, [pc, #212]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	4b35      	ldr	r3, [pc, #212]	@ (8008c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6892      	ldr	r2, [r2, #8]
 8008ba0:	0211      	lsls	r1, r2, #8
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	68d2      	ldr	r2, [r2, #12]
 8008ba6:	06d2      	lsls	r2, r2, #27
 8008ba8:	4311      	orrs	r1, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6852      	ldr	r2, [r2, #4]
 8008bae:	3a01      	subs	r2, #1
 8008bb0:	0112      	lsls	r2, r2, #4
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	492d      	ldr	r1, [pc, #180]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	610b      	str	r3, [r1, #16]
 8008bba:	e02d      	b.n	8008c18 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d115      	bne.n	8008bee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008bc4:	691a      	ldr	r2, [r3, #16]
 8008bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8008c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6892      	ldr	r2, [r2, #8]
 8008bce:	0211      	lsls	r1, r2, #8
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6912      	ldr	r2, [r2, #16]
 8008bd4:	0852      	lsrs	r2, r2, #1
 8008bd6:	3a01      	subs	r2, #1
 8008bd8:	0552      	lsls	r2, r2, #21
 8008bda:	4311      	orrs	r1, r2
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6852      	ldr	r2, [r2, #4]
 8008be0:	3a01      	subs	r2, #1
 8008be2:	0112      	lsls	r2, r2, #4
 8008be4:	430a      	orrs	r2, r1
 8008be6:	4921      	ldr	r1, [pc, #132]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	610b      	str	r3, [r1, #16]
 8008bec:	e014      	b.n	8008c18 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008bee:	4b1f      	ldr	r3, [pc, #124]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008bf0:	691a      	ldr	r2, [r3, #16]
 8008bf2:	4b21      	ldr	r3, [pc, #132]	@ (8008c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6892      	ldr	r2, [r2, #8]
 8008bfa:	0211      	lsls	r1, r2, #8
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	6952      	ldr	r2, [r2, #20]
 8008c00:	0852      	lsrs	r2, r2, #1
 8008c02:	3a01      	subs	r2, #1
 8008c04:	0652      	lsls	r2, r2, #25
 8008c06:	4311      	orrs	r1, r2
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	6852      	ldr	r2, [r2, #4]
 8008c0c:	3a01      	subs	r2, #1
 8008c0e:	0112      	lsls	r2, r2, #4
 8008c10:	430a      	orrs	r2, r1
 8008c12:	4916      	ldr	r1, [pc, #88]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008c18:	4b14      	ldr	r3, [pc, #80]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a13      	ldr	r2, [pc, #76]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c24:	f7fd fbd6 	bl	80063d4 <HAL_GetTick>
 8008c28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008c2a:	e009      	b.n	8008c40 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c2c:	f7fd fbd2 	bl	80063d4 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d902      	bls.n	8008c40 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	73fb      	strb	r3, [r7, #15]
          break;
 8008c3e:	e005      	b.n	8008c4c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008c40:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d0ef      	beq.n	8008c2c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008c52:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c54:	691a      	ldr	r2, [r3, #16]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	4904      	ldr	r1, [pc, #16]	@ (8008c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	07ff800f 	.word	0x07ff800f
 8008c74:	ff9f800f 	.word	0xff9f800f
 8008c78:	f9ff800f 	.word	0xf9ff800f

08008c7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c8a:	4b72      	ldr	r3, [pc, #456]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00e      	beq.n	8008cb4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008c96:	4b6f      	ldr	r3, [pc, #444]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f003 0203 	and.w	r2, r3, #3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d103      	bne.n	8008cae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
       ||
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d142      	bne.n	8008d34 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	73fb      	strb	r3, [r7, #15]
 8008cb2:	e03f      	b.n	8008d34 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d018      	beq.n	8008cee <RCCEx_PLLSAI2_Config+0x72>
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d825      	bhi.n	8008d0c <RCCEx_PLLSAI2_Config+0x90>
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d002      	beq.n	8008cca <RCCEx_PLLSAI2_Config+0x4e>
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d009      	beq.n	8008cdc <RCCEx_PLLSAI2_Config+0x60>
 8008cc8:	e020      	b.n	8008d0c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008cca:	4b62      	ldr	r3, [pc, #392]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d11d      	bne.n	8008d12 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cda:	e01a      	b.n	8008d12 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d116      	bne.n	8008d16 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cec:	e013      	b.n	8008d16 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008cee:	4b59      	ldr	r3, [pc, #356]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10f      	bne.n	8008d1a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008cfa:	4b56      	ldr	r3, [pc, #344]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d0a:	e006      	b.n	8008d1a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d10:	e004      	b.n	8008d1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008d12:	bf00      	nop
 8008d14:	e002      	b.n	8008d1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008d16:	bf00      	nop
 8008d18:	e000      	b.n	8008d1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008d1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d108      	bne.n	8008d34 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008d22:	4b4c      	ldr	r3, [pc, #304]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f023 0203 	bic.w	r2, r3, #3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4949      	ldr	r1, [pc, #292]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f040 8086 	bne.w	8008e48 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008d3c:	4b45      	ldr	r3, [pc, #276]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a44      	ldr	r2, [pc, #272]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d48:	f7fd fb44 	bl	80063d4 <HAL_GetTick>
 8008d4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008d4e:	e009      	b.n	8008d64 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008d50:	f7fd fb40 	bl	80063d4 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d902      	bls.n	8008d64 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	73fb      	strb	r3, [r7, #15]
        break;
 8008d62:	e005      	b.n	8008d70 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008d64:	4b3b      	ldr	r3, [pc, #236]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1ef      	bne.n	8008d50 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d168      	bne.n	8008e48 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d113      	bne.n	8008da4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008d7c:	4b35      	ldr	r3, [pc, #212]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008d7e:	695a      	ldr	r2, [r3, #20]
 8008d80:	4b35      	ldr	r3, [pc, #212]	@ (8008e58 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008d82:	4013      	ands	r3, r2
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6892      	ldr	r2, [r2, #8]
 8008d88:	0211      	lsls	r1, r2, #8
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	68d2      	ldr	r2, [r2, #12]
 8008d8e:	06d2      	lsls	r2, r2, #27
 8008d90:	4311      	orrs	r1, r2
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6852      	ldr	r2, [r2, #4]
 8008d96:	3a01      	subs	r2, #1
 8008d98:	0112      	lsls	r2, r2, #4
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	492d      	ldr	r1, [pc, #180]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	614b      	str	r3, [r1, #20]
 8008da2:	e02d      	b.n	8008e00 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d115      	bne.n	8008dd6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008daa:	4b2a      	ldr	r3, [pc, #168]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008dac:	695a      	ldr	r2, [r3, #20]
 8008dae:	4b2b      	ldr	r3, [pc, #172]	@ (8008e5c <RCCEx_PLLSAI2_Config+0x1e0>)
 8008db0:	4013      	ands	r3, r2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6892      	ldr	r2, [r2, #8]
 8008db6:	0211      	lsls	r1, r2, #8
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	6912      	ldr	r2, [r2, #16]
 8008dbc:	0852      	lsrs	r2, r2, #1
 8008dbe:	3a01      	subs	r2, #1
 8008dc0:	0552      	lsls	r2, r2, #21
 8008dc2:	4311      	orrs	r1, r2
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6852      	ldr	r2, [r2, #4]
 8008dc8:	3a01      	subs	r2, #1
 8008dca:	0112      	lsls	r2, r2, #4
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	4921      	ldr	r1, [pc, #132]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	614b      	str	r3, [r1, #20]
 8008dd4:	e014      	b.n	8008e00 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008dd8:	695a      	ldr	r2, [r3, #20]
 8008dda:	4b21      	ldr	r3, [pc, #132]	@ (8008e60 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	6892      	ldr	r2, [r2, #8]
 8008de2:	0211      	lsls	r1, r2, #8
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6952      	ldr	r2, [r2, #20]
 8008de8:	0852      	lsrs	r2, r2, #1
 8008dea:	3a01      	subs	r2, #1
 8008dec:	0652      	lsls	r2, r2, #25
 8008dee:	4311      	orrs	r1, r2
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	6852      	ldr	r2, [r2, #4]
 8008df4:	3a01      	subs	r2, #1
 8008df6:	0112      	lsls	r2, r2, #4
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	4916      	ldr	r1, [pc, #88]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008e00:	4b14      	ldr	r3, [pc, #80]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a13      	ldr	r2, [pc, #76]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e0c:	f7fd fae2 	bl	80063d4 <HAL_GetTick>
 8008e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008e12:	e009      	b.n	8008e28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008e14:	f7fd fade 	bl	80063d4 <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d902      	bls.n	8008e28 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	73fb      	strb	r3, [r7, #15]
          break;
 8008e26:	e005      	b.n	8008e34 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008e28:	4b0a      	ldr	r3, [pc, #40]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0ef      	beq.n	8008e14 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d106      	bne.n	8008e48 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008e3a:	4b06      	ldr	r3, [pc, #24]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e3c:	695a      	ldr	r2, [r3, #20]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	4904      	ldr	r1, [pc, #16]	@ (8008e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40021000 	.word	0x40021000
 8008e58:	07ff800f 	.word	0x07ff800f
 8008e5c:	ff9f800f 	.word	0xff9f800f
 8008e60:	f9ff800f 	.word	0xf9ff800f

08008e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e095      	b.n	8008fa2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d108      	bne.n	8008e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e86:	d009      	beq.n	8008e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	61da      	str	r2, [r3, #28]
 8008e8e:	e005      	b.n	8008e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7fc fd82 	bl	80059c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ed2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008edc:	d902      	bls.n	8008ee4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	e002      	b.n	8008eea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ee8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008ef2:	d007      	beq.n	8008f04 <HAL_SPI_Init+0xa0>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008efc:	d002      	beq.n	8008f04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f46:	ea42 0103 	orr.w	r1, r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	0c1b      	lsrs	r3, r3, #16
 8008f60:	f003 0204 	and.w	r2, r3, #4
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f68:	f003 0310 	and.w	r3, r3, #16
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f72:	f003 0308 	and.w	r3, r3, #8
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008f80:	ea42 0103 	orr.w	r1, r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b088      	sub	sp, #32
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	603b      	str	r3, [r7, #0]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_SPI_Transmit+0x22>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e15f      	b.n	800928c <HAL_SPI_Transmit+0x2e2>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fd4:	f7fd f9fe 	bl	80063d4 <HAL_GetTick>
 8008fd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d002      	beq.n	8008ff0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008fea:	2302      	movs	r3, #2
 8008fec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008fee:	e148      	b.n	8009282 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <HAL_SPI_Transmit+0x52>
 8008ff6:	88fb      	ldrh	r3, [r7, #6]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009000:	e13f      	b.n	8009282 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2203      	movs	r2, #3
 8009006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	88fa      	ldrh	r2, [r7, #6]
 800901a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	88fa      	ldrh	r2, [r7, #6]
 8009020:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800904c:	d10f      	bne.n	800906e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800905c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800906c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009078:	2b40      	cmp	r3, #64	@ 0x40
 800907a:	d007      	beq.n	800908c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800908a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009094:	d94f      	bls.n	8009136 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_SPI_Transmit+0xfa>
 800909e:	8afb      	ldrh	r3, [r7, #22]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d142      	bne.n	800912a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a8:	881a      	ldrh	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b4:	1c9a      	adds	r2, r3, #2
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3b01      	subs	r3, #1
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80090c8:	e02f      	b.n	800912a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d112      	bne.n	80090fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090dc:	881a      	ldrh	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e8:	1c9a      	adds	r2, r3, #2
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	3b01      	subs	r3, #1
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090fc:	e015      	b.n	800912a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090fe:	f7fd f969 	bl	80063d4 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d803      	bhi.n	8009116 <HAL_SPI_Transmit+0x16c>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009114:	d102      	bne.n	800911c <HAL_SPI_Transmit+0x172>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d106      	bne.n	800912a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009128:	e0ab      	b.n	8009282 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800912e:	b29b      	uxth	r3, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1ca      	bne.n	80090ca <HAL_SPI_Transmit+0x120>
 8009134:	e080      	b.n	8009238 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <HAL_SPI_Transmit+0x19a>
 800913e:	8afb      	ldrh	r3, [r7, #22]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d174      	bne.n	800922e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b01      	cmp	r3, #1
 800914c:	d912      	bls.n	8009174 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009152:	881a      	ldrh	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915e:	1c9a      	adds	r2, r3, #2
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009168:	b29b      	uxth	r3, r3
 800916a:	3b02      	subs	r3, #2
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009172:	e05c      	b.n	800922e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	330c      	adds	r3, #12
 800917e:	7812      	ldrb	r2, [r2, #0]
 8009180:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009190:	b29b      	uxth	r3, r3
 8009192:	3b01      	subs	r3, #1
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800919a:	e048      	b.n	800922e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d12b      	bne.n	8009202 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d912      	bls.n	80091da <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b8:	881a      	ldrh	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c4:	1c9a      	adds	r2, r3, #2
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	3b02      	subs	r3, #2
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091d8:	e029      	b.n	800922e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	330c      	adds	r3, #12
 80091e4:	7812      	ldrb	r2, [r2, #0]
 80091e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009200:	e015      	b.n	800922e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009202:	f7fd f8e7 	bl	80063d4 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	d803      	bhi.n	800921a <HAL_SPI_Transmit+0x270>
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009218:	d102      	bne.n	8009220 <HAL_SPI_Transmit+0x276>
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d106      	bne.n	800922e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800922c:	e029      	b.n	8009282 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009232:	b29b      	uxth	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1b1      	bne.n	800919c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 fb69 	bl	8009914 <SPI_EndRxTxTransaction>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2220      	movs	r2, #32
 800924c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10a      	bne.n	800926c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009256:	2300      	movs	r3, #0
 8009258:	613b      	str	r3, [r7, #16]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	77fb      	strb	r3, [r7, #31]
 8009278:	e003      	b.n	8009282 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800928a:	7ffb      	ldrb	r3, [r7, #31]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3720      	adds	r7, #32
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	@ 0x28
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
 80092a0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80092a2:	2301      	movs	r3, #1
 80092a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d101      	bne.n	80092ba <HAL_SPI_TransmitReceive+0x26>
 80092b6:	2302      	movs	r3, #2
 80092b8:	e20a      	b.n	80096d0 <HAL_SPI_TransmitReceive+0x43c>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092c2:	f7fd f887 	bl	80063d4 <HAL_GetTick>
 80092c6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80092ce:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80092d6:	887b      	ldrh	r3, [r7, #2]
 80092d8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80092da:	887b      	ldrh	r3, [r7, #2]
 80092dc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80092de:	7efb      	ldrb	r3, [r7, #27]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d00e      	beq.n	8009302 <HAL_SPI_TransmitReceive+0x6e>
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092ea:	d106      	bne.n	80092fa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <HAL_SPI_TransmitReceive+0x66>
 80092f4:	7efb      	ldrb	r3, [r7, #27]
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d003      	beq.n	8009302 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80092fa:	2302      	movs	r3, #2
 80092fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009300:	e1e0      	b.n	80096c4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d005      	beq.n	8009314 <HAL_SPI_TransmitReceive+0x80>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <HAL_SPI_TransmitReceive+0x80>
 800930e:	887b      	ldrh	r3, [r7, #2]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800931a:	e1d3      	b.n	80096c4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b04      	cmp	r3, #4
 8009326:	d003      	beq.n	8009330 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2205      	movs	r2, #5
 800932c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	887a      	ldrh	r2, [r7, #2]
 8009340:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	887a      	ldrh	r2, [r7, #2]
 8009348:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	887a      	ldrh	r2, [r7, #2]
 8009356:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	887a      	ldrh	r2, [r7, #2]
 800935c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009372:	d802      	bhi.n	800937a <HAL_SPI_TransmitReceive+0xe6>
 8009374:	8a3b      	ldrh	r3, [r7, #16]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d908      	bls.n	800938c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009388:	605a      	str	r2, [r3, #4]
 800938a:	e007      	b.n	800939c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800939a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a6:	2b40      	cmp	r3, #64	@ 0x40
 80093a8:	d007      	beq.n	80093ba <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80093c2:	f240 8081 	bls.w	80094c8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <HAL_SPI_TransmitReceive+0x140>
 80093ce:	8a7b      	ldrh	r3, [r7, #18]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d16d      	bne.n	80094b0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d8:	881a      	ldrh	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e4:	1c9a      	adds	r2, r3, #2
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	3b01      	subs	r3, #1
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093f8:	e05a      	b.n	80094b0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	2b02      	cmp	r3, #2
 8009406:	d11b      	bne.n	8009440 <HAL_SPI_TransmitReceive+0x1ac>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800940c:	b29b      	uxth	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d016      	beq.n	8009440 <HAL_SPI_TransmitReceive+0x1ac>
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	2b01      	cmp	r3, #1
 8009416:	d113      	bne.n	8009440 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941c:	881a      	ldrh	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009428:	1c9a      	adds	r2, r3, #2
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009432:	b29b      	uxth	r3, r3
 8009434:	3b01      	subs	r3, #1
 8009436:	b29a      	uxth	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b01      	cmp	r3, #1
 800944c:	d11c      	bne.n	8009488 <HAL_SPI_TransmitReceive+0x1f4>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009454:	b29b      	uxth	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d016      	beq.n	8009488 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009464:	b292      	uxth	r2, r2
 8009466:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946c:	1c9a      	adds	r2, r3, #2
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009478:	b29b      	uxth	r3, r3
 800947a:	3b01      	subs	r3, #1
 800947c:	b29a      	uxth	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009484:	2301      	movs	r3, #1
 8009486:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009488:	f7fc ffa4 	bl	80063d4 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009494:	429a      	cmp	r2, r3
 8009496:	d80b      	bhi.n	80094b0 <HAL_SPI_TransmitReceive+0x21c>
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800949e:	d007      	beq.n	80094b0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80094ae:	e109      	b.n	80096c4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d19f      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x166>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d199      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x166>
 80094c6:	e0e3      	b.n	8009690 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <HAL_SPI_TransmitReceive+0x244>
 80094d0:	8a7b      	ldrh	r3, [r7, #18]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	f040 80cf 	bne.w	8009676 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d912      	bls.n	8009508 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e6:	881a      	ldrh	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f2:	1c9a      	adds	r2, r3, #2
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	3b02      	subs	r3, #2
 8009500:	b29a      	uxth	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009506:	e0b6      	b.n	8009676 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	330c      	adds	r3, #12
 8009512:	7812      	ldrb	r2, [r2, #0]
 8009514:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800952e:	e0a2      	b.n	8009676 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	2b02      	cmp	r3, #2
 800953c:	d134      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x314>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009542:	b29b      	uxth	r3, r3
 8009544:	2b00      	cmp	r3, #0
 8009546:	d02f      	beq.n	80095a8 <HAL_SPI_TransmitReceive+0x314>
 8009548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954a:	2b01      	cmp	r3, #1
 800954c:	d12c      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b01      	cmp	r3, #1
 8009556:	d912      	bls.n	800957e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955c:	881a      	ldrh	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009568:	1c9a      	adds	r2, r3, #2
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009572:	b29b      	uxth	r3, r3
 8009574:	3b02      	subs	r3, #2
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800957c:	e012      	b.n	80095a4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	330c      	adds	r3, #12
 8009588:	7812      	ldrb	r2, [r2, #0]
 800958a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800959a:	b29b      	uxth	r3, r3
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d148      	bne.n	8009648 <HAL_SPI_TransmitReceive+0x3b4>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095bc:	b29b      	uxth	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d042      	beq.n	8009648 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d923      	bls.n	8009616 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d8:	b292      	uxth	r2, r2
 80095da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e0:	1c9a      	adds	r2, r3, #2
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3b02      	subs	r3, #2
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095fe:	b29b      	uxth	r3, r3
 8009600:	2b01      	cmp	r3, #1
 8009602:	d81f      	bhi.n	8009644 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009612:	605a      	str	r2, [r3, #4]
 8009614:	e016      	b.n	8009644 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f103 020c 	add.w	r2, r3, #12
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	b2d2      	uxtb	r2, r2
 8009626:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009644:	2301      	movs	r3, #1
 8009646:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009648:	f7fc fec4 	bl	80063d4 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009654:	429a      	cmp	r2, r3
 8009656:	d803      	bhi.n	8009660 <HAL_SPI_TransmitReceive+0x3cc>
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800965e:	d102      	bne.n	8009666 <HAL_SPI_TransmitReceive+0x3d2>
 8009660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009662:	2b00      	cmp	r3, #0
 8009664:	d107      	bne.n	8009676 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009674:	e026      	b.n	80096c4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800967a:	b29b      	uxth	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	f47f af57 	bne.w	8009530 <HAL_SPI_TransmitReceive+0x29c>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009688:	b29b      	uxth	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	f47f af50 	bne.w	8009530 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f93d 	bl	8009914 <SPI_EndRxTxTransaction>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2220      	movs	r2, #32
 80096aa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80096ba:	e003      	b.n	80096c4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80096cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3728      	adds	r7, #40	@ 0x28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b088      	sub	sp, #32
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	4613      	mov	r3, r2
 80096e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096e8:	f7fc fe74 	bl	80063d4 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f0:	1a9b      	subs	r3, r3, r2
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	4413      	add	r3, r2
 80096f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096f8:	f7fc fe6c 	bl	80063d4 <HAL_GetTick>
 80096fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096fe:	4b39      	ldr	r3, [pc, #228]	@ (80097e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	015b      	lsls	r3, r3, #5
 8009704:	0d1b      	lsrs	r3, r3, #20
 8009706:	69fa      	ldr	r2, [r7, #28]
 8009708:	fb02 f303 	mul.w	r3, r2, r3
 800970c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800970e:	e054      	b.n	80097ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009716:	d050      	beq.n	80097ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009718:	f7fc fe5c 	bl	80063d4 <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	69fa      	ldr	r2, [r7, #28]
 8009724:	429a      	cmp	r2, r3
 8009726:	d902      	bls.n	800972e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d13d      	bne.n	80097aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	685a      	ldr	r2, [r3, #4]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800973c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009746:	d111      	bne.n	800976c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009750:	d004      	beq.n	800975c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800975a:	d107      	bne.n	800976c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800976a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009774:	d10f      	bne.n	8009796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e017      	b.n	80097da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4013      	ands	r3, r2
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	bf0c      	ite	eq
 80097ca:	2301      	moveq	r3, #1
 80097cc:	2300      	movne	r3, #0
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	461a      	mov	r2, r3
 80097d2:	79fb      	ldrb	r3, [r7, #7]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d19b      	bne.n	8009710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000004 	.word	0x20000004

080097e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08a      	sub	sp, #40	@ 0x28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80097fa:	f7fc fdeb 	bl	80063d4 <HAL_GetTick>
 80097fe:	4602      	mov	r2, r0
 8009800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009802:	1a9b      	subs	r3, r3, r2
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	4413      	add	r3, r2
 8009808:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800980a:	f7fc fde3 	bl	80063d4 <HAL_GetTick>
 800980e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	330c      	adds	r3, #12
 8009816:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009818:	4b3d      	ldr	r3, [pc, #244]	@ (8009910 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	00da      	lsls	r2, r3, #3
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	0d1b      	lsrs	r3, r3, #20
 8009828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800982a:	fb02 f303 	mul.w	r3, r2, r3
 800982e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009830:	e060      	b.n	80098f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009838:	d107      	bne.n	800984a <SPI_WaitFifoStateUntilTimeout+0x62>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d104      	bne.n	800984a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	b2db      	uxtb	r3, r3
 8009846:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009848:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009850:	d050      	beq.n	80098f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009852:	f7fc fdbf 	bl	80063d4 <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800985e:	429a      	cmp	r2, r3
 8009860:	d902      	bls.n	8009868 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	d13d      	bne.n	80098e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009876:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009880:	d111      	bne.n	80098a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800988a:	d004      	beq.n	8009896 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009894:	d107      	bne.n	80098a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ae:	d10f      	bne.n	80098d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e010      	b.n	8009906 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689a      	ldr	r2, [r3, #8]
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	4013      	ands	r3, r2
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	429a      	cmp	r2, r3
 8009902:	d196      	bne.n	8009832 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3728      	adds	r7, #40	@ 0x28
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000004 	.word	0x20000004

08009914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af02      	add	r7, sp, #8
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2200      	movs	r2, #0
 8009928:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f7ff ff5b 	bl	80097e8 <SPI_WaitFifoStateUntilTimeout>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d007      	beq.n	8009948 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800993c:	f043 0220 	orr.w	r2, r3, #32
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e027      	b.n	8009998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2200      	movs	r2, #0
 8009950:	2180      	movs	r1, #128	@ 0x80
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7ff fec0 	bl	80096d8 <SPI_WaitFlagStateUntilTimeout>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d007      	beq.n	800996e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009962:	f043 0220 	orr.w	r2, r3, #32
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e014      	b.n	8009998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2200      	movs	r2, #0
 8009976:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff ff34 	bl	80097e8 <SPI_WaitFifoStateUntilTimeout>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d007      	beq.n	8009996 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800998a:	f043 0220 	orr.w	r2, r3, #32
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e000      	b.n	8009998 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e042      	b.n	8009a38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d106      	bne.n	80099ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7fc f8a1 	bl	8005b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2224      	movs	r2, #36	@ 0x24
 80099ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 0201 	bic.w	r2, r2, #1
 80099e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d002      	beq.n	80099f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fc7c 	bl	800a2e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f97d 	bl	8009cf0 <UART_SetConfig>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d101      	bne.n	8009a00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e01b      	b.n	8009a38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f042 0201 	orr.w	r2, r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fcfb 	bl	800a42c <UART_CheckIdleState>
 8009a36:	4603      	mov	r3, r0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08a      	sub	sp, #40	@ 0x28
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	603b      	str	r3, [r7, #0]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d17b      	bne.n	8009b52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <HAL_UART_Transmit+0x26>
 8009a60:	88fb      	ldrh	r3, [r7, #6]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e074      	b.n	8009b54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2221      	movs	r2, #33	@ 0x21
 8009a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a7a:	f7fc fcab 	bl	80063d4 <HAL_GetTick>
 8009a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	88fa      	ldrh	r2, [r7, #6]
 8009a84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	88fa      	ldrh	r2, [r7, #6]
 8009a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a98:	d108      	bne.n	8009aac <HAL_UART_Transmit+0x6c>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d104      	bne.n	8009aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	61bb      	str	r3, [r7, #24]
 8009aaa:	e003      	b.n	8009ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ab4:	e030      	b.n	8009b18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2200      	movs	r2, #0
 8009abe:	2180      	movs	r1, #128	@ 0x80
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 fd5d 	bl	800a580 <UART_WaitOnFlagUntilTimeout>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d005      	beq.n	8009ad8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e03d      	b.n	8009b54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10b      	bne.n	8009af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	881a      	ldrh	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aea:	b292      	uxth	r2, r2
 8009aec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	3302      	adds	r3, #2
 8009af2:	61bb      	str	r3, [r7, #24]
 8009af4:	e007      	b.n	8009b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	3301      	adds	r3, #1
 8009b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1c8      	bne.n	8009ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2140      	movs	r1, #64	@ 0x40
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 fd26 	bl	800a580 <UART_WaitOnFlagUntilTimeout>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e006      	b.n	8009b54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2220      	movs	r2, #32
 8009b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e000      	b.n	8009b54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009b52:	2302      	movs	r3, #2
  }
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08a      	sub	sp, #40	@ 0x28
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b72:	2b20      	cmp	r3, #32
 8009b74:	f040 80b6 	bne.w	8009ce4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <HAL_UART_Receive+0x28>
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e0ae      	b.n	8009ce6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2222      	movs	r2, #34	@ 0x22
 8009b94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b9e:	f7fc fc19 	bl	80063d4 <HAL_GetTick>
 8009ba2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	88fa      	ldrh	r2, [r7, #6]
 8009ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	88fa      	ldrh	r2, [r7, #6]
 8009bb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bbc:	d10e      	bne.n	8009bdc <HAL_UART_Receive+0x80>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d105      	bne.n	8009bd2 <HAL_UART_Receive+0x76>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009bd0:	e02d      	b.n	8009c2e <HAL_UART_Receive+0xd2>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	22ff      	movs	r2, #255	@ 0xff
 8009bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009bda:	e028      	b.n	8009c2e <HAL_UART_Receive+0xd2>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10d      	bne.n	8009c00 <HAL_UART_Receive+0xa4>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d104      	bne.n	8009bf6 <HAL_UART_Receive+0x9a>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	22ff      	movs	r2, #255	@ 0xff
 8009bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009bf4:	e01b      	b.n	8009c2e <HAL_UART_Receive+0xd2>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	227f      	movs	r2, #127	@ 0x7f
 8009bfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009bfe:	e016      	b.n	8009c2e <HAL_UART_Receive+0xd2>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c08:	d10d      	bne.n	8009c26 <HAL_UART_Receive+0xca>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d104      	bne.n	8009c1c <HAL_UART_Receive+0xc0>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	227f      	movs	r2, #127	@ 0x7f
 8009c16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c1a:	e008      	b.n	8009c2e <HAL_UART_Receive+0xd2>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	223f      	movs	r2, #63	@ 0x3f
 8009c20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c24:	e003      	b.n	8009c2e <HAL_UART_Receive+0xd2>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c34:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c3e:	d108      	bne.n	8009c52 <HAL_UART_Receive+0xf6>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	61bb      	str	r3, [r7, #24]
 8009c50:	e003      	b.n	8009c5a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c56:	2300      	movs	r3, #0
 8009c58:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009c5a:	e037      	b.n	8009ccc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2200      	movs	r2, #0
 8009c64:	2120      	movs	r1, #32
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 fc8a 	bl	800a580 <UART_WaitOnFlagUntilTimeout>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2220      	movs	r2, #32
 8009c76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e033      	b.n	8009ce6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10c      	bne.n	8009c9e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	8a7b      	ldrh	r3, [r7, #18]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	3302      	adds	r3, #2
 8009c9a:	61bb      	str	r3, [r7, #24]
 8009c9c:	e00d      	b.n	8009cba <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	8a7b      	ldrh	r3, [r7, #18]
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	4013      	ands	r3, r2
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1c1      	bne.n	8009c5c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2220      	movs	r2, #32
 8009cdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	e000      	b.n	8009ce6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8009ce4:	2302      	movs	r3, #2
  }
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3720      	adds	r7, #32
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cf4:	b08c      	sub	sp, #48	@ 0x30
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	69db      	ldr	r3, [r3, #28]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4baa      	ldr	r3, [pc, #680]	@ (8009fc8 <UART_SetConfig+0x2d8>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	6812      	ldr	r2, [r2, #0]
 8009d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a9f      	ldr	r2, [pc, #636]	@ (8009fcc <UART_SetConfig+0x2dc>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d004      	beq.n	8009d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009d66:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	6812      	ldr	r2, [r2, #0]
 8009d6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d70:	430b      	orrs	r3, r1
 8009d72:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7a:	f023 010f 	bic.w	r1, r3, #15
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a90      	ldr	r2, [pc, #576]	@ (8009fd0 <UART_SetConfig+0x2e0>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d125      	bne.n	8009de0 <UART_SetConfig+0xf0>
 8009d94:	4b8f      	ldr	r3, [pc, #572]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d9a:	f003 0303 	and.w	r3, r3, #3
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d81a      	bhi.n	8009dd8 <UART_SetConfig+0xe8>
 8009da2:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <UART_SetConfig+0xb8>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009db9 	.word	0x08009db9
 8009dac:	08009dc9 	.word	0x08009dc9
 8009db0:	08009dc1 	.word	0x08009dc1
 8009db4:	08009dd1 	.word	0x08009dd1
 8009db8:	2301      	movs	r3, #1
 8009dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dbe:	e116      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dc6:	e112      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009dc8:	2304      	movs	r3, #4
 8009dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dce:	e10e      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009dd0:	2308      	movs	r3, #8
 8009dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dd6:	e10a      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009dd8:	2310      	movs	r3, #16
 8009dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dde:	e106      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a7c      	ldr	r2, [pc, #496]	@ (8009fd8 <UART_SetConfig+0x2e8>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d138      	bne.n	8009e5c <UART_SetConfig+0x16c>
 8009dea:	4b7a      	ldr	r3, [pc, #488]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df0:	f003 030c 	and.w	r3, r3, #12
 8009df4:	2b0c      	cmp	r3, #12
 8009df6:	d82d      	bhi.n	8009e54 <UART_SetConfig+0x164>
 8009df8:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <UART_SetConfig+0x110>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e35 	.word	0x08009e35
 8009e04:	08009e55 	.word	0x08009e55
 8009e08:	08009e55 	.word	0x08009e55
 8009e0c:	08009e55 	.word	0x08009e55
 8009e10:	08009e45 	.word	0x08009e45
 8009e14:	08009e55 	.word	0x08009e55
 8009e18:	08009e55 	.word	0x08009e55
 8009e1c:	08009e55 	.word	0x08009e55
 8009e20:	08009e3d 	.word	0x08009e3d
 8009e24:	08009e55 	.word	0x08009e55
 8009e28:	08009e55 	.word	0x08009e55
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e4d 	.word	0x08009e4d
 8009e34:	2300      	movs	r3, #0
 8009e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e3a:	e0d8      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e42:	e0d4      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e44:	2304      	movs	r3, #4
 8009e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e4a:	e0d0      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e4c:	2308      	movs	r3, #8
 8009e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e52:	e0cc      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e54:	2310      	movs	r3, #16
 8009e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5a:	e0c8      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a5e      	ldr	r2, [pc, #376]	@ (8009fdc <UART_SetConfig+0x2ec>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d125      	bne.n	8009eb2 <UART_SetConfig+0x1c2>
 8009e66:	4b5b      	ldr	r3, [pc, #364]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e70:	2b30      	cmp	r3, #48	@ 0x30
 8009e72:	d016      	beq.n	8009ea2 <UART_SetConfig+0x1b2>
 8009e74:	2b30      	cmp	r3, #48	@ 0x30
 8009e76:	d818      	bhi.n	8009eaa <UART_SetConfig+0x1ba>
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	d00a      	beq.n	8009e92 <UART_SetConfig+0x1a2>
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d814      	bhi.n	8009eaa <UART_SetConfig+0x1ba>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <UART_SetConfig+0x19a>
 8009e84:	2b10      	cmp	r3, #16
 8009e86:	d008      	beq.n	8009e9a <UART_SetConfig+0x1aa>
 8009e88:	e00f      	b.n	8009eaa <UART_SetConfig+0x1ba>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e90:	e0ad      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e92:	2302      	movs	r3, #2
 8009e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e98:	e0a9      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e9a:	2304      	movs	r3, #4
 8009e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea0:	e0a5      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009ea2:	2308      	movs	r3, #8
 8009ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea8:	e0a1      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009eaa:	2310      	movs	r3, #16
 8009eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eb0:	e09d      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a4a      	ldr	r2, [pc, #296]	@ (8009fe0 <UART_SetConfig+0x2f0>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d125      	bne.n	8009f08 <UART_SetConfig+0x218>
 8009ebc:	4b45      	ldr	r3, [pc, #276]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ec2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ec8:	d016      	beq.n	8009ef8 <UART_SetConfig+0x208>
 8009eca:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ecc:	d818      	bhi.n	8009f00 <UART_SetConfig+0x210>
 8009ece:	2b80      	cmp	r3, #128	@ 0x80
 8009ed0:	d00a      	beq.n	8009ee8 <UART_SetConfig+0x1f8>
 8009ed2:	2b80      	cmp	r3, #128	@ 0x80
 8009ed4:	d814      	bhi.n	8009f00 <UART_SetConfig+0x210>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <UART_SetConfig+0x1f0>
 8009eda:	2b40      	cmp	r3, #64	@ 0x40
 8009edc:	d008      	beq.n	8009ef0 <UART_SetConfig+0x200>
 8009ede:	e00f      	b.n	8009f00 <UART_SetConfig+0x210>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee6:	e082      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eee:	e07e      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009ef0:	2304      	movs	r3, #4
 8009ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef6:	e07a      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009ef8:	2308      	movs	r3, #8
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009efe:	e076      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f00:	2310      	movs	r3, #16
 8009f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f06:	e072      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a35      	ldr	r2, [pc, #212]	@ (8009fe4 <UART_SetConfig+0x2f4>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d12a      	bne.n	8009f68 <UART_SetConfig+0x278>
 8009f12:	4b30      	ldr	r3, [pc, #192]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f20:	d01a      	beq.n	8009f58 <UART_SetConfig+0x268>
 8009f22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f26:	d81b      	bhi.n	8009f60 <UART_SetConfig+0x270>
 8009f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f2c:	d00c      	beq.n	8009f48 <UART_SetConfig+0x258>
 8009f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f32:	d815      	bhi.n	8009f60 <UART_SetConfig+0x270>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <UART_SetConfig+0x250>
 8009f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f3c:	d008      	beq.n	8009f50 <UART_SetConfig+0x260>
 8009f3e:	e00f      	b.n	8009f60 <UART_SetConfig+0x270>
 8009f40:	2300      	movs	r3, #0
 8009f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f46:	e052      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f48:	2302      	movs	r3, #2
 8009f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f4e:	e04e      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f50:	2304      	movs	r3, #4
 8009f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f56:	e04a      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f58:	2308      	movs	r3, #8
 8009f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f5e:	e046      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f60:	2310      	movs	r3, #16
 8009f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f66:	e042      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a17      	ldr	r2, [pc, #92]	@ (8009fcc <UART_SetConfig+0x2dc>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d13a      	bne.n	8009fe8 <UART_SetConfig+0x2f8>
 8009f72:	4b18      	ldr	r3, [pc, #96]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f80:	d01a      	beq.n	8009fb8 <UART_SetConfig+0x2c8>
 8009f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f86:	d81b      	bhi.n	8009fc0 <UART_SetConfig+0x2d0>
 8009f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f8c:	d00c      	beq.n	8009fa8 <UART_SetConfig+0x2b8>
 8009f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f92:	d815      	bhi.n	8009fc0 <UART_SetConfig+0x2d0>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <UART_SetConfig+0x2b0>
 8009f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f9c:	d008      	beq.n	8009fb0 <UART_SetConfig+0x2c0>
 8009f9e:	e00f      	b.n	8009fc0 <UART_SetConfig+0x2d0>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fa6:	e022      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fae:	e01e      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fb6:	e01a      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fb8:	2308      	movs	r3, #8
 8009fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fbe:	e016      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fc6:	e012      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fc8:	cfff69f3 	.word	0xcfff69f3
 8009fcc:	40008000 	.word	0x40008000
 8009fd0:	40013800 	.word	0x40013800
 8009fd4:	40021000 	.word	0x40021000
 8009fd8:	40004400 	.word	0x40004400
 8009fdc:	40004800 	.word	0x40004800
 8009fe0:	40004c00 	.word	0x40004c00
 8009fe4:	40005000 	.word	0x40005000
 8009fe8:	2310      	movs	r3, #16
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4aae      	ldr	r2, [pc, #696]	@ (800a2ac <UART_SetConfig+0x5bc>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	f040 8097 	bne.w	800a128 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ffe:	2b08      	cmp	r3, #8
 800a000:	d823      	bhi.n	800a04a <UART_SetConfig+0x35a>
 800a002:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <UART_SetConfig+0x318>)
 800a004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a008:	0800a02d 	.word	0x0800a02d
 800a00c:	0800a04b 	.word	0x0800a04b
 800a010:	0800a035 	.word	0x0800a035
 800a014:	0800a04b 	.word	0x0800a04b
 800a018:	0800a03b 	.word	0x0800a03b
 800a01c:	0800a04b 	.word	0x0800a04b
 800a020:	0800a04b 	.word	0x0800a04b
 800a024:	0800a04b 	.word	0x0800a04b
 800a028:	0800a043 	.word	0x0800a043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a02c:	f7fe f916 	bl	800825c <HAL_RCC_GetPCLK1Freq>
 800a030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a032:	e010      	b.n	800a056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a034:	4b9e      	ldr	r3, [pc, #632]	@ (800a2b0 <UART_SetConfig+0x5c0>)
 800a036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a038:	e00d      	b.n	800a056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a03a:	f7fe f877 	bl	800812c <HAL_RCC_GetSysClockFreq>
 800a03e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a040:	e009      	b.n	800a056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a048:	e005      	b.n	800a056 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a054:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 8130 	beq.w	800a2be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a062:	4a94      	ldr	r2, [pc, #592]	@ (800a2b4 <UART_SetConfig+0x5c4>)
 800a064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a068:	461a      	mov	r2, r3
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a070:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	4613      	mov	r3, r2
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	4413      	add	r3, r2
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d305      	bcc.n	800a08e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a088:	69ba      	ldr	r2, [r7, #24]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d903      	bls.n	800a096 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a094:	e113      	b.n	800a2be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	2200      	movs	r2, #0
 800a09a:	60bb      	str	r3, [r7, #8]
 800a09c:	60fa      	str	r2, [r7, #12]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a2:	4a84      	ldr	r2, [pc, #528]	@ (800a2b4 <UART_SetConfig+0x5c4>)
 800a0a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0b8:	f7f6 f90a 	bl	80002d0 <__aeabi_uldivmod>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	f04f 0200 	mov.w	r2, #0
 800a0c8:	f04f 0300 	mov.w	r3, #0
 800a0cc:	020b      	lsls	r3, r1, #8
 800a0ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0d2:	0202      	lsls	r2, r0, #8
 800a0d4:	6979      	ldr	r1, [r7, #20]
 800a0d6:	6849      	ldr	r1, [r1, #4]
 800a0d8:	0849      	lsrs	r1, r1, #1
 800a0da:	2000      	movs	r0, #0
 800a0dc:	460c      	mov	r4, r1
 800a0de:	4605      	mov	r5, r0
 800a0e0:	eb12 0804 	adds.w	r8, r2, r4
 800a0e4:	eb43 0905 	adc.w	r9, r3, r5
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	469a      	mov	sl, r3
 800a0f0:	4693      	mov	fp, r2
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	f7f6 f8e9 	bl	80002d0 <__aeabi_uldivmod>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4613      	mov	r3, r2
 800a104:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a10c:	d308      	bcc.n	800a120 <UART_SetConfig+0x430>
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a114:	d204      	bcs.n	800a120 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6a3a      	ldr	r2, [r7, #32]
 800a11c:	60da      	str	r2, [r3, #12]
 800a11e:	e0ce      	b.n	800a2be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a126:	e0ca      	b.n	800a2be <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a130:	d166      	bne.n	800a200 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a132:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a136:	2b08      	cmp	r3, #8
 800a138:	d827      	bhi.n	800a18a <UART_SetConfig+0x49a>
 800a13a:	a201      	add	r2, pc, #4	@ (adr r2, 800a140 <UART_SetConfig+0x450>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a16d 	.word	0x0800a16d
 800a148:	0800a175 	.word	0x0800a175
 800a14c:	0800a18b 	.word	0x0800a18b
 800a150:	0800a17b 	.word	0x0800a17b
 800a154:	0800a18b 	.word	0x0800a18b
 800a158:	0800a18b 	.word	0x0800a18b
 800a15c:	0800a18b 	.word	0x0800a18b
 800a160:	0800a183 	.word	0x0800a183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a164:	f7fe f87a 	bl	800825c <HAL_RCC_GetPCLK1Freq>
 800a168:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a16a:	e014      	b.n	800a196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a16c:	f7fe f88c 	bl	8008288 <HAL_RCC_GetPCLK2Freq>
 800a170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a172:	e010      	b.n	800a196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a174:	4b4e      	ldr	r3, [pc, #312]	@ (800a2b0 <UART_SetConfig+0x5c0>)
 800a176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a178:	e00d      	b.n	800a196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a17a:	f7fd ffd7 	bl	800812c <HAL_RCC_GetSysClockFreq>
 800a17e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a180:	e009      	b.n	800a196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a188:	e005      	b.n	800a196 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 8090 	beq.w	800a2be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a2:	4a44      	ldr	r2, [pc, #272]	@ (800a2b4 <UART_SetConfig+0x5c4>)
 800a1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1b0:	005a      	lsls	r2, r3, #1
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	085b      	lsrs	r3, r3, #1
 800a1b8:	441a      	add	r2, r3
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	2b0f      	cmp	r3, #15
 800a1c8:	d916      	bls.n	800a1f8 <UART_SetConfig+0x508>
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d0:	d212      	bcs.n	800a1f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f023 030f 	bic.w	r3, r3, #15
 800a1da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	085b      	lsrs	r3, r3, #1
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	8bfb      	ldrh	r3, [r7, #30]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	8bfa      	ldrh	r2, [r7, #30]
 800a1f4:	60da      	str	r2, [r3, #12]
 800a1f6:	e062      	b.n	800a2be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1fe:	e05e      	b.n	800a2be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a204:	2b08      	cmp	r3, #8
 800a206:	d828      	bhi.n	800a25a <UART_SetConfig+0x56a>
 800a208:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <UART_SetConfig+0x520>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a235 	.word	0x0800a235
 800a214:	0800a23d 	.word	0x0800a23d
 800a218:	0800a245 	.word	0x0800a245
 800a21c:	0800a25b 	.word	0x0800a25b
 800a220:	0800a24b 	.word	0x0800a24b
 800a224:	0800a25b 	.word	0x0800a25b
 800a228:	0800a25b 	.word	0x0800a25b
 800a22c:	0800a25b 	.word	0x0800a25b
 800a230:	0800a253 	.word	0x0800a253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a234:	f7fe f812 	bl	800825c <HAL_RCC_GetPCLK1Freq>
 800a238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a23a:	e014      	b.n	800a266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a23c:	f7fe f824 	bl	8008288 <HAL_RCC_GetPCLK2Freq>
 800a240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a242:	e010      	b.n	800a266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a244:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b0 <UART_SetConfig+0x5c0>)
 800a246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a248:	e00d      	b.n	800a266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a24a:	f7fd ff6f 	bl	800812c <HAL_RCC_GetSysClockFreq>
 800a24e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a250:	e009      	b.n	800a266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a258:	e005      	b.n	800a266 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a264:	bf00      	nop
    }

    if (pclk != 0U)
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d028      	beq.n	800a2be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a270:	4a10      	ldr	r2, [pc, #64]	@ (800a2b4 <UART_SetConfig+0x5c4>)
 800a272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a276:	461a      	mov	r2, r3
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	441a      	add	r2, r3
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	2b0f      	cmp	r3, #15
 800a294:	d910      	bls.n	800a2b8 <UART_SetConfig+0x5c8>
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a29c:	d20c      	bcs.n	800a2b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60da      	str	r2, [r3, #12]
 800a2a8:	e009      	b.n	800a2be <UART_SetConfig+0x5ce>
 800a2aa:	bf00      	nop
 800a2ac:	40008000 	.word	0x40008000
 800a2b0:	00f42400 	.word	0x00f42400
 800a2b4:	0801a050 	.word	0x0801a050
      }
      else
      {
        ret = HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a2da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3730      	adds	r7, #48	@ 0x30
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a2e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f4:	f003 0308 	and.w	r3, r3, #8
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00a      	beq.n	800a356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35a:	f003 0304 	and.w	r3, r3, #4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00a      	beq.n	800a378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	430a      	orrs	r2, r1
 800a376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37c:	f003 0310 	and.w	r3, r3, #16
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00a      	beq.n	800a39a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39e:	f003 0320 	and.w	r3, r3, #32
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d01a      	beq.n	800a3fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3e6:	d10a      	bne.n	800a3fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	430a      	orrs	r2, r1
 800a41e:	605a      	str	r2, [r3, #4]
  }
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b098      	sub	sp, #96	@ 0x60
 800a430:	af02      	add	r7, sp, #8
 800a432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a43c:	f7fb ffca 	bl	80063d4 <HAL_GetTick>
 800a440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0308 	and.w	r3, r3, #8
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d12f      	bne.n	800a4b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a458:	2200      	movs	r2, #0
 800a45a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f88e 	bl	800a580 <UART_WaitOnFlagUntilTimeout>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d022      	beq.n	800a4b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a47a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a47e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a488:	647b      	str	r3, [r7, #68]	@ 0x44
 800a48a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a48e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e6      	bne.n	800a46a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e063      	b.n	800a578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 0304 	and.w	r3, r3, #4
 800a4ba:	2b04      	cmp	r3, #4
 800a4bc:	d149      	bne.n	800a552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f857 	bl	800a580 <UART_WaitOnFlagUntilTimeout>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d03c      	beq.n	800a552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e0:	e853 3f00 	ldrex	r3, [r3]
 800a4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4fe:	e841 2300 	strex	r3, r2, [r1]
 800a502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1e6      	bne.n	800a4d8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3308      	adds	r3, #8
 800a510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	e853 3f00 	ldrex	r3, [r3]
 800a518:	60fb      	str	r3, [r7, #12]
   return(result);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f023 0301 	bic.w	r3, r3, #1
 800a520:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3308      	adds	r3, #8
 800a528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a52a:	61fa      	str	r2, [r7, #28]
 800a52c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52e:	69b9      	ldr	r1, [r7, #24]
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	e841 2300 	strex	r3, r2, [r1]
 800a536:	617b      	str	r3, [r7, #20]
   return(result);
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1e5      	bne.n	800a50a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2220      	movs	r2, #32
 800a542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e012      	b.n	800a578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2220      	movs	r2, #32
 800a556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2220      	movs	r2, #32
 800a55e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3758      	adds	r7, #88	@ 0x58
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	603b      	str	r3, [r7, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a590:	e049      	b.n	800a626 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a598:	d045      	beq.n	800a626 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a59a:	f7fb ff1b 	bl	80063d4 <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	69ba      	ldr	r2, [r7, #24]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d302      	bcc.n	800a5b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e048      	b.n	800a646 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0304 	and.w	r3, r3, #4
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d031      	beq.n	800a626 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	f003 0308 	and.w	r3, r3, #8
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d110      	bne.n	800a5f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2208      	movs	r2, #8
 800a5d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 f838 	bl	800a64e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2208      	movs	r2, #8
 800a5e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e029      	b.n	800a646 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a600:	d111      	bne.n	800a626 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a60a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 f81e 	bl	800a64e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2220      	movs	r2, #32
 800a616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e00f      	b.n	800a646 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69da      	ldr	r2, [r3, #28]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4013      	ands	r3, r2
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	429a      	cmp	r2, r3
 800a634:	bf0c      	ite	eq
 800a636:	2301      	moveq	r3, #1
 800a638:	2300      	movne	r3, #0
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	429a      	cmp	r2, r3
 800a642:	d0a6      	beq.n	800a592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a64e:	b480      	push	{r7}
 800a650:	b095      	sub	sp, #84	@ 0x54
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65e:	e853 3f00 	ldrex	r3, [r3]
 800a662:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a666:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a66a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	461a      	mov	r2, r3
 800a672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a674:	643b      	str	r3, [r7, #64]	@ 0x40
 800a676:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a678:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a67a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a67c:	e841 2300 	strex	r3, r2, [r1]
 800a680:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e6      	bne.n	800a656 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3308      	adds	r3, #8
 800a68e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	61fb      	str	r3, [r7, #28]
   return(result);
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a69e:	f023 0301 	bic.w	r3, r3, #1
 800a6a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e3      	bne.n	800a688 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d118      	bne.n	800a6fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	e853 3f00 	ldrex	r3, [r3]
 800a6d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f023 0310 	bic.w	r3, r3, #16
 800a6dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6e6:	61bb      	str	r3, [r7, #24]
 800a6e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ea:	6979      	ldr	r1, [r7, #20]
 800a6ec:	69ba      	ldr	r2, [r7, #24]
 800a6ee:	e841 2300 	strex	r3, r2, [r1]
 800a6f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e6      	bne.n	800a6c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a70e:	bf00      	nop
 800a710:	3754      	adds	r7, #84	@ 0x54
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d101      	bne.n	800a730 <HAL_UARTEx_DisableFifoMode+0x16>
 800a72c:	2302      	movs	r3, #2
 800a72e:	e027      	b.n	800a780 <HAL_UARTEx_DisableFifoMode+0x66>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2224      	movs	r2, #36	@ 0x24
 800a73c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f022 0201 	bic.w	r2, r2, #1
 800a756:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a75e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d101      	bne.n	800a7a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	e02d      	b.n	800a800 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2224      	movs	r2, #36	@ 0x24
 800a7b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 0201 	bic.w	r2, r2, #1
 800a7ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f84f 	bl	800a884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d101      	bne.n	800a820 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a81c:	2302      	movs	r3, #2
 800a81e:	e02d      	b.n	800a87c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2224      	movs	r2, #36	@ 0x24
 800a82c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 0201 	bic.w	r2, r2, #1
 800a846:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	430a      	orrs	r2, r1
 800a85a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f811 	bl	800a884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2220      	movs	r2, #32
 800a86e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a890:	2b00      	cmp	r3, #0
 800a892:	d108      	bne.n	800a8a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8a4:	e031      	b.n	800a90a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8a6:	2308      	movs	r3, #8
 800a8a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8aa:	2308      	movs	r3, #8
 800a8ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	0e5b      	lsrs	r3, r3, #25
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 0307 	and.w	r3, r3, #7
 800a8bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	0f5b      	lsrs	r3, r3, #29
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	f003 0307 	and.w	r3, r3, #7
 800a8cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
 800a8d0:	7b3a      	ldrb	r2, [r7, #12]
 800a8d2:	4911      	ldr	r1, [pc, #68]	@ (800a918 <UARTEx_SetNbDataToProcess+0x94>)
 800a8d4:	5c8a      	ldrb	r2, [r1, r2]
 800a8d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8da:	7b3a      	ldrb	r2, [r7, #12]
 800a8dc:	490f      	ldr	r1, [pc, #60]	@ (800a91c <UARTEx_SetNbDataToProcess+0x98>)
 800a8de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	7b7a      	ldrb	r2, [r7, #13]
 800a8f0:	4909      	ldr	r1, [pc, #36]	@ (800a918 <UARTEx_SetNbDataToProcess+0x94>)
 800a8f2:	5c8a      	ldrb	r2, [r1, r2]
 800a8f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8f8:	7b7a      	ldrb	r2, [r7, #13]
 800a8fa:	4908      	ldr	r1, [pc, #32]	@ (800a91c <UARTEx_SetNbDataToProcess+0x98>)
 800a8fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800a902:	b29a      	uxth	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a90a:	bf00      	nop
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	0801a068 	.word	0x0801a068
 800a91c:	0801a070 	.word	0x0801a070

0800a920 <siprintf>:
 800a920:	b40e      	push	{r1, r2, r3}
 800a922:	b500      	push	{lr}
 800a924:	b09c      	sub	sp, #112	@ 0x70
 800a926:	ab1d      	add	r3, sp, #116	@ 0x74
 800a928:	9002      	str	r0, [sp, #8]
 800a92a:	9006      	str	r0, [sp, #24]
 800a92c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a930:	4809      	ldr	r0, [pc, #36]	@ (800a958 <siprintf+0x38>)
 800a932:	9107      	str	r1, [sp, #28]
 800a934:	9104      	str	r1, [sp, #16]
 800a936:	4909      	ldr	r1, [pc, #36]	@ (800a95c <siprintf+0x3c>)
 800a938:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93c:	9105      	str	r1, [sp, #20]
 800a93e:	6800      	ldr	r0, [r0, #0]
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	a902      	add	r1, sp, #8
 800a944:	f000 f8aa 	bl	800aa9c <_svfiprintf_r>
 800a948:	9b02      	ldr	r3, [sp, #8]
 800a94a:	2200      	movs	r2, #0
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	b01c      	add	sp, #112	@ 0x70
 800a950:	f85d eb04 	ldr.w	lr, [sp], #4
 800a954:	b003      	add	sp, #12
 800a956:	4770      	bx	lr
 800a958:	20000010 	.word	0x20000010
 800a95c:	ffff0208 	.word	0xffff0208

0800a960 <memset>:
 800a960:	4402      	add	r2, r0
 800a962:	4603      	mov	r3, r0
 800a964:	4293      	cmp	r3, r2
 800a966:	d100      	bne.n	800a96a <memset+0xa>
 800a968:	4770      	bx	lr
 800a96a:	f803 1b01 	strb.w	r1, [r3], #1
 800a96e:	e7f9      	b.n	800a964 <memset+0x4>

0800a970 <__errno>:
 800a970:	4b01      	ldr	r3, [pc, #4]	@ (800a978 <__errno+0x8>)
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	20000010 	.word	0x20000010

0800a97c <__libc_init_array>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	4d0d      	ldr	r5, [pc, #52]	@ (800a9b4 <__libc_init_array+0x38>)
 800a980:	4c0d      	ldr	r4, [pc, #52]	@ (800a9b8 <__libc_init_array+0x3c>)
 800a982:	1b64      	subs	r4, r4, r5
 800a984:	10a4      	asrs	r4, r4, #2
 800a986:	2600      	movs	r6, #0
 800a988:	42a6      	cmp	r6, r4
 800a98a:	d109      	bne.n	800a9a0 <__libc_init_array+0x24>
 800a98c:	4d0b      	ldr	r5, [pc, #44]	@ (800a9bc <__libc_init_array+0x40>)
 800a98e:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c0 <__libc_init_array+0x44>)
 800a990:	f000 fc66 	bl	800b260 <_init>
 800a994:	1b64      	subs	r4, r4, r5
 800a996:	10a4      	asrs	r4, r4, #2
 800a998:	2600      	movs	r6, #0
 800a99a:	42a6      	cmp	r6, r4
 800a99c:	d105      	bne.n	800a9aa <__libc_init_array+0x2e>
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a4:	4798      	blx	r3
 800a9a6:	3601      	adds	r6, #1
 800a9a8:	e7ee      	b.n	800a988 <__libc_init_array+0xc>
 800a9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ae:	4798      	blx	r3
 800a9b0:	3601      	adds	r6, #1
 800a9b2:	e7f2      	b.n	800a99a <__libc_init_array+0x1e>
 800a9b4:	0801a0b4 	.word	0x0801a0b4
 800a9b8:	0801a0b4 	.word	0x0801a0b4
 800a9bc:	0801a0b4 	.word	0x0801a0b4
 800a9c0:	0801a0b8 	.word	0x0801a0b8

0800a9c4 <__retarget_lock_acquire_recursive>:
 800a9c4:	4770      	bx	lr

0800a9c6 <__retarget_lock_release_recursive>:
 800a9c6:	4770      	bx	lr

0800a9c8 <memcpy>:
 800a9c8:	440a      	add	r2, r1
 800a9ca:	4291      	cmp	r1, r2
 800a9cc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a9d0:	d100      	bne.n	800a9d4 <memcpy+0xc>
 800a9d2:	4770      	bx	lr
 800a9d4:	b510      	push	{r4, lr}
 800a9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9de:	4291      	cmp	r1, r2
 800a9e0:	d1f9      	bne.n	800a9d6 <memcpy+0xe>
 800a9e2:	bd10      	pop	{r4, pc}

0800a9e4 <__ssputs_r>:
 800a9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e8:	688e      	ldr	r6, [r1, #8]
 800a9ea:	461f      	mov	r7, r3
 800a9ec:	42be      	cmp	r6, r7
 800a9ee:	680b      	ldr	r3, [r1, #0]
 800a9f0:	4682      	mov	sl, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	4690      	mov	r8, r2
 800a9f6:	d82d      	bhi.n	800aa54 <__ssputs_r+0x70>
 800a9f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa00:	d026      	beq.n	800aa50 <__ssputs_r+0x6c>
 800aa02:	6965      	ldr	r5, [r4, #20]
 800aa04:	6909      	ldr	r1, [r1, #16]
 800aa06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa0a:	eba3 0901 	sub.w	r9, r3, r1
 800aa0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa12:	1c7b      	adds	r3, r7, #1
 800aa14:	444b      	add	r3, r9
 800aa16:	106d      	asrs	r5, r5, #1
 800aa18:	429d      	cmp	r5, r3
 800aa1a:	bf38      	it	cc
 800aa1c:	461d      	movcc	r5, r3
 800aa1e:	0553      	lsls	r3, r2, #21
 800aa20:	d527      	bpl.n	800aa72 <__ssputs_r+0x8e>
 800aa22:	4629      	mov	r1, r5
 800aa24:	f000 f958 	bl	800acd8 <_malloc_r>
 800aa28:	4606      	mov	r6, r0
 800aa2a:	b360      	cbz	r0, 800aa86 <__ssputs_r+0xa2>
 800aa2c:	6921      	ldr	r1, [r4, #16]
 800aa2e:	464a      	mov	r2, r9
 800aa30:	f7ff ffca 	bl	800a9c8 <memcpy>
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	6126      	str	r6, [r4, #16]
 800aa42:	6165      	str	r5, [r4, #20]
 800aa44:	444e      	add	r6, r9
 800aa46:	eba5 0509 	sub.w	r5, r5, r9
 800aa4a:	6026      	str	r6, [r4, #0]
 800aa4c:	60a5      	str	r5, [r4, #8]
 800aa4e:	463e      	mov	r6, r7
 800aa50:	42be      	cmp	r6, r7
 800aa52:	d900      	bls.n	800aa56 <__ssputs_r+0x72>
 800aa54:	463e      	mov	r6, r7
 800aa56:	6820      	ldr	r0, [r4, #0]
 800aa58:	4632      	mov	r2, r6
 800aa5a:	4641      	mov	r1, r8
 800aa5c:	f000 fb84 	bl	800b168 <memmove>
 800aa60:	68a3      	ldr	r3, [r4, #8]
 800aa62:	1b9b      	subs	r3, r3, r6
 800aa64:	60a3      	str	r3, [r4, #8]
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	4433      	add	r3, r6
 800aa6a:	6023      	str	r3, [r4, #0]
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa72:	462a      	mov	r2, r5
 800aa74:	f000 fb4a 	bl	800b10c <_realloc_r>
 800aa78:	4606      	mov	r6, r0
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d1e0      	bne.n	800aa40 <__ssputs_r+0x5c>
 800aa7e:	6921      	ldr	r1, [r4, #16]
 800aa80:	4650      	mov	r0, sl
 800aa82:	f000 fb9b 	bl	800b1bc <_free_r>
 800aa86:	230c      	movs	r3, #12
 800aa88:	f8ca 3000 	str.w	r3, [sl]
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa92:	81a3      	strh	r3, [r4, #12]
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa98:	e7e9      	b.n	800aa6e <__ssputs_r+0x8a>
	...

0800aa9c <_svfiprintf_r>:
 800aa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	4698      	mov	r8, r3
 800aaa2:	898b      	ldrh	r3, [r1, #12]
 800aaa4:	061b      	lsls	r3, r3, #24
 800aaa6:	b09d      	sub	sp, #116	@ 0x74
 800aaa8:	4607      	mov	r7, r0
 800aaaa:	460d      	mov	r5, r1
 800aaac:	4614      	mov	r4, r2
 800aaae:	d510      	bpl.n	800aad2 <_svfiprintf_r+0x36>
 800aab0:	690b      	ldr	r3, [r1, #16]
 800aab2:	b973      	cbnz	r3, 800aad2 <_svfiprintf_r+0x36>
 800aab4:	2140      	movs	r1, #64	@ 0x40
 800aab6:	f000 f90f 	bl	800acd8 <_malloc_r>
 800aaba:	6028      	str	r0, [r5, #0]
 800aabc:	6128      	str	r0, [r5, #16]
 800aabe:	b930      	cbnz	r0, 800aace <_svfiprintf_r+0x32>
 800aac0:	230c      	movs	r3, #12
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aac8:	b01d      	add	sp, #116	@ 0x74
 800aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aace:	2340      	movs	r3, #64	@ 0x40
 800aad0:	616b      	str	r3, [r5, #20]
 800aad2:	2300      	movs	r3, #0
 800aad4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad6:	2320      	movs	r3, #32
 800aad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aadc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aae0:	2330      	movs	r3, #48	@ 0x30
 800aae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac80 <_svfiprintf_r+0x1e4>
 800aae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aaea:	f04f 0901 	mov.w	r9, #1
 800aaee:	4623      	mov	r3, r4
 800aaf0:	469a      	mov	sl, r3
 800aaf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaf6:	b10a      	cbz	r2, 800aafc <_svfiprintf_r+0x60>
 800aaf8:	2a25      	cmp	r2, #37	@ 0x25
 800aafa:	d1f9      	bne.n	800aaf0 <_svfiprintf_r+0x54>
 800aafc:	ebba 0b04 	subs.w	fp, sl, r4
 800ab00:	d00b      	beq.n	800ab1a <_svfiprintf_r+0x7e>
 800ab02:	465b      	mov	r3, fp
 800ab04:	4622      	mov	r2, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	4638      	mov	r0, r7
 800ab0a:	f7ff ff6b 	bl	800a9e4 <__ssputs_r>
 800ab0e:	3001      	adds	r0, #1
 800ab10:	f000 80a7 	beq.w	800ac62 <_svfiprintf_r+0x1c6>
 800ab14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab16:	445a      	add	r2, fp
 800ab18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 809f 	beq.w	800ac62 <_svfiprintf_r+0x1c6>
 800ab24:	2300      	movs	r3, #0
 800ab26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab2e:	f10a 0a01 	add.w	sl, sl, #1
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	9307      	str	r3, [sp, #28]
 800ab36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab3c:	4654      	mov	r4, sl
 800ab3e:	2205      	movs	r2, #5
 800ab40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab44:	484e      	ldr	r0, [pc, #312]	@ (800ac80 <_svfiprintf_r+0x1e4>)
 800ab46:	f7f5 fb73 	bl	8000230 <memchr>
 800ab4a:	9a04      	ldr	r2, [sp, #16]
 800ab4c:	b9d8      	cbnz	r0, 800ab86 <_svfiprintf_r+0xea>
 800ab4e:	06d0      	lsls	r0, r2, #27
 800ab50:	bf44      	itt	mi
 800ab52:	2320      	movmi	r3, #32
 800ab54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab58:	0711      	lsls	r1, r2, #28
 800ab5a:	bf44      	itt	mi
 800ab5c:	232b      	movmi	r3, #43	@ 0x2b
 800ab5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab62:	f89a 3000 	ldrb.w	r3, [sl]
 800ab66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab68:	d015      	beq.n	800ab96 <_svfiprintf_r+0xfa>
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	4654      	mov	r4, sl
 800ab6e:	2000      	movs	r0, #0
 800ab70:	f04f 0c0a 	mov.w	ip, #10
 800ab74:	4621      	mov	r1, r4
 800ab76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab7a:	3b30      	subs	r3, #48	@ 0x30
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	d94b      	bls.n	800ac18 <_svfiprintf_r+0x17c>
 800ab80:	b1b0      	cbz	r0, 800abb0 <_svfiprintf_r+0x114>
 800ab82:	9207      	str	r2, [sp, #28]
 800ab84:	e014      	b.n	800abb0 <_svfiprintf_r+0x114>
 800ab86:	eba0 0308 	sub.w	r3, r0, r8
 800ab8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	46a2      	mov	sl, r4
 800ab94:	e7d2      	b.n	800ab3c <_svfiprintf_r+0xa0>
 800ab96:	9b03      	ldr	r3, [sp, #12]
 800ab98:	1d19      	adds	r1, r3, #4
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	9103      	str	r1, [sp, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bfbb      	ittet	lt
 800aba2:	425b      	neglt	r3, r3
 800aba4:	f042 0202 	orrlt.w	r2, r2, #2
 800aba8:	9307      	strge	r3, [sp, #28]
 800abaa:	9307      	strlt	r3, [sp, #28]
 800abac:	bfb8      	it	lt
 800abae:	9204      	strlt	r2, [sp, #16]
 800abb0:	7823      	ldrb	r3, [r4, #0]
 800abb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800abb4:	d10a      	bne.n	800abcc <_svfiprintf_r+0x130>
 800abb6:	7863      	ldrb	r3, [r4, #1]
 800abb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800abba:	d132      	bne.n	800ac22 <_svfiprintf_r+0x186>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	1d1a      	adds	r2, r3, #4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	9203      	str	r2, [sp, #12]
 800abc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abc8:	3402      	adds	r4, #2
 800abca:	9305      	str	r3, [sp, #20]
 800abcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac90 <_svfiprintf_r+0x1f4>
 800abd0:	7821      	ldrb	r1, [r4, #0]
 800abd2:	2203      	movs	r2, #3
 800abd4:	4650      	mov	r0, sl
 800abd6:	f7f5 fb2b 	bl	8000230 <memchr>
 800abda:	b138      	cbz	r0, 800abec <_svfiprintf_r+0x150>
 800abdc:	9b04      	ldr	r3, [sp, #16]
 800abde:	eba0 000a 	sub.w	r0, r0, sl
 800abe2:	2240      	movs	r2, #64	@ 0x40
 800abe4:	4082      	lsls	r2, r0
 800abe6:	4313      	orrs	r3, r2
 800abe8:	3401      	adds	r4, #1
 800abea:	9304      	str	r3, [sp, #16]
 800abec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf0:	4824      	ldr	r0, [pc, #144]	@ (800ac84 <_svfiprintf_r+0x1e8>)
 800abf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abf6:	2206      	movs	r2, #6
 800abf8:	f7f5 fb1a 	bl	8000230 <memchr>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d036      	beq.n	800ac6e <_svfiprintf_r+0x1d2>
 800ac00:	4b21      	ldr	r3, [pc, #132]	@ (800ac88 <_svfiprintf_r+0x1ec>)
 800ac02:	bb1b      	cbnz	r3, 800ac4c <_svfiprintf_r+0x1b0>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	3307      	adds	r3, #7
 800ac08:	f023 0307 	bic.w	r3, r3, #7
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	9303      	str	r3, [sp, #12]
 800ac10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac12:	4433      	add	r3, r6
 800ac14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac16:	e76a      	b.n	800aaee <_svfiprintf_r+0x52>
 800ac18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	2001      	movs	r0, #1
 800ac20:	e7a8      	b.n	800ab74 <_svfiprintf_r+0xd8>
 800ac22:	2300      	movs	r3, #0
 800ac24:	3401      	adds	r4, #1
 800ac26:	9305      	str	r3, [sp, #20]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	f04f 0c0a 	mov.w	ip, #10
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac34:	3a30      	subs	r2, #48	@ 0x30
 800ac36:	2a09      	cmp	r2, #9
 800ac38:	d903      	bls.n	800ac42 <_svfiprintf_r+0x1a6>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d0c6      	beq.n	800abcc <_svfiprintf_r+0x130>
 800ac3e:	9105      	str	r1, [sp, #20]
 800ac40:	e7c4      	b.n	800abcc <_svfiprintf_r+0x130>
 800ac42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac46:	4604      	mov	r4, r0
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e7f0      	b.n	800ac2e <_svfiprintf_r+0x192>
 800ac4c:	ab03      	add	r3, sp, #12
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	462a      	mov	r2, r5
 800ac52:	4b0e      	ldr	r3, [pc, #56]	@ (800ac8c <_svfiprintf_r+0x1f0>)
 800ac54:	a904      	add	r1, sp, #16
 800ac56:	4638      	mov	r0, r7
 800ac58:	f3af 8000 	nop.w
 800ac5c:	1c42      	adds	r2, r0, #1
 800ac5e:	4606      	mov	r6, r0
 800ac60:	d1d6      	bne.n	800ac10 <_svfiprintf_r+0x174>
 800ac62:	89ab      	ldrh	r3, [r5, #12]
 800ac64:	065b      	lsls	r3, r3, #25
 800ac66:	f53f af2d 	bmi.w	800aac4 <_svfiprintf_r+0x28>
 800ac6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac6c:	e72c      	b.n	800aac8 <_svfiprintf_r+0x2c>
 800ac6e:	ab03      	add	r3, sp, #12
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	462a      	mov	r2, r5
 800ac74:	4b05      	ldr	r3, [pc, #20]	@ (800ac8c <_svfiprintf_r+0x1f0>)
 800ac76:	a904      	add	r1, sp, #16
 800ac78:	4638      	mov	r0, r7
 800ac7a:	f000 f91b 	bl	800aeb4 <_printf_i>
 800ac7e:	e7ed      	b.n	800ac5c <_svfiprintf_r+0x1c0>
 800ac80:	0801a078 	.word	0x0801a078
 800ac84:	0801a082 	.word	0x0801a082
 800ac88:	00000000 	.word	0x00000000
 800ac8c:	0800a9e5 	.word	0x0800a9e5
 800ac90:	0801a07e 	.word	0x0801a07e

0800ac94 <sbrk_aligned>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	4e0f      	ldr	r6, [pc, #60]	@ (800acd4 <sbrk_aligned+0x40>)
 800ac98:	460c      	mov	r4, r1
 800ac9a:	6831      	ldr	r1, [r6, #0]
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	b911      	cbnz	r1, 800aca6 <sbrk_aligned+0x12>
 800aca0:	f000 fa7c 	bl	800b19c <_sbrk_r>
 800aca4:	6030      	str	r0, [r6, #0]
 800aca6:	4621      	mov	r1, r4
 800aca8:	4628      	mov	r0, r5
 800acaa:	f000 fa77 	bl	800b19c <_sbrk_r>
 800acae:	1c43      	adds	r3, r0, #1
 800acb0:	d103      	bne.n	800acba <sbrk_aligned+0x26>
 800acb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800acb6:	4620      	mov	r0, r4
 800acb8:	bd70      	pop	{r4, r5, r6, pc}
 800acba:	1cc4      	adds	r4, r0, #3
 800acbc:	f024 0403 	bic.w	r4, r4, #3
 800acc0:	42a0      	cmp	r0, r4
 800acc2:	d0f8      	beq.n	800acb6 <sbrk_aligned+0x22>
 800acc4:	1a21      	subs	r1, r4, r0
 800acc6:	4628      	mov	r0, r5
 800acc8:	f000 fa68 	bl	800b19c <_sbrk_r>
 800accc:	3001      	adds	r0, #1
 800acce:	d1f2      	bne.n	800acb6 <sbrk_aligned+0x22>
 800acd0:	e7ef      	b.n	800acb2 <sbrk_aligned+0x1e>
 800acd2:	bf00      	nop
 800acd4:	20000af8 	.word	0x20000af8

0800acd8 <_malloc_r>:
 800acd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acdc:	1ccd      	adds	r5, r1, #3
 800acde:	f025 0503 	bic.w	r5, r5, #3
 800ace2:	3508      	adds	r5, #8
 800ace4:	2d0c      	cmp	r5, #12
 800ace6:	bf38      	it	cc
 800ace8:	250c      	movcc	r5, #12
 800acea:	2d00      	cmp	r5, #0
 800acec:	4606      	mov	r6, r0
 800acee:	db01      	blt.n	800acf4 <_malloc_r+0x1c>
 800acf0:	42a9      	cmp	r1, r5
 800acf2:	d904      	bls.n	800acfe <_malloc_r+0x26>
 800acf4:	230c      	movs	r3, #12
 800acf6:	6033      	str	r3, [r6, #0]
 800acf8:	2000      	movs	r0, #0
 800acfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800add4 <_malloc_r+0xfc>
 800ad02:	f000 f9f7 	bl	800b0f4 <__malloc_lock>
 800ad06:	f8d8 3000 	ldr.w	r3, [r8]
 800ad0a:	461c      	mov	r4, r3
 800ad0c:	bb44      	cbnz	r4, 800ad60 <_malloc_r+0x88>
 800ad0e:	4629      	mov	r1, r5
 800ad10:	4630      	mov	r0, r6
 800ad12:	f7ff ffbf 	bl	800ac94 <sbrk_aligned>
 800ad16:	1c43      	adds	r3, r0, #1
 800ad18:	4604      	mov	r4, r0
 800ad1a:	d158      	bne.n	800adce <_malloc_r+0xf6>
 800ad1c:	f8d8 4000 	ldr.w	r4, [r8]
 800ad20:	4627      	mov	r7, r4
 800ad22:	2f00      	cmp	r7, #0
 800ad24:	d143      	bne.n	800adae <_malloc_r+0xd6>
 800ad26:	2c00      	cmp	r4, #0
 800ad28:	d04b      	beq.n	800adc2 <_malloc_r+0xea>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	4630      	mov	r0, r6
 800ad30:	eb04 0903 	add.w	r9, r4, r3
 800ad34:	f000 fa32 	bl	800b19c <_sbrk_r>
 800ad38:	4581      	cmp	r9, r0
 800ad3a:	d142      	bne.n	800adc2 <_malloc_r+0xea>
 800ad3c:	6821      	ldr	r1, [r4, #0]
 800ad3e:	1a6d      	subs	r5, r5, r1
 800ad40:	4629      	mov	r1, r5
 800ad42:	4630      	mov	r0, r6
 800ad44:	f7ff ffa6 	bl	800ac94 <sbrk_aligned>
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d03a      	beq.n	800adc2 <_malloc_r+0xea>
 800ad4c:	6823      	ldr	r3, [r4, #0]
 800ad4e:	442b      	add	r3, r5
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	f8d8 3000 	ldr.w	r3, [r8]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	bb62      	cbnz	r2, 800adb4 <_malloc_r+0xdc>
 800ad5a:	f8c8 7000 	str.w	r7, [r8]
 800ad5e:	e00f      	b.n	800ad80 <_malloc_r+0xa8>
 800ad60:	6822      	ldr	r2, [r4, #0]
 800ad62:	1b52      	subs	r2, r2, r5
 800ad64:	d420      	bmi.n	800ada8 <_malloc_r+0xd0>
 800ad66:	2a0b      	cmp	r2, #11
 800ad68:	d917      	bls.n	800ad9a <_malloc_r+0xc2>
 800ad6a:	1961      	adds	r1, r4, r5
 800ad6c:	42a3      	cmp	r3, r4
 800ad6e:	6025      	str	r5, [r4, #0]
 800ad70:	bf18      	it	ne
 800ad72:	6059      	strne	r1, [r3, #4]
 800ad74:	6863      	ldr	r3, [r4, #4]
 800ad76:	bf08      	it	eq
 800ad78:	f8c8 1000 	streq.w	r1, [r8]
 800ad7c:	5162      	str	r2, [r4, r5]
 800ad7e:	604b      	str	r3, [r1, #4]
 800ad80:	4630      	mov	r0, r6
 800ad82:	f000 f9bd 	bl	800b100 <__malloc_unlock>
 800ad86:	f104 000b 	add.w	r0, r4, #11
 800ad8a:	1d23      	adds	r3, r4, #4
 800ad8c:	f020 0007 	bic.w	r0, r0, #7
 800ad90:	1ac2      	subs	r2, r0, r3
 800ad92:	bf1c      	itt	ne
 800ad94:	1a1b      	subne	r3, r3, r0
 800ad96:	50a3      	strne	r3, [r4, r2]
 800ad98:	e7af      	b.n	800acfa <_malloc_r+0x22>
 800ad9a:	6862      	ldr	r2, [r4, #4]
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	bf0c      	ite	eq
 800ada0:	f8c8 2000 	streq.w	r2, [r8]
 800ada4:	605a      	strne	r2, [r3, #4]
 800ada6:	e7eb      	b.n	800ad80 <_malloc_r+0xa8>
 800ada8:	4623      	mov	r3, r4
 800adaa:	6864      	ldr	r4, [r4, #4]
 800adac:	e7ae      	b.n	800ad0c <_malloc_r+0x34>
 800adae:	463c      	mov	r4, r7
 800adb0:	687f      	ldr	r7, [r7, #4]
 800adb2:	e7b6      	b.n	800ad22 <_malloc_r+0x4a>
 800adb4:	461a      	mov	r2, r3
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d1fb      	bne.n	800adb4 <_malloc_r+0xdc>
 800adbc:	2300      	movs	r3, #0
 800adbe:	6053      	str	r3, [r2, #4]
 800adc0:	e7de      	b.n	800ad80 <_malloc_r+0xa8>
 800adc2:	230c      	movs	r3, #12
 800adc4:	6033      	str	r3, [r6, #0]
 800adc6:	4630      	mov	r0, r6
 800adc8:	f000 f99a 	bl	800b100 <__malloc_unlock>
 800adcc:	e794      	b.n	800acf8 <_malloc_r+0x20>
 800adce:	6005      	str	r5, [r0, #0]
 800add0:	e7d6      	b.n	800ad80 <_malloc_r+0xa8>
 800add2:	bf00      	nop
 800add4:	20000afc 	.word	0x20000afc

0800add8 <_printf_common>:
 800add8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800addc:	4616      	mov	r6, r2
 800adde:	4698      	mov	r8, r3
 800ade0:	688a      	ldr	r2, [r1, #8]
 800ade2:	690b      	ldr	r3, [r1, #16]
 800ade4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ade8:	4293      	cmp	r3, r2
 800adea:	bfb8      	it	lt
 800adec:	4613      	movlt	r3, r2
 800adee:	6033      	str	r3, [r6, #0]
 800adf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800adf4:	4607      	mov	r7, r0
 800adf6:	460c      	mov	r4, r1
 800adf8:	b10a      	cbz	r2, 800adfe <_printf_common+0x26>
 800adfa:	3301      	adds	r3, #1
 800adfc:	6033      	str	r3, [r6, #0]
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	0699      	lsls	r1, r3, #26
 800ae02:	bf42      	ittt	mi
 800ae04:	6833      	ldrmi	r3, [r6, #0]
 800ae06:	3302      	addmi	r3, #2
 800ae08:	6033      	strmi	r3, [r6, #0]
 800ae0a:	6825      	ldr	r5, [r4, #0]
 800ae0c:	f015 0506 	ands.w	r5, r5, #6
 800ae10:	d106      	bne.n	800ae20 <_printf_common+0x48>
 800ae12:	f104 0a19 	add.w	sl, r4, #25
 800ae16:	68e3      	ldr	r3, [r4, #12]
 800ae18:	6832      	ldr	r2, [r6, #0]
 800ae1a:	1a9b      	subs	r3, r3, r2
 800ae1c:	42ab      	cmp	r3, r5
 800ae1e:	dc26      	bgt.n	800ae6e <_printf_common+0x96>
 800ae20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae24:	6822      	ldr	r2, [r4, #0]
 800ae26:	3b00      	subs	r3, #0
 800ae28:	bf18      	it	ne
 800ae2a:	2301      	movne	r3, #1
 800ae2c:	0692      	lsls	r2, r2, #26
 800ae2e:	d42b      	bmi.n	800ae88 <_printf_common+0xb0>
 800ae30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae34:	4641      	mov	r1, r8
 800ae36:	4638      	mov	r0, r7
 800ae38:	47c8      	blx	r9
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	d01e      	beq.n	800ae7c <_printf_common+0xa4>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	6922      	ldr	r2, [r4, #16]
 800ae42:	f003 0306 	and.w	r3, r3, #6
 800ae46:	2b04      	cmp	r3, #4
 800ae48:	bf02      	ittt	eq
 800ae4a:	68e5      	ldreq	r5, [r4, #12]
 800ae4c:	6833      	ldreq	r3, [r6, #0]
 800ae4e:	1aed      	subeq	r5, r5, r3
 800ae50:	68a3      	ldr	r3, [r4, #8]
 800ae52:	bf0c      	ite	eq
 800ae54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae58:	2500      	movne	r5, #0
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	bfc4      	itt	gt
 800ae5e:	1a9b      	subgt	r3, r3, r2
 800ae60:	18ed      	addgt	r5, r5, r3
 800ae62:	2600      	movs	r6, #0
 800ae64:	341a      	adds	r4, #26
 800ae66:	42b5      	cmp	r5, r6
 800ae68:	d11a      	bne.n	800aea0 <_printf_common+0xc8>
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	e008      	b.n	800ae80 <_printf_common+0xa8>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	4652      	mov	r2, sl
 800ae72:	4641      	mov	r1, r8
 800ae74:	4638      	mov	r0, r7
 800ae76:	47c8      	blx	r9
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d103      	bne.n	800ae84 <_printf_common+0xac>
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae84:	3501      	adds	r5, #1
 800ae86:	e7c6      	b.n	800ae16 <_printf_common+0x3e>
 800ae88:	18e1      	adds	r1, r4, r3
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	2030      	movs	r0, #48	@ 0x30
 800ae8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae92:	4422      	add	r2, r4
 800ae94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae9c:	3302      	adds	r3, #2
 800ae9e:	e7c7      	b.n	800ae30 <_printf_common+0x58>
 800aea0:	2301      	movs	r3, #1
 800aea2:	4622      	mov	r2, r4
 800aea4:	4641      	mov	r1, r8
 800aea6:	4638      	mov	r0, r7
 800aea8:	47c8      	blx	r9
 800aeaa:	3001      	adds	r0, #1
 800aeac:	d0e6      	beq.n	800ae7c <_printf_common+0xa4>
 800aeae:	3601      	adds	r6, #1
 800aeb0:	e7d9      	b.n	800ae66 <_printf_common+0x8e>
	...

0800aeb4 <_printf_i>:
 800aeb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	7e0f      	ldrb	r7, [r1, #24]
 800aeba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aebc:	2f78      	cmp	r7, #120	@ 0x78
 800aebe:	4691      	mov	r9, r2
 800aec0:	4680      	mov	r8, r0
 800aec2:	460c      	mov	r4, r1
 800aec4:	469a      	mov	sl, r3
 800aec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aeca:	d807      	bhi.n	800aedc <_printf_i+0x28>
 800aecc:	2f62      	cmp	r7, #98	@ 0x62
 800aece:	d80a      	bhi.n	800aee6 <_printf_i+0x32>
 800aed0:	2f00      	cmp	r7, #0
 800aed2:	f000 80d2 	beq.w	800b07a <_printf_i+0x1c6>
 800aed6:	2f58      	cmp	r7, #88	@ 0x58
 800aed8:	f000 80b9 	beq.w	800b04e <_printf_i+0x19a>
 800aedc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aee4:	e03a      	b.n	800af5c <_printf_i+0xa8>
 800aee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aeea:	2b15      	cmp	r3, #21
 800aeec:	d8f6      	bhi.n	800aedc <_printf_i+0x28>
 800aeee:	a101      	add	r1, pc, #4	@ (adr r1, 800aef4 <_printf_i+0x40>)
 800aef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aef4:	0800af4d 	.word	0x0800af4d
 800aef8:	0800af61 	.word	0x0800af61
 800aefc:	0800aedd 	.word	0x0800aedd
 800af00:	0800aedd 	.word	0x0800aedd
 800af04:	0800aedd 	.word	0x0800aedd
 800af08:	0800aedd 	.word	0x0800aedd
 800af0c:	0800af61 	.word	0x0800af61
 800af10:	0800aedd 	.word	0x0800aedd
 800af14:	0800aedd 	.word	0x0800aedd
 800af18:	0800aedd 	.word	0x0800aedd
 800af1c:	0800aedd 	.word	0x0800aedd
 800af20:	0800b061 	.word	0x0800b061
 800af24:	0800af8b 	.word	0x0800af8b
 800af28:	0800b01b 	.word	0x0800b01b
 800af2c:	0800aedd 	.word	0x0800aedd
 800af30:	0800aedd 	.word	0x0800aedd
 800af34:	0800b083 	.word	0x0800b083
 800af38:	0800aedd 	.word	0x0800aedd
 800af3c:	0800af8b 	.word	0x0800af8b
 800af40:	0800aedd 	.word	0x0800aedd
 800af44:	0800aedd 	.word	0x0800aedd
 800af48:	0800b023 	.word	0x0800b023
 800af4c:	6833      	ldr	r3, [r6, #0]
 800af4e:	1d1a      	adds	r2, r3, #4
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	6032      	str	r2, [r6, #0]
 800af54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af5c:	2301      	movs	r3, #1
 800af5e:	e09d      	b.n	800b09c <_printf_i+0x1e8>
 800af60:	6833      	ldr	r3, [r6, #0]
 800af62:	6820      	ldr	r0, [r4, #0]
 800af64:	1d19      	adds	r1, r3, #4
 800af66:	6031      	str	r1, [r6, #0]
 800af68:	0606      	lsls	r6, r0, #24
 800af6a:	d501      	bpl.n	800af70 <_printf_i+0xbc>
 800af6c:	681d      	ldr	r5, [r3, #0]
 800af6e:	e003      	b.n	800af78 <_printf_i+0xc4>
 800af70:	0645      	lsls	r5, r0, #25
 800af72:	d5fb      	bpl.n	800af6c <_printf_i+0xb8>
 800af74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af78:	2d00      	cmp	r5, #0
 800af7a:	da03      	bge.n	800af84 <_printf_i+0xd0>
 800af7c:	232d      	movs	r3, #45	@ 0x2d
 800af7e:	426d      	negs	r5, r5
 800af80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af84:	4859      	ldr	r0, [pc, #356]	@ (800b0ec <_printf_i+0x238>)
 800af86:	230a      	movs	r3, #10
 800af88:	e011      	b.n	800afae <_printf_i+0xfa>
 800af8a:	6821      	ldr	r1, [r4, #0]
 800af8c:	6833      	ldr	r3, [r6, #0]
 800af8e:	0608      	lsls	r0, r1, #24
 800af90:	f853 5b04 	ldr.w	r5, [r3], #4
 800af94:	d402      	bmi.n	800af9c <_printf_i+0xe8>
 800af96:	0649      	lsls	r1, r1, #25
 800af98:	bf48      	it	mi
 800af9a:	b2ad      	uxthmi	r5, r5
 800af9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800af9e:	4853      	ldr	r0, [pc, #332]	@ (800b0ec <_printf_i+0x238>)
 800afa0:	6033      	str	r3, [r6, #0]
 800afa2:	bf14      	ite	ne
 800afa4:	230a      	movne	r3, #10
 800afa6:	2308      	moveq	r3, #8
 800afa8:	2100      	movs	r1, #0
 800afaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800afae:	6866      	ldr	r6, [r4, #4]
 800afb0:	60a6      	str	r6, [r4, #8]
 800afb2:	2e00      	cmp	r6, #0
 800afb4:	bfa2      	ittt	ge
 800afb6:	6821      	ldrge	r1, [r4, #0]
 800afb8:	f021 0104 	bicge.w	r1, r1, #4
 800afbc:	6021      	strge	r1, [r4, #0]
 800afbe:	b90d      	cbnz	r5, 800afc4 <_printf_i+0x110>
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	d04b      	beq.n	800b05c <_printf_i+0x1a8>
 800afc4:	4616      	mov	r6, r2
 800afc6:	fbb5 f1f3 	udiv	r1, r5, r3
 800afca:	fb03 5711 	mls	r7, r3, r1, r5
 800afce:	5dc7      	ldrb	r7, [r0, r7]
 800afd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afd4:	462f      	mov	r7, r5
 800afd6:	42bb      	cmp	r3, r7
 800afd8:	460d      	mov	r5, r1
 800afda:	d9f4      	bls.n	800afc6 <_printf_i+0x112>
 800afdc:	2b08      	cmp	r3, #8
 800afde:	d10b      	bne.n	800aff8 <_printf_i+0x144>
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	07df      	lsls	r7, r3, #31
 800afe4:	d508      	bpl.n	800aff8 <_printf_i+0x144>
 800afe6:	6923      	ldr	r3, [r4, #16]
 800afe8:	6861      	ldr	r1, [r4, #4]
 800afea:	4299      	cmp	r1, r3
 800afec:	bfde      	ittt	le
 800afee:	2330      	movle	r3, #48	@ 0x30
 800aff0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aff4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800aff8:	1b92      	subs	r2, r2, r6
 800affa:	6122      	str	r2, [r4, #16]
 800affc:	f8cd a000 	str.w	sl, [sp]
 800b000:	464b      	mov	r3, r9
 800b002:	aa03      	add	r2, sp, #12
 800b004:	4621      	mov	r1, r4
 800b006:	4640      	mov	r0, r8
 800b008:	f7ff fee6 	bl	800add8 <_printf_common>
 800b00c:	3001      	adds	r0, #1
 800b00e:	d14a      	bne.n	800b0a6 <_printf_i+0x1f2>
 800b010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b014:	b004      	add	sp, #16
 800b016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	f043 0320 	orr.w	r3, r3, #32
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	4833      	ldr	r0, [pc, #204]	@ (800b0f0 <_printf_i+0x23c>)
 800b024:	2778      	movs	r7, #120	@ 0x78
 800b026:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	6831      	ldr	r1, [r6, #0]
 800b02e:	061f      	lsls	r7, r3, #24
 800b030:	f851 5b04 	ldr.w	r5, [r1], #4
 800b034:	d402      	bmi.n	800b03c <_printf_i+0x188>
 800b036:	065f      	lsls	r7, r3, #25
 800b038:	bf48      	it	mi
 800b03a:	b2ad      	uxthmi	r5, r5
 800b03c:	6031      	str	r1, [r6, #0]
 800b03e:	07d9      	lsls	r1, r3, #31
 800b040:	bf44      	itt	mi
 800b042:	f043 0320 	orrmi.w	r3, r3, #32
 800b046:	6023      	strmi	r3, [r4, #0]
 800b048:	b11d      	cbz	r5, 800b052 <_printf_i+0x19e>
 800b04a:	2310      	movs	r3, #16
 800b04c:	e7ac      	b.n	800afa8 <_printf_i+0xf4>
 800b04e:	4827      	ldr	r0, [pc, #156]	@ (800b0ec <_printf_i+0x238>)
 800b050:	e7e9      	b.n	800b026 <_printf_i+0x172>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	f023 0320 	bic.w	r3, r3, #32
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	e7f6      	b.n	800b04a <_printf_i+0x196>
 800b05c:	4616      	mov	r6, r2
 800b05e:	e7bd      	b.n	800afdc <_printf_i+0x128>
 800b060:	6833      	ldr	r3, [r6, #0]
 800b062:	6825      	ldr	r5, [r4, #0]
 800b064:	6961      	ldr	r1, [r4, #20]
 800b066:	1d18      	adds	r0, r3, #4
 800b068:	6030      	str	r0, [r6, #0]
 800b06a:	062e      	lsls	r6, r5, #24
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	d501      	bpl.n	800b074 <_printf_i+0x1c0>
 800b070:	6019      	str	r1, [r3, #0]
 800b072:	e002      	b.n	800b07a <_printf_i+0x1c6>
 800b074:	0668      	lsls	r0, r5, #25
 800b076:	d5fb      	bpl.n	800b070 <_printf_i+0x1bc>
 800b078:	8019      	strh	r1, [r3, #0]
 800b07a:	2300      	movs	r3, #0
 800b07c:	6123      	str	r3, [r4, #16]
 800b07e:	4616      	mov	r6, r2
 800b080:	e7bc      	b.n	800affc <_printf_i+0x148>
 800b082:	6833      	ldr	r3, [r6, #0]
 800b084:	1d1a      	adds	r2, r3, #4
 800b086:	6032      	str	r2, [r6, #0]
 800b088:	681e      	ldr	r6, [r3, #0]
 800b08a:	6862      	ldr	r2, [r4, #4]
 800b08c:	2100      	movs	r1, #0
 800b08e:	4630      	mov	r0, r6
 800b090:	f7f5 f8ce 	bl	8000230 <memchr>
 800b094:	b108      	cbz	r0, 800b09a <_printf_i+0x1e6>
 800b096:	1b80      	subs	r0, r0, r6
 800b098:	6060      	str	r0, [r4, #4]
 800b09a:	6863      	ldr	r3, [r4, #4]
 800b09c:	6123      	str	r3, [r4, #16]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0a4:	e7aa      	b.n	800affc <_printf_i+0x148>
 800b0a6:	6923      	ldr	r3, [r4, #16]
 800b0a8:	4632      	mov	r2, r6
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	4640      	mov	r0, r8
 800b0ae:	47d0      	blx	sl
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d0ad      	beq.n	800b010 <_printf_i+0x15c>
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	079b      	lsls	r3, r3, #30
 800b0b8:	d413      	bmi.n	800b0e2 <_printf_i+0x22e>
 800b0ba:	68e0      	ldr	r0, [r4, #12]
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	4298      	cmp	r0, r3
 800b0c0:	bfb8      	it	lt
 800b0c2:	4618      	movlt	r0, r3
 800b0c4:	e7a6      	b.n	800b014 <_printf_i+0x160>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	4632      	mov	r2, r6
 800b0ca:	4649      	mov	r1, r9
 800b0cc:	4640      	mov	r0, r8
 800b0ce:	47d0      	blx	sl
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	d09d      	beq.n	800b010 <_printf_i+0x15c>
 800b0d4:	3501      	adds	r5, #1
 800b0d6:	68e3      	ldr	r3, [r4, #12]
 800b0d8:	9903      	ldr	r1, [sp, #12]
 800b0da:	1a5b      	subs	r3, r3, r1
 800b0dc:	42ab      	cmp	r3, r5
 800b0de:	dcf2      	bgt.n	800b0c6 <_printf_i+0x212>
 800b0e0:	e7eb      	b.n	800b0ba <_printf_i+0x206>
 800b0e2:	2500      	movs	r5, #0
 800b0e4:	f104 0619 	add.w	r6, r4, #25
 800b0e8:	e7f5      	b.n	800b0d6 <_printf_i+0x222>
 800b0ea:	bf00      	nop
 800b0ec:	0801a089 	.word	0x0801a089
 800b0f0:	0801a09a 	.word	0x0801a09a

0800b0f4 <__malloc_lock>:
 800b0f4:	4801      	ldr	r0, [pc, #4]	@ (800b0fc <__malloc_lock+0x8>)
 800b0f6:	f7ff bc65 	b.w	800a9c4 <__retarget_lock_acquire_recursive>
 800b0fa:	bf00      	nop
 800b0fc:	20000af4 	.word	0x20000af4

0800b100 <__malloc_unlock>:
 800b100:	4801      	ldr	r0, [pc, #4]	@ (800b108 <__malloc_unlock+0x8>)
 800b102:	f7ff bc60 	b.w	800a9c6 <__retarget_lock_release_recursive>
 800b106:	bf00      	nop
 800b108:	20000af4 	.word	0x20000af4

0800b10c <_realloc_r>:
 800b10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b110:	4680      	mov	r8, r0
 800b112:	4615      	mov	r5, r2
 800b114:	460c      	mov	r4, r1
 800b116:	b921      	cbnz	r1, 800b122 <_realloc_r+0x16>
 800b118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b11c:	4611      	mov	r1, r2
 800b11e:	f7ff bddb 	b.w	800acd8 <_malloc_r>
 800b122:	b92a      	cbnz	r2, 800b130 <_realloc_r+0x24>
 800b124:	f000 f84a 	bl	800b1bc <_free_r>
 800b128:	2400      	movs	r4, #0
 800b12a:	4620      	mov	r0, r4
 800b12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b130:	f000 f88e 	bl	800b250 <_malloc_usable_size_r>
 800b134:	4285      	cmp	r5, r0
 800b136:	4606      	mov	r6, r0
 800b138:	d802      	bhi.n	800b140 <_realloc_r+0x34>
 800b13a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b13e:	d8f4      	bhi.n	800b12a <_realloc_r+0x1e>
 800b140:	4629      	mov	r1, r5
 800b142:	4640      	mov	r0, r8
 800b144:	f7ff fdc8 	bl	800acd8 <_malloc_r>
 800b148:	4607      	mov	r7, r0
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d0ec      	beq.n	800b128 <_realloc_r+0x1c>
 800b14e:	42b5      	cmp	r5, r6
 800b150:	462a      	mov	r2, r5
 800b152:	4621      	mov	r1, r4
 800b154:	bf28      	it	cs
 800b156:	4632      	movcs	r2, r6
 800b158:	f7ff fc36 	bl	800a9c8 <memcpy>
 800b15c:	4621      	mov	r1, r4
 800b15e:	4640      	mov	r0, r8
 800b160:	f000 f82c 	bl	800b1bc <_free_r>
 800b164:	463c      	mov	r4, r7
 800b166:	e7e0      	b.n	800b12a <_realloc_r+0x1e>

0800b168 <memmove>:
 800b168:	4288      	cmp	r0, r1
 800b16a:	b510      	push	{r4, lr}
 800b16c:	eb01 0402 	add.w	r4, r1, r2
 800b170:	d902      	bls.n	800b178 <memmove+0x10>
 800b172:	4284      	cmp	r4, r0
 800b174:	4623      	mov	r3, r4
 800b176:	d807      	bhi.n	800b188 <memmove+0x20>
 800b178:	1e43      	subs	r3, r0, #1
 800b17a:	42a1      	cmp	r1, r4
 800b17c:	d008      	beq.n	800b190 <memmove+0x28>
 800b17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b182:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b186:	e7f8      	b.n	800b17a <memmove+0x12>
 800b188:	4402      	add	r2, r0
 800b18a:	4601      	mov	r1, r0
 800b18c:	428a      	cmp	r2, r1
 800b18e:	d100      	bne.n	800b192 <memmove+0x2a>
 800b190:	bd10      	pop	{r4, pc}
 800b192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b19a:	e7f7      	b.n	800b18c <memmove+0x24>

0800b19c <_sbrk_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4d06      	ldr	r5, [pc, #24]	@ (800b1b8 <_sbrk_r+0x1c>)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	602b      	str	r3, [r5, #0]
 800b1a8:	f7fa fd9e 	bl	8005ce8 <_sbrk>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_sbrk_r+0x1a>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_sbrk_r+0x1a>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	20000b00 	.word	0x20000b00

0800b1bc <_free_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4605      	mov	r5, r0
 800b1c0:	2900      	cmp	r1, #0
 800b1c2:	d041      	beq.n	800b248 <_free_r+0x8c>
 800b1c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1c8:	1f0c      	subs	r4, r1, #4
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	bfb8      	it	lt
 800b1ce:	18e4      	addlt	r4, r4, r3
 800b1d0:	f7ff ff90 	bl	800b0f4 <__malloc_lock>
 800b1d4:	4a1d      	ldr	r2, [pc, #116]	@ (800b24c <_free_r+0x90>)
 800b1d6:	6813      	ldr	r3, [r2, #0]
 800b1d8:	b933      	cbnz	r3, 800b1e8 <_free_r+0x2c>
 800b1da:	6063      	str	r3, [r4, #4]
 800b1dc:	6014      	str	r4, [r2, #0]
 800b1de:	4628      	mov	r0, r5
 800b1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1e4:	f7ff bf8c 	b.w	800b100 <__malloc_unlock>
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	d908      	bls.n	800b1fe <_free_r+0x42>
 800b1ec:	6820      	ldr	r0, [r4, #0]
 800b1ee:	1821      	adds	r1, r4, r0
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	bf01      	itttt	eq
 800b1f4:	6819      	ldreq	r1, [r3, #0]
 800b1f6:	685b      	ldreq	r3, [r3, #4]
 800b1f8:	1809      	addeq	r1, r1, r0
 800b1fa:	6021      	streq	r1, [r4, #0]
 800b1fc:	e7ed      	b.n	800b1da <_free_r+0x1e>
 800b1fe:	461a      	mov	r2, r3
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	b10b      	cbz	r3, 800b208 <_free_r+0x4c>
 800b204:	42a3      	cmp	r3, r4
 800b206:	d9fa      	bls.n	800b1fe <_free_r+0x42>
 800b208:	6811      	ldr	r1, [r2, #0]
 800b20a:	1850      	adds	r0, r2, r1
 800b20c:	42a0      	cmp	r0, r4
 800b20e:	d10b      	bne.n	800b228 <_free_r+0x6c>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	4401      	add	r1, r0
 800b214:	1850      	adds	r0, r2, r1
 800b216:	4283      	cmp	r3, r0
 800b218:	6011      	str	r1, [r2, #0]
 800b21a:	d1e0      	bne.n	800b1de <_free_r+0x22>
 800b21c:	6818      	ldr	r0, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	6053      	str	r3, [r2, #4]
 800b222:	4408      	add	r0, r1
 800b224:	6010      	str	r0, [r2, #0]
 800b226:	e7da      	b.n	800b1de <_free_r+0x22>
 800b228:	d902      	bls.n	800b230 <_free_r+0x74>
 800b22a:	230c      	movs	r3, #12
 800b22c:	602b      	str	r3, [r5, #0]
 800b22e:	e7d6      	b.n	800b1de <_free_r+0x22>
 800b230:	6820      	ldr	r0, [r4, #0]
 800b232:	1821      	adds	r1, r4, r0
 800b234:	428b      	cmp	r3, r1
 800b236:	bf04      	itt	eq
 800b238:	6819      	ldreq	r1, [r3, #0]
 800b23a:	685b      	ldreq	r3, [r3, #4]
 800b23c:	6063      	str	r3, [r4, #4]
 800b23e:	bf04      	itt	eq
 800b240:	1809      	addeq	r1, r1, r0
 800b242:	6021      	streq	r1, [r4, #0]
 800b244:	6054      	str	r4, [r2, #4]
 800b246:	e7ca      	b.n	800b1de <_free_r+0x22>
 800b248:	bd38      	pop	{r3, r4, r5, pc}
 800b24a:	bf00      	nop
 800b24c:	20000afc 	.word	0x20000afc

0800b250 <_malloc_usable_size_r>:
 800b250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b254:	1f18      	subs	r0, r3, #4
 800b256:	2b00      	cmp	r3, #0
 800b258:	bfbc      	itt	lt
 800b25a:	580b      	ldrlt	r3, [r1, r0]
 800b25c:	18c0      	addlt	r0, r0, r3
 800b25e:	4770      	bx	lr

0800b260 <_init>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr

0800b26c <_fini>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr
