
LCD_TOUCH_out.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000439c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d210  0800455c  0800455c  0000555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801176c  0801176c  0001305c  2**0
                  CONTENTS
  4 .ARM          00000008  0801176c  0801176c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011774  08011774  0001305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011774  08011774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011778  08011778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801177c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  080117d8  0001305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080117d8  00013294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000995e  00000000  00000000  0001308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a59  00000000  00000000  0001c9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0001e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006de  00000000  00000000  0001ed70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c72  00000000  00000000  0001f44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abc1  00000000  00000000  000490c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa607  00000000  00000000  00053c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  0014e2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00150bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004544 	.word	0x08004544

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08004544 	.word	0x08004544

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 80002be:	2200      	movs	r2, #0
 80002c0:	2140      	movs	r1, #64	@ 0x40
 80002c2:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <ILI9488_SendCommand+0x44>)
 80002c4:	f001 ff84 	bl	80021d0 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 80002c8:	2200      	movs	r2, #0
 80002ca:	2101      	movs	r1, #1
 80002cc:	4809      	ldr	r0, [pc, #36]	@ (80002f4 <ILI9488_SendCommand+0x44>)
 80002ce:	f001 ff7f 	bl	80021d0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 80002d2:	f107 010f 	add.w	r1, r7, #15
 80002d6:	2301      	movs	r3, #1
 80002d8:	2201      	movs	r2, #1
 80002da:	4807      	ldr	r0, [pc, #28]	@ (80002f8 <ILI9488_SendCommand+0x48>)
 80002dc:	f002 ff97 	bl	800320e <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 80002e0:	2201      	movs	r2, #1
 80002e2:	2101      	movs	r1, #1
 80002e4:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <ILI9488_SendCommand+0x44>)
 80002e6:	f001 ff73 	bl	80021d0 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	48000c00 	.word	0x48000c00
 80002f8:	2000007c 	.word	0x2000007c

080002fc <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 800030a:	2201      	movs	r2, #1
 800030c:	2140      	movs	r1, #64	@ 0x40
 800030e:	480c      	ldr	r0, [pc, #48]	@ (8000340 <ILI9488_SendData+0x44>)
 8000310:	f001 ff5e 	bl	80021d0 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000314:	2200      	movs	r2, #0
 8000316:	2101      	movs	r1, #1
 8000318:	4809      	ldr	r0, [pc, #36]	@ (8000340 <ILI9488_SendData+0x44>)
 800031a:	f001 ff59 	bl	80021d0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800031e:	f107 010f 	add.w	r1, r7, #15
 8000322:	2301      	movs	r3, #1
 8000324:	2201      	movs	r2, #1
 8000326:	4807      	ldr	r0, [pc, #28]	@ (8000344 <ILI9488_SendData+0x48>)
 8000328:	f002 ff71 	bl	800320e <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 800032c:	2201      	movs	r2, #1
 800032e:	2101      	movs	r1, #1
 8000330:	4803      	ldr	r0, [pc, #12]	@ (8000340 <ILI9488_SendData+0x44>)
 8000332:	f001 ff4d 	bl	80021d0 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	48000c00 	.word	0x48000c00
 8000344:	2000007c 	.word	0x2000007c

08000348 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8000352:	2201      	movs	r2, #1
 8000354:	2140      	movs	r1, #64	@ 0x40
 8000356:	4815      	ldr	r0, [pc, #84]	@ (80003ac <ILI9488_SendData_Multi+0x64>)
 8000358:	f001 ff3a 	bl	80021d0 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 800035c:	2200      	movs	r2, #0
 800035e:	2101      	movs	r1, #1
 8000360:	4812      	ldr	r0, [pc, #72]	@ (80003ac <ILI9488_SendData_Multi+0x64>)
 8000362:	f001 ff35 	bl	80021d0 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 8000366:	e015      	b.n	8000394 <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800036e:	bf28      	it	cs
 8000370:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000374:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 8000376:	89fa      	ldrh	r2, [r7, #14]
 8000378:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800037c:	6879      	ldr	r1, [r7, #4]
 800037e:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <ILI9488_SendData_Multi+0x68>)
 8000380:	f002 ff45 	bl	800320e <HAL_SPI_Transmit>
		buff += chunk_size;
 8000384:	89fb      	ldrh	r3, [r7, #14]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800038c:	89fb      	ldrh	r3, [r7, #14]
 800038e:	683a      	ldr	r2, [r7, #0]
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1e6      	bne.n	8000368 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 800039a:	2201      	movs	r2, #1
 800039c:	2101      	movs	r1, #1
 800039e:	4803      	ldr	r0, [pc, #12]	@ (80003ac <ILI9488_SendData_Multi+0x64>)
 80003a0:	f001 ff16 	bl	80021d0 <HAL_GPIO_WritePin>
}
 80003a4:	bf00      	nop
 80003a6:	3710      	adds	r7, #16
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	48000c00 	.word	0x48000c00
 80003b0:	2000007c 	.word	0x2000007c

080003b4 <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 80003b8:	2201      	movs	r2, #1
 80003ba:	2101      	movs	r1, #1
 80003bc:	486c      	ldr	r0, [pc, #432]	@ (8000570 <ILI9488_Init+0x1bc>)
 80003be:	f001 ff07 	bl	80021d0 <HAL_GPIO_WritePin>
	RST_A();
 80003c2:	2200      	movs	r2, #0
 80003c4:	2180      	movs	r1, #128	@ 0x80
 80003c6:	486a      	ldr	r0, [pc, #424]	@ (8000570 <ILI9488_Init+0x1bc>)
 80003c8:	f001 ff02 	bl	80021d0 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 80003cc:	200a      	movs	r0, #10
 80003ce:	f001 fc63 	bl	8001c98 <HAL_Delay>
		 RST_D();
 80003d2:	2201      	movs	r2, #1
 80003d4:	2180      	movs	r1, #128	@ 0x80
 80003d6:	4866      	ldr	r0, [pc, #408]	@ (8000570 <ILI9488_Init+0x1bc>)
 80003d8:	f001 fefa 	bl	80021d0 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 80003dc:	4b65      	ldr	r3, [pc, #404]	@ (8000574 <ILI9488_Init+0x1c0>)
 80003de:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80003e2:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 80003e4:	4b64      	ldr	r3, [pc, #400]	@ (8000578 <ILI9488_Init+0x1c4>)
 80003e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80003ea:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 80003ec:	20e0      	movs	r0, #224	@ 0xe0
 80003ee:	f7ff ff5f 	bl	80002b0 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff ff82 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 80003f8:	2003      	movs	r0, #3
 80003fa:	f7ff ff7f 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 80003fe:	2009      	movs	r0, #9
 8000400:	f7ff ff7c 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000404:	2008      	movs	r0, #8
 8000406:	f7ff ff79 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800040a:	2016      	movs	r0, #22
 800040c:	f7ff ff76 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000410:	200a      	movs	r0, #10
 8000412:	f7ff ff73 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 8000416:	203f      	movs	r0, #63	@ 0x3f
 8000418:	f7ff ff70 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 800041c:	2078      	movs	r0, #120	@ 0x78
 800041e:	f7ff ff6d 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 8000422:	204c      	movs	r0, #76	@ 0x4c
 8000424:	f7ff ff6a 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000428:	2009      	movs	r0, #9
 800042a:	f7ff ff67 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800042e:	200a      	movs	r0, #10
 8000430:	f7ff ff64 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000434:	2008      	movs	r0, #8
 8000436:	f7ff ff61 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800043a:	2016      	movs	r0, #22
 800043c:	f7ff ff5e 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8000440:	201a      	movs	r0, #26
 8000442:	f7ff ff5b 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 8000446:	200f      	movs	r0, #15
 8000448:	f7ff ff58 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 800044c:	20e1      	movs	r0, #225	@ 0xe1
 800044e:	f7ff ff2f 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000452:	2000      	movs	r0, #0
 8000454:	f7ff ff52 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 8000458:	2016      	movs	r0, #22
 800045a:	f7ff ff4f 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 800045e:	2019      	movs	r0, #25
 8000460:	f7ff ff4c 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 8000464:	2003      	movs	r0, #3
 8000466:	f7ff ff49 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 800046a:	200f      	movs	r0, #15
 800046c:	f7ff ff46 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 8000470:	2005      	movs	r0, #5
 8000472:	f7ff ff43 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 8000476:	2032      	movs	r0, #50	@ 0x32
 8000478:	f7ff ff40 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 800047c:	2045      	movs	r0, #69	@ 0x45
 800047e:	f7ff ff3d 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 8000482:	2046      	movs	r0, #70	@ 0x46
 8000484:	f7ff ff3a 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 8000488:	2004      	movs	r0, #4
 800048a:	f7ff ff37 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 800048e:	200e      	movs	r0, #14
 8000490:	f7ff ff34 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 8000494:	200d      	movs	r0, #13
 8000496:	f7ff ff31 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 800049a:	2035      	movs	r0, #53	@ 0x35
 800049c:	f7ff ff2e 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 80004a0:	2037      	movs	r0, #55	@ 0x37
 80004a2:	f7ff ff2b 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80004a6:	200f      	movs	r0, #15
 80004a8:	f7ff ff28 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 80004ac:	20c0      	movs	r0, #192	@ 0xc0
 80004ae:	f7ff feff 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 80004b2:	2017      	movs	r0, #23
 80004b4:	f7ff ff22 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 80004b8:	2015      	movs	r0, #21
 80004ba:	f7ff ff1f 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 80004be:	20c1      	movs	r0, #193	@ 0xc1
 80004c0:	f7ff fef6 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 80004c4:	2041      	movs	r0, #65	@ 0x41
 80004c6:	f7ff ff19 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 80004ca:	20c5      	movs	r0, #197	@ 0xc5
 80004cc:	f7ff fef0 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f7ff ff13 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 80004d6:	2012      	movs	r0, #18
 80004d8:	f7ff ff10 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 80004dc:	2080      	movs	r0, #128	@ 0x80
 80004de:	f7ff ff0d 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 80004e2:	2036      	movs	r0, #54	@ 0x36
 80004e4:	f7ff fee4 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 80004e8:	2048      	movs	r0, #72	@ 0x48
 80004ea:	f7ff ff07 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 80004ee:	203a      	movs	r0, #58	@ 0x3a
 80004f0:	f7ff fede 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 80004f4:	2066      	movs	r0, #102	@ 0x66
 80004f6:	f7ff ff01 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 80004fa:	20b0      	movs	r0, #176	@ 0xb0
 80004fc:	f7ff fed8 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8000500:	2080      	movs	r0, #128	@ 0x80
 8000502:	f7ff fefb 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 8000506:	20b1      	movs	r0, #177	@ 0xb1
 8000508:	f7ff fed2 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 800050c:	20a0      	movs	r0, #160	@ 0xa0
 800050e:	f7ff fef5 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 8000512:	20b4      	movs	r0, #180	@ 0xb4
 8000514:	f7ff fecc 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000518:	2002      	movs	r0, #2
 800051a:	f7ff feef 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 800051e:	20b6      	movs	r0, #182	@ 0xb6
 8000520:	f7ff fec6 	bl	80002b0 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000524:	2002      	movs	r0, #2
 8000526:	f7ff fee9 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff fee6 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8000530:	20e9      	movs	r0, #233	@ 0xe9
 8000532:	f7ff febd 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff fee0 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 800053c:	20f7      	movs	r0, #247	@ 0xf7
 800053e:	f7ff feb7 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 8000542:	20a9      	movs	r0, #169	@ 0xa9
 8000544:	f7ff feda 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 8000548:	2051      	movs	r0, #81	@ 0x51
 800054a:	f7ff fed7 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 800054e:	202c      	movs	r0, #44	@ 0x2c
 8000550:	f7ff fed4 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 8000554:	2082      	movs	r0, #130	@ 0x82
 8000556:	f7ff fed1 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 800055a:	2011      	movs	r0, #17
 800055c:	f7ff fea8 	bl	80002b0 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 8000560:	2078      	movs	r0, #120	@ 0x78
 8000562:	f001 fb99 	bl	8001c98 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 8000566:	2029      	movs	r0, #41	@ 0x29
 8000568:	f7ff fea2 	bl	80002b0 <ILI9488_SendCommand>

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	48000c00 	.word	0x48000c00
 8000574:	20000078 	.word	0x20000078
 8000578:	2000007a 	.word	0x2000007a

0800057c <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	4604      	mov	r4, r0
 8000584:	4608      	mov	r0, r1
 8000586:	4611      	mov	r1, r2
 8000588:	461a      	mov	r2, r3
 800058a:	4623      	mov	r3, r4
 800058c:	80fb      	strh	r3, [r7, #6]
 800058e:	4603      	mov	r3, r0
 8000590:	80bb      	strh	r3, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	807b      	strh	r3, [r7, #2]
 8000596:	4613      	mov	r3, r2
 8000598:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 800059a:	202a      	movs	r0, #42	@ 0x2a
 800059c:	f7ff fe88 	bl	80002b0 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	733b      	strb	r3, [r7, #12]
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	737b      	strb	r3, [r7, #13]
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	0a1b      	lsrs	r3, r3, #8
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff febe 	bl	8000348 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 80005cc:	202b      	movs	r0, #43	@ 0x2b
 80005ce:	f7ff fe6f 	bl	80002b0 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	723b      	strb	r3, [r7, #8]
 80005dc:	88bb      	ldrh	r3, [r7, #4]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	727b      	strb	r3, [r7, #9]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	72bb      	strb	r3, [r7, #10]
 80005ec:	883b      	ldrh	r3, [r7, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2104      	movs	r1, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fea5 	bl	8000348 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f7ff fe56 	bl	80002b0 <ILI9488_SendCommand>
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <fillScreen+0x2c>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	b21a      	sxth	r2, r3
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <fillScreen+0x30>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	b219      	sxth	r1, r3
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	460b      	mov	r3, r1
 8000628:	2100      	movs	r1, #0
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f808 	bl	8000640 <fillRect>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000078 	.word	0x20000078
 800063c:	2000007a 	.word	0x2000007a

08000640 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000644:	b08a      	sub	sp, #40	@ 0x28
 8000646:	af00      	add	r7, sp, #0
 8000648:	4606      	mov	r6, r0
 800064a:	4608      	mov	r0, r1
 800064c:	4611      	mov	r1, r2
 800064e:	461a      	mov	r2, r3
 8000650:	4633      	mov	r3, r6
 8000652:	80fb      	strh	r3, [r7, #6]
 8000654:	4603      	mov	r3, r0
 8000656:	80bb      	strh	r3, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	807b      	strh	r3, [r7, #2]
 800065c:	4613      	mov	r3, r2
 800065e:	803b      	strh	r3, [r7, #0]
 8000660:	466b      	mov	r3, sp
 8000662:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000668:	4a8f      	ldr	r2, [pc, #572]	@ (80008a8 <fillRect+0x268>)
 800066a:	8812      	ldrh	r2, [r2, #0]
 800066c:	4293      	cmp	r3, r2
 800066e:	da05      	bge.n	800067c <fillRect+0x3c>
 8000670:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000674:	4a8d      	ldr	r2, [pc, #564]	@ (80008ac <fillRect+0x26c>)
 8000676:	8812      	ldrh	r2, [r2, #0]
 8000678:	4293      	cmp	r3, r2
 800067a:	db01      	blt.n	8000680 <fillRect+0x40>
		return;
 800067c:	46d5      	mov	sp, sl
 800067e:	e10f      	b.n	80008a0 <fillRect+0x260>
	if ((x + w - 1) >= width)
 8000680:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000688:	4413      	add	r3, r2
 800068a:	4a87      	ldr	r2, [pc, #540]	@ (80008a8 <fillRect+0x268>)
 800068c:	8812      	ldrh	r2, [r2, #0]
 800068e:	4293      	cmp	r3, r2
 8000690:	dd05      	ble.n	800069e <fillRect+0x5e>
		w = width - x;
 8000692:	4b85      	ldr	r3, [pc, #532]	@ (80008a8 <fillRect+0x268>)
 8000694:	881a      	ldrh	r2, [r3, #0]
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	b29b      	uxth	r3, r3
 800069c:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 800069e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a80      	ldr	r2, [pc, #512]	@ (80008ac <fillRect+0x26c>)
 80006aa:	8812      	ldrh	r2, [r2, #0]
 80006ac:	4293      	cmp	r3, r2
 80006ae:	dd05      	ble.n	80006bc <fillRect+0x7c>
		h = height - y;
 80006b0:	4b7e      	ldr	r3, [pc, #504]	@ (80008ac <fillRect+0x26c>)
 80006b2:	881a      	ldrh	r2, [r3, #0]
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80006bc:	88f8      	ldrh	r0, [r7, #6]
 80006be:	88b9      	ldrh	r1, [r7, #4]
 80006c0:	88fa      	ldrh	r2, [r7, #6]
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b29e      	uxth	r6, r3
 80006cc:	88ba      	ldrh	r2, [r7, #4]
 80006ce:	883b      	ldrh	r3, [r7, #0]
 80006d0:	4413      	add	r3, r2
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4632      	mov	r2, r6
 80006da:	f7ff ff4f 	bl	800057c <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 80006de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80006e2:	0adb      	lsrs	r3, r3, #11
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 80006e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80006ec:	115b      	asrs	r3, r3, #5
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006f4:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 80006f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f003 031f 	and.w	r3, r3, #31
 8000700:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 8000702:	7efa      	ldrb	r2, [r7, #27]
 8000704:	4613      	mov	r3, r2
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	4a69      	ldr	r2, [pc, #420]	@ (80008b0 <fillRect+0x270>)
 800070c:	fb82 1203 	smull	r1, r2, r2, r3
 8000710:	441a      	add	r2, r3
 8000712:	1112      	asrs	r2, r2, #4
 8000714:	17db      	asrs	r3, r3, #31
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 800071a:	7eba      	ldrb	r2, [r7, #26]
 800071c:	4613      	mov	r3, r2
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	4a64      	ldr	r2, [pc, #400]	@ (80008b4 <fillRect+0x274>)
 8000724:	fb82 1203 	smull	r1, r2, r2, r3
 8000728:	441a      	add	r2, r3
 800072a:	1152      	asrs	r2, r2, #5
 800072c:	17db      	asrs	r3, r3, #31
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8000732:	7e7a      	ldrb	r2, [r7, #25]
 8000734:	4613      	mov	r3, r2
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	1a9b      	subs	r3, r3, r2
 800073a:	4a5d      	ldr	r2, [pc, #372]	@ (80008b0 <fillRect+0x270>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	441a      	add	r2, r3
 8000742:	1112      	asrs	r2, r2, #4
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 800074a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800074e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000752:	fb03 f202 	mul.w	r2, r3, r2
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000764:	d204      	bcs.n	8000770 <fillRect+0x130>
		cnt = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	623b      	str	r3, [r7, #32]
		buf_size = n;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	e02f      	b.n	80007d0 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4a51      	ldr	r2, [pc, #324]	@ (80008b8 <fillRect+0x278>)
 8000774:	fba2 2303 	umull	r2, r3, r2, r3
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 800077c:	2303      	movs	r3, #3
 800077e:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	4a4e      	ldr	r2, [pc, #312]	@ (80008bc <fillRect+0x27c>)
 8000784:	fba2 2303 	umull	r2, r3, r2, r3
 8000788:	0bdb      	lsrs	r3, r3, #15
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3301      	adds	r3, #1
 800078e:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8000790:	7cfb      	ldrb	r3, [r7, #19]
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
 8000794:	e014      	b.n	80007c0 <fillRect+0x180>
			if(n%i == 0){
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079a:	fbb3 f2f2 	udiv	r2, r3, r2
 800079e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007a0:	fb01 f202 	mul.w	r2, r1, r2
 80007a4:	1a9b      	subs	r3, r3, r2
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d107      	bne.n	80007ba <fillRect+0x17a>
				cnt = i;
 80007aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ac:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	61fb      	str	r3, [r7, #28]
				break;
 80007b8:	e00a      	b.n	80007d0 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 80007ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007bc:	3301      	adds	r3, #1
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	4a3d      	ldr	r2, [pc, #244]	@ (80008b8 <fillRect+0x278>)
 80007c4:	fba2 2303 	umull	r2, r3, r2, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d3e2      	bcc.n	8000796 <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 80007d0:	69f9      	ldr	r1, [r7, #28]
 80007d2:	460b      	mov	r3, r1
 80007d4:	3b01      	subs	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	2300      	movs	r3, #0
 80007da:	4688      	mov	r8, r1
 80007dc:	4699      	mov	r9, r3
 80007de:	f04f 0200 	mov.w	r2, #0
 80007e2:	f04f 0300 	mov.w	r3, #0
 80007e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007f2:	2300      	movs	r3, #0
 80007f4:	460c      	mov	r4, r1
 80007f6:	461d      	mov	r5, r3
 80007f8:	f04f 0200 	mov.w	r2, #0
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	00eb      	lsls	r3, r5, #3
 8000802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000806:	00e2      	lsls	r2, r4, #3
 8000808:	1dcb      	adds	r3, r1, #7
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	ebad 0d03 	sub.w	sp, sp, r3
 8000812:	466b      	mov	r3, sp
 8000814:	3300      	adds	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
 800081c:	e019      	b.n	8000852 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 800081e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000820:	4613      	mov	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	7ef9      	ldrb	r1, [r7, #27]
 800082a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 800082c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	3301      	adds	r3, #1
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	7eb9      	ldrb	r1, [r7, #26]
 800083a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 800083c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	3302      	adds	r3, #2
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	7e79      	ldrb	r1, [r7, #25]
 800084a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 800084c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084e:	3301      	adds	r3, #1
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	4a18      	ldr	r2, [pc, #96]	@ (80008b8 <fillRect+0x278>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	085b      	lsrs	r3, r3, #1
 800085c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800085e:	429a      	cmp	r2, r3
 8000860:	d3dd      	bcc.n	800081e <fillRect+0x1de>
	}
	DC_DATA();
 8000862:	2201      	movs	r2, #1
 8000864:	2140      	movs	r1, #64	@ 0x40
 8000866:	4816      	ldr	r0, [pc, #88]	@ (80008c0 <fillRect+0x280>)
 8000868:	f001 fcb2 	bl	80021d0 <HAL_GPIO_WritePin>
	CS_A();
 800086c:	2200      	movs	r2, #0
 800086e:	2101      	movs	r1, #1
 8000870:	4813      	ldr	r0, [pc, #76]	@ (80008c0 <fillRect+0x280>)
 8000872:	f001 fcad 	bl	80021d0 <HAL_GPIO_WritePin>
		while(cnt>0)
 8000876:	e00a      	b.n	800088e <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	b29a      	uxth	r2, r3
 800087c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	4810      	ldr	r0, [pc, #64]	@ (80008c4 <fillRect+0x284>)
 8000884:	f002 fcc3 	bl	800320e <HAL_SPI_Transmit>

			cnt -= 1;
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	3b01      	subs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 800088e:	6a3b      	ldr	r3, [r7, #32]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f1      	bne.n	8000878 <fillRect+0x238>
		}
		CS_D();
 8000894:	2201      	movs	r2, #1
 8000896:	2101      	movs	r1, #1
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <fillRect+0x280>)
 800089a:	f001 fc99 	bl	80021d0 <HAL_GPIO_WritePin>
 800089e:	46d5      	mov	sp, sl

}
 80008a0:	3728      	adds	r7, #40	@ 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a8:	20000078 	.word	0x20000078
 80008ac:	2000007a 	.word	0x2000007a
 80008b0:	84210843 	.word	0x84210843
 80008b4:	82082083 	.word	0x82082083
 80008b8:	aaaaaaab 	.word	0xaaaaaaab
 80008bc:	80008001 	.word	0x80008001
 80008c0:	48000c00 	.word	0x48000c00
 80008c4:	2000007c 	.word	0x2000007c

080008c8 <setRotation>:


void setRotation(uint8_t r)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 80008d2:	2036      	movs	r0, #54	@ 0x36
 80008d4:	f7ff fcec 	bl	80002b0 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d83a      	bhi.n	800095c <setRotation+0x94>
 80008e6:	a201      	add	r2, pc, #4	@ (adr r2, 80008ec <setRotation+0x24>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	080008fd 	.word	0x080008fd
 80008f0:	08000915 	.word	0x08000915
 80008f4:	0800092d 	.word	0x0800092d
 80008f8:	08000945 	.word	0x08000945
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 80008fc:	2048      	movs	r0, #72	@ 0x48
 80008fe:	f7ff fcfd 	bl	80002fc <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <setRotation+0x9c>)
 8000904:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000908:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <setRotation+0xa0>)
 800090c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000910:	801a      	strh	r2, [r3, #0]
		break;
 8000912:	e023      	b.n	800095c <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8000914:	2028      	movs	r0, #40	@ 0x28
 8000916:	f7ff fcf1 	bl	80002fc <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <setRotation+0x9c>)
 800091c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000920:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <setRotation+0xa0>)
 8000924:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000928:	801a      	strh	r2, [r3, #0]
		break;
 800092a:	e017      	b.n	800095c <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 800092c:	2088      	movs	r0, #136	@ 0x88
 800092e:	f7ff fce5 	bl	80002fc <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <setRotation+0x9c>)
 8000934:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000938:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <setRotation+0xa0>)
 800093c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000940:	801a      	strh	r2, [r3, #0]
		break;
 8000942:	e00b      	b.n	800095c <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000944:	20e8      	movs	r0, #232	@ 0xe8
 8000946:	f7ff fcd9 	bl	80002fc <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <setRotation+0x9c>)
 800094c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000950:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000952:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <setRotation+0xa0>)
 8000954:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000958:	801a      	strh	r2, [r3, #0]
		break;
 800095a:	bf00      	nop
	}

}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000078 	.word	0x20000078
 8000968:	2000007a 	.word	0x2000007a

0800096c <LCD_Char>:
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}

void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font,
              uint8_t size, uint32_t color24) {
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b08b      	sub	sp, #44	@ 0x2c
 8000970:	af02      	add	r7, sp, #8
 8000972:	60ba      	str	r2, [r7, #8]
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4603      	mov	r3, r0
 8000978:	81fb      	strh	r3, [r7, #14]
 800097a:	460b      	mov	r3, r1
 800097c:	81bb      	strh	r3, [r7, #12]
  uint8_t *bitmap = font->bitmap;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	617b      	str	r3, [r7, #20]
  uint16_t bo = glyph->bitmapOffset;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	83fb      	strh	r3, [r7, #30]
  uint8_t bits = 0, bit = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	777b      	strb	r3, [r7, #29]
 800098e:	2300      	movs	r3, #0
 8000990:	773b      	strb	r3, [r7, #28]
  uint16_t set_pixels = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	837b      	strh	r3, [r7, #26]
  uint8_t cur_x, cur_y;
  for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 8000996:	2300      	movs	r3, #0
 8000998:	763b      	strb	r3, [r7, #24]
 800099a:	e09b      	b.n	8000ad4 <LCD_Char+0x168>
    for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 800099c:	2300      	movs	r3, #0
 800099e:	767b      	strb	r3, [r7, #25]
 80009a0:	e056      	b.n	8000a50 <LCD_Char+0xe4>
      if (bit == 0) {
 80009a2:	7f3b      	ldrb	r3, [r7, #28]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <LCD_Char+0x50>
        bits = (*(const unsigned char *)(&bitmap[bo++]));
 80009a8:	8bfb      	ldrh	r3, [r7, #30]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	83fa      	strh	r2, [r7, #30]
 80009ae:	461a      	mov	r2, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	4413      	add	r3, r2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	777b      	strb	r3, [r7, #29]
        bit = 0x80;
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	773b      	strb	r3, [r7, #28]
      }
      if (bits & bit)
 80009bc:	7f7a      	ldrb	r2, [r7, #29]
 80009be:	7f3b      	ldrb	r3, [r7, #28]
 80009c0:	4013      	ands	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <LCD_Char+0x64>
        set_pixels++;
 80009c8:	8b7b      	ldrh	r3, [r7, #26]
 80009ca:	3301      	adds	r3, #1
 80009cc:	837b      	strh	r3, [r7, #26]
 80009ce:	e039      	b.n	8000a44 <LCD_Char+0xd8>
      else if (set_pixels > 0) {
 80009d0:	8b7b      	ldrh	r3, [r7, #26]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d036      	beq.n	8000a44 <LCD_Char+0xd8>
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80009dc:	461a      	mov	r2, r3
 80009de:	7e7b      	ldrb	r3, [r7, #25]
 80009e0:	441a      	add	r2, r3
 80009e2:	8b7b      	ldrh	r3, [r7, #26]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	fb12 f303 	smulbb	r3, r2, r3
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	89fb      	ldrh	r3, [r7, #14]
 80009f6:	4413      	add	r3, r2
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	b218      	sxth	r0, r3
                 y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000a02:	461a      	mov	r2, r3
 8000a04:	7e3b      	ldrb	r3, [r7, #24]
 8000a06:	4413      	add	r3, r2
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	fb12 f303 	smulbb	r3, r2, r3
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	89bb      	ldrh	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	b29b      	uxth	r3, r3
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000a1c:	b219      	sxth	r1, r3
                 y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8000a1e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	8b7a      	ldrh	r2, [r7, #26]
 8000a26:	fb12 f303 	smulbb	r3, r2, r3
 8000a2a:	b29b      	uxth	r3, r3
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a32:	b21c      	sxth	r4, r3
 8000a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	f7ff fe00 	bl	8000640 <fillRect>
                 color24);
        set_pixels = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	837b      	strh	r3, [r7, #26]
      }
      bit >>= 1;
 8000a44:	7f3b      	ldrb	r3, [r7, #28]
 8000a46:	085b      	lsrs	r3, r3, #1
 8000a48:	773b      	strb	r3, [r7, #28]
    for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 8000a4a:	7e7b      	ldrb	r3, [r7, #25]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	767b      	strb	r3, [r7, #25]
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	7e7a      	ldrb	r2, [r7, #25]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3a3      	bcc.n	80009a2 <LCD_Char+0x36>
    }
    if (set_pixels > 0) {
 8000a5a:	8b7b      	ldrh	r3, [r7, #26]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d036      	beq.n	8000ace <LCD_Char+0x162>
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000a66:	461a      	mov	r2, r3
 8000a68:	7e7b      	ldrb	r3, [r7, #25]
 8000a6a:	441a      	add	r2, r3
 8000a6c:	8b7b      	ldrh	r3, [r7, #26]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	fb12 f303 	smulbb	r3, r2, r3
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	4413      	add	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b218      	sxth	r0, r3
               y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	7e3b      	ldrb	r3, [r7, #24]
 8000a90:	4413      	add	r3, r2
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	fb12 f303 	smulbb	r3, r2, r3
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	89bb      	ldrh	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b29b      	uxth	r3, r3
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000aa6:	b219      	sxth	r1, r3
               y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8000aa8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	8b7a      	ldrh	r2, [r7, #26]
 8000ab0:	fb12 f303 	smulbb	r3, r2, r3
 8000ab4:	b29b      	uxth	r3, r3
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000abc:	b21c      	sxth	r4, r3
 8000abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	4623      	mov	r3, r4
 8000ac6:	f7ff fdbb 	bl	8000640 <fillRect>
               color24);
      set_pixels = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	837b      	strh	r3, [r7, #26]
  for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 8000ace:	7e3b      	ldrb	r3, [r7, #24]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	763b      	strb	r3, [r7, #24]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	78db      	ldrb	r3, [r3, #3]
 8000ad8:	7e3a      	ldrb	r2, [r7, #24]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	f4ff af5e 	bcc.w	800099c <LCD_Char+0x30>
    }
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}

08000aea <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font,
              uint8_t size, uint32_t color24) {
 8000aea:	b590      	push	{r4, r7, lr}
 8000aec:	b08f      	sub	sp, #60	@ 0x3c
 8000aee:	af02      	add	r7, sp, #8
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4603      	mov	r3, r0
 8000af6:	81fb      	strh	r3, [r7, #14]
 8000af8:	460b      	mov	r3, r1
 8000afa:	81bb      	strh	r3, [r7, #12]
  int16_t cursor_x = x;
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  int16_t cursor_y = y;
 8000b00:	89bb      	ldrh	r3, [r7, #12]
 8000b02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  GFXfont font;
  memcpy(&font, p_font, sizeof(GFXfont));
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	220c      	movs	r2, #12
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 f8cd 	bl	8003cac <memcpy>
  for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000b16:	e056      	b.n	8000bc6 <LCD_Font+0xdc>
    char c = text[text_pos];
 8000b18:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if (c == '\n') {
 8000b24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000b28:	2b0a      	cmp	r3, #10
 8000b2a:	d10f      	bne.n	8000b4c <LCD_Font+0x62>
      cursor_x = x;
 8000b2c:	89fb      	ldrh	r3, [r7, #14]
 8000b2e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      cursor_y += font.yAdvance * size;
 8000b30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b34:	461a      	mov	r2, r3
 8000b36:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	fb12 f303 	smulbb	r3, r2, r3
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b44:	4413      	add	r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000b4a:	e039      	b.n	8000bc0 <LCD_Font+0xd6>
    } else if (c >= font.first && c <= font.last && c != '\r') {
 8000b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b50:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d333      	bcc.n	8000bc0 <LCD_Font+0xd6>
 8000b58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000b5c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d82d      	bhi.n	8000bc0 <LCD_Font+0xd6>
 8000b64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000b68:	2b0d      	cmp	r3, #13
 8000b6a:	d029      	beq.n	8000bc0 <LCD_Font+0xd6>
      GFXglyph glyph;
      memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8000b6c:	6a3a      	ldr	r2, [r7, #32]
 8000b6e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000b72:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000b76:	1a5b      	subs	r3, r3, r1
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	18d1      	adds	r1, r2, r3
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2208      	movs	r2, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 f892 	bl	8003cac <memcpy>
      LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8000b88:	f107 041c 	add.w	r4, r7, #28
 8000b8c:	f107 0214 	add.w	r2, r7, #20
 8000b90:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8000b94:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8000b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4623      	mov	r3, r4
 8000ba4:	f7ff fee2 	bl	800096c <LCD_Char>
      cursor_x += glyph.xAdvance * size;
 8000ba8:	7e3b      	ldrb	r3, [r7, #24]
 8000baa:	461a      	mov	r2, r3
 8000bac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	fb12 f303 	smulbb	r3, r2, r3
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8000bc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000bc6:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8000bc8:	68b8      	ldr	r0, [r7, #8]
 8000bca:	f7ff fb19 	bl	8000200 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	d3a1      	bcc.n	8000b18 <LCD_Font+0x2e>
    }
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3734      	adds	r7, #52	@ 0x34
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd90      	pop	{r4, r7, pc}
	...

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b0a5      	sub	sp, #148	@ 0x94
 8000be4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 ffe2 	bl	8001bae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 fc7f 	bl	80014ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f000 fd4b 	bl	8001688 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000bf2:	f000 fccd 	bl	8001590 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000bf6:	f000 fd09 	bl	800160c <MX_SPI3_Init>
				ILI9488_SendData(0x07FF<<3);//BLUE
			}
		}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET); //LCD CHIP SELECT
*/
  ILI9488_Init();
 8000bfa:	f7ff fbdb 	bl	80003b4 <ILI9488_Init>
HAL_Delay(1000);
 8000bfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c02:	f001 f849 	bl	8001c98 <HAL_Delay>
setRotation(1);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fe5e 	bl	80008c8 <setRotation>
fillScreen(ILI9488_WHITE);
 8000c0c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c10:	f7ff fcfc 	bl	800060c <fillScreen>


   uint16_t touchX = 0, touchY = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   //the keys:

   uint16_t Hour = 12;
 8000c20:	230c      	movs	r3, #12
 8000c22:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
   uint16_t Minute = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
   uint8_t PM = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

   char hourPrint[20];
   char minPrint[20];

   //convert int to string
   sprintf(hourPrint, "%d", Hour);
 8000c32:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8000c36:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000c3a:	49c9      	ldr	r1, [pc, #804]	@ (8000f60 <main+0x380>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 ffe1 	bl	8003c04 <siprintf>
   sprintf(minPrint, "%d", Minute);
 8000c42:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 8000c46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c4a:	49c5      	ldr	r1, [pc, #788]	@ (8000f60 <main+0x380>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 ffd9 	bl	8003c04 <siprintf>

   //
   strcat(minPrint, "0");
 8000c52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fad2 	bl	8000200 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c64:	4413      	add	r3, r2
 8000c66:	49bf      	ldr	r1, [pc, #764]	@ (8000f64 <main+0x384>)
 8000c68:	461a      	mov	r2, r3
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	8013      	strh	r3, [r2, #0]



   char  downwardArrow[] = "<";
 8000c70:	233c      	movs	r3, #60	@ 0x3c
 8000c72:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
   char upwardArrow[] = ">";
 8000c76:	233e      	movs	r3, #62	@ 0x3e
 8000c78:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

   char colon[] = ":";
 8000c7c:	233a      	movs	r3, #58	@ 0x3a
 8000c7e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
   char am[] = "AM";
 8000c82:	4ab9      	ldr	r2, [pc, #740]	@ (8000f68 <main+0x388>)
 8000c84:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	8019      	strh	r1, [r3, #0]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	0c12      	lsrs	r2, r2, #16
 8000c92:	701a      	strb	r2, [r3, #0]
   char pm[] = "PM";
 8000c94:	4ab5      	ldr	r2, [pc, #724]	@ (8000f6c <main+0x38c>)
 8000c96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	8019      	strh	r1, [r3, #0]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	0c12      	lsrs	r2, r2, #16
 8000ca4:	701a      	strb	r2, [r3, #0]
   char addNext[] = "Next";
 8000ca6:	4ab2      	ldr	r2, [pc, #712]	@ (8000f70 <main+0x390>)
 8000ca8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb0:	6018      	str	r0, [r3, #0]
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	7019      	strb	r1, [r3, #0]
   char addAnother[] = "Another Time";
 8000cb6:	4baf      	ldr	r3, [pc, #700]	@ (8000f74 <main+0x394>)
 8000cb8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cbe:	c407      	stmia	r4!, {r0, r1, r2}
 8000cc0:	7023      	strb	r3, [r4, #0]
   //LCD_Font(85, 70, downwardArrow, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
   //LCD_Font(160, 70, upwardArrow, _Open_Sans_Bold_20, 1, ILI9488_BLACK);


   //minute down arrow
   fillRect(275, 185,50,50, ILI9488_RED);
 8000cc2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2332      	movs	r3, #50	@ 0x32
 8000cca:	2232      	movs	r2, #50	@ 0x32
 8000ccc:	21b9      	movs	r1, #185	@ 0xb9
 8000cce:	f240 1013 	movw	r0, #275	@ 0x113
 8000cd2:	f7ff fcb5 	bl	8000640 <fillRect>


   //minute up arrow
   fillRect(275, 25,50,50, ILI9488_RED);
 8000cd6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2332      	movs	r3, #50	@ 0x32
 8000cde:	2232      	movs	r2, #50	@ 0x32
 8000ce0:	2119      	movs	r1, #25
 8000ce2:	f240 1013 	movw	r0, #275	@ 0x113
 8000ce6:	f7ff fcab 	bl	8000640 <fillRect>


   //hour down arrow
   fillRect(75, 185,50,50, ILI9488_RED);
 8000cea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2332      	movs	r3, #50	@ 0x32
 8000cf2:	2232      	movs	r2, #50	@ 0x32
 8000cf4:	21b9      	movs	r1, #185	@ 0xb9
 8000cf6:	204b      	movs	r0, #75	@ 0x4b
 8000cf8:	f7ff fca2 	bl	8000640 <fillRect>


     //hour up arrow
   fillRect(75, 25,50,50, ILI9488_RED);
 8000cfc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2332      	movs	r3, #50	@ 0x32
 8000d04:	2232      	movs	r2, #50	@ 0x32
 8000d06:	2119      	movs	r1, #25
 8000d08:	204b      	movs	r0, #75	@ 0x4b
 8000d0a:	f7ff fc99 	bl	8000640 <fillRect>

   //am arrow
   fillRect(382, 50,85,65, ILI9488_GREEN);
 8000d0e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2341      	movs	r3, #65	@ 0x41
 8000d16:	2255      	movs	r2, #85	@ 0x55
 8000d18:	2132      	movs	r1, #50	@ 0x32
 8000d1a:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8000d1e:	f7ff fc8f 	bl	8000640 <fillRect>

   //PM arrow
   fillRect(382, 135,85,65, ILI9488_RED);
 8000d22:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2341      	movs	r3, #65	@ 0x41
 8000d2a:	2255      	movs	r2, #85	@ 0x55
 8000d2c:	2187      	movs	r1, #135	@ 0x87
 8000d2e:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8000d32:	f7ff fc85 	bl	8000640 <fillRect>


   //Next button.
   fillRect(340, 250,105,55, ILI9488_RED);
 8000d36:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2337      	movs	r3, #55	@ 0x37
 8000d3e:	2269      	movs	r2, #105	@ 0x69
 8000d40:	21fa      	movs	r1, #250	@ 0xfa
 8000d42:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8000d46:	f7ff fc7b 	bl	8000640 <fillRect>

   //Add another button.
   fillRect(15, 250,295,55, ILI9488_RED);
 8000d4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2337      	movs	r3, #55	@ 0x37
 8000d52:	f240 1227 	movw	r2, #295	@ 0x127
 8000d56:	21fa      	movs	r1, #250	@ 0xfa
 8000d58:	200f      	movs	r0, #15
 8000d5a:	f7ff fc71 	bl	8000640 <fillRect>



   LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8000d5e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8000d62:	2300      	movs	r3, #0
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	2301      	movs	r3, #1
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4b83      	ldr	r3, [pc, #524]	@ (8000f78 <main+0x398>)
 8000d6c:	21a5      	movs	r1, #165	@ 0xa5
 8000d6e:	202d      	movs	r0, #45	@ 0x2d
 8000d70:	f7ff febb 	bl	8000aea <LCD_Font>
   LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8000d74:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	4b7d      	ldr	r3, [pc, #500]	@ (8000f78 <main+0x398>)
 8000d82:	21a5      	movs	r1, #165	@ 0xa5
 8000d84:	20fa      	movs	r0, #250	@ 0xfa
 8000d86:	f7ff feb0 	bl	8000aea <LCD_Font>
   LCD_Font(195, 165, colon, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8000d8a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	2301      	movs	r3, #1
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	4b78      	ldr	r3, [pc, #480]	@ (8000f78 <main+0x398>)
 8000d98:	21a5      	movs	r1, #165	@ 0xa5
 8000d9a:	20c3      	movs	r0, #195	@ 0xc3
 8000d9c:	f7ff fea5 	bl	8000aea <LCD_Font>
   LCD_Font(385, 100, am, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000da0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000da4:	2300      	movs	r3, #0
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	2301      	movs	r3, #1
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	4b73      	ldr	r3, [pc, #460]	@ (8000f7c <main+0x39c>)
 8000dae:	2164      	movs	r1, #100	@ 0x64
 8000db0:	f240 1081 	movw	r0, #385	@ 0x181
 8000db4:	f7ff fe99 	bl	8000aea <LCD_Font>
   LCD_Font(385, 180, pm, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000db8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	4b6d      	ldr	r3, [pc, #436]	@ (8000f7c <main+0x39c>)
 8000dc6:	21b4      	movs	r1, #180	@ 0xb4
 8000dc8:	f240 1081 	movw	r0, #385	@ 0x181
 8000dcc:	f7ff fe8d 	bl	8000aea <LCD_Font>
   LCD_Font(125, 160, addThursday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
   LCD_Font(210, 160, addFriday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
   LCD_Font(295, 160, addSaturday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);*/

   //next and another time
   LCD_Font(350, 295, addNext, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 8000dd0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	4b68      	ldr	r3, [pc, #416]	@ (8000f80 <main+0x3a0>)
 8000dde:	f240 1127 	movw	r1, #295	@ 0x127
 8000de2:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8000de6:	f7ff fe80 	bl	8000aea <LCD_Font>
   LCD_Font(25, 295, addAnother, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 8000dea:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000dee:	2300      	movs	r3, #0
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	2301      	movs	r3, #1
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	4b62      	ldr	r3, [pc, #392]	@ (8000f80 <main+0x3a0>)
 8000df8:	f240 1127 	movw	r1, #295	@ 0x127
 8000dfc:	2019      	movs	r0, #25
 8000dfe:	f7ff fe74 	bl	8000aea <LCD_Font>


  while (1)
  {

	  setRotation(2);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff fd60 	bl	80008c8 <setRotation>
	  LCD_Font(35, 200, downwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000e08:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	2301      	movs	r3, #1
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4b59      	ldr	r3, [pc, #356]	@ (8000f7c <main+0x39c>)
 8000e16:	21c8      	movs	r1, #200	@ 0xc8
 8000e18:	2023      	movs	r0, #35	@ 0x23
 8000e1a:	f7ff fe66 	bl	8000aea <LCD_Font>
	  LCD_Font(200, 200, upwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000e1e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000e22:	2300      	movs	r3, #0
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	2301      	movs	r3, #1
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	4b54      	ldr	r3, [pc, #336]	@ (8000f7c <main+0x39c>)
 8000e2c:	21c8      	movs	r1, #200	@ 0xc8
 8000e2e:	20c8      	movs	r0, #200	@ 0xc8
 8000e30:	f7ff fe5b 	bl	8000aea <LCD_Font>

	  LCD_Font(35, 400, downwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000e34:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	4b4e      	ldr	r3, [pc, #312]	@ (8000f7c <main+0x39c>)
 8000e42:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000e46:	2023      	movs	r0, #35	@ 0x23
 8000e48:	f7ff fe4f 	bl	8000aea <LCD_Font>
	  LCD_Font(200, 400, upwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000e4c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000e50:	2300      	movs	r3, #0
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2301      	movs	r3, #1
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4b48      	ldr	r3, [pc, #288]	@ (8000f7c <main+0x39c>)
 8000e5a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000e5e:	20c8      	movs	r0, #200	@ 0xc8
 8000e60:	f7ff fe43 	bl	8000aea <LCD_Font>
	  setRotation(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff fd2f 	bl	80008c8 <setRotation>
	  //char buf2[20];
	  //char buf3[20];

	  	  //ILI9488_printTextTest(buf1, 250 , 25, ILI9488_BLACK, ILI9488_WHITE, 2);
	  	 //ILI9488_printText(buf3, 150, 25, ILI9488_WHITE, ILI9488_WHITE, 1);
	  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8000e6a:	463a      	mov	r2, r7
 8000e6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	4b43      	ldr	r3, [pc, #268]	@ (8000f84 <main+0x3a4>)
 8000e78:	2119      	movs	r1, #25
 8000e7a:	2019      	movs	r0, #25
 8000e7c:	f7ff fe35 	bl	8000aea <LCD_Font>
	  	  touchX = getX();
 8000e80:	f000 fe58 	bl	8001b34 <getX>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	  	  touchY = getY();
 8000e8a:	f000 fe5d 	bl	8001b48 <getY>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	  	  sprintf(buf,"x=%3d y=%3d",touchX,touchY);
 8000e94:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8000e98:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000e9c:	f107 0014 	add.w	r0, r7, #20
 8000ea0:	4939      	ldr	r1, [pc, #228]	@ (8000f88 <main+0x3a8>)
 8000ea2:	f002 feaf 	bl	8003c04 <siprintf>
	  	  sprintf(buf1,"x=%3d y=%3d",touchX,touchY);
 8000ea6:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8000eaa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000eae:	4638      	mov	r0, r7
 8000eb0:	4935      	ldr	r1, [pc, #212]	@ (8000f88 <main+0x3a8>)
 8000eb2:	f002 fea7 	bl	8003c04 <siprintf>
	  	  //sprintf(buf2,"count=%3d entered=%3d",count,entered[count]);
	  	  //sprintf(buf3,"count=%3d entered=%3d",count,entered[count]);

	  	  //ILI9488_printTextTest(buf1, 250, 25, ILI9488_BLACK,  ILI9488_WHITE, 2);
	  	  //ILI9488_printText(buf3, 150, 25, ILI9488_BLACK, ILI9488_BLACK, 1);
	  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8000eb6:	463a      	mov	r2, r7
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <main+0x3a4>)
 8000ec2:	2119      	movs	r1, #25
 8000ec4:	2019      	movs	r0, #25
 8000ec6:	f7ff fe10 	bl	8000aea <LCD_Font>
			390, 169
			464, 172
	  	   */


	  	  if(touchX >= 390 && touchX < 464 && touchY >= 67 && touchY < 172){
 8000eca:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8000ece:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 8000ed2:	d35b      	bcc.n	8000f8c <main+0x3ac>
 8000ed4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8000ed8:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8000edc:	d256      	bcs.n	8000f8c <main+0x3ac>
 8000ede:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000ee2:	2b42      	cmp	r3, #66	@ 0x42
 8000ee4:	d952      	bls.n	8000f8c <main+0x3ac>
 8000ee6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000eea:	2bab      	cmp	r3, #171	@ 0xab
 8000eec:	d84e      	bhi.n	8000f8c <main+0x3ac>
	  		  if(PM == 1){
 8000eee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d14a      	bne.n	8000f8c <main+0x3ac>

	  			  //make PM 0.
	  			  PM = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	  			  //make AM Green & PM Red

	  			 //am arrow
	  			   fillRect(382, 50,85,65, ILI9488_GREEN);
 8000efc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2341      	movs	r3, #65	@ 0x41
 8000f04:	2255      	movs	r2, #85	@ 0x55
 8000f06:	2132      	movs	r1, #50	@ 0x32
 8000f08:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8000f0c:	f7ff fb98 	bl	8000640 <fillRect>

	  			   //PM arrow
	  			   fillRect(382, 135,85,65, ILI9488_RED);
 8000f10:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2341      	movs	r3, #65	@ 0x41
 8000f18:	2255      	movs	r2, #85	@ 0x55
 8000f1a:	2187      	movs	r1, #135	@ 0x87
 8000f1c:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8000f20:	f7ff fb8e 	bl	8000640 <fillRect>


	  			 LCD_Font(385, 100, am, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000f24:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <main+0x39c>)
 8000f32:	2164      	movs	r1, #100	@ 0x64
 8000f34:	f240 1081 	movw	r0, #385	@ 0x181
 8000f38:	f7ff fdd7 	bl	8000aea <LCD_Font>
	  			 LCD_Font(385, 180, pm, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000f3c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000f40:	2300      	movs	r3, #0
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <main+0x39c>)
 8000f4a:	21b4      	movs	r1, #180	@ 0xb4
 8000f4c:	f240 1081 	movw	r0, #385	@ 0x181
 8000f50:	f7ff fdcb 	bl	8000aea <LCD_Font>

	  			  HAL_Delay(300);
 8000f54:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f58:	f000 fe9e 	bl	8001c98 <HAL_Delay>
 8000f5c:	e016      	b.n	8000f8c <main+0x3ac>
 8000f5e:	bf00      	nop
 8000f60:	0800455c 	.word	0x0800455c
 8000f64:	08004560 	.word	0x08004560
 8000f68:	08004570 	.word	0x08004570
 8000f6c:	08004574 	.word	0x08004574
 8000f70:	08004578 	.word	0x08004578
 8000f74:	08004580 	.word	0x08004580
 8000f78:	080116ec 	.word	0x080116ec
 8000f7c:	08008b3c 	.word	0x08008b3c
 8000f80:	080065d0 	.word	0x080065d0
 8000f84:	08004ec8 	.word	0x08004ec8
 8000f88:	08004564 	.word	0x08004564
			390, 172
			464, 192
			393, 207
			464, 207
	  	   */
	  	if(touchX >= 390 && touchX < 464 && touchY >= 172 && touchY < 207){
 8000f8c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8000f90:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 8000f94:	d343      	bcc.n	800101e <main+0x43e>
 8000f96:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8000f9a:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8000f9e:	d23e      	bcs.n	800101e <main+0x43e>
 8000fa0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000fa4:	2bab      	cmp	r3, #171	@ 0xab
 8000fa6:	d93a      	bls.n	800101e <main+0x43e>
 8000fa8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000fac:	2bce      	cmp	r3, #206	@ 0xce
 8000fae:	d836      	bhi.n	800101e <main+0x43e>
	  		  		  if(PM == 0){
 8000fb0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d132      	bne.n	800101e <main+0x43e>

	  		  			  //make PM 0.
	  		  			  PM = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	  		  			  //make AM RED & PM Green
					   //am arrow
					     fillRect(382, 50,85,65, ILI9488_RED);
 8000fbe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2341      	movs	r3, #65	@ 0x41
 8000fc6:	2255      	movs	r2, #85	@ 0x55
 8000fc8:	2132      	movs	r1, #50	@ 0x32
 8000fca:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8000fce:	f7ff fb37 	bl	8000640 <fillRect>

					     //PM arrow
					     fillRect(382, 135,85,65, ILI9488_GREEN);
 8000fd2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2341      	movs	r3, #65	@ 0x41
 8000fda:	2255      	movs	r2, #85	@ 0x55
 8000fdc:	2187      	movs	r1, #135	@ 0x87
 8000fde:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8000fe2:	f7ff fb2d 	bl	8000640 <fillRect>


					   LCD_Font(385, 100, am, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000fe6:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000fea:	2300      	movs	r3, #0
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	4bcd      	ldr	r3, [pc, #820]	@ (8001328 <main+0x748>)
 8000ff4:	2164      	movs	r1, #100	@ 0x64
 8000ff6:	f240 1081 	movw	r0, #385	@ 0x181
 8000ffa:	f7ff fd76 	bl	8000aea <LCD_Font>
					     LCD_Font(385, 180, pm, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8000ffe:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001002:	2300      	movs	r3, #0
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	2301      	movs	r3, #1
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	4bc7      	ldr	r3, [pc, #796]	@ (8001328 <main+0x748>)
 800100c:	21b4      	movs	r1, #180	@ 0xb4
 800100e:	f240 1081 	movw	r0, #385	@ 0x181
 8001012:	f7ff fd6a 	bl	8000aea <LCD_Font>
	  		  			  HAL_Delay(300);
 8001016:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800101a:	f000 fe3d 	bl	8001c98 <HAL_Delay>
			335, 265
			464, 271
			335, 309
			464, 312
	  		  			  			  		  	  		  	 */
	  				 if(touchX >= 335 && touchX < 464 && touchY >= 265 && touchY < 312){
 800101e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001022:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8001026:	d933      	bls.n	8001090 <main+0x4b0>
 8001028:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800102c:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8001030:	d22e      	bcs.n	8001090 <main+0x4b0>
 8001032:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001036:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800103a:	d929      	bls.n	8001090 <main+0x4b0>
 800103c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001040:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001044:	d224      	bcs.n	8001090 <main+0x4b0>
	  					 	 	 fillRect(340, 250,105,55, ILI9488_GREEN);
 8001046:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2337      	movs	r3, #55	@ 0x37
 800104e:	2269      	movs	r2, #105	@ 0x69
 8001050:	21fa      	movs	r1, #250	@ 0xfa
 8001052:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8001056:	f7ff faf3 	bl	8000640 <fillRect>
	  					  		HAL_Delay(300);
 800105a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800105e:	f000 fe1b 	bl	8001c98 <HAL_Delay>
	  					  		fillRect(340, 250,105,55, ILI9488_RED);
 8001062:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2337      	movs	r3, #55	@ 0x37
 800106a:	2269      	movs	r2, #105	@ 0x69
 800106c:	21fa      	movs	r1, #250	@ 0xfa
 800106e:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8001072:	f7ff fae5 	bl	8000640 <fillRect>
	  					  		LCD_Font(350, 295, addNext, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 8001076:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800107a:	2300      	movs	r3, #0
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	2301      	movs	r3, #1
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4baa      	ldr	r3, [pc, #680]	@ (800132c <main+0x74c>)
 8001084:	f240 1127 	movw	r1, #295	@ 0x127
 8001088:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800108c:	f7ff fd2d 	bl	8000aea <LCD_Font>
					1, 265
					308, 265
					1, 312
					299, 306
																	 */
							 if(touchX >= 1 && touchX < 308 && touchY >= 265 && touchY < 312){
 8001090:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001094:	2b00      	cmp	r3, #0
 8001096:	d032      	beq.n	80010fe <main+0x51e>
 8001098:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800109c:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80010a0:	d22d      	bcs.n	80010fe <main+0x51e>
 80010a2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80010a6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80010aa:	d928      	bls.n	80010fe <main+0x51e>
 80010ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80010b0:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80010b4:	d223      	bcs.n	80010fe <main+0x51e>
								 	 	 fillRect(15, 250,295,55, ILI9488_GREEN);
 80010b6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2337      	movs	r3, #55	@ 0x37
 80010be:	f240 1227 	movw	r2, #295	@ 0x127
 80010c2:	21fa      	movs	r1, #250	@ 0xfa
 80010c4:	200f      	movs	r0, #15
 80010c6:	f7ff fabb 	bl	8000640 <fillRect>
										HAL_Delay(300);
 80010ca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010ce:	f000 fde3 	bl	8001c98 <HAL_Delay>
										 fillRect(15, 250,295,55, ILI9488_RED);
 80010d2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2337      	movs	r3, #55	@ 0x37
 80010da:	f240 1227 	movw	r2, #295	@ 0x127
 80010de:	21fa      	movs	r1, #250	@ 0xfa
 80010e0:	200f      	movs	r0, #15
 80010e2:	f7ff faad 	bl	8000640 <fillRect>
										 LCD_Font(25, 295, addAnother, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 80010e6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80010ea:	2300      	movs	r3, #0
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	4b8e      	ldr	r3, [pc, #568]	@ (800132c <main+0x74c>)
 80010f4:	f240 1127 	movw	r1, #295	@ 0x127
 80010f8:	2019      	movs	r0, #25
 80010fa:	f7ff fcf6 	bl	8000aea <LCD_Font>
				262, 55
				331, 55
				271, 67
				326, 67
					  			  		  	  		  	 */
			 if(touchX >= 262 && touchX < 331 && touchY >= 55 && touchY < 67){
 80010fe:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001102:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001106:	d365      	bcc.n	80011d4 <main+0x5f4>
 8001108:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800110c:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8001110:	d860      	bhi.n	80011d4 <main+0x5f4>
 8001112:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001116:	2b36      	cmp	r3, #54	@ 0x36
 8001118:	d95c      	bls.n	80011d4 <main+0x5f4>
 800111a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800111e:	2b42      	cmp	r3, #66	@ 0x42
 8001120:	d858      	bhi.n	80011d4 <main+0x5f4>
				 	 	fillRect(275, 25,50,50, ILI9488_GREEN);
 8001122:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2332      	movs	r3, #50	@ 0x32
 800112a:	2232      	movs	r2, #50	@ 0x32
 800112c:	2119      	movs	r1, #25
 800112e:	f240 1013 	movw	r0, #275	@ 0x113
 8001132:	f7ff fa85 	bl	8000640 <fillRect>
				  		HAL_Delay(300);
 8001136:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800113a:	f000 fdad 	bl	8001c98 <HAL_Delay>
				  		fillRect(275, 25,50,50, ILI9488_RED);
 800113e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2332      	movs	r3, #50	@ 0x32
 8001146:	2232      	movs	r2, #50	@ 0x32
 8001148:	2119      	movs	r1, #25
 800114a:	f240 1013 	movw	r0, #275	@ 0x113
 800114e:	f7ff fa77 	bl	8000640 <fillRect>


						//print minPrint
				  		LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8001152:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001156:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	2301      	movs	r3, #1
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4b73      	ldr	r3, [pc, #460]	@ (8001330 <main+0x750>)
 8001162:	21a5      	movs	r1, #165	@ 0xa5
 8001164:	20fa      	movs	r0, #250	@ 0xfa
 8001166:	f7ff fcc0 	bl	8000aea <LCD_Font>
						if(Minute == 0){
 800116a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10b      	bne.n	800118a <main+0x5aa>
							Minute = 30;
 8001172:	231e      	movs	r3, #30
 8001174:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
						   //copying over minPrint
						   sprintf(minPrint, "%d", Minute);
 8001178:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 800117c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001180:	496c      	ldr	r1, [pc, #432]	@ (8001334 <main+0x754>)
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fd3e 	bl	8003c04 <siprintf>
 8001188:	e019      	b.n	80011be <main+0x5de>
						}
						else{
							Minute = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
						   //copying over minPrint
						   sprintf(minPrint, "%d", Minute);
 8001190:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 8001194:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001198:	4966      	ldr	r1, [pc, #408]	@ (8001334 <main+0x754>)
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fd32 	bl	8003c04 <siprintf>
						   strcat(minPrint, "0");
 80011a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f82b 	bl	8000200 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b2:	4413      	add	r3, r2
 80011b4:	4960      	ldr	r1, [pc, #384]	@ (8001338 <main+0x758>)
 80011b6:	461a      	mov	r2, r3
 80011b8:	460b      	mov	r3, r1
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	8013      	strh	r3, [r2, #0]




						//print minPrint
						LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80011be:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80011c2:	2300      	movs	r3, #0
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	4b59      	ldr	r3, [pc, #356]	@ (8001330 <main+0x750>)
 80011cc:	21a5      	movs	r1, #165	@ 0xa5
 80011ce:	20fa      	movs	r0, #250	@ 0xfa
 80011d0:	f7ff fc8b 	bl	8000aea <LCD_Font>
	  		/*minute bottom arrow:
			262, 201
			331, 207
			287, 262
			326, 259*/
	  			 if(touchX >= 262 && touchX < 331 && touchY >= 201 && touchY < 262){
 80011d4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80011d8:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80011dc:	d366      	bcc.n	80012ac <main+0x6cc>
 80011de:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80011e2:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80011e6:	d861      	bhi.n	80012ac <main+0x6cc>
 80011e8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80011ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80011ee:	d95d      	bls.n	80012ac <main+0x6cc>
 80011f0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80011f4:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80011f8:	d258      	bcs.n	80012ac <main+0x6cc>
	  				 	 fillRect(275, 185,50,50, ILI9488_GREEN);
 80011fa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2332      	movs	r3, #50	@ 0x32
 8001202:	2232      	movs	r2, #50	@ 0x32
 8001204:	21b9      	movs	r1, #185	@ 0xb9
 8001206:	f240 1013 	movw	r0, #275	@ 0x113
 800120a:	f7ff fa19 	bl	8000640 <fillRect>
				  		HAL_Delay(300);
 800120e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001212:	f000 fd41 	bl	8001c98 <HAL_Delay>
				  		fillRect(275, 185,50,50, ILI9488_RED);
 8001216:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2332      	movs	r3, #50	@ 0x32
 800121e:	2232      	movs	r2, #50	@ 0x32
 8001220:	21b9      	movs	r1, #185	@ 0xb9
 8001222:	f240 1013 	movw	r0, #275	@ 0x113
 8001226:	f7ff fa0b 	bl	8000640 <fillRect>
						//print minPrint
				  		LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 800122a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800122e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	2301      	movs	r3, #1
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4b3d      	ldr	r3, [pc, #244]	@ (8001330 <main+0x750>)
 800123a:	21a5      	movs	r1, #165	@ 0xa5
 800123c:	20fa      	movs	r0, #250	@ 0xfa
 800123e:	f7ff fc54 	bl	8000aea <LCD_Font>
						if(Minute == 30){
 8001242:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8001246:	2b1e      	cmp	r3, #30
 8001248:	d11a      	bne.n	8001280 <main+0x6a0>
							Minute = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
						   //copying over minPrint
						   sprintf(minPrint, "%d", Minute);
 8001250:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 8001254:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001258:	4936      	ldr	r1, [pc, #216]	@ (8001334 <main+0x754>)
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fcd2 	bl	8003c04 <siprintf>
						   strcat(minPrint, "0");
 8001260:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ffcb 	bl	8000200 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001272:	4413      	add	r3, r2
 8001274:	4930      	ldr	r1, [pc, #192]	@ (8001338 <main+0x758>)
 8001276:	461a      	mov	r2, r3
 8001278:	460b      	mov	r3, r1
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	8013      	strh	r3, [r2, #0]
 800127e:	e00a      	b.n	8001296 <main+0x6b6>
						}
						else{
							Minute = 30;
 8001280:	231e      	movs	r3, #30
 8001282:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
						   //copying over minPrint
						   sprintf(minPrint, "%d", Minute);
 8001286:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 800128a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800128e:	4929      	ldr	r1, [pc, #164]	@ (8001334 <main+0x754>)
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fcb7 	bl	8003c04 <siprintf>




						//print minPrint
						LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8001296:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800129a:	2300      	movs	r3, #0
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	2301      	movs	r3, #1
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <main+0x750>)
 80012a4:	21a5      	movs	r1, #165	@ 0xa5
 80012a6:	20fa      	movs	r0, #250	@ 0xfa
 80012a8:	f7ff fc1f 	bl	8000aea <LCD_Font>
	  							6, 52
								66, 55
								6, 67
								79, 67
	  								  			  		  	  		  	 */
	  						 if(touchX >= 6 && touchX < 79 && touchY >= 52 && touchY < 67){
 80012ac:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	f240 808d 	bls.w	80013d0 <main+0x7f0>
 80012b6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80012ba:	2b4e      	cmp	r3, #78	@ 0x4e
 80012bc:	f200 8088 	bhi.w	80013d0 <main+0x7f0>
 80012c0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80012c4:	2b33      	cmp	r3, #51	@ 0x33
 80012c6:	f240 8083 	bls.w	80013d0 <main+0x7f0>
 80012ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80012ce:	2b42      	cmp	r3, #66	@ 0x42
 80012d0:	d87e      	bhi.n	80013d0 <main+0x7f0>
	  							 	 	 fillRect(75, 25,50,50, ILI9488_GREEN);
 80012d2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2332      	movs	r3, #50	@ 0x32
 80012da:	2232      	movs	r2, #50	@ 0x32
 80012dc:	2119      	movs	r1, #25
 80012de:	204b      	movs	r0, #75	@ 0x4b
 80012e0:	f7ff f9ae 	bl	8000640 <fillRect>
	  							  		HAL_Delay(300);
 80012e4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012e8:	f000 fcd6 	bl	8001c98 <HAL_Delay>
	  							  		fillRect(75, 25,50,50, ILI9488_RED);
 80012ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2332      	movs	r3, #50	@ 0x32
 80012f4:	2232      	movs	r2, #50	@ 0x32
 80012f6:	2119      	movs	r1, #25
 80012f8:	204b      	movs	r0, #75	@ 0x4b
 80012fa:	f7ff f9a1 	bl	8000640 <fillRect>



	  									//print minPrint

	  									if(Hour == 12){
 80012fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001302:	2b0c      	cmp	r3, #12
 8001304:	d11a      	bne.n	800133c <main+0x75c>
	  										Hour = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 800130c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2301      	movs	r3, #1
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <main+0x750>)
 800131c:	21a5      	movs	r1, #165	@ 0xa5
 800131e:	202d      	movs	r0, #45	@ 0x2d
 8001320:	f7ff fbe3 	bl	8000aea <LCD_Font>
 8001324:	e031      	b.n	800138a <main+0x7aa>
 8001326:	bf00      	nop
 8001328:	08008b3c 	.word	0x08008b3c
 800132c:	080065d0 	.word	0x080065d0
 8001330:	080116ec 	.word	0x080116ec
 8001334:	0800455c 	.word	0x0800455c
 8001338:	08004560 	.word	0x08004560
	  									}
	  									else if(Hour > 9){
 800133c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001340:	2b09      	cmp	r3, #9
 8001342:	d911      	bls.n	8001368 <main+0x788>
	  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8001344:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001348:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	2301      	movs	r3, #1
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	4b64      	ldr	r3, [pc, #400]	@ (80014e4 <main+0x904>)
 8001354:	21a5      	movs	r1, #165	@ 0xa5
 8001356:	202d      	movs	r0, #45	@ 0x2d
 8001358:	f7ff fbc7 	bl	8000aea <LCD_Font>
	  										Hour++;
 800135c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001360:	3301      	adds	r3, #1
 8001362:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8001366:	e010      	b.n	800138a <main+0x7aa>
	  									}

	  									else{
	  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8001368:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800136c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2301      	movs	r3, #1
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	4b5b      	ldr	r3, [pc, #364]	@ (80014e4 <main+0x904>)
 8001378:	21a5      	movs	r1, #165	@ 0xa5
 800137a:	204b      	movs	r0, #75	@ 0x4b
 800137c:	f7ff fbb5 	bl	8000aea <LCD_Font>
	  										Hour++;
 8001380:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001384:	3301      	adds	r3, #1
 8001386:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	  									}



	  										sprintf(hourPrint, "%d", Hour);
 800138a:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800138e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001392:	4955      	ldr	r1, [pc, #340]	@ (80014e8 <main+0x908>)
 8001394:	4618      	mov	r0, r3
 8001396:	f002 fc35 	bl	8003c04 <siprintf>




	  									//print minPrint
	  									if(Hour < 10){
 800139a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800139e:	2b09      	cmp	r3, #9
 80013a0:	d80b      	bhi.n	80013ba <main+0x7da>
	  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80013a2:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80013a6:	2300      	movs	r3, #0
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	2301      	movs	r3, #1
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	4b4d      	ldr	r3, [pc, #308]	@ (80014e4 <main+0x904>)
 80013b0:	21a5      	movs	r1, #165	@ 0xa5
 80013b2:	204b      	movs	r0, #75	@ 0x4b
 80013b4:	f7ff fb99 	bl	8000aea <LCD_Font>
 80013b8:	e00a      	b.n	80013d0 <main+0x7f0>
	  									}
	  									else{
	  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80013ba:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80013be:	2300      	movs	r3, #0
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4b47      	ldr	r3, [pc, #284]	@ (80014e4 <main+0x904>)
 80013c8:	21a5      	movs	r1, #165	@ 0xa5
 80013ca:	202d      	movs	r0, #45	@ 0x2d
 80013cc:	f7ff fb8d 	bl	8000aea <LCD_Font>
	  							  							75, 201
															79, 201
															75, 262
															79, 262
	  							  								  			  		  	  		  	 */
	  							  						 if(touchX >= 75 && touchX < 79 && touchY >= 201 && touchY < 262){
 80013d0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80013d4:	2b4a      	cmp	r3, #74	@ 0x4a
 80013d6:	f67f ad14 	bls.w	8000e02 <main+0x222>
 80013da:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80013de:	2b4e      	cmp	r3, #78	@ 0x4e
 80013e0:	f63f ad0f 	bhi.w	8000e02 <main+0x222>
 80013e4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80013e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80013ea:	f67f ad0a 	bls.w	8000e02 <main+0x222>
 80013ee:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80013f2:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80013f6:	f4bf ad04 	bcs.w	8000e02 <main+0x222>
	  							  							fillRect(75, 185,50,50, ILI9488_GREEN);
 80013fa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2332      	movs	r3, #50	@ 0x32
 8001402:	2232      	movs	r2, #50	@ 0x32
 8001404:	21b9      	movs	r1, #185	@ 0xb9
 8001406:	204b      	movs	r0, #75	@ 0x4b
 8001408:	f7ff f91a 	bl	8000640 <fillRect>
	  							  							  		HAL_Delay(300);
 800140c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001410:	f000 fc42 	bl	8001c98 <HAL_Delay>
	  							  							  	fillRect(75, 185,50,50, ILI9488_RED);
 8001414:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2332      	movs	r3, #50	@ 0x32
 800141c:	2232      	movs	r2, #50	@ 0x32
 800141e:	21b9      	movs	r1, #185	@ 0xb9
 8001420:	204b      	movs	r0, #75	@ 0x4b
 8001422:	f7ff f90d 	bl	8000640 <fillRect>



	  							  									//print minPrint

	  							  									if(Hour == 1){
 8001426:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800142a:	2b01      	cmp	r3, #1
 800142c:	d10f      	bne.n	800144e <main+0x86e>
	  							  										Hour = 12;
 800142e:	230c      	movs	r3, #12
 8001430:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	  							  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8001434:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	2301      	movs	r3, #1
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4b28      	ldr	r3, [pc, #160]	@ (80014e4 <main+0x904>)
 8001444:	21a5      	movs	r1, #165	@ 0xa5
 8001446:	204b      	movs	r0, #75	@ 0x4b
 8001448:	f7ff fb4f 	bl	8000aea <LCD_Font>
 800144c:	e026      	b.n	800149c <main+0x8bc>
	  							  									}
	  							  									else if(Hour > 9){
 800144e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001452:	2b09      	cmp	r3, #9
 8001454:	d911      	bls.n	800147a <main+0x89a>
	  							  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8001456:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800145a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	2301      	movs	r3, #1
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <main+0x904>)
 8001466:	21a5      	movs	r1, #165	@ 0xa5
 8001468:	202d      	movs	r0, #45	@ 0x2d
 800146a:	f7ff fb3e 	bl	8000aea <LCD_Font>
	  							  										Hour--;
 800146e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001472:	3b01      	subs	r3, #1
 8001474:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8001478:	e010      	b.n	800149c <main+0x8bc>
	  							  									}

	  							  									else{
	  							  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 800147a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800147e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	2301      	movs	r3, #1
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <main+0x904>)
 800148a:	21a5      	movs	r1, #165	@ 0xa5
 800148c:	204b      	movs	r0, #75	@ 0x4b
 800148e:	f7ff fb2c 	bl	8000aea <LCD_Font>
	  							  										Hour--;
 8001492:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001496:	3b01      	subs	r3, #1
 8001498:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	  							  									}



	  							  										sprintf(hourPrint, "%d", Hour);
 800149c:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80014a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014a4:	4910      	ldr	r1, [pc, #64]	@ (80014e8 <main+0x908>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 fbac 	bl	8003c04 <siprintf>




	  							  									//print minPrint
	  							  									if(Hour < 10){
 80014ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d80b      	bhi.n	80014cc <main+0x8ec>
	  							  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80014b4:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80014b8:	2300      	movs	r3, #0
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	2301      	movs	r3, #1
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <main+0x904>)
 80014c2:	21a5      	movs	r1, #165	@ 0xa5
 80014c4:	204b      	movs	r0, #75	@ 0x4b
 80014c6:	f7ff fb10 	bl	8000aea <LCD_Font>
 80014ca:	e49a      	b.n	8000e02 <main+0x222>
	  							  									}
	  							  									else{
	  							  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 80014cc:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80014d0:	2300      	movs	r3, #0
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	2301      	movs	r3, #1
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	4b02      	ldr	r3, [pc, #8]	@ (80014e4 <main+0x904>)
 80014da:	21a5      	movs	r1, #165	@ 0xa5
 80014dc:	202d      	movs	r0, #45	@ 0x2d
 80014de:	f7ff fb04 	bl	8000aea <LCD_Font>
  {
 80014e2:	e48e      	b.n	8000e02 <main+0x222>
 80014e4:	080116ec 	.word	0x080116ec
 80014e8:	0800455c 	.word	0x0800455c

080014ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b096      	sub	sp, #88	@ 0x58
 80014f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2244      	movs	r2, #68	@ 0x44
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fba2 	bl	8003c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800150e:	2000      	movs	r0, #0
 8001510:	f000 fe96 	bl	8002240 <HAL_PWREx_ControlVoltageScaling>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800151a:	f000 f90b 	bl	8001734 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800151e:	2310      	movs	r3, #16
 8001520:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800152a:	2360      	movs	r3, #96	@ 0x60
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001532:	2301      	movs	r3, #1
 8001534:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800153a:	233c      	movs	r3, #60	@ 0x3c
 800153c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4618      	mov	r0, r3
 8001550:	f000 ff1a 	bl	8002388 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800155a:	f000 f8eb 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2303      	movs	r3, #3
 8001564:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	2105      	movs	r1, #5
 8001576:	4618      	mov	r0, r3
 8001578:	f001 fb20 	bl	8002bbc <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001582:	f000 f8d7 	bl	8001734 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3758      	adds	r7, #88	@ 0x58
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <MX_SPI2_Init+0x74>)
 8001596:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <MX_SPI2_Init+0x78>)
 8001598:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_SPI2_Init+0x74>)
 800159c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b6:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015de:	2207      	movs	r2, #7
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015ea:	2208      	movs	r2, #8
 80015ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_SPI2_Init+0x74>)
 80015f0:	f001 fd6a 	bl	80030c8 <HAL_SPI_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f000 f89b 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000007c 	.word	0x2000007c
 8001608:	40003800 	.word	0x40003800

0800160c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001612:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <MX_SPI3_Init+0x78>)
 8001614:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001618:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800161c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001626:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800162a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_SPI3_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_SPI3_Init+0x74>)
 800163a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001642:	2218      	movs	r2, #24
 8001644:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <MX_SPI3_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <MX_SPI3_Init+0x74>)
 800165a:	2207      	movs	r2, #7
 800165c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <MX_SPI3_Init+0x74>)
 8001666:	2208      	movs	r2, #8
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_SPI3_Init+0x74>)
 800166c:	f001 fd2c 	bl	80030c8 <HAL_SPI_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 f85d 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000e0 	.word	0x200000e0
 8001684:	40003c00 	.word	0x40003c00

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <MX_GPIO_Init+0xa0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <MX_GPIO_Init+0xa0>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001728 <MX_GPIO_Init+0xa0>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <MX_GPIO_Init+0xa0>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <MX_GPIO_Init+0xa0>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <MX_GPIO_Init+0xa0>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d4:	4815      	ldr	r0, [pc, #84]	@ (800172c <MX_GPIO_Init+0xa4>)
 80016d6:	f000 fd7b 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	21c1      	movs	r1, #193	@ 0xc1
 80016de:	4814      	ldr	r0, [pc, #80]	@ (8001730 <MX_GPIO_Init+0xa8>)
 80016e0:	f000 fd76 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80016e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4619      	mov	r1, r3
 80016fc:	480b      	ldr	r0, [pc, #44]	@ (800172c <MX_GPIO_Init+0xa4>)
 80016fe:	f000 fbd5 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 8001702:	23c1      	movs	r3, #193	@ 0xc1
 8001704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_GPIO_Init+0xa8>)
 800171a:	f000 fbc7 	bl	8001eac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400
 8001730:	48000c00 	.word	0x48000c00

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_MspInit+0x44>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	4a0e      	ldr	r2, [pc, #56]	@ (8001784 <HAL_MspInit+0x44>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6613      	str	r3, [r2, #96]	@ 0x60
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <HAL_MspInit+0x44>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_MspInit+0x44>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <HAL_MspInit+0x44>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001768:	6593      	str	r3, [r2, #88]	@ 0x58
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_MspInit+0x44>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	@ 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001860 <HAL_SPI_MspInit+0xd8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d128      	bne.n	80017fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a27      	ldr	r2, [pc, #156]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80017da:	231a      	movs	r3, #26
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ea:	2305      	movs	r3, #5
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	481c      	ldr	r0, [pc, #112]	@ (8001868 <HAL_SPI_MspInit+0xe0>)
 80017f6:	f000 fb59 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017fa:	e02c      	b.n	8001856 <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1a      	ldr	r2, [pc, #104]	@ (800186c <HAL_SPI_MspInit+0xe4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d127      	bne.n	8001856 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	4a16      	ldr	r2, [pc, #88]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 800180c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001810:	6593      	str	r3, [r2, #88]	@ 0x58
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a10      	ldr	r2, [pc, #64]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_SPI_MspInit+0xdc>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001836:	2338      	movs	r3, #56	@ 0x38
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001846:	2306      	movs	r3, #6
 8001848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4807      	ldr	r0, [pc, #28]	@ (8001870 <HAL_SPI_MspInit+0xe8>)
 8001852:	f000 fb2b 	bl	8001eac <HAL_GPIO_Init>
}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	@ 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40003800 	.word	0x40003800
 8001864:	40021000 	.word	0x40021000
 8001868:	48000c00 	.word	0x48000c00
 800186c:	40003c00 	.word	0x40003c00
 8001870:	48000400 	.word	0x48000400

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <NMI_Handler+0x4>

0800187c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <MemManage_Handler+0x4>

0800188c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <UsageFault_Handler+0x4>

0800189c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ca:	f000 f9c5 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <_sbrk>:
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	@ (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
 8001904:	f002 f9a6 	bl	8003c54 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200a0000 	.word	0x200a0000
 8001934:	00000400 	.word	0x00000400
 8001938:	20000144 	.word	0x20000144
 800193c:	20000298 	.word	0x20000298

08001940 <SystemInit>:
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <remap>:


extern SPI_HandleTypeDef hspi3;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	ed87 0a05 	vstr	s0, [r7, #20]
 800196e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001972:	ed87 1a03 	vstr	s2, [r7, #12]
 8001976:	edc7 1a02 	vstr	s3, [r7, #8]
 800197a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800197e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001982:	edd7 7a04 	vldr	s15, [r7, #16]
 8001986:	ee37 7a67 	vsub.f32	s14, s14, s15
 800198a:	edd7 6a01 	vldr	s13, [r7, #4]
 800198e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001992:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001996:	ee67 6a27 	vmul.f32	s13, s14, s15
 800199a:	ed97 7a03 	vldr	s14, [r7, #12]
 800199e:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80019b2:	eeb0 0a67 	vmov.f32	s0, s15
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <getRaw>:
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
}

uint16_t getRaw(uint8_t address)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019d0:	481c      	ldr	r0, [pc, #112]	@ (8001a44 <getRaw+0x84>)
 80019d2:	f000 fbfd 	bl	80021d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 f95e 	bl	8001c98 <HAL_Delay>
	HAL_SPI_Transmit(&hspi3, &address, 1, 1000);
 80019dc:	1df9      	adds	r1, r7, #7
 80019de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e2:	2201      	movs	r2, #1
 80019e4:	4818      	ldr	r0, [pc, #96]	@ (8001a48 <getRaw+0x88>)
 80019e6:	f001 fc12 	bl	800320e <HAL_SPI_Transmit>
	address = 0x00;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 80019ee:	f107 020b 	add.w	r2, r7, #11
 80019f2:	1df9      	adds	r1, r7, #7
 80019f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	4812      	ldr	r0, [pc, #72]	@ (8001a48 <getRaw+0x88>)
 80019fe:	f001 fd7b 	bl	80034f8 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8001a02:	7afb      	ldrb	r3, [r7, #11]
 8001a04:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 8001a0a:	f107 020b 	add.w	r2, r7, #11
 8001a0e:	1df9      	adds	r1, r7, #7
 8001a10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <getRaw+0x88>)
 8001a1a:	f001 fd6d 	bl	80034f8 <HAL_SPI_TransmitReceive>
	LSB = data;
 8001a1e:	7afb      	ldrb	r3, [r7, #11]
 8001a20:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a28:	4806      	ldr	r0, [pc, #24]	@ (8001a44 <getRaw+0x84>)
 8001a2a:	f000 fbd1 	bl	80021d0 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	021a      	lsls	r2, r3, #8
 8001a32:	89bb      	ldrh	r3, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	10db      	asrs	r3, r3, #3
 8001a38:	b29b      	uxth	r3, r3
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	48000400 	.word	0x48000400
 8001a48:	200000e0 	.word	0x200000e0

08001a4c <X>:

inline static uint16_t X(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8001a52:	20d0      	movs	r0, #208	@ 0xd0
 8001a54:	f7ff ffb4 	bl	80019c0 <getRaw>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a62:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8001ab0 <X+0x64>
 8001a66:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8001ab4 <X+0x68>
 8001a6a:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001ab8 <X+0x6c>
 8001a6e:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001abc <X+0x70>
 8001a72:	eeb0 0a67 	vmov.f32	s0, s15
 8001a76:	f7ff ff75 	bl	8001964 <remap>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
 8001a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a82:	ee17 3a90 	vmov	r3, s15
 8001a86:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001a8e:	3301      	adds	r3, #1
 8001a90:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <X+0x58>
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001a9e:	d801      	bhi.n	8001aa4 <X+0x58>
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	e000      	b.n	8001aa6 <X+0x5a>
	else return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	439f8000 	.word	0x439f8000
 8001ab4:	00000000 	.word	0x00000000
 8001ab8:	456d8000 	.word	0x456d8000
 8001abc:	43960000 	.word	0x43960000

08001ac0 <Y>:

inline static uint16_t Y(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8001ac6:	2090      	movs	r0, #144	@ 0x90
 8001ac8:	f7ff ff7a 	bl	80019c0 <getRaw>
 8001acc:	4603      	mov	r3, r0
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad6:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8001b24 <Y+0x64>
 8001ada:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8001b28 <Y+0x68>
 8001ade:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001b2c <Y+0x6c>
 8001ae2:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001b30 <Y+0x70>
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	f7ff ff3b 	bl	8001964 <remap>
 8001aee:	eef0 7a40 	vmov.f32	s15, s0
 8001af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af6:	ee17 3a90 	vmov	r3, s15
 8001afa:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 8001b02:	3301      	adds	r3, #1
 8001b04:	80fb      	strh	r3, [r7, #6]
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <Y+0x58>
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 8001b12:	d801      	bhi.n	8001b18 <Y+0x58>
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	e000      	b.n	8001b1a <Y+0x5a>
	else return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	43ef8000 	.word	0x43ef8000
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	456a6000 	.word	0x456a6000
 8001b30:	43c80000 	.word	0x43c80000

08001b34 <getX>:

uint16_t getX(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
 8001b3a:	f7ff ffc1 	bl	8001ac0 <Y>
 8001b3e:	4603      	mov	r3, r0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <getY>:

uint16_t getY(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
 8001b4e:	f7ff ff7d 	bl	8001a4c <X>
 8001b52:	4603      	mov	r3, r0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <Reset_Handler>:
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b94 <LoopForever+0x2>
 8001b60:	f7ff feee 	bl	8001940 <SystemInit>
 8001b64:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <LoopForever+0x6>)
 8001b66:	490d      	ldr	r1, [pc, #52]	@ (8001b9c <LoopForever+0xa>)
 8001b68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <LoopForever+0xe>)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:
 8001b6e:	58d4      	ldr	r4, [r2, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:
 8001b74:	18c4      	adds	r4, r0, r3
 8001b76:	428c      	cmp	r4, r1
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <LoopForever+0x12>)
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba8 <LoopForever+0x16>)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:
 8001b86:	42a2      	cmp	r2, r4
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>
 8001b8a:	f002 f869 	bl	8003c60 <__libc_init_array>
 8001b8e:	f7ff f827 	bl	8000be0 <main>

08001b92 <LoopForever>:
 8001b92:	e7fe      	b.n	8001b92 <LoopForever>
 8001b94:	200a0000 	.word	0x200a0000
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	2000005c 	.word	0x2000005c
 8001ba0:	0801177c 	.word	0x0801177c
 8001ba4:	2000005c 	.word	0x2000005c
 8001ba8:	20000294 	.word	0x20000294

08001bac <ADC1_IRQHandler>:
 8001bac:	e7fe      	b.n	8001bac <ADC1_IRQHandler>

08001bae <HAL_Init>:
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	71fb      	strb	r3, [r7, #7]
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 f943 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>
 8001bbe:	200f      	movs	r0, #15
 8001bc0:	f000 f80e 	bl	8001be0 <HAL_InitTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_Init+0x22>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	e001      	b.n	8001bd4 <HAL_Init+0x26>
 8001bd0:	f7ff fdb6 	bl	8001740 <HAL_MspInit>
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_InitTick>:
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <HAL_InitTick+0x6c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <HAL_InitTick+0x5c>
 8001bf4:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_InitTick+0x70>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <HAL_InitTick+0x6c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f941 	bl	8001e92 <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_InitTick+0x56>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d809      	bhi.n	8001c30 <HAL_InitTick+0x50>
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c24:	f000 f919 	bl	8001e5a <HAL_NVIC_SetPriority>
 8001c28:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_InitTick+0x74>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e007      	b.n	8001c40 <HAL_InitTick+0x60>
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e004      	b.n	8001c40 <HAL_InitTick+0x60>
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	e001      	b.n	8001c40 <HAL_InitTick+0x60>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_IncTick>:
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20000148 	.word	0x20000148

08001c80 <HAL_GetTick>:
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000148 	.word	0x20000148

08001c98 <HAL_Delay>:
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <__NVIC_SetPriorityGrouping>:
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_SetPriority>:
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	@ (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	@ 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
 8001df0:	4313      	orrs	r3, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	@ 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	2300      	movs	r3, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff47 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	f7ff ff5c 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffb0 	bl	8001e00 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_GPIO_Init>:
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e166      	b.n	800218a <HAL_GPIO_Init+0x2de>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8158 	beq.w	8002184 <HAL_GPIO_Init+0x2d8>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d005      	beq.n	8001eec <HAL_GPIO_Init+0x40>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0xa2>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	2201      	movs	r2, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 0201 	and.w	r2, r3, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d017      	beq.n	8001f8a <HAL_GPIO_Init+0xde>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d123      	bne.n	8001fde <HAL_GPIO_Init+0x132>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	6939      	ldr	r1, [r7, #16]
 8001fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0203 	and.w	r2, r3, #3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80b2 	beq.w	8002184 <HAL_GPIO_Init+0x2d8>
 8002020:	4b61      	ldr	r3, [pc, #388]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002024:	4a60      	ldr	r2, [pc, #384]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6613      	str	r3, [r2, #96]	@ 0x60
 800202c:	4b5e      	ldr	r3, [pc, #376]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 800202e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4a5c      	ldr	r2, [pc, #368]	@ (80021ac <HAL_GPIO_Init+0x300>)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002062:	d02b      	beq.n	80020bc <HAL_GPIO_Init+0x210>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a52      	ldr	r2, [pc, #328]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d025      	beq.n	80020b8 <HAL_GPIO_Init+0x20c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a51      	ldr	r2, [pc, #324]	@ (80021b4 <HAL_GPIO_Init+0x308>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d01f      	beq.n	80020b4 <HAL_GPIO_Init+0x208>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a50      	ldr	r2, [pc, #320]	@ (80021b8 <HAL_GPIO_Init+0x30c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d019      	beq.n	80020b0 <HAL_GPIO_Init+0x204>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4f      	ldr	r2, [pc, #316]	@ (80021bc <HAL_GPIO_Init+0x310>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x200>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a4e      	ldr	r2, [pc, #312]	@ (80021c0 <HAL_GPIO_Init+0x314>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1fc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a4d      	ldr	r2, [pc, #308]	@ (80021c4 <HAL_GPIO_Init+0x318>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1f8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a4c      	ldr	r2, [pc, #304]	@ (80021c8 <HAL_GPIO_Init+0x31c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1f4>
 800209c:	2307      	movs	r3, #7
 800209e:	e00e      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020a0:	2308      	movs	r3, #8
 80020a2:	e00c      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020a4:	2306      	movs	r3, #6
 80020a6:	e00a      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020a8:	2305      	movs	r3, #5
 80020aa:	e008      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e006      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e004      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020bc:	2300      	movs	r3, #0
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	f002 0203 	and.w	r2, r2, #3
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4093      	lsls	r3, r2
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4937      	ldr	r1, [pc, #220]	@ (80021ac <HAL_GPIO_Init+0x300>)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80020dc:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HAL_GPIO_Init+0x320>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x254>
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	4a32      	ldr	r2, [pc, #200]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6093      	str	r3, [r2, #8]
 8002106:	4b31      	ldr	r3, [pc, #196]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x27e>
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4a28      	ldr	r2, [pc, #160]	@ (80021cc <HAL_GPIO_Init+0x320>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	60d3      	str	r3, [r2, #12]
 8002130:	4b26      	ldr	r3, [pc, #152]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2a8>
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6053      	str	r3, [r2, #4]
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_GPIO_Init+0x320>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2d2>
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4a13      	ldr	r2, [pc, #76]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	f47f ae91 	bne.w	8001ebc <HAL_GPIO_Init+0x10>
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00
 80021bc:	48001000 	.word	0x48001000
 80021c0:	48001400 	.word	0x48001400
 80021c4:	48001800 	.word	0x48001800
 80021c8:	48001c00 	.word	0x48001c00
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_GPIO_WritePin>:
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
 80021e0:	787b      	ldrb	r3, [r7, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_WritePin+0x1e>
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	619a      	str	r2, [r3, #24]
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_WritePin+0x24>
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_PWREx_GetVoltageRange>:
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002210:	d102      	bne.n	8002218 <HAL_PWREx_GetVoltageRange+0x18>
 8002212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002216:	e00b      	b.n	8002230 <HAL_PWREx_GetVoltageRange+0x30>
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <HAL_PWREx_GetVoltageRange+0x3c>)
 800221a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800221e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002226:	d102      	bne.n	800222e <HAL_PWREx_GetVoltageRange+0x2e>
 8002228:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800222c:	e000      	b.n	8002230 <HAL_PWREx_GetVoltageRange+0x30>
 800222e:	2300      	movs	r3, #0
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_PWREx_ControlVoltageScaling>:
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d141      	bne.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0x92>
 800224e:	4b4b      	ldr	r3, [pc, #300]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225a:	d131      	bne.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x80>
 800225c:	4b47      	ldr	r3, [pc, #284]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002262:	4a46      	ldr	r2, [pc, #280]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800226c:	4b43      	ldr	r3, [pc, #268]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002274:	4a41      	ldr	r2, [pc, #260]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b40      	ldr	r3, [pc, #256]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2232      	movs	r2, #50	@ 0x32
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	4a3f      	ldr	r2, [pc, #252]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	0c9b      	lsrs	r3, r3, #18
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e002      	b.n	800229a <HAL_PWREx_ControlVoltageScaling+0x5a>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3b01      	subs	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a6:	d102      	bne.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f2      	bne.n	8002294 <HAL_PWREx_ControlVoltageScaling+0x54>
 80022ae:	4b33      	ldr	r3, [pc, #204]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ba:	d158      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
 80022bc:	2303      	movs	r3, #3
 80022be:	e057      	b.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x130>
 80022c0:	4b2e      	ldr	r3, [pc, #184]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022c6:	4a2d      	ldr	r2, [pc, #180]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022d0:	e04d      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d8:	d141      	bne.n	800235e <HAL_PWREx_ControlVoltageScaling+0x11e>
 80022da:	4b28      	ldr	r3, [pc, #160]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e6:	d131      	bne.n	800234c <HAL_PWREx_ControlVoltageScaling+0x10c>
 80022e8:	4b24      	ldr	r3, [pc, #144]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ee:	4a23      	ldr	r2, [pc, #140]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022f8:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002300:	4a1e      	ldr	r2, [pc, #120]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2232      	movs	r2, #50	@ 0x32
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a1c      	ldr	r2, [pc, #112]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	3301      	adds	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e002      	b.n	8002326 <HAL_PWREx_ControlVoltageScaling+0xe6>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3b01      	subs	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002332:	d102      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f2      	bne.n	8002320 <HAL_PWREx_ControlVoltageScaling+0xe0>
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002346:	d112      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
 8002348:	2303      	movs	r3, #3
 800234a:	e011      	b.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x130>
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800235c:	e007      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x12e>
 800235e:	4b07      	ldr	r3, [pc, #28]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002366:	4a05      	ldr	r2, [pc, #20]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	2300      	movs	r3, #0
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40007000 	.word	0x40007000
 8002380:	20000000 	.word	0x20000000
 8002384:	431bde83 	.word	0x431bde83

08002388 <HAL_RCC_OscConfig>:
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <HAL_RCC_OscConfig+0x14>
 8002396:	2301      	movs	r3, #1
 8002398:	f000 bc08 	b.w	8002bac <HAL_RCC_OscConfig+0x824>
 800239c:	4b96      	ldr	r3, [pc, #600]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	4b94      	ldr	r3, [pc, #592]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80e4 	beq.w	8002586 <HAL_RCC_OscConfig+0x1fe>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4c>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	f040 808b 	bne.w	80024e2 <HAL_RCC_OscConfig+0x15a>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	f040 8087 	bne.w	80024e2 <HAL_RCC_OscConfig+0x15a>
 80023d4:	4b88      	ldr	r3, [pc, #544]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_OscConfig+0x64>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_OscConfig+0x64>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e3df      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	4b81      	ldr	r3, [pc, #516]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_RCC_OscConfig+0x7e>
 80023fc:	4b7e      	ldr	r3, [pc, #504]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002404:	e005      	b.n	8002412 <HAL_RCC_OscConfig+0x8a>
 8002406:	4b7c      	ldr	r3, [pc, #496]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002412:	4293      	cmp	r3, r2
 8002414:	d223      	bcs.n	800245e <HAL_RCC_OscConfig+0xd6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fd94 	bl	8002f48 <RCC_SetFlashLatencyFromMSIRange>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0xa2>
 8002426:	2301      	movs	r3, #1
 8002428:	e3c0      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 800242a:	4b73      	ldr	r3, [pc, #460]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a72      	ldr	r2, [pc, #456]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b70      	ldr	r3, [pc, #448]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	496d      	ldr	r1, [pc, #436]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	4b6b      	ldr	r3, [pc, #428]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	4968      	ldr	r1, [pc, #416]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
 800245c:	e025      	b.n	80024aa <HAL_RCC_OscConfig+0x122>
 800245e:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a65      	ldr	r2, [pc, #404]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b63      	ldr	r3, [pc, #396]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4960      	ldr	r1, [pc, #384]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	4b5e      	ldr	r3, [pc, #376]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	495b      	ldr	r1, [pc, #364]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_RCC_OscConfig+0x122>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fd54 	bl	8002f48 <RCC_SetFlashLatencyFromMSIRange>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x122>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e380      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 80024aa:	f000 fcc1 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b51      	ldr	r3, [pc, #324]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	4950      	ldr	r1, [pc, #320]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a4e      	ldr	r2, [pc, #312]	@ (8002600 <HAL_RCC_OscConfig+0x278>)
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002604 <HAL_RCC_OscConfig+0x27c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fb86 	bl	8001be0 <HAL_InitTick>
 80024d4:	4603      	mov	r3, r0
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d052      	beq.n	8002584 <HAL_RCC_OscConfig+0x1fc>
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	e364      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d032      	beq.n	8002550 <HAL_RCC_OscConfig+0x1c8>
 80024ea:	4b43      	ldr	r3, [pc, #268]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a42      	ldr	r2, [pc, #264]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	f7ff fbc3 	bl	8001c80 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x188>
 80024fe:	f7ff fbbf 	bl	8001c80 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x188>
 800250c:	2303      	movs	r3, #3
 800250e:	e34d      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002510:	4b39      	ldr	r3, [pc, #228]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x176>
 800251c:	4b36      	ldr	r3, [pc, #216]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a35      	ldr	r2, [pc, #212]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b33      	ldr	r3, [pc, #204]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4930      	ldr	r1, [pc, #192]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
 800253a:	4b2f      	ldr	r3, [pc, #188]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	492b      	ldr	r1, [pc, #172]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
 800254e:	e01a      	b.n	8002586 <HAL_RCC_OscConfig+0x1fe>
 8002550:	4b29      	ldr	r3, [pc, #164]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a28      	ldr	r2, [pc, #160]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	f7ff fb90 	bl	8001c80 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1ee>
 8002564:	f7ff fb8c 	bl	8001c80 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1ee>
 8002572:	2303      	movs	r3, #3
 8002574:	e31a      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1dc>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x1fe>
 8002584:	bf00      	nop
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d073      	beq.n	800267a <HAL_RCC_OscConfig+0x2f2>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x21c>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d10e      	bne.n	80025bc <HAL_RCC_OscConfig+0x234>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d10b      	bne.n	80025bc <HAL_RCC_OscConfig+0x234>
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d063      	beq.n	8002678 <HAL_RCC_OscConfig+0x2f0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d15f      	bne.n	8002678 <HAL_RCC_OscConfig+0x2f0>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e2f7      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c4:	d106      	bne.n	80025d4 <HAL_RCC_OscConfig+0x24c>
 80025c6:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a0b      	ldr	r2, [pc, #44]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e025      	b.n	8002620 <HAL_RCC_OscConfig+0x298>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025dc:	d114      	bne.n	8002608 <HAL_RCC_OscConfig+0x280>
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a05      	ldr	r2, [pc, #20]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b03      	ldr	r3, [pc, #12]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a02      	ldr	r2, [pc, #8]	@ (80025f8 <HAL_RCC_OscConfig+0x270>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e013      	b.n	8002620 <HAL_RCC_OscConfig+0x298>
 80025f8:	40021000 	.word	0x40021000
 80025fc:	080116f8 	.word	0x080116f8
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004
 8002608:	4ba0      	ldr	r3, [pc, #640]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a9f      	ldr	r2, [pc, #636]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b9d      	ldr	r3, [pc, #628]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a9c      	ldr	r2, [pc, #624]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0x2c8>
 8002628:	f7ff fb2a 	bl	8001c80 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x2ba>
 8002630:	f7ff fb26 	bl	8001c80 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	@ 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x2ba>
 800263e:	2303      	movs	r3, #3
 8002640:	e2b4      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002642:	4b92      	ldr	r3, [pc, #584]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x2a8>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x2f2>
 8002650:	f7ff fb16 	bl	8001c80 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x2e2>
 8002658:	f7ff fb12 	bl	8001c80 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	@ 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x2e2>
 8002666:	2303      	movs	r3, #3
 8002668:	e2a0      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 800266a:	4b88      	ldr	r3, [pc, #544]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x2d0>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x2f2>
 8002678:	bf00      	nop
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d060      	beq.n	8002748 <HAL_RCC_OscConfig+0x3c0>
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d005      	beq.n	8002698 <HAL_RCC_OscConfig+0x310>
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d119      	bne.n	80026c6 <HAL_RCC_OscConfig+0x33e>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_OscConfig+0x33e>
 8002698:	4b7c      	ldr	r3, [pc, #496]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x328>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_OscConfig+0x328>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e27d      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 80026b0:	4b76      	ldr	r3, [pc, #472]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	4973      	ldr	r1, [pc, #460]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
 80026c4:	e040      	b.n	8002748 <HAL_RCC_OscConfig+0x3c0>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d023      	beq.n	8002716 <HAL_RCC_OscConfig+0x38e>
 80026ce:	4b6f      	ldr	r3, [pc, #444]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6e      	ldr	r2, [pc, #440]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	f7ff fad1 	bl	8001c80 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x36c>
 80026e2:	f7ff facd 	bl	8001c80 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x36c>
 80026f0:	2303      	movs	r3, #3
 80026f2:	e25b      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 80026f4:	4b65      	ldr	r3, [pc, #404]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x35a>
 8002700:	4b62      	ldr	r3, [pc, #392]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	495f      	ldr	r1, [pc, #380]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	e018      	b.n	8002748 <HAL_RCC_OscConfig+0x3c0>
 8002716:	4b5d      	ldr	r3, [pc, #372]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5c      	ldr	r2, [pc, #368]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800271c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	f7ff faad 	bl	8001c80 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x3b4>
 800272a:	f7ff faa9 	bl	8001c80 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x3b4>
 8002738:	2303      	movs	r3, #3
 800273a:	e237      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 800273c:	4b53      	ldr	r3, [pc, #332]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x3a2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03c      	beq.n	80027ce <HAL_RCC_OscConfig+0x446>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01c      	beq.n	8002796 <HAL_RCC_OscConfig+0x40e>
 800275c:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002762:	4a4a      	ldr	r2, [pc, #296]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800276c:	f7ff fa88 	bl	8001c80 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x3fe>
 8002774:	f7ff fa84 	bl	8001c80 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x3fe>
 8002782:	2303      	movs	r3, #3
 8002784:	e212      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002786:	4b41      	ldr	r3, [pc, #260]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <HAL_RCC_OscConfig+0x3ec>
 8002794:	e01b      	b.n	80027ce <HAL_RCC_OscConfig+0x446>
 8002796:	4b3d      	ldr	r3, [pc, #244]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800279c:	4a3b      	ldr	r2, [pc, #236]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80027a6:	f7ff fa6b 	bl	8001c80 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x438>
 80027ae:	f7ff fa67 	bl	8001c80 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x438>
 80027bc:	2303      	movs	r3, #3
 80027be:	e1f5      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 80027c0:	4b32      	ldr	r3, [pc, #200]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ef      	bne.n	80027ae <HAL_RCC_OscConfig+0x426>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80a6 	beq.w	8002928 <HAL_RCC_OscConfig+0x5a0>
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
 80027e0:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <HAL_RCC_OscConfig+0x480>
 80027ec:	4b27      	ldr	r3, [pc, #156]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	4a26      	ldr	r2, [pc, #152]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2301      	movs	r3, #1
 8002806:	77fb      	strb	r3, [r7, #31]
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <HAL_RCC_OscConfig+0x508>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d118      	bne.n	8002846 <HAL_RCC_OscConfig+0x4be>
 8002814:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <HAL_RCC_OscConfig+0x508>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <HAL_RCC_OscConfig+0x508>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	f7ff fa2e 	bl	8001c80 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x4b2>
 8002828:	f7ff fa2a 	bl	8001c80 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x4b2>
 8002836:	2303      	movs	r3, #3
 8002838:	e1b8      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HAL_RCC_OscConfig+0x508>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x4a0>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x4d8>
 800284e:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800285e:	e029      	b.n	80028b4 <HAL_RCC_OscConfig+0x52c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d115      	bne.n	8002894 <HAL_RCC_OscConfig+0x50c>
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	4a07      	ldr	r2, [pc, #28]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002878:	4b04      	ldr	r3, [pc, #16]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	4a03      	ldr	r2, [pc, #12]	@ (800288c <HAL_RCC_OscConfig+0x504>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002888:	e014      	b.n	80028b4 <HAL_RCC_OscConfig+0x52c>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	4b9d      	ldr	r3, [pc, #628]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289a:	4a9c      	ldr	r2, [pc, #624]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028a4:	4b99      	ldr	r3, [pc, #612]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	4a98      	ldr	r2, [pc, #608]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d016      	beq.n	80028ea <HAL_RCC_OscConfig+0x562>
 80028bc:	f7ff f9e0 	bl	8001c80 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x552>
 80028c4:	f7ff f9dc 	bl	8001c80 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x552>
 80028d6:	2303      	movs	r3, #3
 80028d8:	e168      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 80028da:	4b8c      	ldr	r3, [pc, #560]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ed      	beq.n	80028c4 <HAL_RCC_OscConfig+0x53c>
 80028e8:	e015      	b.n	8002916 <HAL_RCC_OscConfig+0x58e>
 80028ea:	f7ff f9c9 	bl	8001c80 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x580>
 80028f2:	f7ff f9c5 	bl	8001c80 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x580>
 8002904:	2303      	movs	r3, #3
 8002906:	e151      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002908:	4b80      	ldr	r3, [pc, #512]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ed      	bne.n	80028f2 <HAL_RCC_OscConfig+0x56a>
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_RCC_OscConfig+0x5a0>
 800291c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	4a7a      	ldr	r2, [pc, #488]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002926:	6593      	str	r3, [r2, #88]	@ 0x58
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03c      	beq.n	80029ae <HAL_RCC_OscConfig+0x626>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01c      	beq.n	8002976 <HAL_RCC_OscConfig+0x5ee>
 800293c:	4b73      	ldr	r3, [pc, #460]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800293e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002942:	4a72      	ldr	r2, [pc, #456]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 800294c:	f7ff f998 	bl	8001c80 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x5de>
 8002954:	f7ff f994 	bl	8001c80 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x5de>
 8002962:	2303      	movs	r3, #3
 8002964:	e122      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002966:	4b69      	ldr	r3, [pc, #420]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002968:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCC_OscConfig+0x5cc>
 8002974:	e01b      	b.n	80029ae <HAL_RCC_OscConfig+0x626>
 8002976:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800297c:	4a63      	ldr	r2, [pc, #396]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002986:	f7ff f97b 	bl	8001c80 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x618>
 800298e:	f7ff f977 	bl	8001c80 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x618>
 800299c:	2303      	movs	r3, #3
 800299e:	e105      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 80029a0:	4b5a      	ldr	r3, [pc, #360]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80029a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ef      	bne.n	800298e <HAL_RCC_OscConfig+0x606>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80f9 	beq.w	8002baa <HAL_RCC_OscConfig+0x822>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	2b02      	cmp	r3, #2
 80029be:	f040 80cf 	bne.w	8002b60 <HAL_RCC_OscConfig+0x7d8>
 80029c2:	4b52      	ldr	r3, [pc, #328]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0203 	and.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d12c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e0:	3b01      	subs	r3, #1
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d123      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d11b      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	06db      	lsls	r3, r3, #27
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d113      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	055b      	lsls	r3, r3, #21
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d109      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6a8>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	065b      	lsls	r3, r3, #25
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d071      	beq.n	8002b14 <HAL_RCC_OscConfig+0x78c>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d068      	beq.n	8002b08 <HAL_RCC_OscConfig+0x780>
 8002a36:	4b35      	ldr	r3, [pc, #212]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_OscConfig+0x6c6>
 8002a42:	4b32      	ldr	r3, [pc, #200]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x6ca>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0ac      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002a52:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a2d      	ldr	r2, [pc, #180]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	f7ff f90f 	bl	8001c80 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x6f0>
 8002a66:	f7ff f90b 	bl	8001c80 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x6f0>
 8002a74:	2303      	movs	r3, #3
 8002a76:	e099      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002a78:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x6de>
 8002a84:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <HAL_RCC_OscConfig+0x788>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a94:	3a01      	subs	r2, #1
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	4311      	orrs	r1, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a9e:	0212      	lsls	r2, r2, #8
 8002aa0:	4311      	orrs	r1, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002aa6:	0852      	lsrs	r2, r2, #1
 8002aa8:	3a01      	subs	r2, #1
 8002aaa:	0552      	lsls	r2, r2, #21
 8002aac:	4311      	orrs	r1, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ab2:	0852      	lsrs	r2, r2, #1
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	0652      	lsls	r2, r2, #25
 8002ab8:	4311      	orrs	r1, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002abe:	06d2      	lsls	r2, r2, #27
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	4912      	ldr	r1, [pc, #72]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60cb      	str	r3, [r1, #12]
 8002ac8:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ade:	60d3      	str	r3, [r2, #12]
 8002ae0:	f7ff f8ce 	bl	8001c80 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x772>
 8002ae8:	f7ff f8ca 	bl	8001c80 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x772>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e058      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002afa:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <HAL_RCC_OscConfig+0x784>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x760>
 8002b06:	e050      	b.n	8002baa <HAL_RCC_OscConfig+0x822>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e04f      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	019d800c 	.word	0x019d800c
 8002b14:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d144      	bne.n	8002baa <HAL_RCC_OscConfig+0x822>
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b21      	ldr	r3, [pc, #132]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a20      	ldr	r2, [pc, #128]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b36:	60d3      	str	r3, [r2, #12]
 8002b38:	f7ff f8a2 	bl	8001c80 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x7ca>
 8002b40:	f7ff f89e 	bl	8001c80 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x7ca>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e02c      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002b52:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x7b8>
 8002b5e:	e024      	b.n	8002baa <HAL_RCC_OscConfig+0x822>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d01f      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x81e>
 8002b66:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	f7ff f885 	bl	8001c80 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x804>
 8002b7a:	f7ff f881 	bl	8001c80 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x804>
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e00f      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x7f2>
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	4905      	ldr	r1, [pc, #20]	@ (8002bb4 <HAL_RCC_OscConfig+0x82c>)
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_RCC_OscConfig+0x830>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60cb      	str	r3, [r1, #12]
 8002ba4:	e001      	b.n	8002baa <HAL_RCC_OscConfig+0x822>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x824>
 8002baa:	2300      	movs	r3, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	feeefffc 	.word	0xfeeefffc

08002bbc <HAL_RCC_ClockConfig>:
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x18>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e11d      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
 8002bd4:	4b90      	ldr	r3, [pc, #576]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x48>
 8002be2:	4b8d      	ldr	r3, [pc, #564]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 020f 	bic.w	r2, r3, #15
 8002bea:	498b      	ldr	r1, [pc, #556]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
 8002bf2:	4b89      	ldr	r3, [pc, #548]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x48>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e105      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d010      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x76>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	4b81      	ldr	r3, [pc, #516]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d908      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x76>
 8002c20:	4b7e      	ldr	r3, [pc, #504]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	497b      	ldr	r1, [pc, #492]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d079      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x176>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d11e      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xc8>
 8002c46:	4b75      	ldr	r3, [pc, #468]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x9a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0dc      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
 8002c56:	f000 f9d1 	bl	8002ffc <RCC_GetSysClockFreqFromPLLSource>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a70      	ldr	r2, [pc, #448]	@ (8002e20 <HAL_RCC_ClockConfig+0x264>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d946      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
 8002c62:	4b6e      	ldr	r3, [pc, #440]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d140      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
 8002c6e:	4b6b      	ldr	r3, [pc, #428]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c76:	4a69      	ldr	r2, [pc, #420]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c7c:	6093      	str	r3, [r2, #8]
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e035      	b.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xe0>
 8002c8c:	4b63      	ldr	r3, [pc, #396]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d115      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x108>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b9      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
 8002ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x108>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0ad      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
 8002cb4:	4b59      	ldr	r3, [pc, #356]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x108>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0a5      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
 8002cc4:	f000 f8b4 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4a55      	ldr	r2, [pc, #340]	@ (8002e20 <HAL_RCC_ClockConfig+0x264>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d90f      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
 8002cd0:	4b52      	ldr	r3, [pc, #328]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x134>
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cea:	6093      	str	r3, [r2, #8]
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 0203 	bic.w	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4947      	ldr	r1, [pc, #284]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
 8002d02:	f7fe ffbd 	bl	8001c80 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_ClockConfig+0x164>
 8002d0a:	f7fe ffb9 	bl	8001c80 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x164>
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e077      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
 8002d20:	4b3e      	ldr	r3, [pc, #248]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 020c 	and.w	r2, r3, #12
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d1eb      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x14e>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b80      	cmp	r3, #128	@ 0x80
 8002d36:	d105      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x188>
 8002d38:	4b38      	ldr	r3, [pc, #224]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a37      	ldr	r2, [pc, #220]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d42:	6093      	str	r3, [r2, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d208      	bcs.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
 8002d60:	4b2e      	ldr	r3, [pc, #184]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	492b      	ldr	r1, [pc, #172]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
 8002d72:	4b29      	ldr	r3, [pc, #164]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d210      	bcs.n	8002da2 <HAL_RCC_ClockConfig+0x1e6>
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 020f 	bic.w	r2, r3, #15
 8002d88:	4923      	ldr	r1, [pc, #140]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x1e6>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e036      	b.n	8002e10 <HAL_RCC_ClockConfig+0x254>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x204>
 8002dae:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	4918      	ldr	r1, [pc, #96]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x224>
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4910      	ldr	r1, [pc, #64]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]
 8002de0:	f000 f826 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	490c      	ldr	r1, [pc, #48]	@ (8002e24 <HAL_RCC_ClockConfig+0x268>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e28 <HAL_RCC_ClockConfig+0x26c>)
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_RCC_ClockConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe feeb 	bl	8001be0 <HAL_InitTick>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	04c4b400 	.word	0x04c4b400
 8002e24:	080116f8 	.word	0x080116f8
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_RCC_GetSysClockFreq>:
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	@ 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	4b3b      	ldr	r3, [pc, #236]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x34>
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	d121      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x72>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d11e      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x72>
 8002e64:	4b34      	ldr	r3, [pc, #208]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_GetSysClockFreq+0x50>
 8002e70:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e005      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x5c>
 8002e80:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_GetSysClockFreq+0x7e>
 8002ea8:	4b25      	ldr	r3, [pc, #148]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	e004      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
 8002eb4:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d134      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0xf8>
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d003      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0xac>
 8002ed4:	e005      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0xb2>
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e005      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xb8>
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e002      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xb8>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	bf00      	nop
 8002ee8:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	fb03 f202 	mul.w	r2, r3, r2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	0e5b      	lsrs	r3, r3, #25
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	@ 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08011708 	.word	0x08011708
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <RCC_SetFlashLatencyFromMSIRange>:
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	4b27      	ldr	r3, [pc, #156]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <RCC_SetFlashLatencyFromMSIRange+0x20>
 8002f60:	f7ff f94e 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002f64:	6178      	str	r0, [r7, #20]
 8002f66:	e014      	b.n	8002f92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8002f68:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	4a21      	ldr	r2, [pc, #132]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f74:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f7ff f93e 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002f84:	6178      	str	r0, [r7, #20]
 8002f86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f98:	d10b      	bne.n	8002fb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b80      	cmp	r3, #128	@ 0x80
 8002f9e:	d913      	bls.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fa4:	d902      	bls.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x64>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	e00d      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8002fac:	2301      	movs	r3, #1
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	e00a      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fb6:	d902      	bls.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0x76>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e004      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b70      	cmp	r3, #112	@ 0x70
 8002fc2:	d101      	bne.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 020f 	bic.w	r2, r3, #15
 8002fd0:	4909      	ldr	r1, [pc, #36]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
 8002fd8:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d001      	beq.n	8002fea <RCC_SetFlashLatencyFromMSIRange+0xa2>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0xa4>
 8002fea:	2300      	movs	r3, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40022000 	.word	0x40022000

08002ffc <RCC_GetSysClockFreqFromPLLSource>:
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d00b      	beq.n	800302a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d825      	bhi.n	8003064 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d008      	beq.n	8003030 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d11f      	bne.n	8003064 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003024:	4b25      	ldr	r3, [pc, #148]	@ (80030bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	e01f      	b.n	800306a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 800302a:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	e01c      	b.n	800306a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003030:	4b21      	ldr	r3, [pc, #132]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <RCC_GetSysClockFreqFromPLLSource+0x50>
 800303c:	4b1e      	ldr	r3, [pc, #120]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e005      	b.n	8003058 <RCC_GetSysClockFreqFromPLLSource+0x5c>
 800304c:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	4a1a      	ldr	r2, [pc, #104]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	e002      	b.n	800306a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	bf00      	nop
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	3301      	adds	r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	fb03 f202 	mul.w	r2, r3, r2
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	fbb2 f3f3 	udiv	r3, r2, r3
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	0e5b      	lsrs	r3, r3, #25
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	3301      	adds	r3, #1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40021000 	.word	0x40021000
 80030bc:	00f42400 	.word	0x00f42400
 80030c0:	007a1200 	.word	0x007a1200
 80030c4:	08011708 	.word	0x08011708

080030c8 <HAL_SPI_Init>:
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_SPI_Init+0x12>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e095      	b.n	8003206 <HAL_SPI_Init+0x13e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d108      	bne.n	80030f4 <HAL_SPI_Init+0x2c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030ea:	d009      	beq.n	8003100 <HAL_SPI_Init+0x38>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
 80030f2:	e005      	b.n	8003100 <HAL_SPI_Init+0x38>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	615a      	str	r2, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_SPI_Init+0x58>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe fb34 	bl	8001788 <HAL_SPI_MspInit>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003140:	d902      	bls.n	8003148 <HAL_SPI_Init+0x80>
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e002      	b.n	800314e <HAL_SPI_Init+0x86>
 8003148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003156:	d007      	beq.n	8003168 <HAL_SPI_Init+0xa0>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003160:	d002      	beq.n	8003168 <HAL_SPI_Init+0xa0>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	629a      	str	r2, [r3, #40]	@ 0x28
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	ea42 0103 	orr.w	r1, r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	f003 0204 	and.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031e4:	ea42 0103 	orr.w	r1, r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	661a      	str	r2, [r3, #96]	@ 0x60
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003204:	2300      	movs	r3, #0
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_SPI_Transmit>:
 800320e:	b580      	push	{r7, lr}
 8003210:	b088      	sub	sp, #32
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
 800321e:	2300      	movs	r3, #0
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_SPI_Transmit+0x22>
 800322c:	2302      	movs	r3, #2
 800322e:	e15f      	b.n	80034f0 <HAL_SPI_Transmit+0x2e2>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003238:	f7fe fd22 	bl	8001c80 <HAL_GetTick>
 800323c:	61b8      	str	r0, [r7, #24]
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	82fb      	strh	r3, [r7, #22]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d002      	beq.n	8003254 <HAL_SPI_Transmit+0x46>
 800324e:	2302      	movs	r3, #2
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e148      	b.n	80034e6 <HAL_SPI_Transmit+0x2d8>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_SPI_Transmit+0x52>
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_SPI_Transmit+0x58>
 8003260:	2301      	movs	r3, #1
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e13f      	b.n	80034e6 <HAL_SPI_Transmit+0x2d8>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	661a      	str	r2, [r3, #96]	@ 0x60
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	639a      	str	r2, [r3, #56]	@ 0x38
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b0:	d10f      	bne.n	80032d2 <HAL_SPI_Transmit+0xc4>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032dc:	2b40      	cmp	r3, #64	@ 0x40
 80032de:	d007      	beq.n	80032f0 <HAL_SPI_Transmit+0xe2>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032f8:	d94f      	bls.n	800339a <HAL_SPI_Transmit+0x18c>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_Transmit+0xfa>
 8003302:	8afb      	ldrh	r3, [r7, #22]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d142      	bne.n	800338e <HAL_SPI_Transmit+0x180>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	1c9a      	adds	r2, r3, #2
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	639a      	str	r2, [r3, #56]	@ 0x38
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800332c:	e02f      	b.n	800338e <HAL_SPI_Transmit+0x180>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b02      	cmp	r3, #2
 800333a:	d112      	bne.n	8003362 <HAL_SPI_Transmit+0x154>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	881a      	ldrh	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60da      	str	r2, [r3, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	1c9a      	adds	r2, r3, #2
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	639a      	str	r2, [r3, #56]	@ 0x38
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003360:	e015      	b.n	800338e <HAL_SPI_Transmit+0x180>
 8003362:	f7fe fc8d 	bl	8001c80 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d803      	bhi.n	800337a <HAL_SPI_Transmit+0x16c>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003378:	d102      	bne.n	8003380 <HAL_SPI_Transmit+0x172>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <HAL_SPI_Transmit+0x180>
 8003380:	2303      	movs	r3, #3
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800338c:	e0ab      	b.n	80034e6 <HAL_SPI_Transmit+0x2d8>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ca      	bne.n	800332e <HAL_SPI_Transmit+0x120>
 8003398:	e080      	b.n	800349c <HAL_SPI_Transmit+0x28e>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_SPI_Transmit+0x19a>
 80033a2:	8afb      	ldrh	r3, [r7, #22]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d174      	bne.n	8003492 <HAL_SPI_Transmit+0x284>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d912      	bls.n	80033d8 <HAL_SPI_Transmit+0x1ca>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b6:	881a      	ldrh	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	1c9a      	adds	r2, r3, #2
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b02      	subs	r3, #2
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033d6:	e05c      	b.n	8003492 <HAL_SPI_Transmit+0x284>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	7812      	ldrb	r2, [r2, #0]
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033fe:	e048      	b.n	8003492 <HAL_SPI_Transmit+0x284>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d12b      	bne.n	8003466 <HAL_SPI_Transmit+0x258>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d912      	bls.n	800343e <HAL_SPI_Transmit+0x230>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	881a      	ldrh	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003428:	1c9a      	adds	r2, r3, #2
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b02      	subs	r3, #2
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800343c:	e029      	b.n	8003492 <HAL_SPI_Transmit+0x284>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	639a      	str	r2, [r3, #56]	@ 0x38
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003464:	e015      	b.n	8003492 <HAL_SPI_Transmit+0x284>
 8003466:	f7fe fc0b 	bl	8001c80 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d803      	bhi.n	800347e <HAL_SPI_Transmit+0x270>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800347c:	d102      	bne.n	8003484 <HAL_SPI_Transmit+0x276>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_SPI_Transmit+0x284>
 8003484:	2303      	movs	r3, #3
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003490:	e029      	b.n	80034e6 <HAL_SPI_Transmit+0x2d8>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1b1      	bne.n	8003400 <HAL_SPI_Transmit+0x1f2>
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fb69 	bl	8003b78 <SPI_EndRxTxTransaction>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_SPI_Transmit+0x2a4>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <HAL_SPI_Transmit+0x2c2>
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_SPI_Transmit+0x2d0>
 80034d8:	2301      	movs	r3, #1
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e003      	b.n	80034e6 <HAL_SPI_Transmit+0x2d8>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80034ee:	7ffb      	ldrb	r3, [r7, #31]
 80034f0:	4618      	mov	r0, r3
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_SPI_TransmitReceive>:
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	@ 0x28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	807b      	strh	r3, [r7, #2]
 8003506:	2301      	movs	r3, #1
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
 800350a:	2300      	movs	r3, #0
 800350c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_SPI_TransmitReceive+0x26>
 800351a:	2302      	movs	r3, #2
 800351c:	e20a      	b.n	8003934 <HAL_SPI_TransmitReceive+0x43c>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003526:	f7fe fbab 	bl	8001c80 <HAL_GetTick>
 800352a:	61f8      	str	r0, [r7, #28]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003532:	76fb      	strb	r3, [r7, #27]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	827b      	strh	r3, [r7, #18]
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	823b      	strh	r3, [r7, #16]
 8003542:	7efb      	ldrb	r3, [r7, #27]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d00e      	beq.n	8003566 <HAL_SPI_TransmitReceive+0x6e>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800354e:	d106      	bne.n	800355e <HAL_SPI_TransmitReceive+0x66>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <HAL_SPI_TransmitReceive+0x66>
 8003558:	7efb      	ldrb	r3, [r7, #27]
 800355a:	2b04      	cmp	r3, #4
 800355c:	d003      	beq.n	8003566 <HAL_SPI_TransmitReceive+0x6e>
 800355e:	2302      	movs	r3, #2
 8003560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003564:	e1e0      	b.n	8003928 <HAL_SPI_TransmitReceive+0x430>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x80>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x80>
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x88>
 8003578:	2301      	movs	r3, #1
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800357e:	e1d3      	b.n	8003928 <HAL_SPI_TransmitReceive+0x430>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b04      	cmp	r3, #4
 800358a:	d003      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x9c>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2205      	movs	r2, #5
 8003590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	661a      	str	r2, [r3, #96]	@ 0x60
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	887a      	ldrh	r2, [r7, #2]
 80035ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	887a      	ldrh	r2, [r7, #2]
 80035c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035d6:	d802      	bhi.n	80035de <HAL_SPI_TransmitReceive+0xe6>
 80035d8:	8a3b      	ldrh	r3, [r7, #16]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d908      	bls.n	80035f0 <HAL_SPI_TransmitReceive+0xf8>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	e007      	b.n	8003600 <HAL_SPI_TransmitReceive+0x108>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b40      	cmp	r3, #64	@ 0x40
 800360c:	d007      	beq.n	800361e <HAL_SPI_TransmitReceive+0x126>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003626:	f240 8081 	bls.w	800372c <HAL_SPI_TransmitReceive+0x234>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_SPI_TransmitReceive+0x140>
 8003632:	8a7b      	ldrh	r3, [r7, #18]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d16d      	bne.n	8003714 <HAL_SPI_TransmitReceive+0x21c>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363c:	881a      	ldrh	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003648:	1c9a      	adds	r2, r3, #2
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	639a      	str	r2, [r3, #56]	@ 0x38
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800365c:	e05a      	b.n	8003714 <HAL_SPI_TransmitReceive+0x21c>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b02      	cmp	r3, #2
 800366a:	d11b      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x1ac>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d016      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0x1ac>
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	2b01      	cmp	r3, #1
 800367a:	d113      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x1ac>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	@ 0x38
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d11c      	bne.n	80036ec <HAL_SPI_TransmitReceive+0x1f4>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x1f4>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	b292      	uxth	r2, r2
 80036ca:	801a      	strh	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	1c9a      	adds	r2, r3, #2
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80036e8:	2301      	movs	r3, #1
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ec:	f7fe fac8 	bl	8001c80 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d80b      	bhi.n	8003714 <HAL_SPI_TransmitReceive+0x21c>
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003702:	d007      	beq.n	8003714 <HAL_SPI_TransmitReceive+0x21c>
 8003704:	2303      	movs	r3, #3
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003712:	e109      	b.n	8003928 <HAL_SPI_TransmitReceive+0x430>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d19f      	bne.n	800365e <HAL_SPI_TransmitReceive+0x166>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d199      	bne.n	800365e <HAL_SPI_TransmitReceive+0x166>
 800372a:	e0e3      	b.n	80038f4 <HAL_SPI_TransmitReceive+0x3fc>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_SPI_TransmitReceive+0x244>
 8003734:	8a7b      	ldrh	r3, [r7, #18]
 8003736:	2b01      	cmp	r3, #1
 8003738:	f040 80cf 	bne.w	80038da <HAL_SPI_TransmitReceive+0x3e2>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d912      	bls.n	800376c <HAL_SPI_TransmitReceive+0x274>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003756:	1c9a      	adds	r2, r3, #2
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b02      	subs	r3, #2
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800376a:	e0b6      	b.n	80038da <HAL_SPI_TransmitReceive+0x3e2>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	639a      	str	r2, [r3, #56]	@ 0x38
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003792:	e0a2      	b.n	80038da <HAL_SPI_TransmitReceive+0x3e2>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d134      	bne.n	800380c <HAL_SPI_TransmitReceive+0x314>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02f      	beq.n	800380c <HAL_SPI_TransmitReceive+0x314>
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d12c      	bne.n	800380c <HAL_SPI_TransmitReceive+0x314>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d912      	bls.n	80037e2 <HAL_SPI_TransmitReceive+0x2ea>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c0:	881a      	ldrh	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	1c9a      	adds	r2, r3, #2
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b02      	subs	r3, #2
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037e0:	e012      	b.n	8003808 <HAL_SPI_TransmitReceive+0x310>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	7812      	ldrb	r2, [r2, #0]
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d148      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x3b4>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d042      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x3b4>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d923      	bls.n	800387a <HAL_SPI_TransmitReceive+0x382>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	b292      	uxth	r2, r2
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	1c9a      	adds	r2, r3, #2
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	641a      	str	r2, [r3, #64]	@ 0x40
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b02      	subs	r3, #2
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d81f      	bhi.n	80038a8 <HAL_SPI_TransmitReceive+0x3b0>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	e016      	b.n	80038a8 <HAL_SPI_TransmitReceive+0x3b0>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f103 020c 	add.w	r2, r3, #12
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	@ 0x40
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80038a8:	2301      	movs	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ac:	f7fe f9e8 	bl	8001c80 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d803      	bhi.n	80038c4 <HAL_SPI_TransmitReceive+0x3cc>
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038c2:	d102      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x3d2>
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d107      	bne.n	80038da <HAL_SPI_TransmitReceive+0x3e2>
 80038ca:	2303      	movs	r3, #3
 80038cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80038d8:	e026      	b.n	8003928 <HAL_SPI_TransmitReceive+0x430>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f47f af57 	bne.w	8003794 <HAL_SPI_TransmitReceive+0x29c>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f47f af50 	bne.w	8003794 <HAL_SPI_TransmitReceive+0x29c>
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f93d 	bl	8003b78 <SPI_EndRxTxTransaction>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x418>
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x428>
 8003918:	2301      	movs	r3, #1
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391e:	e003      	b.n	8003928 <HAL_SPI_TransmitReceive+0x430>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003930:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003934:	4618      	mov	r0, r3
 8003936:	3728      	adds	r7, #40	@ 0x28
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <SPI_WaitFlagStateUntilTimeout>:
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	71fb      	strb	r3, [r7, #7]
 800394c:	f7fe f998 	bl	8001c80 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	4413      	add	r3, r2
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	f7fe f990 	bl	8001c80 <HAL_GetTick>
 8003960:	61b8      	str	r0, [r7, #24]
 8003962:	4b39      	ldr	r3, [pc, #228]	@ (8003a48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	015b      	lsls	r3, r3, #5
 8003968:	0d1b      	lsrs	r3, r3, #20
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	fb02 f303 	mul.w	r3, r2, r3
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e054      	b.n	8003a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800397a:	d050      	beq.n	8003a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800397c:	f7fe f980 	bl	8001c80 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	429a      	cmp	r2, r3
 800398a:	d902      	bls.n	8003992 <SPI_WaitFlagStateUntilTimeout+0x56>
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d13d      	bne.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039aa:	d111      	bne.n	80039d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b4:	d004      	beq.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x84>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039be:	d107      	bne.n	80039d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d8:	d10f      	bne.n	80039fa <SPI_WaitFlagStateUntilTimeout+0xbe>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e017      	b.n	8003a3e <SPI_WaitFlagStateUntilTimeout+0x102>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d19b      	bne.n	8003974 <SPI_WaitFlagStateUntilTimeout+0x38>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000000 	.word	0x20000000

08003a4c <SPI_WaitFifoStateUntilTimeout>:
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	@ 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	75fb      	strb	r3, [r7, #23]
 8003a5e:	f7fe f90f 	bl	8001c80 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6e:	f7fe f907 	bl	8001c80 <HAL_GetTick>
 8003a72:	6238      	str	r0, [r7, #32]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	61fb      	str	r3, [r7, #28]
 8003a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	00da      	lsls	r2, r3, #3
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	0d1b      	lsrs	r3, r3, #20
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e060      	b.n	8003b58 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a9c:	d107      	bne.n	8003aae <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <SPI_WaitFifoStateUntilTimeout+0x62>
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	75fb      	strb	r3, [r7, #23]
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ab4:	d050      	beq.n	8003b58 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003ab6:	f7fe f8e3 	bl	8001c80 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d902      	bls.n	8003acc <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d13d      	bne.n	8003b48 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ae4:	d111      	bne.n	8003b0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aee:	d004      	beq.n	8003afa <SPI_WaitFifoStateUntilTimeout+0xae>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af8:	d107      	bne.n	8003b0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b12:	d10f      	bne.n	8003b34 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003b44:	2303      	movs	r3, #3
 8003b46:	e010      	b.n	8003b6a <SPI_WaitFifoStateUntilTimeout+0x11e>
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <SPI_WaitFifoStateUntilTimeout+0x106>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d196      	bne.n	8003a96 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3728      	adds	r7, #40	@ 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000000 	.word	0x20000000

08003b78 <SPI_EndRxTxTransaction>:
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff ff5b 	bl	8003a4c <SPI_WaitFifoStateUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <SPI_EndRxTxTransaction+0x34>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e027      	b.n	8003bfc <SPI_EndRxTxTransaction+0x84>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2180      	movs	r1, #128	@ 0x80
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff fec0 	bl	800393c <SPI_WaitFlagStateUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <SPI_EndRxTxTransaction+0x5a>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	661a      	str	r2, [r3, #96]	@ 0x60
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e014      	b.n	8003bfc <SPI_EndRxTxTransaction+0x84>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff ff34 	bl	8003a4c <SPI_WaitFifoStateUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <SPI_EndRxTxTransaction+0x82>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	661a      	str	r2, [r3, #96]	@ 0x60
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e000      	b.n	8003bfc <SPI_EndRxTxTransaction+0x84>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <siprintf>:
 8003c04:	b40e      	push	{r1, r2, r3}
 8003c06:	b500      	push	{lr}
 8003c08:	b09c      	sub	sp, #112	@ 0x70
 8003c0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003c0c:	9002      	str	r0, [sp, #8]
 8003c0e:	9006      	str	r0, [sp, #24]
 8003c10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c14:	4809      	ldr	r0, [pc, #36]	@ (8003c3c <siprintf+0x38>)
 8003c16:	9107      	str	r1, [sp, #28]
 8003c18:	9104      	str	r1, [sp, #16]
 8003c1a:	4909      	ldr	r1, [pc, #36]	@ (8003c40 <siprintf+0x3c>)
 8003c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c20:	9105      	str	r1, [sp, #20]
 8003c22:	6800      	ldr	r0, [r0, #0]
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	a902      	add	r1, sp, #8
 8003c28:	f000 f8aa 	bl	8003d80 <_svfiprintf_r>
 8003c2c:	9b02      	ldr	r3, [sp, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	b01c      	add	sp, #112	@ 0x70
 8003c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c38:	b003      	add	sp, #12
 8003c3a:	4770      	bx	lr
 8003c3c:	2000000c 	.word	0x2000000c
 8003c40:	ffff0208 	.word	0xffff0208

08003c44 <memset>:
 8003c44:	4402      	add	r2, r0
 8003c46:	4603      	mov	r3, r0
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d100      	bne.n	8003c4e <memset+0xa>
 8003c4c:	4770      	bx	lr
 8003c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c52:	e7f9      	b.n	8003c48 <memset+0x4>

08003c54 <__errno>:
 8003c54:	4b01      	ldr	r3, [pc, #4]	@ (8003c5c <__errno+0x8>)
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	2000000c 	.word	0x2000000c

08003c60 <__libc_init_array>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	4d0d      	ldr	r5, [pc, #52]	@ (8003c98 <__libc_init_array+0x38>)
 8003c64:	4c0d      	ldr	r4, [pc, #52]	@ (8003c9c <__libc_init_array+0x3c>)
 8003c66:	1b64      	subs	r4, r4, r5
 8003c68:	10a4      	asrs	r4, r4, #2
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	42a6      	cmp	r6, r4
 8003c6e:	d109      	bne.n	8003c84 <__libc_init_array+0x24>
 8003c70:	4d0b      	ldr	r5, [pc, #44]	@ (8003ca0 <__libc_init_array+0x40>)
 8003c72:	4c0c      	ldr	r4, [pc, #48]	@ (8003ca4 <__libc_init_array+0x44>)
 8003c74:	f000 fc66 	bl	8004544 <_init>
 8003c78:	1b64      	subs	r4, r4, r5
 8003c7a:	10a4      	asrs	r4, r4, #2
 8003c7c:	2600      	movs	r6, #0
 8003c7e:	42a6      	cmp	r6, r4
 8003c80:	d105      	bne.n	8003c8e <__libc_init_array+0x2e>
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c88:	4798      	blx	r3
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7ee      	b.n	8003c6c <__libc_init_array+0xc>
 8003c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c92:	4798      	blx	r3
 8003c94:	3601      	adds	r6, #1
 8003c96:	e7f2      	b.n	8003c7e <__libc_init_array+0x1e>
 8003c98:	08011774 	.word	0x08011774
 8003c9c:	08011774 	.word	0x08011774
 8003ca0:	08011774 	.word	0x08011774
 8003ca4:	08011778 	.word	0x08011778

08003ca8 <__retarget_lock_acquire_recursive>:
 8003ca8:	4770      	bx	lr

08003caa <__retarget_lock_release_recursive>:
 8003caa:	4770      	bx	lr

08003cac <memcpy>:
 8003cac:	440a      	add	r2, r1
 8003cae:	4291      	cmp	r1, r2
 8003cb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003cb4:	d100      	bne.n	8003cb8 <memcpy+0xc>
 8003cb6:	4770      	bx	lr
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cc2:	4291      	cmp	r1, r2
 8003cc4:	d1f9      	bne.n	8003cba <memcpy+0xe>
 8003cc6:	bd10      	pop	{r4, pc}

08003cc8 <__ssputs_r>:
 8003cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ccc:	688e      	ldr	r6, [r1, #8]
 8003cce:	461f      	mov	r7, r3
 8003cd0:	42be      	cmp	r6, r7
 8003cd2:	680b      	ldr	r3, [r1, #0]
 8003cd4:	4682      	mov	sl, r0
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	4690      	mov	r8, r2
 8003cda:	d82d      	bhi.n	8003d38 <__ssputs_r+0x70>
 8003cdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ce0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ce4:	d026      	beq.n	8003d34 <__ssputs_r+0x6c>
 8003ce6:	6965      	ldr	r5, [r4, #20]
 8003ce8:	6909      	ldr	r1, [r1, #16]
 8003cea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cee:	eba3 0901 	sub.w	r9, r3, r1
 8003cf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cf6:	1c7b      	adds	r3, r7, #1
 8003cf8:	444b      	add	r3, r9
 8003cfa:	106d      	asrs	r5, r5, #1
 8003cfc:	429d      	cmp	r5, r3
 8003cfe:	bf38      	it	cc
 8003d00:	461d      	movcc	r5, r3
 8003d02:	0553      	lsls	r3, r2, #21
 8003d04:	d527      	bpl.n	8003d56 <__ssputs_r+0x8e>
 8003d06:	4629      	mov	r1, r5
 8003d08:	f000 f958 	bl	8003fbc <_malloc_r>
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	b360      	cbz	r0, 8003d6a <__ssputs_r+0xa2>
 8003d10:	6921      	ldr	r1, [r4, #16]
 8003d12:	464a      	mov	r2, r9
 8003d14:	f7ff ffca 	bl	8003cac <memcpy>
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	6126      	str	r6, [r4, #16]
 8003d26:	6165      	str	r5, [r4, #20]
 8003d28:	444e      	add	r6, r9
 8003d2a:	eba5 0509 	sub.w	r5, r5, r9
 8003d2e:	6026      	str	r6, [r4, #0]
 8003d30:	60a5      	str	r5, [r4, #8]
 8003d32:	463e      	mov	r6, r7
 8003d34:	42be      	cmp	r6, r7
 8003d36:	d900      	bls.n	8003d3a <__ssputs_r+0x72>
 8003d38:	463e      	mov	r6, r7
 8003d3a:	6820      	ldr	r0, [r4, #0]
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	4641      	mov	r1, r8
 8003d40:	f000 fb84 	bl	800444c <memmove>
 8003d44:	68a3      	ldr	r3, [r4, #8]
 8003d46:	1b9b      	subs	r3, r3, r6
 8003d48:	60a3      	str	r3, [r4, #8]
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	4433      	add	r3, r6
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	2000      	movs	r0, #0
 8003d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d56:	462a      	mov	r2, r5
 8003d58:	f000 fb4a 	bl	80043f0 <_realloc_r>
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d1e0      	bne.n	8003d24 <__ssputs_r+0x5c>
 8003d62:	6921      	ldr	r1, [r4, #16]
 8003d64:	4650      	mov	r0, sl
 8003d66:	f000 fb9b 	bl	80044a0 <_free_r>
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	f8ca 3000 	str.w	r3, [sl]
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d76:	81a3      	strh	r3, [r4, #12]
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d7c:	e7e9      	b.n	8003d52 <__ssputs_r+0x8a>
	...

08003d80 <_svfiprintf_r>:
 8003d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	4698      	mov	r8, r3
 8003d86:	898b      	ldrh	r3, [r1, #12]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	b09d      	sub	sp, #116	@ 0x74
 8003d8c:	4607      	mov	r7, r0
 8003d8e:	460d      	mov	r5, r1
 8003d90:	4614      	mov	r4, r2
 8003d92:	d510      	bpl.n	8003db6 <_svfiprintf_r+0x36>
 8003d94:	690b      	ldr	r3, [r1, #16]
 8003d96:	b973      	cbnz	r3, 8003db6 <_svfiprintf_r+0x36>
 8003d98:	2140      	movs	r1, #64	@ 0x40
 8003d9a:	f000 f90f 	bl	8003fbc <_malloc_r>
 8003d9e:	6028      	str	r0, [r5, #0]
 8003da0:	6128      	str	r0, [r5, #16]
 8003da2:	b930      	cbnz	r0, 8003db2 <_svfiprintf_r+0x32>
 8003da4:	230c      	movs	r3, #12
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003dac:	b01d      	add	sp, #116	@ 0x74
 8003dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db2:	2340      	movs	r3, #64	@ 0x40
 8003db4:	616b      	str	r3, [r5, #20]
 8003db6:	2300      	movs	r3, #0
 8003db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dba:	2320      	movs	r3, #32
 8003dbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dc4:	2330      	movs	r3, #48	@ 0x30
 8003dc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f64 <_svfiprintf_r+0x1e4>
 8003dca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dce:	f04f 0901 	mov.w	r9, #1
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	469a      	mov	sl, r3
 8003dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dda:	b10a      	cbz	r2, 8003de0 <_svfiprintf_r+0x60>
 8003ddc:	2a25      	cmp	r2, #37	@ 0x25
 8003dde:	d1f9      	bne.n	8003dd4 <_svfiprintf_r+0x54>
 8003de0:	ebba 0b04 	subs.w	fp, sl, r4
 8003de4:	d00b      	beq.n	8003dfe <_svfiprintf_r+0x7e>
 8003de6:	465b      	mov	r3, fp
 8003de8:	4622      	mov	r2, r4
 8003dea:	4629      	mov	r1, r5
 8003dec:	4638      	mov	r0, r7
 8003dee:	f7ff ff6b 	bl	8003cc8 <__ssputs_r>
 8003df2:	3001      	adds	r0, #1
 8003df4:	f000 80a7 	beq.w	8003f46 <_svfiprintf_r+0x1c6>
 8003df8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dfa:	445a      	add	r2, fp
 8003dfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 809f 	beq.w	8003f46 <_svfiprintf_r+0x1c6>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e12:	f10a 0a01 	add.w	sl, sl, #1
 8003e16:	9304      	str	r3, [sp, #16]
 8003e18:	9307      	str	r3, [sp, #28]
 8003e1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e20:	4654      	mov	r4, sl
 8003e22:	2205      	movs	r2, #5
 8003e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e28:	484e      	ldr	r0, [pc, #312]	@ (8003f64 <_svfiprintf_r+0x1e4>)
 8003e2a:	f7fc f9f1 	bl	8000210 <memchr>
 8003e2e:	9a04      	ldr	r2, [sp, #16]
 8003e30:	b9d8      	cbnz	r0, 8003e6a <_svfiprintf_r+0xea>
 8003e32:	06d0      	lsls	r0, r2, #27
 8003e34:	bf44      	itt	mi
 8003e36:	2320      	movmi	r3, #32
 8003e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e3c:	0711      	lsls	r1, r2, #28
 8003e3e:	bf44      	itt	mi
 8003e40:	232b      	movmi	r3, #43	@ 0x2b
 8003e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e46:	f89a 3000 	ldrb.w	r3, [sl]
 8003e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e4c:	d015      	beq.n	8003e7a <_svfiprintf_r+0xfa>
 8003e4e:	9a07      	ldr	r2, [sp, #28]
 8003e50:	4654      	mov	r4, sl
 8003e52:	2000      	movs	r0, #0
 8003e54:	f04f 0c0a 	mov.w	ip, #10
 8003e58:	4621      	mov	r1, r4
 8003e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e5e:	3b30      	subs	r3, #48	@ 0x30
 8003e60:	2b09      	cmp	r3, #9
 8003e62:	d94b      	bls.n	8003efc <_svfiprintf_r+0x17c>
 8003e64:	b1b0      	cbz	r0, 8003e94 <_svfiprintf_r+0x114>
 8003e66:	9207      	str	r2, [sp, #28]
 8003e68:	e014      	b.n	8003e94 <_svfiprintf_r+0x114>
 8003e6a:	eba0 0308 	sub.w	r3, r0, r8
 8003e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003e72:	4313      	orrs	r3, r2
 8003e74:	9304      	str	r3, [sp, #16]
 8003e76:	46a2      	mov	sl, r4
 8003e78:	e7d2      	b.n	8003e20 <_svfiprintf_r+0xa0>
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	1d19      	adds	r1, r3, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	9103      	str	r1, [sp, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bfbb      	ittet	lt
 8003e86:	425b      	neglt	r3, r3
 8003e88:	f042 0202 	orrlt.w	r2, r2, #2
 8003e8c:	9307      	strge	r3, [sp, #28]
 8003e8e:	9307      	strlt	r3, [sp, #28]
 8003e90:	bfb8      	it	lt
 8003e92:	9204      	strlt	r2, [sp, #16]
 8003e94:	7823      	ldrb	r3, [r4, #0]
 8003e96:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e98:	d10a      	bne.n	8003eb0 <_svfiprintf_r+0x130>
 8003e9a:	7863      	ldrb	r3, [r4, #1]
 8003e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e9e:	d132      	bne.n	8003f06 <_svfiprintf_r+0x186>
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	1d1a      	adds	r2, r3, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	9203      	str	r2, [sp, #12]
 8003ea8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003eac:	3402      	adds	r4, #2
 8003eae:	9305      	str	r3, [sp, #20]
 8003eb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f74 <_svfiprintf_r+0x1f4>
 8003eb4:	7821      	ldrb	r1, [r4, #0]
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	4650      	mov	r0, sl
 8003eba:	f7fc f9a9 	bl	8000210 <memchr>
 8003ebe:	b138      	cbz	r0, 8003ed0 <_svfiprintf_r+0x150>
 8003ec0:	9b04      	ldr	r3, [sp, #16]
 8003ec2:	eba0 000a 	sub.w	r0, r0, sl
 8003ec6:	2240      	movs	r2, #64	@ 0x40
 8003ec8:	4082      	lsls	r2, r0
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	3401      	adds	r4, #1
 8003ece:	9304      	str	r3, [sp, #16]
 8003ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed4:	4824      	ldr	r0, [pc, #144]	@ (8003f68 <_svfiprintf_r+0x1e8>)
 8003ed6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003eda:	2206      	movs	r2, #6
 8003edc:	f7fc f998 	bl	8000210 <memchr>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d036      	beq.n	8003f52 <_svfiprintf_r+0x1d2>
 8003ee4:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <_svfiprintf_r+0x1ec>)
 8003ee6:	bb1b      	cbnz	r3, 8003f30 <_svfiprintf_r+0x1b0>
 8003ee8:	9b03      	ldr	r3, [sp, #12]
 8003eea:	3307      	adds	r3, #7
 8003eec:	f023 0307 	bic.w	r3, r3, #7
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	9303      	str	r3, [sp, #12]
 8003ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef6:	4433      	add	r3, r6
 8003ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003efa:	e76a      	b.n	8003dd2 <_svfiprintf_r+0x52>
 8003efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f00:	460c      	mov	r4, r1
 8003f02:	2001      	movs	r0, #1
 8003f04:	e7a8      	b.n	8003e58 <_svfiprintf_r+0xd8>
 8003f06:	2300      	movs	r3, #0
 8003f08:	3401      	adds	r4, #1
 8003f0a:	9305      	str	r3, [sp, #20]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f04f 0c0a 	mov.w	ip, #10
 8003f12:	4620      	mov	r0, r4
 8003f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f18:	3a30      	subs	r2, #48	@ 0x30
 8003f1a:	2a09      	cmp	r2, #9
 8003f1c:	d903      	bls.n	8003f26 <_svfiprintf_r+0x1a6>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0c6      	beq.n	8003eb0 <_svfiprintf_r+0x130>
 8003f22:	9105      	str	r1, [sp, #20]
 8003f24:	e7c4      	b.n	8003eb0 <_svfiprintf_r+0x130>
 8003f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e7f0      	b.n	8003f12 <_svfiprintf_r+0x192>
 8003f30:	ab03      	add	r3, sp, #12
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	462a      	mov	r2, r5
 8003f36:	4b0e      	ldr	r3, [pc, #56]	@ (8003f70 <_svfiprintf_r+0x1f0>)
 8003f38:	a904      	add	r1, sp, #16
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	f3af 8000 	nop.w
 8003f40:	1c42      	adds	r2, r0, #1
 8003f42:	4606      	mov	r6, r0
 8003f44:	d1d6      	bne.n	8003ef4 <_svfiprintf_r+0x174>
 8003f46:	89ab      	ldrh	r3, [r5, #12]
 8003f48:	065b      	lsls	r3, r3, #25
 8003f4a:	f53f af2d 	bmi.w	8003da8 <_svfiprintf_r+0x28>
 8003f4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f50:	e72c      	b.n	8003dac <_svfiprintf_r+0x2c>
 8003f52:	ab03      	add	r3, sp, #12
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	462a      	mov	r2, r5
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <_svfiprintf_r+0x1f0>)
 8003f5a:	a904      	add	r1, sp, #16
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	f000 f91b 	bl	8004198 <_printf_i>
 8003f62:	e7ed      	b.n	8003f40 <_svfiprintf_r+0x1c0>
 8003f64:	08011738 	.word	0x08011738
 8003f68:	08011742 	.word	0x08011742
 8003f6c:	00000000 	.word	0x00000000
 8003f70:	08003cc9 	.word	0x08003cc9
 8003f74:	0801173e 	.word	0x0801173e

08003f78 <sbrk_aligned>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	4e0f      	ldr	r6, [pc, #60]	@ (8003fb8 <sbrk_aligned+0x40>)
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	6831      	ldr	r1, [r6, #0]
 8003f80:	4605      	mov	r5, r0
 8003f82:	b911      	cbnz	r1, 8003f8a <sbrk_aligned+0x12>
 8003f84:	f000 fa7c 	bl	8004480 <_sbrk_r>
 8003f88:	6030      	str	r0, [r6, #0]
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f000 fa77 	bl	8004480 <_sbrk_r>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	d103      	bne.n	8003f9e <sbrk_aligned+0x26>
 8003f96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	bd70      	pop	{r4, r5, r6, pc}
 8003f9e:	1cc4      	adds	r4, r0, #3
 8003fa0:	f024 0403 	bic.w	r4, r4, #3
 8003fa4:	42a0      	cmp	r0, r4
 8003fa6:	d0f8      	beq.n	8003f9a <sbrk_aligned+0x22>
 8003fa8:	1a21      	subs	r1, r4, r0
 8003faa:	4628      	mov	r0, r5
 8003fac:	f000 fa68 	bl	8004480 <_sbrk_r>
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d1f2      	bne.n	8003f9a <sbrk_aligned+0x22>
 8003fb4:	e7ef      	b.n	8003f96 <sbrk_aligned+0x1e>
 8003fb6:	bf00      	nop
 8003fb8:	20000288 	.word	0x20000288

08003fbc <_malloc_r>:
 8003fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fc0:	1ccd      	adds	r5, r1, #3
 8003fc2:	f025 0503 	bic.w	r5, r5, #3
 8003fc6:	3508      	adds	r5, #8
 8003fc8:	2d0c      	cmp	r5, #12
 8003fca:	bf38      	it	cc
 8003fcc:	250c      	movcc	r5, #12
 8003fce:	2d00      	cmp	r5, #0
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	db01      	blt.n	8003fd8 <_malloc_r+0x1c>
 8003fd4:	42a9      	cmp	r1, r5
 8003fd6:	d904      	bls.n	8003fe2 <_malloc_r+0x26>
 8003fd8:	230c      	movs	r3, #12
 8003fda:	6033      	str	r3, [r6, #0]
 8003fdc:	2000      	movs	r0, #0
 8003fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040b8 <_malloc_r+0xfc>
 8003fe6:	f000 f9f7 	bl	80043d8 <__malloc_lock>
 8003fea:	f8d8 3000 	ldr.w	r3, [r8]
 8003fee:	461c      	mov	r4, r3
 8003ff0:	bb44      	cbnz	r4, 8004044 <_malloc_r+0x88>
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f7ff ffbf 	bl	8003f78 <sbrk_aligned>
 8003ffa:	1c43      	adds	r3, r0, #1
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	d158      	bne.n	80040b2 <_malloc_r+0xf6>
 8004000:	f8d8 4000 	ldr.w	r4, [r8]
 8004004:	4627      	mov	r7, r4
 8004006:	2f00      	cmp	r7, #0
 8004008:	d143      	bne.n	8004092 <_malloc_r+0xd6>
 800400a:	2c00      	cmp	r4, #0
 800400c:	d04b      	beq.n	80040a6 <_malloc_r+0xea>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	4639      	mov	r1, r7
 8004012:	4630      	mov	r0, r6
 8004014:	eb04 0903 	add.w	r9, r4, r3
 8004018:	f000 fa32 	bl	8004480 <_sbrk_r>
 800401c:	4581      	cmp	r9, r0
 800401e:	d142      	bne.n	80040a6 <_malloc_r+0xea>
 8004020:	6821      	ldr	r1, [r4, #0]
 8004022:	1a6d      	subs	r5, r5, r1
 8004024:	4629      	mov	r1, r5
 8004026:	4630      	mov	r0, r6
 8004028:	f7ff ffa6 	bl	8003f78 <sbrk_aligned>
 800402c:	3001      	adds	r0, #1
 800402e:	d03a      	beq.n	80040a6 <_malloc_r+0xea>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	442b      	add	r3, r5
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	f8d8 3000 	ldr.w	r3, [r8]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	bb62      	cbnz	r2, 8004098 <_malloc_r+0xdc>
 800403e:	f8c8 7000 	str.w	r7, [r8]
 8004042:	e00f      	b.n	8004064 <_malloc_r+0xa8>
 8004044:	6822      	ldr	r2, [r4, #0]
 8004046:	1b52      	subs	r2, r2, r5
 8004048:	d420      	bmi.n	800408c <_malloc_r+0xd0>
 800404a:	2a0b      	cmp	r2, #11
 800404c:	d917      	bls.n	800407e <_malloc_r+0xc2>
 800404e:	1961      	adds	r1, r4, r5
 8004050:	42a3      	cmp	r3, r4
 8004052:	6025      	str	r5, [r4, #0]
 8004054:	bf18      	it	ne
 8004056:	6059      	strne	r1, [r3, #4]
 8004058:	6863      	ldr	r3, [r4, #4]
 800405a:	bf08      	it	eq
 800405c:	f8c8 1000 	streq.w	r1, [r8]
 8004060:	5162      	str	r2, [r4, r5]
 8004062:	604b      	str	r3, [r1, #4]
 8004064:	4630      	mov	r0, r6
 8004066:	f000 f9bd 	bl	80043e4 <__malloc_unlock>
 800406a:	f104 000b 	add.w	r0, r4, #11
 800406e:	1d23      	adds	r3, r4, #4
 8004070:	f020 0007 	bic.w	r0, r0, #7
 8004074:	1ac2      	subs	r2, r0, r3
 8004076:	bf1c      	itt	ne
 8004078:	1a1b      	subne	r3, r3, r0
 800407a:	50a3      	strne	r3, [r4, r2]
 800407c:	e7af      	b.n	8003fde <_malloc_r+0x22>
 800407e:	6862      	ldr	r2, [r4, #4]
 8004080:	42a3      	cmp	r3, r4
 8004082:	bf0c      	ite	eq
 8004084:	f8c8 2000 	streq.w	r2, [r8]
 8004088:	605a      	strne	r2, [r3, #4]
 800408a:	e7eb      	b.n	8004064 <_malloc_r+0xa8>
 800408c:	4623      	mov	r3, r4
 800408e:	6864      	ldr	r4, [r4, #4]
 8004090:	e7ae      	b.n	8003ff0 <_malloc_r+0x34>
 8004092:	463c      	mov	r4, r7
 8004094:	687f      	ldr	r7, [r7, #4]
 8004096:	e7b6      	b.n	8004006 <_malloc_r+0x4a>
 8004098:	461a      	mov	r2, r3
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	42a3      	cmp	r3, r4
 800409e:	d1fb      	bne.n	8004098 <_malloc_r+0xdc>
 80040a0:	2300      	movs	r3, #0
 80040a2:	6053      	str	r3, [r2, #4]
 80040a4:	e7de      	b.n	8004064 <_malloc_r+0xa8>
 80040a6:	230c      	movs	r3, #12
 80040a8:	6033      	str	r3, [r6, #0]
 80040aa:	4630      	mov	r0, r6
 80040ac:	f000 f99a 	bl	80043e4 <__malloc_unlock>
 80040b0:	e794      	b.n	8003fdc <_malloc_r+0x20>
 80040b2:	6005      	str	r5, [r0, #0]
 80040b4:	e7d6      	b.n	8004064 <_malloc_r+0xa8>
 80040b6:	bf00      	nop
 80040b8:	2000028c 	.word	0x2000028c

080040bc <_printf_common>:
 80040bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c0:	4616      	mov	r6, r2
 80040c2:	4698      	mov	r8, r3
 80040c4:	688a      	ldr	r2, [r1, #8]
 80040c6:	690b      	ldr	r3, [r1, #16]
 80040c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bfb8      	it	lt
 80040d0:	4613      	movlt	r3, r2
 80040d2:	6033      	str	r3, [r6, #0]
 80040d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040d8:	4607      	mov	r7, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	b10a      	cbz	r2, 80040e2 <_printf_common+0x26>
 80040de:	3301      	adds	r3, #1
 80040e0:	6033      	str	r3, [r6, #0]
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	0699      	lsls	r1, r3, #26
 80040e6:	bf42      	ittt	mi
 80040e8:	6833      	ldrmi	r3, [r6, #0]
 80040ea:	3302      	addmi	r3, #2
 80040ec:	6033      	strmi	r3, [r6, #0]
 80040ee:	6825      	ldr	r5, [r4, #0]
 80040f0:	f015 0506 	ands.w	r5, r5, #6
 80040f4:	d106      	bne.n	8004104 <_printf_common+0x48>
 80040f6:	f104 0a19 	add.w	sl, r4, #25
 80040fa:	68e3      	ldr	r3, [r4, #12]
 80040fc:	6832      	ldr	r2, [r6, #0]
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	42ab      	cmp	r3, r5
 8004102:	dc26      	bgt.n	8004152 <_printf_common+0x96>
 8004104:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	3b00      	subs	r3, #0
 800410c:	bf18      	it	ne
 800410e:	2301      	movne	r3, #1
 8004110:	0692      	lsls	r2, r2, #26
 8004112:	d42b      	bmi.n	800416c <_printf_common+0xb0>
 8004114:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004118:	4641      	mov	r1, r8
 800411a:	4638      	mov	r0, r7
 800411c:	47c8      	blx	r9
 800411e:	3001      	adds	r0, #1
 8004120:	d01e      	beq.n	8004160 <_printf_common+0xa4>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	6922      	ldr	r2, [r4, #16]
 8004126:	f003 0306 	and.w	r3, r3, #6
 800412a:	2b04      	cmp	r3, #4
 800412c:	bf02      	ittt	eq
 800412e:	68e5      	ldreq	r5, [r4, #12]
 8004130:	6833      	ldreq	r3, [r6, #0]
 8004132:	1aed      	subeq	r5, r5, r3
 8004134:	68a3      	ldr	r3, [r4, #8]
 8004136:	bf0c      	ite	eq
 8004138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800413c:	2500      	movne	r5, #0
 800413e:	4293      	cmp	r3, r2
 8004140:	bfc4      	itt	gt
 8004142:	1a9b      	subgt	r3, r3, r2
 8004144:	18ed      	addgt	r5, r5, r3
 8004146:	2600      	movs	r6, #0
 8004148:	341a      	adds	r4, #26
 800414a:	42b5      	cmp	r5, r6
 800414c:	d11a      	bne.n	8004184 <_printf_common+0xc8>
 800414e:	2000      	movs	r0, #0
 8004150:	e008      	b.n	8004164 <_printf_common+0xa8>
 8004152:	2301      	movs	r3, #1
 8004154:	4652      	mov	r2, sl
 8004156:	4641      	mov	r1, r8
 8004158:	4638      	mov	r0, r7
 800415a:	47c8      	blx	r9
 800415c:	3001      	adds	r0, #1
 800415e:	d103      	bne.n	8004168 <_printf_common+0xac>
 8004160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004168:	3501      	adds	r5, #1
 800416a:	e7c6      	b.n	80040fa <_printf_common+0x3e>
 800416c:	18e1      	adds	r1, r4, r3
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	2030      	movs	r0, #48	@ 0x30
 8004172:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004176:	4422      	add	r2, r4
 8004178:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800417c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004180:	3302      	adds	r3, #2
 8004182:	e7c7      	b.n	8004114 <_printf_common+0x58>
 8004184:	2301      	movs	r3, #1
 8004186:	4622      	mov	r2, r4
 8004188:	4641      	mov	r1, r8
 800418a:	4638      	mov	r0, r7
 800418c:	47c8      	blx	r9
 800418e:	3001      	adds	r0, #1
 8004190:	d0e6      	beq.n	8004160 <_printf_common+0xa4>
 8004192:	3601      	adds	r6, #1
 8004194:	e7d9      	b.n	800414a <_printf_common+0x8e>
	...

08004198 <_printf_i>:
 8004198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800419c:	7e0f      	ldrb	r7, [r1, #24]
 800419e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041a0:	2f78      	cmp	r7, #120	@ 0x78
 80041a2:	4691      	mov	r9, r2
 80041a4:	4680      	mov	r8, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	469a      	mov	sl, r3
 80041aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041ae:	d807      	bhi.n	80041c0 <_printf_i+0x28>
 80041b0:	2f62      	cmp	r7, #98	@ 0x62
 80041b2:	d80a      	bhi.n	80041ca <_printf_i+0x32>
 80041b4:	2f00      	cmp	r7, #0
 80041b6:	f000 80d2 	beq.w	800435e <_printf_i+0x1c6>
 80041ba:	2f58      	cmp	r7, #88	@ 0x58
 80041bc:	f000 80b9 	beq.w	8004332 <_printf_i+0x19a>
 80041c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041c8:	e03a      	b.n	8004240 <_printf_i+0xa8>
 80041ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041ce:	2b15      	cmp	r3, #21
 80041d0:	d8f6      	bhi.n	80041c0 <_printf_i+0x28>
 80041d2:	a101      	add	r1, pc, #4	@ (adr r1, 80041d8 <_printf_i+0x40>)
 80041d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041d8:	08004231 	.word	0x08004231
 80041dc:	08004245 	.word	0x08004245
 80041e0:	080041c1 	.word	0x080041c1
 80041e4:	080041c1 	.word	0x080041c1
 80041e8:	080041c1 	.word	0x080041c1
 80041ec:	080041c1 	.word	0x080041c1
 80041f0:	08004245 	.word	0x08004245
 80041f4:	080041c1 	.word	0x080041c1
 80041f8:	080041c1 	.word	0x080041c1
 80041fc:	080041c1 	.word	0x080041c1
 8004200:	080041c1 	.word	0x080041c1
 8004204:	08004345 	.word	0x08004345
 8004208:	0800426f 	.word	0x0800426f
 800420c:	080042ff 	.word	0x080042ff
 8004210:	080041c1 	.word	0x080041c1
 8004214:	080041c1 	.word	0x080041c1
 8004218:	08004367 	.word	0x08004367
 800421c:	080041c1 	.word	0x080041c1
 8004220:	0800426f 	.word	0x0800426f
 8004224:	080041c1 	.word	0x080041c1
 8004228:	080041c1 	.word	0x080041c1
 800422c:	08004307 	.word	0x08004307
 8004230:	6833      	ldr	r3, [r6, #0]
 8004232:	1d1a      	adds	r2, r3, #4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6032      	str	r2, [r6, #0]
 8004238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800423c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004240:	2301      	movs	r3, #1
 8004242:	e09d      	b.n	8004380 <_printf_i+0x1e8>
 8004244:	6833      	ldr	r3, [r6, #0]
 8004246:	6820      	ldr	r0, [r4, #0]
 8004248:	1d19      	adds	r1, r3, #4
 800424a:	6031      	str	r1, [r6, #0]
 800424c:	0606      	lsls	r6, r0, #24
 800424e:	d501      	bpl.n	8004254 <_printf_i+0xbc>
 8004250:	681d      	ldr	r5, [r3, #0]
 8004252:	e003      	b.n	800425c <_printf_i+0xc4>
 8004254:	0645      	lsls	r5, r0, #25
 8004256:	d5fb      	bpl.n	8004250 <_printf_i+0xb8>
 8004258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800425c:	2d00      	cmp	r5, #0
 800425e:	da03      	bge.n	8004268 <_printf_i+0xd0>
 8004260:	232d      	movs	r3, #45	@ 0x2d
 8004262:	426d      	negs	r5, r5
 8004264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004268:	4859      	ldr	r0, [pc, #356]	@ (80043d0 <_printf_i+0x238>)
 800426a:	230a      	movs	r3, #10
 800426c:	e011      	b.n	8004292 <_printf_i+0xfa>
 800426e:	6821      	ldr	r1, [r4, #0]
 8004270:	6833      	ldr	r3, [r6, #0]
 8004272:	0608      	lsls	r0, r1, #24
 8004274:	f853 5b04 	ldr.w	r5, [r3], #4
 8004278:	d402      	bmi.n	8004280 <_printf_i+0xe8>
 800427a:	0649      	lsls	r1, r1, #25
 800427c:	bf48      	it	mi
 800427e:	b2ad      	uxthmi	r5, r5
 8004280:	2f6f      	cmp	r7, #111	@ 0x6f
 8004282:	4853      	ldr	r0, [pc, #332]	@ (80043d0 <_printf_i+0x238>)
 8004284:	6033      	str	r3, [r6, #0]
 8004286:	bf14      	ite	ne
 8004288:	230a      	movne	r3, #10
 800428a:	2308      	moveq	r3, #8
 800428c:	2100      	movs	r1, #0
 800428e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004292:	6866      	ldr	r6, [r4, #4]
 8004294:	60a6      	str	r6, [r4, #8]
 8004296:	2e00      	cmp	r6, #0
 8004298:	bfa2      	ittt	ge
 800429a:	6821      	ldrge	r1, [r4, #0]
 800429c:	f021 0104 	bicge.w	r1, r1, #4
 80042a0:	6021      	strge	r1, [r4, #0]
 80042a2:	b90d      	cbnz	r5, 80042a8 <_printf_i+0x110>
 80042a4:	2e00      	cmp	r6, #0
 80042a6:	d04b      	beq.n	8004340 <_printf_i+0x1a8>
 80042a8:	4616      	mov	r6, r2
 80042aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80042ae:	fb03 5711 	mls	r7, r3, r1, r5
 80042b2:	5dc7      	ldrb	r7, [r0, r7]
 80042b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042b8:	462f      	mov	r7, r5
 80042ba:	42bb      	cmp	r3, r7
 80042bc:	460d      	mov	r5, r1
 80042be:	d9f4      	bls.n	80042aa <_printf_i+0x112>
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d10b      	bne.n	80042dc <_printf_i+0x144>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	07df      	lsls	r7, r3, #31
 80042c8:	d508      	bpl.n	80042dc <_printf_i+0x144>
 80042ca:	6923      	ldr	r3, [r4, #16]
 80042cc:	6861      	ldr	r1, [r4, #4]
 80042ce:	4299      	cmp	r1, r3
 80042d0:	bfde      	ittt	le
 80042d2:	2330      	movle	r3, #48	@ 0x30
 80042d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80042dc:	1b92      	subs	r2, r2, r6
 80042de:	6122      	str	r2, [r4, #16]
 80042e0:	f8cd a000 	str.w	sl, [sp]
 80042e4:	464b      	mov	r3, r9
 80042e6:	aa03      	add	r2, sp, #12
 80042e8:	4621      	mov	r1, r4
 80042ea:	4640      	mov	r0, r8
 80042ec:	f7ff fee6 	bl	80040bc <_printf_common>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d14a      	bne.n	800438a <_printf_i+0x1f2>
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042f8:	b004      	add	sp, #16
 80042fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	f043 0320 	orr.w	r3, r3, #32
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	4833      	ldr	r0, [pc, #204]	@ (80043d4 <_printf_i+0x23c>)
 8004308:	2778      	movs	r7, #120	@ 0x78
 800430a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	6831      	ldr	r1, [r6, #0]
 8004312:	061f      	lsls	r7, r3, #24
 8004314:	f851 5b04 	ldr.w	r5, [r1], #4
 8004318:	d402      	bmi.n	8004320 <_printf_i+0x188>
 800431a:	065f      	lsls	r7, r3, #25
 800431c:	bf48      	it	mi
 800431e:	b2ad      	uxthmi	r5, r5
 8004320:	6031      	str	r1, [r6, #0]
 8004322:	07d9      	lsls	r1, r3, #31
 8004324:	bf44      	itt	mi
 8004326:	f043 0320 	orrmi.w	r3, r3, #32
 800432a:	6023      	strmi	r3, [r4, #0]
 800432c:	b11d      	cbz	r5, 8004336 <_printf_i+0x19e>
 800432e:	2310      	movs	r3, #16
 8004330:	e7ac      	b.n	800428c <_printf_i+0xf4>
 8004332:	4827      	ldr	r0, [pc, #156]	@ (80043d0 <_printf_i+0x238>)
 8004334:	e7e9      	b.n	800430a <_printf_i+0x172>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	f023 0320 	bic.w	r3, r3, #32
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	e7f6      	b.n	800432e <_printf_i+0x196>
 8004340:	4616      	mov	r6, r2
 8004342:	e7bd      	b.n	80042c0 <_printf_i+0x128>
 8004344:	6833      	ldr	r3, [r6, #0]
 8004346:	6825      	ldr	r5, [r4, #0]
 8004348:	6961      	ldr	r1, [r4, #20]
 800434a:	1d18      	adds	r0, r3, #4
 800434c:	6030      	str	r0, [r6, #0]
 800434e:	062e      	lsls	r6, r5, #24
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	d501      	bpl.n	8004358 <_printf_i+0x1c0>
 8004354:	6019      	str	r1, [r3, #0]
 8004356:	e002      	b.n	800435e <_printf_i+0x1c6>
 8004358:	0668      	lsls	r0, r5, #25
 800435a:	d5fb      	bpl.n	8004354 <_printf_i+0x1bc>
 800435c:	8019      	strh	r1, [r3, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	4616      	mov	r6, r2
 8004364:	e7bc      	b.n	80042e0 <_printf_i+0x148>
 8004366:	6833      	ldr	r3, [r6, #0]
 8004368:	1d1a      	adds	r2, r3, #4
 800436a:	6032      	str	r2, [r6, #0]
 800436c:	681e      	ldr	r6, [r3, #0]
 800436e:	6862      	ldr	r2, [r4, #4]
 8004370:	2100      	movs	r1, #0
 8004372:	4630      	mov	r0, r6
 8004374:	f7fb ff4c 	bl	8000210 <memchr>
 8004378:	b108      	cbz	r0, 800437e <_printf_i+0x1e6>
 800437a:	1b80      	subs	r0, r0, r6
 800437c:	6060      	str	r0, [r4, #4]
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	6123      	str	r3, [r4, #16]
 8004382:	2300      	movs	r3, #0
 8004384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004388:	e7aa      	b.n	80042e0 <_printf_i+0x148>
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	4632      	mov	r2, r6
 800438e:	4649      	mov	r1, r9
 8004390:	4640      	mov	r0, r8
 8004392:	47d0      	blx	sl
 8004394:	3001      	adds	r0, #1
 8004396:	d0ad      	beq.n	80042f4 <_printf_i+0x15c>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	079b      	lsls	r3, r3, #30
 800439c:	d413      	bmi.n	80043c6 <_printf_i+0x22e>
 800439e:	68e0      	ldr	r0, [r4, #12]
 80043a0:	9b03      	ldr	r3, [sp, #12]
 80043a2:	4298      	cmp	r0, r3
 80043a4:	bfb8      	it	lt
 80043a6:	4618      	movlt	r0, r3
 80043a8:	e7a6      	b.n	80042f8 <_printf_i+0x160>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4632      	mov	r2, r6
 80043ae:	4649      	mov	r1, r9
 80043b0:	4640      	mov	r0, r8
 80043b2:	47d0      	blx	sl
 80043b4:	3001      	adds	r0, #1
 80043b6:	d09d      	beq.n	80042f4 <_printf_i+0x15c>
 80043b8:	3501      	adds	r5, #1
 80043ba:	68e3      	ldr	r3, [r4, #12]
 80043bc:	9903      	ldr	r1, [sp, #12]
 80043be:	1a5b      	subs	r3, r3, r1
 80043c0:	42ab      	cmp	r3, r5
 80043c2:	dcf2      	bgt.n	80043aa <_printf_i+0x212>
 80043c4:	e7eb      	b.n	800439e <_printf_i+0x206>
 80043c6:	2500      	movs	r5, #0
 80043c8:	f104 0619 	add.w	r6, r4, #25
 80043cc:	e7f5      	b.n	80043ba <_printf_i+0x222>
 80043ce:	bf00      	nop
 80043d0:	08011749 	.word	0x08011749
 80043d4:	0801175a 	.word	0x0801175a

080043d8 <__malloc_lock>:
 80043d8:	4801      	ldr	r0, [pc, #4]	@ (80043e0 <__malloc_lock+0x8>)
 80043da:	f7ff bc65 	b.w	8003ca8 <__retarget_lock_acquire_recursive>
 80043de:	bf00      	nop
 80043e0:	20000284 	.word	0x20000284

080043e4 <__malloc_unlock>:
 80043e4:	4801      	ldr	r0, [pc, #4]	@ (80043ec <__malloc_unlock+0x8>)
 80043e6:	f7ff bc60 	b.w	8003caa <__retarget_lock_release_recursive>
 80043ea:	bf00      	nop
 80043ec:	20000284 	.word	0x20000284

080043f0 <_realloc_r>:
 80043f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f4:	4680      	mov	r8, r0
 80043f6:	4615      	mov	r5, r2
 80043f8:	460c      	mov	r4, r1
 80043fa:	b921      	cbnz	r1, 8004406 <_realloc_r+0x16>
 80043fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004400:	4611      	mov	r1, r2
 8004402:	f7ff bddb 	b.w	8003fbc <_malloc_r>
 8004406:	b92a      	cbnz	r2, 8004414 <_realloc_r+0x24>
 8004408:	f000 f84a 	bl	80044a0 <_free_r>
 800440c:	2400      	movs	r4, #0
 800440e:	4620      	mov	r0, r4
 8004410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004414:	f000 f88e 	bl	8004534 <_malloc_usable_size_r>
 8004418:	4285      	cmp	r5, r0
 800441a:	4606      	mov	r6, r0
 800441c:	d802      	bhi.n	8004424 <_realloc_r+0x34>
 800441e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004422:	d8f4      	bhi.n	800440e <_realloc_r+0x1e>
 8004424:	4629      	mov	r1, r5
 8004426:	4640      	mov	r0, r8
 8004428:	f7ff fdc8 	bl	8003fbc <_malloc_r>
 800442c:	4607      	mov	r7, r0
 800442e:	2800      	cmp	r0, #0
 8004430:	d0ec      	beq.n	800440c <_realloc_r+0x1c>
 8004432:	42b5      	cmp	r5, r6
 8004434:	462a      	mov	r2, r5
 8004436:	4621      	mov	r1, r4
 8004438:	bf28      	it	cs
 800443a:	4632      	movcs	r2, r6
 800443c:	f7ff fc36 	bl	8003cac <memcpy>
 8004440:	4621      	mov	r1, r4
 8004442:	4640      	mov	r0, r8
 8004444:	f000 f82c 	bl	80044a0 <_free_r>
 8004448:	463c      	mov	r4, r7
 800444a:	e7e0      	b.n	800440e <_realloc_r+0x1e>

0800444c <memmove>:
 800444c:	4288      	cmp	r0, r1
 800444e:	b510      	push	{r4, lr}
 8004450:	eb01 0402 	add.w	r4, r1, r2
 8004454:	d902      	bls.n	800445c <memmove+0x10>
 8004456:	4284      	cmp	r4, r0
 8004458:	4623      	mov	r3, r4
 800445a:	d807      	bhi.n	800446c <memmove+0x20>
 800445c:	1e43      	subs	r3, r0, #1
 800445e:	42a1      	cmp	r1, r4
 8004460:	d008      	beq.n	8004474 <memmove+0x28>
 8004462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800446a:	e7f8      	b.n	800445e <memmove+0x12>
 800446c:	4402      	add	r2, r0
 800446e:	4601      	mov	r1, r0
 8004470:	428a      	cmp	r2, r1
 8004472:	d100      	bne.n	8004476 <memmove+0x2a>
 8004474:	bd10      	pop	{r4, pc}
 8004476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800447a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800447e:	e7f7      	b.n	8004470 <memmove+0x24>

08004480 <_sbrk_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4d06      	ldr	r5, [pc, #24]	@ (800449c <_sbrk_r+0x1c>)
 8004484:	2300      	movs	r3, #0
 8004486:	4604      	mov	r4, r0
 8004488:	4608      	mov	r0, r1
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	f7fd fa22 	bl	80018d4 <_sbrk>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_sbrk_r+0x1a>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_sbrk_r+0x1a>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	20000290 	.word	0x20000290

080044a0 <_free_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4605      	mov	r5, r0
 80044a4:	2900      	cmp	r1, #0
 80044a6:	d041      	beq.n	800452c <_free_r+0x8c>
 80044a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ac:	1f0c      	subs	r4, r1, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bfb8      	it	lt
 80044b2:	18e4      	addlt	r4, r4, r3
 80044b4:	f7ff ff90 	bl	80043d8 <__malloc_lock>
 80044b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004530 <_free_r+0x90>)
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	b933      	cbnz	r3, 80044cc <_free_r+0x2c>
 80044be:	6063      	str	r3, [r4, #4]
 80044c0:	6014      	str	r4, [r2, #0]
 80044c2:	4628      	mov	r0, r5
 80044c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044c8:	f7ff bf8c 	b.w	80043e4 <__malloc_unlock>
 80044cc:	42a3      	cmp	r3, r4
 80044ce:	d908      	bls.n	80044e2 <_free_r+0x42>
 80044d0:	6820      	ldr	r0, [r4, #0]
 80044d2:	1821      	adds	r1, r4, r0
 80044d4:	428b      	cmp	r3, r1
 80044d6:	bf01      	itttt	eq
 80044d8:	6819      	ldreq	r1, [r3, #0]
 80044da:	685b      	ldreq	r3, [r3, #4]
 80044dc:	1809      	addeq	r1, r1, r0
 80044de:	6021      	streq	r1, [r4, #0]
 80044e0:	e7ed      	b.n	80044be <_free_r+0x1e>
 80044e2:	461a      	mov	r2, r3
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	b10b      	cbz	r3, 80044ec <_free_r+0x4c>
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	d9fa      	bls.n	80044e2 <_free_r+0x42>
 80044ec:	6811      	ldr	r1, [r2, #0]
 80044ee:	1850      	adds	r0, r2, r1
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d10b      	bne.n	800450c <_free_r+0x6c>
 80044f4:	6820      	ldr	r0, [r4, #0]
 80044f6:	4401      	add	r1, r0
 80044f8:	1850      	adds	r0, r2, r1
 80044fa:	4283      	cmp	r3, r0
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	d1e0      	bne.n	80044c2 <_free_r+0x22>
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	6053      	str	r3, [r2, #4]
 8004506:	4408      	add	r0, r1
 8004508:	6010      	str	r0, [r2, #0]
 800450a:	e7da      	b.n	80044c2 <_free_r+0x22>
 800450c:	d902      	bls.n	8004514 <_free_r+0x74>
 800450e:	230c      	movs	r3, #12
 8004510:	602b      	str	r3, [r5, #0]
 8004512:	e7d6      	b.n	80044c2 <_free_r+0x22>
 8004514:	6820      	ldr	r0, [r4, #0]
 8004516:	1821      	adds	r1, r4, r0
 8004518:	428b      	cmp	r3, r1
 800451a:	bf04      	itt	eq
 800451c:	6819      	ldreq	r1, [r3, #0]
 800451e:	685b      	ldreq	r3, [r3, #4]
 8004520:	6063      	str	r3, [r4, #4]
 8004522:	bf04      	itt	eq
 8004524:	1809      	addeq	r1, r1, r0
 8004526:	6021      	streq	r1, [r4, #0]
 8004528:	6054      	str	r4, [r2, #4]
 800452a:	e7ca      	b.n	80044c2 <_free_r+0x22>
 800452c:	bd38      	pop	{r3, r4, r5, pc}
 800452e:	bf00      	nop
 8004530:	2000028c 	.word	0x2000028c

08004534 <_malloc_usable_size_r>:
 8004534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004538:	1f18      	subs	r0, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	bfbc      	itt	lt
 800453e:	580b      	ldrlt	r3, [r1, r0]
 8004540:	18c0      	addlt	r0, r0, r3
 8004542:	4770      	bx	lr

08004544 <_init>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr

08004550 <_fini>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr
