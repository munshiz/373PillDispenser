
LCD_TOUCH_out.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da0  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08003f5c  08003f5c  00004f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c4  080044c4  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080044c4  080044c4  000054c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044cc  080044cc  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d0  080044d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080044d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000010  080044e4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080044e4  00006110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008da9  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001992  00000000  00000000  0000ede9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00010780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b6  00000000  00000000  00011070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002987d  00000000  00000000  00011726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a388  00000000  00000000  0003afa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9936  00000000  00000000  0004532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ec61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002360  00000000  00000000  0013eca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00141004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003f44 	.word	0x08003f44

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08003f44 	.word	0x08003f44

080001fc <strcmp>:
 80001fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000204:	2a01      	cmp	r2, #1
 8000206:	bf28      	it	cs
 8000208:	429a      	cmpcs	r2, r3
 800020a:	d0f7      	beq.n	80001fc <strcmp>
 800020c:	1ad0      	subs	r0, r2, r3
 800020e:	4770      	bx	lr

08000210 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 800021e:	2200      	movs	r2, #0
 8000220:	2140      	movs	r1, #64	@ 0x40
 8000222:	480c      	ldr	r0, [pc, #48]	@ (8000254 <ILI9488_SendCommand+0x44>)
 8000224:	f002 f948 	bl	80024b8 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000228:	2200      	movs	r2, #0
 800022a:	2101      	movs	r1, #1
 800022c:	4809      	ldr	r0, [pc, #36]	@ (8000254 <ILI9488_SendCommand+0x44>)
 800022e:	f002 f943 	bl	80024b8 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 8000232:	f107 010f 	add.w	r1, r7, #15
 8000236:	2301      	movs	r3, #1
 8000238:	2201      	movs	r2, #1
 800023a:	4807      	ldr	r0, [pc, #28]	@ (8000258 <ILI9488_SendCommand+0x48>)
 800023c:	f003 f95b 	bl	80034f6 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000240:	2201      	movs	r2, #1
 8000242:	2101      	movs	r1, #1
 8000244:	4803      	ldr	r0, [pc, #12]	@ (8000254 <ILI9488_SendCommand+0x44>)
 8000246:	f002 f937 	bl	80024b8 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	48000c00 	.word	0x48000c00
 8000258:	20000044 	.word	0x20000044

0800025c <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 800026a:	2201      	movs	r2, #1
 800026c:	2140      	movs	r1, #64	@ 0x40
 800026e:	480c      	ldr	r0, [pc, #48]	@ (80002a0 <ILI9488_SendData+0x44>)
 8000270:	f002 f922 	bl	80024b8 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000274:	2200      	movs	r2, #0
 8000276:	2101      	movs	r1, #1
 8000278:	4809      	ldr	r0, [pc, #36]	@ (80002a0 <ILI9488_SendData+0x44>)
 800027a:	f002 f91d 	bl	80024b8 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800027e:	f107 010f 	add.w	r1, r7, #15
 8000282:	2301      	movs	r3, #1
 8000284:	2201      	movs	r2, #1
 8000286:	4807      	ldr	r0, [pc, #28]	@ (80002a4 <ILI9488_SendData+0x48>)
 8000288:	f003 f935 	bl	80034f6 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 800028c:	2201      	movs	r2, #1
 800028e:	2101      	movs	r1, #1
 8000290:	4803      	ldr	r0, [pc, #12]	@ (80002a0 <ILI9488_SendData+0x44>)
 8000292:	f002 f911 	bl	80024b8 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	48000c00 	.word	0x48000c00
 80002a4:	20000044 	.word	0x20000044

080002a8 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80002b2:	2201      	movs	r2, #1
 80002b4:	2140      	movs	r1, #64	@ 0x40
 80002b6:	4815      	ldr	r0, [pc, #84]	@ (800030c <ILI9488_SendData_Multi+0x64>)
 80002b8:	f002 f8fe 	bl	80024b8 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 80002bc:	2200      	movs	r2, #0
 80002be:	2101      	movs	r1, #1
 80002c0:	4812      	ldr	r0, [pc, #72]	@ (800030c <ILI9488_SendData_Multi+0x64>)
 80002c2:	f002 f8f9 	bl	80024b8 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 80002c6:	e015      	b.n	80002f4 <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80002ce:	bf28      	it	cs
 80002d0:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80002d4:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80002d6:	89fa      	ldrh	r2, [r7, #14]
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002dc:	6879      	ldr	r1, [r7, #4]
 80002de:	480c      	ldr	r0, [pc, #48]	@ (8000310 <ILI9488_SendData_Multi+0x68>)
 80002e0:	f003 f909 	bl	80034f6 <HAL_SPI_Transmit>
		buff += chunk_size;
 80002e4:	89fb      	ldrh	r3, [r7, #14]
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	4413      	add	r3, r2
 80002ea:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80002ec:	89fb      	ldrh	r3, [r7, #14]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	1ad3      	subs	r3, r2, r3
 80002f2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d1e6      	bne.n	80002c8 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 80002fa:	2201      	movs	r2, #1
 80002fc:	2101      	movs	r1, #1
 80002fe:	4803      	ldr	r0, [pc, #12]	@ (800030c <ILI9488_SendData_Multi+0x64>)
 8000300:	f002 f8da 	bl	80024b8 <HAL_GPIO_WritePin>
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	48000c00 	.word	0x48000c00
 8000310:	20000044 	.word	0x20000044

08000314 <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 8000318:	2201      	movs	r2, #1
 800031a:	2101      	movs	r1, #1
 800031c:	486c      	ldr	r0, [pc, #432]	@ (80004d0 <ILI9488_Init+0x1bc>)
 800031e:	f002 f8cb 	bl	80024b8 <HAL_GPIO_WritePin>
	RST_A();
 8000322:	2200      	movs	r2, #0
 8000324:	2180      	movs	r1, #128	@ 0x80
 8000326:	486a      	ldr	r0, [pc, #424]	@ (80004d0 <ILI9488_Init+0x1bc>)
 8000328:	f002 f8c6 	bl	80024b8 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 800032c:	200a      	movs	r0, #10
 800032e:	f001 fe27 	bl	8001f80 <HAL_Delay>
		 RST_D();
 8000332:	2201      	movs	r2, #1
 8000334:	2180      	movs	r1, #128	@ 0x80
 8000336:	4866      	ldr	r0, [pc, #408]	@ (80004d0 <ILI9488_Init+0x1bc>)
 8000338:	f002 f8be 	bl	80024b8 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 800033c:	4b65      	ldr	r3, [pc, #404]	@ (80004d4 <ILI9488_Init+0x1c0>)
 800033e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000342:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 8000344:	4b64      	ldr	r3, [pc, #400]	@ (80004d8 <ILI9488_Init+0x1c4>)
 8000346:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800034a:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 800034c:	20e0      	movs	r0, #224	@ 0xe0
 800034e:	f7ff ff5f 	bl	8000210 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 8000352:	2000      	movs	r0, #0
 8000354:	f7ff ff82 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 8000358:	2003      	movs	r0, #3
 800035a:	f7ff ff7f 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 800035e:	2009      	movs	r0, #9
 8000360:	f7ff ff7c 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000364:	2008      	movs	r0, #8
 8000366:	f7ff ff79 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800036a:	2016      	movs	r0, #22
 800036c:	f7ff ff76 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000370:	200a      	movs	r0, #10
 8000372:	f7ff ff73 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 8000376:	203f      	movs	r0, #63	@ 0x3f
 8000378:	f7ff ff70 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 800037c:	2078      	movs	r0, #120	@ 0x78
 800037e:	f7ff ff6d 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 8000382:	204c      	movs	r0, #76	@ 0x4c
 8000384:	f7ff ff6a 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000388:	2009      	movs	r0, #9
 800038a:	f7ff ff67 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800038e:	200a      	movs	r0, #10
 8000390:	f7ff ff64 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000394:	2008      	movs	r0, #8
 8000396:	f7ff ff61 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800039a:	2016      	movs	r0, #22
 800039c:	f7ff ff5e 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 80003a0:	201a      	movs	r0, #26
 80003a2:	f7ff ff5b 	bl	800025c <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 80003a6:	200f      	movs	r0, #15
 80003a8:	f7ff ff58 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 80003ac:	20e1      	movs	r0, #225	@ 0xe1
 80003ae:	f7ff ff2f 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ff52 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 80003b8:	2016      	movs	r0, #22
 80003ba:	f7ff ff4f 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 80003be:	2019      	movs	r0, #25
 80003c0:	f7ff ff4c 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 80003c4:	2003      	movs	r0, #3
 80003c6:	f7ff ff49 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80003ca:	200f      	movs	r0, #15
 80003cc:	f7ff ff46 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 80003d0:	2005      	movs	r0, #5
 80003d2:	f7ff ff43 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 80003d6:	2032      	movs	r0, #50	@ 0x32
 80003d8:	f7ff ff40 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 80003dc:	2045      	movs	r0, #69	@ 0x45
 80003de:	f7ff ff3d 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 80003e2:	2046      	movs	r0, #70	@ 0x46
 80003e4:	f7ff ff3a 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 80003e8:	2004      	movs	r0, #4
 80003ea:	f7ff ff37 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 80003ee:	200e      	movs	r0, #14
 80003f0:	f7ff ff34 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 80003f4:	200d      	movs	r0, #13
 80003f6:	f7ff ff31 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 80003fa:	2035      	movs	r0, #53	@ 0x35
 80003fc:	f7ff ff2e 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 8000400:	2037      	movs	r0, #55	@ 0x37
 8000402:	f7ff ff2b 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 8000406:	200f      	movs	r0, #15
 8000408:	f7ff ff28 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 800040c:	20c0      	movs	r0, #192	@ 0xc0
 800040e:	f7ff feff 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 8000412:	2017      	movs	r0, #23
 8000414:	f7ff ff22 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 8000418:	2015      	movs	r0, #21
 800041a:	f7ff ff1f 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 800041e:	20c1      	movs	r0, #193	@ 0xc1
 8000420:	f7ff fef6 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 8000424:	2041      	movs	r0, #65	@ 0x41
 8000426:	f7ff ff19 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 800042a:	20c5      	movs	r0, #197	@ 0xc5
 800042c:	f7ff fef0 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000430:	2000      	movs	r0, #0
 8000432:	f7ff ff13 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 8000436:	2012      	movs	r0, #18
 8000438:	f7ff ff10 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 800043c:	2080      	movs	r0, #128	@ 0x80
 800043e:	f7ff ff0d 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 8000442:	2036      	movs	r0, #54	@ 0x36
 8000444:	f7ff fee4 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 8000448:	2048      	movs	r0, #72	@ 0x48
 800044a:	f7ff ff07 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 800044e:	203a      	movs	r0, #58	@ 0x3a
 8000450:	f7ff fede 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 8000454:	2066      	movs	r0, #102	@ 0x66
 8000456:	f7ff ff01 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 800045a:	20b0      	movs	r0, #176	@ 0xb0
 800045c:	f7ff fed8 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8000460:	2080      	movs	r0, #128	@ 0x80
 8000462:	f7ff fefb 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 8000466:	20b1      	movs	r0, #177	@ 0xb1
 8000468:	f7ff fed2 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 800046c:	20a0      	movs	r0, #160	@ 0xa0
 800046e:	f7ff fef5 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 8000472:	20b4      	movs	r0, #180	@ 0xb4
 8000474:	f7ff fecc 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000478:	2002      	movs	r0, #2
 800047a:	f7ff feef 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 800047e:	20b6      	movs	r0, #182	@ 0xb6
 8000480:	f7ff fec6 	bl	8000210 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000484:	2002      	movs	r0, #2
 8000486:	f7ff fee9 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 800048a:	2002      	movs	r0, #2
 800048c:	f7ff fee6 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8000490:	20e9      	movs	r0, #233	@ 0xe9
 8000492:	f7ff febd 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 8000496:	2000      	movs	r0, #0
 8000498:	f7ff fee0 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 800049c:	20f7      	movs	r0, #247	@ 0xf7
 800049e:	f7ff feb7 	bl	8000210 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 80004a2:	20a9      	movs	r0, #169	@ 0xa9
 80004a4:	f7ff feda 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 80004a8:	2051      	movs	r0, #81	@ 0x51
 80004aa:	f7ff fed7 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 80004ae:	202c      	movs	r0, #44	@ 0x2c
 80004b0:	f7ff fed4 	bl	800025c <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 80004b4:	2082      	movs	r0, #130	@ 0x82
 80004b6:	f7ff fed1 	bl	800025c <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 80004ba:	2011      	movs	r0, #17
 80004bc:	f7ff fea8 	bl	8000210 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 80004c0:	2078      	movs	r0, #120	@ 0x78
 80004c2:	f001 fd5d 	bl	8001f80 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 80004c6:	2029      	movs	r0, #41	@ 0x29
 80004c8:	f7ff fea2 	bl	8000210 <ILI9488_SendCommand>

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	48000c00 	.word	0x48000c00
 80004d4:	2000003e 	.word	0x2000003e
 80004d8:	20000040 	.word	0x20000040

080004dc <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4604      	mov	r4, r0
 80004e4:	4608      	mov	r0, r1
 80004e6:	4611      	mov	r1, r2
 80004e8:	461a      	mov	r2, r3
 80004ea:	4623      	mov	r3, r4
 80004ec:	80fb      	strh	r3, [r7, #6]
 80004ee:	4603      	mov	r3, r0
 80004f0:	80bb      	strh	r3, [r7, #4]
 80004f2:	460b      	mov	r3, r1
 80004f4:	807b      	strh	r3, [r7, #2]
 80004f6:	4613      	mov	r3, r2
 80004f8:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 80004fa:	202a      	movs	r0, #42	@ 0x2a
 80004fc:	f7ff fe88 	bl	8000210 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	0a1b      	lsrs	r3, r3, #8
 8000504:	b29b      	uxth	r3, r3
 8000506:	b2db      	uxtb	r3, r3
 8000508:	733b      	strb	r3, [r7, #12]
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	737b      	strb	r3, [r7, #13]
 8000510:	887b      	ldrh	r3, [r7, #2]
 8000512:	0a1b      	lsrs	r3, r3, #8
 8000514:	b29b      	uxth	r3, r3
 8000516:	b2db      	uxtb	r3, r3
 8000518:	73bb      	strb	r3, [r7, #14]
 800051a:	887b      	ldrh	r3, [r7, #2]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2104      	movs	r1, #4
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff febe 	bl	80002a8 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 800052c:	202b      	movs	r0, #43	@ 0x2b
 800052e:	f7ff fe6f 	bl	8000210 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	b29b      	uxth	r3, r3
 8000538:	b2db      	uxtb	r3, r3
 800053a:	723b      	strb	r3, [r7, #8]
 800053c:	88bb      	ldrh	r3, [r7, #4]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	727b      	strb	r3, [r7, #9]
 8000542:	883b      	ldrh	r3, [r7, #0]
 8000544:	0a1b      	lsrs	r3, r3, #8
 8000546:	b29b      	uxth	r3, r3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	72bb      	strb	r3, [r7, #10]
 800054c:	883b      	ldrh	r3, [r7, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	2104      	movs	r1, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fea5 	bl	80002a8 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 800055e:	202c      	movs	r0, #44	@ 0x2c
 8000560:	f7ff fe56 	bl	8000210 <ILI9488_SendCommand>
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	bd90      	pop	{r4, r7, pc}

0800056c <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
 8000576:	460b      	mov	r3, r1
 8000578:	80bb      	strh	r3, [r7, #4]
 800057a:	4613      	mov	r3, r2
 800057c:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 800057e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000582:	2b00      	cmp	r3, #0
 8000584:	db36      	blt.n	80005f4 <drawPixel+0x88>
 8000586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800058a:	4a1c      	ldr	r2, [pc, #112]	@ (80005fc <drawPixel+0x90>)
 800058c:	8812      	ldrh	r2, [r2, #0]
 800058e:	4293      	cmp	r3, r2
 8000590:	da30      	bge.n	80005f4 <drawPixel+0x88>
 8000592:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db2c      	blt.n	80005f4 <drawPixel+0x88>
 800059a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800059e:	4a18      	ldr	r2, [pc, #96]	@ (8000600 <drawPixel+0x94>)
 80005a0:	8812      	ldrh	r2, [r2, #0]
 80005a2:	4293      	cmp	r3, r2
 80005a4:	da26      	bge.n	80005f4 <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 80005a6:	88f8      	ldrh	r0, [r7, #6]
 80005a8:	88b9      	ldrh	r1, [r7, #4]
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	3301      	adds	r3, #1
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	88bb      	ldrh	r3, [r7, #4]
 80005b2:	3301      	adds	r3, #1
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	f7ff ff91 	bl	80004dc <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <drawPixel+0x98>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <drawPixel+0x9c>)
 80005c0:	8811      	ldrh	r1, [r2, #0]
 80005c2:	2201      	movs	r2, #1
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 ff77 	bl	80024b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <drawPixel+0xa0>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a10      	ldr	r2, [pc, #64]	@ (8000610 <drawPixel+0xa4>)
 80005d0:	8811      	ldrh	r1, [r2, #0]
 80005d2:	2200      	movs	r2, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 ff6f 	bl	80024b8 <HAL_GPIO_WritePin>

	write16BitColor(color);
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fd5d 	bl	800109c <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <drawPixel+0xa0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <drawPixel+0xa4>)
 80005e8:	8811      	ldrh	r1, [r2, #0]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 ff63 	bl	80024b8 <HAL_GPIO_WritePin>
 80005f2:	e000      	b.n	80005f6 <drawPixel+0x8a>
		return;
 80005f4:	bf00      	nop

}
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000003e 	.word	0x2000003e
 8000600:	20000040 	.word	0x20000040
 8000604:	20000038 	.word	0x20000038
 8000608:	2000003c 	.word	0x2000003c
 800060c:	20000030 	.word	0x20000030
 8000610:	20000034 	.word	0x20000034

08000614 <drawPixelSize>:

void drawPixelSize(int16_t x, int16_t y, uint16_t color, uint16_t size)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4604      	mov	r4, r0
 800061c:	4608      	mov	r0, r1
 800061e:	4611      	mov	r1, r2
 8000620:	461a      	mov	r2, r3
 8000622:	4623      	mov	r3, r4
 8000624:	80fb      	strh	r3, [r7, #6]
 8000626:	4603      	mov	r3, r0
 8000628:	80bb      	strh	r3, [r7, #4]
 800062a:	460b      	mov	r3, r1
 800062c:	807b      	strh	r3, [r7, #2]
 800062e:	4613      	mov	r3, r2
 8000630:	803b      	strh	r3, [r7, #0]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8000632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db39      	blt.n	80006ae <drawPixelSize+0x9a>
 800063a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800063e:	4a1e      	ldr	r2, [pc, #120]	@ (80006b8 <drawPixelSize+0xa4>)
 8000640:	8812      	ldrh	r2, [r2, #0]
 8000642:	4293      	cmp	r3, r2
 8000644:	da33      	bge.n	80006ae <drawPixelSize+0x9a>
 8000646:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db2f      	blt.n	80006ae <drawPixelSize+0x9a>
 800064e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000652:	4a1a      	ldr	r2, [pc, #104]	@ (80006bc <drawPixelSize+0xa8>)
 8000654:	8812      	ldrh	r2, [r2, #0]
 8000656:	4293      	cmp	r3, r2
 8000658:	da29      	bge.n	80006ae <drawPixelSize+0x9a>
		return;

	setAddrWindow(x, y, x + size, y + size);
 800065a:	88f8      	ldrh	r0, [r7, #6]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88fa      	ldrh	r2, [r7, #6]
 8000660:	883b      	ldrh	r3, [r7, #0]
 8000662:	4413      	add	r3, r2
 8000664:	b29c      	uxth	r4, r3
 8000666:	88ba      	ldrh	r2, [r7, #4]
 8000668:	883b      	ldrh	r3, [r7, #0]
 800066a:	4413      	add	r3, r2
 800066c:	b29b      	uxth	r3, r3
 800066e:	4622      	mov	r2, r4
 8000670:	f7ff ff34 	bl	80004dc <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <drawPixelSize+0xac>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <drawPixelSize+0xb0>)
 800067a:	8811      	ldrh	r1, [r2, #0]
 800067c:	2201      	movs	r2, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f001 ff1a 	bl	80024b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <drawPixelSize+0xb4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a10      	ldr	r2, [pc, #64]	@ (80006cc <drawPixelSize+0xb8>)
 800068a:	8811      	ldrh	r1, [r2, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 ff12 	bl	80024b8 <HAL_GPIO_WritePin>

	write16BitColor(color);
 8000694:	887b      	ldrh	r3, [r7, #2]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fd00 	bl	800109c <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <drawPixelSize+0xb4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <drawPixelSize+0xb8>)
 80006a2:	8811      	ldrh	r1, [r2, #0]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 ff06 	bl	80024b8 <HAL_GPIO_WritePin>
 80006ac:	e000      	b.n	80006b0 <drawPixelSize+0x9c>
		return;
 80006ae:	bf00      	nop

}
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000003e 	.word	0x2000003e
 80006bc:	20000040 	.word	0x20000040
 80006c0:	20000038 	.word	0x20000038
 80006c4:	2000003c 	.word	0x2000003c
 80006c8:	20000030 	.word	0x20000030
 80006cc:	20000034 	.word	0x20000034

080006d0 <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af02      	add	r7, sp, #8
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <fillScreen+0x2c>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	b21a      	sxth	r2, r3
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <fillScreen+0x30>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b219      	sxth	r1, r3
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	460b      	mov	r3, r1
 80006ec:	2100      	movs	r1, #0
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f808 	bl	8000704 <fillRect>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000003e 	.word	0x2000003e
 8000700:	20000040 	.word	0x20000040

08000704 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000708:	b08a      	sub	sp, #40	@ 0x28
 800070a:	af00      	add	r7, sp, #0
 800070c:	4606      	mov	r6, r0
 800070e:	4608      	mov	r0, r1
 8000710:	4611      	mov	r1, r2
 8000712:	461a      	mov	r2, r3
 8000714:	4633      	mov	r3, r6
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	4603      	mov	r3, r0
 800071a:	80bb      	strh	r3, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
 8000720:	4613      	mov	r3, r2
 8000722:	803b      	strh	r3, [r7, #0]
 8000724:	466b      	mov	r3, sp
 8000726:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800072c:	4a8f      	ldr	r2, [pc, #572]	@ (800096c <fillRect+0x268>)
 800072e:	8812      	ldrh	r2, [r2, #0]
 8000730:	4293      	cmp	r3, r2
 8000732:	da05      	bge.n	8000740 <fillRect+0x3c>
 8000734:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000738:	4a8d      	ldr	r2, [pc, #564]	@ (8000970 <fillRect+0x26c>)
 800073a:	8812      	ldrh	r2, [r2, #0]
 800073c:	4293      	cmp	r3, r2
 800073e:	db01      	blt.n	8000744 <fillRect+0x40>
		return;
 8000740:	46d5      	mov	sp, sl
 8000742:	e10f      	b.n	8000964 <fillRect+0x260>
	if ((x + w - 1) >= width)
 8000744:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800074c:	4413      	add	r3, r2
 800074e:	4a87      	ldr	r2, [pc, #540]	@ (800096c <fillRect+0x268>)
 8000750:	8812      	ldrh	r2, [r2, #0]
 8000752:	4293      	cmp	r3, r2
 8000754:	dd05      	ble.n	8000762 <fillRect+0x5e>
		w = width - x;
 8000756:	4b85      	ldr	r3, [pc, #532]	@ (800096c <fillRect+0x268>)
 8000758:	881a      	ldrh	r2, [r3, #0]
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	b29b      	uxth	r3, r3
 8000760:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 8000762:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000766:	f9b7 3000 	ldrsh.w	r3, [r7]
 800076a:	4413      	add	r3, r2
 800076c:	4a80      	ldr	r2, [pc, #512]	@ (8000970 <fillRect+0x26c>)
 800076e:	8812      	ldrh	r2, [r2, #0]
 8000770:	4293      	cmp	r3, r2
 8000772:	dd05      	ble.n	8000780 <fillRect+0x7c>
		h = height - y;
 8000774:	4b7e      	ldr	r3, [pc, #504]	@ (8000970 <fillRect+0x26c>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000780:	88f8      	ldrh	r0, [r7, #6]
 8000782:	88b9      	ldrh	r1, [r7, #4]
 8000784:	88fa      	ldrh	r2, [r7, #6]
 8000786:	887b      	ldrh	r3, [r7, #2]
 8000788:	4413      	add	r3, r2
 800078a:	b29b      	uxth	r3, r3
 800078c:	3b01      	subs	r3, #1
 800078e:	b29e      	uxth	r6, r3
 8000790:	88ba      	ldrh	r2, [r7, #4]
 8000792:	883b      	ldrh	r3, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	b29b      	uxth	r3, r3
 8000798:	3b01      	subs	r3, #1
 800079a:	b29b      	uxth	r3, r3
 800079c:	4632      	mov	r2, r6
 800079e:	f7ff fe9d 	bl	80004dc <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 80007a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80007a6:	0adb      	lsrs	r3, r3, #11
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 80007ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80007b0:	115b      	asrs	r3, r3, #5
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80007b8:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 80007ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f003 031f 	and.w	r3, r3, #31
 80007c4:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 80007c6:	7efa      	ldrb	r2, [r7, #27]
 80007c8:	4613      	mov	r3, r2
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	4a69      	ldr	r2, [pc, #420]	@ (8000974 <fillRect+0x270>)
 80007d0:	fb82 1203 	smull	r1, r2, r2, r3
 80007d4:	441a      	add	r2, r3
 80007d6:	1112      	asrs	r2, r2, #4
 80007d8:	17db      	asrs	r3, r3, #31
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 80007de:	7eba      	ldrb	r2, [r7, #26]
 80007e0:	4613      	mov	r3, r2
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	1a9b      	subs	r3, r3, r2
 80007e6:	4a64      	ldr	r2, [pc, #400]	@ (8000978 <fillRect+0x274>)
 80007e8:	fb82 1203 	smull	r1, r2, r2, r3
 80007ec:	441a      	add	r2, r3
 80007ee:	1152      	asrs	r2, r2, #5
 80007f0:	17db      	asrs	r3, r3, #31
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 80007f6:	7e7a      	ldrb	r2, [r7, #25]
 80007f8:	4613      	mov	r3, r2
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	4a5d      	ldr	r2, [pc, #372]	@ (8000974 <fillRect+0x270>)
 8000800:	fb82 1203 	smull	r1, r2, r2, r3
 8000804:	441a      	add	r2, r3
 8000806:	1112      	asrs	r2, r2, #4
 8000808:	17db      	asrs	r3, r3, #31
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 800080e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000812:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000816:	fb03 f202 	mul.w	r2, r3, r2
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000828:	d204      	bcs.n	8000834 <fillRect+0x130>
		cnt = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
		buf_size = n;
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e02f      	b.n	8000894 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	4a51      	ldr	r2, [pc, #324]	@ (800097c <fillRect+0x278>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 8000840:	2303      	movs	r3, #3
 8000842:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	4a4e      	ldr	r2, [pc, #312]	@ (8000980 <fillRect+0x27c>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	0bdb      	lsrs	r3, r3, #15
 800084e:	b2db      	uxtb	r3, r3
 8000850:	3301      	adds	r3, #1
 8000852:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8000854:	7cfb      	ldrb	r3, [r7, #19]
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
 8000858:	e014      	b.n	8000884 <fillRect+0x180>
			if(n%i == 0){
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800085e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000864:	fb01 f202 	mul.w	r2, r1, r2
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d107      	bne.n	800087e <fillRect+0x17a>
				cnt = i;
 800086e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000870:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	61fb      	str	r3, [r7, #28]
				break;
 800087c:	e00a      	b.n	8000894 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 800087e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000880:	3301      	adds	r3, #1
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	4a3d      	ldr	r2, [pc, #244]	@ (800097c <fillRect+0x278>)
 8000888:	fba2 2303 	umull	r2, r3, r2, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000890:	429a      	cmp	r2, r3
 8000892:	d3e2      	bcc.n	800085a <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 8000894:	69f9      	ldr	r1, [r7, #28]
 8000896:	460b      	mov	r3, r1
 8000898:	3b01      	subs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	2300      	movs	r3, #0
 800089e:	4688      	mov	r8, r1
 80008a0:	4699      	mov	r9, r3
 80008a2:	f04f 0200 	mov.w	r2, #0
 80008a6:	f04f 0300 	mov.w	r3, #0
 80008aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008b6:	2300      	movs	r3, #0
 80008b8:	460c      	mov	r4, r1
 80008ba:	461d      	mov	r5, r3
 80008bc:	f04f 0200 	mov.w	r2, #0
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	00eb      	lsls	r3, r5, #3
 80008c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008ca:	00e2      	lsls	r2, r4, #3
 80008cc:	1dcb      	adds	r3, r1, #7
 80008ce:	08db      	lsrs	r3, r3, #3
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	ebad 0d03 	sub.w	sp, sp, r3
 80008d6:	466b      	mov	r3, sp
 80008d8:	3300      	adds	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
 80008e0:	e019      	b.n	8000916 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 80008e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	7ef9      	ldrb	r1, [r7, #27]
 80008ee:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 80008f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	3301      	adds	r3, #1
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	7eb9      	ldrb	r1, [r7, #26]
 80008fe:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8000900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	3302      	adds	r3, #2
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	7e79      	ldrb	r1, [r7, #25]
 800090e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8000910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000912:	3301      	adds	r3, #1
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	4a18      	ldr	r2, [pc, #96]	@ (800097c <fillRect+0x278>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	085b      	lsrs	r3, r3, #1
 8000920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000922:	429a      	cmp	r2, r3
 8000924:	d3dd      	bcc.n	80008e2 <fillRect+0x1de>
	}
	DC_DATA();
 8000926:	2201      	movs	r2, #1
 8000928:	2140      	movs	r1, #64	@ 0x40
 800092a:	4816      	ldr	r0, [pc, #88]	@ (8000984 <fillRect+0x280>)
 800092c:	f001 fdc4 	bl	80024b8 <HAL_GPIO_WritePin>
	CS_A();
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	4813      	ldr	r0, [pc, #76]	@ (8000984 <fillRect+0x280>)
 8000936:	f001 fdbf 	bl	80024b8 <HAL_GPIO_WritePin>
		while(cnt>0)
 800093a:	e00a      	b.n	8000952 <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	b29a      	uxth	r2, r3
 8000940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	4810      	ldr	r0, [pc, #64]	@ (8000988 <fillRect+0x284>)
 8000948:	f002 fdd5 	bl	80034f6 <HAL_SPI_Transmit>

			cnt -= 1;
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	3b01      	subs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f1      	bne.n	800093c <fillRect+0x238>
		}
		CS_D();
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4809      	ldr	r0, [pc, #36]	@ (8000984 <fillRect+0x280>)
 800095e:	f001 fdab 	bl	80024b8 <HAL_GPIO_WritePin>
 8000962:	46d5      	mov	sp, sl

}
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096c:	2000003e 	.word	0x2000003e
 8000970:	20000040 	.word	0x20000040
 8000974:	84210843 	.word	0x84210843
 8000978:	82082083 	.word	0x82082083
 800097c:	aaaaaaab 	.word	0xaaaaaaab
 8000980:	80008001 	.word	0x80008001
 8000984:	48000c00 	.word	0x48000c00
 8000988:	20000044 	.word	0x20000044

0800098c <setRotation>:


void setRotation(uint8_t r)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 8000996:	2036      	movs	r0, #54	@ 0x36
 8000998:	f7ff fc3a 	bl	8000210 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d83a      	bhi.n	8000a20 <setRotation+0x94>
 80009aa:	a201      	add	r2, pc, #4	@ (adr r2, 80009b0 <setRotation+0x24>)
 80009ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b0:	080009c1 	.word	0x080009c1
 80009b4:	080009d9 	.word	0x080009d9
 80009b8:	080009f1 	.word	0x080009f1
 80009bc:	08000a09 	.word	0x08000a09
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 80009c0:	2048      	movs	r0, #72	@ 0x48
 80009c2:	f7ff fc4b 	bl	800025c <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 80009c6:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <setRotation+0x9c>)
 80009c8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009cc:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <setRotation+0xa0>)
 80009d0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80009d4:	801a      	strh	r2, [r3, #0]
		break;
 80009d6:	e023      	b.n	8000a20 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 80009d8:	2028      	movs	r0, #40	@ 0x28
 80009da:	f7ff fc3f 	bl	800025c <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <setRotation+0x9c>)
 80009e0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80009e4:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <setRotation+0xa0>)
 80009e8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009ec:	801a      	strh	r2, [r3, #0]
		break;
 80009ee:	e017      	b.n	8000a20 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 80009f0:	2088      	movs	r0, #136	@ 0x88
 80009f2:	f7ff fc33 	bl	800025c <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <setRotation+0x9c>)
 80009f8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009fc:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <setRotation+0xa0>)
 8000a00:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a04:	801a      	strh	r2, [r3, #0]
		break;
 8000a06:	e00b      	b.n	8000a20 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000a08:	20e8      	movs	r0, #232	@ 0xe8
 8000a0a:	f7ff fc27 	bl	800025c <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <setRotation+0x9c>)
 8000a10:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a14:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000a16:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <setRotation+0xa0>)
 8000a18:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a1c:	801a      	strh	r2, [r3, #0]
		break;
 8000a1e:	bf00      	nop
	}

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000003e 	.word	0x2000003e
 8000a2c:	20000040 	.word	0x20000040

08000a30 <drawChar>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

//11. Text printing functions
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	4604      	mov	r4, r0
 8000a38:	4608      	mov	r0, r1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4623      	mov	r3, r4
 8000a40:	80fb      	strh	r3, [r7, #6]
 8000a42:	4603      	mov	r3, r0
 8000a44:	80bb      	strh	r3, [r7, #4]
 8000a46:	460b      	mov	r3, r1
 8000a48:	70fb      	strb	r3, [r7, #3]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000a4e:	4bac      	ldr	r3, [pc, #688]	@ (8000d00 <drawChar+0x2d0>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d003      	beq.n	8000a5e <drawChar+0x2e>
 8000a56:	4baa      	ldr	r3, [pc, #680]	@ (8000d00 <drawChar+0x2d0>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d120      	bne.n	8000aa0 <drawChar+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a62:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a66:	f280 8144 	bge.w	8000cf2 <drawChar+0x2c2>
 8000a6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a6e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a72:	f280 813e 	bge.w	8000cf2 <drawChar+0x2c2>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000a76:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a7a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f340 8132 	ble.w	8000cf2 <drawChar+0x2c2>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000a8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	dc22      	bgt.n	8000ae4 <drawChar+0xb4>
    return;
 8000a9e:	e128      	b.n	8000cf2 <drawChar+0x2c2>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8000aa0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aa4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000aa8:	f280 8125 	bge.w	8000cf6 <drawChar+0x2c6>
 8000aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000ab4:	f280 811f 	bge.w	8000cf6 <drawChar+0x2c6>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000ab8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000abc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4413      	add	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f340 8113 	ble.w	8000cf6 <drawChar+0x2c6>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000ad0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ad4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f340 810a 	ble.w	8000cf6 <drawChar+0x2c6>
 8000ae2:	e000      	b.n	8000ae6 <drawChar+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000ae4:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000ae6:	4b87      	ldr	r3, [pc, #540]	@ (8000d04 <drawChar+0x2d4>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	f083 0301 	eor.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <drawChar+0xd0>
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2baf      	cmp	r3, #175	@ 0xaf
 8000af8:	d902      	bls.n	8000b00 <drawChar+0xd0>
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	3301      	adds	r3, #1
 8000afe:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	e0ef      	b.n	8000ce6 <drawChar+0x2b6>
    uint8_t line;
    if (i == 5)
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d102      	bne.n	8000b14 <drawChar+0xe4>
      line = 0x0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73bb      	strb	r3, [r7, #14]
 8000b12:	e00b      	b.n	8000b2c <drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8000b14:	78fa      	ldrb	r2, [r7, #3]
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a78      	ldr	r2, [pc, #480]	@ (8000d08 <drawChar+0x2d8>)
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	737b      	strb	r3, [r7, #13]
 8000b30:	e0ce      	b.n	8000cd0 <drawChar+0x2a0>
      if (line & 0x1) {
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d05e      	beq.n	8000bfa <drawChar+0x1ca>
        if (size == 1) // default size
 8000b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d112      	bne.n	8000b6a <drawChar+0x13a>
        	drawPixel(x+i, y+j, color);
 8000b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b218      	sxth	r0, r3
 8000b52:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	88bb      	ldrh	r3, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	883a      	ldrh	r2, [r7, #0]
 8000b62:	4619      	mov	r1, r3
 8000b64:	f7ff fd02 	bl	800056c <drawPixel>
 8000b68:	e0a9      	b.n	8000cbe <drawChar+0x28e>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	fb12 f303 	smulbb	r3, r2, r3
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	b218      	sxth	r0, r3
 8000b84:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	fb12 f303 	smulbb	r3, r2, r3
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	b21c      	sxth	r4, r3
 8000b9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	b299      	uxth	r1, r3
 8000bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	fb11 f303 	smulbb	r3, r1, r3
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b21d      	sxth	r5, r3
 8000bc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bd2:	b299      	uxth	r1, r3
 8000bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	fb11 f303 	smulbb	r3, r1, r3
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4413      	add	r3, r2
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	3301      	adds	r3, #1
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	883b      	ldrh	r3, [r7, #0]
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	462a      	mov	r2, r5
 8000bf2:	4621      	mov	r1, r4
 8000bf4:	f7ff fd86 	bl	8000704 <fillRect>
 8000bf8:	e061      	b.n	8000cbe <drawChar+0x28e>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }
      } else if (bg != color) {
 8000bfa:	8c3a      	ldrh	r2, [r7, #32]
 8000bfc:	883b      	ldrh	r3, [r7, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d05d      	beq.n	8000cbe <drawChar+0x28e>
        if (size == 1) // default size
 8000c02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d112      	bne.n	8000c30 <drawChar+0x200>
        	drawPixel(x+i, y+j, bg);
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	4413      	add	r3, r2
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b218      	sxth	r0, r3
 8000c18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	8c3a      	ldrh	r2, [r7, #32]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f7ff fc9f 	bl	800056c <drawPixel>
 8000c2e:	e046      	b.n	8000cbe <drawChar+0x28e>
        else {  // big size
        	fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	fb12 f303 	smulbb	r3, r2, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	4413      	add	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b218      	sxth	r0, r3
 8000c4a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	fb12 f303 	smulbb	r3, r2, r3
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	88bb      	ldrh	r3, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b21c      	sxth	r4, r3
 8000c64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c74:	b299      	uxth	r1, r3
 8000c76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	fb11 f303 	smulbb	r3, r1, r3
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	4413      	add	r3, r2
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	b21d      	sxth	r5, r3
 8000c88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c98:	b299      	uxth	r1, r3
 8000c9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	fb11 f303 	smulbb	r3, r1, r3
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	8c3b      	ldrh	r3, [r7, #32]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	462a      	mov	r2, r5
 8000cb8:	4621      	mov	r1, r4
 8000cba:	f7ff fd23 	bl	8000704 <fillRect>
        }
      }
      line >>= 1;
 8000cbe:	7bbb      	ldrb	r3, [r7, #14]
 8000cc0:	085b      	lsrs	r3, r3, #1
 8000cc2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000cc4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	3301      	adds	r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	737b      	strb	r3, [r7, #13]
 8000cd0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cd4:	2b07      	cmp	r3, #7
 8000cd6:	f77f af2c 	ble.w	8000b32 <drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	f77f af0b 	ble.w	8000b06 <drawChar+0xd6>
 8000cf0:	e002      	b.n	8000cf8 <drawChar+0x2c8>
    return;
 8000cf2:	bf00      	nop
 8000cf4:	e000      	b.n	8000cf8 <drawChar+0x2c8>
    return;
 8000cf6:	bf00      	nop
    }
  }
}
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000000 	.word	0x20000000
 8000d04:	2000002c 	.word	0x2000002c
 8000d08:	08003f84 	.word	0x08003f84

08000d0c <drawCharTest>:


void drawCharTest(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000d0c:	b5b0      	push	{r4, r5, r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	4604      	mov	r4, r0
 8000d14:	4608      	mov	r0, r1
 8000d16:	4611      	mov	r1, r2
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	80fb      	strh	r3, [r7, #6]
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80bb      	strh	r3, [r7, #4]
 8000d22:	460b      	mov	r3, r1
 8000d24:	70fb      	strb	r3, [r7, #3]
 8000d26:	4613      	mov	r3, r2
 8000d28:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000d2a:	4bb7      	ldr	r3, [pc, #732]	@ (8001008 <drawCharTest+0x2fc>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d003      	beq.n	8000d3a <drawCharTest+0x2e>
 8000d32:	4bb5      	ldr	r3, [pc, #724]	@ (8001008 <drawCharTest+0x2fc>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d120      	bne.n	8000d7c <drawCharTest+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d3e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000d42:	f280 815a 	bge.w	8000ffa <drawCharTest+0x2ee>
 8000d46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d4a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000d4e:	f280 8154 	bge.w	8000ffa <drawCharTest+0x2ee>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000d52:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d56:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f340 8148 	ble.w	8000ffa <drawCharTest+0x2ee>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000d6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	dc22      	bgt.n	8000dc0 <drawCharTest+0xb4>
    return;
 8000d7a:	e13e      	b.n	8000ffa <drawCharTest+0x2ee>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8000d7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d80:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000d84:	f280 813b 	bge.w	8000ffe <drawCharTest+0x2f2>
 8000d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d8c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000d90:	f280 8135 	bge.w	8000ffe <drawCharTest+0x2f2>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000d94:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d98:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f340 8129 	ble.w	8000ffe <drawCharTest+0x2f2>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000dac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000db0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f340 8120 	ble.w	8000ffe <drawCharTest+0x2f2>
 8000dbe:	e000      	b.n	8000dc2 <drawCharTest+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000dc0:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000dc2:	4b92      	ldr	r3, [pc, #584]	@ (800100c <drawCharTest+0x300>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	f083 0301 	eor.w	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <drawCharTest+0xd0>
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	2baf      	cmp	r3, #175	@ 0xaf
 8000dd4:	d902      	bls.n	8000ddc <drawCharTest+0xd0>
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e105      	b.n	8000fee <drawCharTest+0x2e2>
    uint8_t line;
    if (i == 5)
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d102      	bne.n	8000df0 <drawCharTest+0xe4>
      line = 0x0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73bb      	strb	r3, [r7, #14]
 8000dee:	e00b      	b.n	8000e08 <drawCharTest+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8000df0:	78fa      	ldrb	r2, [r7, #3]
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	461a      	mov	r2, r3
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a83      	ldr	r2, [pc, #524]	@ (8001010 <drawCharTest+0x304>)
 8000e02:	4413      	add	r3, r2
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	737b      	strb	r3, [r7, #13]
 8000e0c:	e0e4      	b.n	8000fd8 <drawCharTest+0x2cc>
      if (line & 0x1) {
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d073      	beq.n	8000f00 <drawCharTest+0x1f4>
        if (size == 1) // default size
 8000e18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d112      	bne.n	8000e46 <drawCharTest+0x13a>
        	drawPixel(x+i, y+j, color);
 8000e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4413      	add	r3, r2
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	b218      	sxth	r0, r3
 8000e2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	883a      	ldrh	r2, [r7, #0]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fb94 	bl	800056c <drawPixel>
 8000e44:	e047      	b.n	8000ed6 <drawCharTest+0x1ca>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), (size + x+(i*size))/10, (size+1 + y+(j*size))/10, color);
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	fb12 f303 	smulbb	r3, r2, r3
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b218      	sxth	r0, r3
 8000e60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	fb12 f303 	smulbb	r3, r2, r3
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b21c      	sxth	r4, r3
 8000e7a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e82:	441a      	add	r2, r3
 8000e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e88:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000e8c:	fb01 f303 	mul.w	r3, r1, r3
 8000e90:	4413      	add	r3, r2
 8000e92:	4a60      	ldr	r2, [pc, #384]	@ (8001014 <drawCharTest+0x308>)
 8000e94:	fb82 1203 	smull	r1, r2, r2, r3
 8000e98:	1092      	asrs	r2, r2, #2
 8000e9a:	17db      	asrs	r3, r3, #31
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	b21d      	sxth	r5, r3
 8000ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eaa:	441a      	add	r2, r3
 8000eac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eb0:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000eb4:	fb01 f303 	mul.w	r3, r1, r3
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a56      	ldr	r2, [pc, #344]	@ (8001014 <drawCharTest+0x308>)
 8000ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec0:	1092      	asrs	r2, r2, #2
 8000ec2:	17db      	asrs	r3, r3, #31
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	883b      	ldrh	r3, [r7, #0]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	462a      	mov	r2, r5
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	f7ff fc17 	bl	8000704 <fillRect>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }

        drawPixelSize(x + i, y + i, color, size);
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	4413      	add	r3, r2
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b218      	sxth	r0, r3
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	88bb      	ldrh	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	b219      	sxth	r1, r3
 8000ef2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	883a      	ldrh	r2, [r7, #0]
 8000efa:	f7ff fb8b 	bl	8000614 <drawPixelSize>
 8000efe:	e062      	b.n	8000fc6 <drawCharTest+0x2ba>
      } else if (bg != color) {
 8000f00:	8c3a      	ldrh	r2, [r7, #32]
 8000f02:	883b      	ldrh	r3, [r7, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d05e      	beq.n	8000fc6 <drawCharTest+0x2ba>
        if (size == 1) // default size
 8000f08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d112      	bne.n	8000f36 <drawCharTest+0x22a>
        	drawPixel(x+i, y+j, bg);
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4413      	add	r3, r2
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	b218      	sxth	r0, r3
 8000f1e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	8c3a      	ldrh	r2, [r7, #32]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f7ff fb1c 	bl	800056c <drawPixel>
 8000f34:	e047      	b.n	8000fc6 <drawCharTest+0x2ba>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), (size + x+(i*size))/10, (size+1 + y+(j*size))/10, bg);
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	fb12 f303 	smulbb	r3, r2, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b218      	sxth	r0, r3
 8000f50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	fb12 f303 	smulbb	r3, r2, r3
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	b21c      	sxth	r4, r3
 8000f6a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f72:	441a      	add	r2, r3
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000f7c:	fb01 f303 	mul.w	r3, r1, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	4a24      	ldr	r2, [pc, #144]	@ (8001014 <drawCharTest+0x308>)
 8000f84:	fb82 1203 	smull	r1, r2, r2, r3
 8000f88:	1092      	asrs	r2, r2, #2
 8000f8a:	17db      	asrs	r3, r3, #31
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	b21d      	sxth	r5, r3
 8000f90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f9a:	441a      	add	r2, r3
 8000f9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fa0:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000fa4:	fb01 f303 	mul.w	r3, r1, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a1a      	ldr	r2, [pc, #104]	@ (8001014 <drawCharTest+0x308>)
 8000fac:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb0:	1092      	asrs	r2, r2, #2
 8000fb2:	17db      	asrs	r3, r3, #31
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	8c3b      	ldrh	r3, [r7, #32]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	4621      	mov	r1, r4
 8000fc2:	f7ff fb9f 	bl	8000704 <fillRect>
        }
      }
      line >>= 1;
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	085b      	lsrs	r3, r3, #1
 8000fca:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000fcc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	737b      	strb	r3, [r7, #13]
 8000fd8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	f77f af16 	ble.w	8000e0e <drawCharTest+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	f77f aef5 	ble.w	8000de2 <drawCharTest+0xd6>
 8000ff8:	e002      	b.n	8001000 <drawCharTest+0x2f4>
    return;
 8000ffa:	bf00      	nop
 8000ffc:	e000      	b.n	8001000 <drawCharTest+0x2f4>
    return;
 8000ffe:	bf00      	nop
    }
  }
}
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	bf00      	nop
 8001008:	20000000 	.word	0x20000000
 800100c:	2000002c 	.word	0x2000002c
 8001010:	08003f84 	.word	0x08003f84
 8001014:	66666667 	.word	0x66666667

08001018 <ILI9488_printText>:

void ILI9488_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	4608      	mov	r0, r1
 8001022:	4611      	mov	r1, r2
 8001024:	461a      	mov	r2, r3
 8001026:	4603      	mov	r3, r0
 8001028:	817b      	strh	r3, [r7, #10]
 800102a:	460b      	mov	r3, r1
 800102c:	813b      	strh	r3, [r7, #8]
 800102e:	4613      	mov	r3, r2
 8001030:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001032:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	0052      	lsls	r2, r2, #1
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	b29b      	uxth	r3, r3
 8001042:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001044:	2300      	movs	r3, #0
 8001046:	82fb      	strh	r3, [r7, #22]
 8001048:	e01a      	b.n	8001080 <ILI9488_printText+0x68>
	{
		drawChar(x+(offset*i), y, text[i],color,bg,size);
 800104a:	8abb      	ldrh	r3, [r7, #20]
 800104c:	8afa      	ldrh	r2, [r7, #22]
 800104e:	fb12 f303 	smulbb	r3, r2, r3
 8001052:	b29a      	uxth	r2, r3
 8001054:	897b      	ldrh	r3, [r7, #10]
 8001056:	4413      	add	r3, r2
 8001058:	b29b      	uxth	r3, r3
 800105a:	b218      	sxth	r0, r3
 800105c:	8afb      	ldrh	r3, [r7, #22]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4413      	add	r3, r2
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	88fc      	ldrh	r4, [r7, #6]
 8001066:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800106a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4623      	mov	r3, r4
 8001076:	f7ff fcdb 	bl	8000a30 <drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800107a:	8afb      	ldrh	r3, [r7, #22]
 800107c:	3301      	adds	r3, #1
 800107e:	82fb      	strh	r3, [r7, #22]
 8001080:	8afb      	ldrh	r3, [r7, #22]
 8001082:	2b27      	cmp	r3, #39	@ 0x27
 8001084:	d805      	bhi.n	8001092 <ILI9488_printText+0x7a>
 8001086:	8afb      	ldrh	r3, [r7, #22]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1db      	bne.n	800104a <ILI9488_printText+0x32>
	}
}
 8001092:	bf00      	nop
 8001094:	371c      	adds	r7, #28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd90      	pop	{r4, r7, pc}
	...

0800109c <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	0adb      	lsrs	r3, r3, #11
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	115b      	asrs	r3, r3, #5
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010b8:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	4613      	mov	r3, r2
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	1a9b      	subs	r3, r3, r2
 80010cc:	4a17      	ldr	r2, [pc, #92]	@ (800112c <write16BitColor+0x90>)
 80010ce:	fb82 1203 	smull	r1, r2, r2, r3
 80010d2:	441a      	add	r2, r3
 80010d4:	1112      	asrs	r2, r2, #4
 80010d6:	17db      	asrs	r3, r3, #31
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 80010dc:	7bba      	ldrb	r2, [r7, #14]
 80010de:	4613      	mov	r3, r2
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <write16BitColor+0x94>)
 80010e6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ea:	441a      	add	r2, r3
 80010ec:	1152      	asrs	r2, r2, #5
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 80010f4:	7b7a      	ldrb	r2, [r7, #13]
 80010f6:	4613      	mov	r3, r2
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <write16BitColor+0x90>)
 80010fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001102:	441a      	add	r2, r3
 8001104:	1112      	asrs	r2, r2, #4
 8001106:	17db      	asrs	r3, r3, #31
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	723b      	strb	r3, [r7, #8]
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	727b      	strb	r3, [r7, #9]
 8001114:	7b7b      	ldrb	r3, [r7, #13]
 8001116:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2103      	movs	r1, #3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f8c2 	bl	80002a8 <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	84210843 	.word	0x84210843
 8001130:	82082083 	.word	0x82082083

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08e      	sub	sp, #56	@ 0x38
 8001138:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f000 feac 	bl	8001e96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 fb7f 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f000 fc4b 	bl	80019dc <MX_GPIO_Init>
  MX_SPI2_Init();
 8001146:	f000 fbcd 	bl	80018e4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800114a:	f000 fc09 	bl	8001960 <MX_SPI3_Init>
				ILI9488_SendData(0x07FF<<3);//BLUE
			}
		}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET); //LCD CHIP SELECT
*/
  ILI9488_Init();
 800114e:	f7ff f8e1 	bl	8000314 <ILI9488_Init>
HAL_Delay(250);
 8001152:	20fa      	movs	r0, #250	@ 0xfa
 8001154:	f000 ff14 	bl	8001f80 <HAL_Delay>
setRotation(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fc17 	bl	800098c <setRotation>
fillScreen(ILI9488_WHITE);
 800115e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001162:	f7ff fab5 	bl	80006d0 <fillScreen>

   uint16_t touchX = 0, touchY = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800116a:	2300      	movs	r3, #0
 800116c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   //the keys:

   fillRect(100, 30,75,75, ILI9488_RED);
 800116e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	234b      	movs	r3, #75	@ 0x4b
 8001176:	224b      	movs	r2, #75	@ 0x4b
 8001178:	211e      	movs	r1, #30
 800117a:	2064      	movs	r0, #100	@ 0x64
 800117c:	f7ff fac2 	bl	8000704 <fillRect>
   drawCharTest(130, 55, '1', ILI9488_WHITE,ILI9488_RED, 3);
 8001180:	2303      	movs	r3, #3
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800118e:	2231      	movs	r2, #49	@ 0x31
 8001190:	2137      	movs	r1, #55	@ 0x37
 8001192:	2082      	movs	r0, #130	@ 0x82
 8001194:	f7ff fdba 	bl	8000d0c <drawCharTest>
   fillRect(200, 30,75,75, ILI9488_RED);
 8001198:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	234b      	movs	r3, #75	@ 0x4b
 80011a0:	224b      	movs	r2, #75	@ 0x4b
 80011a2:	211e      	movs	r1, #30
 80011a4:	20c8      	movs	r0, #200	@ 0xc8
 80011a6:	f7ff faad 	bl	8000704 <fillRect>
   drawCharTest(230, 55, '2', ILI9488_WHITE,ILI9488_RED, 3);
 80011aa:	2303      	movs	r3, #3
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011b8:	2232      	movs	r2, #50	@ 0x32
 80011ba:	2137      	movs	r1, #55	@ 0x37
 80011bc:	20e6      	movs	r0, #230	@ 0xe6
 80011be:	f7ff fda5 	bl	8000d0c <drawCharTest>
   fillRect(300, 30,75,75, ILI9488_RED);
 80011c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	234b      	movs	r3, #75	@ 0x4b
 80011ca:	224b      	movs	r2, #75	@ 0x4b
 80011cc:	211e      	movs	r1, #30
 80011ce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011d2:	f7ff fa97 	bl	8000704 <fillRect>
   drawCharTest(319, 55, '3', ILI9488_WHITE,ILI9488_RED, 3);
 80011d6:	2303      	movs	r3, #3
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011e4:	2233      	movs	r2, #51	@ 0x33
 80011e6:	2137      	movs	r1, #55	@ 0x37
 80011e8:	f240 103f 	movw	r0, #319	@ 0x13f
 80011ec:	f7ff fd8e 	bl	8000d0c <drawCharTest>
   fillRect(100, 130,75,75, ILI9488_RED);
 80011f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	234b      	movs	r3, #75	@ 0x4b
 80011f8:	224b      	movs	r2, #75	@ 0x4b
 80011fa:	2182      	movs	r1, #130	@ 0x82
 80011fc:	2064      	movs	r0, #100	@ 0x64
 80011fe:	f7ff fa81 	bl	8000704 <fillRect>
   drawCharTest(130, 150, '4', ILI9488_WHITE,ILI9488_RED, 3);
 8001202:	2303      	movs	r3, #3
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001210:	2234      	movs	r2, #52	@ 0x34
 8001212:	2196      	movs	r1, #150	@ 0x96
 8001214:	2082      	movs	r0, #130	@ 0x82
 8001216:	f7ff fd79 	bl	8000d0c <drawCharTest>
   fillRect(200, 130,75,75, ILI9488_RED);
 800121a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	234b      	movs	r3, #75	@ 0x4b
 8001222:	224b      	movs	r2, #75	@ 0x4b
 8001224:	2182      	movs	r1, #130	@ 0x82
 8001226:	20c8      	movs	r0, #200	@ 0xc8
 8001228:	f7ff fa6c 	bl	8000704 <fillRect>
   drawCharTest(230, 150, '5', ILI9488_WHITE,ILI9488_RED, 3);
 800122c:	2303      	movs	r3, #3
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800123a:	2235      	movs	r2, #53	@ 0x35
 800123c:	2196      	movs	r1, #150	@ 0x96
 800123e:	20e6      	movs	r0, #230	@ 0xe6
 8001240:	f7ff fd64 	bl	8000d0c <drawCharTest>
   fillRect(300, 130,75,75, ILI9488_RED);
 8001244:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	234b      	movs	r3, #75	@ 0x4b
 800124c:	224b      	movs	r2, #75	@ 0x4b
 800124e:	2182      	movs	r1, #130	@ 0x82
 8001250:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001254:	f7ff fa56 	bl	8000704 <fillRect>
   drawCharTest(319, 150, '6', ILI9488_WHITE,ILI9488_RED, 3);
 8001258:	2303      	movs	r3, #3
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001266:	2236      	movs	r2, #54	@ 0x36
 8001268:	2196      	movs	r1, #150	@ 0x96
 800126a:	f240 103f 	movw	r0, #319	@ 0x13f
 800126e:	f7ff fd4d 	bl	8000d0c <drawCharTest>
   fillRect(100, 230,75,75, ILI9488_RED);
 8001272:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	234b      	movs	r3, #75	@ 0x4b
 800127a:	224b      	movs	r2, #75	@ 0x4b
 800127c:	21e6      	movs	r1, #230	@ 0xe6
 800127e:	2064      	movs	r0, #100	@ 0x64
 8001280:	f7ff fa40 	bl	8000704 <fillRect>
   drawCharTest(130, 250, '7', ILI9488_WHITE,ILI9488_RED, 3);
 8001284:	2303      	movs	r3, #3
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001292:	2237      	movs	r2, #55	@ 0x37
 8001294:	21fa      	movs	r1, #250	@ 0xfa
 8001296:	2082      	movs	r0, #130	@ 0x82
 8001298:	f7ff fd38 	bl	8000d0c <drawCharTest>
   fillRect(200, 230,75,75, ILI9488_RED);
 800129c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	234b      	movs	r3, #75	@ 0x4b
 80012a4:	224b      	movs	r2, #75	@ 0x4b
 80012a6:	21e6      	movs	r1, #230	@ 0xe6
 80012a8:	20c8      	movs	r0, #200	@ 0xc8
 80012aa:	f7ff fa2b 	bl	8000704 <fillRect>
   drawCharTest(230, 250, '8', ILI9488_WHITE,ILI9488_RED, 3);
 80012ae:	2303      	movs	r3, #3
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012bc:	2238      	movs	r2, #56	@ 0x38
 80012be:	21fa      	movs	r1, #250	@ 0xfa
 80012c0:	20e6      	movs	r0, #230	@ 0xe6
 80012c2:	f7ff fd23 	bl	8000d0c <drawCharTest>
   fillRect(300, 230,75,75, ILI9488_RED);
 80012c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	234b      	movs	r3, #75	@ 0x4b
 80012ce:	224b      	movs	r2, #75	@ 0x4b
 80012d0:	21e6      	movs	r1, #230	@ 0xe6
 80012d2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012d6:	f7ff fa15 	bl	8000704 <fillRect>
   drawCharTest(319, 250, '9', ILI9488_WHITE,ILI9488_RED, 3);
 80012da:	2303      	movs	r3, #3
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012e8:	2239      	movs	r2, #57	@ 0x39
 80012ea:	21fa      	movs	r1, #250	@ 0xfa
 80012ec:	f240 103f 	movw	r0, #319	@ 0x13f
 80012f0:	f7ff fd0c 	bl	8000d0c <drawCharTest>
   //drawChar(135, 61, '1', ILI9488_BLACK,ILI9488_RED, 1);


   uint16_t count = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   char entered[6] = "     ";
 80012f8:	4a31      	ldr	r2, [pc, #196]	@ (80013c0 <main+0x28c>)
 80012fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001302:	6018      	str	r0, [r3, #0]
 8001304:	3304      	adds	r3, #4
 8001306:	8019      	strh	r1, [r3, #0]
   char passcode[6] = "12345";
 8001308:	4a2e      	ldr	r2, [pc, #184]	@ (80013c4 <main+0x290>)
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001312:	6018      	str	r0, [r3, #0]
 8001314:	3304      	adds	r3, #4
 8001316:	8019      	strh	r1, [r3, #0]
  while (1)
  {



	  	  touchX = getX();
 8001318:	f000 fd80 	bl	8001e1c <getX>
 800131c:	4603      	mov	r3, r0
 800131e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	  	  touchY = getY();
 8001320:	f000 fd86 	bl	8001e30 <getY>
 8001324:	4603      	mov	r3, r0
 8001326:	857b      	strh	r3, [r7, #42]	@ 0x2a

	  	  ILI9488_printText(entered, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 8001328:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800132c:	2301      	movs	r3, #1
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	220a      	movs	r2, #10
 800133a:	210a      	movs	r1, #10
 800133c:	f7ff fe6c 	bl	8001018 <ILI9488_printText>
			75, 67
			97, 55
			97, 67
	  	   */

	  	  if(count == 5){
 8001340:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001342:	2b05      	cmp	r3, #5
 8001344:	d144      	bne.n	80013d0 <main+0x29c>
	  		  if (!strcmp(entered, passcode)){
 8001346:	f107 021c 	add.w	r2, r7, #28
 800134a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7fe ff53 	bl	80001fc <strcmp>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d119      	bne.n	8001390 <main+0x25c>
	  			  char success_msg [10] = "Welcome";
 800135c:	4a1a      	ldr	r2, [pc, #104]	@ (80013c8 <main+0x294>)
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001366:	e883 0003 	stmia.w	r3, {r0, r1}
 800136a:	2300      	movs	r3, #0
 800136c:	833b      	strh	r3, [r7, #24]
	  			  fillScreen(ILI9488_WHITE);
 800136e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001372:	f7ff f9ad 	bl	80006d0 <fillScreen>
	  			  ILI9488_printText(success_msg, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 2);
 8001376:	f107 0010 	add.w	r0, r7, #16
 800137a:	2302      	movs	r3, #2
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	220a      	movs	r2, #10
 8001388:	210a      	movs	r1, #10
 800138a:	f7ff fe45 	bl	8001018 <ILI9488_printText>
	  		  else {
	  			char not_success_msg [10] = "Invalid";
	  			  fillScreen(ILI9488_WHITE);
	  				  			  ILI9488_printText(not_success_msg, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 2);
	  		  }
	  		  break;
 800138e:	e252      	b.n	8001836 <main+0x702>
	  			char not_success_msg [10] = "Invalid";
 8001390:	4a0e      	ldr	r2, [pc, #56]	@ (80013cc <main+0x298>)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001398:	e883 0003 	stmia.w	r3, {r0, r1}
 800139c:	2300      	movs	r3, #0
 800139e:	81bb      	strh	r3, [r7, #12]
	  			  fillScreen(ILI9488_WHITE);
 80013a0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013a4:	f7ff f994 	bl	80006d0 <fillScreen>
	  				  			  ILI9488_printText(not_success_msg, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 2);
 80013a8:	1d38      	adds	r0, r7, #4
 80013aa:	2302      	movs	r3, #2
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2300      	movs	r3, #0
 80013b6:	220a      	movs	r2, #10
 80013b8:	210a      	movs	r1, #10
 80013ba:	f7ff fe2d 	bl	8001018 <ILI9488_printText>
	  		  break;
 80013be:	e23a      	b.n	8001836 <main+0x702>
 80013c0:	08003f5c 	.word	0x08003f5c
 80013c4:	08003f64 	.word	0x08003f64
 80013c8:	08003f6c 	.word	0x08003f6c
 80013cc:	08003f78 	.word	0x08003f78
	  	  }

	  	  if(touchX >= 75 && touchX < 97 && touchY >= 52 && touchY < 67){
 80013d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80013d2:	2b4a      	cmp	r3, #74	@ 0x4a
 80013d4:	d936      	bls.n	8001444 <main+0x310>
 80013d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80013d8:	2b60      	cmp	r3, #96	@ 0x60
 80013da:	d833      	bhi.n	8001444 <main+0x310>
 80013dc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80013de:	2b33      	cmp	r3, #51	@ 0x33
 80013e0:	d930      	bls.n	8001444 <main+0x310>
 80013e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80013e4:	2b42      	cmp	r3, #66	@ 0x42
 80013e6:	d82d      	bhi.n	8001444 <main+0x310>

	  		fillRect(100, 30,75,75, ILI9488_GREEN);
 80013e8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	234b      	movs	r3, #75	@ 0x4b
 80013f0:	224b      	movs	r2, #75	@ 0x4b
 80013f2:	211e      	movs	r1, #30
 80013f4:	2064      	movs	r0, #100	@ 0x64
 80013f6:	f7ff f985 	bl	8000704 <fillRect>
	  		HAL_Delay(250);
 80013fa:	20fa      	movs	r0, #250	@ 0xfa
 80013fc:	f000 fdc0 	bl	8001f80 <HAL_Delay>
	  		entered[count] = '1';
 8001400:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001402:	3330      	adds	r3, #48	@ 0x30
 8001404:	443b      	add	r3, r7
 8001406:	2231      	movs	r2, #49	@ 0x31
 8001408:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  		count++;
 800140c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800140e:	3301      	adds	r3, #1
 8001410:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	  	   fillRect(100, 30,75,75, ILI9488_RED);
 8001412:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	234b      	movs	r3, #75	@ 0x4b
 800141a:	224b      	movs	r2, #75	@ 0x4b
 800141c:	211e      	movs	r1, #30
 800141e:	2064      	movs	r0, #100	@ 0x64
 8001420:	f7ff f970 	bl	8000704 <fillRect>
	  	   drawCharTest(130, 55, '1', ILI9488_WHITE,ILI9488_RED, 3);
 8001424:	2303      	movs	r3, #3
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001432:	2231      	movs	r2, #49	@ 0x31
 8001434:	2137      	movs	r1, #55	@ 0x37
 8001436:	2082      	movs	r0, #130	@ 0x82
 8001438:	f7ff fc68 	bl	8000d0c <drawCharTest>

	  		if(count > 9)
 800143c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800143e:	2b09      	cmp	r3, #9
 8001440:	f200 81e8 	bhi.w	8001814 <main+0x6e0>
			97, 52
			287, 52
			97, 67
			287, 67
	  	   */
	  	  if(touchX >= 100 && touchX < 287 && touchY >= 52 && touchY < 67){
 8001444:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001446:	2b63      	cmp	r3, #99	@ 0x63
 8001448:	d937      	bls.n	80014ba <main+0x386>
 800144a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800144c:	f5b3 7f8f 	cmp.w	r3, #286	@ 0x11e
 8001450:	d833      	bhi.n	80014ba <main+0x386>
 8001452:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001454:	2b33      	cmp	r3, #51	@ 0x33
 8001456:	d930      	bls.n	80014ba <main+0x386>
 8001458:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800145a:	2b42      	cmp	r3, #66	@ 0x42
 800145c:	d82d      	bhi.n	80014ba <main+0x386>

	  		fillRect(200, 30,75,75, ILI9488_GREEN);
 800145e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	234b      	movs	r3, #75	@ 0x4b
 8001466:	224b      	movs	r2, #75	@ 0x4b
 8001468:	211e      	movs	r1, #30
 800146a:	20c8      	movs	r0, #200	@ 0xc8
 800146c:	f7ff f94a 	bl	8000704 <fillRect>
	  		HAL_Delay(250);
 8001470:	20fa      	movs	r0, #250	@ 0xfa
 8001472:	f000 fd85 	bl	8001f80 <HAL_Delay>
	  		entered[count] = '2';
 8001476:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001478:	3330      	adds	r3, #48	@ 0x30
 800147a:	443b      	add	r3, r7
 800147c:	2232      	movs	r2, #50	@ 0x32
 800147e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  		count++;
 8001482:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001484:	3301      	adds	r3, #1
 8001486:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	  		fillRect(200, 30,75,75, ILI9488_RED);
 8001488:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	234b      	movs	r3, #75	@ 0x4b
 8001490:	224b      	movs	r2, #75	@ 0x4b
 8001492:	211e      	movs	r1, #30
 8001494:	20c8      	movs	r0, #200	@ 0xc8
 8001496:	f7ff f935 	bl	8000704 <fillRect>
	  		   drawCharTest(230, 55, '2', ILI9488_WHITE,ILI9488_RED, 3);
 800149a:	2303      	movs	r3, #3
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014a8:	2232      	movs	r2, #50	@ 0x32
 80014aa:	2137      	movs	r1, #55	@ 0x37
 80014ac:	20e6      	movs	r0, #230	@ 0xe6
 80014ae:	f7ff fc2d 	bl	8000d0c <drawCharTest>

	  		if(count > 9)
 80014b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	f200 81af 	bhi.w	8001818 <main+0x6e4>
	  	  /*3rd box:
			299, 52
			390, 52
			299, 67
			390, 167*/
	  	if(touchX >= 299 && touchX < 372 && touchY >= 52 && touchY < 160){
 80014ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80014bc:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 80014c0:	d93a      	bls.n	8001538 <main+0x404>
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80014c4:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 80014c8:	d236      	bcs.n	8001538 <main+0x404>
 80014ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80014cc:	2b33      	cmp	r3, #51	@ 0x33
 80014ce:	d933      	bls.n	8001538 <main+0x404>
 80014d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80014d2:	2b9f      	cmp	r3, #159	@ 0x9f
 80014d4:	d830      	bhi.n	8001538 <main+0x404>
	  		fillRect(300, 30,75,75, ILI9488_GREEN);
 80014d6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	234b      	movs	r3, #75	@ 0x4b
 80014de:	224b      	movs	r2, #75	@ 0x4b
 80014e0:	211e      	movs	r1, #30
 80014e2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014e6:	f7ff f90d 	bl	8000704 <fillRect>
	  		HAL_Delay(250);
 80014ea:	20fa      	movs	r0, #250	@ 0xfa
 80014ec:	f000 fd48 	bl	8001f80 <HAL_Delay>
	  		entered[count] = '3';
 80014f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014f2:	3330      	adds	r3, #48	@ 0x30
 80014f4:	443b      	add	r3, r7
 80014f6:	2233      	movs	r2, #51	@ 0x33
 80014f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  		count++;
 80014fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014fe:	3301      	adds	r3, #1
 8001500:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	  	   fillRect(300, 30,75,75, ILI9488_RED);
 8001502:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	234b      	movs	r3, #75	@ 0x4b
 800150a:	224b      	movs	r2, #75	@ 0x4b
 800150c:	211e      	movs	r1, #30
 800150e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001512:	f7ff f8f7 	bl	8000704 <fillRect>
	  	   drawCharTest(319, 55, '3', ILI9488_WHITE,ILI9488_RED, 3);
 8001516:	2303      	movs	r3, #3
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001524:	2233      	movs	r2, #51	@ 0x33
 8001526:	2137      	movs	r1, #55	@ 0x37
 8001528:	f240 103f 	movw	r0, #319	@ 0x13f
 800152c:	f7ff fbee 	bl	8000d0c <drawCharTest>
	  		if(count > 9)
 8001530:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001532:	2b09      	cmp	r3, #9
 8001534:	f200 8172 	bhi.w	800181c <main+0x6e8>
	  	 * 97, 163
	  	 * 97, 219
	  	 *
	  	 *
	  	 */
	  	if(touchX >= 75 && touchX < 97 && touchY >= 163 && touchY < 219){
 8001538:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800153a:	2b4a      	cmp	r3, #74	@ 0x4a
 800153c:	d936      	bls.n	80015ac <main+0x478>
 800153e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001540:	2b60      	cmp	r3, #96	@ 0x60
 8001542:	d833      	bhi.n	80015ac <main+0x478>
 8001544:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001546:	2ba2      	cmp	r3, #162	@ 0xa2
 8001548:	d930      	bls.n	80015ac <main+0x478>
 800154a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800154c:	2bda      	cmp	r3, #218	@ 0xda
 800154e:	d82d      	bhi.n	80015ac <main+0x478>
	  		fillRect(100, 130,75,75, ILI9488_GREEN);
 8001550:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	234b      	movs	r3, #75	@ 0x4b
 8001558:	224b      	movs	r2, #75	@ 0x4b
 800155a:	2182      	movs	r1, #130	@ 0x82
 800155c:	2064      	movs	r0, #100	@ 0x64
 800155e:	f7ff f8d1 	bl	8000704 <fillRect>
	  		HAL_Delay(250);
 8001562:	20fa      	movs	r0, #250	@ 0xfa
 8001564:	f000 fd0c 	bl	8001f80 <HAL_Delay>
	  		entered[count] = '4';
 8001568:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800156a:	3330      	adds	r3, #48	@ 0x30
 800156c:	443b      	add	r3, r7
 800156e:	2234      	movs	r2, #52	@ 0x34
 8001570:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  			  		count++;
 8001574:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001576:	3301      	adds	r3, #1
 8001578:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	  			  	   fillRect(100, 130,75,75, ILI9488_RED);
 800157a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	234b      	movs	r3, #75	@ 0x4b
 8001582:	224b      	movs	r2, #75	@ 0x4b
 8001584:	2182      	movs	r1, #130	@ 0x82
 8001586:	2064      	movs	r0, #100	@ 0x64
 8001588:	f7ff f8bc 	bl	8000704 <fillRect>
	  			  	   drawCharTest(130, 150, '4', ILI9488_WHITE,ILI9488_RED, 3);
 800158c:	2303      	movs	r3, #3
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800159a:	2234      	movs	r2, #52	@ 0x34
 800159c:	2196      	movs	r1, #150	@ 0x96
 800159e:	2082      	movs	r0, #130	@ 0x82
 80015a0:	f7ff fbb4 	bl	8000d0c <drawCharTest>
	  		if(count > 9)
 80015a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015a6:	2b09      	cmp	r3, #9
 80015a8:	f200 813a 	bhi.w	8001820 <main+0x6ec>
	  		  	 * 97, 165
	  		  	 * 262, 165
	  		  	 * 97, 207
	  		  	 * 262, 207
	  		  	 */
	  		  	if(touchX >= 100 && touchX < 262 && touchY >= 165 && touchY < 207){
 80015ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80015ae:	2b63      	cmp	r3, #99	@ 0x63
 80015b0:	d937      	bls.n	8001622 <main+0x4ee>
 80015b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80015b4:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80015b8:	d233      	bcs.n	8001622 <main+0x4ee>
 80015ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80015bc:	2ba4      	cmp	r3, #164	@ 0xa4
 80015be:	d930      	bls.n	8001622 <main+0x4ee>
 80015c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80015c2:	2bce      	cmp	r3, #206	@ 0xce
 80015c4:	d82d      	bhi.n	8001622 <main+0x4ee>
	  		  		fillRect(200, 130,75,75, ILI9488_GREEN);
 80015c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	234b      	movs	r3, #75	@ 0x4b
 80015ce:	224b      	movs	r2, #75	@ 0x4b
 80015d0:	2182      	movs	r1, #130	@ 0x82
 80015d2:	20c8      	movs	r0, #200	@ 0xc8
 80015d4:	f7ff f896 	bl	8000704 <fillRect>
	  		  	HAL_Delay(250);
 80015d8:	20fa      	movs	r0, #250	@ 0xfa
 80015da:	f000 fcd1 	bl	8001f80 <HAL_Delay>
	  		  		entered[count] = '5';
 80015de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015e0:	3330      	adds	r3, #48	@ 0x30
 80015e2:	443b      	add	r3, r7
 80015e4:	2235      	movs	r2, #53	@ 0x35
 80015e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  		  		  			  		count++;
 80015ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015ec:	3301      	adds	r3, #1
 80015ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	  		  		  			   fillRect(200, 130,75,75, ILI9488_RED);
 80015f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	234b      	movs	r3, #75	@ 0x4b
 80015f8:	224b      	movs	r2, #75	@ 0x4b
 80015fa:	2182      	movs	r1, #130	@ 0x82
 80015fc:	20c8      	movs	r0, #200	@ 0xc8
 80015fe:	f7ff f881 	bl	8000704 <fillRect>
	  		  		  			   drawCharTest(230, 150, '5', ILI9488_WHITE,ILI9488_RED, 3);
 8001602:	2303      	movs	r3, #3
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001610:	2235      	movs	r2, #53	@ 0x35
 8001612:	2196      	movs	r1, #150	@ 0x96
 8001614:	20e6      	movs	r0, #230	@ 0xe6
 8001616:	f7ff fb79 	bl	8000d0c <drawCharTest>
	  		  		  			  if(count > 9)
 800161a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800161c:	2b09      	cmp	r3, #9
 800161e:	f200 8101 	bhi.w	8001824 <main+0x6f0>
	  		  	  		  	 * 294, 166
	  		  	  		  	 * 381, 167
	  		  	  		  	 * 299, 207
	  		  	  		  	 * 372, 207
	  		  	  		  	 */
	  		  if(touchX >= 299 && touchX < 372 && touchY >= 167 && touchY < 207){
 8001622:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001624:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8001628:	d93a      	bls.n	80016a0 <main+0x56c>
 800162a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800162c:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 8001630:	d236      	bcs.n	80016a0 <main+0x56c>
 8001632:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001634:	2ba6      	cmp	r3, #166	@ 0xa6
 8001636:	d933      	bls.n	80016a0 <main+0x56c>
 8001638:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800163a:	2bce      	cmp	r3, #206	@ 0xce
 800163c:	d830      	bhi.n	80016a0 <main+0x56c>
	  			fillRect(300, 130,75,75, ILI9488_GREEN);
 800163e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	234b      	movs	r3, #75	@ 0x4b
 8001646:	224b      	movs	r2, #75	@ 0x4b
 8001648:	2182      	movs	r1, #130	@ 0x82
 800164a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800164e:	f7ff f859 	bl	8000704 <fillRect>
	  			HAL_Delay(250);
 8001652:	20fa      	movs	r0, #250	@ 0xfa
 8001654:	f000 fc94 	bl	8001f80 <HAL_Delay>
	  			entered[count] = '6';
 8001658:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800165a:	3330      	adds	r3, #48	@ 0x30
 800165c:	443b      	add	r3, r7
 800165e:	2236      	movs	r2, #54	@ 0x36
 8001660:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  				  			  		count++;
 8001664:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001666:	3301      	adds	r3, #1
 8001668:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	  				  			    fillRect(300, 130,75,75, ILI9488_RED);
 800166a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	234b      	movs	r3, #75	@ 0x4b
 8001672:	224b      	movs	r2, #75	@ 0x4b
 8001674:	2182      	movs	r1, #130	@ 0x82
 8001676:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800167a:	f7ff f843 	bl	8000704 <fillRect>
	  				  			    drawCharTest(319, 150, '6', ILI9488_WHITE,ILI9488_RED, 3);
 800167e:	2303      	movs	r3, #3
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800168c:	2236      	movs	r2, #54	@ 0x36
 800168e:	2196      	movs	r1, #150	@ 0x96
 8001690:	f240 103f 	movw	r0, #319	@ 0x13f
 8001694:	f7ff fb3a 	bl	8000d0c <drawCharTest>
	  				  			  	if(count > 9)
 8001698:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800169a:	2b09      	cmp	r3, #9
 800169c:	f200 80c4 	bhi.w	8001828 <main+0x6f4>
	  			  		  	  		  	 * 75, 242
	  			  		  	  		  	 * 97, 242
	  			  		  	  		  	 * 75, 309
	  			  		  	  		  	 * 97, 309
	  			  		  	  		  	 */
	  		if(touchX >= 75 && touchX < 97 && touchY >= 242 && touchY < 309){
 80016a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80016a2:	2b4a      	cmp	r3, #74	@ 0x4a
 80016a4:	d937      	bls.n	8001716 <main+0x5e2>
 80016a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80016a8:	2b60      	cmp	r3, #96	@ 0x60
 80016aa:	d834      	bhi.n	8001716 <main+0x5e2>
 80016ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80016ae:	2bf1      	cmp	r3, #241	@ 0xf1
 80016b0:	d931      	bls.n	8001716 <main+0x5e2>
 80016b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80016b4:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80016b8:	d82d      	bhi.n	8001716 <main+0x5e2>
	  			fillRect(100, 230,75,75, ILI9488_GREEN);
 80016ba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	234b      	movs	r3, #75	@ 0x4b
 80016c2:	224b      	movs	r2, #75	@ 0x4b
 80016c4:	21e6      	movs	r1, #230	@ 0xe6
 80016c6:	2064      	movs	r0, #100	@ 0x64
 80016c8:	f7ff f81c 	bl	8000704 <fillRect>
	  			HAL_Delay(250);
 80016cc:	20fa      	movs	r0, #250	@ 0xfa
 80016ce:	f000 fc57 	bl	8001f80 <HAL_Delay>
	  			entered[count] = '7';
 80016d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80016d4:	3330      	adds	r3, #48	@ 0x30
 80016d6:	443b      	add	r3, r7
 80016d8:	2237      	movs	r2, #55	@ 0x37
 80016da:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  				  			  		count++;
 80016de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80016e0:	3301      	adds	r3, #1
 80016e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	  				  			    fillRect(100, 230,75,75, ILI9488_RED);
 80016e4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	234b      	movs	r3, #75	@ 0x4b
 80016ec:	224b      	movs	r2, #75	@ 0x4b
 80016ee:	21e6      	movs	r1, #230	@ 0xe6
 80016f0:	2064      	movs	r0, #100	@ 0x64
 80016f2:	f7ff f807 	bl	8000704 <fillRect>
	  				  			    drawCharTest(130, 250, '7', ILI9488_WHITE,ILI9488_RED, 3);
 80016f6:	2303      	movs	r3, #3
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001704:	2237      	movs	r2, #55	@ 0x37
 8001706:	21fa      	movs	r1, #250	@ 0xfa
 8001708:	2082      	movs	r0, #130	@ 0x82
 800170a:	f7ff faff 	bl	8000d0c <drawCharTest>
	  				  			  	if(count > 9)
 800170e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001710:	2b09      	cmp	r3, #9
 8001712:	f200 808b 	bhi.w	800182c <main+0x6f8>
	  			  			  		  	  		  	 * 97, 242
	  			  			  		  	  		  	 * 262, 242
	  			  			  		  	  		  	 * 97, 309
	  			  			  		  	  		  	 * 287, 306
	  			  			  		  	  		  	 */
	  		if(touchX >= 100 && touchX < 280 && touchY >= 242 && touchY < 309){
 8001716:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001718:	2b63      	cmp	r3, #99	@ 0x63
 800171a:	d937      	bls.n	800178c <main+0x658>
 800171c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800171e:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001722:	d233      	bcs.n	800178c <main+0x658>
 8001724:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001726:	2bf1      	cmp	r3, #241	@ 0xf1
 8001728:	d930      	bls.n	800178c <main+0x658>
 800172a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800172c:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8001730:	d82c      	bhi.n	800178c <main+0x658>
	  			fillRect(200, 230,75,75, ILI9488_GREEN);
 8001732:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	234b      	movs	r3, #75	@ 0x4b
 800173a:	224b      	movs	r2, #75	@ 0x4b
 800173c:	21e6      	movs	r1, #230	@ 0xe6
 800173e:	20c8      	movs	r0, #200	@ 0xc8
 8001740:	f7fe ffe0 	bl	8000704 <fillRect>
	  			HAL_Delay(250);
 8001744:	20fa      	movs	r0, #250	@ 0xfa
 8001746:	f000 fc1b 	bl	8001f80 <HAL_Delay>
	  			entered[count] = '8';
 800174a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800174c:	3330      	adds	r3, #48	@ 0x30
 800174e:	443b      	add	r3, r7
 8001750:	2238      	movs	r2, #56	@ 0x38
 8001752:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  				  			  		count++;
 8001756:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001758:	3301      	adds	r3, #1
 800175a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	  				  			    fillRect(200, 230,75,75, ILI9488_RED);
 800175c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	234b      	movs	r3, #75	@ 0x4b
 8001764:	224b      	movs	r2, #75	@ 0x4b
 8001766:	21e6      	movs	r1, #230	@ 0xe6
 8001768:	20c8      	movs	r0, #200	@ 0xc8
 800176a:	f7fe ffcb 	bl	8000704 <fillRect>
	  				  			    drawCharTest(230, 250, '8', ILI9488_WHITE,ILI9488_RED, 3);
 800176e:	2303      	movs	r3, #3
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800177c:	2238      	movs	r2, #56	@ 0x38
 800177e:	21fa      	movs	r1, #250	@ 0xfa
 8001780:	20e6      	movs	r0, #230	@ 0xe6
 8001782:	f7ff fac3 	bl	8000d0c <drawCharTest>
	  				  			  	if(count > 9)
 8001786:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001788:	2b09      	cmp	r3, #9
 800178a:	d851      	bhi.n	8001830 <main+0x6fc>
	  		 * 299, 242
	  		 * 381, 242
	  		 * 299, 309
	  		 * 372, 309
	  		 */
	  		if(touchX >= 299 && touchX < 372 && touchY >= 242 && touchY < 309){
 800178c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800178e:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8001792:	f67f adc1 	bls.w	8001318 <main+0x1e4>
 8001796:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001798:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 800179c:	f4bf adbc 	bcs.w	8001318 <main+0x1e4>
 80017a0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80017a2:	2bf1      	cmp	r3, #241	@ 0xf1
 80017a4:	f67f adb8 	bls.w	8001318 <main+0x1e4>
 80017a8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80017aa:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80017ae:	f63f adb3 	bhi.w	8001318 <main+0x1e4>
	  			fillRect(300, 230,75,75, ILI9488_GREEN);
 80017b2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	234b      	movs	r3, #75	@ 0x4b
 80017ba:	224b      	movs	r2, #75	@ 0x4b
 80017bc:	21e6      	movs	r1, #230	@ 0xe6
 80017be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017c2:	f7fe ff9f 	bl	8000704 <fillRect>
	  			HAL_Delay(250);
 80017c6:	20fa      	movs	r0, #250	@ 0xfa
 80017c8:	f000 fbda 	bl	8001f80 <HAL_Delay>
	  			entered[count] = '9';
 80017cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017ce:	3330      	adds	r3, #48	@ 0x30
 80017d0:	443b      	add	r3, r7
 80017d2:	2239      	movs	r2, #57	@ 0x39
 80017d4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  		   fillRect(300, 230,75,75, ILI9488_RED);
 80017d8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	234b      	movs	r3, #75	@ 0x4b
 80017e0:	224b      	movs	r2, #75	@ 0x4b
 80017e2:	21e6      	movs	r1, #230	@ 0xe6
 80017e4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017e8:	f7fe ff8c 	bl	8000704 <fillRect>
	  		   drawCharTest(319, 250, '9', ILI9488_WHITE,ILI9488_RED, 3);
 80017ec:	2303      	movs	r3, #3
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017fa:	2239      	movs	r2, #57	@ 0x39
 80017fc:	21fa      	movs	r1, #250	@ 0xfa
 80017fe:	f240 103f 	movw	r0, #319	@ 0x13f
 8001802:	f7ff fa83 	bl	8000d0c <drawCharTest>
	  				  			  		count++;
 8001806:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001808:	3301      	adds	r3, #1
 800180a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	  				  			  	if(count > 9)
 800180c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800180e:	2b09      	cmp	r3, #9
 8001810:	d810      	bhi.n	8001834 <main+0x700>
	  	  touchX = getX();
 8001812:	e581      	b.n	8001318 <main+0x1e4>
	  			  			break;
 8001814:	bf00      	nop
 8001816:	e00e      	b.n	8001836 <main+0x702>
	  			  			break;
 8001818:	bf00      	nop
 800181a:	e00c      	b.n	8001836 <main+0x702>
	  			  			break;
 800181c:	bf00      	nop
 800181e:	e00a      	b.n	8001836 <main+0x702>
	  			break;
 8001820:	bf00      	nop
 8001822:	e008      	b.n	8001836 <main+0x702>
	  		  		  			  	  			break;
 8001824:	bf00      	nop
 8001826:	e006      	b.n	8001836 <main+0x702>
	  				  			  		  			break;
 8001828:	bf00      	nop
 800182a:	e004      	b.n	8001836 <main+0x702>
	  				  			  		  			break;
 800182c:	bf00      	nop
 800182e:	e002      	b.n	8001836 <main+0x702>
	  				  			  		  			break;
 8001830:	bf00      	nop
 8001832:	e000      	b.n	8001836 <main+0x702>
	  				  			  		  			break;
 8001834:	bf00      	nop
 8001836:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001838:	4618      	mov	r0, r3
 800183a:	3730      	adds	r7, #48	@ 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b096      	sub	sp, #88	@ 0x58
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2244      	movs	r2, #68	@ 0x44
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fb4c 	bl	8003eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001862:	2000      	movs	r0, #0
 8001864:	f000 fe60 	bl	8002528 <HAL_PWREx_ControlVoltageScaling>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800186e:	f000 f90b 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001872:	2310      	movs	r3, #16
 8001874:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001876:	2301      	movs	r3, #1
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800187e:	2360      	movs	r3, #96	@ 0x60
 8001880:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001882:	2302      	movs	r3, #2
 8001884:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001886:	2301      	movs	r3, #1
 8001888:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800188e:	233c      	movs	r3, #60	@ 0x3c
 8001890:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001892:	2302      	movs	r3, #2
 8001894:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001896:	2302      	movs	r3, #2
 8001898:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800189a:	2302      	movs	r3, #2
 800189c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fee4 	bl	8002670 <HAL_RCC_OscConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018ae:	f000 f8eb 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b2:	230f      	movs	r3, #15
 80018b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b6:	2303      	movs	r3, #3
 80018b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	2105      	movs	r1, #5
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 faea 	bl	8002ea4 <HAL_RCC_ClockConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018d6:	f000 f8d7 	bl	8001a88 <Error_Handler>
  }
}
 80018da:	bf00      	nop
 80018dc:	3758      	adds	r7, #88	@ 0x58
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <MX_SPI2_Init+0x74>)
 80018ea:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <MX_SPI2_Init+0x78>)
 80018ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_SPI2_Init+0x74>)
 80018f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018f6:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <MX_SPI2_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018fc:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <MX_SPI2_Init+0x74>)
 80018fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001902:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <MX_SPI2_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001916:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <MX_SPI2_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <MX_SPI2_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001932:	2207      	movs	r2, #7
 8001934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_SPI2_Init+0x74>)
 800193e:	2208      	movs	r2, #8
 8001940:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001944:	f001 fd34 	bl	80033b0 <HAL_SPI_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800194e:	f000 f89b 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000044 	.word	0x20000044
 800195c:	40003800 	.word	0x40003800

08001960 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <MX_SPI3_Init+0x74>)
 8001966:	4a1c      	ldr	r2, [pc, #112]	@ (80019d8 <MX_SPI3_Init+0x78>)
 8001968:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800196a:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <MX_SPI3_Init+0x74>)
 800196c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001970:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <MX_SPI3_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001978:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <MX_SPI3_Init+0x74>)
 800197a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800197e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <MX_SPI3_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <MX_SPI3_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <MX_SPI3_Init+0x74>)
 800198e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001992:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <MX_SPI3_Init+0x74>)
 8001996:	2218      	movs	r2, #24
 8001998:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <MX_SPI3_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <MX_SPI3_Init+0x74>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <MX_SPI3_Init+0x74>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <MX_SPI3_Init+0x74>)
 80019ae:	2207      	movs	r2, #7
 80019b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <MX_SPI3_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_SPI3_Init+0x74>)
 80019ba:	2208      	movs	r2, #8
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_SPI3_Init+0x74>)
 80019c0:	f001 fcf6 	bl	80033b0 <HAL_SPI_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80019ca:	f000 f85d 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200000a8 	.word	0x200000a8
 80019d8:	40003c00 	.word	0x40003c00

080019dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <MX_GPIO_Init+0xa0>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	4a21      	ldr	r2, [pc, #132]	@ (8001a7c <MX_GPIO_Init+0xa0>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <MX_GPIO_Init+0xa0>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <MX_GPIO_Init+0xa0>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a7c <MX_GPIO_Init+0xa0>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a16:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <MX_GPIO_Init+0xa0>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a28:	4815      	ldr	r0, [pc, #84]	@ (8001a80 <MX_GPIO_Init+0xa4>)
 8001a2a:	f000 fd45 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	21c1      	movs	r1, #193	@ 0xc1
 8001a32:	4814      	ldr	r0, [pc, #80]	@ (8001a84 <MX_GPIO_Init+0xa8>)
 8001a34:	f000 fd40 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480b      	ldr	r0, [pc, #44]	@ (8001a80 <MX_GPIO_Init+0xa4>)
 8001a52:	f000 fb9f 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 8001a56:	23c1      	movs	r3, #193	@ 0xc1
 8001a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_GPIO_Init+0xa8>)
 8001a6e:	f000 fb91 	bl	8002194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	48000400 	.word	0x48000400
 8001a84:	48000c00 	.word	0x48000c00

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <Error_Handler+0x8>

08001a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab6:	4a08      	ldr	r2, [pc, #32]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	@ 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb4 <HAL_SPI_MspInit+0xd8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d128      	bne.n	8001b50 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001afe:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	4a27      	ldr	r2, [pc, #156]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b22:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001b2e:	231a      	movs	r3, #26
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	481c      	ldr	r0, [pc, #112]	@ (8001bbc <HAL_SPI_MspInit+0xe0>)
 8001b4a:	f000 fb23 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b4e:	e02c      	b.n	8001baa <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc0 <HAL_SPI_MspInit+0xe4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d127      	bne.n	8001baa <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b5a:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	4a16      	ldr	r2, [pc, #88]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	4a10      	ldr	r2, [pc, #64]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_SPI_MspInit+0xdc>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b8a:	2338      	movs	r3, #56	@ 0x38
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4807      	ldr	r0, [pc, #28]	@ (8001bc4 <HAL_SPI_MspInit+0xe8>)
 8001ba6:	f000 faf5 	bl	8002194 <HAL_GPIO_Init>
}
 8001baa:	bf00      	nop
 8001bac:	3730      	adds	r7, #48	@ 0x30
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40003800 	.word	0x40003800
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	48000c00 	.word	0x48000c00
 8001bc0:	40003c00 	.word	0x40003c00
 8001bc4:	48000400 	.word	0x48000400

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <NMI_Handler+0x4>

08001bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <MemManage_Handler+0x4>

08001be0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <UsageFault_Handler+0x4>

08001bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1e:	f000 f98f 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <SystemInit+0x20>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <SystemInit+0x20>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <remap>:


extern SPI_HandleTypeDef hspi3;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c56:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c5a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c5e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c62:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c66:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c72:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c76:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c7e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c82:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c86:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c96:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <getRaw>:
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
}

uint16_t getRaw(uint8_t address)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cb8:	481c      	ldr	r0, [pc, #112]	@ (8001d2c <getRaw+0x84>)
 8001cba:	f000 fbfd 	bl	80024b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f000 f95e 	bl	8001f80 <HAL_Delay>
	HAL_SPI_Transmit(&hspi3, &address, 1, 1000);
 8001cc4:	1df9      	adds	r1, r7, #7
 8001cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4818      	ldr	r0, [pc, #96]	@ (8001d30 <getRaw+0x88>)
 8001cce:	f001 fc12 	bl	80034f6 <HAL_SPI_Transmit>
	address = 0x00;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 8001cd6:	f107 020b 	add.w	r2, r7, #11
 8001cda:	1df9      	adds	r1, r7, #7
 8001cdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	4812      	ldr	r0, [pc, #72]	@ (8001d30 <getRaw+0x88>)
 8001ce6:	f001 fd7b 	bl	80037e0 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 8001cf2:	f107 020b 	add.w	r2, r7, #11
 8001cf6:	1df9      	adds	r1, r7, #7
 8001cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	480b      	ldr	r0, [pc, #44]	@ (8001d30 <getRaw+0x88>)
 8001d02:	f001 fd6d 	bl	80037e0 <HAL_SPI_TransmitReceive>
	LSB = data;
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d10:	4806      	ldr	r0, [pc, #24]	@ (8001d2c <getRaw+0x84>)
 8001d12:	f000 fbd1 	bl	80024b8 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	021a      	lsls	r2, r3, #8
 8001d1a:	89bb      	ldrh	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	10db      	asrs	r3, r3, #3
 8001d20:	b29b      	uxth	r3, r3
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	48000400 	.word	0x48000400
 8001d30:	200000a8 	.word	0x200000a8

08001d34 <X>:

inline static uint16_t X(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8001d3a:	20d0      	movs	r0, #208	@ 0xd0
 8001d3c:	f7ff ffb4 	bl	8001ca8 <getRaw>
 8001d40:	4603      	mov	r3, r0
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4a:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8001d98 <X+0x64>
 8001d4e:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8001d9c <X+0x68>
 8001d52:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001da0 <X+0x6c>
 8001d56:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001da4 <X+0x70>
 8001d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5e:	f7ff ff75 	bl	8001c4c <remap>
 8001d62:	eef0 7a40 	vmov.f32	s15, s0
 8001d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d6a:	ee17 3a90 	vmov	r3, s15
 8001d6e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001d76:	3301      	adds	r3, #1
 8001d78:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <X+0x58>
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001d86:	d801      	bhi.n	8001d8c <X+0x58>
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	e000      	b.n	8001d8e <X+0x5a>
	else return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	439f8000 	.word	0x439f8000
 8001d9c:	00000000 	.word	0x00000000
 8001da0:	456d8000 	.word	0x456d8000
 8001da4:	43960000 	.word	0x43960000

08001da8 <Y>:

inline static uint16_t Y(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8001dae:	2090      	movs	r0, #144	@ 0x90
 8001db0:	f7ff ff7a 	bl	8001ca8 <getRaw>
 8001db4:	4603      	mov	r3, r0
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dbe:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8001e0c <Y+0x64>
 8001dc2:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8001e10 <Y+0x68>
 8001dc6:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001e14 <Y+0x6c>
 8001dca:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001e18 <Y+0x70>
 8001dce:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd2:	f7ff ff3b 	bl	8001c4c <remap>
 8001dd6:	eef0 7a40 	vmov.f32	s15, s0
 8001dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dde:	ee17 3a90 	vmov	r3, s15
 8001de2:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 8001dea:	3301      	adds	r3, #1
 8001dec:	80fb      	strh	r3, [r7, #6]
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <Y+0x58>
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 8001dfa:	d801      	bhi.n	8001e00 <Y+0x58>
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	e000      	b.n	8001e02 <Y+0x5a>
	else return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	43ef8000 	.word	0x43ef8000
 8001e10:	00000000 	.word	0x00000000
 8001e14:	456a6000 	.word	0x456a6000
 8001e18:	43c80000 	.word	0x43c80000

08001e1c <getX>:

uint16_t getX(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
 8001e22:	f7ff ffc1 	bl	8001da8 <Y>
 8001e26:	4603      	mov	r3, r0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <getY>:

uint16_t getY(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
 8001e36:	f7ff ff7d 	bl	8001d34 <X>
 8001e3a:	4603      	mov	r3, r0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e48:	f7ff feee 	bl	8001c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e4c:	480c      	ldr	r0, [pc, #48]	@ (8001e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4e:	490d      	ldr	r1, [pc, #52]	@ (8001e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e50:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <LoopForever+0xe>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e64:	4c0a      	ldr	r4, [pc, #40]	@ (8001e90 <LoopForever+0x16>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e72:	f002 f843 	bl	8003efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e76:	f7ff f95d 	bl	8001134 <main>

08001e7a <LoopForever>:

LoopForever:
    b LoopForever
 8001e7a:	e7fe      	b.n	8001e7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e7c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e88:	080044d4 	.word	0x080044d4
  ldr r2, =_sbss
 8001e8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e90:	20000110 	.word	0x20000110

08001e94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC1_IRQHandler>

08001e96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 f943 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f000 f80e 	bl	8001ec8 <HAL_InitTick>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	e001      	b.n	8001ebc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb8:	f7ff fdec 	bl	8001a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ed4:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <HAL_InitTick+0x6c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d023      	beq.n	8001f24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_InitTick+0x70>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_InitTick+0x6c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f941 	bl	800217a <HAL_SYSTICK_Config>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d809      	bhi.n	8001f18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f0c:	f000 f919 	bl	8002142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f10:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <HAL_InitTick+0x74>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e007      	b.n	8001f28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e004      	b.n	8001f28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	e001      	b.n	8001f28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000000c 	.word	0x2000000c
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	20000008 	.word	0x20000008

08001f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_IncTick+0x20>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	2000000c 	.word	0x2000000c
 8001f64:	2000010c 	.word	0x2000010c

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	@ (8001f7c <HAL_GetTick+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	2000010c 	.word	0x2000010c

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff ffee 	bl	8001f68 <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa6:	bf00      	nop
 8001fa8:	f7ff ffde 	bl	8001f68 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000000c 	.word	0x2000000c

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	@ (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	@ (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	@ (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	@ (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	@ 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	@ 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800210c:	f7ff ff8e 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff47 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff5c 	bl	8002010 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff8e 	bl	8002080 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5d 	bl	800202c <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ffb0 	bl	80020e8 <SysTick_Config>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a2:	e166      	b.n	8002472 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8158 	beq.w	800246c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d005      	beq.n	80021d4 <HAL_GPIO_Init+0x40>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d130      	bne.n	8002236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220a:	2201      	movs	r2, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f003 0201 	and.w	r2, r3, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b03      	cmp	r3, #3
 8002240:	d017      	beq.n	8002272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d123      	bne.n	80022c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	220f      	movs	r2, #15
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	6939      	ldr	r1, [r7, #16]
 80022c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0203 	and.w	r2, r3, #3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80b2 	beq.w	800246c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002308:	4b61      	ldr	r3, [pc, #388]	@ (8002490 <HAL_GPIO_Init+0x2fc>)
 800230a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230c:	4a60      	ldr	r2, [pc, #384]	@ (8002490 <HAL_GPIO_Init+0x2fc>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6613      	str	r3, [r2, #96]	@ 0x60
 8002314:	4b5e      	ldr	r3, [pc, #376]	@ (8002490 <HAL_GPIO_Init+0x2fc>)
 8002316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002320:	4a5c      	ldr	r2, [pc, #368]	@ (8002494 <HAL_GPIO_Init+0x300>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800234a:	d02b      	beq.n	80023a4 <HAL_GPIO_Init+0x210>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a52      	ldr	r2, [pc, #328]	@ (8002498 <HAL_GPIO_Init+0x304>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d025      	beq.n	80023a0 <HAL_GPIO_Init+0x20c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a51      	ldr	r2, [pc, #324]	@ (800249c <HAL_GPIO_Init+0x308>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d01f      	beq.n	800239c <HAL_GPIO_Init+0x208>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a50      	ldr	r2, [pc, #320]	@ (80024a0 <HAL_GPIO_Init+0x30c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d019      	beq.n	8002398 <HAL_GPIO_Init+0x204>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a4f      	ldr	r2, [pc, #316]	@ (80024a4 <HAL_GPIO_Init+0x310>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_GPIO_Init+0x200>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a4e      	ldr	r2, [pc, #312]	@ (80024a8 <HAL_GPIO_Init+0x314>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00d      	beq.n	8002390 <HAL_GPIO_Init+0x1fc>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a4d      	ldr	r2, [pc, #308]	@ (80024ac <HAL_GPIO_Init+0x318>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <HAL_GPIO_Init+0x1f8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a4c      	ldr	r2, [pc, #304]	@ (80024b0 <HAL_GPIO_Init+0x31c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_GPIO_Init+0x1f4>
 8002384:	2307      	movs	r3, #7
 8002386:	e00e      	b.n	80023a6 <HAL_GPIO_Init+0x212>
 8002388:	2308      	movs	r3, #8
 800238a:	e00c      	b.n	80023a6 <HAL_GPIO_Init+0x212>
 800238c:	2306      	movs	r3, #6
 800238e:	e00a      	b.n	80023a6 <HAL_GPIO_Init+0x212>
 8002390:	2305      	movs	r3, #5
 8002392:	e008      	b.n	80023a6 <HAL_GPIO_Init+0x212>
 8002394:	2304      	movs	r3, #4
 8002396:	e006      	b.n	80023a6 <HAL_GPIO_Init+0x212>
 8002398:	2303      	movs	r3, #3
 800239a:	e004      	b.n	80023a6 <HAL_GPIO_Init+0x212>
 800239c:	2302      	movs	r3, #2
 800239e:	e002      	b.n	80023a6 <HAL_GPIO_Init+0x212>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <HAL_GPIO_Init+0x212>
 80023a4:	2300      	movs	r3, #0
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	f002 0203 	and.w	r2, r2, #3
 80023ac:	0092      	lsls	r2, r2, #2
 80023ae:	4093      	lsls	r3, r2
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b6:	4937      	ldr	r1, [pc, #220]	@ (8002494 <HAL_GPIO_Init+0x300>)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c4:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_GPIO_Init+0x320>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023e8:	4a32      	ldr	r2, [pc, #200]	@ (80024b4 <HAL_GPIO_Init+0x320>)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023ee:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <HAL_GPIO_Init+0x320>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002412:	4a28      	ldr	r2, [pc, #160]	@ (80024b4 <HAL_GPIO_Init+0x320>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002418:	4b26      	ldr	r3, [pc, #152]	@ (80024b4 <HAL_GPIO_Init+0x320>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800243c:	4a1d      	ldr	r2, [pc, #116]	@ (80024b4 <HAL_GPIO_Init+0x320>)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <HAL_GPIO_Init+0x320>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002466:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <HAL_GPIO_Init+0x320>)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3301      	adds	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	f47f ae91 	bne.w	80021a4 <HAL_GPIO_Init+0x10>
  }
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40021000 	.word	0x40021000
 8002494:	40010000 	.word	0x40010000
 8002498:	48000400 	.word	0x48000400
 800249c:	48000800 	.word	0x48000800
 80024a0:	48000c00 	.word	0x48000c00
 80024a4:	48001000 	.word	0x48001000
 80024a8:	48001400 	.word	0x48001400
 80024ac:	48001800 	.word	0x48001800
 80024b0:	48001c00 	.word	0x48001c00
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <HAL_PWREx_GetVoltageRange+0x3c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024f8:	d102      	bne.n	8002500 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80024fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024fe:	e00b      	b.n	8002518 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250e:	d102      	bne.n	8002516 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002514:	e000      	b.n	8002518 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002516:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40007000 	.word	0x40007000

08002528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d141      	bne.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002536:	4b4b      	ldr	r3, [pc, #300]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800253e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002542:	d131      	bne.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002544:	4b47      	ldr	r3, [pc, #284]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800254a:	4a46      	ldr	r2, [pc, #280]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002550:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002554:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800255c:	4a41      	ldr	r2, [pc, #260]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002562:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002564:	4b40      	ldr	r3, [pc, #256]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2232      	movs	r2, #50	@ 0x32
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	4a3f      	ldr	r2, [pc, #252]	@ (800266c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	0c9b      	lsrs	r3, r3, #18
 8002576:	3301      	adds	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257a:	e002      	b.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3b01      	subs	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002582:	4b38      	ldr	r3, [pc, #224]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258e:	d102      	bne.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f2      	bne.n	800257c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002596:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a2:	d158      	bne.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e057      	b.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025b8:	e04d      	b.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025c0:	d141      	bne.n	8002646 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c2:	4b28      	ldr	r3, [pc, #160]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ce:	d131      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025d0:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025d6:	4a23      	ldr	r2, [pc, #140]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e0:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2232      	movs	r2, #50	@ 0x32
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	4a1c      	ldr	r2, [pc, #112]	@ (800266c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	0c9b      	lsrs	r3, r3, #18
 8002602:	3301      	adds	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002606:	e002      	b.n	800260e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3b01      	subs	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261a:	d102      	bne.n	8002622 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f2      	bne.n	8002608 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262e:	d112      	bne.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e011      	b.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800263a:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002640:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002644:	e007      	b.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800264e:	4a05      	ldr	r2, [pc, #20]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002654:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40007000 	.word	0x40007000
 8002668:	20000004 	.word	0x20000004
 800266c:	431bde83 	.word	0x431bde83

08002670 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	f000 bc08 	b.w	8002e94 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002684:	4b96      	ldr	r3, [pc, #600]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268e:	4b94      	ldr	r3, [pc, #592]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80e4 	beq.w	800286e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_RCC_OscConfig+0x4c>
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	f040 808b 	bne.w	80027ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	f040 8087 	bne.w	80027ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026bc:	4b88      	ldr	r3, [pc, #544]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_OscConfig+0x64>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e3df      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	4b81      	ldr	r3, [pc, #516]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_RCC_OscConfig+0x7e>
 80026e4:	4b7e      	ldr	r3, [pc, #504]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026ec:	e005      	b.n	80026fa <HAL_RCC_OscConfig+0x8a>
 80026ee:	4b7c      	ldr	r3, [pc, #496]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d223      	bcs.n	8002746 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fd94 	bl	8003230 <RCC_SetFlashLatencyFromMSIRange>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e3c0      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002712:	4b73      	ldr	r3, [pc, #460]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a72      	ldr	r2, [pc, #456]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	4b70      	ldr	r3, [pc, #448]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	496d      	ldr	r1, [pc, #436]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002730:	4b6b      	ldr	r3, [pc, #428]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	4968      	ldr	r1, [pc, #416]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
 8002744:	e025      	b.n	8002792 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002746:	4b66      	ldr	r3, [pc, #408]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a65      	ldr	r2, [pc, #404]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b63      	ldr	r3, [pc, #396]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4960      	ldr	r1, [pc, #384]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002764:	4b5e      	ldr	r3, [pc, #376]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	495b      	ldr	r1, [pc, #364]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fd54 	bl	8003230 <RCC_SetFlashLatencyFromMSIRange>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e380      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002792:	f000 fcc1 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 8002796:	4602      	mov	r2, r0
 8002798:	4b51      	ldr	r3, [pc, #324]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4950      	ldr	r1, [pc, #320]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027a4:	5ccb      	ldrb	r3, [r1, r3]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	4a4e      	ldr	r2, [pc, #312]	@ (80028e8 <HAL_RCC_OscConfig+0x278>)
 80027b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027b2:	4b4e      	ldr	r3, [pc, #312]	@ (80028ec <HAL_RCC_OscConfig+0x27c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fb86 	bl	8001ec8 <HAL_InitTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d052      	beq.n	800286c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	e364      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d032      	beq.n	8002838 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027d2:	4b43      	ldr	r3, [pc, #268]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a42      	ldr	r2, [pc, #264]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027de:	f7ff fbc3 	bl	8001f68 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027e6:	f7ff fbbf 	bl	8001f68 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e34d      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027f8:	4b39      	ldr	r3, [pc, #228]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002804:	4b36      	ldr	r3, [pc, #216]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a35      	ldr	r2, [pc, #212]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b33      	ldr	r3, [pc, #204]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4930      	ldr	r1, [pc, #192]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002822:	4b2f      	ldr	r3, [pc, #188]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	492b      	ldr	r1, [pc, #172]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
 8002836:	e01a      	b.n	800286e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002838:	4b29      	ldr	r3, [pc, #164]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a28      	ldr	r2, [pc, #160]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002844:	f7ff fb90 	bl	8001f68 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800284c:	f7ff fb8c 	bl	8001f68 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e31a      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x1dc>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d073      	beq.n	8002962 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d005      	beq.n	800288c <HAL_RCC_OscConfig+0x21c>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d10e      	bne.n	80028a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d063      	beq.n	8002960 <HAL_RCC_OscConfig+0x2f0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d15f      	bne.n	8002960 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e2f7      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x24c>
 80028ae:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a0b      	ldr	r2, [pc, #44]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e025      	b.n	8002908 <HAL_RCC_OscConfig+0x298>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c4:	d114      	bne.n	80028f0 <HAL_RCC_OscConfig+0x280>
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a05      	ldr	r2, [pc, #20]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b03      	ldr	r3, [pc, #12]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a02      	ldr	r2, [pc, #8]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e013      	b.n	8002908 <HAL_RCC_OscConfig+0x298>
 80028e0:	40021000 	.word	0x40021000
 80028e4:	08004484 	.word	0x08004484
 80028e8:	20000004 	.word	0x20000004
 80028ec:	20000008 	.word	0x20000008
 80028f0:	4ba0      	ldr	r3, [pc, #640]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a9f      	ldr	r2, [pc, #636]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b9d      	ldr	r3, [pc, #628]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a9c      	ldr	r2, [pc, #624]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7ff fb2a 	bl	8001f68 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7ff fb26 	bl	8001f68 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	@ 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e2b4      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292a:	4b92      	ldr	r3, [pc, #584]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x2a8>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7ff fb16 	bl	8001f68 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7ff fb12 	bl	8001f68 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	@ 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e2a0      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002952:	4b88      	ldr	r3, [pc, #544]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x2d0>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d060      	beq.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d005      	beq.n	8002980 <HAL_RCC_OscConfig+0x310>
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d119      	bne.n	80029ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d116      	bne.n	80029ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002980:	4b7c      	ldr	r3, [pc, #496]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_OscConfig+0x328>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e27d      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	4b76      	ldr	r3, [pc, #472]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	4973      	ldr	r1, [pc, #460]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ac:	e040      	b.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d023      	beq.n	80029fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7ff fad1 	bl	8001f68 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ca:	f7ff facd 	bl	8001f68 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e25b      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029dc:	4b65      	ldr	r3, [pc, #404]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b62      	ldr	r3, [pc, #392]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	495f      	ldr	r1, [pc, #380]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
 80029fc:	e018      	b.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5c      	ldr	r2, [pc, #368]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7ff faad 	bl	8001f68 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a12:	f7ff faa9 	bl	8001f68 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e237      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a24:	4b53      	ldr	r3, [pc, #332]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d03c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a44:	4b4b      	ldr	r3, [pc, #300]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7ff fa88 	bl	8001f68 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7ff fa84 	bl	8001f68 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e212      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a6e:	4b41      	ldr	r3, [pc, #260]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ef      	beq.n	8002a5c <HAL_RCC_OscConfig+0x3ec>
 8002a7c:	e01b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a84:	4a3b      	ldr	r2, [pc, #236]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8e:	f7ff fa6b 	bl	8001f68 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a96:	f7ff fa67 	bl	8001f68 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e1f5      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa8:	4b32      	ldr	r3, [pc, #200]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ef      	bne.n	8002a96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80a6 	beq.w	8002c10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10d      	bne.n	8002af0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	4a26      	ldr	r2, [pc, #152]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aec:	2301      	movs	r3, #1
 8002aee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af0:	4b21      	ldr	r3, [pc, #132]	@ (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d118      	bne.n	8002b2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002afc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1d      	ldr	r2, [pc, #116]	@ (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b08:	f7ff fa2e 	bl	8001f68 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7ff fa2a 	bl	8001f68 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1b8      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d108      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4d8>
 8002b36:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b46:	e029      	b.n	8002b9c <HAL_RCC_OscConfig+0x52c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d115      	bne.n	8002b7c <HAL_RCC_OscConfig+0x50c>
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b56:	4a07      	ldr	r2, [pc, #28]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b60:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b66:	4a03      	ldr	r2, [pc, #12]	@ (8002b74 <HAL_RCC_OscConfig+0x504>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b70:	e014      	b.n	8002b9c <HAL_RCC_OscConfig+0x52c>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	4b9d      	ldr	r3, [pc, #628]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b82:	4a9c      	ldr	r2, [pc, #624]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b8c:	4b99      	ldr	r3, [pc, #612]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b92:	4a98      	ldr	r2, [pc, #608]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d016      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7ff f9e0 	bl	8001f68 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7ff f9dc 	bl	8001f68 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e168      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc2:	4b8c      	ldr	r3, [pc, #560]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ed      	beq.n	8002bac <HAL_RCC_OscConfig+0x53c>
 8002bd0:	e015      	b.n	8002bfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7ff f9c9 	bl	8001f68 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7ff f9c5 	bl	8001f68 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e151      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf0:	4b80      	ldr	r3, [pc, #512]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1ed      	bne.n	8002bda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfe:	7ffb      	ldrb	r3, [r7, #31]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c04:	4b7b      	ldr	r3, [pc, #492]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	4a7a      	ldr	r2, [pc, #488]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d03c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c24:	4b73      	ldr	r3, [pc, #460]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c2a:	4a72      	ldr	r2, [pc, #456]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7ff f998 	bl	8001f68 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c3c:	f7ff f994 	bl	8001f68 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e122      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c4e:	4b69      	ldr	r3, [pc, #420]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ef      	beq.n	8002c3c <HAL_RCC_OscConfig+0x5cc>
 8002c5c:	e01b      	b.n	8002c96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c5e:	4b65      	ldr	r3, [pc, #404]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c64:	4a63      	ldr	r2, [pc, #396]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7ff f97b 	bl	8001f68 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c76:	f7ff f977 	bl	8001f68 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e105      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c88:	4b5a      	ldr	r3, [pc, #360]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ef      	bne.n	8002c76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80f9 	beq.w	8002e92 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	f040 80cf 	bne.w	8002e48 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002caa:	4b52      	ldr	r3, [pc, #328]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f003 0203 	and.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d12c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d123      	bne.n	8002d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d11b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d113      	bne.n	8002d18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d109      	bne.n	8002d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	085b      	lsrs	r3, r3, #1
 8002d10:	3b01      	subs	r3, #1
 8002d12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d071      	beq.n	8002dfc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d068      	beq.n	8002df0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d1e:	4b35      	ldr	r3, [pc, #212]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d2a:	4b32      	ldr	r3, [pc, #200]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0ac      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002d40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d46:	f7ff f90f 	bl	8001f68 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7ff f90b 	bl	8001f68 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e099      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d60:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6c:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <HAL_RCC_OscConfig+0x788>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d7c:	3a01      	subs	r2, #1
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	4311      	orrs	r1, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d86:	0212      	lsls	r2, r2, #8
 8002d88:	4311      	orrs	r1, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d8e:	0852      	lsrs	r2, r2, #1
 8002d90:	3a01      	subs	r2, #1
 8002d92:	0552      	lsls	r2, r2, #21
 8002d94:	4311      	orrs	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d9a:	0852      	lsrs	r2, r2, #1
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	0652      	lsls	r2, r2, #25
 8002da0:	4311      	orrs	r1, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002da6:	06d2      	lsls	r2, r2, #27
 8002da8:	430a      	orrs	r2, r1
 8002daa:	4912      	ldr	r1, [pc, #72]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002db0:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0f      	ldr	r2, [pc, #60]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002db6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc8:	f7ff f8ce 	bl	8001f68 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7ff f8ca 	bl	8001f68 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e058      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <HAL_RCC_OscConfig+0x784>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dee:	e050      	b.n	8002e92 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04f      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
 8002df4:	40021000 	.word	0x40021000
 8002df8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfc:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d144      	bne.n	8002e92 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e08:	4b24      	ldr	r3, [pc, #144]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a23      	ldr	r2, [pc, #140]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e14:	4b21      	ldr	r3, [pc, #132]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a20      	ldr	r2, [pc, #128]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e20:	f7ff f8a2 	bl	8001f68 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7ff f89e 	bl	8001f68 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e02c      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x7b8>
 8002e46:	e024      	b.n	8002e92 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	d01f      	beq.n	8002e8e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a12      	ldr	r2, [pc, #72]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7ff f885 	bl	8001f68 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7ff f881 	bl	8001f68 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e00f      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	4905      	ldr	r1, [pc, #20]	@ (8002e9c <HAL_RCC_OscConfig+0x82c>)
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_RCC_OscConfig+0x830>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60cb      	str	r3, [r1, #12]
 8002e8c:	e001      	b.n	8002e92 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	feeefffc 	.word	0xfeeefffc

08002ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e11d      	b.n	80030f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b90      	ldr	r3, [pc, #576]	@ (8003100 <HAL_RCC_ClockConfig+0x25c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b8d      	ldr	r3, [pc, #564]	@ (8003100 <HAL_RCC_ClockConfig+0x25c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	498b      	ldr	r1, [pc, #556]	@ (8003100 <HAL_RCC_ClockConfig+0x25c>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b89      	ldr	r3, [pc, #548]	@ (8003100 <HAL_RCC_ClockConfig+0x25c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e105      	b.n	80030f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4b81      	ldr	r3, [pc, #516]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d908      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b7e      	ldr	r3, [pc, #504]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	497b      	ldr	r1, [pc, #492]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d079      	beq.n	800301a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d11e      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2e:	4b75      	ldr	r3, [pc, #468]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0dc      	b.n	80030f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002f3e:	f000 f9d1 	bl	80032e4 <RCC_GetSysClockFreqFromPLLSource>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4a70      	ldr	r2, [pc, #448]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d946      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f4a:	4b6e      	ldr	r3, [pc, #440]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d140      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f56:	4b6b      	ldr	r3, [pc, #428]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f5e:	4a69      	ldr	r2, [pc, #420]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f66:	2380      	movs	r3, #128	@ 0x80
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e035      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f74:	4b63      	ldr	r3, [pc, #396]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d115      	bne.n	8002fac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0b9      	b.n	80030f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8c:	4b5d      	ldr	r3, [pc, #372]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0ad      	b.n	80030f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f9c:	4b59      	ldr	r3, [pc, #356]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0a5      	b.n	80030f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002fac:	f000 f8b4 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4a55      	ldr	r2, [pc, #340]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d90f      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fb8:	4b52      	ldr	r3, [pc, #328]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fd2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fd4:	2380      	movs	r3, #128	@ 0x80
 8002fd6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 0203 	bic.w	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4947      	ldr	r1, [pc, #284]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fea:	f7fe ffbd 	bl	8001f68 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff2:	f7fe ffb9 	bl	8001f68 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e077      	b.n	80030f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003008:	4b3e      	ldr	r3, [pc, #248]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 020c 	and.w	r2, r3, #12
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	429a      	cmp	r2, r3
 8003018:	d1eb      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b80      	cmp	r3, #128	@ 0x80
 800301e:	d105      	bne.n	800302c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003020:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a37      	ldr	r2, [pc, #220]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8003026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800302a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d010      	beq.n	800305a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003044:	429a      	cmp	r2, r3
 8003046:	d208      	bcs.n	800305a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b2e      	ldr	r3, [pc, #184]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	492b      	ldr	r1, [pc, #172]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800305a:	4b29      	ldr	r3, [pc, #164]	@ (8003100 <HAL_RCC_ClockConfig+0x25c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d210      	bcs.n	800308a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003068:	4b25      	ldr	r3, [pc, #148]	@ (8003100 <HAL_RCC_ClockConfig+0x25c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 020f 	bic.w	r2, r3, #15
 8003070:	4923      	ldr	r1, [pc, #140]	@ (8003100 <HAL_RCC_ClockConfig+0x25c>)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003078:	4b21      	ldr	r3, [pc, #132]	@ (8003100 <HAL_RCC_ClockConfig+0x25c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e036      	b.n	80030f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003096:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4918      	ldr	r1, [pc, #96]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b4:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4910      	ldr	r1, [pc, #64]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030c8:	f000 f826 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	490c      	ldr	r1, [pc, #48]	@ (800310c <HAL_RCC_ClockConfig+0x268>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <HAL_RCC_ClockConfig+0x26c>)
 80030e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <HAL_RCC_ClockConfig+0x270>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe feeb 	bl	8001ec8 <HAL_InitTick>
 80030f2:	4603      	mov	r3, r0
 80030f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40022000 	.word	0x40022000
 8003104:	40021000 	.word	0x40021000
 8003108:	04c4b400 	.word	0x04c4b400
 800310c:	08004484 	.word	0x08004484
 8003110:	20000004 	.word	0x20000004
 8003114:	20000008 	.word	0x20000008

08003118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	@ 0x24
 800311c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003126:	4b3e      	ldr	r3, [pc, #248]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x108>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003130:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x108>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x34>
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d121      	bne.n	800318a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d11e      	bne.n	800318a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800314c:	4b34      	ldr	r3, [pc, #208]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x108>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003158:	4b31      	ldr	r3, [pc, #196]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x108>)
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	e005      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003168:	4b2d      	ldr	r3, [pc, #180]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x108>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003174:	4a2b      	ldr	r2, [pc, #172]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10d      	bne.n	80031a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d102      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003190:	4b25      	ldr	r3, [pc, #148]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x110>)
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	e004      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800319c:	4b23      	ldr	r3, [pc, #140]	@ (800322c <HAL_RCC_GetSysClockFreq+0x114>)
 800319e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d134      	bne.n	8003210 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d003      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0xa6>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d003      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0xac>
 80031bc:	e005      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031be:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x110>)
 80031c0:	617b      	str	r3, [r7, #20]
      break;
 80031c2:	e005      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <HAL_RCC_GetSysClockFreq+0x114>)
 80031c6:	617b      	str	r3, [r7, #20]
      break;
 80031c8:	e002      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	617b      	str	r3, [r7, #20]
      break;
 80031ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031d0:	4b13      	ldr	r3, [pc, #76]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	3301      	adds	r3, #1
 80031dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031de:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	fb03 f202 	mul.w	r2, r3, r2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	0e5b      	lsrs	r3, r3, #25
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	3301      	adds	r3, #1
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	fbb2 f3f3 	udiv	r3, r2, r3
 800320e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003210:	69bb      	ldr	r3, [r7, #24]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	@ 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	08004494 	.word	0x08004494
 8003228:	00f42400 	.word	0x00f42400
 800322c:	007a1200 	.word	0x007a1200

08003230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800323c:	4b27      	ldr	r3, [pc, #156]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003248:	f7ff f94e 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 800324c:	6178      	str	r0, [r7, #20]
 800324e:	e014      	b.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003250:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800325a:	6593      	str	r3, [r2, #88]	@ 0x58
 800325c:	4b1f      	ldr	r3, [pc, #124]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003268:	f7ff f93e 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 800326c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	4a1a      	ldr	r2, [pc, #104]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003280:	d10b      	bne.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b80      	cmp	r3, #128	@ 0x80
 8003286:	d913      	bls.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2ba0      	cmp	r3, #160	@ 0xa0
 800328c:	d902      	bls.n	8003294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800328e:	2302      	movs	r3, #2
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e00d      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003294:	2301      	movs	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	e00a      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b7f      	cmp	r3, #127	@ 0x7f
 800329e:	d902      	bls.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80032a0:	2302      	movs	r3, #2
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	e004      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b70      	cmp	r3, #112	@ 0x70
 80032aa:	d101      	bne.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032ac:	2301      	movs	r3, #1
 80032ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 020f 	bic.w	r2, r3, #15
 80032b8:	4909      	ldr	r1, [pc, #36]	@ (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032c0:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40022000 	.word	0x40022000

080032e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ea:	4b2d      	ldr	r3, [pc, #180]	@ (80033a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d00b      	beq.n	8003312 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d825      	bhi.n	800334c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d008      	beq.n	8003318 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d11f      	bne.n	800334c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800330c:	4b25      	ldr	r3, [pc, #148]	@ (80033a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800330e:	613b      	str	r3, [r7, #16]
    break;
 8003310:	e01f      	b.n	8003352 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003312:	4b25      	ldr	r3, [pc, #148]	@ (80033a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003314:	613b      	str	r3, [r7, #16]
    break;
 8003316:	e01c      	b.n	8003352 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003318:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d107      	bne.n	8003334 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003324:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e005      	b.n	8003340 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003340:	4a1a      	ldr	r2, [pc, #104]	@ (80033ac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003348:	613b      	str	r3, [r7, #16]
    break;
 800334a:	e002      	b.n	8003352 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
    break;
 8003350:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003352:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	3301      	adds	r3, #1
 800335e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003360:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	fb03 f202 	mul.w	r2, r3, r2
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003378:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	0e5b      	lsrs	r3, r3, #25
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	3301      	adds	r3, #1
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003392:	683b      	ldr	r3, [r7, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40021000 	.word	0x40021000
 80033a4:	00f42400 	.word	0x00f42400
 80033a8:	007a1200 	.word	0x007a1200
 80033ac:	08004494 	.word	0x08004494

080033b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e095      	b.n	80034ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d108      	bne.n	80033dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033d2:	d009      	beq.n	80033e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	61da      	str	r2, [r3, #28]
 80033da:	e005      	b.n	80033e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fe fb6a 	bl	8001adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800341e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003428:	d902      	bls.n	8003430 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e002      	b.n	8003436 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003434:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800343e:	d007      	beq.n	8003450 <HAL_SPI_Init+0xa0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003448:	d002      	beq.n	8003450 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003492:	ea42 0103 	orr.w	r1, r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	f003 0204 	and.w	r2, r3, #4
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80034cc:	ea42 0103 	orr.w	r1, r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b088      	sub	sp, #32
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_SPI_Transmit+0x22>
 8003514:	2302      	movs	r3, #2
 8003516:	e15f      	b.n	80037d8 <HAL_SPI_Transmit+0x2e2>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003520:	f7fe fd22 	bl	8001f68 <HAL_GetTick>
 8003524:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d002      	beq.n	800353c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800353a:	e148      	b.n	80037ce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_SPI_Transmit+0x52>
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800354c:	e13f      	b.n	80037ce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2203      	movs	r2, #3
 8003552:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	88fa      	ldrh	r2, [r7, #6]
 800356c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003598:	d10f      	bne.n	80035ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c4:	2b40      	cmp	r3, #64	@ 0x40
 80035c6:	d007      	beq.n	80035d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035e0:	d94f      	bls.n	8003682 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_Transmit+0xfa>
 80035ea:	8afb      	ldrh	r3, [r7, #22]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d142      	bne.n	8003676 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003614:	e02f      	b.n	8003676 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	d112      	bne.n	800364a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	1c9a      	adds	r2, r3, #2
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003648:	e015      	b.n	8003676 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800364a:	f7fe fc8d 	bl	8001f68 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d803      	bhi.n	8003662 <HAL_SPI_Transmit+0x16c>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003660:	d102      	bne.n	8003668 <HAL_SPI_Transmit+0x172>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003674:	e0ab      	b.n	80037ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ca      	bne.n	8003616 <HAL_SPI_Transmit+0x120>
 8003680:	e080      	b.n	8003784 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_SPI_Transmit+0x19a>
 800368a:	8afb      	ldrh	r3, [r7, #22]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d174      	bne.n	800377a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d912      	bls.n	80036c0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	881a      	ldrh	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036aa:	1c9a      	adds	r2, r3, #2
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b02      	subs	r3, #2
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036be:	e05c      	b.n	800377a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80036e6:	e048      	b.n	800377a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d12b      	bne.n	800374e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d912      	bls.n	8003726 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b02      	subs	r3, #2
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003724:	e029      	b.n	800377a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800374c:	e015      	b.n	800377a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800374e:	f7fe fc0b 	bl	8001f68 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d803      	bhi.n	8003766 <HAL_SPI_Transmit+0x270>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003764:	d102      	bne.n	800376c <HAL_SPI_Transmit+0x276>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003778:	e029      	b.n	80037ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1b1      	bne.n	80036e8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fb69 	bl	8003e60 <SPI_EndRxTxTransaction>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e003      	b.n	80037ce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80037d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	@ 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037ee:	2301      	movs	r3, #1
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x26>
 8003802:	2302      	movs	r3, #2
 8003804:	e20a      	b.n	8003c1c <HAL_SPI_TransmitReceive+0x43c>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800380e:	f7fe fbab 	bl	8001f68 <HAL_GetTick>
 8003812:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800381a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003822:	887b      	ldrh	r3, [r7, #2]
 8003824:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003826:	887b      	ldrh	r3, [r7, #2]
 8003828:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800382a:	7efb      	ldrb	r3, [r7, #27]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d00e      	beq.n	800384e <HAL_SPI_TransmitReceive+0x6e>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003836:	d106      	bne.n	8003846 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <HAL_SPI_TransmitReceive+0x66>
 8003840:	7efb      	ldrb	r3, [r7, #27]
 8003842:	2b04      	cmp	r3, #4
 8003844:	d003      	beq.n	800384e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003846:	2302      	movs	r3, #2
 8003848:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800384c:	e1e0      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x80>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x80>
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d103      	bne.n	8003868 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003866:	e1d3      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b04      	cmp	r3, #4
 8003872:	d003      	beq.n	800387c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2205      	movs	r2, #5
 8003878:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	887a      	ldrh	r2, [r7, #2]
 80038a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038be:	d802      	bhi.n	80038c6 <HAL_SPI_TransmitReceive+0xe6>
 80038c0:	8a3b      	ldrh	r3, [r7, #16]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d908      	bls.n	80038d8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e007      	b.n	80038e8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b40      	cmp	r3, #64	@ 0x40
 80038f4:	d007      	beq.n	8003906 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800390e:	f240 8081 	bls.w	8003a14 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x140>
 800391a:	8a7b      	ldrh	r3, [r7, #18]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d16d      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	881a      	ldrh	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	1c9a      	adds	r2, r3, #2
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003944:	e05a      	b.n	80039fc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d11b      	bne.n	800398c <HAL_SPI_TransmitReceive+0x1ac>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_SPI_TransmitReceive+0x1ac>
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	2b01      	cmp	r3, #1
 8003962:	d113      	bne.n	800398c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003968:	881a      	ldrh	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003974:	1c9a      	adds	r2, r3, #2
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d11c      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x1f4>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	b292      	uxth	r2, r2
 80039b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039d0:	2301      	movs	r3, #1
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039d4:	f7fe fac8 	bl	8001f68 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d80b      	bhi.n	80039fc <HAL_SPI_TransmitReceive+0x21c>
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ea:	d007      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80039fa:	e109      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d19f      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x166>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d199      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x166>
 8003a12:	e0e3      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_SPI_TransmitReceive+0x244>
 8003a1c:	8a7b      	ldrh	r3, [r7, #18]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	f040 80cf 	bne.w	8003bc2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d912      	bls.n	8003a54 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	881a      	ldrh	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3e:	1c9a      	adds	r2, r3, #2
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b02      	subs	r3, #2
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a52:	e0b6      	b.n	8003bc2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a7a:	e0a2      	b.n	8003bc2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d134      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x314>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02f      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x314>
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d12c      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d912      	bls.n	8003aca <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	881a      	ldrh	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b02      	subs	r3, #2
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ac8:	e012      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	7812      	ldrb	r2, [r2, #0]
 8003ad6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d148      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x3b4>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d042      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d923      	bls.n	8003b62 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	b292      	uxth	r2, r2
 8003b26:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b02      	subs	r3, #2
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d81f      	bhi.n	8003b90 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	e016      	b.n	8003b90 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f103 020c 	add.w	r2, r3, #12
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	7812      	ldrb	r2, [r2, #0]
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b90:	2301      	movs	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b94:	f7fe f9e8 	bl	8001f68 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d803      	bhi.n	8003bac <HAL_SPI_TransmitReceive+0x3cc>
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003baa:	d102      	bne.n	8003bb2 <HAL_SPI_TransmitReceive+0x3d2>
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003bc0:	e026      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f47f af57 	bne.w	8003a7c <HAL_SPI_TransmitReceive+0x29c>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f47f af50 	bne.w	8003a7c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f93d 	bl	8003e60 <SPI_EndRxTxTransaction>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c06:	e003      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003c18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3728      	adds	r7, #40	@ 0x28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c34:	f7fe f998 	bl	8001f68 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	4413      	add	r3, r2
 8003c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c44:	f7fe f990 	bl	8001f68 <HAL_GetTick>
 8003c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c4a:	4b39      	ldr	r3, [pc, #228]	@ (8003d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	015b      	lsls	r3, r3, #5
 8003c50:	0d1b      	lsrs	r3, r3, #20
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c5a:	e054      	b.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c62:	d050      	beq.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c64:	f7fe f980 	bl	8001f68 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d902      	bls.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d13d      	bne.n	8003cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c92:	d111      	bne.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9c:	d004      	beq.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca6:	d107      	bne.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc0:	d10f      	bne.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e017      	b.n	8003d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d19b      	bne.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000004 	.word	0x20000004

08003d34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	@ 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d46:	f7fe f90f 	bl	8001f68 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d56:	f7fe f907 	bl	8001f68 <HAL_GetTick>
 8003d5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d64:	4b3d      	ldr	r3, [pc, #244]	@ (8003e5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00da      	lsls	r2, r3, #3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	0d1b      	lsrs	r3, r3, #20
 8003d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d7c:	e060      	b.n	8003e40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d84:	d107      	bne.n	8003d96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d9c:	d050      	beq.n	8003e40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d9e:	f7fe f8e3 	bl	8001f68 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d902      	bls.n	8003db4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d13d      	bne.n	8003e30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dcc:	d111      	bne.n	8003df2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd6:	d004      	beq.n	8003de2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de0:	d107      	bne.n	8003df2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003df0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dfa:	d10f      	bne.n	8003e1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e010      	b.n	8003e52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d196      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3728      	adds	r7, #40	@ 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000004 	.word	0x20000004

08003e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f7ff ff5b 	bl	8003d34 <SPI_WaitFifoStateUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e027      	b.n	8003ee4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2180      	movs	r1, #128	@ 0x80
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff fec0 	bl	8003c24 <SPI_WaitFlagStateUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e014      	b.n	8003ee4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff ff34 	bl	8003d34 <SPI_WaitFifoStateUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed6:	f043 0220 	orr.w	r2, r3, #32
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e000      	b.n	8003ee4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <memset>:
 8003eec:	4402      	add	r2, r0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d100      	bne.n	8003ef6 <memset+0xa>
 8003ef4:	4770      	bx	lr
 8003ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8003efa:	e7f9      	b.n	8003ef0 <memset+0x4>

08003efc <__libc_init_array>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4d0d      	ldr	r5, [pc, #52]	@ (8003f34 <__libc_init_array+0x38>)
 8003f00:	4c0d      	ldr	r4, [pc, #52]	@ (8003f38 <__libc_init_array+0x3c>)
 8003f02:	1b64      	subs	r4, r4, r5
 8003f04:	10a4      	asrs	r4, r4, #2
 8003f06:	2600      	movs	r6, #0
 8003f08:	42a6      	cmp	r6, r4
 8003f0a:	d109      	bne.n	8003f20 <__libc_init_array+0x24>
 8003f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8003f3c <__libc_init_array+0x40>)
 8003f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8003f40 <__libc_init_array+0x44>)
 8003f10:	f000 f818 	bl	8003f44 <_init>
 8003f14:	1b64      	subs	r4, r4, r5
 8003f16:	10a4      	asrs	r4, r4, #2
 8003f18:	2600      	movs	r6, #0
 8003f1a:	42a6      	cmp	r6, r4
 8003f1c:	d105      	bne.n	8003f2a <__libc_init_array+0x2e>
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f24:	4798      	blx	r3
 8003f26:	3601      	adds	r6, #1
 8003f28:	e7ee      	b.n	8003f08 <__libc_init_array+0xc>
 8003f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2e:	4798      	blx	r3
 8003f30:	3601      	adds	r6, #1
 8003f32:	e7f2      	b.n	8003f1a <__libc_init_array+0x1e>
 8003f34:	080044cc 	.word	0x080044cc
 8003f38:	080044cc 	.word	0x080044cc
 8003f3c:	080044cc 	.word	0x080044cc
 8003f40:	080044d0 	.word	0x080044d0

08003f44 <_init>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr

08003f50 <_fini>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr
