
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5e0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f160  0800e7a0  0800e7a0  0000f7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d900  0801d900  0001f060  2**0
                  CONTENTS
  4 .ARM          00000008  0801d900  0801d900  0001e900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d908  0801d908  0001f060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d908  0801d908  0001e908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d90c  0801d90c  0001e90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0801d910  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd4  20000060  0801d970  0001f060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c34  0801d970  0001fc34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1ea  00000000  00000000  0001f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003df4  00000000  00000000  0003e27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00042070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001474  00000000  00000000  00043a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e456  00000000  00000000  00044ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021dcb  00000000  00000000  0007332a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001118f2  00000000  00000000  000950f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a69e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000771c  00000000  00000000  001a6a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001ae148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e788 	.word	0x0800e788

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	0800e788 	.word	0x0800e788

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2uiz>:
 8000bcc:	004a      	lsls	r2, r1, #1
 8000bce:	d211      	bcs.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd4:	d211      	bcs.n	8000bfa <__aeabi_d2uiz+0x2e>
 8000bd6:	d50d      	bpl.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d40e      	bmi.n	8000c00 <__aeabi_d2uiz+0x34>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfe:	d102      	bne.n	8000c06 <__aeabi_d2uiz+0x3a>
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c04:	4770      	bx	lr
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <addNewEntry>:
static uint8_t last_taken_pill_idx = 0;

uint8_t used_slots = 0; //stores dispenser availablity through one-hot encoding


void addNewEntry(uint8_t dispenserNum, char * name, uint8_t dayofWeek, uint8_t hour, uint8_t min){
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6039      	str	r1, [r7, #0]
 8000f04:	4611      	mov	r1, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	71bb      	strb	r3, [r7, #6]
 8000f10:	4613      	mov	r3, r2
 8000f12:	717b      	strb	r3, [r7, #5]
	//uint8_t ID; uint8_t dispenserNum; char * name; uint8_t dayofWeek; uint8_t hour; uint8_t min; uint8_t taken;
	pillEntry wew = {numPills, dispenserNum, name, dayofWeek, hour, min, 1};
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	221f      	movs	r2, #31
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f00b ff83 	bl	800ce28 <memset>
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <addNewEntry+0xac>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	723b      	strb	r3, [r7, #8]
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	727b      	strb	r3, [r7, #9]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	72bb      	strb	r3, [r7, #10]
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	72fb      	strb	r3, [r7, #11]
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	733b      	strb	r3, [r7, #12]
 8000f3a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000f3e:	737b      	strb	r3, [r7, #13]
 8000f40:	2301      	movs	r3, #1
 8000f42:	73bb      	strb	r3, [r7, #14]
	pillList[numPills] = wew;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <addNewEntry+0xac>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4a18      	ldr	r2, [pc, #96]	@ (8000fac <addNewEntry+0xb0>)
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	015b      	lsls	r3, r3, #5
 8000f50:	1a5b      	subs	r3, r3, r1
 8000f52:	4413      	add	r3, r2
 8000f54:	461d      	mov	r5, r3
 8000f56:	f107 0408 	add.w	r4, r7, #8
 8000f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f5c:	6028      	str	r0, [r5, #0]
 8000f5e:	6069      	str	r1, [r5, #4]
 8000f60:	60aa      	str	r2, [r5, #8]
 8000f62:	60eb      	str	r3, [r5, #12]
 8000f64:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000f66:	6128      	str	r0, [r5, #16]
 8000f68:	6169      	str	r1, [r5, #20]
 8000f6a:	61aa      	str	r2, [r5, #24]
 8000f6c:	8823      	ldrh	r3, [r4, #0]
 8000f6e:	78a2      	ldrb	r2, [r4, #2]
 8000f70:	83ab      	strh	r3, [r5, #28]
 8000f72:	4613      	mov	r3, r2
 8000f74:	77ab      	strb	r3, [r5, #30]
	numPills++;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <addNewEntry+0xac>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <addNewEntry+0xac>)
 8000f80:	701a      	strb	r2, [r3, #0]
	used_slots |= 0x1 << dispenserNum;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2201      	movs	r2, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	b25a      	sxtb	r2, r3
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <addNewEntry+0xb4>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <addNewEntry+0xb4>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	sortEntries();
 8000f9c:	f000 f80a 	bl	8000fb4 <sortEntries>
	//update_next_pill_idx(DS1307_GetDayOfWeek, DS1307_GetHour, DS1307_GetMinute);
}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	@ 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa8:	2000007c 	.word	0x2000007c
 8000fac:	20000080 	.word	0x20000080
 8000fb0:	20000690 	.word	0x20000690

08000fb4 <sortEntries>:

void sortEntries(){
 8000fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb8:	b096      	sub	sp, #88	@ 0x58
 8000fba:	af0c      	add	r7, sp, #48	@ 0x30
	uint8_t i = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t j = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t minimum_idx = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	//WOOOO SELECTION SORT MY BELOVED!!!!
	for (i = 0; i < numPills; i++){
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000fd4:	e0b1      	b.n	800113a <sortEntries+0x186>
		minimum_idx = i;
 8000fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		for (j = i + 1; j < numPills; j++){
 8000fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000fe8:	e043      	b.n	8001072 <sortEntries+0xbe>
			if (compPillEntry(pillList[j], pillList[minimum_idx])){
 8000fea:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000fee:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000ff2:	4858      	ldr	r0, [pc, #352]	@ (8001154 <sortEntries+0x1a0>)
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	1a5b      	subs	r3, r3, r1
 8000ffa:	18c6      	adds	r6, r0, r3
 8000ffc:	4955      	ldr	r1, [pc, #340]	@ (8001154 <sortEntries+0x1a0>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	015b      	lsls	r3, r3, #5
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	440b      	add	r3, r1
 8001006:	ac04      	add	r4, sp, #16
 8001008:	461d      	mov	r5, r3
 800100a:	6828      	ldr	r0, [r5, #0]
 800100c:	6869      	ldr	r1, [r5, #4]
 800100e:	68aa      	ldr	r2, [r5, #8]
 8001010:	68eb      	ldr	r3, [r5, #12]
 8001012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001014:	6928      	ldr	r0, [r5, #16]
 8001016:	6969      	ldr	r1, [r5, #20]
 8001018:	69aa      	ldr	r2, [r5, #24]
 800101a:	c407      	stmia	r4!, {r0, r1, r2}
 800101c:	8bab      	ldrh	r3, [r5, #28]
 800101e:	7faa      	ldrb	r2, [r5, #30]
 8001020:	8023      	strh	r3, [r4, #0]
 8001022:	4613      	mov	r3, r2
 8001024:	70a3      	strb	r3, [r4, #2]
 8001026:	6833      	ldr	r3, [r6, #0]
 8001028:	4698      	mov	r8, r3
 800102a:	6873      	ldr	r3, [r6, #4]
 800102c:	469e      	mov	lr, r3
 800102e:	68b3      	ldr	r3, [r6, #8]
 8001030:	469c      	mov	ip, r3
 8001032:	68f3      	ldr	r3, [r6, #12]
 8001034:	461d      	mov	r5, r3
 8001036:	466b      	mov	r3, sp
 8001038:	f106 0410 	add.w	r4, r6, #16
 800103c:	6820      	ldr	r0, [r4, #0]
 800103e:	6861      	ldr	r1, [r4, #4]
 8001040:	68a2      	ldr	r2, [r4, #8]
 8001042:	c307      	stmia	r3!, {r0, r1, r2}
 8001044:	89a2      	ldrh	r2, [r4, #12]
 8001046:	7ba1      	ldrb	r1, [r4, #14]
 8001048:	801a      	strh	r2, [r3, #0]
 800104a:	460a      	mov	r2, r1
 800104c:	709a      	strb	r2, [r3, #2]
 800104e:	4640      	mov	r0, r8
 8001050:	4671      	mov	r1, lr
 8001052:	4662      	mov	r2, ip
 8001054:	462b      	mov	r3, r5
 8001056:	f000 f881 	bl	800115c <compPillEntry>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <sortEntries+0xb4>
				minimum_idx = j;
 8001060:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001064:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		for (j = i + 1; j < numPills; j++){
 8001068:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800106c:	3301      	adds	r3, #1
 800106e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001072:	4b39      	ldr	r3, [pc, #228]	@ (8001158 <sortEntries+0x1a4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800107a:	429a      	cmp	r2, r3
 800107c:	d3b5      	bcc.n	8000fea <sortEntries+0x36>
			}
		}
		pillEntry temp = pillList[i];
 800107e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001082:	4934      	ldr	r1, [pc, #208]	@ (8001154 <sortEntries+0x1a0>)
 8001084:	4613      	mov	r3, r2
 8001086:	015b      	lsls	r3, r3, #5
 8001088:	1a9b      	subs	r3, r3, r2
 800108a:	440b      	add	r3, r1
 800108c:	1d3c      	adds	r4, r7, #4
 800108e:	461d      	mov	r5, r3
 8001090:	6828      	ldr	r0, [r5, #0]
 8001092:	6869      	ldr	r1, [r5, #4]
 8001094:	68aa      	ldr	r2, [r5, #8]
 8001096:	68eb      	ldr	r3, [r5, #12]
 8001098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109a:	6928      	ldr	r0, [r5, #16]
 800109c:	6969      	ldr	r1, [r5, #20]
 800109e:	69aa      	ldr	r2, [r5, #24]
 80010a0:	c407      	stmia	r4!, {r0, r1, r2}
 80010a2:	8bab      	ldrh	r3, [r5, #28]
 80010a4:	7faa      	ldrb	r2, [r5, #30]
 80010a6:	8023      	strh	r3, [r4, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	70a3      	strb	r3, [r4, #2]
		pillList[i] = pillList[minimum_idx];
 80010ac:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80010b0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80010b4:	4827      	ldr	r0, [pc, #156]	@ (8001154 <sortEntries+0x1a0>)
 80010b6:	460b      	mov	r3, r1
 80010b8:	015b      	lsls	r3, r3, #5
 80010ba:	1a5b      	subs	r3, r3, r1
 80010bc:	4418      	add	r0, r3
 80010be:	4925      	ldr	r1, [pc, #148]	@ (8001154 <sortEntries+0x1a0>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	015b      	lsls	r3, r3, #5
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	18ca      	adds	r2, r1, r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	6814      	ldr	r4, [r2, #0]
 80010cc:	6850      	ldr	r0, [r2, #4]
 80010ce:	6891      	ldr	r1, [r2, #8]
 80010d0:	68d5      	ldr	r5, [r2, #12]
 80010d2:	601c      	str	r4, [r3, #0]
 80010d4:	6058      	str	r0, [r3, #4]
 80010d6:	6099      	str	r1, [r3, #8]
 80010d8:	60dd      	str	r5, [r3, #12]
 80010da:	6914      	ldr	r4, [r2, #16]
 80010dc:	6950      	ldr	r0, [r2, #20]
 80010de:	6991      	ldr	r1, [r2, #24]
 80010e0:	611c      	str	r4, [r3, #16]
 80010e2:	6158      	str	r0, [r3, #20]
 80010e4:	6199      	str	r1, [r3, #24]
 80010e6:	8b91      	ldrh	r1, [r2, #28]
 80010e8:	7f92      	ldrb	r2, [r2, #30]
 80010ea:	8399      	strh	r1, [r3, #28]
 80010ec:	779a      	strb	r2, [r3, #30]
		pillList[minimum_idx] = temp;
 80010ee:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80010f2:	4918      	ldr	r1, [pc, #96]	@ (8001154 <sortEntries+0x1a0>)
 80010f4:	4613      	mov	r3, r2
 80010f6:	015b      	lsls	r3, r3, #5
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	461d      	mov	r5, r3
 80010fe:	1d3c      	adds	r4, r7, #4
 8001100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001102:	6028      	str	r0, [r5, #0]
 8001104:	6069      	str	r1, [r5, #4]
 8001106:	60aa      	str	r2, [r5, #8]
 8001108:	60eb      	str	r3, [r5, #12]
 800110a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800110c:	6128      	str	r0, [r5, #16]
 800110e:	6169      	str	r1, [r5, #20]
 8001110:	61aa      	str	r2, [r5, #24]
 8001112:	8823      	ldrh	r3, [r4, #0]
 8001114:	78a2      	ldrb	r2, [r4, #2]
 8001116:	83ab      	strh	r3, [r5, #28]
 8001118:	4613      	mov	r3, r2
 800111a:	77ab      	strb	r3, [r5, #30]
		pillList[i].ID = i;
 800111c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <sortEntries+0x1a0>)
 8001122:	4613      	mov	r3, r2
 8001124:	015b      	lsls	r3, r3, #5
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	440b      	add	r3, r1
 800112a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800112e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numPills; i++){
 8001130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001134:	3301      	adds	r3, #1
 8001136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <sortEntries+0x1a4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001142:	429a      	cmp	r2, r3
 8001144:	f4ff af47 	bcc.w	8000fd6 <sortEntries+0x22>

	}
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	@ 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001154:	20000080 	.word	0x20000080
 8001158:	2000007c 	.word	0x2000007c

0800115c <compPillEntry>:

//returns 1 if lhs is less than rhs
uint8_t compPillEntry(pillEntry lhs, pillEntry rhs){
 800115c:	b084      	sub	sp, #16
 800115e:	b490      	push	{r4, r7}
 8001160:	af00      	add	r7, sp, #0
 8001162:	f107 0408 	add.w	r4, r7, #8
 8001166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (!(lhs.dayofWeek == rhs.dayofWeek)){
 800116a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800116e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001172:	429a      	cmp	r2, r3
 8001174:	d009      	beq.n	800118a <compPillEntry+0x2e>
		return lhs.dayofWeek < rhs.dayofWeek;
 8001176:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800117a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800117e:	429a      	cmp	r2, r3
 8001180:	bf34      	ite	cc
 8001182:	2301      	movcc	r3, #1
 8001184:	2300      	movcs	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	e020      	b.n	80011cc <compPillEntry+0x70>
	}

	if (!(lhs.hour == rhs.hour)){
 800118a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800118e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001192:	429a      	cmp	r2, r3
 8001194:	d009      	beq.n	80011aa <compPillEntry+0x4e>
		return lhs.hour < rhs.hour;
 8001196:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800119a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800119e:	429a      	cmp	r2, r3
 80011a0:	bf34      	ite	cc
 80011a2:	2301      	movcc	r3, #1
 80011a4:	2300      	movcs	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	e010      	b.n	80011cc <compPillEntry+0x70>
	}

	if (!(lhs.min == rhs.min)){
 80011aa:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80011ae:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d009      	beq.n	80011ca <compPillEntry+0x6e>
		return lhs.min < rhs.min;
 80011b6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80011ba:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80011be:	429a      	cmp	r2, r3
 80011c0:	bf34      	ite	cc
 80011c2:	2301      	movcc	r3, #1
 80011c4:	2300      	movcs	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	e000      	b.n	80011cc <compPillEntry+0x70>
	}

	return 0;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc90      	pop	{r4, r7}
 80011d2:	b004      	add	sp, #16
 80011d4:	4770      	bx	lr
	...

080011d8 <update_last_due_pill_idx>:

uint8_t update_last_due_pill_idx(uint8_t dayofweek, uint8_t hour, uint8_t min){
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	460b      	mov	r3, r1
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	717b      	strb	r3, [r7, #5]

	uint8_t i = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
	//find closest next pill to the current time. Actual search algorithms be damned.
	for (i = 0; i < numPills; i++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e04d      	b.n	8001290 <update_last_due_pill_idx+0xb8>
		if (!(dayofweek == pillList[i].dayofWeek)){
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	4931      	ldr	r1, [pc, #196]	@ (80012bc <update_last_due_pill_idx+0xe4>)
 80011f8:	4613      	mov	r3, r2
 80011fa:	015b      	lsls	r3, r3, #5
 80011fc:	1a9b      	subs	r3, r3, r2
 80011fe:	440b      	add	r3, r1
 8001200:	331b      	adds	r3, #27
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	79fa      	ldrb	r2, [r7, #7]
 8001206:	429a      	cmp	r2, r3
 8001208:	d00d      	beq.n	8001226 <update_last_due_pill_idx+0x4e>
			if (dayofweek < pillList[i].dayofWeek){
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	492b      	ldr	r1, [pc, #172]	@ (80012bc <update_last_due_pill_idx+0xe4>)
 800120e:	4613      	mov	r3, r2
 8001210:	015b      	lsls	r3, r3, #5
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	440b      	add	r3, r1
 8001216:	331b      	adds	r3, #27
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	79fa      	ldrb	r2, [r7, #7]
 800121c:	429a      	cmp	r2, r3
 800121e:	d202      	bcs.n	8001226 <update_last_due_pill_idx+0x4e>
				next_time_pill_idx = i;
 8001220:	4a27      	ldr	r2, [pc, #156]	@ (80012c0 <update_last_due_pill_idx+0xe8>)
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	7013      	strb	r3, [r2, #0]
			}

		}

		if (!(hour == pillList[i].hour)){
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	4924      	ldr	r1, [pc, #144]	@ (80012bc <update_last_due_pill_idx+0xe4>)
 800122a:	4613      	mov	r3, r2
 800122c:	015b      	lsls	r3, r3, #5
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	440b      	add	r3, r1
 8001232:	331c      	adds	r3, #28
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	429a      	cmp	r2, r3
 800123a:	d00d      	beq.n	8001258 <update_last_due_pill_idx+0x80>
			if (dayofweek < pillList[i].dayofWeek){
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	491f      	ldr	r1, [pc, #124]	@ (80012bc <update_last_due_pill_idx+0xe4>)
 8001240:	4613      	mov	r3, r2
 8001242:	015b      	lsls	r3, r3, #5
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	440b      	add	r3, r1
 8001248:	331b      	adds	r3, #27
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	429a      	cmp	r2, r3
 8001250:	d202      	bcs.n	8001258 <update_last_due_pill_idx+0x80>
				next_time_pill_idx = i;
 8001252:	4a1b      	ldr	r2, [pc, #108]	@ (80012c0 <update_last_due_pill_idx+0xe8>)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	7013      	strb	r3, [r2, #0]
			}
		}

		if (!(min == pillList[i].min)){
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	4918      	ldr	r1, [pc, #96]	@ (80012bc <update_last_due_pill_idx+0xe4>)
 800125c:	4613      	mov	r3, r2
 800125e:	015b      	lsls	r3, r3, #5
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	440b      	add	r3, r1
 8001264:	331d      	adds	r3, #29
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	797a      	ldrb	r2, [r7, #5]
 800126a:	429a      	cmp	r2, r3
 800126c:	d00d      	beq.n	800128a <update_last_due_pill_idx+0xb2>
			if (dayofweek < pillList[i].dayofWeek){
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	4912      	ldr	r1, [pc, #72]	@ (80012bc <update_last_due_pill_idx+0xe4>)
 8001272:	4613      	mov	r3, r2
 8001274:	015b      	lsls	r3, r3, #5
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	440b      	add	r3, r1
 800127a:	331b      	adds	r3, #27
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	429a      	cmp	r2, r3
 8001282:	d202      	bcs.n	800128a <update_last_due_pill_idx+0xb2>
				next_time_pill_idx = i;
 8001284:	4a0e      	ldr	r2, [pc, #56]	@ (80012c0 <update_last_due_pill_idx+0xe8>)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < numPills; i++){
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	3301      	adds	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <update_last_due_pill_idx+0xec>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3ac      	bcc.n	80011f4 <update_last_due_pill_idx+0x1c>
			}
		}
	}
	last_taken_pill_idx = (i == 0) ? 0 : i -1;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <update_last_due_pill_idx+0xd0>
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	e000      	b.n	80012aa <update_last_due_pill_idx+0xd2>
 80012a8:	2300      	movs	r3, #0
 80012aa:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <update_last_due_pill_idx+0xf0>)
 80012ac:	7013      	strb	r3, [r2, #0]

}
 80012ae:	bf00      	nop
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	20000080 	.word	0x20000080
 80012c0:	2000068e 	.word	0x2000068e
 80012c4:	2000007c 	.word	0x2000007c
 80012c8:	2000068f 	.word	0x2000068f

080012cc <get_next_pill_idx>:

uint8_t get_next_pill_idx(){
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
	if (numPills == 1){
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <get_next_pill_idx+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <get_next_pill_idx+0x10>
		return 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	e001      	b.n	80012e0 <get_next_pill_idx+0x14>
	}
	else{
	return next_time_pill_idx;
 80012dc:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <get_next_pill_idx+0x24>)
 80012de:	781b      	ldrb	r3, [r3, #0]
	}
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2000007c 	.word	0x2000007c
 80012f0:	2000068e 	.word	0x2000068e

080012f4 <getPillInfo>:
		last_taken_pill_idx = next_time_pill_idx - 1;
	}

}

pillEntry getPillInfo(uint8_t idx){
 80012f4:	b4b0      	push	{r4, r5, r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
	return pillList[idx];
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	490e      	ldr	r1, [pc, #56]	@ (8001340 <getPillInfo+0x4c>)
 8001306:	4613      	mov	r3, r2
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	18ca      	adds	r2, r1, r3
 800130e:	4603      	mov	r3, r0
 8001310:	6814      	ldr	r4, [r2, #0]
 8001312:	6850      	ldr	r0, [r2, #4]
 8001314:	6891      	ldr	r1, [r2, #8]
 8001316:	68d5      	ldr	r5, [r2, #12]
 8001318:	601c      	str	r4, [r3, #0]
 800131a:	6058      	str	r0, [r3, #4]
 800131c:	6099      	str	r1, [r3, #8]
 800131e:	60dd      	str	r5, [r3, #12]
 8001320:	6914      	ldr	r4, [r2, #16]
 8001322:	6950      	ldr	r0, [r2, #20]
 8001324:	6991      	ldr	r1, [r2, #24]
 8001326:	611c      	str	r4, [r3, #16]
 8001328:	6158      	str	r0, [r3, #20]
 800132a:	6199      	str	r1, [r3, #24]
 800132c:	8b91      	ldrh	r1, [r2, #28]
 800132e:	7f92      	ldrb	r2, [r2, #30]
 8001330:	8399      	strh	r1, [r3, #28]
 8001332:	779a      	strb	r2, [r3, #30]
}
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bcb0      	pop	{r4, r5, r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000080 	.word	0x20000080

08001344 <getNumPills>:

uint8_t getNumPills(){
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	return numPills;
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <getNumPills+0x14>)
 800134a:	781b      	ldrb	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000007c 	.word	0x2000007c

0800135c <dispenserAvailable>:

uint8_t dispenserAvailable(uint8_t disp){
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	return (~used_slots & (0x1 << disp)) >> disp;
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <dispenserAvailable+0x30>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	43da      	mvns	r2, r3
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	401a      	ands	r2, r3
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	fa42 f303 	asr.w	r3, r2, r3
 800137c:	b2db      	uxtb	r3, r3
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000690 	.word	0x20000690

08001390 <deleteDispenser>:

void deleteDispenser(uint8_t disp){
 8001390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001394:	b091      	sub	sp, #68	@ 0x44
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	466b      	mov	r3, sp
 800139e:	60bb      	str	r3, [r7, #8]
	used_slots &= ~(0x1 << disp);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	2201      	movs	r2, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	b25a      	sxtb	r2, r3
 80013ae:	4b98      	ldr	r3, [pc, #608]	@ (8001610 <deleteDispenser+0x280>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b95      	ldr	r3, [pc, #596]	@ (8001610 <deleteDispenser+0x280>)
 80013bc:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t newNumPills = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	pillEntry temp [numPills];
 80013ca:	4b92      	ldr	r3, [pc, #584]	@ (8001614 <deleteDispenser+0x284>)
 80013cc:	781e      	ldrb	r6, [r3, #0]
 80013ce:	4633      	mov	r3, r6
 80013d0:	3b01      	subs	r3, #1
 80013d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013d4:	b2f3      	uxtb	r3, r6
 80013d6:	2200      	movs	r2, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e0:	f04f 0000 	mov.w	r0, #0
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	0159      	lsls	r1, r3, #5
 80013ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ee:	0150      	lsls	r0, r2, #5
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	6839      	ldr	r1, [r7, #0]
 80013f6:	ebb2 0801 	subs.w	r8, r2, r1
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	eb63 0901 	sbc.w	r9, r3, r1
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800140c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001410:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001414:	b2f3      	uxtb	r3, r6
 8001416:	2200      	movs	r2, #0
 8001418:	469a      	mov	sl, r3
 800141a:	4693      	mov	fp, r2
 800141c:	4652      	mov	r2, sl
 800141e:	465b      	mov	r3, fp
 8001420:	f04f 0000 	mov.w	r0, #0
 8001424:	f04f 0100 	mov.w	r1, #0
 8001428:	0159      	lsls	r1, r3, #5
 800142a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800142e:	0150      	lsls	r0, r2, #5
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	ebb2 040a 	subs.w	r4, r2, sl
 8001438:	eb63 050b 	sbc.w	r5, r3, fp
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	00eb      	lsls	r3, r5, #3
 8001446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144a:	00e2      	lsls	r2, r4, #3
 800144c:	4632      	mov	r2, r6
 800144e:	4613      	mov	r3, r2
 8001450:	015b      	lsls	r3, r3, #5
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	3307      	adds	r3, #7
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	ebad 0d03 	sub.w	sp, sp, r3
 800145e:	466b      	mov	r3, sp
 8001460:	3300      	adds	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	@ 0x34
	for (i = 0; i < numPills; i++){
 8001464:	2300      	movs	r3, #0
 8001466:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800146a:	e08d      	b.n	8001588 <deleteDispenser+0x1f8>
		if (pillList[i].dispenserNum != disp){
 800146c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001470:	4969      	ldr	r1, [pc, #420]	@ (8001618 <deleteDispenser+0x288>)
 8001472:	4613      	mov	r3, r2
 8001474:	015b      	lsls	r3, r3, #5
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	440b      	add	r3, r1
 800147a:	3301      	adds	r3, #1
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	429a      	cmp	r2, r3
 8001482:	d07c      	beq.n	800157e <deleteDispenser+0x1ee>
			pillEntry next =  {pillList[i].ID, pillList[i].dispenserNum, " ", pillList[i].hour, pillList[i].min, pillList[i].taken};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	221f      	movs	r2, #31
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f00b fccb 	bl	800ce28 <memset>
 8001492:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001496:	4960      	ldr	r1, [pc, #384]	@ (8001618 <deleteDispenser+0x288>)
 8001498:	4613      	mov	r3, r2
 800149a:	015b      	lsls	r3, r3, #5
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	440b      	add	r3, r1
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	753b      	strb	r3, [r7, #20]
 80014a4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80014a8:	495b      	ldr	r1, [pc, #364]	@ (8001618 <deleteDispenser+0x288>)
 80014aa:	4613      	mov	r3, r2
 80014ac:	015b      	lsls	r3, r3, #5
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	3301      	adds	r3, #1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	757b      	strb	r3, [r7, #21]
 80014b8:	4b58      	ldr	r3, [pc, #352]	@ (800161c <deleteDispenser+0x28c>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	82fb      	strh	r3, [r7, #22]
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	f8c3 2013 	str.w	r2, [r3, #19]
 80014d2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80014d6:	4950      	ldr	r1, [pc, #320]	@ (8001618 <deleteDispenser+0x288>)
 80014d8:	4613      	mov	r3, r2
 80014da:	015b      	lsls	r3, r3, #5
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	440b      	add	r3, r1
 80014e0:	331c      	adds	r3, #28
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014e8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80014ec:	494a      	ldr	r1, [pc, #296]	@ (8001618 <deleteDispenser+0x288>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	331d      	adds	r3, #29
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80014fe:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001502:	4945      	ldr	r1, [pc, #276]	@ (8001618 <deleteDispenser+0x288>)
 8001504:	4613      	mov	r3, r2
 8001506:	015b      	lsls	r3, r3, #5
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	440b      	add	r3, r1
 800150c:	331e      	adds	r3, #30
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
			memcpy(next.name, pillList[i].name, 25);
 8001514:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001518:	4613      	mov	r3, r2
 800151a:	015b      	lsls	r3, r3, #5
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	4a3e      	ldr	r2, [pc, #248]	@ (8001618 <deleteDispenser+0x288>)
 8001520:	4413      	add	r3, r2
 8001522:	1c9a      	adds	r2, r3, #2
 8001524:	f107 0316 	add.w	r3, r7, #22
 8001528:	6810      	ldr	r0, [r2, #0]
 800152a:	6851      	ldr	r1, [r2, #4]
 800152c:	6895      	ldr	r5, [r2, #8]
 800152e:	68d4      	ldr	r4, [r2, #12]
 8001530:	6018      	str	r0, [r3, #0]
 8001532:	6059      	str	r1, [r3, #4]
 8001534:	609d      	str	r5, [r3, #8]
 8001536:	60dc      	str	r4, [r3, #12]
 8001538:	6910      	ldr	r0, [r2, #16]
 800153a:	6951      	ldr	r1, [r2, #20]
 800153c:	6118      	str	r0, [r3, #16]
 800153e:	6159      	str	r1, [r3, #20]
 8001540:	7e12      	ldrb	r2, [r2, #24]
 8001542:	761a      	strb	r2, [r3, #24]
			temp[newNumPills] = next;
 8001544:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001548:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800154a:	4613      	mov	r3, r2
 800154c:	015b      	lsls	r3, r3, #5
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	440b      	add	r3, r1
 8001552:	461d      	mov	r5, r3
 8001554:	f107 0414 	add.w	r4, r7, #20
 8001558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155a:	6028      	str	r0, [r5, #0]
 800155c:	6069      	str	r1, [r5, #4]
 800155e:	60aa      	str	r2, [r5, #8]
 8001560:	60eb      	str	r3, [r5, #12]
 8001562:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001564:	6128      	str	r0, [r5, #16]
 8001566:	6169      	str	r1, [r5, #20]
 8001568:	61aa      	str	r2, [r5, #24]
 800156a:	8823      	ldrh	r3, [r4, #0]
 800156c:	78a2      	ldrb	r2, [r4, #2]
 800156e:	83ab      	strh	r3, [r5, #28]
 8001570:	4613      	mov	r3, r2
 8001572:	77ab      	strb	r3, [r5, #30]
			newNumPills++;
 8001574:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001578:	3301      	adds	r3, #1
 800157a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for (i = 0; i < numPills; i++){
 800157e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001582:	3301      	adds	r3, #1
 8001584:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <deleteDispenser+0x284>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001590:	429a      	cmp	r2, r3
 8001592:	f4ff af6b 	bcc.w	800146c <deleteDispenser+0xdc>
		}
	}


	for (i = 0; i < newNumPills; i++){
 8001596:	2300      	movs	r3, #0
 8001598:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800159c:	e025      	b.n	80015ea <deleteDispenser+0x25a>
		pillList[i] = temp[i];
 800159e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80015a2:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80015a6:	481c      	ldr	r0, [pc, #112]	@ (8001618 <deleteDispenser+0x288>)
 80015a8:	460b      	mov	r3, r1
 80015aa:	015b      	lsls	r3, r3, #5
 80015ac:	1a5b      	subs	r3, r3, r1
 80015ae:	4418      	add	r0, r3
 80015b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80015b2:	4613      	mov	r3, r2
 80015b4:	015b      	lsls	r3, r3, #5
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	18ca      	adds	r2, r1, r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	6814      	ldr	r4, [r2, #0]
 80015be:	6850      	ldr	r0, [r2, #4]
 80015c0:	6891      	ldr	r1, [r2, #8]
 80015c2:	68d5      	ldr	r5, [r2, #12]
 80015c4:	601c      	str	r4, [r3, #0]
 80015c6:	6058      	str	r0, [r3, #4]
 80015c8:	6099      	str	r1, [r3, #8]
 80015ca:	60dd      	str	r5, [r3, #12]
 80015cc:	6914      	ldr	r4, [r2, #16]
 80015ce:	6950      	ldr	r0, [r2, #20]
 80015d0:	6991      	ldr	r1, [r2, #24]
 80015d2:	611c      	str	r4, [r3, #16]
 80015d4:	6158      	str	r0, [r3, #20]
 80015d6:	6199      	str	r1, [r3, #24]
 80015d8:	8b91      	ldrh	r1, [r2, #28]
 80015da:	7f92      	ldrb	r2, [r2, #30]
 80015dc:	8399      	strh	r1, [r3, #28]
 80015de:	779a      	strb	r2, [r3, #30]
	for (i = 0; i < newNumPills; i++){
 80015e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015e4:	3301      	adds	r3, #1
 80015e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80015ea:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80015ee:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3d3      	bcc.n	800159e <deleteDispenser+0x20e>
	}

	sortEntries();
 80015f6:	f7ff fcdd 	bl	8000fb4 <sortEntries>
	numPills = newNumPills;
 80015fa:	4a06      	ldr	r2, [pc, #24]	@ (8001614 <deleteDispenser+0x284>)
 80015fc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001600:	7013      	strb	r3, [r2, #0]
	return;
 8001602:	bf00      	nop
 8001604:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8001608:	3744      	adds	r7, #68	@ 0x44
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001610:	20000690 	.word	0x20000690
 8001614:	2000007c 	.word	0x2000007c
 8001618:	20000080 	.word	0x20000080
 800161c:	0800e7a0 	.word	0x0800e7a0

08001620 <clearPillList>:


void clearPillList(){
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	numPills = 0;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <clearPillList+0x14>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	2000007c 	.word	0x2000007c

08001638 <loadNewPillsDisplay>:

void loadNewPillsDisplay(uint8_t dispNum, uint8_t pillOption, uint8_t * daysofWeek, uint8_t hour, uint8_t Minute, uint8_t AMPM){
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b08d      	sub	sp, #52	@ 0x34
 800163c:	af02      	add	r7, sp, #8
 800163e:	603a      	str	r2, [r7, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	460b      	mov	r3, r1
 8001648:	71bb      	strb	r3, [r7, #6]
 800164a:	4613      	mov	r3, r2
 800164c:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char name[25];

	switch (pillOption){
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	3b67      	subs	r3, #103	@ 0x67
 8001658:	2b12      	cmp	r3, #18
 800165a:	d849      	bhi.n	80016f0 <loadNewPillsDisplay+0xb8>
 800165c:	a201      	add	r2, pc, #4	@ (adr r2, 8001664 <loadNewPillsDisplay+0x2c>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	080016d1 	.word	0x080016d1
 8001668:	080016e1 	.word	0x080016e1
 800166c:	080016f1 	.word	0x080016f1
 8001670:	080016f1 	.word	0x080016f1
 8001674:	080016f1 	.word	0x080016f1
 8001678:	080016f1 	.word	0x080016f1
 800167c:	080016f1 	.word	0x080016f1
 8001680:	080016f1 	.word	0x080016f1
 8001684:	080016f1 	.word	0x080016f1
 8001688:	080016f1 	.word	0x080016f1
 800168c:	080016f1 	.word	0x080016f1
 8001690:	080016b1 	.word	0x080016b1
 8001694:	080016f1 	.word	0x080016f1
 8001698:	080016f1 	.word	0x080016f1
 800169c:	080016f1 	.word	0x080016f1
 80016a0:	080016f1 	.word	0x080016f1
 80016a4:	080016f1 	.word	0x080016f1
 80016a8:	080016f1 	.word	0x080016f1
 80016ac:	080016c1 	.word	0x080016c1
	case 'r':
		memcpy(name, "Red Skittle", 12);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	220c      	movs	r2, #12
 80016b6:	492a      	ldr	r1, [pc, #168]	@ (8001760 <loadNewPillsDisplay+0x128>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00b fbe9 	bl	800ce90 <memcpy>
		break;
 80016be:	e017      	b.n	80016f0 <loadNewPillsDisplay+0xb8>
	case 'y':
		memcpy(name, "Yellow Skittle", 15);
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	220f      	movs	r2, #15
 80016c6:	4927      	ldr	r1, [pc, #156]	@ (8001764 <loadNewPillsDisplay+0x12c>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00b fbe1 	bl	800ce90 <memcpy>
		break;
 80016ce:	e00f      	b.n	80016f0 <loadNewPillsDisplay+0xb8>
	case 'g':
		memcpy(name, "Green Skittle", 14);
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	220e      	movs	r2, #14
 80016d6:	4924      	ldr	r1, [pc, #144]	@ (8001768 <loadNewPillsDisplay+0x130>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f00b fbd9 	bl	800ce90 <memcpy>
		break;
 80016de:	e007      	b.n	80016f0 <loadNewPillsDisplay+0xb8>
	case 'h':
		memcpy(name, "Hot Tamale", 11);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	220b      	movs	r2, #11
 80016e6:	4921      	ldr	r1, [pc, #132]	@ (800176c <loadNewPillsDisplay+0x134>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00b fbd1 	bl	800ce90 <memcpy>
		break;
 80016ee:	bf00      	nop
	}




	for (i = 0; i < 7; i++){
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80016f6:	e02a      	b.n	800174e <loadNewPillsDisplay+0x116>
		if (daysofWeek[i]){
 80016f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01e      	beq.n	8001744 <loadNewPillsDisplay+0x10c>
			loadNewPillEntry(dispNum, name, i, hour % 12 + (AMPM * 12), Minute);
 8001706:	797a      	ldrb	r2, [r7, #5]
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <loadNewPillsDisplay+0x138>)
 800170a:	fba3 1302 	umull	r1, r3, r3, r2
 800170e:	08d9      	lsrs	r1, r3, #3
 8001710:	460b      	mov	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	b2da      	uxtb	r2, r3
 800171c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001720:	4619      	mov	r1, r3
 8001722:	0049      	lsls	r1, r1, #1
 8001724:	440b      	add	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	b2dc      	uxtb	r4, r3
 800172e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001732:	f107 010c 	add.w	r1, r7, #12
 8001736:	79f8      	ldrb	r0, [r7, #7]
 8001738:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4623      	mov	r3, r4
 8001740:	f000 f818 	bl	8001774 <loadNewPillEntry>
	for (i = 0; i < 7; i++){
 8001744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001748:	3301      	adds	r3, #1
 800174a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800174e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001752:	2b06      	cmp	r3, #6
 8001754:	d9d0      	bls.n	80016f8 <loadNewPillsDisplay+0xc0>

		}
	}

}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	372c      	adds	r7, #44	@ 0x2c
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	0800e7bc 	.word	0x0800e7bc
 8001764:	0800e7c8 	.word	0x0800e7c8
 8001768:	0800e7d8 	.word	0x0800e7d8
 800176c:	0800e7e8 	.word	0x0800e7e8
 8001770:	aaaaaaab 	.word	0xaaaaaaab

08001774 <loadNewPillEntry>:
//explicitly ONLY for when we are loading in a pre-sorted list of entries.
void loadNewPillEntry(uint8_t dispenserNum, char * name, uint8_t dayofWeek, uint8_t hour, uint8_t min){
 8001774:	b4b0      	push	{r4, r5, r7}
 8001776:	b08b      	sub	sp, #44	@ 0x2c
 8001778:	af00      	add	r7, sp, #0
 800177a:	6039      	str	r1, [r7, #0]
 800177c:	4611      	mov	r1, r2
 800177e:	461a      	mov	r2, r3
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
 8001784:	460b      	mov	r3, r1
 8001786:	71bb      	strb	r3, [r7, #6]
 8001788:	4613      	mov	r3, r2
 800178a:	717b      	strb	r3, [r7, #5]
	//uint8_t ID; uint8_t dispenserNum; char * name; uint8_t dayofWeek; uint8_t hour; uint8_t min; uint8_t taken;
	//lmao don't know how to do this a better way but it might work ig
	pillEntry wew = {numPills, dispenserNum, " ", dayofWeek, hour, min, 1};
 800178c:	4b30      	ldr	r3, [pc, #192]	@ (8001850 <loadNewPillEntry+0xdc>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	723b      	strb	r3, [r7, #8]
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	727b      	strb	r3, [r7, #9]
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <loadNewPillEntry+0xe0>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	817b      	strh	r3, [r7, #10]
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	f8c3 2013 	str.w	r2, [r3, #19]
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017b6:	797b      	ldrb	r3, [r7, #5]
 80017b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80017bc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80017c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	memcpy(wew.name, name, 25);
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	f107 030a 	add.w	r3, r7, #10
 80017d0:	6810      	ldr	r0, [r2, #0]
 80017d2:	6851      	ldr	r1, [r2, #4]
 80017d4:	6895      	ldr	r5, [r2, #8]
 80017d6:	68d4      	ldr	r4, [r2, #12]
 80017d8:	6018      	str	r0, [r3, #0]
 80017da:	6059      	str	r1, [r3, #4]
 80017dc:	609d      	str	r5, [r3, #8]
 80017de:	60dc      	str	r4, [r3, #12]
 80017e0:	6910      	ldr	r0, [r2, #16]
 80017e2:	6951      	ldr	r1, [r2, #20]
 80017e4:	6118      	str	r0, [r3, #16]
 80017e6:	6159      	str	r1, [r3, #20]
 80017e8:	7e12      	ldrb	r2, [r2, #24]
 80017ea:	761a      	strb	r2, [r3, #24]
	used_slots |= 0x1 << dispenserNum;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2201      	movs	r2, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	b25a      	sxtb	r2, r3
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <loadNewPillEntry+0xe4>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <loadNewPillEntry+0xe4>)
 8001804:	701a      	strb	r2, [r3, #0]
	pillList[numPills] = wew;
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <loadNewPillEntry+0xdc>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	4a13      	ldr	r2, [pc, #76]	@ (800185c <loadNewPillEntry+0xe8>)
 800180e:	460b      	mov	r3, r1
 8001810:	015b      	lsls	r3, r3, #5
 8001812:	1a5b      	subs	r3, r3, r1
 8001814:	4413      	add	r3, r2
 8001816:	461d      	mov	r5, r3
 8001818:	f107 0408 	add.w	r4, r7, #8
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	6028      	str	r0, [r5, #0]
 8001820:	6069      	str	r1, [r5, #4]
 8001822:	60aa      	str	r2, [r5, #8]
 8001824:	60eb      	str	r3, [r5, #12]
 8001826:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001828:	6128      	str	r0, [r5, #16]
 800182a:	6169      	str	r1, [r5, #20]
 800182c:	61aa      	str	r2, [r5, #24]
 800182e:	8823      	ldrh	r3, [r4, #0]
 8001830:	78a2      	ldrb	r2, [r4, #2]
 8001832:	83ab      	strh	r3, [r5, #28]
 8001834:	4613      	mov	r3, r2
 8001836:	77ab      	strb	r3, [r5, #30]
	numPills++;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <loadNewPillEntry+0xdc>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <loadNewPillEntry+0xdc>)
 8001842:	701a      	strb	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	372c      	adds	r7, #44	@ 0x2c
 8001848:	46bd      	mov	sp, r7
 800184a:	bcb0      	pop	{r4, r5, r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2000007c 	.word	0x2000007c
 8001854:	0800e7a0 	.word	0x0800e7a0
 8001858:	20000690 	.word	0x20000690
 800185c:	20000080 	.word	0x20000080

08001860 <automaticDispense>:


void automaticDispense(){
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	uint8_t i = last_taken_pill_idx;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <automaticDispense+0x64>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
	for (; i < next_time_pill_idx; i++){
 800186c:	e01c      	b.n	80018a8 <automaticDispense+0x48>
		switch(pillList[i].dispenserNum){
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	4915      	ldr	r1, [pc, #84]	@ (80018c8 <automaticDispense+0x68>)
 8001872:	4613      	mov	r3, r2
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	440b      	add	r3, r1
 800187a:	3301      	adds	r3, #1
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d00c      	beq.n	800189c <automaticDispense+0x3c>
 8001882:	2b02      	cmp	r3, #2
 8001884:	dc0d      	bgt.n	80018a2 <automaticDispense+0x42>
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <automaticDispense+0x30>
 800188a:	2b01      	cmp	r3, #1
 800188c:	d003      	beq.n	8001896 <automaticDispense+0x36>
 800188e:	e008      	b.n	80018a2 <automaticDispense+0x42>
		case 0:
			Dispense1();
 8001890:	f000 f81e 	bl	80018d0 <Dispense1>
			break;
 8001894:	e005      	b.n	80018a2 <automaticDispense+0x42>
		case 1:
			Dispense2();
 8001896:	f000 f84b 	bl	8001930 <Dispense2>
			break;
 800189a:	e002      	b.n	80018a2 <automaticDispense+0x42>
		case 2:
			Dispense3();
 800189c:	f000 f87c 	bl	8001998 <Dispense3>
			break;
 80018a0:	bf00      	nop
	for (; i < next_time_pill_idx; i++){
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	3301      	adds	r3, #1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <automaticDispense+0x6c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3dd      	bcc.n	800186e <automaticDispense+0xe>
		}
	}
	last_taken_pill_idx = i - 1;
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b02      	ldr	r3, [pc, #8]	@ (80018c4 <automaticDispense+0x64>)
 80018ba:	701a      	strb	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000068f 	.word	0x2000068f
 80018c8:	20000080 	.word	0x20000080
 80018cc:	2000068e 	.word	0x2000068e

080018d0 <Dispense1>:

void Dispense1(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018da:	4813      	ldr	r0, [pc, #76]	@ (8001928 <Dispense1+0x58>)
 80018dc:	f006 fde6 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2108      	movs	r1, #8
 80018e4:	4811      	ldr	r0, [pc, #68]	@ (800192c <Dispense1+0x5c>)
 80018e6:	f006 fde1 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2120      	movs	r1, #32
 80018ee:	480f      	ldr	r0, [pc, #60]	@ (800192c <Dispense1+0x5c>)
 80018f0:	f006 fddc 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018f8:	f006 f92c 	bl	8007b54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2120      	movs	r1, #32
 8001900:	480a      	ldr	r0, [pc, #40]	@ (800192c <Dispense1+0x5c>)
 8001902:	f006 fdd3 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	2108      	movs	r1, #8
 800190a:	4808      	ldr	r0, [pc, #32]	@ (800192c <Dispense1+0x5c>)
 800190c:	f006 fdce 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001910:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001914:	f006 f91e 	bl	8007b54 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800191e:	4802      	ldr	r0, [pc, #8]	@ (8001928 <Dispense1+0x58>)
 8001920:	f006 fdc4 	bl	80084ac <HAL_GPIO_WritePin>

	return;
 8001924:	bf00      	nop
}
 8001926:	bd80      	pop	{r7, pc}
 8001928:	48000800 	.word	0x48000800
 800192c:	48001400 	.word	0x48001400

08001930 <Dispense2>:

void Dispense2(){
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800193a:	4815      	ldr	r0, [pc, #84]	@ (8001990 <Dispense2+0x60>)
 800193c:	f006 fdb6 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001946:	4812      	ldr	r0, [pc, #72]	@ (8001990 <Dispense2+0x60>)
 8001948:	f006 fdb0 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001952:	4810      	ldr	r0, [pc, #64]	@ (8001994 <Dispense2+0x64>)
 8001954:	f006 fdaa 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001958:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800195c:	f006 f8fa 	bl	8007b54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001966:	480b      	ldr	r0, [pc, #44]	@ (8001994 <Dispense2+0x64>)
 8001968:	f006 fda0 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001972:	4807      	ldr	r0, [pc, #28]	@ (8001990 <Dispense2+0x60>)
 8001974:	f006 fd9a 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001978:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800197c:	f006 f8ea 	bl	8007b54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001986:	4802      	ldr	r0, [pc, #8]	@ (8001990 <Dispense2+0x60>)
 8001988:	f006 fd90 	bl	80084ac <HAL_GPIO_WritePin>

	return;
 800198c:	bf00      	nop
}
 800198e:	bd80      	pop	{r7, pc}
 8001990:	48001000 	.word	0x48001000
 8001994:	48001400 	.word	0x48001400

08001998 <Dispense3>:

void Dispense3(){
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a2:	4815      	ldr	r0, [pc, #84]	@ (80019f8 <Dispense3+0x60>)
 80019a4:	f006 fd82 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ae:	4812      	ldr	r0, [pc, #72]	@ (80019f8 <Dispense3+0x60>)
 80019b0:	f006 fd7c 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ba:	4810      	ldr	r0, [pc, #64]	@ (80019fc <Dispense3+0x64>)
 80019bc:	f006 fd76 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80019c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019c4:	f006 f8c6 	bl	8007b54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ce:	480a      	ldr	r0, [pc, #40]	@ (80019f8 <Dispense3+0x60>)
 80019d0:	f006 fd6c 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019da:	4808      	ldr	r0, [pc, #32]	@ (80019fc <Dispense3+0x64>)
 80019dc:	f006 fd66 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80019e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019e4:	f006 f8b6 	bl	8007b54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ee:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <Dispense3+0x60>)
 80019f0:	f006 fd5c 	bl	80084ac <HAL_GPIO_WritePin>
	return;
 80019f4:	bf00      	nop
}
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	48001400 	.word	0x48001400
 80019fc:	48001000 	.word	0x48001000

08001a00 <Pixy_init>:
#include <stdint.h>
#include "Pixy.h"

I2C_HandleTypeDef * pixyi2c;

void Pixy_init(I2C_HandleTypeDef * i2c){
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	pixyi2c = i2c;
 8001a08:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <Pixy_init+0x1c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000694 	.word	0x20000694

08001a20 <sendToPixy>:
void sendToPixy(uint8_t *data, uint8_t length){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET); // Driving SPI SS for Pixy low (because it is active low)

	//HAL_SPI_Transmit(&hspi1, data, length, 1000);

	HAL_I2C_Master_Transmit(pixyi2c, 0x54 << 1, data, length, 1000);
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <sendToPixy+0x2c>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a38:	9200      	str	r2, [sp, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	21a8      	movs	r1, #168	@ 0xa8
 8001a3e:	f006 fde9 	bl	8008614 <HAL_I2C_Master_Transmit>

}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000694 	.word	0x20000694

08001a50 <recvFromPixy>:


void recvFromPixy(uint8_t *data, uint8_t length){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]

	//HAL_SPI_Receive(&hspi1, data, length, 1000);

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);

	HAL_I2C_Master_Receive(pixyi2c, 0x54 << 1, data, length, 1000);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <recvFromPixy+0x2c>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a68:	9200      	str	r2, [sp, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	21a8      	movs	r1, #168	@ 0xa8
 8001a6e:	f006 fee9 	bl	8008844 <HAL_I2C_Master_Receive>

}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000694 	.word	0x20000694

08001a80 <Scan>:



uint8_t Scan(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0b2      	sub	sp, #200	@ 0xc8
 8001a84:	af00      	add	r7, sp, #0


	uint8_t recvBuf[150] = {0x00};
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8e:	2292      	movs	r2, #146	@ 0x92
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f00b f9c8 	bl	800ce28 <memset>


	uint8_t versionRequest[] = {
 8001a98:	4b6c      	ldr	r3, [pc, #432]	@ (8001c4c <Scan+0x1cc>)
 8001a9a:	61fb      	str	r3, [r7, #28]
		0x00

	  };


	sendToPixy(versionRequest, 4); // This is the dummy transaction
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ffbc 	bl	8001a20 <sendToPixy>

	HAL_Delay(100);
 8001aa8:	2064      	movs	r0, #100	@ 0x64
 8001aaa:	f006 f853 	bl	8007b54 <HAL_Delay>

    recvFromPixy(recvBuf, 12);
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	210c      	movs	r1, #12
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ffcb 	bl	8001a50 <recvFromPixy>


    // Light Setting and also transaction to find idx


    uint8_t setLampON[] = {
 8001aba:	4a65      	ldr	r2, [pc, #404]	@ (8001c50 <Scan+0x1d0>)
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac4:	6018      	str	r0, [r3, #0]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	8019      	strh	r1, [r3, #0]
			  0x01

    };


    uint8_t setLampOFF[] = {
 8001aca:	4a62      	ldr	r2, [pc, #392]	@ (8001c54 <Scan+0x1d4>)
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad4:	6018      	str	r0, [r3, #0]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	8019      	strh	r1, [r3, #0]
      		  0x00

    };


    sendToPixy(setLampON, 6);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	2106      	movs	r1, #6
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff9d 	bl	8001a20 <sendToPixy>

	HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	@ 0x64
 8001ae8:	f006 f834 	bl	8007b54 <HAL_Delay>

	recvFromPixy(recvBuf, 10);
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	210a      	movs	r1, #10
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ffac 	bl	8001a50 <recvFromPixy>
//	}


	//getBlocks command can now process properly

	uint8_t getBlocks[] = {
 8001af8:	4a57      	ldr	r2, [pc, #348]	@ (8001c58 <Scan+0x1d8>)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b00:	6018      	str	r0, [r3, #0]
 8001b02:	3304      	adds	r3, #4
 8001b04:	8019      	strh	r1, [r3, #0]
			  0x01 // Returning 1 block

	};


	sendToPixy(getBlocks, 6);
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2106      	movs	r1, #6
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff88 	bl	8001a20 <sendToPixy>

    HAL_Delay(100);
 8001b10:	2064      	movs	r0, #100	@ 0x64
 8001b12:	f006 f81f 	bl	8007b54 <HAL_Delay>

    recvFromPixy(recvBuf, 20);
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	2114      	movs	r1, #20
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff97 	bl	8001a50 <recvFromPixy>


    int timer = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc


    uint8_t color_sig = recvBuf[6];
 8001b28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b2c:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7


    while ((color_sig > 4) & (timer < 20)){
 8001b30:	e011      	b.n	8001b56 <Scan+0xd6>

    	color_sig = recvBuf[6];
 8001b32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b36:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

    	sendToPixy(getBlocks, 6);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2106      	movs	r1, #6
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff6e 	bl	8001a20 <sendToPixy>

		HAL_Delay(100);
 8001b44:	2064      	movs	r0, #100	@ 0x64
 8001b46:	f006 f805 	bl	8007b54 <HAL_Delay>

		recvFromPixy(recvBuf, 20);
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	2114      	movs	r1, #20
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff7d 	bl	8001a50 <recvFromPixy>
    while ((color_sig > 4) & (timer < 20)){
 8001b56:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf8c      	ite	hi
 8001b5e:	2301      	movhi	r3, #1
 8001b60:	2300      	movls	r3, #0
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b68:	2b13      	cmp	r3, #19
 8001b6a:	bfd4      	ite	le
 8001b6c:	2301      	movle	r3, #1
 8001b6e:	2300      	movgt	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4013      	ands	r3, r2
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1db      	bne.n	8001b32 <Scan+0xb2>

    }


    if (timer == 20){return 5;}
 8001b7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b7e:	2b14      	cmp	r3, #20
 8001b80:	d101      	bne.n	8001b86 <Scan+0x106>
 8001b82:	2305      	movs	r3, #5
 8001b84:	e05e      	b.n	8001c44 <Scan+0x1c4>


	color_sig = recvBuf[6];
 8001b86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b8a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	uint16_t width_val = recvBuf[12];
 8001b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b92:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba

    uint16_t height_val = recvBuf[14];
 8001b96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b9a:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8


    uint16_t longest = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4

    uint16_t changeable_val = 80;
 8001ba4:	2350      	movs	r3, #80	@ 0x50
 8001ba6:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    uint8_t response;

    //char color;


    if (height_val > width_val){ longest = height_val;}
 8001baa:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8001bae:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d904      	bls.n	8001bc0 <Scan+0x140>
 8001bb6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8001bba:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
 8001bbe:	e003      	b.n	8001bc8 <Scan+0x148>

    else{ longest = width_val;}
 8001bc0:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8001bc4:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    // 4 is hot tamale

    // 5 is a bad bad sign


    if (longest < 10){response = 0;}
 8001bc8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8001bcc:	2b09      	cmp	r3, #9
 8001bce:	d803      	bhi.n	8001bd8 <Scan+0x158>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8001bd6:	e024      	b.n	8001c22 <Scan+0x1a2>

    else if (longest > changeable_val){response = 4;}
 8001bd8:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	@ 0xc4
 8001bdc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d903      	bls.n	8001bec <Scan+0x16c>
 8001be4:	2304      	movs	r3, #4
 8001be6:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8001bea:	e01a      	b.n	8001c22 <Scan+0x1a2>

    else if (color_sig == 1){response = 1;}
 8001bec:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d103      	bne.n	8001bfc <Scan+0x17c>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8001bfa:	e012      	b.n	8001c22 <Scan+0x1a2>

    else if (color_sig == 3){response = 2;}
 8001bfc:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d103      	bne.n	8001c0c <Scan+0x18c>
 8001c04:	2302      	movs	r3, #2
 8001c06:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8001c0a:	e00a      	b.n	8001c22 <Scan+0x1a2>

    else if (color_sig == 4){response = 3;}
 8001c0c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d103      	bne.n	8001c1c <Scan+0x19c>
 8001c14:	2303      	movs	r3, #3
 8001c16:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8001c1a:	e002      	b.n	8001c22 <Scan+0x1a2>

    else {response = 5;}
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3



    sendToPixy(setLampOFF, 6);
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	2106      	movs	r1, #6
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fef9 	bl	8001a20 <sendToPixy>

	HAL_Delay(100);
 8001c2e:	2064      	movs	r0, #100	@ 0x64
 8001c30:	f005 ff90 	bl	8007b54 <HAL_Delay>

	recvFromPixy(recvBuf, 10);
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	210a      	movs	r1, #10
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff08 	bl	8001a50 <recvFromPixy>


	return response;
 8001c40:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3

}
 8001c44:	4618      	mov	r0, r3
 8001c46:	37c8      	adds	r7, #200	@ 0xc8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	000ec1ae 	.word	0x000ec1ae
 8001c50:	0800e7f4 	.word	0x0800e7f4
 8001c54:	0800e7fc 	.word	0x0800e7fc
 8001c58:	0800e804 	.word	0x0800e804

08001c5c <lock>:
 */

#ifndef INC_STEPPER_H_
#define INC_STEPPER_H_

void lock(){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2140      	movs	r1, #64	@ 0x40
 8001c66:	4815      	ldr	r0, [pc, #84]	@ (8001cbc <lock+0x60>)
 8001c68:	f006 fc20 	bl	80084ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4812      	ldr	r0, [pc, #72]	@ (8001cbc <lock+0x60>)
 8001c72:	f006 fc1b 	bl	80084ac <HAL_GPIO_WritePin>
    for(int i=1;i<=100;i++){  //Moving stepper motor forward
 8001c76:	2301      	movs	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	e012      	b.n	8001ca2 <lock+0x46>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2101      	movs	r1, #1
 8001c80:	480e      	ldr	r0, [pc, #56]	@ (8001cbc <lock+0x60>)
 8001c82:	f006 fc13 	bl	80084ac <HAL_GPIO_WritePin>
      HAL_Delay(25);
 8001c86:	2019      	movs	r0, #25
 8001c88:	f005 ff64 	bl	8007b54 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2101      	movs	r1, #1
 8001c90:	480a      	ldr	r0, [pc, #40]	@ (8001cbc <lock+0x60>)
 8001c92:	f006 fc0b 	bl	80084ac <HAL_GPIO_WritePin>
      HAL_Delay(25);
 8001c96:	2019      	movs	r0, #25
 8001c98:	f005 ff5c 	bl	8007b54 <HAL_Delay>
    for(int i=1;i<=100;i++){  //Moving stepper motor forward
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b64      	cmp	r3, #100	@ 0x64
 8001ca6:	dde9      	ble.n	8001c7c <lock+0x20>
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2140      	movs	r1, #64	@ 0x40
 8001cac:	4803      	ldr	r0, [pc, #12]	@ (8001cbc <lock+0x60>)
 8001cae:	f006 fbfd 	bl	80084ac <HAL_GPIO_WritePin>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	48000800 	.word	0x48000800

08001cc0 <unlock>:
void unlock(){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2140      	movs	r1, #64	@ 0x40
 8001cca:	4815      	ldr	r0, [pc, #84]	@ (8001d20 <unlock+0x60>)
 8001ccc:	f006 fbee 	bl	80084ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	4812      	ldr	r0, [pc, #72]	@ (8001d20 <unlock+0x60>)
 8001cd6:	f006 fbe9 	bl	80084ac <HAL_GPIO_WritePin>
    for(int i=1;i<=100;i++){  //Moving stepper motor forward
 8001cda:	2301      	movs	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	e012      	b.n	8001d06 <unlock+0x46>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	480e      	ldr	r0, [pc, #56]	@ (8001d20 <unlock+0x60>)
 8001ce6:	f006 fbe1 	bl	80084ac <HAL_GPIO_WritePin>
      HAL_Delay(25);
 8001cea:	2019      	movs	r0, #25
 8001cec:	f005 ff32 	bl	8007b54 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	480a      	ldr	r0, [pc, #40]	@ (8001d20 <unlock+0x60>)
 8001cf6:	f006 fbd9 	bl	80084ac <HAL_GPIO_WritePin>
      HAL_Delay(25);
 8001cfa:	2019      	movs	r0, #25
 8001cfc:	f005 ff2a 	bl	8007b54 <HAL_Delay>
    for(int i=1;i<=100;i++){  //Moving stepper motor forward
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3301      	adds	r3, #1
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b64      	cmp	r3, #100	@ 0x64
 8001d0a:	dde9      	ble.n	8001ce0 <unlock+0x20>
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2140      	movs	r1, #64	@ 0x40
 8001d10:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <unlock+0x60>)
 8001d12:	f006 fbcb 	bl	80084ac <HAL_GPIO_WritePin>
};
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	48000800 	.word	0x48000800

08001d24 <authenticate>:
#define _Open_Sans_Bold_128      &Open_Sans_Bold_128

	uint16_t touchX = 0;
	uint16_t touchY = 0;

void authenticate(){
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b094      	sub	sp, #80	@ 0x50
 8001d28:	af02      	add	r7, sp, #8
	   fillScreen(ILI9488_WHITE);
 8001d2a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d2e:	f003 fdc1 	bl	80058b4 <fillScreen>
		uint16_t touchX = 0, touchY = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	   fillRect(100, 30,75,75, ILI9488_RED);
 8001d3e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	234b      	movs	r3, #75	@ 0x4b
 8001d46:	224b      	movs	r2, #75	@ 0x4b
 8001d48:	211e      	movs	r1, #30
 8001d4a:	2064      	movs	r0, #100	@ 0x64
 8001d4c:	f003 fdcc 	bl	80058e8 <fillRect>
	   drawCharTest(130, 55, '1', ILI9488_WHITE,ILI9488_RED, 3);
 8001d50:	2303      	movs	r3, #3
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d5e:	2231      	movs	r2, #49	@ 0x31
 8001d60:	2137      	movs	r1, #55	@ 0x37
 8001d62:	2082      	movs	r0, #130	@ 0x82
 8001d64:	f004 f8c4 	bl	8005ef0 <drawCharTest>
	   fillRect(200, 30,75,75, ILI9488_RED);
 8001d68:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	234b      	movs	r3, #75	@ 0x4b
 8001d70:	224b      	movs	r2, #75	@ 0x4b
 8001d72:	211e      	movs	r1, #30
 8001d74:	20c8      	movs	r0, #200	@ 0xc8
 8001d76:	f003 fdb7 	bl	80058e8 <fillRect>
	   drawCharTest(230, 55, '2', ILI9488_WHITE,ILI9488_RED, 3);
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d88:	2232      	movs	r2, #50	@ 0x32
 8001d8a:	2137      	movs	r1, #55	@ 0x37
 8001d8c:	20e6      	movs	r0, #230	@ 0xe6
 8001d8e:	f004 f8af 	bl	8005ef0 <drawCharTest>
	   fillRect(300, 30,75,75, ILI9488_RED);
 8001d92:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	234b      	movs	r3, #75	@ 0x4b
 8001d9a:	224b      	movs	r2, #75	@ 0x4b
 8001d9c:	211e      	movs	r1, #30
 8001d9e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001da2:	f003 fda1 	bl	80058e8 <fillRect>
	   drawCharTest(319, 55, '3', ILI9488_WHITE,ILI9488_RED, 3);
 8001da6:	2303      	movs	r3, #3
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001db4:	2233      	movs	r2, #51	@ 0x33
 8001db6:	2137      	movs	r1, #55	@ 0x37
 8001db8:	f240 103f 	movw	r0, #319	@ 0x13f
 8001dbc:	f004 f898 	bl	8005ef0 <drawCharTest>
	   fillRect(100, 130,75,75, ILI9488_RED);
 8001dc0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	234b      	movs	r3, #75	@ 0x4b
 8001dc8:	224b      	movs	r2, #75	@ 0x4b
 8001dca:	2182      	movs	r1, #130	@ 0x82
 8001dcc:	2064      	movs	r0, #100	@ 0x64
 8001dce:	f003 fd8b 	bl	80058e8 <fillRect>
	   drawCharTest(130, 150, '4', ILI9488_WHITE,ILI9488_RED, 3);
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001de0:	2234      	movs	r2, #52	@ 0x34
 8001de2:	2196      	movs	r1, #150	@ 0x96
 8001de4:	2082      	movs	r0, #130	@ 0x82
 8001de6:	f004 f883 	bl	8005ef0 <drawCharTest>
	   fillRect(200, 130,75,75, ILI9488_RED);
 8001dea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	234b      	movs	r3, #75	@ 0x4b
 8001df2:	224b      	movs	r2, #75	@ 0x4b
 8001df4:	2182      	movs	r1, #130	@ 0x82
 8001df6:	20c8      	movs	r0, #200	@ 0xc8
 8001df8:	f003 fd76 	bl	80058e8 <fillRect>
	   drawCharTest(230, 150, '5', ILI9488_WHITE,ILI9488_RED, 3);
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e0a:	2235      	movs	r2, #53	@ 0x35
 8001e0c:	2196      	movs	r1, #150	@ 0x96
 8001e0e:	20e6      	movs	r0, #230	@ 0xe6
 8001e10:	f004 f86e 	bl	8005ef0 <drawCharTest>
	   fillRect(300, 130,75,75, ILI9488_RED);
 8001e14:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	234b      	movs	r3, #75	@ 0x4b
 8001e1c:	224b      	movs	r2, #75	@ 0x4b
 8001e1e:	2182      	movs	r1, #130	@ 0x82
 8001e20:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001e24:	f003 fd60 	bl	80058e8 <fillRect>
	   drawCharTest(319, 150, '6', ILI9488_WHITE,ILI9488_RED, 3);
 8001e28:	2303      	movs	r3, #3
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e36:	2236      	movs	r2, #54	@ 0x36
 8001e38:	2196      	movs	r1, #150	@ 0x96
 8001e3a:	f240 103f 	movw	r0, #319	@ 0x13f
 8001e3e:	f004 f857 	bl	8005ef0 <drawCharTest>
	   fillRect(100, 230,75,75, ILI9488_RED);
 8001e42:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	234b      	movs	r3, #75	@ 0x4b
 8001e4a:	224b      	movs	r2, #75	@ 0x4b
 8001e4c:	21e6      	movs	r1, #230	@ 0xe6
 8001e4e:	2064      	movs	r0, #100	@ 0x64
 8001e50:	f003 fd4a 	bl	80058e8 <fillRect>
	   drawCharTest(130, 250, '7', ILI9488_WHITE,ILI9488_RED, 3);
 8001e54:	2303      	movs	r3, #3
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e62:	2237      	movs	r2, #55	@ 0x37
 8001e64:	21fa      	movs	r1, #250	@ 0xfa
 8001e66:	2082      	movs	r0, #130	@ 0x82
 8001e68:	f004 f842 	bl	8005ef0 <drawCharTest>
	   fillRect(200, 230,75,75, ILI9488_RED);
 8001e6c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	234b      	movs	r3, #75	@ 0x4b
 8001e74:	224b      	movs	r2, #75	@ 0x4b
 8001e76:	21e6      	movs	r1, #230	@ 0xe6
 8001e78:	20c8      	movs	r0, #200	@ 0xc8
 8001e7a:	f003 fd35 	bl	80058e8 <fillRect>
	   drawCharTest(230, 250, '8', ILI9488_WHITE,ILI9488_RED, 3);
 8001e7e:	2303      	movs	r3, #3
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e8c:	2238      	movs	r2, #56	@ 0x38
 8001e8e:	21fa      	movs	r1, #250	@ 0xfa
 8001e90:	20e6      	movs	r0, #230	@ 0xe6
 8001e92:	f004 f82d 	bl	8005ef0 <drawCharTest>
	   fillRect(300, 230,75,75, ILI9488_RED);
 8001e96:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	234b      	movs	r3, #75	@ 0x4b
 8001e9e:	224b      	movs	r2, #75	@ 0x4b
 8001ea0:	21e6      	movs	r1, #230	@ 0xe6
 8001ea2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ea6:	f003 fd1f 	bl	80058e8 <fillRect>
	   drawCharTest(319, 250, '9', ILI9488_WHITE,ILI9488_RED, 3);
 8001eaa:	2303      	movs	r3, #3
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eb8:	2239      	movs	r2, #57	@ 0x39
 8001eba:	21fa      	movs	r1, #250	@ 0xfa
 8001ebc:	f240 103f 	movw	r0, #319	@ 0x13f
 8001ec0:	f004 f816 	bl	8005ef0 <drawCharTest>
	   //drawChar(135, 61, '1', ILI9488_BLACK,ILI9488_RED, 1);


	   uint16_t count = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	   char entered[6] = "     ";
 8001eca:	4a34      	ldr	r2, [pc, #208]	@ (8001f9c <authenticate+0x278>)
 8001ecc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ed4:	6018      	str	r0, [r3, #0]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	8019      	strh	r1, [r3, #0]
	   char passcode[6] = "12345";
 8001eda:	4a31      	ldr	r2, [pc, #196]	@ (8001fa0 <authenticate+0x27c>)
 8001edc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee4:	6018      	str	r0, [r3, #0]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	8019      	strh	r1, [r3, #0]
	   uint8_t temp;

	  while (1)
	  {
		  touchX = getX();
 8001eea:	f005 fd81 	bl	80079f0 <getX>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		  touchY = getY();
 8001ef4:	f005 fd86 	bl	8007a04 <getY>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

		  ILI9488_printText(entered, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 8001efe:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001f02:	2301      	movs	r3, #1
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	220a      	movs	r2, #10
 8001f10:	210a      	movs	r1, #10
 8001f12:	f004 f973 	bl	80061fc <ILI9488_printText>

		  //absolutely horrible password checking...but works for testing TODO: make this not horrible.
		  if(count == 5){
 8001f16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d148      	bne.n	8001fb0 <authenticate+0x28c>
			  if (!strcmp(entered, passcode)){
 8001f1e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001f22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe f971 	bl	8000210 <strcmp>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <authenticate+0x220>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	2140      	movs	r1, #64	@ 0x40
 8001f38:	481a      	ldr	r0, [pc, #104]	@ (8001fa4 <authenticate+0x280>)
 8001f3a:	f006 fab7 	bl	80084ac <HAL_GPIO_WritePin>
				  Home_Screen();
 8001f3e:	f000 fe5d 	bl	8002bfc <Home_Screen>
 8001f42:	e274      	b.n	800242e <authenticate+0x70a>
				  return;

			  }
			  else {
				  char not_success_msg [50] = "Invalid, try again";
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <authenticate+0x284>)
 8001f46:	463c      	mov	r4, r7
 8001f48:	461d      	mov	r5, r3
 8001f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f4e:	682b      	ldr	r3, [r5, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	8022      	strh	r2, [r4, #0]
 8001f54:	3402      	adds	r4, #2
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	7023      	strb	r3, [r4, #0]
 8001f5a:	f107 0313 	add.w	r3, r7, #19
 8001f5e:	221f      	movs	r2, #31
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f00a ff60 	bl	800ce28 <memset>
				  
				  LCD_Font(10, 10, not_success_msg, _Open_Sans_Bold_16, 1, ILI9488_BLACK);
 8001f68:	463a      	mov	r2, r7
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <authenticate+0x288>)
 8001f74:	210a      	movs	r1, #10
 8001f76:	200a      	movs	r0, #10
 8001f78:	f004 fa8d 	bl	8006496 <LCD_Font>
				  memset(passcode,' ', 5);
 8001f7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f80:	2205      	movs	r2, #5
 8001f82:	2120      	movs	r1, #32
 8001f84:	4618      	mov	r0, r3
 8001f86:	f00a ff4f 	bl	800ce28 <memset>
				  count = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
				  HAL_Delay(1000);
 8001f90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f94:	f005 fdde 	bl	8007b54 <HAL_Delay>

			  }
			  break;
 8001f98:	e249      	b.n	800242e <authenticate+0x70a>
 8001f9a:	bf00      	nop
 8001f9c:	0800e80c 	.word	0x0800e80c
 8001fa0:	0800e814 	.word	0x0800e814
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	0800e81c 	.word	0x0800e81c
 8001fac:	0800f3f0 	.word	0x0800f3f0
		   * 75, 52
			75, 67
			97, 55
			97, 67
		   */
		  if(touchX >= 75 && touchX < 97 && touchY >= 52 && touchY < 67){
 8001fb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001fb4:	2b4a      	cmp	r3, #74	@ 0x4a
 8001fb6:	d938      	bls.n	800202a <authenticate+0x306>
 8001fb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001fbc:	2b60      	cmp	r3, #96	@ 0x60
 8001fbe:	d834      	bhi.n	800202a <authenticate+0x306>
 8001fc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001fc4:	2b33      	cmp	r3, #51	@ 0x33
 8001fc6:	d930      	bls.n	800202a <authenticate+0x306>
 8001fc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001fcc:	2b42      	cmp	r3, #66	@ 0x42
 8001fce:	d82c      	bhi.n	800202a <authenticate+0x306>
			fillRect(100, 30,75,75, ILI9488_GREEN);
 8001fd0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	234b      	movs	r3, #75	@ 0x4b
 8001fd8:	224b      	movs	r2, #75	@ 0x4b
 8001fda:	211e      	movs	r1, #30
 8001fdc:	2064      	movs	r0, #100	@ 0x64
 8001fde:	f003 fc83 	bl	80058e8 <fillRect>
			HAL_Delay(250);
 8001fe2:	20fa      	movs	r0, #250	@ 0xfa
 8001fe4:	f005 fdb6 	bl	8007b54 <HAL_Delay>
			entered[count] = '1';
 8001fe8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001fec:	3348      	adds	r3, #72	@ 0x48
 8001fee:	443b      	add	r3, r7
 8001ff0:	2231      	movs	r2, #49	@ 0x31
 8001ff2:	f803 2c0c 	strb.w	r2, [r3, #-12]
			count++;
 8001ff6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		    fillRect(100, 30,75,75, ILI9488_RED);
 8002000:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	234b      	movs	r3, #75	@ 0x4b
 8002008:	224b      	movs	r2, #75	@ 0x4b
 800200a:	211e      	movs	r1, #30
 800200c:	2064      	movs	r0, #100	@ 0x64
 800200e:	f003 fc6b 	bl	80058e8 <fillRect>
		    drawCharTest(130, 55, '1', ILI9488_WHITE,ILI9488_RED, 3);
 8002012:	2303      	movs	r3, #3
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002020:	2231      	movs	r2, #49	@ 0x31
 8002022:	2137      	movs	r1, #55	@ 0x37
 8002024:	2082      	movs	r0, #130	@ 0x82
 8002026:	f003 ff63 	bl	8005ef0 <drawCharTest>
			97, 52
			287, 52
			97, 67
			287, 67
		   */
		  if(touchX >= 100 && touchX < 287 && touchY >= 52 && touchY < 67){
 800202a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800202e:	2b63      	cmp	r3, #99	@ 0x63
 8002030:	d939      	bls.n	80020a6 <authenticate+0x382>
 8002032:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002036:	f5b3 7f8f 	cmp.w	r3, #286	@ 0x11e
 800203a:	d834      	bhi.n	80020a6 <authenticate+0x382>
 800203c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002040:	2b33      	cmp	r3, #51	@ 0x33
 8002042:	d930      	bls.n	80020a6 <authenticate+0x382>
 8002044:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002048:	2b42      	cmp	r3, #66	@ 0x42
 800204a:	d82c      	bhi.n	80020a6 <authenticate+0x382>
			fillRect(200, 30,75,75, ILI9488_GREEN);
 800204c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	234b      	movs	r3, #75	@ 0x4b
 8002054:	224b      	movs	r2, #75	@ 0x4b
 8002056:	211e      	movs	r1, #30
 8002058:	20c8      	movs	r0, #200	@ 0xc8
 800205a:	f003 fc45 	bl	80058e8 <fillRect>
			HAL_Delay(250);
 800205e:	20fa      	movs	r0, #250	@ 0xfa
 8002060:	f005 fd78 	bl	8007b54 <HAL_Delay>
			entered[count] = '2';
 8002064:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002068:	3348      	adds	r3, #72	@ 0x48
 800206a:	443b      	add	r3, r7
 800206c:	2232      	movs	r2, #50	@ 0x32
 800206e:	f803 2c0c 	strb.w	r2, [r3, #-12]
			count++;
 8002072:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002076:	3301      	adds	r3, #1
 8002078:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			fillRect(200, 30,75,75, ILI9488_RED);
 800207c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	234b      	movs	r3, #75	@ 0x4b
 8002084:	224b      	movs	r2, #75	@ 0x4b
 8002086:	211e      	movs	r1, #30
 8002088:	20c8      	movs	r0, #200	@ 0xc8
 800208a:	f003 fc2d 	bl	80058e8 <fillRect>
			drawCharTest(230, 55, '2', ILI9488_WHITE,ILI9488_RED, 3);
 800208e:	2303      	movs	r3, #3
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800209c:	2232      	movs	r2, #50	@ 0x32
 800209e:	2137      	movs	r1, #55	@ 0x37
 80020a0:	20e6      	movs	r0, #230	@ 0xe6
 80020a2:	f003 ff25 	bl	8005ef0 <drawCharTest>
		  /*3rd box:
			299, 52
			390, 52
			299, 67
			390, 167*/
		  if(touchX >= 299 && touchX < 372 && touchY >= 52 && touchY < 160){
 80020a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80020aa:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 80020ae:	d93c      	bls.n	800212a <authenticate+0x406>
 80020b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80020b4:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 80020b8:	d237      	bcs.n	800212a <authenticate+0x406>
 80020ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80020be:	2b33      	cmp	r3, #51	@ 0x33
 80020c0:	d933      	bls.n	800212a <authenticate+0x406>
 80020c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80020c6:	2b9f      	cmp	r3, #159	@ 0x9f
 80020c8:	d82f      	bhi.n	800212a <authenticate+0x406>
			fillRect(300, 30,75,75, ILI9488_GREEN);
 80020ca:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	234b      	movs	r3, #75	@ 0x4b
 80020d2:	224b      	movs	r2, #75	@ 0x4b
 80020d4:	211e      	movs	r1, #30
 80020d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80020da:	f003 fc05 	bl	80058e8 <fillRect>
			HAL_Delay(250);
 80020de:	20fa      	movs	r0, #250	@ 0xfa
 80020e0:	f005 fd38 	bl	8007b54 <HAL_Delay>
			entered[count] = '3';
 80020e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020e8:	3348      	adds	r3, #72	@ 0x48
 80020ea:	443b      	add	r3, r7
 80020ec:	2233      	movs	r2, #51	@ 0x33
 80020ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
			count++;
 80020f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020f6:	3301      	adds	r3, #1
 80020f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			fillRect(300, 30,75,75, ILI9488_RED);
 80020fc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	234b      	movs	r3, #75	@ 0x4b
 8002104:	224b      	movs	r2, #75	@ 0x4b
 8002106:	211e      	movs	r1, #30
 8002108:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800210c:	f003 fbec 	bl	80058e8 <fillRect>
			drawCharTest(319, 55, '3', ILI9488_WHITE,ILI9488_RED, 3);
 8002110:	2303      	movs	r3, #3
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800211e:	2233      	movs	r2, #51	@ 0x33
 8002120:	2137      	movs	r1, #55	@ 0x37
 8002122:	f240 103f 	movw	r0, #319	@ 0x13f
 8002126:	f003 fee3 	bl	8005ef0 <drawCharTest>
			 * 97, 163
			 * 97, 219
			 *
			 *
			 */
			if(touchX >= 75 && touchX < 97 && touchY >= 163 && touchY < 219){
 800212a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800212e:	2b4a      	cmp	r3, #74	@ 0x4a
 8002130:	d938      	bls.n	80021a4 <authenticate+0x480>
 8002132:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002136:	2b60      	cmp	r3, #96	@ 0x60
 8002138:	d834      	bhi.n	80021a4 <authenticate+0x480>
 800213a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800213e:	2ba2      	cmp	r3, #162	@ 0xa2
 8002140:	d930      	bls.n	80021a4 <authenticate+0x480>
 8002142:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002146:	2bda      	cmp	r3, #218	@ 0xda
 8002148:	d82c      	bhi.n	80021a4 <authenticate+0x480>
				fillRect(100, 130,75,75, ILI9488_GREEN);
 800214a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	234b      	movs	r3, #75	@ 0x4b
 8002152:	224b      	movs	r2, #75	@ 0x4b
 8002154:	2182      	movs	r1, #130	@ 0x82
 8002156:	2064      	movs	r0, #100	@ 0x64
 8002158:	f003 fbc6 	bl	80058e8 <fillRect>
				HAL_Delay(250);
 800215c:	20fa      	movs	r0, #250	@ 0xfa
 800215e:	f005 fcf9 	bl	8007b54 <HAL_Delay>
				entered[count] = '4';
 8002162:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002166:	3348      	adds	r3, #72	@ 0x48
 8002168:	443b      	add	r3, r7
 800216a:	2234      	movs	r2, #52	@ 0x34
 800216c:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 8002170:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002174:	3301      	adds	r3, #1
 8002176:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
				fillRect(100, 130,75,75, ILI9488_RED);
 800217a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	234b      	movs	r3, #75	@ 0x4b
 8002182:	224b      	movs	r2, #75	@ 0x4b
 8002184:	2182      	movs	r1, #130	@ 0x82
 8002186:	2064      	movs	r0, #100	@ 0x64
 8002188:	f003 fbae 	bl	80058e8 <fillRect>
				drawCharTest(130, 150, '4', ILI9488_WHITE,ILI9488_RED, 3);
 800218c:	2303      	movs	r3, #3
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800219a:	2234      	movs	r2, #52	@ 0x34
 800219c:	2196      	movs	r1, #150	@ 0x96
 800219e:	2082      	movs	r0, #130	@ 0x82
 80021a0:	f003 fea6 	bl	8005ef0 <drawCharTest>
			 * 97, 165
			 * 262, 165
			 * 97, 207
			 * 262, 207
			 */
			 if(touchX >= 100 && touchX < 262 && touchY >= 165 && touchY < 207){
 80021a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80021a8:	2b63      	cmp	r3, #99	@ 0x63
 80021aa:	d939      	bls.n	8002220 <authenticate+0x4fc>
 80021ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80021b0:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80021b4:	d234      	bcs.n	8002220 <authenticate+0x4fc>
 80021b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80021ba:	2ba4      	cmp	r3, #164	@ 0xa4
 80021bc:	d930      	bls.n	8002220 <authenticate+0x4fc>
 80021be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80021c2:	2bce      	cmp	r3, #206	@ 0xce
 80021c4:	d82c      	bhi.n	8002220 <authenticate+0x4fc>
				fillRect(200, 130,75,75, ILI9488_GREEN);
 80021c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	234b      	movs	r3, #75	@ 0x4b
 80021ce:	224b      	movs	r2, #75	@ 0x4b
 80021d0:	2182      	movs	r1, #130	@ 0x82
 80021d2:	20c8      	movs	r0, #200	@ 0xc8
 80021d4:	f003 fb88 	bl	80058e8 <fillRect>
				HAL_Delay(250);
 80021d8:	20fa      	movs	r0, #250	@ 0xfa
 80021da:	f005 fcbb 	bl	8007b54 <HAL_Delay>
				entered[count] = '5';
 80021de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021e2:	3348      	adds	r3, #72	@ 0x48
 80021e4:	443b      	add	r3, r7
 80021e6:	2235      	movs	r2, #53	@ 0x35
 80021e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 80021ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021f0:	3301      	adds	r3, #1
 80021f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
				fillRect(200, 130,75,75, ILI9488_RED);
 80021f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	234b      	movs	r3, #75	@ 0x4b
 80021fe:	224b      	movs	r2, #75	@ 0x4b
 8002200:	2182      	movs	r1, #130	@ 0x82
 8002202:	20c8      	movs	r0, #200	@ 0xc8
 8002204:	f003 fb70 	bl	80058e8 <fillRect>
				drawCharTest(230, 150, '5', ILI9488_WHITE,ILI9488_RED, 3);
 8002208:	2303      	movs	r3, #3
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002216:	2235      	movs	r2, #53	@ 0x35
 8002218:	2196      	movs	r1, #150	@ 0x96
 800221a:	20e6      	movs	r0, #230	@ 0xe6
 800221c:	f003 fe68 	bl	8005ef0 <drawCharTest>
			 * 294, 166
			 * 381, 167
			 * 299, 207
			 * 372, 207
			 */
			 if(touchX >= 299 && touchX < 372 && touchY >= 167 && touchY < 207){
 8002220:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002224:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8002228:	d93c      	bls.n	80022a4 <authenticate+0x580>
 800222a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800222e:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 8002232:	d237      	bcs.n	80022a4 <authenticate+0x580>
 8002234:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002238:	2ba6      	cmp	r3, #166	@ 0xa6
 800223a:	d933      	bls.n	80022a4 <authenticate+0x580>
 800223c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002240:	2bce      	cmp	r3, #206	@ 0xce
 8002242:	d82f      	bhi.n	80022a4 <authenticate+0x580>
				fillRect(300, 130,75,75, ILI9488_GREEN);
 8002244:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	234b      	movs	r3, #75	@ 0x4b
 800224c:	224b      	movs	r2, #75	@ 0x4b
 800224e:	2182      	movs	r1, #130	@ 0x82
 8002250:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002254:	f003 fb48 	bl	80058e8 <fillRect>
				HAL_Delay(250);
 8002258:	20fa      	movs	r0, #250	@ 0xfa
 800225a:	f005 fc7b 	bl	8007b54 <HAL_Delay>
				entered[count] = '6';
 800225e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002262:	3348      	adds	r3, #72	@ 0x48
 8002264:	443b      	add	r3, r7
 8002266:	2236      	movs	r2, #54	@ 0x36
 8002268:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 800226c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002270:	3301      	adds	r3, #1
 8002272:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
				fillRect(300, 130,75,75, ILI9488_RED);
 8002276:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	234b      	movs	r3, #75	@ 0x4b
 800227e:	224b      	movs	r2, #75	@ 0x4b
 8002280:	2182      	movs	r1, #130	@ 0x82
 8002282:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002286:	f003 fb2f 	bl	80058e8 <fillRect>
				drawCharTest(319, 150, '6', ILI9488_WHITE,ILI9488_RED, 3);
 800228a:	2303      	movs	r3, #3
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002298:	2236      	movs	r2, #54	@ 0x36
 800229a:	2196      	movs	r1, #150	@ 0x96
 800229c:	f240 103f 	movw	r0, #319	@ 0x13f
 80022a0:	f003 fe26 	bl	8005ef0 <drawCharTest>
			 * 75, 242
			 * 97, 242
			 * 75, 309
			 * 97, 309
			 */
			if(touchX >= 75 && touchX < 97 && touchY >= 242 && touchY < 309){
 80022a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80022a8:	2b4a      	cmp	r3, #74	@ 0x4a
 80022aa:	d939      	bls.n	8002320 <authenticate+0x5fc>
 80022ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80022b0:	2b60      	cmp	r3, #96	@ 0x60
 80022b2:	d835      	bhi.n	8002320 <authenticate+0x5fc>
 80022b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80022b8:	2bf1      	cmp	r3, #241	@ 0xf1
 80022ba:	d931      	bls.n	8002320 <authenticate+0x5fc>
 80022bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80022c0:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80022c4:	d82c      	bhi.n	8002320 <authenticate+0x5fc>
				fillRect(100, 230,75,75, ILI9488_GREEN);
 80022c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	234b      	movs	r3, #75	@ 0x4b
 80022ce:	224b      	movs	r2, #75	@ 0x4b
 80022d0:	21e6      	movs	r1, #230	@ 0xe6
 80022d2:	2064      	movs	r0, #100	@ 0x64
 80022d4:	f003 fb08 	bl	80058e8 <fillRect>
				HAL_Delay(250);
 80022d8:	20fa      	movs	r0, #250	@ 0xfa
 80022da:	f005 fc3b 	bl	8007b54 <HAL_Delay>
				entered[count] = '7';
 80022de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022e2:	3348      	adds	r3, #72	@ 0x48
 80022e4:	443b      	add	r3, r7
 80022e6:	2237      	movs	r2, #55	@ 0x37
 80022e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 80022ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022f0:	3301      	adds	r3, #1
 80022f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
				fillRect(100, 230,75,75, ILI9488_RED);
 80022f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	234b      	movs	r3, #75	@ 0x4b
 80022fe:	224b      	movs	r2, #75	@ 0x4b
 8002300:	21e6      	movs	r1, #230	@ 0xe6
 8002302:	2064      	movs	r0, #100	@ 0x64
 8002304:	f003 faf0 	bl	80058e8 <fillRect>
				drawCharTest(130, 250, '7', ILI9488_WHITE,ILI9488_RED, 3);
 8002308:	2303      	movs	r3, #3
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002316:	2237      	movs	r2, #55	@ 0x37
 8002318:	21fa      	movs	r1, #250	@ 0xfa
 800231a:	2082      	movs	r0, #130	@ 0x82
 800231c:	f003 fde8 	bl	8005ef0 <drawCharTest>
			 * 97, 242
			 * 262, 242
			 * 97, 309
			 * 287, 306
			 */
			if(touchX >= 100 && touchX < 280 && touchY >= 242 && touchY < 309){
 8002320:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002324:	2b63      	cmp	r3, #99	@ 0x63
 8002326:	d93a      	bls.n	800239e <authenticate+0x67a>
 8002328:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800232c:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002330:	d235      	bcs.n	800239e <authenticate+0x67a>
 8002332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002336:	2bf1      	cmp	r3, #241	@ 0xf1
 8002338:	d931      	bls.n	800239e <authenticate+0x67a>
 800233a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800233e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8002342:	d82c      	bhi.n	800239e <authenticate+0x67a>
				fillRect(200, 230,75,75, ILI9488_GREEN);
 8002344:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	234b      	movs	r3, #75	@ 0x4b
 800234c:	224b      	movs	r2, #75	@ 0x4b
 800234e:	21e6      	movs	r1, #230	@ 0xe6
 8002350:	20c8      	movs	r0, #200	@ 0xc8
 8002352:	f003 fac9 	bl	80058e8 <fillRect>
				HAL_Delay(250);
 8002356:	20fa      	movs	r0, #250	@ 0xfa
 8002358:	f005 fbfc 	bl	8007b54 <HAL_Delay>
				entered[count] = '8';
 800235c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002360:	3348      	adds	r3, #72	@ 0x48
 8002362:	443b      	add	r3, r7
 8002364:	2238      	movs	r2, #56	@ 0x38
 8002366:	f803 2c0c 	strb.w	r2, [r3, #-12]
				count++;
 800236a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800236e:	3301      	adds	r3, #1
 8002370:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
				fillRect(200, 230,75,75, ILI9488_RED);
 8002374:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	234b      	movs	r3, #75	@ 0x4b
 800237c:	224b      	movs	r2, #75	@ 0x4b
 800237e:	21e6      	movs	r1, #230	@ 0xe6
 8002380:	20c8      	movs	r0, #200	@ 0xc8
 8002382:	f003 fab1 	bl	80058e8 <fillRect>
				drawCharTest(230, 250, '8', ILI9488_WHITE,ILI9488_RED, 3);
 8002386:	2303      	movs	r3, #3
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002394:	2238      	movs	r2, #56	@ 0x38
 8002396:	21fa      	movs	r1, #250	@ 0xfa
 8002398:	20e6      	movs	r0, #230	@ 0xe6
 800239a:	f003 fda9 	bl	8005ef0 <drawCharTest>
			 * 299, 242
			 * 381, 242
			 * 299, 309
			 * 372, 309
			 */
			if(touchX >= 299 && touchX < 372 && touchY >= 242 && touchY < 309){
 800239e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80023a2:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 80023a6:	f67f ada0 	bls.w	8001eea <authenticate+0x1c6>
 80023aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80023ae:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 80023b2:	f4bf ad9a 	bcs.w	8001eea <authenticate+0x1c6>
 80023b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80023ba:	2bf1      	cmp	r3, #241	@ 0xf1
 80023bc:	f67f ad95 	bls.w	8001eea <authenticate+0x1c6>
 80023c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80023c4:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80023c8:	f63f ad8f 	bhi.w	8001eea <authenticate+0x1c6>
			   fillRect(300, 230,75,75, ILI9488_GREEN);
 80023cc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	234b      	movs	r3, #75	@ 0x4b
 80023d4:	224b      	movs	r2, #75	@ 0x4b
 80023d6:	21e6      	movs	r1, #230	@ 0xe6
 80023d8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80023dc:	f003 fa84 	bl	80058e8 <fillRect>
			   HAL_Delay(250);
 80023e0:	20fa      	movs	r0, #250	@ 0xfa
 80023e2:	f005 fbb7 	bl	8007b54 <HAL_Delay>
			   entered[count] = '9';
 80023e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80023ea:	3348      	adds	r3, #72	@ 0x48
 80023ec:	443b      	add	r3, r7
 80023ee:	2239      	movs	r2, #57	@ 0x39
 80023f0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			   fillRect(300, 230,75,75, ILI9488_RED);
 80023f4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	234b      	movs	r3, #75	@ 0x4b
 80023fc:	224b      	movs	r2, #75	@ 0x4b
 80023fe:	21e6      	movs	r1, #230	@ 0xe6
 8002400:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002404:	f003 fa70 	bl	80058e8 <fillRect>
			   drawCharTest(319, 250, '9', ILI9488_WHITE,ILI9488_RED, 3);
 8002408:	2303      	movs	r3, #3
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002416:	2239      	movs	r2, #57	@ 0x39
 8002418:	21fa      	movs	r1, #250	@ 0xfa
 800241a:	f240 103f 	movw	r0, #319	@ 0x13f
 800241e:	f003 fd67 	bl	8005ef0 <drawCharTest>
			   count++;
 8002422:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002426:	3301      	adds	r3, #1
 8002428:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		  touchX = getX();
 800242c:	e55d      	b.n	8001eea <authenticate+0x1c6>
			}

	  }

}
 800242e:	3748      	adds	r7, #72	@ 0x48
 8002430:	46bd      	mov	sp, r7
 8002432:	bdb0      	pop	{r4, r5, r7, pc}

08002434 <DispenseScreen>:


void DispenseScreen(){
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
	char success_msg [10] = "Dispensing...";
 800243a:	4a0c      	ldr	r2, [pc, #48]	@ (800246c <DispenseScreen+0x38>)
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002440:	c303      	stmia	r3!, {r0, r1}
 8002442:	801a      	strh	r2, [r3, #0]
	fillScreen(ILI9488_WHITE);
 8002444:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002448:	f003 fa34 	bl	80058b4 <fillScreen>
	ILI9488_printText(success_msg, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 800244c:	1d38      	adds	r0, r7, #4
 800244e:	2301      	movs	r3, #1
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	220a      	movs	r2, #10
 800245c:	210a      	movs	r1, #10
 800245e:	f003 fecd 	bl	80061fc <ILI9488_printText>

	return;
 8002462:	bf00      	nop
}
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	0800e850 	.word	0x0800e850

08002470 <scan_pill_screen>:

void scan_pill_screen(){
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b0a8      	sub	sp, #160	@ 0xa0
 8002474:	af02      	add	r7, sp, #8
	char Place [50] = "Place Pill in Scanner";
 8002476:	4b81      	ldr	r3, [pc, #516]	@ (800267c <scan_pill_screen+0x20c>)
 8002478:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 800247c:	461d      	mov	r5, r3
 800247e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002482:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002486:	6020      	str	r0, [r4, #0]
 8002488:	3404      	adds	r4, #4
 800248a:	8021      	strh	r1, [r4, #0]
 800248c:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
 800249c:	615a      	str	r2, [r3, #20]
 800249e:	619a      	str	r2, [r3, #24]
	char count [50];
	uint16_t touchX = 0, touchY = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
	touchX = getX();
 80024ac:	f005 faa0 	bl	80079f0 <getX>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	touchY = getY();
 80024b6:	f005 faa5 	bl	8007a04 <getY>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
	uint8_t i = 5;
 80024c0:	2305      	movs	r3, #5
 80024c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	while (i != 0){
 80024c6:	e02b      	b.n	8002520 <scan_pill_screen+0xb0>
			fillScreen(ILI9488_WHITE);
 80024c8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80024cc:	f003 f9f2 	bl	80058b4 <fillScreen>
			sprintf(count, "Scanning pill in %i seconds", i);
 80024d0:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80024d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024d8:	4969      	ldr	r1, [pc, #420]	@ (8002680 <scan_pill_screen+0x210>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f00a fc84 	bl	800cde8 <siprintf>
			LCD_Font(10, 30, Place, _Open_Sans_Bold_36, 1, ILI9488_WHITE);
 80024e0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80024e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	2301      	movs	r3, #1
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	4b65      	ldr	r3, [pc, #404]	@ (8002684 <scan_pill_screen+0x214>)
 80024f0:	211e      	movs	r1, #30
 80024f2:	200a      	movs	r0, #10
 80024f4:	f003 ffcf 	bl	8006496 <LCD_Font>
			LCD_Font(10, 80, count, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 80024f8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80024fc:	2300      	movs	r3, #0
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2301      	movs	r3, #1
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	4b5f      	ldr	r3, [pc, #380]	@ (8002684 <scan_pill_screen+0x214>)
 8002506:	2150      	movs	r1, #80	@ 0x50
 8002508:	200a      	movs	r0, #10
 800250a:	f003 ffc4 	bl	8006496 <LCD_Font>
			HAL_Delay(1000);
 800250e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002512:	f005 fb1f 	bl	8007b54 <HAL_Delay>
			i--;
 8002516:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800251a:	3b01      	subs	r3, #1
 800251c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	while (i != 0){
 8002520:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1cf      	bne.n	80024c8 <scan_pill_screen+0x58>
	}



	uint8_t result = Scan();
 8002528:	f7ff faaa 	bl	8001a80 <Scan>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

	char result_word[25] = "dummy";
 8002532:	4a55      	ldr	r2, [pc, #340]	@ (8002688 <scan_pill_screen+0x218>)
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800253c:	6018      	str	r0, [r3, #0]
 800253e:	3304      	adds	r3, #4
 8002540:	8019      	strh	r1, [r3, #0]
 8002542:	f107 0312 	add.w	r3, r7, #18
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	f8c3 200f 	str.w	r2, [r3, #15]

	if (result == 0){
 8002554:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <scan_pill_screen+0xfc>
		strcpy(result_word, "nothing");
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	4a4a      	ldr	r2, [pc, #296]	@ (800268c <scan_pill_screen+0x21c>)
 8002562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002566:	e883 0003 	stmia.w	r3, {r0, r1}
 800256a:	e034      	b.n	80025d6 <scan_pill_screen+0x166>
	}
	else if (result == 1){
 800256c:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8002570:	2b01      	cmp	r3, #1
 8002572:	d106      	bne.n	8002582 <scan_pill_screen+0x112>
		strcpy(result_word, "Red Skittle");
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	4a45      	ldr	r2, [pc, #276]	@ (8002690 <scan_pill_screen+0x220>)
 800257a:	ca07      	ldmia	r2, {r0, r1, r2}
 800257c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002580:	e029      	b.n	80025d6 <scan_pill_screen+0x166>
	}
	else if (result == 2){
 8002582:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8002586:	2b02      	cmp	r3, #2
 8002588:	d10b      	bne.n	80025a2 <scan_pill_screen+0x132>
		strcpy(result_word, "Yellow Skittle");
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	4a41      	ldr	r2, [pc, #260]	@ (8002694 <scan_pill_screen+0x224>)
 8002590:	461c      	mov	r4, r3
 8002592:	4613      	mov	r3, r2
 8002594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002596:	c407      	stmia	r4!, {r0, r1, r2}
 8002598:	8023      	strh	r3, [r4, #0]
 800259a:	3402      	adds	r4, #2
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	7023      	strb	r3, [r4, #0]
 80025a0:	e019      	b.n	80025d6 <scan_pill_screen+0x166>
	}
	else if (result == 3){
 80025a2:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d108      	bne.n	80025bc <scan_pill_screen+0x14c>
		strcpy(result_word, "Green Skittle");
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002698 <scan_pill_screen+0x228>)
 80025b0:	461c      	mov	r4, r3
 80025b2:	4613      	mov	r3, r2
 80025b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b6:	c407      	stmia	r4!, {r0, r1, r2}
 80025b8:	8023      	strh	r3, [r4, #0]
 80025ba:	e00c      	b.n	80025d6 <scan_pill_screen+0x166>
	}
	else if (result == 4){
 80025bc:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d108      	bne.n	80025d6 <scan_pill_screen+0x166>
		strcpy(result_word, "Hot Tamale");
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	4a34      	ldr	r2, [pc, #208]	@ (800269c <scan_pill_screen+0x22c>)
 80025ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80025cc:	c303      	stmia	r3!, {r0, r1}
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	3302      	adds	r3, #2
 80025d2:	0c12      	lsrs	r2, r2, #16
 80025d4:	701a      	strb	r2, [r3, #0]
	}

	fillScreen(ILI9488_WHITE);
 80025d6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80025da:	f003 f96b 	bl	80058b4 <fillScreen>
	LCD_Font(100, 100,  result_word,_Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80025de:	f107 020c 	add.w	r2, r7, #12
 80025e2:	2300      	movs	r3, #0
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	2301      	movs	r3, #1
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <scan_pill_screen+0x230>)
 80025ec:	2164      	movs	r1, #100	@ 0x64
 80025ee:	2064      	movs	r0, #100	@ 0x64
 80025f0:	f003 ff51 	bl	8006496 <LCD_Font>

	char back[] = "Back";
 80025f4:	4a2b      	ldr	r2, [pc, #172]	@ (80026a4 <scan_pill_screen+0x234>)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025fc:	6018      	str	r0, [r3, #0]
 80025fe:	3304      	adds	r3, #4
 8002600:	7019      	strb	r1, [r3, #0]

	fillRect(100, 250, 150, 75, ILI9488_RED);
 8002602:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	234b      	movs	r3, #75	@ 0x4b
 800260a:	2296      	movs	r2, #150	@ 0x96
 800260c:	21fa      	movs	r1, #250	@ 0xfa
 800260e:	2064      	movs	r0, #100	@ 0x64
 8002610:	f003 f96a 	bl	80058e8 <fillRect>
	LCD_Font(180, 300, back,_Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8002614:	1d3a      	adds	r2, r7, #4
 8002616:	2300      	movs	r3, #0
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	2301      	movs	r3, #1
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <scan_pill_screen+0x230>)
 8002620:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002624:	20b4      	movs	r0, #180	@ 0xb4
 8002626:	f003 ff36 	bl	8006496 <LCD_Font>
	while(1){
		touchX = getX();
 800262a:	f005 f9e1 	bl	80079f0 <getX>
 800262e:	4603      	mov	r3, r0
 8002630:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
		touchY = getY();
 8002634:	f005 f9e6 	bl	8007a04 <getY>
 8002638:	4603      	mov	r3, r0
 800263a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
	if (touchX >= 100 && touchX < 300 && touchY >= 250 && touchY < 325) {
 800263e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002642:	2b63      	cmp	r3, #99	@ 0x63
 8002644:	d9f1      	bls.n	800262a <scan_pill_screen+0x1ba>
 8002646:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800264a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800264e:	d2ec      	bcs.n	800262a <scan_pill_screen+0x1ba>
 8002650:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002654:	2bf9      	cmp	r3, #249	@ 0xf9
 8002656:	d9e8      	bls.n	800262a <scan_pill_screen+0x1ba>
 8002658:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800265c:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 8002660:	d8e3      	bhi.n	800262a <scan_pill_screen+0x1ba>
		fillRect(100, 250, 150, 75, ILI9488_GREEN);
 8002662:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	234b      	movs	r3, #75	@ 0x4b
 800266a:	2296      	movs	r2, #150	@ 0x96
 800266c:	21fa      	movs	r1, #250	@ 0xfa
 800266e:	2064      	movs	r0, #100	@ 0x64
 8002670:	f003 f93a 	bl	80058e8 <fillRect>

			return;
 8002674:	bf00      	nop
		}
	}


}
 8002676:	3798      	adds	r7, #152	@ 0x98
 8002678:	46bd      	mov	sp, r7
 800267a:	bdb0      	pop	{r4, r5, r7, pc}
 800267c:	0800e8b8 	.word	0x0800e8b8
 8002680:	0800e85c 	.word	0x0800e85c
 8002684:	08012058 	.word	0x08012058
 8002688:	0800e8ec 	.word	0x0800e8ec
 800268c:	0800e878 	.word	0x0800e878
 8002690:	0800e880 	.word	0x0800e880
 8002694:	0800e88c 	.word	0x0800e88c
 8002698:	0800e89c 	.word	0x0800e89c
 800269c:	0800e8ac 	.word	0x0800e8ac
 80026a0:	0800fd34 	.word	0x0800fd34
 80026a4:	0800e908 	.word	0x0800e908

080026a8 <LockScreen>:
	ILI9488_printText(weee, 10,10,ILI9488_BLACK, ILI9488_WHITE, 1);

}


void LockScreen(){
 80026a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026aa:	b0d7      	sub	sp, #348	@ 0x15c
 80026ac:	af06      	add	r7, sp, #24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2140      	movs	r1, #64	@ 0x40
 80026b2:	48cc      	ldr	r0, [pc, #816]	@ (80029e4 <LockScreen+0x33c>)
 80026b4:	f005 fefa 	bl	80084ac <HAL_GPIO_WritePin>
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 80026b8:	4bcb      	ldr	r3, [pc, #812]	@ (80029e8 <LockScreen+0x340>)
 80026ba:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 80026be:	461d      	mov	r5, r3
 80026c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const char *MONTHS_OF_YEAR[12] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
 80026cc:	4bc7      	ldr	r3, [pc, #796]	@ (80029ec <LockScreen+0x344>)
 80026ce:	f107 04e4 	add.w	r4, r7, #228	@ 0xe4
 80026d2:	461d      	mov	r5, r3
 80026d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	uint8_t last_min = DS1307_GetMinute();
 80026e4:	f002 fd28 	bl	8005138 <DS1307_GetMinute>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	char unlockButton[] = "Keypad";
 80026ee:	4ac0      	ldr	r2, [pc, #768]	@ (80029f0 <LockScreen+0x348>)
 80026f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80026f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026f8:	6018      	str	r0, [r3, #0]
 80026fa:	3304      	adds	r3, #4
 80026fc:	8019      	strh	r1, [r3, #0]
 80026fe:	3302      	adds	r3, #2
 8002700:	0c0a      	lsrs	r2, r1, #16
 8002702:	701a      	strb	r2, [r3, #0]
	char fingerPrint[] = "Fingerprint";
 8002704:	4abb      	ldr	r2, [pc, #748]	@ (80029f4 <LockScreen+0x34c>)
 8002706:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800270a:	ca07      	ldmia	r2, {r0, r1, r2}
 800270c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	fillScreen(ILI9488_WHITE);;
 8002710:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002714:	f003 f8ce 	bl	80058b4 <fillScreen>

	fillRect(40, 240, 170, 50, ILI9488_RED);
 8002718:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2332      	movs	r3, #50	@ 0x32
 8002720:	22aa      	movs	r2, #170	@ 0xaa
 8002722:	21f0      	movs	r1, #240	@ 0xf0
 8002724:	2028      	movs	r0, #40	@ 0x28
 8002726:	f003 f8df 	bl	80058e8 <fillRect>
	LCD_Font(50, 280, unlockButton, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800272a:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 800272e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2301      	movs	r3, #1
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	4baf      	ldr	r3, [pc, #700]	@ (80029f8 <LockScreen+0x350>)
 800273a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800273e:	2032      	movs	r0, #50	@ 0x32
 8002740:	f003 fea9 	bl	8006496 <LCD_Font>

	fillRect(230, 240, 170, 50, ILI9488_RED);
 8002744:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2332      	movs	r3, #50	@ 0x32
 800274c:	22aa      	movs	r2, #170	@ 0xaa
 800274e:	21f0      	movs	r1, #240	@ 0xf0
 8002750:	20e6      	movs	r0, #230	@ 0xe6
 8002752:	f003 f8c9 	bl	80058e8 <fillRect>
	LCD_Font(230, 280, fingerPrint, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002756:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800275a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2301      	movs	r3, #1
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4ba4      	ldr	r3, [pc, #656]	@ (80029f8 <LockScreen+0x350>)
 8002766:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800276a:	20e6      	movs	r0, #230	@ 0xe6
 800276c:	f003 fe93 	bl	8006496 <LCD_Font>

	while (1) {

	touchX = getX();
 8002770:	f005 f93e 	bl	80079f0 <getX>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	4ba0      	ldr	r3, [pc, #640]	@ (80029fc <LockScreen+0x354>)
 800277a:	801a      	strh	r2, [r3, #0]
	touchY = getY();
 800277c:	f005 f942 	bl	8007a04 <getY>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	4b9e      	ldr	r3, [pc, #632]	@ (8002a00 <LockScreen+0x358>)
 8002786:	801a      	strh	r2, [r3, #0]

	uint8_t date = DS1307_GetDate();
 8002788:	f002 fc8e 	bl	80050a8 <DS1307_GetDate>
 800278c:	4603      	mov	r3, r0
 800278e:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
	uint8_t month = DS1307_GetMonth();
 8002792:	f002 fc95 	bl	80050c0 <DS1307_GetMonth>
 8002796:	4603      	mov	r3, r0
 8002798:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
	uint16_t year = DS1307_GetYear();
 800279c:	f002 fc9c 	bl	80050d8 <DS1307_GetYear>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
	uint8_t dow = DS1307_GetDayOfWeek();
 80027a6:	f002 fc73 	bl	8005090 <DS1307_GetDayOfWeek>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
	uint8_t hour = DS1307_GetHour();
 80027b0:	f002 fcb3 	bl	800511a <DS1307_GetHour>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	uint8_t minute = DS1307_GetMinute();
 80027ba:	f002 fcbd 	bl	8005138 <DS1307_GetMinute>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
	//uint8_t second = DS1307_GetSecond();

	char buffer[100] = { 0 };
 80027c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2260      	movs	r2, #96	@ 0x60
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00a fb26 	bl	800ce28 <memset>
	char ampm[4] = "AM";
 80027dc:	f644 5341 	movw	r3, #19777	@ 0x4d41
 80027e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	char formattedMinute[4];
	if (minute < 10){
 80027e4:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d808      	bhi.n	80027fe <LockScreen+0x156>
		sprintf(formattedMinute, "0%i", minute);
 80027ec:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 80027f0:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80027f4:	4983      	ldr	r1, [pc, #524]	@ (8002a04 <LockScreen+0x35c>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f00a faf6 	bl	800cde8 <siprintf>
 80027fc:	e007      	b.n	800280e <LockScreen+0x166>
	}
	else{
		sprintf(formattedMinute, "%i", minute);
 80027fe:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 8002802:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002806:	4980      	ldr	r1, [pc, #512]	@ (8002a08 <LockScreen+0x360>)
 8002808:	4618      	mov	r0, r3
 800280a:	f00a faed 	bl	800cde8 <siprintf>
	}
 	//convert to 12hr time
	if (hour == 0){
 800280e:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <LockScreen+0x176>
		hour = 12;
 8002816:	230c      	movs	r3, #12
 8002818:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
 800281c:	e00f      	b.n	800283e <LockScreen+0x196>
	}
	else if (hour > 12){
 800281e:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d90b      	bls.n	800283e <LockScreen+0x196>
		hour = hour - 12;
 8002826:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 800282a:	3b0c      	subs	r3, #12
 800282c:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
		sprintf(ampm, "%s", "PM");
 8002830:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002834:	4a75      	ldr	r2, [pc, #468]	@ (8002a0c <LockScreen+0x364>)
 8002836:	4976      	ldr	r1, [pc, #472]	@ (8002a10 <LockScreen+0x368>)
 8002838:	4618      	mov	r0, r3
 800283a:	f00a fad5 	bl	800cde8 <siprintf>
	}

	if (minute != last_min){
 800283e:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 8002842:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8002846:	429a      	cmp	r2, r3
 8002848:	d02f      	beq.n	80028aa <LockScreen+0x202>
		fillScreen(ILI9488_WHITE);
 800284a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800284e:	f003 f831 	bl	80058b4 <fillScreen>

		fillRect(40, 240, 170, 50, ILI9488_RED);
 8002852:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2332      	movs	r3, #50	@ 0x32
 800285a:	22aa      	movs	r2, #170	@ 0xaa
 800285c:	21f0      	movs	r1, #240	@ 0xf0
 800285e:	2028      	movs	r0, #40	@ 0x28
 8002860:	f003 f842 	bl	80058e8 <fillRect>
		LCD_Font(50, 280, unlockButton, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002864:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8002868:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2301      	movs	r3, #1
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	4b61      	ldr	r3, [pc, #388]	@ (80029f8 <LockScreen+0x350>)
 8002874:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002878:	2032      	movs	r0, #50	@ 0x32
 800287a:	f003 fe0c 	bl	8006496 <LCD_Font>

		fillRect(230, 240, 170, 50, ILI9488_RED);
 800287e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2332      	movs	r3, #50	@ 0x32
 8002886:	22aa      	movs	r2, #170	@ 0xaa
 8002888:	21f0      	movs	r1, #240	@ 0xf0
 800288a:	20e6      	movs	r0, #230	@ 0xe6
 800288c:	f003 f82c 	bl	80058e8 <fillRect>
		LCD_Font(230, 280, fingerPrint, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002890:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8002894:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	2301      	movs	r3, #1
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	4b56      	ldr	r3, [pc, #344]	@ (80029f8 <LockScreen+0x350>)
 80028a0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80028a4:	20e6      	movs	r0, #230	@ 0xe6
 80028a6:	f003 fdf6 	bl	8006496 <LCD_Font>
	}

	/* May show warning below. Ignore and proceed. */
	sprintf(buffer, "%i:%s %s", hour, formattedMinute, ampm);
 80028aa:	f897 213e 	ldrb.w	r2, [r7, #318]	@ 0x13e
 80028ae:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80028b2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80028b6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	460b      	mov	r3, r1
 80028be:	4955      	ldr	r1, [pc, #340]	@ (8002a14 <LockScreen+0x36c>)
 80028c0:	f00a fa92 	bl	800cde8 <siprintf>
	LCD_Font(10, 30, buffer, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 80028c4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80028c8:	2300      	movs	r3, #0
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2301      	movs	r3, #1
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	4b51      	ldr	r3, [pc, #324]	@ (8002a18 <LockScreen+0x370>)
 80028d2:	211e      	movs	r1, #30
 80028d4:	200a      	movs	r0, #10
 80028d6:	f003 fdde 	bl	8006496 <LCD_Font>
	sprintf(buffer, "%s, %s %i %i", DAYS_OF_WEEK[dow], MONTHS_OF_YEAR[month - 1], date, year);
 80028da:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028e4:	443b      	add	r3, r7
 80028e6:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 80028ea:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 80028ee:	3b01      	subs	r3, #1
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028f6:	443b      	add	r3, r7
 80028f8:	f853 4c5c 	ldr.w	r4, [r3, #-92]
 80028fc:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8002900:	f8b7 2138 	ldrh.w	r2, [r7, #312]	@ 0x138
 8002904:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002908:	9201      	str	r2, [sp, #4]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	4623      	mov	r3, r4
 800290e:	460a      	mov	r2, r1
 8002910:	4942      	ldr	r1, [pc, #264]	@ (8002a1c <LockScreen+0x374>)
 8002912:	f00a fa69 	bl	800cde8 <siprintf>
	//ILI9488_printText(buffer, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
	LCD_Font(10, 55, buffer, _Open_Sans_Bold_24, 1, ILI9488_BLACK);
 8002916:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800291a:	2300      	movs	r3, #0
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2301      	movs	r3, #1
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	4b3f      	ldr	r3, [pc, #252]	@ (8002a20 <LockScreen+0x378>)
 8002924:	2137      	movs	r1, #55	@ 0x37
 8002926:	200a      	movs	r0, #10
 8002928:	f003 fdb5 	bl	8006496 <LCD_Font>

	HAL_Delay(50);
 800292c:	2032      	movs	r0, #50	@ 0x32
 800292e:	f005 f911 	bl	8007b54 <HAL_Delay>


	update_last_due_pill_idx(DS1307_GetDayOfWeek(), DS1307_GetHour(), DS1307_GetMinute());
 8002932:	f002 fbad 	bl	8005090 <DS1307_GetDayOfWeek>
 8002936:	4603      	mov	r3, r0
 8002938:	461c      	mov	r4, r3
 800293a:	f002 fbee 	bl	800511a <DS1307_GetHour>
 800293e:	4603      	mov	r3, r0
 8002940:	461d      	mov	r5, r3
 8002942:	f002 fbf9 	bl	8005138 <DS1307_GetMinute>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	4629      	mov	r1, r5
 800294c:	4620      	mov	r0, r4
 800294e:	f7fe fc43 	bl	80011d8 <update_last_due_pill_idx>

	 uint8_t pil = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
	 uint8_t listSize = (getNumPills() <= 3) ? getNumPills() : 3;
 8002958:	f7fe fcf4 	bl	8001344 <getNumPills>
 800295c:	4603      	mov	r3, r0
 800295e:	2b03      	cmp	r3, #3
 8002960:	d803      	bhi.n	800296a <LockScreen+0x2c2>
 8002962:	f7fe fcef 	bl	8001344 <getNumPills>
 8002966:	4603      	mov	r3, r0
 8002968:	e000      	b.n	800296c <LockScreen+0x2c4>
 800296a:	2303      	movs	r3, #3
 800296c:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
	 for (pil = 0; pil < listSize; pil++){
 8002970:	2300      	movs	r3, #0
 8002972:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
 8002976:	e126      	b.n	8002bc6 <LockScreen+0x51e>

		 //12 hour time for every pill
		 pillEntry temp = getPillInfo(pil);
 8002978:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800297c:	f897 213d 	ldrb.w	r2, [r7, #317]	@ 0x13d
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fcb6 	bl	80012f4 <getPillInfo>
		 uint8_t tempHour = temp.hour;
 8002988:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 800298c:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
		 char tempampm[4] = "AM";
 8002990:	f644 5341 	movw	r3, #19777	@ 0x4d41
 8002994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		 char pillTime [50];
		 char pillFormatMinute [5] = " ";
 8002998:	2320      	movs	r3, #32
 800299a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0


		 if (temp.min < 10){
 80029a4:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 80029a8:	2b09      	cmp	r3, #9
 80029aa:	d809      	bhi.n	80029c0 <LockScreen+0x318>
				sprintf(pillFormatMinute, "0%i", temp.min);
 80029ac:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 80029b0:	461a      	mov	r2, r3
 80029b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029b6:	4913      	ldr	r1, [pc, #76]	@ (8002a04 <LockScreen+0x35c>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f00a fa15 	bl	800cde8 <siprintf>
 80029be:	e008      	b.n	80029d2 <LockScreen+0x32a>
			}

		 else{
				sprintf(pillFormatMinute, "%i", temp.min);
 80029c0:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 80029c4:	461a      	mov	r2, r3
 80029c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029ca:	490f      	ldr	r1, [pc, #60]	@ (8002a08 <LockScreen+0x360>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00a fa0b 	bl	800cde8 <siprintf>
			}
		 if (tempHour == 0){
 80029d2:	f897 313c 	ldrb.w	r3, [r7, #316]	@ 0x13c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d124      	bne.n	8002a24 <LockScreen+0x37c>
			tempHour = 12;
 80029da:	230c      	movs	r3, #12
 80029dc:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
 80029e0:	e030      	b.n	8002a44 <LockScreen+0x39c>
 80029e2:	bf00      	nop
 80029e4:	48000800 	.word	0x48000800
 80029e8:	0800e9b0 	.word	0x0800e9b0
 80029ec:	0800ea38 	.word	0x0800ea38
 80029f0:	0800ea68 	.word	0x0800ea68
 80029f4:	0800ea70 	.word	0x0800ea70
 80029f8:	0800fd34 	.word	0x0800fd34
 80029fc:	20000698 	.word	0x20000698
 8002a00:	2000069a 	.word	0x2000069a
 8002a04:	0800e920 	.word	0x0800e920
 8002a08:	0800e924 	.word	0x0800e924
 8002a0c:	0800e928 	.word	0x0800e928
 8002a10:	0800e92c 	.word	0x0800e92c
 8002a14:	0800e930 	.word	0x0800e930
 8002a18:	08012058 	.word	0x08012058
 8002a1c:	0800e93c 	.word	0x0800e93c
 8002a20:	08010950 	.word	0x08010950
		 }
		 else if (tempHour > 12){
 8002a24:	f897 313c 	ldrb.w	r3, [r7, #316]	@ 0x13c
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d90b      	bls.n	8002a44 <LockScreen+0x39c>
			tempHour = tempHour - 12;
 8002a2c:	f897 313c 	ldrb.w	r3, [r7, #316]	@ 0x13c
 8002a30:	3b0c      	subs	r3, #12
 8002a32:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
			sprintf(tempampm, "%s", "PM");
 8002a36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a3a:	4a69      	ldr	r2, [pc, #420]	@ (8002be0 <LockScreen+0x538>)
 8002a3c:	4969      	ldr	r1, [pc, #420]	@ (8002be4 <LockScreen+0x53c>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f00a f9d2 	bl	800cde8 <siprintf>
		 }

		sprintf(pillTime, "%s due at %s, %s %i @ %i:%s %s",temp.name,  DAYS_OF_WEEK[temp.dayofWeek], MONTHS_OF_YEAR[month - 1], date + (temp.dayofWeek - dow),tempHour,  pillFormatMinute, tempampm);
 8002a44:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a4e:	443b      	add	r3, r7
 8002a50:	f853 6c2c 	ldr.w	r6, [r3, #-44]
 8002a54:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a60:	443b      	add	r3, r7
 8002a62:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002a66:	f897 113b 	ldrb.w	r1, [r7, #315]	@ 0x13b
 8002a6a:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8002a74:	1a82      	subs	r2, r0, r2
 8002a76:	440a      	add	r2, r1
 8002a78:	f897 113c 	ldrb.w	r1, [r7, #316]	@ 0x13c
 8002a7c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8002a80:	1c85      	adds	r5, r0, #2
 8002a82:	463c      	mov	r4, r7
 8002a84:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8002a88:	9004      	str	r0, [sp, #16]
 8002a8a:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8002a8e:	9003      	str	r0, [sp, #12]
 8002a90:	9102      	str	r1, [sp, #8]
 8002a92:	9201      	str	r2, [sp, #4]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4633      	mov	r3, r6
 8002a98:	462a      	mov	r2, r5
 8002a9a:	4953      	ldr	r1, [pc, #332]	@ (8002be8 <LockScreen+0x540>)
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f00a f9a3 	bl	800cde8 <siprintf>
		//overdue pills.
		uint8_t overdue_idx = get_next_pill_idx();
 8002aa2:	f7fe fc13 	bl	80012cc <get_next_pill_idx>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
		if (pil < overdue_idx){
 8002aac:	f897 213d 	ldrb.w	r2, [r7, #317]	@ 0x13d
 8002ab0:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d218      	bcs.n	8002aea <LockScreen+0x442>
			LCD_Font(10, (pil + 1)*70 + 10, pillTime, _Open_Sans_Bold_16, 1, ILI9488_RED);
 8002ab8:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8002abc:	3301      	adds	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	0092      	lsls	r2, r2, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	00d2      	lsls	r2, r2, #3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	330a      	adds	r3, #10
 8002ad2:	b299      	uxth	r1, r3
 8002ad4:	463a      	mov	r2, r7
 8002ad6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	2301      	movs	r3, #1
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4b42      	ldr	r3, [pc, #264]	@ (8002bec <LockScreen+0x544>)
 8002ae2:	200a      	movs	r0, #10
 8002ae4:	f003 fcd7 	bl	8006496 <LCD_Font>
 8002ae8:	e016      	b.n	8002b18 <LockScreen+0x470>
		}
		else {
			LCD_Font(10, (pil + 1) *70 + 10, pillTime,  _Open_Sans_Bold_16, 1, ILI9488_BLACK);
 8002aea:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8002aee:	3301      	adds	r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	00d2      	lsls	r2, r2, #3
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	330a      	adds	r3, #10
 8002b04:	b299      	uxth	r1, r3
 8002b06:	463a      	mov	r2, r7
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4b36      	ldr	r3, [pc, #216]	@ (8002bec <LockScreen+0x544>)
 8002b12:	200a      	movs	r0, #10
 8002b14:	f003 fcbf 	bl	8006496 <LCD_Font>
		}

		//LCD_Font(temp.name, 10, (pil + 1) * 80, ILI9488_BLACK, ILI9488_WHITE, 1);


		if (touchX >= 50 && touchX < 200 && touchY >= 250 && touchY < 300) {
 8002b18:	4b35      	ldr	r3, [pc, #212]	@ (8002bf0 <LockScreen+0x548>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	2b31      	cmp	r3, #49	@ 0x31
 8002b1e:	d918      	bls.n	8002b52 <LockScreen+0x4aa>
 8002b20:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <LockScreen+0x548>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b26:	d814      	bhi.n	8002b52 <LockScreen+0x4aa>
 8002b28:	4b32      	ldr	r3, [pc, #200]	@ (8002bf4 <LockScreen+0x54c>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	2bf9      	cmp	r3, #249	@ 0xf9
 8002b2e:	d910      	bls.n	8002b52 <LockScreen+0x4aa>
 8002b30:	4b30      	ldr	r3, [pc, #192]	@ (8002bf4 <LockScreen+0x54c>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002b38:	d20b      	bcs.n	8002b52 <LockScreen+0x4aa>

			fillRect(40, 240, 170, 50, ILI9488_GREEN);
 8002b3a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2332      	movs	r3, #50	@ 0x32
 8002b42:	22aa      	movs	r2, #170	@ 0xaa
 8002b44:	21f0      	movs	r1, #240	@ 0xf0
 8002b46:	2028      	movs	r0, #40	@ 0x28
 8002b48:	f002 fece 	bl	80058e8 <fillRect>
			authenticate();
 8002b4c:	f7ff f8ea 	bl	8001d24 <authenticate>
			return;
 8002b50:	e042      	b.n	8002bd8 <LockScreen+0x530>
			HAL_Delay(100);
			
		}

		if (touchX >= 200 && touchX < 400 && touchY >= 250 && touchY < 300) {
 8002b52:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <LockScreen+0x548>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b58:	d92c      	bls.n	8002bb4 <LockScreen+0x50c>
 8002b5a:	4b25      	ldr	r3, [pc, #148]	@ (8002bf0 <LockScreen+0x548>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002b62:	d227      	bcs.n	8002bb4 <LockScreen+0x50c>
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <LockScreen+0x54c>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	2bf9      	cmp	r3, #249	@ 0xf9
 8002b6a:	d923      	bls.n	8002bb4 <LockScreen+0x50c>
 8002b6c:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <LockScreen+0x54c>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002b74:	d21e      	bcs.n	8002bb4 <LockScreen+0x50c>
			fillRect(230, 240, 170, 50, ILI9488_GREEN);
 8002b76:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2332      	movs	r3, #50	@ 0x32
 8002b7e:	22aa      	movs	r2, #170	@ 0xaa
 8002b80:	21f0      	movs	r1, #240	@ 0xf0
 8002b82:	20e6      	movs	r0, #230	@ 0xe6
 8002b84:	f002 feb0 	bl	80058e8 <fillRect>
			uint8_t rx_buffer[1], temp;
			temp = fingerprintScanPrint();
 8002b88:	f002 fbea 	bl	8005360 <fingerprintScanPrint>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
				//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
				if (temp == 9){
 8002b92:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8002b96:	2b09      	cmp	r3, #9
 8002b98:	d10c      	bne.n	8002bb4 <LockScreen+0x50c>
					if (FingerprintScan()){
 8002b9a:	f000 ff3b 	bl	8003a14 <FingerprintScan>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d018      	beq.n	8002bd6 <LockScreen+0x52e>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2140      	movs	r1, #64	@ 0x40
 8002ba8:	4813      	ldr	r0, [pc, #76]	@ (8002bf8 <LockScreen+0x550>)
 8002baa:	f005 fc7f 	bl	80084ac <HAL_GPIO_WritePin>
						Home_Screen();
 8002bae:	f000 f825 	bl	8002bfc <Home_Screen>
						return;
 8002bb2:	e011      	b.n	8002bd8 <LockScreen+0x530>
						return;
					}
			}
	 }

	 last_min = minute;
 8002bb4:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8002bb8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	 for (pil = 0; pil < listSize; pil++){
 8002bbc:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
 8002bc6:	f897 213d 	ldrb.w	r2, [r7, #317]	@ 0x13d
 8002bca:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	f4ff aed2 	bcc.w	8002978 <LockScreen+0x2d0>
	while (1) {
 8002bd4:	e5cc      	b.n	8002770 <LockScreen+0xc8>
						return;
 8002bd6:	bf00      	nop

	 }
}
}
 8002bd8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be0:	0800e928 	.word	0x0800e928
 8002be4:	0800e92c 	.word	0x0800e92c
 8002be8:	0800e94c 	.word	0x0800e94c
 8002bec:	0800f3f0 	.word	0x0800f3f0
 8002bf0:	20000698 	.word	0x20000698
 8002bf4:	2000069a 	.word	0x2000069a
 8002bf8:	48000800 	.word	0x48000800

08002bfc <Home_Screen>:

void Home_Screen() {
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b099      	sub	sp, #100	@ 0x64
 8002c00:	af02      	add	r7, sp, #8

	char refill[] = "Refill";
 8002c02:	4ab8      	ldr	r2, [pc, #736]	@ (8002ee4 <Home_Screen+0x2e8>)
 8002c04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c0c:	6018      	str	r0, [r3, #0]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	8019      	strh	r1, [r3, #0]
 8002c12:	3302      	adds	r3, #2
 8002c14:	0c0a      	lsrs	r2, r1, #16
 8002c16:	701a      	strb	r2, [r3, #0]
	char scan[] = "Scan";
 8002c18:	4ab3      	ldr	r2, [pc, #716]	@ (8002ee8 <Home_Screen+0x2ec>)
 8002c1a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c22:	6018      	str	r0, [r3, #0]
 8002c24:	3304      	adds	r3, #4
 8002c26:	7019      	strb	r1, [r3, #0]
	char dispense[] = "Dispense";
 8002c28:	4ab0      	ldr	r2, [pc, #704]	@ (8002eec <Home_Screen+0x2f0>)
 8002c2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c30:	c303      	stmia	r3!, {r0, r1}
 8002c32:	701a      	strb	r2, [r3, #0]
	char new_pill[] = "New Pill";
 8002c34:	4aae      	ldr	r2, [pc, #696]	@ (8002ef0 <Home_Screen+0x2f4>)
 8002c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c3c:	c303      	stmia	r3!, {r0, r1}
 8002c3e:	701a      	strb	r2, [r3, #0]
	char fingerprint[] = "Fingerprints";
 8002c40:	4bac      	ldr	r3, [pc, #688]	@ (8002ef4 <Home_Screen+0x2f8>)
 8002c42:	f107 041c 	add.w	r4, r7, #28
 8002c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c48:	c407      	stmia	r4!, {r0, r1, r2}
 8002c4a:	7023      	strb	r3, [r4, #0]
	char back[] = "Back";
 8002c4c:	4aaa      	ldr	r2, [pc, #680]	@ (8002ef8 <Home_Screen+0x2fc>)
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c56:	6018      	str	r0, [r3, #0]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	7019      	strb	r1, [r3, #0]
	char option;
	uint8_t redraw = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	fillScreen(ILI9488_WHITE);
 8002c62:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c66:	f002 fe25 	bl	80058b4 <fillScreen>


	while (1){

	if (redraw){
 8002c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8088 	beq.w	8002d84 <Home_Screen+0x188>
		fillScreen(ILI9488_WHITE);
 8002c74:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c78:	f002 fe1c 	bl	80058b4 <fillScreen>
		fillRect(70, 40, 150, 75, ILI9488_RED);
 8002c7c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	234b      	movs	r3, #75	@ 0x4b
 8002c84:	2296      	movs	r2, #150	@ 0x96
 8002c86:	2128      	movs	r1, #40	@ 0x28
 8002c88:	2046      	movs	r0, #70	@ 0x46
 8002c8a:	f002 fe2d 	bl	80058e8 <fillRect>
		LCD_Font(120, 80, refill, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002c8e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002c92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	2301      	movs	r3, #1
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4b97      	ldr	r3, [pc, #604]	@ (8002efc <Home_Screen+0x300>)
 8002c9e:	2150      	movs	r1, #80	@ 0x50
 8002ca0:	2078      	movs	r0, #120	@ 0x78
 8002ca2:	f003 fbf8 	bl	8006496 <LCD_Font>

		fillRect(250, 40, 150, 75, ILI9488_RED);
 8002ca6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	234b      	movs	r3, #75	@ 0x4b
 8002cae:	2296      	movs	r2, #150	@ 0x96
 8002cb0:	2128      	movs	r1, #40	@ 0x28
 8002cb2:	20fa      	movs	r0, #250	@ 0xfa
 8002cb4:	f002 fe18 	bl	80058e8 <fillRect>
		LCD_Font(300, 80, scan, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002cb8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002cbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8002efc <Home_Screen+0x300>)
 8002cc8:	2150      	movs	r1, #80	@ 0x50
 8002cca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002cce:	f003 fbe2 	bl	8006496 <LCD_Font>

		fillRect(70, 125, 150, 75, ILI9488_RED);
 8002cd2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	234b      	movs	r3, #75	@ 0x4b
 8002cda:	2296      	movs	r2, #150	@ 0x96
 8002cdc:	217d      	movs	r1, #125	@ 0x7d
 8002cde:	2046      	movs	r0, #70	@ 0x46
 8002ce0:	f002 fe02 	bl	80058e8 <fillRect>
		LCD_Font(120, 165, back, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002ce4:	f107 0214 	add.w	r2, r7, #20
 8002ce8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	4b82      	ldr	r3, [pc, #520]	@ (8002efc <Home_Screen+0x300>)
 8002cf4:	21a5      	movs	r1, #165	@ 0xa5
 8002cf6:	2078      	movs	r0, #120	@ 0x78
 8002cf8:	f003 fbcd 	bl	8006496 <LCD_Font>

		fillRect(250, 125, 150, 75, ILI9488_RED);
 8002cfc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	234b      	movs	r3, #75	@ 0x4b
 8002d04:	2296      	movs	r2, #150	@ 0x96
 8002d06:	217d      	movs	r1, #125	@ 0x7d
 8002d08:	20fa      	movs	r0, #250	@ 0xfa
 8002d0a:	f002 fded 	bl	80058e8 <fillRect>
		LCD_Font(280, 165, dispense, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002d0e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002d12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4b77      	ldr	r3, [pc, #476]	@ (8002efc <Home_Screen+0x300>)
 8002d1e:	21a5      	movs	r1, #165	@ 0xa5
 8002d20:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8002d24:	f003 fbb7 	bl	8006496 <LCD_Font>

		fillRect(70, 210, 150, 75, ILI9488_RED);
 8002d28:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	234b      	movs	r3, #75	@ 0x4b
 8002d30:	2296      	movs	r2, #150	@ 0x96
 8002d32:	21d2      	movs	r1, #210	@ 0xd2
 8002d34:	2046      	movs	r0, #70	@ 0x46
 8002d36:	f002 fdd7 	bl	80058e8 <fillRect>
		LCD_Font(100, 250, new_pill, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002d3a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002d3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	2301      	movs	r3, #1
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	4b6c      	ldr	r3, [pc, #432]	@ (8002efc <Home_Screen+0x300>)
 8002d4a:	21fa      	movs	r1, #250	@ 0xfa
 8002d4c:	2064      	movs	r0, #100	@ 0x64
 8002d4e:	f003 fba2 	bl	8006496 <LCD_Font>

		fillRect(250, 210, 150, 75, ILI9488_RED);
 8002d52:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	234b      	movs	r3, #75	@ 0x4b
 8002d5a:	2296      	movs	r2, #150	@ 0x96
 8002d5c:	21d2      	movs	r1, #210	@ 0xd2
 8002d5e:	20fa      	movs	r0, #250	@ 0xfa
 8002d60:	f002 fdc2 	bl	80058e8 <fillRect>
		LCD_Font(260, 250, fingerprint, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8002d64:	f107 021c 	add.w	r2, r7, #28
 8002d68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	4b62      	ldr	r3, [pc, #392]	@ (8002efc <Home_Screen+0x300>)
 8002d74:	21fa      	movs	r1, #250	@ 0xfa
 8002d76:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002d7a:	f003 fb8c 	bl	8006496 <LCD_Font>
		redraw=0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	}
	touchX = getX();
 8002d84:	f004 fe34 	bl	80079f0 <getX>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8002f00 <Home_Screen+0x304>)
 8002d8e:	801a      	strh	r2, [r3, #0]
	touchY = getY();
 8002d90:	f004 fe38 	bl	8007a04 <getY>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b5a      	ldr	r3, [pc, #360]	@ (8002f04 <Home_Screen+0x308>)
 8002d9a:	801a      	strh	r2, [r3, #0]

	char touch[20];


	sprintf(touch, "                ");
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	495a      	ldr	r1, [pc, #360]	@ (8002f08 <Home_Screen+0x30c>)
 8002da0:	4618      	mov	r0, r3
 8002da2:	f00a f821 	bl	800cde8 <siprintf>
	LCD_Font(10, 10, touch, _Open_Sans_Bold_16, 1, ILI9488_BLACK);
 8002da6:	463a      	mov	r2, r7
 8002da8:	2300      	movs	r3, #0
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	2301      	movs	r3, #1
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	4b56      	ldr	r3, [pc, #344]	@ (8002f0c <Home_Screen+0x310>)
 8002db2:	210a      	movs	r1, #10
 8002db4:	200a      	movs	r0, #10
 8002db6:	f003 fb6e 	bl	8006496 <LCD_Font>

	sprintf(touch, "x = %i, y = %i", touchX, touchY);
 8002dba:	4b51      	ldr	r3, [pc, #324]	@ (8002f00 <Home_Screen+0x304>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b50      	ldr	r3, [pc, #320]	@ (8002f04 <Home_Screen+0x308>)
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	4638      	mov	r0, r7
 8002dc6:	4952      	ldr	r1, [pc, #328]	@ (8002f10 <Home_Screen+0x314>)
 8002dc8:	f00a f80e 	bl	800cde8 <siprintf>
	LCD_Font(10, 10, touch, _Open_Sans_Bold_16, 1, ILI9488_BLACK);
 8002dcc:	463a      	mov	r2, r7
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8002f0c <Home_Screen+0x310>)
 8002dd8:	210a      	movs	r1, #10
 8002dda:	200a      	movs	r0, #10
 8002ddc:	f003 fb5b 	bl	8006496 <LCD_Font>

	// Touch function for Refill
	if (touchX >= 70 && touchX < 220 && touchY >= 40 && touchY < 115) {
 8002de0:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <Home_Screen+0x304>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	2b45      	cmp	r3, #69	@ 0x45
 8002de6:	d91d      	bls.n	8002e24 <Home_Screen+0x228>
 8002de8:	4b45      	ldr	r3, [pc, #276]	@ (8002f00 <Home_Screen+0x304>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	2bdb      	cmp	r3, #219	@ 0xdb
 8002dee:	d819      	bhi.n	8002e24 <Home_Screen+0x228>
 8002df0:	4b44      	ldr	r3, [pc, #272]	@ (8002f04 <Home_Screen+0x308>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	2b27      	cmp	r3, #39	@ 0x27
 8002df6:	d915      	bls.n	8002e24 <Home_Screen+0x228>
 8002df8:	4b42      	ldr	r3, [pc, #264]	@ (8002f04 <Home_Screen+0x308>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	2b72      	cmp	r3, #114	@ 0x72
 8002dfe:	d811      	bhi.n	8002e24 <Home_Screen+0x228>
		fillRect(70, 40, 150, 75, ILI9488_GREEN);
 8002e00:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	234b      	movs	r3, #75	@ 0x4b
 8002e08:	2296      	movs	r2, #150	@ 0x96
 8002e0a:	2128      	movs	r1, #40	@ 0x28
 8002e0c:	2046      	movs	r0, #70	@ 0x46
 8002e0e:	f002 fd6b 	bl	80058e8 <fillRect>
		option = 'r';
 8002e12:	2372      	movs	r3, #114	@ 0x72
 8002e14:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		lid_open_screen();
 8002e18:	f000 fb4c 	bl	80034b4 <lid_open_screen>
		redraw = 1;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002e22:	e0c6      	b.n	8002fb2 <Home_Screen+0x3b6>

		// Insert Function for refill - this literally just opens the lid
	}

	// Touch function for Scan
	else if (touchX >= 250 && touchX < 400 && touchY >= 40 && touchY < 115) {
 8002e24:	4b36      	ldr	r3, [pc, #216]	@ (8002f00 <Home_Screen+0x304>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	2bf9      	cmp	r3, #249	@ 0xf9
 8002e2a:	d91e      	bls.n	8002e6a <Home_Screen+0x26e>
 8002e2c:	4b34      	ldr	r3, [pc, #208]	@ (8002f00 <Home_Screen+0x304>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002e34:	d219      	bcs.n	8002e6a <Home_Screen+0x26e>
 8002e36:	4b33      	ldr	r3, [pc, #204]	@ (8002f04 <Home_Screen+0x308>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	2b27      	cmp	r3, #39	@ 0x27
 8002e3c:	d915      	bls.n	8002e6a <Home_Screen+0x26e>
 8002e3e:	4b31      	ldr	r3, [pc, #196]	@ (8002f04 <Home_Screen+0x308>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	2b72      	cmp	r3, #114	@ 0x72
 8002e44:	d811      	bhi.n	8002e6a <Home_Screen+0x26e>
		fillRect(250, 40, 150, 75, ILI9488_GREEN);
 8002e46:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	234b      	movs	r3, #75	@ 0x4b
 8002e4e:	2296      	movs	r2, #150	@ 0x96
 8002e50:	2128      	movs	r1, #40	@ 0x28
 8002e52:	20fa      	movs	r0, #250	@ 0xfa
 8002e54:	f002 fd48 	bl	80058e8 <fillRect>
		option = 's';
 8002e58:	2373      	movs	r3, #115	@ 0x73
 8002e5a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		scan_pill_screen();
 8002e5e:	f7ff fb07 	bl	8002470 <scan_pill_screen>
		redraw = 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002e68:	e0a3      	b.n	8002fb2 <Home_Screen+0x3b6>
		// Insert function for Pixycam stuff
	}


	// Touch function for Dispense
	else if (touchX >= 215 && touchX < 418 && touchY >= 125 && touchY < 200) {
 8002e6a:	4b25      	ldr	r3, [pc, #148]	@ (8002f00 <Home_Screen+0x304>)
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	2bd6      	cmp	r3, #214	@ 0xd6
 8002e70:	d91e      	bls.n	8002eb0 <Home_Screen+0x2b4>
 8002e72:	4b23      	ldr	r3, [pc, #140]	@ (8002f00 <Home_Screen+0x304>)
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	f5b3 7fd1 	cmp.w	r3, #418	@ 0x1a2
 8002e7a:	d219      	bcs.n	8002eb0 <Home_Screen+0x2b4>
 8002e7c:	4b21      	ldr	r3, [pc, #132]	@ (8002f04 <Home_Screen+0x308>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	2b7c      	cmp	r3, #124	@ 0x7c
 8002e82:	d915      	bls.n	8002eb0 <Home_Screen+0x2b4>
 8002e84:	4b1f      	ldr	r3, [pc, #124]	@ (8002f04 <Home_Screen+0x308>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e8a:	d811      	bhi.n	8002eb0 <Home_Screen+0x2b4>
		fillRect(250, 125, 150, 75, ILI9488_GREEN);
 8002e8c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	234b      	movs	r3, #75	@ 0x4b
 8002e94:	2296      	movs	r2, #150	@ 0x96
 8002e96:	217d      	movs	r1, #125	@ 0x7d
 8002e98:	20fa      	movs	r0, #250	@ 0xfa
 8002e9a:	f002 fd25 	bl	80058e8 <fillRect>
		Dispense_Auto_Manual();
 8002e9e:	f000 f891 	bl	8002fc4 <Dispense_Auto_Manual>
		option = 'd';
 8002ea2:	2364      	movs	r3, #100	@ 0x64
 8002ea4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		redraw = 1;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002eae:	e080      	b.n	8002fb2 <Home_Screen+0x3b6>

	}

	//BACK
	else if (touchX >= 6 && touchX < 226 && touchY >= 125 && touchY < 200) {
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <Home_Screen+0x304>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d92d      	bls.n	8002f14 <Home_Screen+0x318>
 8002eb8:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <Home_Screen+0x304>)
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	2be1      	cmp	r3, #225	@ 0xe1
 8002ebe:	d829      	bhi.n	8002f14 <Home_Screen+0x318>
 8002ec0:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <Home_Screen+0x308>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	2b7c      	cmp	r3, #124	@ 0x7c
 8002ec6:	d925      	bls.n	8002f14 <Home_Screen+0x318>
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <Home_Screen+0x308>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ece:	d821      	bhi.n	8002f14 <Home_Screen+0x318>
		fillRect(70, 125, 150, 75, ILI9488_GREEN);
 8002ed0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	234b      	movs	r3, #75	@ 0x4b
 8002ed8:	2296      	movs	r2, #150	@ 0x96
 8002eda:	217d      	movs	r1, #125	@ 0x7d
 8002edc:	2046      	movs	r0, #70	@ 0x46
 8002ede:	f002 fd03 	bl	80058e8 <fillRect>
		return;
 8002ee2:	e067      	b.n	8002fb4 <Home_Screen+0x3b8>
 8002ee4:	0800eaa0 	.word	0x0800eaa0
 8002ee8:	0800eaa8 	.word	0x0800eaa8
 8002eec:	0800eab0 	.word	0x0800eab0
 8002ef0:	0800eabc 	.word	0x0800eabc
 8002ef4:	0800eac8 	.word	0x0800eac8
 8002ef8:	0800e908 	.word	0x0800e908
 8002efc:	0800fd34 	.word	0x0800fd34
 8002f00:	20000698 	.word	0x20000698
 8002f04:	2000069a 	.word	0x2000069a
 8002f08:	0800ea7c 	.word	0x0800ea7c
 8002f0c:	0800f3f0 	.word	0x0800f3f0
 8002f10:	0800ea90 	.word	0x0800ea90
		redraw = 1;
	
	}

	// Touch function for New Pill
	else if (touchX >= 70 && touchX < 220 && touchY >= 210 && touchY < 285) {
 8002f14:	4b29      	ldr	r3, [pc, #164]	@ (8002fbc <Home_Screen+0x3c0>)
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	2b45      	cmp	r3, #69	@ 0x45
 8002f1a:	d91f      	bls.n	8002f5c <Home_Screen+0x360>
 8002f1c:	4b27      	ldr	r3, [pc, #156]	@ (8002fbc <Home_Screen+0x3c0>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	2bdb      	cmp	r3, #219	@ 0xdb
 8002f22:	d81b      	bhi.n	8002f5c <Home_Screen+0x360>
 8002f24:	4b26      	ldr	r3, [pc, #152]	@ (8002fc0 <Home_Screen+0x3c4>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	2bd1      	cmp	r3, #209	@ 0xd1
 8002f2a:	d917      	bls.n	8002f5c <Home_Screen+0x360>
 8002f2c:	4b24      	ldr	r3, [pc, #144]	@ (8002fc0 <Home_Screen+0x3c4>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8002f34:	d812      	bhi.n	8002f5c <Home_Screen+0x360>
		//
		fillRect(70, 210, 150, 75, ILI9488_GREEN);
 8002f36:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	234b      	movs	r3, #75	@ 0x4b
 8002f3e:	2296      	movs	r2, #150	@ 0x96
 8002f40:	21d2      	movs	r1, #210	@ 0xd2
 8002f42:	2046      	movs	r0, #70	@ 0x46
 8002f44:	f002 fcd0 	bl	80058e8 <fillRect>
		dispenserChoose(2);
 8002f48:	2002      	movs	r0, #2
 8002f4a:	f000 f90f 	bl	800316c <dispenserChoose>
		option = 'n';
 8002f4e:	236e      	movs	r3, #110	@ 0x6e
 8002f50:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		redraw = 1;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002f5a:	e02a      	b.n	8002fb2 <Home_Screen+0x3b6>

	}

	// Touch function for Fingerprints
	else if (touchX >= 250 && touchX < 400 && touchY >= 210 && touchY < 285) {
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <Home_Screen+0x3c0>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	2bf9      	cmp	r3, #249	@ 0xf9
 8002f62:	f67f ae82 	bls.w	8002c6a <Home_Screen+0x6e>
 8002f66:	4b15      	ldr	r3, [pc, #84]	@ (8002fbc <Home_Screen+0x3c0>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002f6e:	f4bf ae7c 	bcs.w	8002c6a <Home_Screen+0x6e>
 8002f72:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <Home_Screen+0x3c4>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	2bd1      	cmp	r3, #209	@ 0xd1
 8002f78:	f67f ae77 	bls.w	8002c6a <Home_Screen+0x6e>
 8002f7c:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <Home_Screen+0x3c4>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8002f84:	f63f ae71 	bhi.w	8002c6a <Home_Screen+0x6e>
		fillRect(250, 210, 150, 75, ILI9488_GREEN);
 8002f88:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	234b      	movs	r3, #75	@ 0x4b
 8002f90:	2296      	movs	r2, #150	@ 0x96
 8002f92:	21d2      	movs	r1, #210	@ 0xd2
 8002f94:	20fa      	movs	r0, #250	@ 0xfa
 8002f96:	f002 fca7 	bl	80058e8 <fillRect>
		FingerPrint_Manager();
 8002f9a:	f000 fafd 	bl	8003598 <FingerPrint_Manager>
		HAL_Delay(1000);
 8002f9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fa2:	f004 fdd7 	bl	8007b54 <HAL_Delay>
		option = 'f';
 8002fa6:	2366      	movs	r3, #102	@ 0x66
 8002fa8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		redraw = 1;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	while (1){
 8002fb2:	e65a      	b.n	8002c6a <Home_Screen+0x6e>
	}
	}

}
 8002fb4:	375c      	adds	r7, #92	@ 0x5c
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000698 	.word	0x20000698
 8002fc0:	2000069a 	.word	0x2000069a

08002fc4 <Dispense_Auto_Manual>:

void Dispense_Auto_Manual() {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	@ 0x28
 8002fc8:	af02      	add	r7, sp, #8

	fillScreen(ILI9488_WHITE);
 8002fca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002fce:	f002 fc71 	bl	80058b4 <fillScreen>



	char manual[] = "Manual";
 8002fd2:	4a60      	ldr	r2, [pc, #384]	@ (8003154 <Dispense_Auto_Manual+0x190>)
 8002fd4:	f107 0318 	add.w	r3, r7, #24
 8002fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fdc:	6018      	str	r0, [r3, #0]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	8019      	strh	r1, [r3, #0]
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	0c0a      	lsrs	r2, r1, #16
 8002fe6:	701a      	strb	r2, [r3, #0]
	char automatic[] = "Automatic";
 8002fe8:	4a5b      	ldr	r2, [pc, #364]	@ (8003158 <Dispense_Auto_Manual+0x194>)
 8002fea:	f107 030c 	add.w	r3, r7, #12
 8002fee:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ff0:	c303      	stmia	r3!, {r0, r1}
 8002ff2:	801a      	strh	r2, [r3, #0]
	char back[] = "Back";
 8002ff4:	4a59      	ldr	r2, [pc, #356]	@ (800315c <Dispense_Auto_Manual+0x198>)
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ffc:	6018      	str	r0, [r3, #0]
 8002ffe:	3304      	adds	r3, #4
 8003000:	7019      	strb	r1, [r3, #0]

	fillRect(50, 50, 150, 150, ILI9488_RED);
 8003002:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2396      	movs	r3, #150	@ 0x96
 800300a:	2296      	movs	r2, #150	@ 0x96
 800300c:	2132      	movs	r1, #50	@ 0x32
 800300e:	2032      	movs	r0, #50	@ 0x32
 8003010:	f002 fc6a 	bl	80058e8 <fillRect>
	LCD_Font(80, 140, manual, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8003014:	f107 0218 	add.w	r2, r7, #24
 8003018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	2301      	movs	r3, #1
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4b4f      	ldr	r3, [pc, #316]	@ (8003160 <Dispense_Auto_Manual+0x19c>)
 8003024:	218c      	movs	r1, #140	@ 0x8c
 8003026:	2050      	movs	r0, #80	@ 0x50
 8003028:	f003 fa35 	bl	8006496 <LCD_Font>

	fillRect(250, 50, 150, 150, ILI9488_RED);
 800302c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2396      	movs	r3, #150	@ 0x96
 8003034:	2296      	movs	r2, #150	@ 0x96
 8003036:	2132      	movs	r1, #50	@ 0x32
 8003038:	20fa      	movs	r0, #250	@ 0xfa
 800303a:	f002 fc55 	bl	80058e8 <fillRect>
	LCD_Font(270, 140, automatic, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800303e:	f107 020c 	add.w	r2, r7, #12
 8003042:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2301      	movs	r3, #1
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	4b44      	ldr	r3, [pc, #272]	@ (8003160 <Dispense_Auto_Manual+0x19c>)
 800304e:	218c      	movs	r1, #140	@ 0x8c
 8003050:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8003054:	f003 fa1f 	bl	8006496 <LCD_Font>

	fillRect(50, 250, 350, 50, ILI9488_RED);
 8003058:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	2332      	movs	r3, #50	@ 0x32
 8003060:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003064:	21fa      	movs	r1, #250	@ 0xfa
 8003066:	2032      	movs	r0, #50	@ 0x32
 8003068:	f002 fc3e 	bl	80058e8 <fillRect>
	LCD_Font(200, 280, back, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800306c:	1d3a      	adds	r2, r7, #4
 800306e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2301      	movs	r3, #1
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	4b39      	ldr	r3, [pc, #228]	@ (8003160 <Dispense_Auto_Manual+0x19c>)
 800307a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800307e:	20c8      	movs	r0, #200	@ 0xc8
 8003080:	f003 fa09 	bl	8006496 <LCD_Font>

	while (1){

		touchX = getX();
 8003084:	f004 fcb4 	bl	80079f0 <getX>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	4b35      	ldr	r3, [pc, #212]	@ (8003164 <Dispense_Auto_Manual+0x1a0>)
 800308e:	801a      	strh	r2, [r3, #0]
		touchY = getY();
 8003090:	f004 fcb8 	bl	8007a04 <getY>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b33      	ldr	r3, [pc, #204]	@ (8003168 <Dispense_Auto_Manual+0x1a4>)
 800309a:	801a      	strh	r2, [r3, #0]


	if (touchX >= 50 && touchX < 200 && touchY >= 50 && touchY < 200) {
 800309c:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <Dispense_Auto_Manual+0x1a0>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	2b31      	cmp	r3, #49	@ 0x31
 80030a2:	d918      	bls.n	80030d6 <Dispense_Auto_Manual+0x112>
 80030a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003164 <Dispense_Auto_Manual+0x1a0>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80030aa:	d814      	bhi.n	80030d6 <Dispense_Auto_Manual+0x112>
 80030ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003168 <Dispense_Auto_Manual+0x1a4>)
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	2b31      	cmp	r3, #49	@ 0x31
 80030b2:	d910      	bls.n	80030d6 <Dispense_Auto_Manual+0x112>
 80030b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003168 <Dispense_Auto_Manual+0x1a4>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80030ba:	d80c      	bhi.n	80030d6 <Dispense_Auto_Manual+0x112>
		fillRect(50, 50, 150, 150, ILI9488_GREEN);
 80030bc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	2396      	movs	r3, #150	@ 0x96
 80030c4:	2296      	movs	r2, #150	@ 0x96
 80030c6:	2132      	movs	r1, #50	@ 0x32
 80030c8:	2032      	movs	r0, #50	@ 0x32
 80030ca:	f002 fc0d 	bl	80058e8 <fillRect>
		dispenserChoose(1);
 80030ce:	2001      	movs	r0, #1
 80030d0:	f000 f84c 	bl	800316c <dispenserChoose>
		return;
 80030d4:	e03a      	b.n	800314c <Dispense_Auto_Manual+0x188>
	}




	if (touchX >= 250 && touchX < 400 && touchY >= 50 && touchY < 200) {
 80030d6:	4b23      	ldr	r3, [pc, #140]	@ (8003164 <Dispense_Auto_Manual+0x1a0>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	2bf9      	cmp	r3, #249	@ 0xf9
 80030dc:	d91a      	bls.n	8003114 <Dispense_Auto_Manual+0x150>
 80030de:	4b21      	ldr	r3, [pc, #132]	@ (8003164 <Dispense_Auto_Manual+0x1a0>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80030e6:	d215      	bcs.n	8003114 <Dispense_Auto_Manual+0x150>
 80030e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <Dispense_Auto_Manual+0x1a4>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	2b31      	cmp	r3, #49	@ 0x31
 80030ee:	d911      	bls.n	8003114 <Dispense_Auto_Manual+0x150>
 80030f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <Dispense_Auto_Manual+0x1a4>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80030f6:	d80d      	bhi.n	8003114 <Dispense_Auto_Manual+0x150>
		fillRect(250, 50, 150, 150, ILI9488_GREEN);
 80030f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2396      	movs	r3, #150	@ 0x96
 8003100:	2296      	movs	r2, #150	@ 0x96
 8003102:	2132      	movs	r1, #50	@ 0x32
 8003104:	20fa      	movs	r0, #250	@ 0xfa
 8003106:	f002 fbef 	bl	80058e8 <fillRect>
		DispenseScreen();
 800310a:	f7ff f993 	bl	8002434 <DispenseScreen>
		automaticDispense();
 800310e:	f7fe fba7 	bl	8001860 <automaticDispense>
		return;
 8003112:	e01b      	b.n	800314c <Dispense_Auto_Manual+0x188>
	}



	if (touchX >= 50 && touchX < 400 && touchY >= 250 && touchY < 300) {
 8003114:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <Dispense_Auto_Manual+0x1a0>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	2b31      	cmp	r3, #49	@ 0x31
 800311a:	d9b3      	bls.n	8003084 <Dispense_Auto_Manual+0xc0>
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <Dispense_Auto_Manual+0x1a0>)
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003124:	d2ae      	bcs.n	8003084 <Dispense_Auto_Manual+0xc0>
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <Dispense_Auto_Manual+0x1a4>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	2bf9      	cmp	r3, #249	@ 0xf9
 800312c:	d9aa      	bls.n	8003084 <Dispense_Auto_Manual+0xc0>
 800312e:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <Dispense_Auto_Manual+0x1a4>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003136:	d2a5      	bcs.n	8003084 <Dispense_Auto_Manual+0xc0>
		fillRect(50, 250, 350, 50, ILI9488_GREEN);
 8003138:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2332      	movs	r3, #50	@ 0x32
 8003140:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003144:	21fa      	movs	r1, #250	@ 0xfa
 8003146:	2032      	movs	r0, #50	@ 0x32
 8003148:	f002 fbce 	bl	80058e8 <fillRect>
		return;
	}
	}

}
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	0800ead8 	.word	0x0800ead8
 8003158:	0800eae0 	.word	0x0800eae0
 800315c:	0800e908 	.word	0x0800e908
 8003160:	0800fd34 	.word	0x0800fd34
 8003164:	20000698 	.word	0x20000698
 8003168:	2000069a 	.word	0x2000069a

0800316c <dispenserChoose>:

//0 - Delete, 1 - manual dispense, 2 - loadNewPill.
void dispenserChoose(uint8_t mode) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b08c      	sub	sp, #48	@ 0x30
 8003170:	af02      	add	r7, sp, #8
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
	char one[] = "1";
 8003176:	2331      	movs	r3, #49	@ 0x31
 8003178:	83bb      	strh	r3, [r7, #28]
	char two[] = "2";
 800317a:	2332      	movs	r3, #50	@ 0x32
 800317c:	833b      	strh	r3, [r7, #24]
	char three[] = "3";
 800317e:	2333      	movs	r3, #51	@ 0x33
 8003180:	82bb      	strh	r3, [r7, #20]
	char back[] = "Back";
 8003182:	4ab3      	ldr	r2, [pc, #716]	@ (8003450 <dispenserChoose+0x2e4>)
 8003184:	f107 030c 	add.w	r3, r7, #12
 8003188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800318c:	6018      	str	r0, [r3, #0]
 800318e:	3304      	adds	r3, #4
 8003190:	7019      	strb	r1, [r3, #0]

	uint8_t dispOneEnabled;
	uint8_t dispTwoEnabled;
	uint8_t dispThreeEnabled;
	fillScreen(ILI9488_WHITE);
 8003192:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003196:	f002 fb8d 	bl	80058b4 <fillScreen>

	if (mode == 1 || mode == 0){
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <dispenserChoose+0x3a>
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d121      	bne.n	80031ea <dispenserChoose+0x7e>
		 dispOneEnabled = !dispenserAvailable(0);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7fe f8d8 	bl	800135c <dispenserAvailable>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		 dispTwoEnabled = !dispenserAvailable(1);
 80031bc:	2001      	movs	r0, #1
 80031be:	f7fe f8cd 	bl	800135c <dispenserAvailable>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		 dispThreeEnabled = !dispenserAvailable(2);
 80031d2:	2002      	movs	r0, #2
 80031d4:	f7fe f8c2 	bl	800135c <dispenserAvailable>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf0c      	ite	eq
 80031de:	2301      	moveq	r3, #1
 80031e0:	2300      	movne	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80031e8:	e011      	b.n	800320e <dispenserChoose+0xa2>

	}

	else{
		 dispOneEnabled = dispenserAvailable(0);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fe f8b6 	bl	800135c <dispenserAvailable>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		 dispTwoEnabled = dispenserAvailable(1);
 80031f6:	2001      	movs	r0, #1
 80031f8:	f7fe f8b0 	bl	800135c <dispenserAvailable>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		 dispThreeEnabled = dispenserAvailable(2);
 8003202:	2002      	movs	r0, #2
 8003204:	f7fe f8aa 	bl	800135c <dispenserAvailable>
 8003208:	4603      	mov	r3, r0
 800320a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}

		uint16_t dispOneColor = dispOneEnabled ? ILI9488_RED : ILI9488_DARKGREY;
 800320e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <dispenserChoose+0xb0>
 8003216:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800321a:	e001      	b.n	8003220 <dispenserChoose+0xb4>
 800321c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003220:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint16_t dispTwoColor = dispTwoEnabled ? ILI9488_RED : ILI9488_DARKGREY;
 8003222:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <dispenserChoose+0xc4>
 800322a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800322e:	e001      	b.n	8003234 <dispenserChoose+0xc8>
 8003230:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003234:	843b      	strh	r3, [r7, #32]
		uint16_t dispThreeColor = dispThreeEnabled ? ILI9488_RED : ILI9488_DARKGREY;
 8003236:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <dispenserChoose+0xd8>
 800323e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003242:	e001      	b.n	8003248 <dispenserChoose+0xdc>
 8003244:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003248:	83fb      	strh	r3, [r7, #30]

		fillRect(50, 50, 100, 150, dispOneColor);
 800324a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2396      	movs	r3, #150	@ 0x96
 8003250:	2264      	movs	r2, #100	@ 0x64
 8003252:	2132      	movs	r1, #50	@ 0x32
 8003254:	2032      	movs	r0, #50	@ 0x32
 8003256:	f002 fb47 	bl	80058e8 <fillRect>
		LCD_Font(90, 150, one, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800325a:	f107 021c 	add.w	r2, r7, #28
 800325e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	2301      	movs	r3, #1
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	4b7a      	ldr	r3, [pc, #488]	@ (8003454 <dispenserChoose+0x2e8>)
 800326a:	2196      	movs	r1, #150	@ 0x96
 800326c:	205a      	movs	r0, #90	@ 0x5a
 800326e:	f003 f912 	bl	8006496 <LCD_Font>

		fillRect(200, 50, 100, 150, dispTwoColor);
 8003272:	8c3b      	ldrh	r3, [r7, #32]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2396      	movs	r3, #150	@ 0x96
 8003278:	2264      	movs	r2, #100	@ 0x64
 800327a:	2132      	movs	r1, #50	@ 0x32
 800327c:	20c8      	movs	r0, #200	@ 0xc8
 800327e:	f002 fb33 	bl	80058e8 <fillRect>
		LCD_Font(240, 150, two, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8003282:	f107 0218 	add.w	r2, r7, #24
 8003286:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2301      	movs	r3, #1
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	4b70      	ldr	r3, [pc, #448]	@ (8003454 <dispenserChoose+0x2e8>)
 8003292:	2196      	movs	r1, #150	@ 0x96
 8003294:	20f0      	movs	r0, #240	@ 0xf0
 8003296:	f003 f8fe 	bl	8006496 <LCD_Font>


		fillRect(350, 50, 100, 150, dispThreeColor);
 800329a:	8bfb      	ldrh	r3, [r7, #30]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2396      	movs	r3, #150	@ 0x96
 80032a0:	2264      	movs	r2, #100	@ 0x64
 80032a2:	2132      	movs	r1, #50	@ 0x32
 80032a4:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80032a8:	f002 fb1e 	bl	80058e8 <fillRect>
		LCD_Font(390, 150, three, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 80032ac:	f107 0214 	add.w	r2, r7, #20
 80032b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	2301      	movs	r3, #1
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	4b66      	ldr	r3, [pc, #408]	@ (8003454 <dispenserChoose+0x2e8>)
 80032bc:	2196      	movs	r1, #150	@ 0x96
 80032be:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 80032c2:	f003 f8e8 	bl	8006496 <LCD_Font>

		fillRect(70, 250, 350, 50, ILI9488_RED);
 80032c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2332      	movs	r3, #50	@ 0x32
 80032ce:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80032d2:	21fa      	movs	r1, #250	@ 0xfa
 80032d4:	2046      	movs	r0, #70	@ 0x46
 80032d6:	f002 fb07 	bl	80058e8 <fillRect>
		LCD_Font(220, 280, back, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 80032da:	f107 020c 	add.w	r2, r7, #12
 80032de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	2301      	movs	r3, #1
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003454 <dispenserChoose+0x2e8>)
 80032ea:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80032ee:	20dc      	movs	r0, #220	@ 0xdc
 80032f0:	f003 f8d1 	bl	8006496 <LCD_Font>
		// 1 for Delete, 0 for Manual

	uint8_t choice = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	while (1){
	touchX = getX();
 80032fa:	f004 fb79 	bl	80079f0 <getX>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	4b55      	ldr	r3, [pc, #340]	@ (8003458 <dispenserChoose+0x2ec>)
 8003304:	801a      	strh	r2, [r3, #0]
	touchY = getY();
 8003306:	f004 fb7d 	bl	8007a04 <getY>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	4b53      	ldr	r3, [pc, #332]	@ (800345c <dispenserChoose+0x2f0>)
 8003310:	801a      	strh	r2, [r3, #0]




	if (dispOneEnabled && touchX >= 50 && touchX < 150 && touchY >= 50 && touchY < 200) {
 8003312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01c      	beq.n	8003354 <dispenserChoose+0x1e8>
 800331a:	4b4f      	ldr	r3, [pc, #316]	@ (8003458 <dispenserChoose+0x2ec>)
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	2b31      	cmp	r3, #49	@ 0x31
 8003320:	d918      	bls.n	8003354 <dispenserChoose+0x1e8>
 8003322:	4b4d      	ldr	r3, [pc, #308]	@ (8003458 <dispenserChoose+0x2ec>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	2b95      	cmp	r3, #149	@ 0x95
 8003328:	d814      	bhi.n	8003354 <dispenserChoose+0x1e8>
 800332a:	4b4c      	ldr	r3, [pc, #304]	@ (800345c <dispenserChoose+0x2f0>)
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	2b31      	cmp	r3, #49	@ 0x31
 8003330:	d910      	bls.n	8003354 <dispenserChoose+0x1e8>
 8003332:	4b4a      	ldr	r3, [pc, #296]	@ (800345c <dispenserChoose+0x2f0>)
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	2bc7      	cmp	r3, #199	@ 0xc7
 8003338:	d80c      	bhi.n	8003354 <dispenserChoose+0x1e8>
		fillRect(50, 50, 100, 150, ILI9488_GREEN);
 800333a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2396      	movs	r3, #150	@ 0x96
 8003342:	2264      	movs	r2, #100	@ 0x64
 8003344:	2132      	movs	r1, #50	@ 0x32
 8003346:	2032      	movs	r0, #50	@ 0x32
 8003348:	f002 face 	bl	80058e8 <fillRect>
		choice = 1;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		break;
 8003352:	e066      	b.n	8003422 <dispenserChoose+0x2b6>
		//return;
	}



	if (dispTwoEnabled && touchX >= 200 && touchX < 300 && touchY >= 50 && touchY < 200) {
 8003354:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01d      	beq.n	8003398 <dispenserChoose+0x22c>
 800335c:	4b3e      	ldr	r3, [pc, #248]	@ (8003458 <dispenserChoose+0x2ec>)
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	2bc7      	cmp	r3, #199	@ 0xc7
 8003362:	d919      	bls.n	8003398 <dispenserChoose+0x22c>
 8003364:	4b3c      	ldr	r3, [pc, #240]	@ (8003458 <dispenserChoose+0x2ec>)
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800336c:	d214      	bcs.n	8003398 <dispenserChoose+0x22c>
 800336e:	4b3b      	ldr	r3, [pc, #236]	@ (800345c <dispenserChoose+0x2f0>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	2b31      	cmp	r3, #49	@ 0x31
 8003374:	d910      	bls.n	8003398 <dispenserChoose+0x22c>
 8003376:	4b39      	ldr	r3, [pc, #228]	@ (800345c <dispenserChoose+0x2f0>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	2bc7      	cmp	r3, #199	@ 0xc7
 800337c:	d80c      	bhi.n	8003398 <dispenserChoose+0x22c>
		fillRect(200, 50, 100, 150, ILI9488_GREEN);
 800337e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2396      	movs	r3, #150	@ 0x96
 8003386:	2264      	movs	r2, #100	@ 0x64
 8003388:	2132      	movs	r1, #50	@ 0x32
 800338a:	20c8      	movs	r0, #200	@ 0xc8
 800338c:	f002 faac 	bl	80058e8 <fillRect>
		choice = 2;
 8003390:	2302      	movs	r3, #2
 8003392:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		break;
 8003396:	e044      	b.n	8003422 <dispenserChoose+0x2b6>
		//return;
	}


	if (dispThreeEnabled && touchX >= 350 && touchX < 450 && touchY >= 50 && touchY < 200) {
 8003398:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01f      	beq.n	80033e0 <dispenserChoose+0x274>
 80033a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003458 <dispenserChoose+0x2ec>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80033a8:	d31a      	bcc.n	80033e0 <dispenserChoose+0x274>
 80033aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <dispenserChoose+0x2ec>)
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80033b2:	d215      	bcs.n	80033e0 <dispenserChoose+0x274>
 80033b4:	4b29      	ldr	r3, [pc, #164]	@ (800345c <dispenserChoose+0x2f0>)
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	2b31      	cmp	r3, #49	@ 0x31
 80033ba:	d911      	bls.n	80033e0 <dispenserChoose+0x274>
 80033bc:	4b27      	ldr	r3, [pc, #156]	@ (800345c <dispenserChoose+0x2f0>)
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80033c2:	d80d      	bhi.n	80033e0 <dispenserChoose+0x274>
		fillRect(350, 50, 100, 150, ILI9488_GREEN);
 80033c4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2396      	movs	r3, #150	@ 0x96
 80033cc:	2264      	movs	r2, #100	@ 0x64
 80033ce:	2132      	movs	r1, #50	@ 0x32
 80033d0:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80033d4:	f002 fa88 	bl	80058e8 <fillRect>
		choice = 3;
 80033d8:	2303      	movs	r3, #3
 80033da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		break;
 80033de:	e020      	b.n	8003422 <dispenserChoose+0x2b6>
	}



	if (touchX >= 70 && touchX < 400 && touchY >= 250 && touchY < 300) {
 80033e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <dispenserChoose+0x2ec>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	2b45      	cmp	r3, #69	@ 0x45
 80033e6:	d988      	bls.n	80032fa <dispenserChoose+0x18e>
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <dispenserChoose+0x2ec>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80033f0:	d283      	bcs.n	80032fa <dispenserChoose+0x18e>
 80033f2:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <dispenserChoose+0x2f0>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	2bf9      	cmp	r3, #249	@ 0xf9
 80033f8:	f67f af7f 	bls.w	80032fa <dispenserChoose+0x18e>
 80033fc:	4b17      	ldr	r3, [pc, #92]	@ (800345c <dispenserChoose+0x2f0>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003404:	f4bf af79 	bcs.w	80032fa <dispenserChoose+0x18e>
		fillRect(70, 250, 350, 50, ILI9488_GREEN);
 8003408:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2332      	movs	r3, #50	@ 0x32
 8003410:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003414:	21fa      	movs	r1, #250	@ 0xfa
 8003416:	2046      	movs	r0, #70	@ 0x46
 8003418:	f002 fa66 	bl	80058e8 <fillRect>
		choice = 4;
 800341c:	2304      	movs	r3, #4
 800341e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	}

	//go back home.
	if (choice == 4) {
 8003422:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003426:	2b04      	cmp	r3, #4
 8003428:	d03e      	beq.n	80034a8 <dispenserChoose+0x33c>
		return;
	}

	switch (mode){
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d033      	beq.n	8003498 <dispenserChoose+0x32c>
 8003430:	2b02      	cmp	r3, #2
 8003432:	dc3c      	bgt.n	80034ae <dispenserChoose+0x342>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <dispenserChoose+0x2d2>
 8003438:	2b01      	cmp	r3, #1
 800343a:	d011      	beq.n	8003460 <dispenserChoose+0x2f4>
 800343c:	e037      	b.n	80034ae <dispenserChoose+0x342>
	case 0: //delete
		deleteDispenser(choice - 1);
 800343e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003442:	3b01      	subs	r3, #1
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd ffa2 	bl	8001390 <deleteDispenser>
		break;
 800344c:	e02f      	b.n	80034ae <dispenserChoose+0x342>
 800344e:	bf00      	nop
 8003450:	0800e908 	.word	0x0800e908
 8003454:	0800fd34 	.word	0x0800fd34
 8003458:	20000698 	.word	0x20000698
 800345c:	2000069a 	.word	0x2000069a
	case 1: //manual dispense
		//insert manual dispense function here
		switch(choice - 1){
 8003460:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003464:	3b01      	subs	r3, #1
 8003466:	2b02      	cmp	r3, #2
 8003468:	d010      	beq.n	800348c <dispenserChoose+0x320>
 800346a:	2b02      	cmp	r3, #2
 800346c:	dc1e      	bgt.n	80034ac <dispenserChoose+0x340>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <dispenserChoose+0x30c>
 8003472:	2b01      	cmp	r3, #1
 8003474:	d005      	beq.n	8003482 <dispenserChoose+0x316>
		case 2:
			DispenseScreen();
			Dispense3();
			break;
		}
		break;
 8003476:	e019      	b.n	80034ac <dispenserChoose+0x340>
			DispenseScreen();
 8003478:	f7fe ffdc 	bl	8002434 <DispenseScreen>
			Dispense1();
 800347c:	f7fe fa28 	bl	80018d0 <Dispense1>
			break;
 8003480:	e009      	b.n	8003496 <dispenserChoose+0x32a>
			DispenseScreen();
 8003482:	f7fe ffd7 	bl	8002434 <DispenseScreen>
			Dispense2();
 8003486:	f7fe fa53 	bl	8001930 <Dispense2>
			break;
 800348a:	e004      	b.n	8003496 <dispenserChoose+0x32a>
			DispenseScreen();
 800348c:	f7fe ffd2 	bl	8002434 <DispenseScreen>
			Dispense3();
 8003490:	f7fe fa82 	bl	8001998 <Dispense3>
			break;
 8003494:	bf00      	nop
		break;
 8003496:	e009      	b.n	80034ac <dispenserChoose+0x340>
	case 2:
		New_Pill_Screen(choice -  1);
 8003498:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800349c:	3b01      	subs	r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fc03 	bl	8003cac <New_Pill_Screen>
		break;
 80034a6:	e002      	b.n	80034ae <dispenserChoose+0x342>
		return;
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <dispenserChoose+0x342>
		break;
 80034ac:	bf00      	nop

	}


}
 80034ae:	3728      	adds	r7, #40	@ 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <lid_open_screen>:



void lid_open_screen(){
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b089      	sub	sp, #36	@ 0x24
 80034b8:	af02      	add	r7, sp, #8
	char unlockButton[] = "Re-Lock";
 80034ba:	4a32      	ldr	r2, [pc, #200]	@ (8003584 <lid_open_screen+0xd0>)
 80034bc:	f107 0310 	add.w	r3, r7, #16
 80034c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034c4:	e883 0003 	stmia.w	r3, {r0, r1}

	char lockingMsg[] = "Re-locking lid";
 80034c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003588 <lid_open_screen+0xd4>)
 80034ca:	463c      	mov	r4, r7
 80034cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ce:	c407      	stmia	r4!, {r0, r1, r2}
 80034d0:	8023      	strh	r3, [r4, #0]
 80034d2:	3402      	adds	r4, #2
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	7023      	strb	r3, [r4, #0]

	fillScreen(ILI9488_WHITE);
 80034d8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80034dc:	f002 f9ea 	bl	80058b4 <fillScreen>
	fillRect(50, 250, 350, 50, ILI9488_RED);
 80034e0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2332      	movs	r3, #50	@ 0x32
 80034e8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80034ec:	21fa      	movs	r1, #250	@ 0xfa
 80034ee:	2032      	movs	r0, #50	@ 0x32
 80034f0:	f002 f9fa 	bl	80058e8 <fillRect>
	LCD_Font(200, 280, unlockButton, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 80034f4:	f107 0210 	add.w	r2, r7, #16
 80034f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	2301      	movs	r3, #1
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4b22      	ldr	r3, [pc, #136]	@ (800358c <lid_open_screen+0xd8>)
 8003504:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8003508:	20c8      	movs	r0, #200	@ 0xc8
 800350a:	f002 ffc4 	bl	8006496 <LCD_Font>
	unlock();
 800350e:	f7fe fbd7 	bl	8001cc0 <unlock>
	while(1){
		touchX = getX();
 8003512:	f004 fa6d 	bl	80079f0 <getX>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	4b1d      	ldr	r3, [pc, #116]	@ (8003590 <lid_open_screen+0xdc>)
 800351c:	801a      	strh	r2, [r3, #0]
		touchY = getY();
 800351e:	f004 fa71 	bl	8007a04 <getY>
 8003522:	4603      	mov	r3, r0
 8003524:	461a      	mov	r2, r3
 8003526:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <lid_open_screen+0xe0>)
 8003528:	801a      	strh	r2, [r3, #0]
	if (touchX >= 50 && touchX < 400 && touchY >= 250 && touchY < 300) {
 800352a:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <lid_open_screen+0xdc>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	2b31      	cmp	r3, #49	@ 0x31
 8003530:	d9ef      	bls.n	8003512 <lid_open_screen+0x5e>
 8003532:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <lid_open_screen+0xdc>)
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800353a:	d2ea      	bcs.n	8003512 <lid_open_screen+0x5e>
 800353c:	4b15      	ldr	r3, [pc, #84]	@ (8003594 <lid_open_screen+0xe0>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	2bf9      	cmp	r3, #249	@ 0xf9
 8003542:	d9e6      	bls.n	8003512 <lid_open_screen+0x5e>
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <lid_open_screen+0xe0>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800354c:	d2e1      	bcs.n	8003512 <lid_open_screen+0x5e>
		fillRect(50, 250, 350, 50, ILI9488_GREEN);
 800354e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2332      	movs	r3, #50	@ 0x32
 8003556:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800355a:	21fa      	movs	r1, #250	@ 0xfa
 800355c:	2032      	movs	r0, #50	@ 0x32
 800355e:	f002 f9c3 	bl	80058e8 <fillRect>
		LCD_Font(10, 50, lockingMsg, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003562:	463a      	mov	r2, r7
 8003564:	2300      	movs	r3, #0
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	2301      	movs	r3, #1
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	4b07      	ldr	r3, [pc, #28]	@ (800358c <lid_open_screen+0xd8>)
 800356e:	2132      	movs	r1, #50	@ 0x32
 8003570:	200a      	movs	r0, #10
 8003572:	f002 ff90 	bl	8006496 <LCD_Font>
		lock();
 8003576:	f7fe fb71 	bl	8001c5c <lock>
		return;
 800357a:	bf00      	nop
	}
	}
}
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd90      	pop	{r4, r7, pc}
 8003582:	bf00      	nop
 8003584:	0800eaec 	.word	0x0800eaec
 8003588:	0800eaf4 	.word	0x0800eaf4
 800358c:	0800fd34 	.word	0x0800fd34
 8003590:	20000698 	.word	0x20000698
 8003594:	2000069a 	.word	0x2000069a

08003598 <FingerPrint_Manager>:

void FingerPrint_Manager() {
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b0a0      	sub	sp, #128	@ 0x80
 800359c:	af02      	add	r7, sp, #8

	fillScreen(ILI9488_WHITE);
 800359e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80035a2:	f002 f987 	bl	80058b4 <fillScreen>

	uint16_t touchX = 0, touchY = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	 //the keys:

	fillRect(125, 30, 250, 75, ILI9488_RED);
 80035b2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	234b      	movs	r3, #75	@ 0x4b
 80035ba:	22fa      	movs	r2, #250	@ 0xfa
 80035bc:	211e      	movs	r1, #30
 80035be:	207d      	movs	r0, #125	@ 0x7d
 80035c0:	f002 f992 	bl	80058e8 <fillRect>
	char addFing[] = "Add Fingerprint";
 80035c4:	4ba4      	ldr	r3, [pc, #656]	@ (8003858 <FingerPrint_Manager+0x2c0>)
 80035c6:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 80035ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	LCD_Font(165, 70, addFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 80035d0:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80035d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	2301      	movs	r3, #1
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	4b9f      	ldr	r3, [pc, #636]	@ (800385c <FingerPrint_Manager+0x2c4>)
 80035e0:	2146      	movs	r1, #70	@ 0x46
 80035e2:	20a5      	movs	r0, #165	@ 0xa5
 80035e4:	f002 ff57 	bl	8006496 <LCD_Font>

	fillRect(125, 130, 250, 75, ILI9488_RED);
 80035e8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	234b      	movs	r3, #75	@ 0x4b
 80035f0:	22fa      	movs	r2, #250	@ 0xfa
 80035f2:	2182      	movs	r1, #130	@ 0x82
 80035f4:	207d      	movs	r0, #125	@ 0x7d
 80035f6:	f002 f977 	bl	80058e8 <fillRect>
	char scanFing[] = "Scan Fingerprint";
 80035fa:	4b99      	ldr	r3, [pc, #612]	@ (8003860 <FingerPrint_Manager+0x2c8>)
 80035fc:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003600:	461d      	mov	r5, r3
 8003602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003606:	682b      	ldr	r3, [r5, #0]
 8003608:	7023      	strb	r3, [r4, #0]


	LCD_Font(165, 170, scanFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800360a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800360e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	2301      	movs	r3, #1
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4b90      	ldr	r3, [pc, #576]	@ (800385c <FingerPrint_Manager+0x2c4>)
 800361a:	21aa      	movs	r1, #170	@ 0xaa
 800361c:	20a5      	movs	r0, #165	@ 0xa5
 800361e:	f002 ff3a 	bl	8006496 <LCD_Font>


	fillRect(125, 230, 250, 75, ILI9488_RED);
 8003622:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	234b      	movs	r3, #75	@ 0x4b
 800362a:	22fa      	movs	r2, #250	@ 0xfa
 800362c:	21e6      	movs	r1, #230	@ 0xe6
 800362e:	207d      	movs	r0, #125	@ 0x7d
 8003630:	f002 f95a 	bl	80058e8 <fillRect>
	char delFing[] = "Delete Fingerprint";
 8003634:	4b8b      	ldr	r3, [pc, #556]	@ (8003864 <FingerPrint_Manager+0x2cc>)
 8003636:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800363a:	461d      	mov	r5, r3
 800363c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800363e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003640:	682b      	ldr	r3, [r5, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	8022      	strh	r2, [r4, #0]
 8003646:	3402      	adds	r4, #2
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	7023      	strb	r3, [r4, #0]


	LCD_Font(165, 270, delFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800364c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	2301      	movs	r3, #1
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	4b80      	ldr	r3, [pc, #512]	@ (800385c <FingerPrint_Manager+0x2c4>)
 800365c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8003660:	20a5      	movs	r0, #165	@ 0xa5
 8003662:	f002 ff18 	bl	8006496 <LCD_Font>
		//char buf2[20];
		//char buf3[20];

			//ILI9488_printTextTest(buf1, 250 , 25, ILI9488_BLACK, ILI9488_WHITE, 2);
		   //ILI9488_printText(buf3, 150, 25, ILI9488_WHITE, ILI9488_WHITE, 1);
		LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003666:	f107 0210 	add.w	r2, r7, #16
 800366a:	2300      	movs	r3, #0
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2301      	movs	r3, #1
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	4b7a      	ldr	r3, [pc, #488]	@ (800385c <FingerPrint_Manager+0x2c4>)
 8003674:	2119      	movs	r1, #25
 8003676:	2019      	movs	r0, #25
 8003678:	f002 ff0d 	bl	8006496 <LCD_Font>
		touchX = getX();
 800367c:	f004 f9b8 	bl	80079f0 <getX>
 8003680:	4603      	mov	r3, r0
 8003682:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		touchY = getY();
 8003686:	f004 f9bd 	bl	8007a04 <getY>
 800368a:	4603      	mov	r3, r0
 800368c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		sprintf(buf, "x=%3d y=%3d", touchX, touchY);
 8003690:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003694:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003698:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800369c:	4972      	ldr	r1, [pc, #456]	@ (8003868 <FingerPrint_Manager+0x2d0>)
 800369e:	f009 fba3 	bl	800cde8 <siprintf>
		sprintf(buf1, "x=%3d y=%3d", touchX, touchY);
 80036a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80036a6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80036aa:	f107 0010 	add.w	r0, r7, #16
 80036ae:	496e      	ldr	r1, [pc, #440]	@ (8003868 <FingerPrint_Manager+0x2d0>)
 80036b0:	f009 fb9a 	bl	800cde8 <siprintf>
		//sprintf(buf2,"count=%3d entered=%3d",count,entered[count]);
		//sprintf(buf3,"count=%3d entered=%3d",count,entered[count]);

		//ILI9488_printTextTest(buf1, 250, 25, ILI9488_BLACK,  ILI9488_WHITE, 2);
		//ILI9488_printText(buf3, 150, 25, ILI9488_BLACK, ILI9488_BLACK, 1);
		LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80036b4:	f107 0210 	add.w	r2, r7, #16
 80036b8:	2300      	movs	r3, #0
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	2301      	movs	r3, #1
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4b66      	ldr	r3, [pc, #408]	@ (800385c <FingerPrint_Manager+0x2c4>)
 80036c2:	2119      	movs	r1, #25
 80036c4:	2019      	movs	r0, #25
 80036c6:	f002 fee6 	bl	8006496 <LCD_Font>
		  390, 67
		  390, 165
		 */


		if (touchX >= 79 && touchX < 390 && touchY >= 55 && touchY < 165) {
 80036ca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80036ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80036d0:	d93b      	bls.n	800374a <FingerPrint_Manager+0x1b2>
 80036d2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80036d6:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 80036da:	d236      	bcs.n	800374a <FingerPrint_Manager+0x1b2>
 80036dc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80036e0:	2b36      	cmp	r3, #54	@ 0x36
 80036e2:	d932      	bls.n	800374a <FingerPrint_Manager+0x1b2>
 80036e4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80036e8:	2ba4      	cmp	r3, #164	@ 0xa4
 80036ea:	d82e      	bhi.n	800374a <FingerPrint_Manager+0x1b2>
			fillRect(125, 30, 250, 75, ILI9488_GREEN);
 80036ec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	234b      	movs	r3, #75	@ 0x4b
 80036f4:	22fa      	movs	r2, #250	@ 0xfa
 80036f6:	211e      	movs	r1, #30
 80036f8:	207d      	movs	r0, #125	@ 0x7d
 80036fa:	f002 f8f5 	bl	80058e8 <fillRect>
			HAL_Delay(300);
 80036fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003702:	f004 fa27 	bl	8007b54 <HAL_Delay>
			fillRect(125, 30, 250, 75, ILI9488_RED);
 8003706:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	234b      	movs	r3, #75	@ 0x4b
 800370e:	22fa      	movs	r2, #250	@ 0xfa
 8003710:	211e      	movs	r1, #30
 8003712:	207d      	movs	r0, #125	@ 0x7d
 8003714:	f002 f8e8 	bl	80058e8 <fillRect>
			LCD_Font(165, 70, addFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8003718:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800371c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	2301      	movs	r3, #1
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	4b4d      	ldr	r3, [pc, #308]	@ (800385c <FingerPrint_Manager+0x2c4>)
 8003728:	2146      	movs	r1, #70	@ 0x46
 800372a:	20a5      	movs	r0, #165	@ 0xa5
 800372c:	f002 feb3 	bl	8006496 <LCD_Font>
			uint8_t rx_buffer[1], temp;
			temp = fingerprintAddPrint();
 8003730:	f001 fdfa 	bl	8005328 <fingerprintAddPrint>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
				//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
				if (temp == 1){
 800373a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800373e:	2b01      	cmp	r3, #1
 8003740:	f040 8086 	bne.w	8003850 <FingerPrint_Manager+0x2b8>
					newFingerprintScreen();
 8003744:	f000 f892 	bl	800386c <newFingerprintScreen>
 8003748:	e082      	b.n	8003850 <FingerPrint_Manager+0x2b8>
		  79, 169
		  79, 233
		  377, 172
		  377, 207
		 */
		if (touchX >= 79 && touchX < 377 && touchY >= 169 && touchY < 233) {
 800374a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800374e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003750:	d93a      	bls.n	80037c8 <FingerPrint_Manager+0x230>
 8003752:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8003756:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 800375a:	d835      	bhi.n	80037c8 <FingerPrint_Manager+0x230>
 800375c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003760:	2ba8      	cmp	r3, #168	@ 0xa8
 8003762:	d931      	bls.n	80037c8 <FingerPrint_Manager+0x230>
 8003764:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003768:	2be8      	cmp	r3, #232	@ 0xe8
 800376a:	d82d      	bhi.n	80037c8 <FingerPrint_Manager+0x230>
			fillRect(125, 130, 250, 75, ILI9488_GREEN);
 800376c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	234b      	movs	r3, #75	@ 0x4b
 8003774:	22fa      	movs	r2, #250	@ 0xfa
 8003776:	2182      	movs	r1, #130	@ 0x82
 8003778:	207d      	movs	r0, #125	@ 0x7d
 800377a:	f002 f8b5 	bl	80058e8 <fillRect>
			HAL_Delay(300);
 800377e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003782:	f004 f9e7 	bl	8007b54 <HAL_Delay>
			fillRect(125, 130, 250, 75, ILI9488_RED);
 8003786:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	234b      	movs	r3, #75	@ 0x4b
 800378e:	22fa      	movs	r2, #250	@ 0xfa
 8003790:	2182      	movs	r1, #130	@ 0x82
 8003792:	207d      	movs	r0, #125	@ 0x7d
 8003794:	f002 f8a8 	bl	80058e8 <fillRect>
			LCD_Font(165, 170, scanFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8003798:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800379c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	2301      	movs	r3, #1
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	4b2d      	ldr	r3, [pc, #180]	@ (800385c <FingerPrint_Manager+0x2c4>)
 80037a8:	21aa      	movs	r1, #170	@ 0xaa
 80037aa:	20a5      	movs	r0, #165	@ 0xa5
 80037ac:	f002 fe73 	bl	8006496 <LCD_Font>
			uint8_t rx_buffer[1], temp;
			temp = fingerprintScanPrint();
 80037b0:	f001 fdd6 	bl	8005360 <fingerprintScanPrint>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
				//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
				if (temp == 9){
 80037ba:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80037be:	2b09      	cmp	r3, #9
 80037c0:	d146      	bne.n	8003850 <FingerPrint_Manager+0x2b8>
					FingerprintScan();
 80037c2:	f000 f927 	bl	8003a14 <FingerprintScan>
 80037c6:	e043      	b.n	8003850 <FingerPrint_Manager+0x2b8>
		/*Delete Finger Print:
		  79, 248
		  377, 254
		  97, 305
		  372, 312*/
		if (touchX >= 79 && touchX < 377 && touchY >= 248 && touchY < 312) {
 80037c8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80037cc:	2b4e      	cmp	r3, #78	@ 0x4e
 80037ce:	f67f af4a 	bls.w	8003666 <FingerPrint_Manager+0xce>
 80037d2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80037d6:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 80037da:	f63f af44 	bhi.w	8003666 <FingerPrint_Manager+0xce>
 80037de:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80037e2:	2bf7      	cmp	r3, #247	@ 0xf7
 80037e4:	f67f af3f 	bls.w	8003666 <FingerPrint_Manager+0xce>
 80037e8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80037ec:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80037f0:	f4bf af39 	bcs.w	8003666 <FingerPrint_Manager+0xce>
			fillRect(125, 230, 250, 75, ILI9488_GREEN);
 80037f4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	234b      	movs	r3, #75	@ 0x4b
 80037fc:	22fa      	movs	r2, #250	@ 0xfa
 80037fe:	21e6      	movs	r1, #230	@ 0xe6
 8003800:	207d      	movs	r0, #125	@ 0x7d
 8003802:	f002 f871 	bl	80058e8 <fillRect>
			HAL_Delay(300);
 8003806:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800380a:	f004 f9a3 	bl	8007b54 <HAL_Delay>
			fillRect(125, 230, 250, 75, ILI9488_RED);
 800380e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	234b      	movs	r3, #75	@ 0x4b
 8003816:	22fa      	movs	r2, #250	@ 0xfa
 8003818:	21e6      	movs	r1, #230	@ 0xe6
 800381a:	207d      	movs	r0, #125	@ 0x7d
 800381c:	f002 f864 	bl	80058e8 <fillRect>
			LCD_Font(165, 270, delFing, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8003820:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003824:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	2301      	movs	r3, #1
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <FingerPrint_Manager+0x2c4>)
 8003830:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8003834:	20a5      	movs	r0, #165	@ 0xa5
 8003836:	f002 fe2e 	bl	8006496 <LCD_Font>
			uint8_t rx_buffer[1], temp;
			temp = fingerprintRemovePrint();
 800383a:	f001 fdad 	bl	8005398 <fingerprintRemovePrint>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
				//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
				if (temp == 14){
 8003844:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8003848:	2b0e      	cmp	r3, #14
 800384a:	d101      	bne.n	8003850 <FingerPrint_Manager+0x2b8>
					FingerprintDelete();
 800384c:	f000 f978 	bl	8003b40 <FingerprintDelete>

		}


}
}
 8003850:	3778      	adds	r7, #120	@ 0x78
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}
 8003856:	bf00      	nop
 8003858:	0800eb10 	.word	0x0800eb10
 800385c:	0800fd34 	.word	0x0800fd34
 8003860:	0800eb20 	.word	0x0800eb20
 8003864:	0800eb34 	.word	0x0800eb34
 8003868:	0800eb04 	.word	0x0800eb04

0800386c <newFingerprintScreen>:


void newFingerprintScreen(){
 800386c:	b5b0      	push	{r4, r5, r7, lr}
 800386e:	b0a0      	sub	sp, #128	@ 0x80
 8003870:	af02      	add	r7, sp, #8
	fillScreen(ILI9488_WHITE);
 8003872:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003876:	f002 f81d 	bl	80058b4 <fillScreen>
	char place [] = "Place Finger on Scanner";
 800387a:	4b5f      	ldr	r3, [pc, #380]	@ (80039f8 <newFingerprintScreen+0x18c>)
 800387c:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8003880:	461d      	mov	r5, r3
 8003882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003886:	e895 0003 	ldmia.w	r5, {r0, r1}
 800388a:	e884 0003 	stmia.w	r4, {r0, r1}
	LCD_Font(100, 100, place, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800388e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8003892:	2300      	movs	r3, #0
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	2301      	movs	r3, #1
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	4b58      	ldr	r3, [pc, #352]	@ (80039fc <newFingerprintScreen+0x190>)
 800389c:	2164      	movs	r1, #100	@ 0x64
 800389e:	2064      	movs	r0, #100	@ 0x64
 80038a0:	f002 fdf9 	bl	8006496 <LCD_Font>

	uint8_t rx_buffer[1];

	//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
	uint8_t temp = fingerprint_UART_read();
 80038a4:	f001 fd94 	bl	80053d0 <fingerprint_UART_read>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	while(1){
		temp = fingerprint_UART_read();
 80038ae:	f001 fd8f 	bl	80053d0 <fingerprint_UART_read>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (temp == 4){// Succeed for Case 1: Registering fingerprint
 80038b8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d13f      	bne.n	8003940 <newFingerprintScreen+0xd4>
		//Works
		fillScreen(ILI9488_WHITE);
 80038c0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80038c4:	f001 fff6 	bl	80058b4 <fillScreen>
		char samp_suc [] = "Sampling Succeeds";
 80038c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a00 <newFingerprintScreen+0x194>)
 80038ca:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80038ce:	461d      	mov	r5, r3
 80038d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	8023      	strh	r3, [r4, #0]
		LCD_Font(100, 100, samp_suc, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80038d8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80038dc:	2300      	movs	r3, #0
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	2301      	movs	r3, #1
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	4b45      	ldr	r3, [pc, #276]	@ (80039fc <newFingerprintScreen+0x190>)
 80038e6:	2164      	movs	r1, #100	@ 0x64
 80038e8:	2064      	movs	r0, #100	@ 0x64
 80038ea:	f002 fdd4 	bl	8006496 <LCD_Font>
		//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
		HAL_Delay(1000);
 80038ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038f2:	f004 f92f 	bl	8007b54 <HAL_Delay>
		if (fingerprint_UART_read() == 6){
 80038f6:	f001 fd6b 	bl	80053d0 <fingerprint_UART_read>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d1d6      	bne.n	80038ae <newFingerprintScreen+0x42>
			fillScreen(ILI9488_WHITE);
 8003900:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003904:	f001 ffd6 	bl	80058b4 <fillScreen>
			char release [] = "Release Finger";
 8003908:	4b3e      	ldr	r3, [pc, #248]	@ (8003a04 <newFingerprintScreen+0x198>)
 800390a:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800390e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003910:	c407      	stmia	r4!, {r0, r1, r2}
 8003912:	8023      	strh	r3, [r4, #0]
 8003914:	3402      	adds	r4, #2
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	7023      	strb	r3, [r4, #0]
			LCD_Font(100, 100, release, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800391a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800391e:	2300      	movs	r3, #0
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	2301      	movs	r3, #1
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <newFingerprintScreen+0x190>)
 8003928:	2164      	movs	r1, #100	@ 0x64
 800392a:	2064      	movs	r0, #100	@ 0x64
 800392c:	f002 fdb3 	bl	8006496 <LCD_Font>
			//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
			if (fingerprint_UART_read() == 3){newFingerprintScreen();}
 8003930:	f001 fd4e 	bl	80053d0 <fingerprint_UART_read>
 8003934:	4603      	mov	r3, r0
 8003936:	2b03      	cmp	r3, #3
 8003938:	d15a      	bne.n	80039f0 <newFingerprintScreen+0x184>
 800393a:	f7ff ff97 	bl	800386c <newFingerprintScreen>
 800393e:	e057      	b.n	80039f0 <newFingerprintScreen+0x184>
			return;
		}

	}
	else if (temp == 5){ //Fail for case 1: Registering fingerprint
 8003940:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003944:	2b05      	cmp	r3, #5
 8003946:	d117      	bne.n	8003978 <newFingerprintScreen+0x10c>
		//Fails
		fillScreen(ILI9488_WHITE);
 8003948:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800394c:	f001 ffb2 	bl	80058b4 <fillScreen>
		char fail [] = "Sampling Failed";
 8003950:	4b2d      	ldr	r3, [pc, #180]	@ (8003a08 <newFingerprintScreen+0x19c>)
 8003952:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LCD_Font(100, 100, fail, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800395c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003960:	2300      	movs	r3, #0
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	2301      	movs	r3, #1
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <newFingerprintScreen+0x190>)
 800396a:	2164      	movs	r1, #100	@ 0x64
 800396c:	2064      	movs	r0, #100	@ 0x64
 800396e:	f002 fd92 	bl	8006496 <LCD_Font>
		FingerPrint_Manager();
 8003972:	f7ff fe11 	bl	8003598 <FingerPrint_Manager>
 8003976:	e03b      	b.n	80039f0 <newFingerprintScreen+0x184>
		return;
	}
	else if (temp == 7){ // Success for case 1: Successful Saving
 8003978:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800397c:	2b07      	cmp	r3, #7
 800397e:	d11b      	bne.n	80039b8 <newFingerprintScreen+0x14c>
		//Saving succeeded
		fillScreen(ILI9488_WHITE);
 8003980:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003984:	f001 ff96 	bl	80058b4 <fillScreen>
		char save_suc [] = "Saving Succeeded";
 8003988:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <newFingerprintScreen+0x1a0>)
 800398a:	f107 0410 	add.w	r4, r7, #16
 800398e:	461d      	mov	r5, r3
 8003990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	7023      	strb	r3, [r4, #0]
		LCD_Font(100, 100, save_suc, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003998:	f107 0210 	add.w	r2, r7, #16
 800399c:	2300      	movs	r3, #0
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	2301      	movs	r3, #1
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <newFingerprintScreen+0x190>)
 80039a6:	2164      	movs	r1, #100	@ 0x64
 80039a8:	2064      	movs	r0, #100	@ 0x64
 80039aa:	f002 fd74 	bl	8006496 <LCD_Font>
		HAL_Delay(2000);
 80039ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039b2:	f004 f8cf 	bl	8007b54 <HAL_Delay>
 80039b6:	e01b      	b.n	80039f0 <newFingerprintScreen+0x184>
		return;
	}
	else if (temp == 8){ // Fail for case 1: Failed Saving
 80039b8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80039bc:	2b08      	cmp	r3, #8
 80039be:	f47f af76 	bne.w	80038ae <newFingerprintScreen+0x42>
		//Saving failed
		fillScreen(ILI9488_WHITE);
 80039c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80039c6:	f001 ff75 	bl	80058b4 <fillScreen>
		char save_fail [] = "Saving Failed";
 80039ca:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <newFingerprintScreen+0x1a4>)
 80039cc:	463c      	mov	r4, r7
 80039ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039d0:	c407      	stmia	r4!, {r0, r1, r2}
 80039d2:	8023      	strh	r3, [r4, #0]
		LCD_Font(100, 100, save_fail, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80039d4:	463a      	mov	r2, r7
 80039d6:	2300      	movs	r3, #0
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	2301      	movs	r3, #1
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <newFingerprintScreen+0x190>)
 80039e0:	2164      	movs	r1, #100	@ 0x64
 80039e2:	2064      	movs	r0, #100	@ 0x64
 80039e4:	f002 fd57 	bl	8006496 <LCD_Font>
		HAL_Delay(2000);
 80039e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039ec:	f004 f8b2 	bl	8007b54 <HAL_Delay>
		return;
	}
	}
	//return;
}
 80039f0:	3778      	adds	r7, #120	@ 0x78
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bdb0      	pop	{r4, r5, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	0800eb48 	.word	0x0800eb48
 80039fc:	0800fd34 	.word	0x0800fd34
 8003a00:	0800eb60 	.word	0x0800eb60
 8003a04:	0800eb74 	.word	0x0800eb74
 8003a08:	0800eb84 	.word	0x0800eb84
 8003a0c:	0800eb94 	.word	0x0800eb94
 8003a10:	0800eba8 	.word	0x0800eba8

08003a14 <FingerprintScan>:

uint8_t FingerprintScan(){
 8003a14:	b5b0      	push	{r4, r5, r7, lr}
 8003a16:	b09a      	sub	sp, #104	@ 0x68
 8003a18:	af02      	add	r7, sp, #8

	fillScreen(ILI9488_WHITE);
 8003a1a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003a1e:	f001 ff49 	bl	80058b4 <fillScreen>
	char place [] = "Place Finger on Scanner";
 8003a22:	4b42      	ldr	r3, [pc, #264]	@ (8003b2c <FingerprintScan+0x118>)
 8003a24:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8003a28:	461d      	mov	r5, r3
 8003a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a32:	e884 0003 	stmia.w	r4, {r0, r1}
	LCD_Font(100, 100, place, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003a36:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	2301      	movs	r3, #1
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4b3b      	ldr	r3, [pc, #236]	@ (8003b30 <FingerprintScan+0x11c>)
 8003a44:	2164      	movs	r1, #100	@ 0x64
 8003a46:	2064      	movs	r0, #100	@ 0x64
 8003a48:	f002 fd25 	bl	8006496 <LCD_Font>
	uint8_t rx_buffer[1], temp;

	while(1){
		temp = fingerprint_UART_read();
 8003a4c:	f001 fcc0 	bl	80053d0 <fingerprint_UART_read>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
	if (temp == 10){ // Succeeds in capture: Send to release finger
 8003a56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a5a:	2b0a      	cmp	r3, #10
 8003a5c:	d1f6      	bne.n	8003a4c <FingerprintScan+0x38>
		fillScreen(ILI9488_WHITE);
 8003a5e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003a62:	f001 ff27 	bl	80058b4 <fillScreen>
		char release [] = "Release Finger";
 8003a66:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <FingerprintScan+0x120>)
 8003a68:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8003a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a6e:	c407      	stmia	r4!, {r0, r1, r2}
 8003a70:	8023      	strh	r3, [r4, #0]
 8003a72:	3402      	adds	r4, #2
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	7023      	strb	r3, [r4, #0]
		LCD_Font(100, 100, release, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003a78:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	2301      	movs	r3, #1
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	4b2a      	ldr	r3, [pc, #168]	@ (8003b30 <FingerprintScan+0x11c>)
 8003a86:	2164      	movs	r1, #100	@ 0x64
 8003a88:	2064      	movs	r0, #100	@ 0x64
 8003a8a:	f002 fd04 	bl	8006496 <LCD_Font>
		//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
		HAL_Delay(1000);
 8003a8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a92:	f004 f85f 	bl	8007b54 <HAL_Delay>
		uint8_t temp = fingerprint_UART_read();
 8003a96:	f001 fc9b 	bl	80053d0 <fingerprint_UART_read>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
		if (temp == 11){// Matching Scan
 8003aa0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003aa4:	2b0b      	cmp	r3, #11
 8003aa6:	d11f      	bne.n	8003ae8 <FingerprintScan+0xd4>
			fillScreen(ILI9488_WHITE);
 8003aa8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003aac:	f001 ff02 	bl	80058b4 <fillScreen>
			char scan_suc [] = "Scan has been matched";
 8003ab0:	4b21      	ldr	r3, [pc, #132]	@ (8003b38 <FingerprintScan+0x124>)
 8003ab2:	f107 0418 	add.w	r4, r7, #24
 8003ab6:	461d      	mov	r5, r3
 8003ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003abc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ac0:	6020      	str	r0, [r4, #0]
 8003ac2:	3404      	adds	r4, #4
 8003ac4:	8021      	strh	r1, [r4, #0]
			LCD_Font(100, 100, scan_suc, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003ac6:	f107 0218 	add.w	r2, r7, #24
 8003aca:	2300      	movs	r3, #0
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	2301      	movs	r3, #1
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4b17      	ldr	r3, [pc, #92]	@ (8003b30 <FingerprintScan+0x11c>)
 8003ad4:	2164      	movs	r1, #100	@ 0x64
 8003ad6:	2064      	movs	r0, #100	@ 0x64
 8003ad8:	f002 fcdd 	bl	8006496 <LCD_Font>
			HAL_Delay(2000);
 8003adc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003ae0:	f004 f838 	bl	8007b54 <HAL_Delay>
			return 1;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e01d      	b.n	8003b24 <FingerprintScan+0x110>
		}
		else if (temp == 12){//Matching failed
 8003ae8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d1ad      	bne.n	8003a4c <FingerprintScan+0x38>
			fillScreen(ILI9488_WHITE);
 8003af0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003af4:	f001 fede 	bl	80058b4 <fillScreen>
			char scan_fail [] = "Scan has no match";
 8003af8:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <FingerprintScan+0x128>)
 8003afa:	1d3c      	adds	r4, r7, #4
 8003afc:	461d      	mov	r5, r3
 8003afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	8023      	strh	r3, [r4, #0]
			LCD_Font(100, 100, scan_fail, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003b06:	1d3a      	adds	r2, r7, #4
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <FingerprintScan+0x11c>)
 8003b12:	2164      	movs	r1, #100	@ 0x64
 8003b14:	2064      	movs	r0, #100	@ 0x64
 8003b16:	f002 fcbe 	bl	8006496 <LCD_Font>
			HAL_Delay(2000);
 8003b1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003b1e:	f004 f819 	bl	8007b54 <HAL_Delay>
			return 0;
 8003b22:	2300      	movs	r3, #0
		}
	}
	}

}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3760      	adds	r7, #96	@ 0x60
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b2c:	0800eb48 	.word	0x0800eb48
 8003b30:	0800fd34 	.word	0x0800fd34
 8003b34:	0800eb74 	.word	0x0800eb74
 8003b38:	0800ebb8 	.word	0x0800ebb8
 8003b3c:	0800ebd0 	.word	0x0800ebd0

08003b40 <FingerprintDelete>:

void FingerprintDelete(){
 8003b40:	b5b0      	push	{r4, r5, r7, lr}
 8003b42:	b0a0      	sub	sp, #128	@ 0x80
 8003b44:	af02      	add	r7, sp, #8

		fillScreen(ILI9488_WHITE);
 8003b46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003b4a:	f001 feb3 	bl	80058b4 <fillScreen>
		char place [] = "Place Finger on Scanner";
 8003b4e:	4b51      	ldr	r3, [pc, #324]	@ (8003c94 <FingerprintDelete+0x154>)
 8003b50:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8003b54:	461d      	mov	r5, r3
 8003b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003b5e:	e884 0003 	stmia.w	r4, {r0, r1}
		LCD_Font(100, 100, place, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003b62:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8003b66:	2300      	movs	r3, #0
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c98 <FingerprintDelete+0x158>)
 8003b70:	2164      	movs	r1, #100	@ 0x64
 8003b72:	2064      	movs	r0, #100	@ 0x64
 8003b74:	f002 fc8f 	bl	8006496 <LCD_Font>
		uint8_t rx_buffer[1], temp;
		while(1){
		temp = fingerprint_UART_read();
 8003b78:	f001 fc2a 	bl	80053d0 <fingerprint_UART_read>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
		if (temp == 15){ // Succeeds in capture: Send to release finger
 8003b82:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003b86:	2b0f      	cmp	r3, #15
 8003b88:	d11b      	bne.n	8003bc2 <FingerprintDelete+0x82>
			fillScreen(ILI9488_WHITE);
 8003b8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003b8e:	f001 fe91 	bl	80058b4 <fillScreen>
			char del_succ [] = "Delete Successful";
 8003b92:	4b42      	ldr	r3, [pc, #264]	@ (8003c9c <FingerprintDelete+0x15c>)
 8003b94:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8003b98:	461d      	mov	r5, r3
 8003b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b9e:	682b      	ldr	r3, [r5, #0]
 8003ba0:	8023      	strh	r3, [r4, #0]
			LCD_Font(100, 100, del_succ, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003ba2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2301      	movs	r3, #1
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4b3a      	ldr	r3, [pc, #232]	@ (8003c98 <FingerprintDelete+0x158>)
 8003bb0:	2164      	movs	r1, #100	@ 0x64
 8003bb2:	2064      	movs	r0, #100	@ 0x64
 8003bb4:	f002 fc6f 	bl	8006496 <LCD_Font>
			//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
			HAL_Delay(1000);
 8003bb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003bbc:	f003 ffca 	bl	8007b54 <HAL_Delay>
 8003bc0:	e046      	b.n	8003c50 <FingerprintDelete+0x110>
		}else if (temp == 16){
 8003bc2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d11d      	bne.n	8003c06 <FingerprintDelete+0xc6>
			fillScreen(ILI9488_WHITE);
 8003bca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003bce:	f001 fe71 	bl	80058b4 <fillScreen>
			char unreg [] = "Fingerprint Unregistered";
 8003bd2:	4b33      	ldr	r3, [pc, #204]	@ (8003ca0 <FingerprintDelete+0x160>)
 8003bd4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003bd8:	461d      	mov	r5, r3
 8003bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003be2:	c403      	stmia	r4!, {r0, r1}
 8003be4:	7022      	strb	r2, [r4, #0]
			LCD_Font(100, 100, unreg, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003be6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003bea:	2300      	movs	r3, #0
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	4b29      	ldr	r3, [pc, #164]	@ (8003c98 <FingerprintDelete+0x158>)
 8003bf4:	2164      	movs	r1, #100	@ 0x64
 8003bf6:	2064      	movs	r0, #100	@ 0x64
 8003bf8:	f002 fc4d 	bl	8006496 <LCD_Font>
			//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
			HAL_Delay(1000);
 8003bfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c00:	f003 ffa8 	bl	8007b54 <HAL_Delay>
 8003c04:	e024      	b.n	8003c50 <FingerprintDelete+0x110>
		}else if (temp == 17){
 8003c06:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003c0a:	2b11      	cmp	r3, #17
 8003c0c:	d120      	bne.n	8003c50 <FingerprintDelete+0x110>
			fillScreen(ILI9488_WHITE);
 8003c0e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c12:	f001 fe4f 	bl	80058b4 <fillScreen>
			char cap_fail [] = "Capturing Failed";
 8003c16:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <FingerprintDelete+0x164>)
 8003c18:	f107 0414 	add.w	r4, r7, #20
 8003c1c:	461d      	mov	r5, r3
 8003c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c22:	682b      	ldr	r3, [r5, #0]
 8003c24:	7023      	strb	r3, [r4, #0]
			LCD_Font(100, 100, cap_fail, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003c26:	f107 0214 	add.w	r2, r7, #20
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	2301      	movs	r3, #1
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4b19      	ldr	r3, [pc, #100]	@ (8003c98 <FingerprintDelete+0x158>)
 8003c34:	2164      	movs	r1, #100	@ 0x64
 8003c36:	2064      	movs	r0, #100	@ 0x64
 8003c38:	f002 fc2d 	bl	8006496 <LCD_Font>
			//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
			temp = fingerprint_UART_read();
 8003c3c:	f001 fbc8 	bl	80053d0 <fingerprint_UART_read>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			HAL_Delay(1000);
 8003c46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c4a:	f003 ff83 	bl	8007b54 <HAL_Delay>
 8003c4e:	e01d      	b.n	8003c8c <FingerprintDelete+0x14c>
			return;
		}
		//HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
		//temp = fingerprint_UART_read();
		if(temp == 18){
 8003c50:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003c54:	2b12      	cmp	r3, #18
 8003c56:	d18f      	bne.n	8003b78 <FingerprintDelete+0x38>
			fillScreen(ILI9488_WHITE);
 8003c58:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c5c:	f001 fe2a 	bl	80058b4 <fillScreen>
			char release [] = "Release Finger";
 8003c60:	4b11      	ldr	r3, [pc, #68]	@ (8003ca8 <FingerprintDelete+0x168>)
 8003c62:	1d3c      	adds	r4, r7, #4
 8003c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c66:	c407      	stmia	r4!, {r0, r1, r2}
 8003c68:	8023      	strh	r3, [r4, #0]
 8003c6a:	3402      	adds	r4, #2
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	7023      	strb	r3, [r4, #0]
			LCD_Font(100, 100, release, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8003c70:	1d3a      	adds	r2, r7, #4
 8003c72:	2300      	movs	r3, #0
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	2301      	movs	r3, #1
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <FingerprintDelete+0x158>)
 8003c7c:	2164      	movs	r1, #100	@ 0x64
 8003c7e:	2064      	movs	r0, #100	@ 0x64
 8003c80:	f002 fc09 	bl	8006496 <LCD_Font>
			HAL_Delay(1000);
 8003c84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c88:	f003 ff64 	bl	8007b54 <HAL_Delay>
			return;
		}
		}
}
 8003c8c:	3778      	adds	r7, #120	@ 0x78
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bdb0      	pop	{r4, r5, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	0800eb48 	.word	0x0800eb48
 8003c98:	0800fd34 	.word	0x0800fd34
 8003c9c:	0800ebe4 	.word	0x0800ebe4
 8003ca0:	0800ebf8 	.word	0x0800ebf8
 8003ca4:	0800ec14 	.word	0x0800ec14
 8003ca8:	0800eb74 	.word	0x0800eb74

08003cac <New_Pill_Screen>:

void New_Pill_Screen(uint8_t dispNum) {
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b097      	sub	sp, #92	@ 0x5c
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]

	fillScreen(ILI9488_WHITE);
 8003cb6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003cba:	f001 fdfb 	bl	80058b4 <fillScreen>

	char red_skittle[] = "Red Skittle";
 8003cbe:	4aa0      	ldr	r2, [pc, #640]	@ (8003f40 <New_Pill_Screen+0x294>)
 8003cc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003cc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char yellow_skittle[] = "Yellow Skittle";
 8003cca:	4b9e      	ldr	r3, [pc, #632]	@ (8003f44 <New_Pill_Screen+0x298>)
 8003ccc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8003cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cd2:	c407      	stmia	r4!, {r0, r1, r2}
 8003cd4:	8023      	strh	r3, [r4, #0]
 8003cd6:	3402      	adds	r4, #2
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	7023      	strb	r3, [r4, #0]
	char green_skittle[] = "Green Skittle";
 8003cdc:	4b9a      	ldr	r3, [pc, #616]	@ (8003f48 <New_Pill_Screen+0x29c>)
 8003cde:	f107 0420 	add.w	r4, r7, #32
 8003ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ce4:	c407      	stmia	r4!, {r0, r1, r2}
 8003ce6:	8023      	strh	r3, [r4, #0]
	char hot_tamale[] = "Hot Tamale";
 8003ce8:	4a98      	ldr	r2, [pc, #608]	@ (8003f4c <New_Pill_Screen+0x2a0>)
 8003cea:	f107 0314 	add.w	r3, r7, #20
 8003cee:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cf0:	c303      	stmia	r3!, {r0, r1}
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	0c12      	lsrs	r2, r2, #16
 8003cf8:	701a      	strb	r2, [r3, #0]
	char home[] = "  Back";
 8003cfa:	4a95      	ldr	r2, [pc, #596]	@ (8003f50 <New_Pill_Screen+0x2a4>)
 8003cfc:	f107 030c 	add.w	r3, r7, #12
 8003d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d04:	6018      	str	r0, [r3, #0]
 8003d06:	3304      	adds	r3, #4
 8003d08:	8019      	strh	r1, [r3, #0]
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	0c0a      	lsrs	r2, r1, #16
 8003d0e:	701a      	strb	r2, [r3, #0]
	char option;


	fillRect(70, 40, 150, 75, ILI9488_RED);
 8003d10:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	234b      	movs	r3, #75	@ 0x4b
 8003d18:	2296      	movs	r2, #150	@ 0x96
 8003d1a:	2128      	movs	r1, #40	@ 0x28
 8003d1c:	2046      	movs	r0, #70	@ 0x46
 8003d1e:	f001 fde3 	bl	80058e8 <fillRect>
	LCD_Font(100, 80, red_skittle, _Open_Sans_Bold_16, 1, ILI9488_WHITE);
 8003d22:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003d26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	4b88      	ldr	r3, [pc, #544]	@ (8003f54 <New_Pill_Screen+0x2a8>)
 8003d32:	2150      	movs	r1, #80	@ 0x50
 8003d34:	2064      	movs	r0, #100	@ 0x64
 8003d36:	f002 fbae 	bl	8006496 <LCD_Font>
	fillRect(250, 40, 150, 75, ILI9488_RED);
 8003d3a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	234b      	movs	r3, #75	@ 0x4b
 8003d42:	2296      	movs	r2, #150	@ 0x96
 8003d44:	2128      	movs	r1, #40	@ 0x28
 8003d46:	20fa      	movs	r0, #250	@ 0xfa
 8003d48:	f001 fdce 	bl	80058e8 <fillRect>
	LCD_Font(260, 80, yellow_skittle, _Open_Sans_Bold_16, 1, ILI9488_WHITE);
 8003d4c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003d50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	2301      	movs	r3, #1
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f54 <New_Pill_Screen+0x2a8>)
 8003d5c:	2150      	movs	r1, #80	@ 0x50
 8003d5e:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8003d62:	f002 fb98 	bl	8006496 <LCD_Font>

	fillRect(160, 125, 150, 75, ILI9488_RED);
 8003d66:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	234b      	movs	r3, #75	@ 0x4b
 8003d6e:	2296      	movs	r2, #150	@ 0x96
 8003d70:	217d      	movs	r1, #125	@ 0x7d
 8003d72:	20a0      	movs	r0, #160	@ 0xa0
 8003d74:	f001 fdb8 	bl	80058e8 <fillRect>
	LCD_Font(190, 165, home, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 8003d78:	f107 020c 	add.w	r2, r7, #12
 8003d7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d80:	9301      	str	r3, [sp, #4]
 8003d82:	2301      	movs	r3, #1
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	4b74      	ldr	r3, [pc, #464]	@ (8003f58 <New_Pill_Screen+0x2ac>)
 8003d88:	21a5      	movs	r1, #165	@ 0xa5
 8003d8a:	20be      	movs	r0, #190	@ 0xbe
 8003d8c:	f002 fb83 	bl	8006496 <LCD_Font>


	fillRect(70, 210, 150, 75, ILI9488_RED);
 8003d90:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	234b      	movs	r3, #75	@ 0x4b
 8003d98:	2296      	movs	r2, #150	@ 0x96
 8003d9a:	21d2      	movs	r1, #210	@ 0xd2
 8003d9c:	2046      	movs	r0, #70	@ 0x46
 8003d9e:	f001 fda3 	bl	80058e8 <fillRect>
	LCD_Font(80, 250, green_skittle, _Open_Sans_Bold_16, 1, ILI9488_WHITE);
 8003da2:	f107 0220 	add.w	r2, r7, #32
 8003da6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	2301      	movs	r3, #1
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4b68      	ldr	r3, [pc, #416]	@ (8003f54 <New_Pill_Screen+0x2a8>)
 8003db2:	21fa      	movs	r1, #250	@ 0xfa
 8003db4:	2050      	movs	r0, #80	@ 0x50
 8003db6:	f002 fb6e 	bl	8006496 <LCD_Font>
	fillRect(250, 210, 150, 75, ILI9488_RED);
 8003dba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	234b      	movs	r3, #75	@ 0x4b
 8003dc2:	2296      	movs	r2, #150	@ 0x96
 8003dc4:	21d2      	movs	r1, #210	@ 0xd2
 8003dc6:	20fa      	movs	r0, #250	@ 0xfa
 8003dc8:	f001 fd8e 	bl	80058e8 <fillRect>
	LCD_Font(280, 250, hot_tamale, _Open_Sans_Bold_16, 1, ILI9488_WHITE);
 8003dcc:	f107 0214 	add.w	r2, r7, #20
 8003dd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4b5e      	ldr	r3, [pc, #376]	@ (8003f54 <New_Pill_Screen+0x2a8>)
 8003ddc:	21fa      	movs	r1, #250	@ 0xfa
 8003dde:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8003de2:	f002 fb58 	bl	8006496 <LCD_Font>


	while (1){

		touchX = getX();
 8003de6:	f003 fe03 	bl	80079f0 <getX>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b5b      	ldr	r3, [pc, #364]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003df0:	801a      	strh	r2, [r3, #0]
		touchY = getY();
 8003df2:	f003 fe07 	bl	8007a04 <getY>
 8003df6:	4603      	mov	r3, r0
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b59      	ldr	r3, [pc, #356]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003dfc:	801a      	strh	r2, [r3, #0]


	if (touchX >= 70 && touchX < 220 && touchY >= 40 && touchY < 115) {
 8003dfe:	4b57      	ldr	r3, [pc, #348]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	2b45      	cmp	r3, #69	@ 0x45
 8003e04:	d918      	bls.n	8003e38 <New_Pill_Screen+0x18c>
 8003e06:	4b55      	ldr	r3, [pc, #340]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	2bdb      	cmp	r3, #219	@ 0xdb
 8003e0c:	d814      	bhi.n	8003e38 <New_Pill_Screen+0x18c>
 8003e0e:	4b54      	ldr	r3, [pc, #336]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	2b27      	cmp	r3, #39	@ 0x27
 8003e14:	d910      	bls.n	8003e38 <New_Pill_Screen+0x18c>
 8003e16:	4b52      	ldr	r3, [pc, #328]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	2b72      	cmp	r3, #114	@ 0x72
 8003e1c:	d80c      	bhi.n	8003e38 <New_Pill_Screen+0x18c>
		fillRect(70, 40, 150, 75, ILI9488_GREEN);
 8003e1e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	234b      	movs	r3, #75	@ 0x4b
 8003e26:	2296      	movs	r2, #150	@ 0x96
 8003e28:	2128      	movs	r1, #40	@ 0x28
 8003e2a:	2046      	movs	r0, #70	@ 0x46
 8003e2c:	f001 fd5c 	bl	80058e8 <fillRect>
		option = 'r';
 8003e30:	2372      	movs	r3, #114	@ 0x72
 8003e32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		break;
 8003e36:	e078      	b.n	8003f2a <New_Pill_Screen+0x27e>
	}

	if (touchX >= 250 && touchX < 400 && touchY >= 40 && touchY < 115) {
 8003e38:	4b48      	ldr	r3, [pc, #288]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	2bf9      	cmp	r3, #249	@ 0xf9
 8003e3e:	d919      	bls.n	8003e74 <New_Pill_Screen+0x1c8>
 8003e40:	4b46      	ldr	r3, [pc, #280]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003e48:	d214      	bcs.n	8003e74 <New_Pill_Screen+0x1c8>
 8003e4a:	4b45      	ldr	r3, [pc, #276]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	2b27      	cmp	r3, #39	@ 0x27
 8003e50:	d910      	bls.n	8003e74 <New_Pill_Screen+0x1c8>
 8003e52:	4b43      	ldr	r3, [pc, #268]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	2b72      	cmp	r3, #114	@ 0x72
 8003e58:	d80c      	bhi.n	8003e74 <New_Pill_Screen+0x1c8>
		fillRect(250, 40, 150, 75, ILI9488_GREEN);
 8003e5a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	234b      	movs	r3, #75	@ 0x4b
 8003e62:	2296      	movs	r2, #150	@ 0x96
 8003e64:	2128      	movs	r1, #40	@ 0x28
 8003e66:	20fa      	movs	r0, #250	@ 0xfa
 8003e68:	f001 fd3e 	bl	80058e8 <fillRect>

		option = 'y';
 8003e6c:	2379      	movs	r3, #121	@ 0x79
 8003e6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		break;
 8003e72:	e05a      	b.n	8003f2a <New_Pill_Screen+0x27e>
	}

	// Home
	else if (touchX >= 160 && touchX < 310 && touchY >= 125 && touchY < 200) {
 8003e74:	4b39      	ldr	r3, [pc, #228]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	2b9f      	cmp	r3, #159	@ 0x9f
 8003e7a:	d916      	bls.n	8003eaa <New_Pill_Screen+0x1fe>
 8003e7c:	4b37      	ldr	r3, [pc, #220]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8003e84:	d211      	bcs.n	8003eaa <New_Pill_Screen+0x1fe>
 8003e86:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	2b7c      	cmp	r3, #124	@ 0x7c
 8003e8c:	d90d      	bls.n	8003eaa <New_Pill_Screen+0x1fe>
 8003e8e:	4b34      	ldr	r3, [pc, #208]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e94:	d809      	bhi.n	8003eaa <New_Pill_Screen+0x1fe>
		fillRect(160, 125, 150, 75, ILI9488_GREEN);
 8003e96:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	234b      	movs	r3, #75	@ 0x4b
 8003e9e:	2296      	movs	r2, #150	@ 0x96
 8003ea0:	217d      	movs	r1, #125	@ 0x7d
 8003ea2:	20a0      	movs	r0, #160	@ 0xa0
 8003ea4:	f001 fd20 	bl	80058e8 <fillRect>
 8003ea8:	e046      	b.n	8003f38 <New_Pill_Screen+0x28c>
		return;
	}


	if (touchX >= 70 && touchX < 220 && touchY >= 210 && touchY < 285) {
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	2b45      	cmp	r3, #69	@ 0x45
 8003eb0:	d919      	bls.n	8003ee6 <New_Pill_Screen+0x23a>
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	2bdb      	cmp	r3, #219	@ 0xdb
 8003eb8:	d815      	bhi.n	8003ee6 <New_Pill_Screen+0x23a>
 8003eba:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	2bd1      	cmp	r3, #209	@ 0xd1
 8003ec0:	d911      	bls.n	8003ee6 <New_Pill_Screen+0x23a>
 8003ec2:	4b27      	ldr	r3, [pc, #156]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8003eca:	d80c      	bhi.n	8003ee6 <New_Pill_Screen+0x23a>
		fillRect(70, 210, 150, 75, ILI9488_GREEN);
 8003ecc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	234b      	movs	r3, #75	@ 0x4b
 8003ed4:	2296      	movs	r2, #150	@ 0x96
 8003ed6:	21d2      	movs	r1, #210	@ 0xd2
 8003ed8:	2046      	movs	r0, #70	@ 0x46
 8003eda:	f001 fd05 	bl	80058e8 <fillRect>
		option = 'g';
 8003ede:	2367      	movs	r3, #103	@ 0x67
 8003ee0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		break;
 8003ee4:	e021      	b.n	8003f2a <New_Pill_Screen+0x27e>
	}

	if (touchX >= 250 && touchX < 400 && touchY >= 210 && touchY < 285) {
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	2bf9      	cmp	r3, #249	@ 0xf9
 8003eec:	f67f af7b 	bls.w	8003de6 <New_Pill_Screen+0x13a>
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f5c <New_Pill_Screen+0x2b0>)
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003ef8:	f4bf af75 	bcs.w	8003de6 <New_Pill_Screen+0x13a>
 8003efc:	4b18      	ldr	r3, [pc, #96]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	2bd1      	cmp	r3, #209	@ 0xd1
 8003f02:	f67f af70 	bls.w	8003de6 <New_Pill_Screen+0x13a>
 8003f06:	4b16      	ldr	r3, [pc, #88]	@ (8003f60 <New_Pill_Screen+0x2b4>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8003f0e:	f63f af6a 	bhi.w	8003de6 <New_Pill_Screen+0x13a>
		fillRect(250, 210, 150, 75, ILI9488_GREEN);
 8003f12:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	234b      	movs	r3, #75	@ 0x4b
 8003f1a:	2296      	movs	r2, #150	@ 0x96
 8003f1c:	21d2      	movs	r1, #210	@ 0xd2
 8003f1e:	20fa      	movs	r0, #250	@ 0xfa
 8003f20:	f001 fce2 	bl	80058e8 <fillRect>
		option = 'h';
 8003f24:	2368      	movs	r3, #104	@ 0x68
 8003f26:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		break;
	}
	}
	weekdaySelector(dispNum, option);
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f816 	bl	8003f64 <weekdaySelector>


}
 8003f38:	3754      	adds	r7, #84	@ 0x54
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	0800e880 	.word	0x0800e880
 8003f44:	0800e88c 	.word	0x0800e88c
 8003f48:	0800e89c 	.word	0x0800e89c
 8003f4c:	0800e8ac 	.word	0x0800e8ac
 8003f50:	0800ec28 	.word	0x0800ec28
 8003f54:	0800f3f0 	.word	0x0800f3f0
 8003f58:	0800fd34 	.word	0x0800fd34
 8003f5c:	20000698 	.word	0x20000698
 8003f60:	2000069a 	.word	0x2000069a

08003f64 <weekdaySelector>:

void weekdaySelector(char dispNum, char pillOption){
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b09c      	sub	sp, #112	@ 0x70
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	71fb      	strb	r3, [r7, #7]
 8003f70:	4613      	mov	r3, r2
 8003f72:	71bb      	strb	r3, [r7, #6]
	fillScreen(ILI9488_WHITE);
 8003f74:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003f78:	f001 fc9c 	bl	80058b4 <fillScreen>

	   uint16_t touchX = 0, touchY = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c


	   uint8_t Sunday = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	   uint8_t Monday = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	   uint8_t Tuesday = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	   uint8_t Wednesday = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	   uint8_t Thursday = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	   uint8_t Friday = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	   uint8_t Saturday = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61




	   char addSunday[] = "SUN";
 8003fb2:	4bb5      	ldr	r3, [pc, #724]	@ (8004288 <weekdaySelector+0x324>)
 8003fb4:	65bb      	str	r3, [r7, #88]	@ 0x58
	   char addMonday[] = "MON";
 8003fb6:	4bb5      	ldr	r3, [pc, #724]	@ (800428c <weekdaySelector+0x328>)
 8003fb8:	657b      	str	r3, [r7, #84]	@ 0x54
	   char addTuesday[] = "TUE";
 8003fba:	4bb5      	ldr	r3, [pc, #724]	@ (8004290 <weekdaySelector+0x32c>)
 8003fbc:	653b      	str	r3, [r7, #80]	@ 0x50
	   char addWednesday[] = "WED";
 8003fbe:	4bb5      	ldr	r3, [pc, #724]	@ (8004294 <weekdaySelector+0x330>)
 8003fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	   char addThursday[] = "THU";
 8003fc2:	4bb5      	ldr	r3, [pc, #724]	@ (8004298 <weekdaySelector+0x334>)
 8003fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
	   char addFriday[] = "FRI";
 8003fc6:	4bb5      	ldr	r3, [pc, #724]	@ (800429c <weekdaySelector+0x338>)
 8003fc8:	647b      	str	r3, [r7, #68]	@ 0x44
	   char addSaturday[] = "SAT";
 8003fca:	4bb5      	ldr	r3, [pc, #724]	@ (80042a0 <weekdaySelector+0x33c>)
 8003fcc:	643b      	str	r3, [r7, #64]	@ 0x40
	   char addNext[] = "Next";
 8003fce:	4ab5      	ldr	r2, [pc, #724]	@ (80042a4 <weekdaySelector+0x340>)
 8003fd0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd8:	6018      	str	r0, [r3, #0]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	7019      	strb	r1, [r3, #0]

	   //Sunday
	   fillRect(65, 30,75,75, ILI9488_RED);
 8003fde:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	234b      	movs	r3, #75	@ 0x4b
 8003fe6:	224b      	movs	r2, #75	@ 0x4b
 8003fe8:	211e      	movs	r1, #30
 8003fea:	2041      	movs	r0, #65	@ 0x41
 8003fec:	f001 fc7c 	bl	80058e8 <fillRect>


	   //Monday
	   fillRect(150, 30,75,75, ILI9488_RED);
 8003ff0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	234b      	movs	r3, #75	@ 0x4b
 8003ff8:	224b      	movs	r2, #75	@ 0x4b
 8003ffa:	211e      	movs	r1, #30
 8003ffc:	2096      	movs	r0, #150	@ 0x96
 8003ffe:	f001 fc73 	bl	80058e8 <fillRect>

	   //Tuesday
	   fillRect(235, 30,75,75, ILI9488_RED);
 8004002:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	234b      	movs	r3, #75	@ 0x4b
 800400a:	224b      	movs	r2, #75	@ 0x4b
 800400c:	211e      	movs	r1, #30
 800400e:	20eb      	movs	r0, #235	@ 0xeb
 8004010:	f001 fc6a 	bl	80058e8 <fillRect>

	   //Wednesday
	   fillRect(320, 30,75,75, ILI9488_RED);
 8004014:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	234b      	movs	r3, #75	@ 0x4b
 800401c:	224b      	movs	r2, #75	@ 0x4b
 800401e:	211e      	movs	r1, #30
 8004020:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8004024:	f001 fc60 	bl	80058e8 <fillRect>


	   //char addSunday[] = "S";

	   //Thursday
	   fillRect(105, 120,75,75, ILI9488_RED);
 8004028:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	234b      	movs	r3, #75	@ 0x4b
 8004030:	224b      	movs	r2, #75	@ 0x4b
 8004032:	2178      	movs	r1, #120	@ 0x78
 8004034:	2069      	movs	r0, #105	@ 0x69
 8004036:	f001 fc57 	bl	80058e8 <fillRect>


	   //Friday
	   fillRect(190, 120,75,75, ILI9488_RED);
 800403a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	234b      	movs	r3, #75	@ 0x4b
 8004042:	224b      	movs	r2, #75	@ 0x4b
 8004044:	2178      	movs	r1, #120	@ 0x78
 8004046:	20be      	movs	r0, #190	@ 0xbe
 8004048:	f001 fc4e 	bl	80058e8 <fillRect>


	   //Saturday
	   fillRect(275, 120,75,75, ILI9488_RED);
 800404c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	234b      	movs	r3, #75	@ 0x4b
 8004054:	224b      	movs	r2, #75	@ 0x4b
 8004056:	2178      	movs	r1, #120	@ 0x78
 8004058:	f240 1013 	movw	r0, #275	@ 0x113
 800405c:	f001 fc44 	bl	80058e8 <fillRect>


	   //Next button
	   fillRect(50, 250, 350, 50, ILI9488_RED);
 8004060:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2332      	movs	r3, #50	@ 0x32
 8004068:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800406c:	21fa      	movs	r1, #250	@ 0xfa
 800406e:	2032      	movs	r0, #50	@ 0x32
 8004070:	f001 fc3a 	bl	80058e8 <fillRect>


	   LCD_Font(85, 70, addSunday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004074:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8004078:	2300      	movs	r3, #0
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	2301      	movs	r3, #1
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	4b89      	ldr	r3, [pc, #548]	@ (80042a8 <weekdaySelector+0x344>)
 8004082:	2146      	movs	r1, #70	@ 0x46
 8004084:	2055      	movs	r0, #85	@ 0x55
 8004086:	f002 fa06 	bl	8006496 <LCD_Font>
	   LCD_Font(160, 70, addMonday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800408a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800408e:	2300      	movs	r3, #0
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	2301      	movs	r3, #1
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4b84      	ldr	r3, [pc, #528]	@ (80042a8 <weekdaySelector+0x344>)
 8004098:	2146      	movs	r1, #70	@ 0x46
 800409a:	20a0      	movs	r0, #160	@ 0xa0
 800409c:	f002 f9fb 	bl	8006496 <LCD_Font>
	   LCD_Font(255, 70, addTuesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80040a0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80040a4:	2300      	movs	r3, #0
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	2301      	movs	r3, #1
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	4b7e      	ldr	r3, [pc, #504]	@ (80042a8 <weekdaySelector+0x344>)
 80040ae:	2146      	movs	r1, #70	@ 0x46
 80040b0:	20ff      	movs	r0, #255	@ 0xff
 80040b2:	f002 f9f0 	bl	8006496 <LCD_Font>
	   LCD_Font(335, 70, addWednesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80040b6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80040ba:	2300      	movs	r3, #0
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	2301      	movs	r3, #1
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4b79      	ldr	r3, [pc, #484]	@ (80042a8 <weekdaySelector+0x344>)
 80040c4:	2146      	movs	r1, #70	@ 0x46
 80040c6:	f240 104f 	movw	r0, #335	@ 0x14f
 80040ca:	f002 f9e4 	bl	8006496 <LCD_Font>
	   LCD_Font(125, 160, addThursday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80040ce:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80040d2:	2300      	movs	r3, #0
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	2301      	movs	r3, #1
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	4b73      	ldr	r3, [pc, #460]	@ (80042a8 <weekdaySelector+0x344>)
 80040dc:	21a0      	movs	r1, #160	@ 0xa0
 80040de:	207d      	movs	r0, #125	@ 0x7d
 80040e0:	f002 f9d9 	bl	8006496 <LCD_Font>
	   LCD_Font(210, 160, addFriday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80040e4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80040e8:	2300      	movs	r3, #0
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	2301      	movs	r3, #1
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4b6d      	ldr	r3, [pc, #436]	@ (80042a8 <weekdaySelector+0x344>)
 80040f2:	21a0      	movs	r1, #160	@ 0xa0
 80040f4:	20d2      	movs	r0, #210	@ 0xd2
 80040f6:	f002 f9ce 	bl	8006496 <LCD_Font>
	   LCD_Font(295, 160, addSaturday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80040fa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80040fe:	2300      	movs	r3, #0
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	2301      	movs	r3, #1
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	4b68      	ldr	r3, [pc, #416]	@ (80042a8 <weekdaySelector+0x344>)
 8004108:	21a0      	movs	r1, #160	@ 0xa0
 800410a:	f240 1027 	movw	r0, #295	@ 0x127
 800410e:	f002 f9c2 	bl	8006496 <LCD_Font>

	   LCD_Font(200, 285, addNext, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004112:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004116:	2300      	movs	r3, #0
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	2301      	movs	r3, #1
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	4b62      	ldr	r3, [pc, #392]	@ (80042a8 <weekdaySelector+0x344>)
 8004120:	f240 111d 	movw	r1, #285	@ 0x11d
 8004124:	20c8      	movs	r0, #200	@ 0xc8
 8004126:	f002 f9b6 	bl	8006496 <LCD_Font>
	  {

		  char buf[20];
		  char buf1[20];

		  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800412a:	f107 0210 	add.w	r2, r7, #16
 800412e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	2301      	movs	r3, #1
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	4b5b      	ldr	r3, [pc, #364]	@ (80042a8 <weekdaySelector+0x344>)
 800413a:	2119      	movs	r1, #25
 800413c:	2019      	movs	r0, #25
 800413e:	f002 f9aa 	bl	8006496 <LCD_Font>
		  	  touchX = getX();
 8004142:	f003 fc55 	bl	80079f0 <getX>
 8004146:	4603      	mov	r3, r0
 8004148:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		  	  touchY = getY();
 800414c:	f003 fc5a 	bl	8007a04 <getY>
 8004150:	4603      	mov	r3, r0
 8004152:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		  	  sprintf(buf,"x=%3d y=%3d",touchX,touchY);
 8004156:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800415a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800415e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004162:	4952      	ldr	r1, [pc, #328]	@ (80042ac <weekdaySelector+0x348>)
 8004164:	f008 fe40 	bl	800cde8 <siprintf>
		  	  sprintf(buf1,"x=%3d y=%3d",touchX,touchY);
 8004168:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800416c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004170:	f107 0010 	add.w	r0, r7, #16
 8004174:	494d      	ldr	r1, [pc, #308]	@ (80042ac <weekdaySelector+0x348>)
 8004176:	f008 fe37 	bl	800cde8 <siprintf>

		  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800417a:	f107 0210 	add.w	r2, r7, #16
 800417e:	2300      	movs	r3, #0
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2301      	movs	r3, #1
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4b48      	ldr	r3, [pc, #288]	@ (80042a8 <weekdaySelector+0x344>)
 8004188:	2119      	movs	r1, #25
 800418a:	2019      	movs	r0, #25
 800418c:	f002 f983 	bl	8006496 <LCD_Font>



		  	  if(touchX >= 6 && touchX < 88 && touchY >= 55 && touchY < 161){
 8004190:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004194:	2b05      	cmp	r3, #5
 8004196:	d946      	bls.n	8004226 <weekdaySelector+0x2c2>
 8004198:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800419c:	2b57      	cmp	r3, #87	@ 0x57
 800419e:	d842      	bhi.n	8004226 <weekdaySelector+0x2c2>
 80041a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80041a4:	2b36      	cmp	r3, #54	@ 0x36
 80041a6:	d93e      	bls.n	8004226 <weekdaySelector+0x2c2>
 80041a8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80041ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80041ae:	d83a      	bhi.n	8004226 <weekdaySelector+0x2c2>
		  		  if(Sunday == 0){
 80041b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11b      	bne.n	80041f0 <weekdaySelector+0x28c>
		  			  fillRect(65, 30,75,75, ILI9488_GREEN);
 80041b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	234b      	movs	r3, #75	@ 0x4b
 80041c0:	224b      	movs	r2, #75	@ 0x4b
 80041c2:	211e      	movs	r1, #30
 80041c4:	2041      	movs	r0, #65	@ 0x41
 80041c6:	f001 fb8f 	bl	80058e8 <fillRect>
		  			  LCD_Font(85, 70, addSunday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80041ca:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80041ce:	2300      	movs	r3, #0
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	2301      	movs	r3, #1
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	4b34      	ldr	r3, [pc, #208]	@ (80042a8 <weekdaySelector+0x344>)
 80041d8:	2146      	movs	r1, #70	@ 0x46
 80041da:	2055      	movs	r0, #85	@ 0x55
 80041dc:	f002 f95b 	bl	8006496 <LCD_Font>
		  			  Sunday = 1;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		  			  HAL_Delay(300);
 80041e6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80041ea:	f003 fcb3 	bl	8007b54 <HAL_Delay>
 80041ee:	e01a      	b.n	8004226 <weekdaySelector+0x2c2>
		  		  }
		  		  else{
		  			  Sunday = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		  			  fillRect(65, 30,75,75, ILI9488_RED);
 80041f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	234b      	movs	r3, #75	@ 0x4b
 80041fe:	224b      	movs	r2, #75	@ 0x4b
 8004200:	211e      	movs	r1, #30
 8004202:	2041      	movs	r0, #65	@ 0x41
 8004204:	f001 fb70 	bl	80058e8 <fillRect>
		  			  LCD_Font(85, 70, addSunday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004208:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800420c:	2300      	movs	r3, #0
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2301      	movs	r3, #1
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	4b24      	ldr	r3, [pc, #144]	@ (80042a8 <weekdaySelector+0x344>)
 8004216:	2146      	movs	r1, #70	@ 0x46
 8004218:	2055      	movs	r0, #85	@ 0x55
 800421a:	f002 f93c 	bl	8006496 <LCD_Font>
		  			  HAL_Delay(300);
 800421e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004222:	f003 fc97 	bl	8007b54 <HAL_Delay>

		  		  }
		  	  }

		  	if(touchX >= 88 && touchX < 221 && touchY >= 55 && touchY < 161){
 8004226:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800422a:	2b57      	cmp	r3, #87	@ 0x57
 800422c:	d95b      	bls.n	80042e6 <weekdaySelector+0x382>
 800422e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004232:	2bdc      	cmp	r3, #220	@ 0xdc
 8004234:	d857      	bhi.n	80042e6 <weekdaySelector+0x382>
 8004236:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800423a:	2b36      	cmp	r3, #54	@ 0x36
 800423c:	d953      	bls.n	80042e6 <weekdaySelector+0x382>
 800423e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004242:	2ba0      	cmp	r3, #160	@ 0xa0
 8004244:	d84f      	bhi.n	80042e6 <weekdaySelector+0x382>
		  		  		  if(Monday == 0){
 8004246:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800424a:	2b00      	cmp	r3, #0
 800424c:	d130      	bne.n	80042b0 <weekdaySelector+0x34c>
		  		  			  fillRect(150, 30,75,75, ILI9488_GREEN);
 800424e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	234b      	movs	r3, #75	@ 0x4b
 8004256:	224b      	movs	r2, #75	@ 0x4b
 8004258:	211e      	movs	r1, #30
 800425a:	2096      	movs	r0, #150	@ 0x96
 800425c:	f001 fb44 	bl	80058e8 <fillRect>
		  		  			  LCD_Font(160, 70, addMonday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004260:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004264:	2300      	movs	r3, #0
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	2301      	movs	r3, #1
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <weekdaySelector+0x344>)
 800426e:	2146      	movs	r1, #70	@ 0x46
 8004270:	20a0      	movs	r0, #160	@ 0xa0
 8004272:	f002 f910 	bl	8006496 <LCD_Font>
		  		  			  Monday = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
		  		  			  HAL_Delay(300);
 800427c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004280:	f003 fc68 	bl	8007b54 <HAL_Delay>
 8004284:	e02f      	b.n	80042e6 <weekdaySelector+0x382>
 8004286:	bf00      	nop
 8004288:	004e5553 	.word	0x004e5553
 800428c:	004e4f4d 	.word	0x004e4f4d
 8004290:	00455554 	.word	0x00455554
 8004294:	00444557 	.word	0x00444557
 8004298:	00554854 	.word	0x00554854
 800429c:	00495246 	.word	0x00495246
 80042a0:	00544153 	.word	0x00544153
 80042a4:	0800ec30 	.word	0x0800ec30
 80042a8:	0800fd34 	.word	0x0800fd34
 80042ac:	0800eb04 	.word	0x0800eb04
		  		  		  }
		  		  		  else{
		  		  			  Monday = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
		  		  			  fillRect(150, 30,75,75, ILI9488_RED);
 80042b6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	234b      	movs	r3, #75	@ 0x4b
 80042be:	224b      	movs	r2, #75	@ 0x4b
 80042c0:	211e      	movs	r1, #30
 80042c2:	2096      	movs	r0, #150	@ 0x96
 80042c4:	f001 fb10 	bl	80058e8 <fillRect>
		  		  			  LCD_Font(160, 70, addMonday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80042c8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80042cc:	2300      	movs	r3, #0
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	2301      	movs	r3, #1
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	4bb8      	ldr	r3, [pc, #736]	@ (80045b8 <weekdaySelector+0x654>)
 80042d6:	2146      	movs	r1, #70	@ 0x46
 80042d8:	20a0      	movs	r0, #160	@ 0xa0
 80042da:	f002 f8dc 	bl	8006496 <LCD_Font>
		  		  			  HAL_Delay(300);
 80042de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80042e2:	f003 fc37 	bl	8007b54 <HAL_Delay>

		  		  		  }
		  		  	  }


			if(touchX >= 245 && touchX < 299 && touchY >= 55 && touchY < 161){
 80042e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80042ea:	2bf4      	cmp	r3, #244	@ 0xf4
 80042ec:	d947      	bls.n	800437e <weekdaySelector+0x41a>
 80042ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80042f2:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 80042f6:	d842      	bhi.n	800437e <weekdaySelector+0x41a>
 80042f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80042fc:	2b36      	cmp	r3, #54	@ 0x36
 80042fe:	d93e      	bls.n	800437e <weekdaySelector+0x41a>
 8004300:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004304:	2ba0      	cmp	r3, #160	@ 0xa0
 8004306:	d83a      	bhi.n	800437e <weekdaySelector+0x41a>
			  		  		  if(Tuesday == 0){
 8004308:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11b      	bne.n	8004348 <weekdaySelector+0x3e4>
			  		  			  fillRect(235, 30,75,75, ILI9488_GREEN);
 8004310:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	234b      	movs	r3, #75	@ 0x4b
 8004318:	224b      	movs	r2, #75	@ 0x4b
 800431a:	211e      	movs	r1, #30
 800431c:	20eb      	movs	r0, #235	@ 0xeb
 800431e:	f001 fae3 	bl	80058e8 <fillRect>
			  		  			  LCD_Font(255, 70, addTuesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004322:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004326:	2300      	movs	r3, #0
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	2301      	movs	r3, #1
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4ba2      	ldr	r3, [pc, #648]	@ (80045b8 <weekdaySelector+0x654>)
 8004330:	2146      	movs	r1, #70	@ 0x46
 8004332:	20ff      	movs	r0, #255	@ 0xff
 8004334:	f002 f8af 	bl	8006496 <LCD_Font>
			  		  			  Tuesday = 1;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			  		  			  HAL_Delay(300);
 800433e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004342:	f003 fc07 	bl	8007b54 <HAL_Delay>
 8004346:	e01a      	b.n	800437e <weekdaySelector+0x41a>
			  		  		  }
			  		  		  else{
			  		  			  Tuesday = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			  		  			  fillRect(235, 30,75,75, ILI9488_RED);
 800434e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	234b      	movs	r3, #75	@ 0x4b
 8004356:	224b      	movs	r2, #75	@ 0x4b
 8004358:	211e      	movs	r1, #30
 800435a:	20eb      	movs	r0, #235	@ 0xeb
 800435c:	f001 fac4 	bl	80058e8 <fillRect>
			  		  			  LCD_Font(255, 70, addTuesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004360:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004364:	2300      	movs	r3, #0
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	2301      	movs	r3, #1
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	4b92      	ldr	r3, [pc, #584]	@ (80045b8 <weekdaySelector+0x654>)
 800436e:	2146      	movs	r1, #70	@ 0x46
 8004370:	20ff      	movs	r0, #255	@ 0xff
 8004372:	f002 f890 	bl	8006496 <LCD_Font>
			  		  			  HAL_Delay(300);
 8004376:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800437a:	f003 fbeb 	bl	8007b54 <HAL_Delay>

			  		  		  }
			  		  	  }


			if(touchX >= 308 && touchX < 390 && touchY >= 67 && touchY < 161){
 800437e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004382:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8004386:	d34b      	bcc.n	8004420 <weekdaySelector+0x4bc>
 8004388:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800438c:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 8004390:	d246      	bcs.n	8004420 <weekdaySelector+0x4bc>
 8004392:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004396:	2b42      	cmp	r3, #66	@ 0x42
 8004398:	d942      	bls.n	8004420 <weekdaySelector+0x4bc>
 800439a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800439e:	2ba0      	cmp	r3, #160	@ 0xa0
 80043a0:	d83e      	bhi.n	8004420 <weekdaySelector+0x4bc>
					  		  		  if(Wednesday == 0){
 80043a2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d11d      	bne.n	80043e6 <weekdaySelector+0x482>
					  		  			  fillRect(320, 30,75,75, ILI9488_GREEN);
 80043aa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	234b      	movs	r3, #75	@ 0x4b
 80043b2:	224b      	movs	r2, #75	@ 0x4b
 80043b4:	211e      	movs	r1, #30
 80043b6:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80043ba:	f001 fa95 	bl	80058e8 <fillRect>
					  		  			  LCD_Font(335, 70, addWednesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80043be:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80043c2:	2300      	movs	r3, #0
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	2301      	movs	r3, #1
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4b7b      	ldr	r3, [pc, #492]	@ (80045b8 <weekdaySelector+0x654>)
 80043cc:	2146      	movs	r1, #70	@ 0x46
 80043ce:	f240 104f 	movw	r0, #335	@ 0x14f
 80043d2:	f002 f860 	bl	8006496 <LCD_Font>
					  		  			  Wednesday = 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
					  		  			  HAL_Delay(300);
 80043dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80043e0:	f003 fbb8 	bl	8007b54 <HAL_Delay>
 80043e4:	e01c      	b.n	8004420 <weekdaySelector+0x4bc>
					  		  		  }
					  		  		  else{
					  		  			  Wednesday = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
					  		  			  fillRect(320, 30,75,75, ILI9488_RED);
 80043ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	234b      	movs	r3, #75	@ 0x4b
 80043f4:	224b      	movs	r2, #75	@ 0x4b
 80043f6:	211e      	movs	r1, #30
 80043f8:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80043fc:	f001 fa74 	bl	80058e8 <fillRect>
					  		  			  LCD_Font(335, 70, addWednesday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004400:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004404:	2300      	movs	r3, #0
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	2301      	movs	r3, #1
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	4b6a      	ldr	r3, [pc, #424]	@ (80045b8 <weekdaySelector+0x654>)
 800440e:	2146      	movs	r1, #70	@ 0x46
 8004410:	f240 104f 	movw	r0, #335	@ 0x14f
 8004414:	f002 f83f 	bl	8006496 <LCD_Font>
					  		  			  HAL_Delay(300);
 8004418:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800441c:	f003 fb9a 	bl	8007b54 <HAL_Delay>

					  		  		  }
					  		  	  }


			if(touchX >= 75 && touchX < 97 && touchY >= 165 && touchY < 207){
 8004420:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004424:	2b4a      	cmp	r3, #74	@ 0x4a
 8004426:	d946      	bls.n	80044b6 <weekdaySelector+0x552>
 8004428:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800442c:	2b60      	cmp	r3, #96	@ 0x60
 800442e:	d842      	bhi.n	80044b6 <weekdaySelector+0x552>
 8004430:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004434:	2ba4      	cmp	r3, #164	@ 0xa4
 8004436:	d93e      	bls.n	80044b6 <weekdaySelector+0x552>
 8004438:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800443c:	2bce      	cmp	r3, #206	@ 0xce
 800443e:	d83a      	bhi.n	80044b6 <weekdaySelector+0x552>
							  		  		  if(Thursday == 0){
 8004440:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11b      	bne.n	8004480 <weekdaySelector+0x51c>
							  		  			  fillRect(105, 120,75,75, ILI9488_GREEN);
 8004448:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	234b      	movs	r3, #75	@ 0x4b
 8004450:	224b      	movs	r2, #75	@ 0x4b
 8004452:	2178      	movs	r1, #120	@ 0x78
 8004454:	2069      	movs	r0, #105	@ 0x69
 8004456:	f001 fa47 	bl	80058e8 <fillRect>
							  		  			  LCD_Font(125, 160, addThursday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800445a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800445e:	2300      	movs	r3, #0
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	2301      	movs	r3, #1
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	4b54      	ldr	r3, [pc, #336]	@ (80045b8 <weekdaySelector+0x654>)
 8004468:	21a0      	movs	r1, #160	@ 0xa0
 800446a:	207d      	movs	r0, #125	@ 0x7d
 800446c:	f002 f813 	bl	8006496 <LCD_Font>
							  		  			  Thursday = 1;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
							  		  			  HAL_Delay(300);
 8004476:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800447a:	f003 fb6b 	bl	8007b54 <HAL_Delay>
 800447e:	e01a      	b.n	80044b6 <weekdaySelector+0x552>
							  		  		  }
							  		  		  else{
							  		  			  Thursday = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
							  		  			  fillRect(105, 120,75,75, ILI9488_RED);
 8004486:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	234b      	movs	r3, #75	@ 0x4b
 800448e:	224b      	movs	r2, #75	@ 0x4b
 8004490:	2178      	movs	r1, #120	@ 0x78
 8004492:	2069      	movs	r0, #105	@ 0x69
 8004494:	f001 fa28 	bl	80058e8 <fillRect>
							  		  			  LCD_Font(125, 160, addThursday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004498:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800449c:	2300      	movs	r3, #0
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2301      	movs	r3, #1
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4b44      	ldr	r3, [pc, #272]	@ (80045b8 <weekdaySelector+0x654>)
 80044a6:	21a0      	movs	r1, #160	@ 0xa0
 80044a8:	207d      	movs	r0, #125	@ 0x7d
 80044aa:	f001 fff4 	bl	8006496 <LCD_Font>
							  		  			  HAL_Delay(300);
 80044ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80044b2:	f003 fb4f 	bl	8007b54 <HAL_Delay>
							  		  		  }
							  		  	  }



			if(touchX >= 184 && touchX < 258 && touchY >= 165 && touchY < 207){
 80044b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80044ba:	2bb7      	cmp	r3, #183	@ 0xb7
 80044bc:	d947      	bls.n	800454e <weekdaySelector+0x5ea>
 80044be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80044c2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80044c6:	d242      	bcs.n	800454e <weekdaySelector+0x5ea>
 80044c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80044cc:	2ba4      	cmp	r3, #164	@ 0xa4
 80044ce:	d93e      	bls.n	800454e <weekdaySelector+0x5ea>
 80044d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80044d4:	2bce      	cmp	r3, #206	@ 0xce
 80044d6:	d83a      	bhi.n	800454e <weekdaySelector+0x5ea>
									  		  		  if(Friday == 0){
 80044d8:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11b      	bne.n	8004518 <weekdaySelector+0x5b4>
									  		  			  fillRect(190, 120,75,75, ILI9488_GREEN);
 80044e0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	234b      	movs	r3, #75	@ 0x4b
 80044e8:	224b      	movs	r2, #75	@ 0x4b
 80044ea:	2178      	movs	r1, #120	@ 0x78
 80044ec:	20be      	movs	r0, #190	@ 0xbe
 80044ee:	f001 f9fb 	bl	80058e8 <fillRect>
									  		  			  LCD_Font(210, 160, addFriday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80044f2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80044f6:	2300      	movs	r3, #0
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	2301      	movs	r3, #1
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	4b2e      	ldr	r3, [pc, #184]	@ (80045b8 <weekdaySelector+0x654>)
 8004500:	21a0      	movs	r1, #160	@ 0xa0
 8004502:	20d2      	movs	r0, #210	@ 0xd2
 8004504:	f001 ffc7 	bl	8006496 <LCD_Font>
									  		  			  Friday = 1;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
									  		  			  HAL_Delay(300);
 800450e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004512:	f003 fb1f 	bl	8007b54 <HAL_Delay>
 8004516:	e01a      	b.n	800454e <weekdaySelector+0x5ea>
									  		  		  }
									  		  		  else{
									  		  			  Friday = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
									  		  			  fillRect(190, 120,75,75, ILI9488_RED);
 800451e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	234b      	movs	r3, #75	@ 0x4b
 8004526:	224b      	movs	r2, #75	@ 0x4b
 8004528:	2178      	movs	r1, #120	@ 0x78
 800452a:	20be      	movs	r0, #190	@ 0xbe
 800452c:	f001 f9dc 	bl	80058e8 <fillRect>
									  		  			  LCD_Font(210, 160, addFriday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004530:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8004534:	2300      	movs	r3, #0
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	2301      	movs	r3, #1
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	4b1e      	ldr	r3, [pc, #120]	@ (80045b8 <weekdaySelector+0x654>)
 800453e:	21a0      	movs	r1, #160	@ 0xa0
 8004540:	20d2      	movs	r0, #210	@ 0xd2
 8004542:	f001 ffa8 	bl	8006496 <LCD_Font>
									  		  			  HAL_Delay(300);
 8004546:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800454a:	f003 fb03 	bl	8007b54 <HAL_Delay>
									  		  		  }
									  		  	  }



				 if(touchX >= 262 && touchX < 335 && touchY >= 165 && touchY < 207){
 800454e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004552:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8004556:	d34e      	bcc.n	80045f6 <weekdaySelector+0x692>
 8004558:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800455c:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8004560:	d849      	bhi.n	80045f6 <weekdaySelector+0x692>
 8004562:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004566:	2ba4      	cmp	r3, #164	@ 0xa4
 8004568:	d945      	bls.n	80045f6 <weekdaySelector+0x692>
 800456a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800456e:	2bce      	cmp	r3, #206	@ 0xce
 8004570:	d841      	bhi.n	80045f6 <weekdaySelector+0x692>
				  if(Saturday == 0){
 8004572:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8004576:	2b00      	cmp	r3, #0
 8004578:	d120      	bne.n	80045bc <weekdaySelector+0x658>
					  fillRect(275, 120,75,75, ILI9488_GREEN);
 800457a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	234b      	movs	r3, #75	@ 0x4b
 8004582:	224b      	movs	r2, #75	@ 0x4b
 8004584:	2178      	movs	r1, #120	@ 0x78
 8004586:	f240 1013 	movw	r0, #275	@ 0x113
 800458a:	f001 f9ad 	bl	80058e8 <fillRect>
					  LCD_Font(295, 160, addSaturday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800458e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004592:	2300      	movs	r3, #0
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	2301      	movs	r3, #1
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	4b07      	ldr	r3, [pc, #28]	@ (80045b8 <weekdaySelector+0x654>)
 800459c:	21a0      	movs	r1, #160	@ 0xa0
 800459e:	f240 1027 	movw	r0, #295	@ 0x127
 80045a2:	f001 ff78 	bl	8006496 <LCD_Font>
					  Saturday = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
					  HAL_Delay(300);
 80045ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80045b0:	f003 fad0 	bl	8007b54 <HAL_Delay>
 80045b4:	e01f      	b.n	80045f6 <weekdaySelector+0x692>
 80045b6:	bf00      	nop
 80045b8:	0800fd34 	.word	0x0800fd34
				  }
				  else{
					  Saturday = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
					  fillRect(275, 120,75,75, ILI9488_RED);
 80045c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	234b      	movs	r3, #75	@ 0x4b
 80045ca:	224b      	movs	r2, #75	@ 0x4b
 80045cc:	2178      	movs	r1, #120	@ 0x78
 80045ce:	f240 1013 	movw	r0, #275	@ 0x113
 80045d2:	f001 f989 	bl	80058e8 <fillRect>
					  LCD_Font(295, 160, addSaturday, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 80045d6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80045da:	2300      	movs	r3, #0
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	2301      	movs	r3, #1
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	4b32      	ldr	r3, [pc, #200]	@ (80046ac <weekdaySelector+0x748>)
 80045e4:	21a0      	movs	r1, #160	@ 0xa0
 80045e6:	f240 1027 	movw	r0, #295	@ 0x127
 80045ea:	f001 ff54 	bl	8006496 <LCD_Font>
					  HAL_Delay(300);
 80045ee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80045f2:	f003 faaf 	bl	8007b54 <HAL_Delay>

				  }
			  }


				 if(touchX >= 6 && touchX < 392 && touchY >= 265 && touchY < 306){
 80045f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	f67f ad95 	bls.w	800412a <weekdaySelector+0x1c6>
 8004600:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004604:	f5b3 7fc4 	cmp.w	r3, #392	@ 0x188
 8004608:	f4bf ad8f 	bcs.w	800412a <weekdaySelector+0x1c6>
 800460c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004610:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8004614:	f67f ad89 	bls.w	800412a <weekdaySelector+0x1c6>
 8004618:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800461c:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8004620:	f4bf ad83 	bcs.w	800412a <weekdaySelector+0x1c6>
					 	 	fillRect(50, 250, 350, 50, ILI9488_GREEN);
 8004624:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2332      	movs	r3, #50	@ 0x32
 800462c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004630:	21fa      	movs	r1, #250	@ 0xfa
 8004632:	2032      	movs	r0, #50	@ 0x32
 8004634:	f001 f958 	bl	80058e8 <fillRect>
					  		HAL_Delay(300);
 8004638:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800463c:	f003 fa8a 	bl	8007b54 <HAL_Delay>
					  		fillRect(50, 250, 350, 50, ILI9488_RED);
 8004640:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	2332      	movs	r3, #50	@ 0x32
 8004648:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800464c:	21fa      	movs	r1, #250	@ 0xfa
 800464e:	2032      	movs	r0, #50	@ 0x32
 8004650:	f001 f94a 	bl	80058e8 <fillRect>
					  		LCD_Font(200, 285, addNext, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8004654:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004658:	2300      	movs	r3, #0
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	2301      	movs	r3, #1
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <weekdaySelector+0x748>)
 8004662:	f240 111d 	movw	r1, #285	@ 0x11d
 8004666:	20c8      	movs	r0, #200	@ 0xc8
 8004668:	f001 ff15 	bl	8006496 <LCD_Font>

					  		uint8_t days [7] = {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};
 800466c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004670:	723b      	strb	r3, [r7, #8]
 8004672:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004676:	727b      	strb	r3, [r7, #9]
 8004678:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800467c:	72bb      	strb	r3, [r7, #10]
 800467e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8004682:	72fb      	strb	r3, [r7, #11]
 8004684:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8004688:	733b      	strb	r3, [r7, #12]
 800468a:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800468e:	737b      	strb	r3, [r7, #13]
 8004690:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8004694:	73bb      	strb	r3, [r7, #14]
					  		timeSet(dispNum, pillOption, days);
 8004696:	f107 0208 	add.w	r2, r7, #8
 800469a:	79b9      	ldrb	r1, [r7, #6]
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f806 	bl	80046b0 <timeSet>
					  		return;
 80046a4:	bf00      	nop


	  }


}
 80046a6:	3768      	adds	r7, #104	@ 0x68
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	0800fd34 	.word	0x0800fd34

080046b0 <timeSet>:

void timeSet(uint8_t dispNum, uint8_t pillOption, uint8_t * daysOfWeek){
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b0a7      	sub	sp, #156	@ 0x9c
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	4603      	mov	r3, r0
 80046b8:	603a      	str	r2, [r7, #0]
 80046ba:	71fb      	strb	r3, [r7, #7]
 80046bc:	460b      	mov	r3, r1
 80046be:	71bb      	strb	r3, [r7, #6]
	   fillScreen(ILI9488_WHITE);
 80046c0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80046c4:	f001 f8f6 	bl	80058b4 <fillScreen>
	   uint16_t touchX = 0, touchY = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

	   //the keys:

	   uint16_t Hour = 12;
 80046d4:	230c      	movs	r3, #12
 80046d6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	   uint16_t Minute = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	   uint8_t PM = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

	   char hourPrint[20];
	   char minPrint[20];

	   //convert int to string
	   sprintf(hourPrint, "%d", Hour);
 80046e6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80046ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80046ee:	49ca      	ldr	r1, [pc, #808]	@ (8004a18 <timeSet+0x368>)
 80046f0:	4618      	mov	r0, r3
 80046f2:	f008 fb79 	bl	800cde8 <siprintf>
	   sprintf(minPrint, "%d", Minute);
 80046f6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 80046fa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80046fe:	49c6      	ldr	r1, [pc, #792]	@ (8004a18 <timeSet+0x368>)
 8004700:	4618      	mov	r0, r3
 8004702:	f008 fb71 	bl	800cde8 <siprintf>


	   strcat(minPrint, "0");
 8004706:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800470a:	4618      	mov	r0, r3
 800470c:	f7fb fd78 	bl	8000200 <strlen>
 8004710:	4603      	mov	r3, r0
 8004712:	461a      	mov	r2, r3
 8004714:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004718:	4413      	add	r3, r2
 800471a:	49c0      	ldr	r1, [pc, #768]	@ (8004a1c <timeSet+0x36c>)
 800471c:	461a      	mov	r2, r3
 800471e:	460b      	mov	r3, r1
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	8013      	strh	r3, [r2, #0]



	   char  downwardArrow[] = "<";
 8004724:	233c      	movs	r3, #60	@ 0x3c
 8004726:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	   char upwardArrow[] = ">";
 800472a:	233e      	movs	r3, #62	@ 0x3e
 800472c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

	   char colon[] = ":";
 8004730:	233a      	movs	r3, #58	@ 0x3a
 8004732:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	   char am[] = "AM";
 8004736:	4aba      	ldr	r2, [pc, #744]	@ (8004a20 <timeSet+0x370>)
 8004738:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	4611      	mov	r1, r2
 8004740:	8019      	strh	r1, [r3, #0]
 8004742:	3302      	adds	r3, #2
 8004744:	0c12      	lsrs	r2, r2, #16
 8004746:	701a      	strb	r2, [r3, #0]
	   char pm[] = "PM";
 8004748:	4ab6      	ldr	r2, [pc, #728]	@ (8004a24 <timeSet+0x374>)
 800474a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	4611      	mov	r1, r2
 8004752:	8019      	strh	r1, [r3, #0]
 8004754:	3302      	adds	r3, #2
 8004756:	0c12      	lsrs	r2, r2, #16
 8004758:	701a      	strb	r2, [r3, #0]
	   char addNext[] = "Next";
 800475a:	4ab3      	ldr	r2, [pc, #716]	@ (8004a28 <timeSet+0x378>)
 800475c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004764:	6018      	str	r0, [r3, #0]
 8004766:	3304      	adds	r3, #4
 8004768:	7019      	strb	r1, [r3, #0]
	   char addAnother[] = "Another Time";
 800476a:	4bb0      	ldr	r3, [pc, #704]	@ (8004a2c <timeSet+0x37c>)
 800476c:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8004770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004772:	c407      	stmia	r4!, {r0, r1, r2}
 8004774:	7023      	strb	r3, [r4, #0]

	   //minute down arrow
	   fillRect(275, 185,50,50, ILI9488_RED);
 8004776:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2332      	movs	r3, #50	@ 0x32
 800477e:	2232      	movs	r2, #50	@ 0x32
 8004780:	21b9      	movs	r1, #185	@ 0xb9
 8004782:	f240 1013 	movw	r0, #275	@ 0x113
 8004786:	f001 f8af 	bl	80058e8 <fillRect>


	   //minute up arrow
	   fillRect(275, 25,50,50, ILI9488_RED);
 800478a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2332      	movs	r3, #50	@ 0x32
 8004792:	2232      	movs	r2, #50	@ 0x32
 8004794:	2119      	movs	r1, #25
 8004796:	f240 1013 	movw	r0, #275	@ 0x113
 800479a:	f001 f8a5 	bl	80058e8 <fillRect>


	   //hour down arrow
	   fillRect(75, 185,50,50, ILI9488_RED);
 800479e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2332      	movs	r3, #50	@ 0x32
 80047a6:	2232      	movs	r2, #50	@ 0x32
 80047a8:	21b9      	movs	r1, #185	@ 0xb9
 80047aa:	204b      	movs	r0, #75	@ 0x4b
 80047ac:	f001 f89c 	bl	80058e8 <fillRect>


	     //hour up arrow
	   fillRect(75, 25,50,50, ILI9488_RED);
 80047b0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2332      	movs	r3, #50	@ 0x32
 80047b8:	2232      	movs	r2, #50	@ 0x32
 80047ba:	2119      	movs	r1, #25
 80047bc:	204b      	movs	r0, #75	@ 0x4b
 80047be:	f001 f893 	bl	80058e8 <fillRect>

	   //am arrow
	   fillRect(382, 50,85,65, ILI9488_GREEN);
 80047c2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2341      	movs	r3, #65	@ 0x41
 80047ca:	2255      	movs	r2, #85	@ 0x55
 80047cc:	2132      	movs	r1, #50	@ 0x32
 80047ce:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 80047d2:	f001 f889 	bl	80058e8 <fillRect>

	   //PM arrow
	   fillRect(382, 135,85,65, ILI9488_RED);
 80047d6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2341      	movs	r3, #65	@ 0x41
 80047de:	2255      	movs	r2, #85	@ 0x55
 80047e0:	2187      	movs	r1, #135	@ 0x87
 80047e2:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 80047e6:	f001 f87f 	bl	80058e8 <fillRect>


	   //Next button.
	   fillRect(340, 250,105,55, ILI9488_RED);
 80047ea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	2337      	movs	r3, #55	@ 0x37
 80047f2:	2269      	movs	r2, #105	@ 0x69
 80047f4:	21fa      	movs	r1, #250	@ 0xfa
 80047f6:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 80047fa:	f001 f875 	bl	80058e8 <fillRect>

	   //Add another button.
	   fillRect(15, 250,295,55, ILI9488_RED);
 80047fe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2337      	movs	r3, #55	@ 0x37
 8004806:	f240 1227 	movw	r2, #295	@ 0x127
 800480a:	21fa      	movs	r1, #250	@ 0xfa
 800480c:	200f      	movs	r0, #15
 800480e:	f001 f86b 	bl	80058e8 <fillRect>



	   LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8004812:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004816:	2300      	movs	r3, #0
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	2301      	movs	r3, #1
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4b84      	ldr	r3, [pc, #528]	@ (8004a30 <timeSet+0x380>)
 8004820:	21a5      	movs	r1, #165	@ 0xa5
 8004822:	202d      	movs	r0, #45	@ 0x2d
 8004824:	f001 fe37 	bl	8006496 <LCD_Font>
	   LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8004828:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800482c:	2300      	movs	r3, #0
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	2301      	movs	r3, #1
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4b7e      	ldr	r3, [pc, #504]	@ (8004a30 <timeSet+0x380>)
 8004836:	21a5      	movs	r1, #165	@ 0xa5
 8004838:	20fa      	movs	r0, #250	@ 0xfa
 800483a:	f001 fe2c 	bl	8006496 <LCD_Font>
	   LCD_Font(195, 165, colon, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 800483e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004842:	2300      	movs	r3, #0
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	2301      	movs	r3, #1
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	4b79      	ldr	r3, [pc, #484]	@ (8004a30 <timeSet+0x380>)
 800484c:	21a5      	movs	r1, #165	@ 0xa5
 800484e:	20c3      	movs	r0, #195	@ 0xc3
 8004850:	f001 fe21 	bl	8006496 <LCD_Font>
	   LCD_Font(385, 100, am, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8004854:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004858:	2300      	movs	r3, #0
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	2301      	movs	r3, #1
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4b74      	ldr	r3, [pc, #464]	@ (8004a34 <timeSet+0x384>)
 8004862:	2164      	movs	r1, #100	@ 0x64
 8004864:	f240 1081 	movw	r0, #385	@ 0x181
 8004868:	f001 fe15 	bl	8006496 <LCD_Font>
	   LCD_Font(385, 180, pm, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 800486c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004870:	2300      	movs	r3, #0
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	2301      	movs	r3, #1
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4b6e      	ldr	r3, [pc, #440]	@ (8004a34 <timeSet+0x384>)
 800487a:	21b4      	movs	r1, #180	@ 0xb4
 800487c:	f240 1081 	movw	r0, #385	@ 0x181
 8004880:	f001 fe09 	bl	8006496 <LCD_Font>


	   //next and another time
	   LCD_Font(350, 295, addNext, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 8004884:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004888:	2300      	movs	r3, #0
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	2301      	movs	r3, #1
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4b69      	ldr	r3, [pc, #420]	@ (8004a38 <timeSet+0x388>)
 8004892:	f240 1127 	movw	r1, #295	@ 0x127
 8004896:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800489a:	f001 fdfc 	bl	8006496 <LCD_Font>
	   LCD_Font(25, 295, addAnother, _Open_Sans_Bold_36, 1, ILI9488_BLACK);
 800489e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80048a2:	2300      	movs	r3, #0
 80048a4:	9301      	str	r3, [sp, #4]
 80048a6:	2301      	movs	r3, #1
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	4b63      	ldr	r3, [pc, #396]	@ (8004a38 <timeSet+0x388>)
 80048ac:	f240 1127 	movw	r1, #295	@ 0x127
 80048b0:	2019      	movs	r0, #25
 80048b2:	f001 fdf0 	bl	8006496 <LCD_Font>

	   	   setRotation(2);
 80048b6:	2002      	movs	r0, #2
 80048b8:	f001 f95a 	bl	8005b70 <setRotation>
		  LCD_Font(35, 200, downwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 80048bc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80048c0:	2300      	movs	r3, #0
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	2301      	movs	r3, #1
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a34 <timeSet+0x384>)
 80048ca:	21c8      	movs	r1, #200	@ 0xc8
 80048cc:	2023      	movs	r0, #35	@ 0x23
 80048ce:	f001 fde2 	bl	8006496 <LCD_Font>
		  LCD_Font(200, 200, upwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 80048d2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80048d6:	2300      	movs	r3, #0
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	2301      	movs	r3, #1
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	4b55      	ldr	r3, [pc, #340]	@ (8004a34 <timeSet+0x384>)
 80048e0:	21c8      	movs	r1, #200	@ 0xc8
 80048e2:	20c8      	movs	r0, #200	@ 0xc8
 80048e4:	f001 fdd7 	bl	8006496 <LCD_Font>

		  LCD_Font(35, 400, downwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 80048e8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80048ec:	2300      	movs	r3, #0
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	2301      	movs	r3, #1
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004a34 <timeSet+0x384>)
 80048f6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80048fa:	2023      	movs	r0, #35	@ 0x23
 80048fc:	f001 fdcb 	bl	8006496 <LCD_Font>
		  LCD_Font(200, 400, upwardArrow, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8004900:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004904:	2300      	movs	r3, #0
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	2301      	movs	r3, #1
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	4b49      	ldr	r3, [pc, #292]	@ (8004a34 <timeSet+0x384>)
 800490e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004912:	20c8      	movs	r0, #200	@ 0xc8
 8004914:	f001 fdbf 	bl	8006496 <LCD_Font>
		  setRotation(1);
 8004918:	2001      	movs	r0, #1
 800491a:	f001 f929 	bl	8005b70 <setRotation>


		  char buf[20];
		  char buf1[20];

		  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_WHITE);
 800491e:	f107 0208 	add.w	r2, r7, #8
 8004922:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	2301      	movs	r3, #1
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	4b43      	ldr	r3, [pc, #268]	@ (8004a3c <timeSet+0x38c>)
 800492e:	2119      	movs	r1, #25
 8004930:	2019      	movs	r0, #25
 8004932:	f001 fdb0 	bl	8006496 <LCD_Font>
		  	  touchX = getX();
 8004936:	f003 f85b 	bl	80079f0 <getX>
 800493a:	4603      	mov	r3, r0
 800493c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
		  	  touchY = getY();
 8004940:	f003 f860 	bl	8007a04 <getY>
 8004944:	4603      	mov	r3, r0
 8004946:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		  	  sprintf(buf,"x=%3d y=%3d",touchX,touchY);
 800494a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 800494e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004952:	f107 001c 	add.w	r0, r7, #28
 8004956:	493a      	ldr	r1, [pc, #232]	@ (8004a40 <timeSet+0x390>)
 8004958:	f008 fa46 	bl	800cde8 <siprintf>
		  	  sprintf(buf1,"x=%3d y=%3d",touchX,touchY);
 800495c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8004960:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004964:	f107 0008 	add.w	r0, r7, #8
 8004968:	4935      	ldr	r1, [pc, #212]	@ (8004a40 <timeSet+0x390>)
 800496a:	f008 fa3d 	bl	800cde8 <siprintf>

		  	  LCD_Font(25, 25, buf1, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 800496e:	f107 0208 	add.w	r2, r7, #8
 8004972:	2300      	movs	r3, #0
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	2301      	movs	r3, #1
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	4b30      	ldr	r3, [pc, #192]	@ (8004a3c <timeSet+0x38c>)
 800497c:	2119      	movs	r1, #25
 800497e:	2019      	movs	r0, #25
 8004980:	f001 fd89 	bl	8006496 <LCD_Font>
				390, 169
				464, 172
		  	   */


		  	  if(touchX >= 390 && touchX < 464 && touchY >= 67 && touchY < 172){
 8004984:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004988:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 800498c:	d35a      	bcc.n	8004a44 <timeSet+0x394>
 800498e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004992:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8004996:	d255      	bcs.n	8004a44 <timeSet+0x394>
 8004998:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800499c:	2b42      	cmp	r3, #66	@ 0x42
 800499e:	d951      	bls.n	8004a44 <timeSet+0x394>
 80049a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049a4:	2bab      	cmp	r3, #171	@ 0xab
 80049a6:	d84d      	bhi.n	8004a44 <timeSet+0x394>
		  		  if(PM == 1){
 80049a8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d149      	bne.n	8004a44 <timeSet+0x394>

		  			  //make PM 0.
		  			  PM = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

		  			  //make AM Green & PM Red

		  			 //am arrow
		  			   fillRect(382, 50,85,65, ILI9488_GREEN);
 80049b6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2341      	movs	r3, #65	@ 0x41
 80049be:	2255      	movs	r2, #85	@ 0x55
 80049c0:	2132      	movs	r1, #50	@ 0x32
 80049c2:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 80049c6:	f000 ff8f 	bl	80058e8 <fillRect>

		  			   //PM arrow
		  			   fillRect(382, 135,85,65, ILI9488_RED);
 80049ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2341      	movs	r3, #65	@ 0x41
 80049d2:	2255      	movs	r2, #85	@ 0x55
 80049d4:	2187      	movs	r1, #135	@ 0x87
 80049d6:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 80049da:	f000 ff85 	bl	80058e8 <fillRect>


		  			 LCD_Font(385, 100, am, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 80049de:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80049e2:	2300      	movs	r3, #0
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	2301      	movs	r3, #1
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <timeSet+0x384>)
 80049ec:	2164      	movs	r1, #100	@ 0x64
 80049ee:	f240 1081 	movw	r0, #385	@ 0x181
 80049f2:	f001 fd50 	bl	8006496 <LCD_Font>
		  			 LCD_Font(385, 180, pm, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 80049f6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80049fa:	2300      	movs	r3, #0
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	2301      	movs	r3, #1
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <timeSet+0x384>)
 8004a04:	21b4      	movs	r1, #180	@ 0xb4
 8004a06:	f240 1081 	movw	r0, #385	@ 0x181
 8004a0a:	f001 fd44 	bl	8006496 <LCD_Font>

		  			  HAL_Delay(300);
 8004a0e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004a12:	f003 f89f 	bl	8007b54 <HAL_Delay>
 8004a16:	e015      	b.n	8004a44 <timeSet+0x394>
 8004a18:	0800ec38 	.word	0x0800ec38
 8004a1c:	0800ec3c 	.word	0x0800ec3c
 8004a20:	0800ec40 	.word	0x0800ec40
 8004a24:	0800e928 	.word	0x0800e928
 8004a28:	0800ec30 	.word	0x0800ec30
 8004a2c:	0800ec44 	.word	0x0800ec44
 8004a30:	0801d174 	.word	0x0801d174
 8004a34:	080145c4 	.word	0x080145c4
 8004a38:	08012058 	.word	0x08012058
 8004a3c:	0800fd34 	.word	0x0800fd34
 8004a40:	0800eb04 	.word	0x0800eb04
				390, 172
				464, 192
				393, 207
				464, 207
		  	   */
		  	if(touchX >= 390 && touchX < 464 && touchY >= 172 && touchY < 207){
 8004a44:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004a48:	f5b3 7fc3 	cmp.w	r3, #390	@ 0x186
 8004a4c:	d343      	bcc.n	8004ad6 <timeSet+0x426>
 8004a4e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004a52:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8004a56:	d23e      	bcs.n	8004ad6 <timeSet+0x426>
 8004a58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a5c:	2bab      	cmp	r3, #171	@ 0xab
 8004a5e:	d93a      	bls.n	8004ad6 <timeSet+0x426>
 8004a60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a64:	2bce      	cmp	r3, #206	@ 0xce
 8004a66:	d836      	bhi.n	8004ad6 <timeSet+0x426>
		  		  		  if(PM == 0){
 8004a68:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d132      	bne.n	8004ad6 <timeSet+0x426>

		  		  			  //make PM 0.
		  		  			  PM = 1;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

		  		  			  //make AM RED & PM Green
						   //am arrow
						     fillRect(382, 50,85,65, ILI9488_RED);
 8004a76:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2341      	movs	r3, #65	@ 0x41
 8004a7e:	2255      	movs	r2, #85	@ 0x55
 8004a80:	2132      	movs	r1, #50	@ 0x32
 8004a82:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8004a86:	f000 ff2f 	bl	80058e8 <fillRect>

						     //PM arrow
						     fillRect(382, 135,85,65, ILI9488_GREEN);
 8004a8a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2341      	movs	r3, #65	@ 0x41
 8004a92:	2255      	movs	r2, #85	@ 0x55
 8004a94:	2187      	movs	r1, #135	@ 0x87
 8004a96:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8004a9a:	f000 ff25 	bl	80058e8 <fillRect>


						   LCD_Font(385, 100, am, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8004a9e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	4bc8      	ldr	r3, [pc, #800]	@ (8004dcc <timeSet+0x71c>)
 8004aac:	2164      	movs	r1, #100	@ 0x64
 8004aae:	f240 1081 	movw	r0, #385	@ 0x181
 8004ab2:	f001 fcf0 	bl	8006496 <LCD_Font>
						     LCD_Font(385, 180, pm, _Open_Sans_Bold_48, 1, ILI9488_BLACK);
 8004ab6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004aba:	2300      	movs	r3, #0
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4bc2      	ldr	r3, [pc, #776]	@ (8004dcc <timeSet+0x71c>)
 8004ac4:	21b4      	movs	r1, #180	@ 0xb4
 8004ac6:	f240 1081 	movw	r0, #385	@ 0x181
 8004aca:	f001 fce4 	bl	8006496 <LCD_Font>
		  		  			  HAL_Delay(300);
 8004ace:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004ad2:	f003 f83f 	bl	8007b54 <HAL_Delay>
				335, 265
				464, 271
				335, 309
				464, 312
		  		  			  			  		  	  		  	 */
		  				 if(touchX >= 335 && touchX < 464 && touchY >= 265 && touchY < 312){
 8004ad6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004ada:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8004ade:	d929      	bls.n	8004b34 <timeSet+0x484>
 8004ae0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004ae4:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8004ae8:	d224      	bcs.n	8004b34 <timeSet+0x484>
 8004aea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004aee:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8004af2:	d91f      	bls.n	8004b34 <timeSet+0x484>
 8004af4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004af8:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8004afc:	d21a      	bcs.n	8004b34 <timeSet+0x484>
		  					 	 	fillRect(340, 250,105,55, ILI9488_GREEN);
 8004afe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2337      	movs	r3, #55	@ 0x37
 8004b06:	2269      	movs	r2, #105	@ 0x69
 8004b08:	21fa      	movs	r1, #250	@ 0xfa
 8004b0a:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8004b0e:	f000 feeb 	bl	80058e8 <fillRect>
		  					  		loadNewPillsDisplay(dispNum, pillOption, daysOfWeek, Hour, Minute, PM);
 8004b12:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004b16:	b2dc      	uxtb	r4, r3
 8004b18:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	79b9      	ldrb	r1, [r7, #6]
 8004b20:	79f8      	ldrb	r0, [r7, #7]
 8004b22:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8004b26:	9201      	str	r2, [sp, #4]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	f7fc fd83 	bl	8001638 <loadNewPillsDisplay>
		  					  		return;
 8004b32:	e227      	b.n	8004f84 <timeSet+0x8d4>
						1, 265
						308, 265
						1, 312
						299, 306
																		 */
								 if(touchX >= 1 && touchX < 308 && touchY >= 265 && touchY < 312){
 8004b34:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d033      	beq.n	8004ba4 <timeSet+0x4f4>
 8004b3c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b40:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8004b44:	d22e      	bcs.n	8004ba4 <timeSet+0x4f4>
 8004b46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b4a:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8004b4e:	d929      	bls.n	8004ba4 <timeSet+0x4f4>
 8004b50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b54:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8004b58:	d224      	bcs.n	8004ba4 <timeSet+0x4f4>
									 	 	 fillRect(15, 250,295,55, ILI9488_GREEN);
 8004b5a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2337      	movs	r3, #55	@ 0x37
 8004b62:	f240 1227 	movw	r2, #295	@ 0x127
 8004b66:	21fa      	movs	r1, #250	@ 0xfa
 8004b68:	200f      	movs	r0, #15
 8004b6a:	f000 febd 	bl	80058e8 <fillRect>
											HAL_Delay(300);
 8004b6e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004b72:	f002 ffef 	bl	8007b54 <HAL_Delay>
											loadNewPillsDisplay(dispNum, pillOption, daysOfWeek, Hour, Minute, PM);
 8004b76:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004b7a:	b2dc      	uxtb	r4, r3
 8004b7c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	79b9      	ldrb	r1, [r7, #6]
 8004b84:	79f8      	ldrb	r0, [r7, #7]
 8004b86:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8004b8a:	9201      	str	r2, [sp, #4]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	4623      	mov	r3, r4
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	f7fc fd51 	bl	8001638 <loadNewPillsDisplay>
											timeSet(dispNum, pillOption, daysOfWeek);
 8004b96:	79b9      	ldrb	r1, [r7, #6]
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fd87 	bl	80046b0 <timeSet>
											return;
 8004ba2:	e1ef      	b.n	8004f84 <timeSet+0x8d4>
					262, 55
					331, 55
					271, 67
					326, 67
						  			  		  	  		  	 */
				 if(touchX >= 262 && touchX < 331 && touchY >= 55 && touchY < 67){
 8004ba4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004ba8:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8004bac:	d365      	bcc.n	8004c7a <timeSet+0x5ca>
 8004bae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004bb2:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8004bb6:	d860      	bhi.n	8004c7a <timeSet+0x5ca>
 8004bb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bbc:	2b36      	cmp	r3, #54	@ 0x36
 8004bbe:	d95c      	bls.n	8004c7a <timeSet+0x5ca>
 8004bc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bc4:	2b42      	cmp	r3, #66	@ 0x42
 8004bc6:	d858      	bhi.n	8004c7a <timeSet+0x5ca>
					 	 	fillRect(275, 25,50,50, ILI9488_GREEN);
 8004bc8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	2332      	movs	r3, #50	@ 0x32
 8004bd0:	2232      	movs	r2, #50	@ 0x32
 8004bd2:	2119      	movs	r1, #25
 8004bd4:	f240 1013 	movw	r0, #275	@ 0x113
 8004bd8:	f000 fe86 	bl	80058e8 <fillRect>
					  		HAL_Delay(300);
 8004bdc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004be0:	f002 ffb8 	bl	8007b54 <HAL_Delay>
					  		fillRect(275, 25,50,50, ILI9488_RED);
 8004be4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	2332      	movs	r3, #50	@ 0x32
 8004bec:	2232      	movs	r2, #50	@ 0x32
 8004bee:	2119      	movs	r1, #25
 8004bf0:	f240 1013 	movw	r0, #275	@ 0x113
 8004bf4:	f000 fe78 	bl	80058e8 <fillRect>


							//print minPrint
					  		LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8004bf8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8004bfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	2301      	movs	r3, #1
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	4b72      	ldr	r3, [pc, #456]	@ (8004dd0 <timeSet+0x720>)
 8004c08:	21a5      	movs	r1, #165	@ 0xa5
 8004c0a:	20fa      	movs	r0, #250	@ 0xfa
 8004c0c:	f001 fc43 	bl	8006496 <LCD_Font>
							if(Minute == 0){
 8004c10:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10b      	bne.n	8004c30 <timeSet+0x580>
								Minute = 30;
 8004c18:	231e      	movs	r3, #30
 8004c1a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
							   //copying over minPrint
							   sprintf(minPrint, "%d", Minute);
 8004c1e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8004c22:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004c26:	496b      	ldr	r1, [pc, #428]	@ (8004dd4 <timeSet+0x724>)
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f008 f8dd 	bl	800cde8 <siprintf>
 8004c2e:	e019      	b.n	8004c64 <timeSet+0x5b4>
							}
							else{
								Minute = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
							   //copying over minPrint
							   sprintf(minPrint, "%d", Minute);
 8004c36:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8004c3a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004c3e:	4965      	ldr	r1, [pc, #404]	@ (8004dd4 <timeSet+0x724>)
 8004c40:	4618      	mov	r0, r3
 8004c42:	f008 f8d1 	bl	800cde8 <siprintf>
							   strcat(minPrint, "0");
 8004c46:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fad8 	bl	8000200 <strlen>
 8004c50:	4603      	mov	r3, r0
 8004c52:	461a      	mov	r2, r3
 8004c54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004c58:	4413      	add	r3, r2
 8004c5a:	495f      	ldr	r1, [pc, #380]	@ (8004dd8 <timeSet+0x728>)
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	460b      	mov	r3, r1
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	8013      	strh	r3, [r2, #0]




							//print minPrint
							LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8004c64:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	4b57      	ldr	r3, [pc, #348]	@ (8004dd0 <timeSet+0x720>)
 8004c72:	21a5      	movs	r1, #165	@ 0xa5
 8004c74:	20fa      	movs	r0, #250	@ 0xfa
 8004c76:	f001 fc0e 	bl	8006496 <LCD_Font>
		  		/*minute bottom arrow:
				262, 201
				331, 207
				287, 262
				326, 259*/
		  			 if(touchX >= 262 && touchX < 331 && touchY >= 201 && touchY < 262){
 8004c7a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c7e:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8004c82:	d366      	bcc.n	8004d52 <timeSet+0x6a2>
 8004c84:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c88:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8004c8c:	d861      	bhi.n	8004d52 <timeSet+0x6a2>
 8004c8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c92:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c94:	d95d      	bls.n	8004d52 <timeSet+0x6a2>
 8004c96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c9a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8004c9e:	d258      	bcs.n	8004d52 <timeSet+0x6a2>
		  				 	 fillRect(275, 185,50,50, ILI9488_GREEN);
 8004ca0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	2332      	movs	r3, #50	@ 0x32
 8004ca8:	2232      	movs	r2, #50	@ 0x32
 8004caa:	21b9      	movs	r1, #185	@ 0xb9
 8004cac:	f240 1013 	movw	r0, #275	@ 0x113
 8004cb0:	f000 fe1a 	bl	80058e8 <fillRect>
					  		HAL_Delay(300);
 8004cb4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004cb8:	f002 ff4c 	bl	8007b54 <HAL_Delay>
					  		fillRect(275, 185,50,50, ILI9488_RED);
 8004cbc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2332      	movs	r3, #50	@ 0x32
 8004cc4:	2232      	movs	r2, #50	@ 0x32
 8004cc6:	21b9      	movs	r1, #185	@ 0xb9
 8004cc8:	f240 1013 	movw	r0, #275	@ 0x113
 8004ccc:	f000 fe0c 	bl	80058e8 <fillRect>
							//print minPrint
					  		LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8004cd0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8004cd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	2301      	movs	r3, #1
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	4b3c      	ldr	r3, [pc, #240]	@ (8004dd0 <timeSet+0x720>)
 8004ce0:	21a5      	movs	r1, #165	@ 0xa5
 8004ce2:	20fa      	movs	r0, #250	@ 0xfa
 8004ce4:	f001 fbd7 	bl	8006496 <LCD_Font>
							if(Minute == 30){
 8004ce8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004cec:	2b1e      	cmp	r3, #30
 8004cee:	d11a      	bne.n	8004d26 <timeSet+0x676>
								Minute = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
							   //copying over minPrint
							   sprintf(minPrint, "%d", Minute);
 8004cf6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8004cfa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004cfe:	4935      	ldr	r1, [pc, #212]	@ (8004dd4 <timeSet+0x724>)
 8004d00:	4618      	mov	r0, r3
 8004d02:	f008 f871 	bl	800cde8 <siprintf>
							   strcat(minPrint, "0");
 8004d06:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fa78 	bl	8000200 <strlen>
 8004d10:	4603      	mov	r3, r0
 8004d12:	461a      	mov	r2, r3
 8004d14:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004d18:	4413      	add	r3, r2
 8004d1a:	492f      	ldr	r1, [pc, #188]	@ (8004dd8 <timeSet+0x728>)
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	460b      	mov	r3, r1
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	8013      	strh	r3, [r2, #0]
 8004d24:	e00a      	b.n	8004d3c <timeSet+0x68c>
							}
							else{
								Minute = 30;
 8004d26:	231e      	movs	r3, #30
 8004d28:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
							   //copying over minPrint
							   sprintf(minPrint, "%d", Minute);
 8004d2c:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8004d30:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004d34:	4927      	ldr	r1, [pc, #156]	@ (8004dd4 <timeSet+0x724>)
 8004d36:	4618      	mov	r0, r3
 8004d38:	f008 f856 	bl	800cde8 <siprintf>




							//print minPrint
							LCD_Font(250, 165, minPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8004d3c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8004d40:	2300      	movs	r3, #0
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	2301      	movs	r3, #1
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4b21      	ldr	r3, [pc, #132]	@ (8004dd0 <timeSet+0x720>)
 8004d4a:	21a5      	movs	r1, #165	@ 0xa5
 8004d4c:	20fa      	movs	r0, #250	@ 0xfa
 8004d4e:	f001 fba2 	bl	8006496 <LCD_Font>
		  							6, 52
									66, 55
									6, 67
									79, 67
		  								  			  		  	  		  	 */
		  						 if(touchX >= 6 && touchX < 79 && touchY >= 52 && touchY < 67){
 8004d52:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	f240 808a 	bls.w	8004e70 <timeSet+0x7c0>
 8004d5c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004d60:	2b4e      	cmp	r3, #78	@ 0x4e
 8004d62:	f200 8085 	bhi.w	8004e70 <timeSet+0x7c0>
 8004d66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d6a:	2b33      	cmp	r3, #51	@ 0x33
 8004d6c:	f240 8080 	bls.w	8004e70 <timeSet+0x7c0>
 8004d70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d74:	2b42      	cmp	r3, #66	@ 0x42
 8004d76:	d87b      	bhi.n	8004e70 <timeSet+0x7c0>
		  							 	 	 fillRect(75, 25,50,50, ILI9488_GREEN);
 8004d78:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2332      	movs	r3, #50	@ 0x32
 8004d80:	2232      	movs	r2, #50	@ 0x32
 8004d82:	2119      	movs	r1, #25
 8004d84:	204b      	movs	r0, #75	@ 0x4b
 8004d86:	f000 fdaf 	bl	80058e8 <fillRect>
		  							  		HAL_Delay(300);
 8004d8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004d8e:	f002 fee1 	bl	8007b54 <HAL_Delay>
		  							  		fillRect(75, 25,50,50, ILI9488_RED);
 8004d92:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2332      	movs	r3, #50	@ 0x32
 8004d9a:	2232      	movs	r2, #50	@ 0x32
 8004d9c:	2119      	movs	r1, #25
 8004d9e:	204b      	movs	r0, #75	@ 0x4b
 8004da0:	f000 fda2 	bl	80058e8 <fillRect>



		  									//print minPrint

		  									if(Hour == 12){
 8004da4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d117      	bne.n	8004ddc <timeSet+0x72c>
		  										Hour = 1;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8004db2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004db6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	4b03      	ldr	r3, [pc, #12]	@ (8004dd0 <timeSet+0x720>)
 8004dc2:	21a5      	movs	r1, #165	@ 0xa5
 8004dc4:	202d      	movs	r0, #45	@ 0x2d
 8004dc6:	f001 fb66 	bl	8006496 <LCD_Font>
 8004dca:	e02e      	b.n	8004e2a <timeSet+0x77a>
 8004dcc:	080145c4 	.word	0x080145c4
 8004dd0:	0801d174 	.word	0x0801d174
 8004dd4:	0800ec38 	.word	0x0800ec38
 8004dd8:	0800ec3c 	.word	0x0800ec3c
		  									}
		  									else if(Hour > 9){
 8004ddc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004de0:	2b09      	cmp	r3, #9
 8004de2:	d911      	bls.n	8004e08 <timeSet+0x758>
		  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8004de4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	2301      	movs	r3, #1
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	4b66      	ldr	r3, [pc, #408]	@ (8004f8c <timeSet+0x8dc>)
 8004df4:	21a5      	movs	r1, #165	@ 0xa5
 8004df6:	202d      	movs	r0, #45	@ 0x2d
 8004df8:	f001 fb4d 	bl	8006496 <LCD_Font>
		  										Hour++;
 8004dfc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004e00:	3301      	adds	r3, #1
 8004e02:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8004e06:	e010      	b.n	8004e2a <timeSet+0x77a>
		  									}

		  									else{
		  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8004e08:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004e0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	2301      	movs	r3, #1
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	4b5d      	ldr	r3, [pc, #372]	@ (8004f8c <timeSet+0x8dc>)
 8004e18:	21a5      	movs	r1, #165	@ 0xa5
 8004e1a:	204b      	movs	r0, #75	@ 0x4b
 8004e1c:	f001 fb3b 	bl	8006496 <LCD_Font>
		  										Hour++;
 8004e20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004e24:	3301      	adds	r3, #1
 8004e26:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		  									}



		  										sprintf(hourPrint, "%d", Hour);
 8004e2a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004e2e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004e32:	4957      	ldr	r1, [pc, #348]	@ (8004f90 <timeSet+0x8e0>)
 8004e34:	4618      	mov	r0, r3
 8004e36:	f007 ffd7 	bl	800cde8 <siprintf>




		  									//print minPrint
		  									if(Hour < 10){
 8004e3a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004e3e:	2b09      	cmp	r3, #9
 8004e40:	d80b      	bhi.n	8004e5a <timeSet+0x7aa>
		  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8004e42:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004e46:	2300      	movs	r3, #0
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f8c <timeSet+0x8dc>)
 8004e50:	21a5      	movs	r1, #165	@ 0xa5
 8004e52:	204b      	movs	r0, #75	@ 0x4b
 8004e54:	f001 fb1f 	bl	8006496 <LCD_Font>
 8004e58:	e00a      	b.n	8004e70 <timeSet+0x7c0>
		  									}
		  									else{
		  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8004e5a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	2301      	movs	r3, #1
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4b49      	ldr	r3, [pc, #292]	@ (8004f8c <timeSet+0x8dc>)
 8004e68:	21a5      	movs	r1, #165	@ 0xa5
 8004e6a:	202d      	movs	r0, #45	@ 0x2d
 8004e6c:	f001 fb13 	bl	8006496 <LCD_Font>
		  							  							75, 201
																79, 201
																75, 262
																79, 262
		  							  								  			  		  	  		  	 */
		  							  						 if(touchX >= 75 && touchX < 79 && touchY >= 201 && touchY < 262){
 8004e70:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004e74:	2b4a      	cmp	r3, #74	@ 0x4a
 8004e76:	f67f ad52 	bls.w	800491e <timeSet+0x26e>
 8004e7a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004e7e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e80:	f63f ad4d 	bhi.w	800491e <timeSet+0x26e>
 8004e84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e88:	2bc8      	cmp	r3, #200	@ 0xc8
 8004e8a:	f67f ad48 	bls.w	800491e <timeSet+0x26e>
 8004e8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e92:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8004e96:	f4bf ad42 	bcs.w	800491e <timeSet+0x26e>
		  							  							fillRect(75, 185,50,50, ILI9488_GREEN);
 8004e9a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2332      	movs	r3, #50	@ 0x32
 8004ea2:	2232      	movs	r2, #50	@ 0x32
 8004ea4:	21b9      	movs	r1, #185	@ 0xb9
 8004ea6:	204b      	movs	r0, #75	@ 0x4b
 8004ea8:	f000 fd1e 	bl	80058e8 <fillRect>
		  							  							  		HAL_Delay(300);
 8004eac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004eb0:	f002 fe50 	bl	8007b54 <HAL_Delay>
		  							  							  	fillRect(75, 185,50,50, ILI9488_RED);
 8004eb4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2332      	movs	r3, #50	@ 0x32
 8004ebc:	2232      	movs	r2, #50	@ 0x32
 8004ebe:	21b9      	movs	r1, #185	@ 0xb9
 8004ec0:	204b      	movs	r0, #75	@ 0x4b
 8004ec2:	f000 fd11 	bl	80058e8 <fillRect>



		  							  									//print minPrint

		  							  									if(Hour == 1){
 8004ec6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d10f      	bne.n	8004eee <timeSet+0x83e>
		  							  										Hour = 12;
 8004ece:	230c      	movs	r3, #12
 8004ed0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		  							  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8004ed4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004ed8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	2301      	movs	r3, #1
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f8c <timeSet+0x8dc>)
 8004ee4:	21a5      	movs	r1, #165	@ 0xa5
 8004ee6:	204b      	movs	r0, #75	@ 0x4b
 8004ee8:	f001 fad5 	bl	8006496 <LCD_Font>
 8004eec:	e026      	b.n	8004f3c <timeSet+0x88c>
		  							  									}
		  							  									else if(Hour > 9){
 8004eee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004ef2:	2b09      	cmp	r3, #9
 8004ef4:	d911      	bls.n	8004f1a <timeSet+0x86a>
		  							  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8004ef6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004efa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	2301      	movs	r3, #1
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <timeSet+0x8dc>)
 8004f06:	21a5      	movs	r1, #165	@ 0xa5
 8004f08:	202d      	movs	r0, #45	@ 0x2d
 8004f0a:	f001 fac4 	bl	8006496 <LCD_Font>
		  							  										Hour--;
 8004f0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004f12:	3b01      	subs	r3, #1
 8004f14:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8004f18:	e010      	b.n	8004f3c <timeSet+0x88c>
		  							  									}

		  							  									else{
		  							  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_WHITE);
 8004f1a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004f1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	2301      	movs	r3, #1
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4b18      	ldr	r3, [pc, #96]	@ (8004f8c <timeSet+0x8dc>)
 8004f2a:	21a5      	movs	r1, #165	@ 0xa5
 8004f2c:	204b      	movs	r0, #75	@ 0x4b
 8004f2e:	f001 fab2 	bl	8006496 <LCD_Font>
		  							  										Hour--;
 8004f32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004f36:	3b01      	subs	r3, #1
 8004f38:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		  							  									}



		  							  										sprintf(hourPrint, "%d", Hour);
 8004f3c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004f40:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004f44:	4912      	ldr	r1, [pc, #72]	@ (8004f90 <timeSet+0x8e0>)
 8004f46:	4618      	mov	r0, r3
 8004f48:	f007 ff4e 	bl	800cde8 <siprintf>




		  							  									//print minPrint
		  							  									if(Hour < 10){
 8004f4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	d80b      	bhi.n	8004f6c <timeSet+0x8bc>
		  							  										LCD_Font(75, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8004f54:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <timeSet+0x8dc>)
 8004f62:	21a5      	movs	r1, #165	@ 0xa5
 8004f64:	204b      	movs	r0, #75	@ 0x4b
 8004f66:	f001 fa96 	bl	8006496 <LCD_Font>
 8004f6a:	e4d8      	b.n	800491e <timeSet+0x26e>
		  							  									}
		  							  									else{
		  							  										LCD_Font(45, 165, hourPrint, _Open_Sans_Bold_96, 1, ILI9488_BLACK);
 8004f6c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004f70:	2300      	movs	r3, #0
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	2301      	movs	r3, #1
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4b04      	ldr	r3, [pc, #16]	@ (8004f8c <timeSet+0x8dc>)
 8004f7a:	21a5      	movs	r1, #165	@ 0xa5
 8004f7c:	202d      	movs	r0, #45	@ 0x2d
 8004f7e:	f001 fa8a 	bl	8006496 <LCD_Font>
	  {
 8004f82:	e4cc      	b.n	800491e <timeSet+0x26e>



	  }

	  }
 8004f84:	3794      	adds	r7, #148	@ 0x94
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd90      	pop	{r4, r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	0801d174 	.word	0x0801d174
 8004f90:	0800ec38 	.word	0x0800ec38

08004f94 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8004f9c:	4a04      	ldr	r2, [pc, #16]	@ (8004fb0 <DS1307_Init+0x1c>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f000 f806 	bl	8004fb4 <DS1307_SetClockHalt>
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	2000069c 	.word	0x2000069c

08004fb4 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <DS1307_SetClockHalt+0x14>
 8004fc4:	2380      	movs	r3, #128	@ 0x80
 8004fc6:	e000      	b.n	8004fca <DS1307_SetClockHalt+0x16>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f000 f83d 	bl	800504c <DS1307_GetRegByte>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	b25b      	sxtb	r3, r3
 8004fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fda:	b25a      	sxtb	r2, r3
 8004fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f000 f811 	bl	8005010 <DS1307_SetRegByte>
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	f000 f826 	bl	800504c <DS1307_GetRegByte>
 8005000:	4603      	mov	r3, r0
 8005002:	11db      	asrs	r3, r3, #7
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	b2db      	uxtb	r3, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}

08005010 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af02      	add	r7, sp, #8
 8005016:	4603      	mov	r3, r0
 8005018:	460a      	mov	r2, r1
 800501a:	71fb      	strb	r3, [r7, #7]
 800501c:	4613      	mov	r3, r2
 800501e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	733b      	strb	r3, [r7, #12]
 8005024:	79bb      	ldrb	r3, [r7, #6]
 8005026:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8005028:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <DS1307_SetRegByte+0x38>)
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	f107 020c 	add.w	r2, r7, #12
 8005030:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	2302      	movs	r3, #2
 8005038:	21d0      	movs	r1, #208	@ 0xd0
 800503a:	f003 faeb 	bl	8008614 <HAL_I2C_Master_Transmit>
}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	2000069c 	.word	0x2000069c

0800504c <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af02      	add	r7, sp, #8
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8005056:	4b0d      	ldr	r3, [pc, #52]	@ (800508c <DS1307_GetRegByte+0x40>)
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	1dfa      	adds	r2, r7, #7
 800505c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2301      	movs	r3, #1
 8005064:	21d0      	movs	r1, #208	@ 0xd0
 8005066:	f003 fad5 	bl	8008614 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800506a:	4b08      	ldr	r3, [pc, #32]	@ (800508c <DS1307_GetRegByte+0x40>)
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f107 020f 	add.w	r2, r7, #15
 8005072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	2301      	movs	r3, #1
 800507a:	21d0      	movs	r1, #208	@ 0xd0
 800507c:	f003 fbe2 	bl	8008844 <HAL_I2C_Master_Receive>
	return val;
 8005080:	7bfb      	ldrb	r3, [r7, #15]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	2000069c 	.word	0x2000069c

08005090 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8005094:	2003      	movs	r0, #3
 8005096:	f7ff ffd9 	bl	800504c <DS1307_GetRegByte>
 800509a:	4603      	mov	r3, r0
 800509c:	4618      	mov	r0, r3
 800509e:	f000 f8f7 	bl	8005290 <DS1307_DecodeBCD>
 80050a2:	4603      	mov	r3, r0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 80050ac:	2004      	movs	r0, #4
 80050ae:	f7ff ffcd 	bl	800504c <DS1307_GetRegByte>
 80050b2:	4603      	mov	r3, r0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f8eb 	bl	8005290 <DS1307_DecodeBCD>
 80050ba:	4603      	mov	r3, r0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}

080050c0 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 80050c4:	2005      	movs	r0, #5
 80050c6:	f7ff ffc1 	bl	800504c <DS1307_GetRegByte>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 f8df 	bl	8005290 <DS1307_DecodeBCD>
 80050d2:	4603      	mov	r3, r0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 80050de:	2010      	movs	r0, #16
 80050e0:	f7ff ffb4 	bl	800504c <DS1307_GetRegByte>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	0092      	lsls	r2, r2, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	461a      	mov	r2, r3
 80050ee:	0091      	lsls	r1, r2, #2
 80050f0:	461a      	mov	r2, r3
 80050f2:	460b      	mov	r3, r1
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80050fa:	2006      	movs	r0, #6
 80050fc:	f7ff ffa6 	bl	800504c <DS1307_GetRegByte>
 8005100:	4603      	mov	r3, r0
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f8c4 	bl	8005290 <DS1307_DecodeBCD>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	4413      	add	r3, r2
 8005110:	b29b      	uxth	r3, r3
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 800511a:	b580      	push	{r7, lr}
 800511c:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 800511e:	2002      	movs	r0, #2
 8005120:	f7ff ff94 	bl	800504c <DS1307_GetRegByte>
 8005124:	4603      	mov	r3, r0
 8005126:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800512a:	b2db      	uxtb	r3, r3
 800512c:	4618      	mov	r0, r3
 800512e:	f000 f8af 	bl	8005290 <DS1307_DecodeBCD>
 8005132:	4603      	mov	r3, r0
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}

08005138 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 800513c:	2001      	movs	r0, #1
 800513e:	f7ff ff85 	bl	800504c <DS1307_GetRegByte>
 8005142:	4603      	mov	r3, r0
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f8a3 	bl	8005290 <DS1307_DecodeBCD>
 800514a:	4603      	mov	r3, r0
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}

08005150 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f8b1 	bl	80052c4 <DS1307_EncodeBCD>
 8005162:	4603      	mov	r3, r0
 8005164:	4619      	mov	r1, r3
 8005166:	2003      	movs	r0, #3
 8005168:	f7ff ff52 	bl	8005010 <DS1307_SetRegByte>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 f89f 	bl	80052c4 <DS1307_EncodeBCD>
 8005186:	4603      	mov	r3, r0
 8005188:	4619      	mov	r1, r3
 800518a:	2004      	movs	r0, #4
 800518c:	f7ff ff40 	bl	8005010 <DS1307_SetRegByte>
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 f88d 	bl	80052c4 <DS1307_EncodeBCD>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4619      	mov	r1, r3
 80051ae:	2005      	movs	r0, #5
 80051b0:	f7ff ff2e 	bl	8005010 <DS1307_SetRegByte>
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	4a10      	ldr	r2, [pc, #64]	@ (800520c <DS1307_SetYear+0x50>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	4619      	mov	r1, r3
 80051d6:	2010      	movs	r0, #16
 80051d8:	f7ff ff1a 	bl	8005010 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	4a0b      	ldr	r2, [pc, #44]	@ (800520c <DS1307_SetYear+0x50>)
 80051e0:	fba2 1203 	umull	r1, r2, r2, r3
 80051e4:	0952      	lsrs	r2, r2, #5
 80051e6:	2164      	movs	r1, #100	@ 0x64
 80051e8:	fb01 f202 	mul.w	r2, r1, r2
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f866 	bl	80052c4 <DS1307_EncodeBCD>
 80051f8:	4603      	mov	r3, r0
 80051fa:	4619      	mov	r1, r3
 80051fc:	2006      	movs	r0, #6
 80051fe:	f7ff ff07 	bl	8005010 <DS1307_SetRegByte>
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	51eb851f 	.word	0x51eb851f

08005210 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005220:	b2db      	uxtb	r3, r3
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f84e 	bl	80052c4 <DS1307_EncodeBCD>
 8005228:	4603      	mov	r3, r0
 800522a:	4619      	mov	r1, r3
 800522c:	2002      	movs	r0, #2
 800522e:	f7ff feef 	bl	8005010 <DS1307_SetRegByte>
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	4603      	mov	r3, r0
 8005242:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f83c 	bl	80052c4 <DS1307_EncodeBCD>
 800524c:	4603      	mov	r3, r0
 800524e:	4619      	mov	r1, r3
 8005250:	2001      	movs	r0, #1
 8005252:	f7ff fedd 	bl	8005010 <DS1307_SetRegByte>
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	4603      	mov	r3, r0
 8005266:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8005268:	f7ff fec5 	bl	8004ff6 <DS1307_GetClockHalt>
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8005270:	79fa      	ldrb	r2, [r7, #7]
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	4313      	orrs	r3, r2
 8005276:	b2db      	uxtb	r3, r3
 8005278:	4618      	mov	r0, r3
 800527a:	f000 f823 	bl	80052c4 <DS1307_EncodeBCD>
 800527e:	4603      	mov	r3, r0
 8005280:	4619      	mov	r1, r3
 8005282:	2000      	movs	r0, #0
 8005284:	f7ff fec4 	bl	8005010 <DS1307_SetRegByte>
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	0092      	lsls	r2, r2, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	b2db      	uxtb	r3, r3
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80052ce:	79fa      	ldrb	r2, [r7, #7]
 80052d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <DS1307_EncodeBCD+0x40>)
 80052d2:	fba3 1302 	umull	r1, r3, r3, r2
 80052d6:	08d9      	lsrs	r1, r3, #3
 80052d8:	460b      	mov	r3, r1
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	4907      	ldr	r1, [pc, #28]	@ (8005304 <DS1307_EncodeBCD+0x40>)
 80052e8:	fba1 1303 	umull	r1, r3, r1, r3
 80052ec:	08db      	lsrs	r3, r3, #3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	b2db      	uxtb	r3, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	cccccccd 	.word	0xcccccccd

08005308 <fingerprint_init>:
  
 
UART_HandleTypeDef * arduino_uart;

//Sets UART Handle for our UART Stuff.
void fingerprint_init(UART_HandleTypeDef * uart_handle) {
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	arduino_uart = uart_handle;
 8005310:	4a04      	ldr	r2, [pc, #16]	@ (8005324 <fingerprint_init+0x1c>)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6013      	str	r3, [r2, #0]
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	200006a0 	.word	0x200006a0

08005328 <fingerprintAddPrint>:


int fingerprintAddPrint(){
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	uint8_t tx_buffer [1];
	tx_buffer [0] = 0x1;
 800532e:	2301      	movs	r3, #1
 8005330:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buffer [1];
	HAL_UART_Transmit(arduino_uart, tx_buffer, 1, HAL_MAX_DELAY);
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <fingerprintAddPrint+0x34>)
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	1d39      	adds	r1, r7, #4
 8005338:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800533c:	2201      	movs	r2, #1
 800533e:	f006 fde3 	bl	800bf08 <HAL_UART_Transmit>
	HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
 8005342:	4b06      	ldr	r3, [pc, #24]	@ (800535c <fingerprintAddPrint+0x34>)
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	4639      	mov	r1, r7
 8005348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800534c:	2201      	movs	r2, #1
 800534e:	f006 fe69 	bl	800c024 <HAL_UART_Receive>
	return rx_buffer[0];
 8005352:	783b      	ldrb	r3, [r7, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	200006a0 	.word	0x200006a0

08005360 <fingerprintScanPrint>:

int fingerprintScanPrint(){
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
	uint8_t tx_buffer [1];
	tx_buffer [0] = 0x2;
 8005366:	2302      	movs	r3, #2
 8005368:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buffer [1];
	HAL_UART_Transmit(arduino_uart, tx_buffer, 1, HAL_MAX_DELAY);
 800536a:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <fingerprintScanPrint+0x34>)
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	1d39      	adds	r1, r7, #4
 8005370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005374:	2201      	movs	r2, #1
 8005376:	f006 fdc7 	bl	800bf08 <HAL_UART_Transmit>
	HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
 800537a:	4b06      	ldr	r3, [pc, #24]	@ (8005394 <fingerprintScanPrint+0x34>)
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	4639      	mov	r1, r7
 8005380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005384:	2201      	movs	r2, #1
 8005386:	f006 fe4d 	bl	800c024 <HAL_UART_Receive>
	return rx_buffer[0];
 800538a:	783b      	ldrb	r3, [r7, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	200006a0 	.word	0x200006a0

08005398 <fingerprintRemovePrint>:

int fingerprintRemovePrint(){
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
	uint8_t tx_buffer [1];
	tx_buffer [0] = 0x3;
 800539e:	2303      	movs	r3, #3
 80053a0:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buffer [1];
	HAL_UART_Transmit(arduino_uart, tx_buffer, 1, HAL_MAX_DELAY);
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <fingerprintRemovePrint+0x34>)
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	1d39      	adds	r1, r7, #4
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053ac:	2201      	movs	r2, #1
 80053ae:	f006 fdab 	bl	800bf08 <HAL_UART_Transmit>
	HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
 80053b2:	4b06      	ldr	r3, [pc, #24]	@ (80053cc <fingerprintRemovePrint+0x34>)
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	4639      	mov	r1, r7
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053bc:	2201      	movs	r2, #1
 80053be:	f006 fe31 	bl	800c024 <HAL_UART_Receive>
	return rx_buffer[0];
 80053c2:	783b      	ldrb	r3, [r7, #0]

}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	200006a0 	.word	0x200006a0

080053d0 <fingerprint_UART_read>:

uint8_t fingerprint_UART_read(){
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
	uint8_t rx_buffer [1];
	HAL_UART_Receive(arduino_uart, rx_buffer, 1, HAL_MAX_DELAY);
 80053d6:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <fingerprint_UART_read+0x20>)
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	1d39      	adds	r1, r7, #4
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053e0:	2201      	movs	r2, #1
 80053e2:	f006 fe1f 	bl	800c024 <HAL_UART_Receive>
	return rx_buffer[0];
 80053e6:	793b      	ldrb	r3, [r7, #4]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	200006a0 	.word	0x200006a0

080053f4 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 8005402:	2200      	movs	r2, #0
 8005404:	2140      	movs	r1, #64	@ 0x40
 8005406:	480c      	ldr	r0, [pc, #48]	@ (8005438 <ILI9488_SendCommand+0x44>)
 8005408:	f003 f850 	bl	80084ac <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 800540c:	2200      	movs	r2, #0
 800540e:	2101      	movs	r1, #1
 8005410:	4809      	ldr	r0, [pc, #36]	@ (8005438 <ILI9488_SendCommand+0x44>)
 8005412:	f003 f84b 	bl	80084ac <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 8005416:	f107 010f 	add.w	r1, r7, #15
 800541a:	2301      	movs	r3, #1
 800541c:	2201      	movs	r2, #1
 800541e:	4807      	ldr	r0, [pc, #28]	@ (800543c <ILI9488_SendCommand+0x48>)
 8005420:	f005 fb87 	bl	800ab32 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8005424:	2201      	movs	r2, #1
 8005426:	2101      	movs	r1, #1
 8005428:	4803      	ldr	r0, [pc, #12]	@ (8005438 <ILI9488_SendCommand+0x44>)
 800542a:	f003 f83f 	bl	80084ac <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	48000c00 	.word	0x48000c00
 800543c:	200008a4 	.word	0x200008a4

08005440 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 800544e:	2201      	movs	r2, #1
 8005450:	2140      	movs	r1, #64	@ 0x40
 8005452:	480c      	ldr	r0, [pc, #48]	@ (8005484 <ILI9488_SendData+0x44>)
 8005454:	f003 f82a 	bl	80084ac <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8005458:	2200      	movs	r2, #0
 800545a:	2101      	movs	r1, #1
 800545c:	4809      	ldr	r0, [pc, #36]	@ (8005484 <ILI9488_SendData+0x44>)
 800545e:	f003 f825 	bl	80084ac <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 8005462:	f107 010f 	add.w	r1, r7, #15
 8005466:	2301      	movs	r3, #1
 8005468:	2201      	movs	r2, #1
 800546a:	4807      	ldr	r0, [pc, #28]	@ (8005488 <ILI9488_SendData+0x48>)
 800546c:	f005 fb61 	bl	800ab32 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8005470:	2201      	movs	r2, #1
 8005472:	2101      	movs	r1, #1
 8005474:	4803      	ldr	r0, [pc, #12]	@ (8005484 <ILI9488_SendData+0x44>)
 8005476:	f003 f819 	bl	80084ac <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	48000c00 	.word	0x48000c00
 8005488:	200008a4 	.word	0x200008a4

0800548c <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8005496:	2201      	movs	r2, #1
 8005498:	2140      	movs	r1, #64	@ 0x40
 800549a:	4815      	ldr	r0, [pc, #84]	@ (80054f0 <ILI9488_SendData_Multi+0x64>)
 800549c:	f003 f806 	bl	80084ac <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 80054a0:	2200      	movs	r2, #0
 80054a2:	2101      	movs	r1, #1
 80054a4:	4812      	ldr	r0, [pc, #72]	@ (80054f0 <ILI9488_SendData_Multi+0x64>)
 80054a6:	f003 f801 	bl	80084ac <HAL_GPIO_WritePin>
	while (buff_size > 0){
 80054aa:	e015      	b.n	80054d8 <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054b2:	bf28      	it	cs
 80054b4:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80054b8:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80054ba:	89fa      	ldrh	r2, [r7, #14]
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	480c      	ldr	r0, [pc, #48]	@ (80054f4 <ILI9488_SendData_Multi+0x68>)
 80054c4:	f005 fb35 	bl	800ab32 <HAL_SPI_Transmit>
		buff += chunk_size;
 80054c8:	89fb      	ldrh	r3, [r7, #14]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80054d0:	89fb      	ldrh	r3, [r7, #14]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e6      	bne.n	80054ac <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 80054de:	2201      	movs	r2, #1
 80054e0:	2101      	movs	r1, #1
 80054e2:	4803      	ldr	r0, [pc, #12]	@ (80054f0 <ILI9488_SendData_Multi+0x64>)
 80054e4:	f002 ffe2 	bl	80084ac <HAL_GPIO_WritePin>
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	48000c00 	.word	0x48000c00
 80054f4:	200008a4 	.word	0x200008a4

080054f8 <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 80054fc:	2201      	movs	r2, #1
 80054fe:	2101      	movs	r1, #1
 8005500:	486c      	ldr	r0, [pc, #432]	@ (80056b4 <ILI9488_Init+0x1bc>)
 8005502:	f002 ffd3 	bl	80084ac <HAL_GPIO_WritePin>
	RST_A();
 8005506:	2200      	movs	r2, #0
 8005508:	2180      	movs	r1, #128	@ 0x80
 800550a:	486a      	ldr	r0, [pc, #424]	@ (80056b4 <ILI9488_Init+0x1bc>)
 800550c:	f002 ffce 	bl	80084ac <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8005510:	200a      	movs	r0, #10
 8005512:	f002 fb1f 	bl	8007b54 <HAL_Delay>
		 RST_D();
 8005516:	2201      	movs	r2, #1
 8005518:	2180      	movs	r1, #128	@ 0x80
 800551a:	4866      	ldr	r0, [pc, #408]	@ (80056b4 <ILI9488_Init+0x1bc>)
 800551c:	f002 ffc6 	bl	80084ac <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 8005520:	4b65      	ldr	r3, [pc, #404]	@ (80056b8 <ILI9488_Init+0x1c0>)
 8005522:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005526:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 8005528:	4b64      	ldr	r3, [pc, #400]	@ (80056bc <ILI9488_Init+0x1c4>)
 800552a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800552e:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 8005530:	20e0      	movs	r0, #224	@ 0xe0
 8005532:	f7ff ff5f 	bl	80053f4 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 8005536:	2000      	movs	r0, #0
 8005538:	f7ff ff82 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 800553c:	2003      	movs	r0, #3
 800553e:	f7ff ff7f 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8005542:	2009      	movs	r0, #9
 8005544:	f7ff ff7c 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8005548:	2008      	movs	r0, #8
 800554a:	f7ff ff79 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800554e:	2016      	movs	r0, #22
 8005550:	f7ff ff76 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8005554:	200a      	movs	r0, #10
 8005556:	f7ff ff73 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 800555a:	203f      	movs	r0, #63	@ 0x3f
 800555c:	f7ff ff70 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8005560:	2078      	movs	r0, #120	@ 0x78
 8005562:	f7ff ff6d 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 8005566:	204c      	movs	r0, #76	@ 0x4c
 8005568:	f7ff ff6a 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 800556c:	2009      	movs	r0, #9
 800556e:	f7ff ff67 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8005572:	200a      	movs	r0, #10
 8005574:	f7ff ff64 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8005578:	2008      	movs	r0, #8
 800557a:	f7ff ff61 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800557e:	2016      	movs	r0, #22
 8005580:	f7ff ff5e 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8005584:	201a      	movs	r0, #26
 8005586:	f7ff ff5b 	bl	8005440 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 800558a:	200f      	movs	r0, #15
 800558c:	f7ff ff58 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 8005590:	20e1      	movs	r0, #225	@ 0xe1
 8005592:	f7ff ff2f 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8005596:	2000      	movs	r0, #0
 8005598:	f7ff ff52 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 800559c:	2016      	movs	r0, #22
 800559e:	f7ff ff4f 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 80055a2:	2019      	movs	r0, #25
 80055a4:	f7ff ff4c 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 80055a8:	2003      	movs	r0, #3
 80055aa:	f7ff ff49 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80055ae:	200f      	movs	r0, #15
 80055b0:	f7ff ff46 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 80055b4:	2005      	movs	r0, #5
 80055b6:	f7ff ff43 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 80055ba:	2032      	movs	r0, #50	@ 0x32
 80055bc:	f7ff ff40 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 80055c0:	2045      	movs	r0, #69	@ 0x45
 80055c2:	f7ff ff3d 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 80055c6:	2046      	movs	r0, #70	@ 0x46
 80055c8:	f7ff ff3a 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 80055cc:	2004      	movs	r0, #4
 80055ce:	f7ff ff37 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 80055d2:	200e      	movs	r0, #14
 80055d4:	f7ff ff34 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 80055d8:	200d      	movs	r0, #13
 80055da:	f7ff ff31 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 80055de:	2035      	movs	r0, #53	@ 0x35
 80055e0:	f7ff ff2e 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 80055e4:	2037      	movs	r0, #55	@ 0x37
 80055e6:	f7ff ff2b 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80055ea:	200f      	movs	r0, #15
 80055ec:	f7ff ff28 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 80055f0:	20c0      	movs	r0, #192	@ 0xc0
 80055f2:	f7ff feff 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 80055f6:	2017      	movs	r0, #23
 80055f8:	f7ff ff22 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 80055fc:	2015      	movs	r0, #21
 80055fe:	f7ff ff1f 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 8005602:	20c1      	movs	r0, #193	@ 0xc1
 8005604:	f7ff fef6 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 8005608:	2041      	movs	r0, #65	@ 0x41
 800560a:	f7ff ff19 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 800560e:	20c5      	movs	r0, #197	@ 0xc5
 8005610:	f7ff fef0 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8005614:	2000      	movs	r0, #0
 8005616:	f7ff ff13 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 800561a:	2012      	movs	r0, #18
 800561c:	f7ff ff10 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 8005620:	2080      	movs	r0, #128	@ 0x80
 8005622:	f7ff ff0d 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 8005626:	2036      	movs	r0, #54	@ 0x36
 8005628:	f7ff fee4 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 800562c:	2048      	movs	r0, #72	@ 0x48
 800562e:	f7ff ff07 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 8005632:	203a      	movs	r0, #58	@ 0x3a
 8005634:	f7ff fede 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 8005638:	2066      	movs	r0, #102	@ 0x66
 800563a:	f7ff ff01 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 800563e:	20b0      	movs	r0, #176	@ 0xb0
 8005640:	f7ff fed8 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8005644:	2080      	movs	r0, #128	@ 0x80
 8005646:	f7ff fefb 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 800564a:	20b1      	movs	r0, #177	@ 0xb1
 800564c:	f7ff fed2 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 8005650:	20a0      	movs	r0, #160	@ 0xa0
 8005652:	f7ff fef5 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 8005656:	20b4      	movs	r0, #180	@ 0xb4
 8005658:	f7ff fecc 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 800565c:	2002      	movs	r0, #2
 800565e:	f7ff feef 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8005662:	20b6      	movs	r0, #182	@ 0xb6
 8005664:	f7ff fec6 	bl	80053f4 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8005668:	2002      	movs	r0, #2
 800566a:	f7ff fee9 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 800566e:	2002      	movs	r0, #2
 8005670:	f7ff fee6 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8005674:	20e9      	movs	r0, #233	@ 0xe9
 8005676:	f7ff febd 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 800567a:	2000      	movs	r0, #0
 800567c:	f7ff fee0 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 8005680:	20f7      	movs	r0, #247	@ 0xf7
 8005682:	f7ff feb7 	bl	80053f4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 8005686:	20a9      	movs	r0, #169	@ 0xa9
 8005688:	f7ff feda 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 800568c:	2051      	movs	r0, #81	@ 0x51
 800568e:	f7ff fed7 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 8005692:	202c      	movs	r0, #44	@ 0x2c
 8005694:	f7ff fed4 	bl	8005440 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 8005698:	2082      	movs	r0, #130	@ 0x82
 800569a:	f7ff fed1 	bl	8005440 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 800569e:	2011      	movs	r0, #17
 80056a0:	f7ff fea8 	bl	80053f4 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 80056a4:	2078      	movs	r0, #120	@ 0x78
 80056a6:	f002 fa55 	bl	8007b54 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 80056aa:	2029      	movs	r0, #41	@ 0x29
 80056ac:	f7ff fea2 	bl	80053f4 <ILI9488_SendCommand>

}
 80056b0:	bf00      	nop
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	48000c00 	.word	0x48000c00
 80056b8:	200006b6 	.word	0x200006b6
 80056bc:	200006b8 	.word	0x200006b8

080056c0 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	4623      	mov	r3, r4
 80056d0:	80fb      	strh	r3, [r7, #6]
 80056d2:	4603      	mov	r3, r0
 80056d4:	80bb      	strh	r3, [r7, #4]
 80056d6:	460b      	mov	r3, r1
 80056d8:	807b      	strh	r3, [r7, #2]
 80056da:	4613      	mov	r3, r2
 80056dc:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 80056de:	202a      	movs	r0, #42	@ 0x2a
 80056e0:	f7ff fe88 	bl	80053f4 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	733b      	strb	r3, [r7, #12]
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	737b      	strb	r3, [r7, #13]
 80056f4:	887b      	ldrh	r3, [r7, #2]
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	73bb      	strb	r3, [r7, #14]
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 8005704:	f107 030c 	add.w	r3, r7, #12
 8005708:	2104      	movs	r1, #4
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff febe 	bl	800548c <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8005710:	202b      	movs	r0, #43	@ 0x2b
 8005712:	f7ff fe6f 	bl	80053f4 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 8005716:	88bb      	ldrh	r3, [r7, #4]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	b29b      	uxth	r3, r3
 800571c:	b2db      	uxtb	r3, r3
 800571e:	723b      	strb	r3, [r7, #8]
 8005720:	88bb      	ldrh	r3, [r7, #4]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	727b      	strb	r3, [r7, #9]
 8005726:	883b      	ldrh	r3, [r7, #0]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	b29b      	uxth	r3, r3
 800572c:	b2db      	uxtb	r3, r3
 800572e:	72bb      	strb	r3, [r7, #10]
 8005730:	883b      	ldrh	r3, [r7, #0]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 8005736:	f107 0308 	add.w	r3, r7, #8
 800573a:	2104      	movs	r1, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fea5 	bl	800548c <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 8005742:	202c      	movs	r0, #44	@ 0x2c
 8005744:	f7ff fe56 	bl	80053f4 <ILI9488_SendCommand>
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}

08005750 <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	80fb      	strh	r3, [r7, #6]
 800575a:	460b      	mov	r3, r1
 800575c:	80bb      	strh	r3, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8005762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005766:	2b00      	cmp	r3, #0
 8005768:	db36      	blt.n	80057d8 <drawPixel+0x88>
 800576a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800576e:	4a1c      	ldr	r2, [pc, #112]	@ (80057e0 <drawPixel+0x90>)
 8005770:	8812      	ldrh	r2, [r2, #0]
 8005772:	4293      	cmp	r3, r2
 8005774:	da30      	bge.n	80057d8 <drawPixel+0x88>
 8005776:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	db2c      	blt.n	80057d8 <drawPixel+0x88>
 800577e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005782:	4a18      	ldr	r2, [pc, #96]	@ (80057e4 <drawPixel+0x94>)
 8005784:	8812      	ldrh	r2, [r2, #0]
 8005786:	4293      	cmp	r3, r2
 8005788:	da26      	bge.n	80057d8 <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 800578a:	88f8      	ldrh	r0, [r7, #6]
 800578c:	88b9      	ldrh	r1, [r7, #4]
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	3301      	adds	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	88bb      	ldrh	r3, [r7, #4]
 8005796:	3301      	adds	r3, #1
 8005798:	b29b      	uxth	r3, r3
 800579a:	f7ff ff91 	bl	80056c0 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800579e:	4b12      	ldr	r3, [pc, #72]	@ (80057e8 <drawPixel+0x98>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a12      	ldr	r2, [pc, #72]	@ (80057ec <drawPixel+0x9c>)
 80057a4:	8811      	ldrh	r1, [r2, #0]
 80057a6:	2201      	movs	r2, #1
 80057a8:	4618      	mov	r0, r3
 80057aa:	f002 fe7f 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80057ae:	4b10      	ldr	r3, [pc, #64]	@ (80057f0 <drawPixel+0xa0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a10      	ldr	r2, [pc, #64]	@ (80057f4 <drawPixel+0xa4>)
 80057b4:	8811      	ldrh	r1, [r2, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f002 fe77 	bl	80084ac <HAL_GPIO_WritePin>

	write16BitColor(color);
 80057be:	887b      	ldrh	r3, [r7, #2]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fd5d 	bl	8006280 <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80057c6:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <drawPixel+0xa0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a0a      	ldr	r2, [pc, #40]	@ (80057f4 <drawPixel+0xa4>)
 80057cc:	8811      	ldrh	r1, [r2, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 fe6b 	bl	80084ac <HAL_GPIO_WritePin>
 80057d6:	e000      	b.n	80057da <drawPixel+0x8a>
		return;
 80057d8:	bf00      	nop

}
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	200006b6 	.word	0x200006b6
 80057e4:	200006b8 	.word	0x200006b8
 80057e8:	200006b0 	.word	0x200006b0
 80057ec:	200006b4 	.word	0x200006b4
 80057f0:	200006a8 	.word	0x200006a8
 80057f4:	200006ac 	.word	0x200006ac

080057f8 <drawPixelSize>:

void drawPixelSize(int16_t x, int16_t y, uint16_t color, uint16_t size)
{
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4604      	mov	r4, r0
 8005800:	4608      	mov	r0, r1
 8005802:	4611      	mov	r1, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4623      	mov	r3, r4
 8005808:	80fb      	strh	r3, [r7, #6]
 800580a:	4603      	mov	r3, r0
 800580c:	80bb      	strh	r3, [r7, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	807b      	strh	r3, [r7, #2]
 8005812:	4613      	mov	r3, r2
 8005814:	803b      	strh	r3, [r7, #0]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8005816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	db39      	blt.n	8005892 <drawPixelSize+0x9a>
 800581e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005822:	4a1e      	ldr	r2, [pc, #120]	@ (800589c <drawPixelSize+0xa4>)
 8005824:	8812      	ldrh	r2, [r2, #0]
 8005826:	4293      	cmp	r3, r2
 8005828:	da33      	bge.n	8005892 <drawPixelSize+0x9a>
 800582a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	db2f      	blt.n	8005892 <drawPixelSize+0x9a>
 8005832:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005836:	4a1a      	ldr	r2, [pc, #104]	@ (80058a0 <drawPixelSize+0xa8>)
 8005838:	8812      	ldrh	r2, [r2, #0]
 800583a:	4293      	cmp	r3, r2
 800583c:	da29      	bge.n	8005892 <drawPixelSize+0x9a>
		return;

	setAddrWindow(x, y, x + size, y + size);
 800583e:	88f8      	ldrh	r0, [r7, #6]
 8005840:	88b9      	ldrh	r1, [r7, #4]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	883b      	ldrh	r3, [r7, #0]
 8005846:	4413      	add	r3, r2
 8005848:	b29c      	uxth	r4, r3
 800584a:	88ba      	ldrh	r2, [r7, #4]
 800584c:	883b      	ldrh	r3, [r7, #0]
 800584e:	4413      	add	r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	4622      	mov	r2, r4
 8005854:	f7ff ff34 	bl	80056c0 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8005858:	4b12      	ldr	r3, [pc, #72]	@ (80058a4 <drawPixelSize+0xac>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a12      	ldr	r2, [pc, #72]	@ (80058a8 <drawPixelSize+0xb0>)
 800585e:	8811      	ldrh	r1, [r2, #0]
 8005860:	2201      	movs	r2, #1
 8005862:	4618      	mov	r0, r3
 8005864:	f002 fe22 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8005868:	4b10      	ldr	r3, [pc, #64]	@ (80058ac <drawPixelSize+0xb4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a10      	ldr	r2, [pc, #64]	@ (80058b0 <drawPixelSize+0xb8>)
 800586e:	8811      	ldrh	r1, [r2, #0]
 8005870:	2200      	movs	r2, #0
 8005872:	4618      	mov	r0, r3
 8005874:	f002 fe1a 	bl	80084ac <HAL_GPIO_WritePin>

	write16BitColor(color);
 8005878:	887b      	ldrh	r3, [r7, #2]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fd00 	bl	8006280 <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8005880:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <drawPixelSize+0xb4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a0a      	ldr	r2, [pc, #40]	@ (80058b0 <drawPixelSize+0xb8>)
 8005886:	8811      	ldrh	r1, [r2, #0]
 8005888:	2201      	movs	r2, #1
 800588a:	4618      	mov	r0, r3
 800588c:	f002 fe0e 	bl	80084ac <HAL_GPIO_WritePin>
 8005890:	e000      	b.n	8005894 <drawPixelSize+0x9c>
		return;
 8005892:	bf00      	nop

}
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}
 800589a:	bf00      	nop
 800589c:	200006b6 	.word	0x200006b6
 80058a0:	200006b8 	.word	0x200006b8
 80058a4:	200006b0 	.word	0x200006b0
 80058a8:	200006b4 	.word	0x200006b4
 80058ac:	200006a8 	.word	0x200006a8
 80058b0:	200006ac 	.word	0x200006ac

080058b4 <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	4603      	mov	r3, r0
 80058bc:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 80058be:	4b08      	ldr	r3, [pc, #32]	@ (80058e0 <fillScreen+0x2c>)
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b21a      	sxth	r2, r3
 80058c4:	4b07      	ldr	r3, [pc, #28]	@ (80058e4 <fillScreen+0x30>)
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b219      	sxth	r1, r3
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	460b      	mov	r3, r1
 80058d0:	2100      	movs	r1, #0
 80058d2:	2000      	movs	r0, #0
 80058d4:	f000 f808 	bl	80058e8 <fillRect>
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	200006b6 	.word	0x200006b6
 80058e4:	200006b8 	.word	0x200006b8

080058e8 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80058e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	b08a      	sub	sp, #40	@ 0x28
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	4606      	mov	r6, r0
 80058f2:	4608      	mov	r0, r1
 80058f4:	4611      	mov	r1, r2
 80058f6:	461a      	mov	r2, r3
 80058f8:	4633      	mov	r3, r6
 80058fa:	80fb      	strh	r3, [r7, #6]
 80058fc:	4603      	mov	r3, r0
 80058fe:	80bb      	strh	r3, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	807b      	strh	r3, [r7, #2]
 8005904:	4613      	mov	r3, r2
 8005906:	803b      	strh	r3, [r7, #0]
 8005908:	466b      	mov	r3, sp
 800590a:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 800590c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005910:	4a8f      	ldr	r2, [pc, #572]	@ (8005b50 <fillRect+0x268>)
 8005912:	8812      	ldrh	r2, [r2, #0]
 8005914:	4293      	cmp	r3, r2
 8005916:	da05      	bge.n	8005924 <fillRect+0x3c>
 8005918:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800591c:	4a8d      	ldr	r2, [pc, #564]	@ (8005b54 <fillRect+0x26c>)
 800591e:	8812      	ldrh	r2, [r2, #0]
 8005920:	4293      	cmp	r3, r2
 8005922:	db01      	blt.n	8005928 <fillRect+0x40>
		return;
 8005924:	46d5      	mov	sp, sl
 8005926:	e10f      	b.n	8005b48 <fillRect+0x260>
	if ((x + w - 1) >= width)
 8005928:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800592c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005930:	4413      	add	r3, r2
 8005932:	4a87      	ldr	r2, [pc, #540]	@ (8005b50 <fillRect+0x268>)
 8005934:	8812      	ldrh	r2, [r2, #0]
 8005936:	4293      	cmp	r3, r2
 8005938:	dd05      	ble.n	8005946 <fillRect+0x5e>
		w = width - x;
 800593a:	4b85      	ldr	r3, [pc, #532]	@ (8005b50 <fillRect+0x268>)
 800593c:	881a      	ldrh	r2, [r3, #0]
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 8005946:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800594a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800594e:	4413      	add	r3, r2
 8005950:	4a80      	ldr	r2, [pc, #512]	@ (8005b54 <fillRect+0x26c>)
 8005952:	8812      	ldrh	r2, [r2, #0]
 8005954:	4293      	cmp	r3, r2
 8005956:	dd05      	ble.n	8005964 <fillRect+0x7c>
		h = height - y;
 8005958:	4b7e      	ldr	r3, [pc, #504]	@ (8005b54 <fillRect+0x26c>)
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	88bb      	ldrh	r3, [r7, #4]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	b29b      	uxth	r3, r3
 8005962:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8005964:	88f8      	ldrh	r0, [r7, #6]
 8005966:	88b9      	ldrh	r1, [r7, #4]
 8005968:	88fa      	ldrh	r2, [r7, #6]
 800596a:	887b      	ldrh	r3, [r7, #2]
 800596c:	4413      	add	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29e      	uxth	r6, r3
 8005974:	88ba      	ldrh	r2, [r7, #4]
 8005976:	883b      	ldrh	r3, [r7, #0]
 8005978:	4413      	add	r3, r2
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29b      	uxth	r3, r3
 8005980:	4632      	mov	r2, r6
 8005982:	f7ff fe9d 	bl	80056c0 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 8005986:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800598a:	0adb      	lsrs	r3, r3, #11
 800598c:	b29b      	uxth	r3, r3
 800598e:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 8005990:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005994:	115b      	asrs	r3, r3, #5
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800599c:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 800599e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 80059aa:	7efa      	ldrb	r2, [r7, #27]
 80059ac:	4613      	mov	r3, r2
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	1a9b      	subs	r3, r3, r2
 80059b2:	4a69      	ldr	r2, [pc, #420]	@ (8005b58 <fillRect+0x270>)
 80059b4:	fb82 1203 	smull	r1, r2, r2, r3
 80059b8:	441a      	add	r2, r3
 80059ba:	1112      	asrs	r2, r2, #4
 80059bc:	17db      	asrs	r3, r3, #31
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 80059c2:	7eba      	ldrb	r2, [r7, #26]
 80059c4:	4613      	mov	r3, r2
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	4a64      	ldr	r2, [pc, #400]	@ (8005b5c <fillRect+0x274>)
 80059cc:	fb82 1203 	smull	r1, r2, r2, r3
 80059d0:	441a      	add	r2, r3
 80059d2:	1152      	asrs	r2, r2, #5
 80059d4:	17db      	asrs	r3, r3, #31
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 80059da:	7e7a      	ldrb	r2, [r7, #25]
 80059dc:	4613      	mov	r3, r2
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005b58 <fillRect+0x270>)
 80059e4:	fb82 1203 	smull	r1, r2, r2, r3
 80059e8:	441a      	add	r2, r3
 80059ea:	1112      	asrs	r2, r2, #4
 80059ec:	17db      	asrs	r3, r3, #31
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 80059f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80059fa:	fb03 f202 	mul.w	r2, r3, r2
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a0c:	d204      	bcs.n	8005a18 <fillRect+0x130>
		cnt = 1;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	623b      	str	r3, [r7, #32]
		buf_size = n;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	e02f      	b.n	8005a78 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4a51      	ldr	r2, [pc, #324]	@ (8005b60 <fillRect+0x278>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 8005a24:	2303      	movs	r3, #3
 8005a26:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	4a4e      	ldr	r2, [pc, #312]	@ (8005b64 <fillRect+0x27c>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	0bdb      	lsrs	r3, r3, #15
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	3301      	adds	r3, #1
 8005a36:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8005a38:	7cfb      	ldrb	r3, [r7, #19]
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3c:	e014      	b.n	8005a68 <fillRect+0x180>
			if(n%i == 0){
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a42:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a48:	fb01 f202 	mul.w	r2, r1, r2
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <fillRect+0x17a>
				cnt = i;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5e:	61fb      	str	r3, [r7, #28]
				break;
 8005a60:	e00a      	b.n	8005a78 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	3301      	adds	r3, #1
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b60 <fillRect+0x278>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d3e2      	bcc.n	8005a3e <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	2300      	movs	r3, #0
 8005a82:	4688      	mov	r8, r1
 8005a84:	4699      	mov	r9, r3
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	461d      	mov	r5, r3
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	00eb      	lsls	r3, r5, #3
 8005aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aae:	00e2      	lsls	r2, r4, #3
 8005ab0:	1dcb      	adds	r3, r1, #7
 8005ab2:	08db      	lsrs	r3, r3, #3
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	ebad 0d03 	sub.w	sp, sp, r3
 8005aba:	466b      	mov	r3, sp
 8005abc:	3300      	adds	r3, #0
 8005abe:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac4:	e019      	b.n	8005afa <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac8:	4613      	mov	r3, r2
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	4413      	add	r3, r2
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	7ef9      	ldrb	r1, [r7, #27]
 8005ad2:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	4413      	add	r3, r2
 8005adc:	3301      	adds	r3, #1
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	7eb9      	ldrb	r1, [r7, #26]
 8005ae2:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4413      	add	r3, r2
 8005aec:	3302      	adds	r3, #2
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	7e79      	ldrb	r1, [r7, #25]
 8005af2:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	3301      	adds	r3, #1
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4a18      	ldr	r2, [pc, #96]	@ (8005b60 <fillRect+0x278>)
 8005afe:	fba2 2303 	umull	r2, r3, r2, r3
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d3dd      	bcc.n	8005ac6 <fillRect+0x1de>
	}
	DC_DATA();
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	2140      	movs	r1, #64	@ 0x40
 8005b0e:	4816      	ldr	r0, [pc, #88]	@ (8005b68 <fillRect+0x280>)
 8005b10:	f002 fccc 	bl	80084ac <HAL_GPIO_WritePin>
	CS_A();
 8005b14:	2200      	movs	r2, #0
 8005b16:	2101      	movs	r1, #1
 8005b18:	4813      	ldr	r0, [pc, #76]	@ (8005b68 <fillRect+0x280>)
 8005b1a:	f002 fcc7 	bl	80084ac <HAL_GPIO_WritePin>
		while(cnt>0)
 8005b1e:	e00a      	b.n	8005b36 <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	4810      	ldr	r0, [pc, #64]	@ (8005b6c <fillRect+0x284>)
 8005b2c:	f005 f801 	bl	800ab32 <HAL_SPI_Transmit>

			cnt -= 1;
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f1      	bne.n	8005b20 <fillRect+0x238>
		}
		CS_D();
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4809      	ldr	r0, [pc, #36]	@ (8005b68 <fillRect+0x280>)
 8005b42:	f002 fcb3 	bl	80084ac <HAL_GPIO_WritePin>
 8005b46:	46d5      	mov	sp, sl

}
 8005b48:	3728      	adds	r7, #40	@ 0x28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b50:	200006b6 	.word	0x200006b6
 8005b54:	200006b8 	.word	0x200006b8
 8005b58:	84210843 	.word	0x84210843
 8005b5c:	82082083 	.word	0x82082083
 8005b60:	aaaaaaab 	.word	0xaaaaaaab
 8005b64:	80008001 	.word	0x80008001
 8005b68:	48000c00 	.word	0x48000c00
 8005b6c:	200008a4 	.word	0x200008a4

08005b70 <setRotation>:


void setRotation(uint8_t r)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 8005b7a:	2036      	movs	r0, #54	@ 0x36
 8005b7c:	f7ff fc3a 	bl	80053f4 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d83a      	bhi.n	8005c04 <setRotation+0x94>
 8005b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <setRotation+0x24>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bd5 	.word	0x08005bd5
 8005ba0:	08005bed 	.word	0x08005bed
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 8005ba4:	2048      	movs	r0, #72	@ 0x48
 8005ba6:	f7ff fc4b 	bl	8005440 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8005baa:	4b18      	ldr	r3, [pc, #96]	@ (8005c0c <setRotation+0x9c>)
 8005bac:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005bb0:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8005bb2:	4b17      	ldr	r3, [pc, #92]	@ (8005c10 <setRotation+0xa0>)
 8005bb4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005bb8:	801a      	strh	r2, [r3, #0]
		break;
 8005bba:	e023      	b.n	8005c04 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8005bbc:	2028      	movs	r0, #40	@ 0x28
 8005bbe:	f7ff fc3f 	bl	8005440 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8005bc2:	4b12      	ldr	r3, [pc, #72]	@ (8005c0c <setRotation+0x9c>)
 8005bc4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005bc8:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8005bca:	4b11      	ldr	r3, [pc, #68]	@ (8005c10 <setRotation+0xa0>)
 8005bcc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005bd0:	801a      	strh	r2, [r3, #0]
		break;
 8005bd2:	e017      	b.n	8005c04 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 8005bd4:	2088      	movs	r0, #136	@ 0x88
 8005bd6:	f7ff fc33 	bl	8005440 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8005bda:	4b0c      	ldr	r3, [pc, #48]	@ (8005c0c <setRotation+0x9c>)
 8005bdc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005be0:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8005be2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <setRotation+0xa0>)
 8005be4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005be8:	801a      	strh	r2, [r3, #0]
		break;
 8005bea:	e00b      	b.n	8005c04 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8005bec:	20e8      	movs	r0, #232	@ 0xe8
 8005bee:	f7ff fc27 	bl	8005440 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8005bf2:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <setRotation+0x9c>)
 8005bf4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005bf8:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8005bfa:	4b05      	ldr	r3, [pc, #20]	@ (8005c10 <setRotation+0xa0>)
 8005bfc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005c00:	801a      	strh	r2, [r3, #0]
		break;
 8005c02:	bf00      	nop
	}

}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200006b6 	.word	0x200006b6
 8005c10:	200006b8 	.word	0x200006b8

08005c14 <drawChar>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

//11. Text printing functions
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8005c14:	b5b0      	push	{r4, r5, r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	461a      	mov	r2, r3
 8005c22:	4623      	mov	r3, r4
 8005c24:	80fb      	strh	r3, [r7, #6]
 8005c26:	4603      	mov	r3, r0
 8005c28:	80bb      	strh	r3, [r7, #4]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	70fb      	strb	r3, [r7, #3]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8005c32:	4bac      	ldr	r3, [pc, #688]	@ (8005ee4 <drawChar+0x2d0>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d003      	beq.n	8005c42 <drawChar+0x2e>
 8005c3a:	4baa      	ldr	r3, [pc, #680]	@ (8005ee4 <drawChar+0x2d0>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d120      	bne.n	8005c84 <drawChar+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8005c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c46:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005c4a:	f280 8144 	bge.w	8005ed6 <drawChar+0x2c2>
 8005c4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005c52:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8005c56:	f280 813e 	bge.w	8005ed6 <drawChar+0x2c2>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8005c5a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005c5e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005c62:	4613      	mov	r3, r2
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	4413      	add	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f340 8132 	ble.w	8005ed6 <drawChar+0x2c2>
     ((y + 8 * size - 1) < 0))   // Clip top
 8005c72:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005c76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dc22      	bgt.n	8005cc8 <drawChar+0xb4>
    return;
 8005c82:	e128      	b.n	8005ed6 <drawChar+0x2c2>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8005c84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005c88:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005c8c:	f280 8125 	bge.w	8005eda <drawChar+0x2c6>
 8005c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c94:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8005c98:	f280 811f 	bge.w	8005eda <drawChar+0x2c6>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8005c9c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ca0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	4413      	add	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f340 8113 	ble.w	8005eda <drawChar+0x2c6>
     ((x + 8 * size - 1) < 0))   // Clip top
 8005cb4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f340 810a 	ble.w	8005eda <drawChar+0x2c6>
 8005cc6:	e000      	b.n	8005cca <drawChar+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8005cc8:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8005cca:	4b87      	ldr	r3, [pc, #540]	@ (8005ee8 <drawChar+0x2d4>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	f083 0301 	eor.w	r3, r3, #1
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <drawChar+0xd0>
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	2baf      	cmp	r3, #175	@ 0xaf
 8005cdc:	d902      	bls.n	8005ce4 <drawChar+0xd0>
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73fb      	strb	r3, [r7, #15]
 8005ce8:	e0ef      	b.n	8005eca <drawChar+0x2b6>
    uint8_t line;
    if (i == 5)
 8005cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d102      	bne.n	8005cf8 <drawChar+0xe4>
      line = 0x0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73bb      	strb	r3, [r7, #14]
 8005cf6:	e00b      	b.n	8005d10 <drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	461a      	mov	r2, r3
 8005d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d06:	4413      	add	r3, r2
 8005d08:	4a78      	ldr	r2, [pc, #480]	@ (8005eec <drawChar+0x2d8>)
 8005d0a:	4413      	add	r3, r2
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8005d10:	2300      	movs	r3, #0
 8005d12:	737b      	strb	r3, [r7, #13]
 8005d14:	e0ce      	b.n	8005eb4 <drawChar+0x2a0>
      if (line & 0x1) {
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05e      	beq.n	8005dde <drawChar+0x1ca>
        if (size == 1) // default size
 8005d20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d112      	bne.n	8005d4e <drawChar+0x13a>
        	drawPixel(x+i, y+j, color);
 8005d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	4413      	add	r3, r2
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	b218      	sxth	r0, r3
 8005d36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	88bb      	ldrh	r3, [r7, #4]
 8005d3e:	4413      	add	r3, r2
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	b21b      	sxth	r3, r3
 8005d44:	883a      	ldrh	r2, [r7, #0]
 8005d46:	4619      	mov	r1, r3
 8005d48:	f7ff fd02 	bl	8005750 <drawPixel>
 8005d4c:	e0a9      	b.n	8005ea2 <drawChar+0x28e>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8005d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	fb12 f303 	smulbb	r3, r2, r3
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	4413      	add	r3, r2
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	b218      	sxth	r0, r3
 8005d68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	fb12 f303 	smulbb	r3, r2, r3
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	88bb      	ldrh	r3, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	b21c      	sxth	r4, r3
 8005d82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d92:	b299      	uxth	r1, r3
 8005d94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	fb11 f303 	smulbb	r3, r1, r3
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	4413      	add	r3, r2
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	b21d      	sxth	r5, r3
 8005da6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	88bb      	ldrh	r3, [r7, #4]
 8005dae:	4413      	add	r3, r2
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005db6:	b299      	uxth	r1, r3
 8005db8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	fb11 f303 	smulbb	r3, r1, r3
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3301      	adds	r3, #1
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	b21a      	sxth	r2, r3
 8005dce:	883b      	ldrh	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	462a      	mov	r2, r5
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	f7ff fd86 	bl	80058e8 <fillRect>
 8005ddc:	e061      	b.n	8005ea2 <drawChar+0x28e>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }
      } else if (bg != color) {
 8005dde:	8c3a      	ldrh	r2, [r7, #32]
 8005de0:	883b      	ldrh	r3, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d05d      	beq.n	8005ea2 <drawChar+0x28e>
        if (size == 1) // default size
 8005de6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d112      	bne.n	8005e14 <drawChar+0x200>
        	drawPixel(x+i, y+j, bg);
 8005dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	4413      	add	r3, r2
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	b218      	sxth	r0, r3
 8005dfc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	88bb      	ldrh	r3, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	b21b      	sxth	r3, r3
 8005e0a:	8c3a      	ldrh	r2, [r7, #32]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	f7ff fc9f 	bl	8005750 <drawPixel>
 8005e12:	e046      	b.n	8005ea2 <drawChar+0x28e>
        else {  // big size
        	fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8005e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	fb12 f303 	smulbb	r3, r2, r3
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	4413      	add	r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	b218      	sxth	r0, r3
 8005e2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	fb12 f303 	smulbb	r3, r2, r3
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	88bb      	ldrh	r3, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	b21c      	sxth	r4, r3
 8005e48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	4413      	add	r3, r2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e58:	b299      	uxth	r1, r3
 8005e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	fb11 f303 	smulbb	r3, r1, r3
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	4413      	add	r3, r2
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	b21d      	sxth	r5, r3
 8005e6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	88bb      	ldrh	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005e7c:	b299      	uxth	r1, r3
 8005e7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	fb11 f303 	smulbb	r3, r1, r3
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	4413      	add	r3, r2
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3301      	adds	r3, #1
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	b21a      	sxth	r2, r3
 8005e94:	8c3b      	ldrh	r3, [r7, #32]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	462a      	mov	r2, r5
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	f7ff fd23 	bl	80058e8 <fillRect>
        }
      }
      line >>= 1;
 8005ea2:	7bbb      	ldrb	r3, [r7, #14]
 8005ea4:	085b      	lsrs	r3, r3, #1
 8005ea6:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8005ea8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	737b      	strb	r3, [r7, #13]
 8005eb4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005eb8:	2b07      	cmp	r3, #7
 8005eba:	f77f af2c 	ble.w	8005d16 <drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8005ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	73fb      	strb	r3, [r7, #15]
 8005eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	f77f af0b 	ble.w	8005cea <drawChar+0xd6>
 8005ed4:	e002      	b.n	8005edc <drawChar+0x2c8>
    return;
 8005ed6:	bf00      	nop
 8005ed8:	e000      	b.n	8005edc <drawChar+0x2c8>
    return;
 8005eda:	bf00      	nop
    }
  }
}
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000000 	.word	0x20000000
 8005ee8:	200006a4 	.word	0x200006a4
 8005eec:	0801d180 	.word	0x0801d180

08005ef0 <drawCharTest>:


void drawCharTest(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8005ef0:	b5b0      	push	{r4, r5, r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4623      	mov	r3, r4
 8005f00:	80fb      	strh	r3, [r7, #6]
 8005f02:	4603      	mov	r3, r0
 8005f04:	80bb      	strh	r3, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70fb      	strb	r3, [r7, #3]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8005f0e:	4bb7      	ldr	r3, [pc, #732]	@ (80061ec <drawCharTest+0x2fc>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d003      	beq.n	8005f1e <drawCharTest+0x2e>
 8005f16:	4bb5      	ldr	r3, [pc, #724]	@ (80061ec <drawCharTest+0x2fc>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d120      	bne.n	8005f60 <drawCharTest+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8005f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005f26:	f280 815a 	bge.w	80061de <drawCharTest+0x2ee>
 8005f2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f2e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8005f32:	f280 8154 	bge.w	80061de <drawCharTest+0x2ee>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8005f36:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005f3a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005f3e:	4613      	mov	r3, r2
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	4413      	add	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f340 8148 	ble.w	80061de <drawCharTest+0x2ee>
     ((y + 8 * size - 1) < 0))   // Clip top
 8005f4e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dc22      	bgt.n	8005fa4 <drawCharTest+0xb4>
    return;
 8005f5e:	e13e      	b.n	80061de <drawCharTest+0x2ee>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8005f60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f64:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005f68:	f280 813b 	bge.w	80061e2 <drawCharTest+0x2f2>
 8005f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f70:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8005f74:	f280 8135 	bge.w	80061e2 <drawCharTest+0x2f2>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8005f78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f7c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005f80:	4613      	mov	r3, r2
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	4413      	add	r3, r2
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f340 8129 	ble.w	80061e2 <drawCharTest+0x2f2>
     ((x + 8 * size - 1) < 0))   // Clip top
 8005f90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f340 8120 	ble.w	80061e2 <drawCharTest+0x2f2>
 8005fa2:	e000      	b.n	8005fa6 <drawCharTest+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8005fa4:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8005fa6:	4b92      	ldr	r3, [pc, #584]	@ (80061f0 <drawCharTest+0x300>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f083 0301 	eor.w	r3, r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <drawCharTest+0xd0>
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	2baf      	cmp	r3, #175	@ 0xaf
 8005fb8:	d902      	bls.n	8005fc0 <drawCharTest+0xd0>
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	70fb      	strb	r3, [r7, #3]

  //6
  for (int8_t i=0; i<6; i++ ) {
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	e105      	b.n	80061d2 <drawCharTest+0x2e2>
    uint8_t line;
    if (i == 5)
 8005fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	d102      	bne.n	8005fd4 <drawCharTest+0xe4>
      line = 0x0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73bb      	strb	r3, [r7, #14]
 8005fd2:	e00b      	b.n	8005fec <drawCharTest+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	4a83      	ldr	r2, [pc, #524]	@ (80061f4 <drawCharTest+0x304>)
 8005fe6:	4413      	add	r3, r2
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8005fec:	2300      	movs	r3, #0
 8005fee:	737b      	strb	r3, [r7, #13]
 8005ff0:	e0e4      	b.n	80061bc <drawCharTest+0x2cc>
      if (line & 0x1) {
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d073      	beq.n	80060e4 <drawCharTest+0x1f4>
        if (size == 1) // default size
 8005ffc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006000:	2b01      	cmp	r3, #1
 8006002:	d112      	bne.n	800602a <drawCharTest+0x13a>
        	drawPixel(x+i, y+j, color);
 8006004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006008:	b29a      	uxth	r2, r3
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	4413      	add	r3, r2
 800600e:	b29b      	uxth	r3, r3
 8006010:	b218      	sxth	r0, r3
 8006012:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006016:	b29a      	uxth	r2, r3
 8006018:	88bb      	ldrh	r3, [r7, #4]
 800601a:	4413      	add	r3, r2
 800601c:	b29b      	uxth	r3, r3
 800601e:	b21b      	sxth	r3, r3
 8006020:	883a      	ldrh	r2, [r7, #0]
 8006022:	4619      	mov	r1, r3
 8006024:	f7ff fb94 	bl	8005750 <drawPixel>
 8006028:	e047      	b.n	80060ba <drawCharTest+0x1ca>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), (size + x+(i*size))/10, (size+1 + y+(j*size))/10, color);
 800602a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800602e:	b29a      	uxth	r2, r3
 8006030:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006034:	b29b      	uxth	r3, r3
 8006036:	fb12 f303 	smulbb	r3, r2, r3
 800603a:	b29a      	uxth	r2, r3
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	4413      	add	r3, r2
 8006040:	b29b      	uxth	r3, r3
 8006042:	b218      	sxth	r0, r3
 8006044:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006048:	b29a      	uxth	r2, r3
 800604a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800604e:	b29b      	uxth	r3, r3
 8006050:	fb12 f303 	smulbb	r3, r2, r3
 8006054:	b29a      	uxth	r2, r3
 8006056:	88bb      	ldrh	r3, [r7, #4]
 8006058:	4413      	add	r3, r2
 800605a:	b29b      	uxth	r3, r3
 800605c:	b21c      	sxth	r4, r3
 800605e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8006062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006066:	441a      	add	r2, r3
 8006068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	4413      	add	r3, r2
 8006076:	4a60      	ldr	r2, [pc, #384]	@ (80061f8 <drawCharTest+0x308>)
 8006078:	fb82 1203 	smull	r1, r2, r2, r3
 800607c:	1092      	asrs	r2, r2, #2
 800607e:	17db      	asrs	r3, r3, #31
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	b21d      	sxth	r5, r3
 8006084:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800608e:	441a      	add	r2, r3
 8006090:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006094:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	4413      	add	r3, r2
 800609e:	4a56      	ldr	r2, [pc, #344]	@ (80061f8 <drawCharTest+0x308>)
 80060a0:	fb82 1203 	smull	r1, r2, r2, r3
 80060a4:	1092      	asrs	r2, r2, #2
 80060a6:	17db      	asrs	r3, r3, #31
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	b21a      	sxth	r2, r3
 80060ac:	883b      	ldrh	r3, [r7, #0]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	462a      	mov	r2, r5
 80060b4:	4621      	mov	r1, r4
 80060b6:	f7ff fc17 	bl	80058e8 <fillRect>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }

        drawPixelSize(x + i, y + i, color, size);
 80060ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	4413      	add	r3, r2
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	b218      	sxth	r0, r3
 80060c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	88bb      	ldrh	r3, [r7, #4]
 80060d0:	4413      	add	r3, r2
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	b219      	sxth	r1, r3
 80060d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80060da:	b29b      	uxth	r3, r3
 80060dc:	883a      	ldrh	r2, [r7, #0]
 80060de:	f7ff fb8b 	bl	80057f8 <drawPixelSize>
 80060e2:	e062      	b.n	80061aa <drawCharTest+0x2ba>
      } else if (bg != color) {
 80060e4:	8c3a      	ldrh	r2, [r7, #32]
 80060e6:	883b      	ldrh	r3, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d05e      	beq.n	80061aa <drawCharTest+0x2ba>
        if (size == 1) // default size
 80060ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d112      	bne.n	800611a <drawCharTest+0x22a>
        	drawPixel(x+i, y+j, bg);
 80060f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	4413      	add	r3, r2
 80060fe:	b29b      	uxth	r3, r3
 8006100:	b218      	sxth	r0, r3
 8006102:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006106:	b29a      	uxth	r2, r3
 8006108:	88bb      	ldrh	r3, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	b29b      	uxth	r3, r3
 800610e:	b21b      	sxth	r3, r3
 8006110:	8c3a      	ldrh	r2, [r7, #32]
 8006112:	4619      	mov	r1, r3
 8006114:	f7ff fb1c 	bl	8005750 <drawPixel>
 8006118:	e047      	b.n	80061aa <drawCharTest+0x2ba>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), (size + x+(i*size))/10, (size+1 + y+(j*size))/10, bg);
 800611a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800611e:	b29a      	uxth	r2, r3
 8006120:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006124:	b29b      	uxth	r3, r3
 8006126:	fb12 f303 	smulbb	r3, r2, r3
 800612a:	b29a      	uxth	r2, r3
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	4413      	add	r3, r2
 8006130:	b29b      	uxth	r3, r3
 8006132:	b218      	sxth	r0, r3
 8006134:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006138:	b29a      	uxth	r2, r3
 800613a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800613e:	b29b      	uxth	r3, r3
 8006140:	fb12 f303 	smulbb	r3, r2, r3
 8006144:	b29a      	uxth	r2, r3
 8006146:	88bb      	ldrh	r3, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	b29b      	uxth	r3, r3
 800614c:	b21c      	sxth	r4, r3
 800614e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8006152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006156:	441a      	add	r2, r3
 8006158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	4a24      	ldr	r2, [pc, #144]	@ (80061f8 <drawCharTest+0x308>)
 8006168:	fb82 1203 	smull	r1, r2, r2, r3
 800616c:	1092      	asrs	r2, r2, #2
 800616e:	17db      	asrs	r3, r3, #31
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	b21d      	sxth	r5, r3
 8006174:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800617e:	441a      	add	r2, r3
 8006180:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006184:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	4413      	add	r3, r2
 800618e:	4a1a      	ldr	r2, [pc, #104]	@ (80061f8 <drawCharTest+0x308>)
 8006190:	fb82 1203 	smull	r1, r2, r2, r3
 8006194:	1092      	asrs	r2, r2, #2
 8006196:	17db      	asrs	r3, r3, #31
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	b21a      	sxth	r2, r3
 800619c:	8c3b      	ldrh	r3, [r7, #32]
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	462a      	mov	r2, r5
 80061a4:	4621      	mov	r1, r4
 80061a6:	f7ff fb9f 	bl	80058e8 <fillRect>
        }
      }
      line >>= 1;
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80061b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	3301      	adds	r3, #1
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	737b      	strb	r3, [r7, #13]
 80061bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80061c0:	2b07      	cmp	r3, #7
 80061c2:	f77f af16 	ble.w	8005ff2 <drawCharTest+0x102>
  for (int8_t i=0; i<6; i++ ) {
 80061c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	3301      	adds	r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	73fb      	strb	r3, [r7, #15]
 80061d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d6:	2b05      	cmp	r3, #5
 80061d8:	f77f aef5 	ble.w	8005fc6 <drawCharTest+0xd6>
 80061dc:	e002      	b.n	80061e4 <drawCharTest+0x2f4>
    return;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <drawCharTest+0x2f4>
    return;
 80061e2:	bf00      	nop
    }
  }
}
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bdb0      	pop	{r4, r5, r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000000 	.word	0x20000000
 80061f0:	200006a4 	.word	0x200006a4
 80061f4:	0801d180 	.word	0x0801d180
 80061f8:	66666667 	.word	0x66666667

080061fc <ILI9488_printText>:

void ILI9488_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 80061fc:	b590      	push	{r4, r7, lr}
 80061fe:	b089      	sub	sp, #36	@ 0x24
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	461a      	mov	r2, r3
 800620a:	4603      	mov	r3, r0
 800620c:	817b      	strh	r3, [r7, #10]
 800620e:	460b      	mov	r3, r1
 8006210:	813b      	strh	r3, [r7, #8]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8006216:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800621a:	b29b      	uxth	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	0052      	lsls	r2, r2, #1
 8006220:	4413      	add	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8006228:	2300      	movs	r3, #0
 800622a:	82fb      	strh	r3, [r7, #22]
 800622c:	e01a      	b.n	8006264 <ILI9488_printText+0x68>
	{
		drawChar(x+(offset*i), y, text[i],color,bg,size);
 800622e:	8abb      	ldrh	r3, [r7, #20]
 8006230:	8afa      	ldrh	r2, [r7, #22]
 8006232:	fb12 f303 	smulbb	r3, r2, r3
 8006236:	b29a      	uxth	r2, r3
 8006238:	897b      	ldrh	r3, [r7, #10]
 800623a:	4413      	add	r3, r2
 800623c:	b29b      	uxth	r3, r3
 800623e:	b218      	sxth	r0, r3
 8006240:	8afb      	ldrh	r3, [r7, #22]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	781a      	ldrb	r2, [r3, #0]
 8006248:	88fc      	ldrh	r4, [r7, #6]
 800624a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800624e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	4623      	mov	r3, r4
 800625a:	f7ff fcdb 	bl	8005c14 <drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800625e:	8afb      	ldrh	r3, [r7, #22]
 8006260:	3301      	adds	r3, #1
 8006262:	82fb      	strh	r3, [r7, #22]
 8006264:	8afb      	ldrh	r3, [r7, #22]
 8006266:	2b27      	cmp	r3, #39	@ 0x27
 8006268:	d805      	bhi.n	8006276 <ILI9488_printText+0x7a>
 800626a:	8afb      	ldrh	r3, [r7, #22]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1db      	bne.n	800622e <ILI9488_printText+0x32>
	}
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}
	...

08006280 <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	0adb      	lsrs	r3, r3, #11
 800628e:	b29b      	uxth	r3, r3
 8006290:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8006292:	88fb      	ldrh	r3, [r7, #6]
 8006294:	115b      	asrs	r3, r3, #5
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800629c:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 80062a8:	7bfa      	ldrb	r2, [r7, #15]
 80062aa:	4613      	mov	r3, r2
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	4a17      	ldr	r2, [pc, #92]	@ (8006310 <write16BitColor+0x90>)
 80062b2:	fb82 1203 	smull	r1, r2, r2, r3
 80062b6:	441a      	add	r2, r3
 80062b8:	1112      	asrs	r2, r2, #4
 80062ba:	17db      	asrs	r3, r3, #31
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 80062c0:	7bba      	ldrb	r2, [r7, #14]
 80062c2:	4613      	mov	r3, r2
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	1a9b      	subs	r3, r3, r2
 80062c8:	4a12      	ldr	r2, [pc, #72]	@ (8006314 <write16BitColor+0x94>)
 80062ca:	fb82 1203 	smull	r1, r2, r2, r3
 80062ce:	441a      	add	r2, r3
 80062d0:	1152      	asrs	r2, r2, #5
 80062d2:	17db      	asrs	r3, r3, #31
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 80062d8:	7b7a      	ldrb	r2, [r7, #13]
 80062da:	4613      	mov	r3, r2
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	1a9b      	subs	r3, r3, r2
 80062e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006310 <write16BitColor+0x90>)
 80062e2:	fb82 1203 	smull	r1, r2, r2, r3
 80062e6:	441a      	add	r2, r3
 80062e8:	1112      	asrs	r2, r2, #4
 80062ea:	17db      	asrs	r3, r3, #31
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	723b      	strb	r3, [r7, #8]
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	727b      	strb	r3, [r7, #9]
 80062f8:	7b7b      	ldrb	r3, [r7, #13]
 80062fa:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 80062fc:	f107 0308 	add.w	r3, r7, #8
 8006300:	2103      	movs	r1, #3
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff f8c2 	bl	800548c <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	84210843 	.word	0x84210843
 8006314:	82082083 	.word	0x82082083

08006318 <LCD_Char>:

void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font,
              uint8_t size, uint32_t color24) {
 8006318:	b590      	push	{r4, r7, lr}
 800631a:	b08b      	sub	sp, #44	@ 0x2c
 800631c:	af02      	add	r7, sp, #8
 800631e:	60ba      	str	r2, [r7, #8]
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	4603      	mov	r3, r0
 8006324:	81fb      	strh	r3, [r7, #14]
 8006326:	460b      	mov	r3, r1
 8006328:	81bb      	strh	r3, [r7, #12]
  uint8_t *bitmap = font->bitmap;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	617b      	str	r3, [r7, #20]
  uint16_t bo = glyph->bitmapOffset;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	83fb      	strh	r3, [r7, #30]
  uint8_t bits = 0, bit = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	777b      	strb	r3, [r7, #29]
 800633a:	2300      	movs	r3, #0
 800633c:	773b      	strb	r3, [r7, #28]
  uint16_t set_pixels = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	837b      	strh	r3, [r7, #26]
  uint8_t cur_x, cur_y;
  for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 8006342:	2300      	movs	r3, #0
 8006344:	763b      	strb	r3, [r7, #24]
 8006346:	e09b      	b.n	8006480 <LCD_Char+0x168>
    for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 8006348:	2300      	movs	r3, #0
 800634a:	767b      	strb	r3, [r7, #25]
 800634c:	e056      	b.n	80063fc <LCD_Char+0xe4>
      if (bit == 0) {
 800634e:	7f3b      	ldrb	r3, [r7, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d109      	bne.n	8006368 <LCD_Char+0x50>
        bits = (*(const unsigned char *)(&bitmap[bo++]));
 8006354:	8bfb      	ldrh	r3, [r7, #30]
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	83fa      	strh	r2, [r7, #30]
 800635a:	461a      	mov	r2, r3
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	4413      	add	r3, r2
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	777b      	strb	r3, [r7, #29]
        bit = 0x80;
 8006364:	2380      	movs	r3, #128	@ 0x80
 8006366:	773b      	strb	r3, [r7, #28]
      }
      if (bits & bit)
 8006368:	7f7a      	ldrb	r2, [r7, #29]
 800636a:	7f3b      	ldrb	r3, [r7, #28]
 800636c:	4013      	ands	r3, r2
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <LCD_Char+0x64>
        set_pixels++;
 8006374:	8b7b      	ldrh	r3, [r7, #26]
 8006376:	3301      	adds	r3, #1
 8006378:	837b      	strh	r3, [r7, #26]
 800637a:	e039      	b.n	80063f0 <LCD_Char+0xd8>
      else if (set_pixels > 0) {
 800637c:	8b7b      	ldrh	r3, [r7, #26]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d036      	beq.n	80063f0 <LCD_Char+0xd8>
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8006388:	461a      	mov	r2, r3
 800638a:	7e7b      	ldrb	r3, [r7, #25]
 800638c:	441a      	add	r2, r3
 800638e:	8b7b      	ldrh	r3, [r7, #26]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	b29a      	uxth	r2, r3
 8006394:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006398:	b29b      	uxth	r3, r3
 800639a:	fb12 f303 	smulbb	r3, r2, r3
 800639e:	b29a      	uxth	r2, r3
 80063a0:	89fb      	ldrh	r3, [r7, #14]
 80063a2:	4413      	add	r3, r2
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	b218      	sxth	r0, r3
                 y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80063ae:	461a      	mov	r2, r3
 80063b0:	7e3b      	ldrb	r3, [r7, #24]
 80063b2:	4413      	add	r3, r2
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	fb12 f303 	smulbb	r3, r2, r3
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	89bb      	ldrh	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	b29b      	uxth	r3, r3
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 80063c8:	b219      	sxth	r1, r3
                 y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 80063ca:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	8b7a      	ldrh	r2, [r7, #26]
 80063d2:	fb12 f303 	smulbb	r3, r2, r3
 80063d6:	b29b      	uxth	r3, r3
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 80063d8:	b21a      	sxth	r2, r3
 80063da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80063de:	b21c      	sxth	r4, r3
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	4623      	mov	r3, r4
 80063e8:	f7ff fa7e 	bl	80058e8 <fillRect>
                 color24);
        set_pixels = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	837b      	strh	r3, [r7, #26]
      }
      bit >>= 1;
 80063f0:	7f3b      	ldrb	r3, [r7, #28]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	773b      	strb	r3, [r7, #28]
    for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 80063f6:	7e7b      	ldrb	r3, [r7, #25]
 80063f8:	3301      	adds	r3, #1
 80063fa:	767b      	strb	r3, [r7, #25]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	789b      	ldrb	r3, [r3, #2]
 8006400:	7e7a      	ldrb	r2, [r7, #25]
 8006402:	429a      	cmp	r2, r3
 8006404:	d3a3      	bcc.n	800634e <LCD_Char+0x36>
    }
    if (set_pixels > 0) {
 8006406:	8b7b      	ldrh	r3, [r7, #26]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d036      	beq.n	800647a <LCD_Char+0x162>
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8006412:	461a      	mov	r2, r3
 8006414:	7e7b      	ldrb	r3, [r7, #25]
 8006416:	441a      	add	r2, r3
 8006418:	8b7b      	ldrh	r3, [r7, #26]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	b29a      	uxth	r2, r3
 800641e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006422:	b29b      	uxth	r3, r3
 8006424:	fb12 f303 	smulbb	r3, r2, r3
 8006428:	b29a      	uxth	r2, r3
 800642a:	89fb      	ldrh	r3, [r7, #14]
 800642c:	4413      	add	r3, r2
 800642e:	b29b      	uxth	r3, r3
 8006430:	b218      	sxth	r0, r3
               y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006438:	461a      	mov	r2, r3
 800643a:	7e3b      	ldrb	r3, [r7, #24]
 800643c:	4413      	add	r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006444:	b29b      	uxth	r3, r3
 8006446:	fb12 f303 	smulbb	r3, r2, r3
 800644a:	b29a      	uxth	r2, r3
 800644c:	89bb      	ldrh	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	b29b      	uxth	r3, r3
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8006452:	b219      	sxth	r1, r3
               y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8006454:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006458:	b29b      	uxth	r3, r3
 800645a:	8b7a      	ldrh	r2, [r7, #26]
 800645c:	fb12 f303 	smulbb	r3, r2, r3
 8006460:	b29b      	uxth	r3, r3
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8006462:	b21a      	sxth	r2, r3
 8006464:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006468:	b21c      	sxth	r4, r3
 800646a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646c:	b29b      	uxth	r3, r3
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	4623      	mov	r3, r4
 8006472:	f7ff fa39 	bl	80058e8 <fillRect>
               color24);
      set_pixels = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	837b      	strh	r3, [r7, #26]
  for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 800647a:	7e3b      	ldrb	r3, [r7, #24]
 800647c:	3301      	adds	r3, #1
 800647e:	763b      	strb	r3, [r7, #24]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	78db      	ldrb	r3, [r3, #3]
 8006484:	7e3a      	ldrb	r2, [r7, #24]
 8006486:	429a      	cmp	r2, r3
 8006488:	f4ff af5e 	bcc.w	8006348 <LCD_Char+0x30>
    }
  }
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	3724      	adds	r7, #36	@ 0x24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd90      	pop	{r4, r7, pc}

08006496 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font,
              uint8_t size, uint32_t color24) {
 8006496:	b590      	push	{r4, r7, lr}
 8006498:	b08f      	sub	sp, #60	@ 0x3c
 800649a:	af02      	add	r7, sp, #8
 800649c:	60ba      	str	r2, [r7, #8]
 800649e:	607b      	str	r3, [r7, #4]
 80064a0:	4603      	mov	r3, r0
 80064a2:	81fb      	strh	r3, [r7, #14]
 80064a4:	460b      	mov	r3, r1
 80064a6:	81bb      	strh	r3, [r7, #12]
  int16_t cursor_x = x;
 80064a8:	89fb      	ldrh	r3, [r7, #14]
 80064aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  int16_t cursor_y = y;
 80064ac:	89bb      	ldrh	r3, [r7, #12]
 80064ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  GFXfont font;
  memcpy(&font, p_font, sizeof(GFXfont));
 80064b0:	f107 031c 	add.w	r3, r7, #28
 80064b4:	220c      	movs	r2, #12
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f006 fce9 	bl	800ce90 <memcpy>
  for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 80064be:	2300      	movs	r3, #0
 80064c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80064c2:	e056      	b.n	8006572 <LCD_Font+0xdc>
    char c = text[text_pos];
 80064c4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4413      	add	r3, r2
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if (c == '\n') {
 80064d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80064d4:	2b0a      	cmp	r3, #10
 80064d6:	d10f      	bne.n	80064f8 <LCD_Font+0x62>
      cursor_x = x;
 80064d8:	89fb      	ldrh	r3, [r7, #14]
 80064da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      cursor_y += font.yAdvance * size;
 80064dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064e0:	461a      	mov	r2, r3
 80064e2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	fb12 f303 	smulbb	r3, r2, r3
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80064f0:	4413      	add	r3, r2
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80064f6:	e039      	b.n	800656c <LCD_Font+0xd6>
    } else if (c >= font.first && c <= font.last && c != '\r') {
 80064f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064fc:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8006500:	429a      	cmp	r2, r3
 8006502:	d333      	bcc.n	800656c <LCD_Font+0xd6>
 8006504:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006508:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800650c:	429a      	cmp	r2, r3
 800650e:	d82d      	bhi.n	800656c <LCD_Font+0xd6>
 8006510:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006514:	2b0d      	cmp	r3, #13
 8006516:	d029      	beq.n	800656c <LCD_Font+0xd6>
      GFXglyph glyph;
      memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8006518:	6a3a      	ldr	r2, [r7, #32]
 800651a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800651e:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8006522:	1a5b      	subs	r3, r3, r1
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	18d1      	adds	r1, r2, r3
 8006528:	f107 0314 	add.w	r3, r7, #20
 800652c:	2208      	movs	r2, #8
 800652e:	4618      	mov	r0, r3
 8006530:	f006 fcae 	bl	800ce90 <memcpy>
      LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8006534:	f107 041c 	add.w	r4, r7, #28
 8006538:	f107 0214 	add.w	r2, r7, #20
 800653c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8006540:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8006544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	4623      	mov	r3, r4
 8006550:	f7ff fee2 	bl	8006318 <LCD_Char>
      cursor_x += glyph.xAdvance * size;
 8006554:	7e3b      	ldrb	r3, [r7, #24]
 8006556:	461a      	mov	r2, r3
 8006558:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800655c:	b29b      	uxth	r3, r3
 800655e:	fb12 f303 	smulbb	r3, r2, r3
 8006562:	b29a      	uxth	r2, r3
 8006564:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006566:	4413      	add	r3, r2
 8006568:	b29b      	uxth	r3, r3
 800656a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 800656c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800656e:	3301      	adds	r3, #1
 8006570:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006572:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8006574:	68b8      	ldr	r0, [r7, #8]
 8006576:	f7f9 fe43 	bl	8000200 <strlen>
 800657a:	4603      	mov	r3, r0
 800657c:	429c      	cmp	r4, r3
 800657e:	d3a1      	bcc.n	80064c4 <LCD_Font+0x2e>
    }
  }
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	3734      	adds	r7, #52	@ 0x34
 8006586:	46bd      	mov	sp, r7
 8006588:	bd90      	pop	{r4, r7, pc}
 800658a:	0000      	movs	r0, r0
 800658c:	0000      	movs	r0, r0
	...

08006590 <fill_LUT>:
static void MX_I2C2_Init(void);
static void MX_DAC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void fill_LUT(void)
{
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
	//creates a sine wave look up table centered at VREF/2
	double HALF_AMP = (AMP_PCENT/ 100.0) * 2047.0;//calculates a half amplitude given the desired volume
 8006596:	f04f 0000 	mov.w	r0, #0
 800659a:	4939      	ldr	r1, [pc, #228]	@ (8006680 <fill_LUT+0xf0>)
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	4b38      	ldr	r3, [pc, #224]	@ (8006684 <fill_LUT+0xf4>)
 80065a2:	f7fa f97b 	bl	800089c <__aeabi_ddiv>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	a330      	add	r3, pc, #192	@ (adr r3, 8006670 <fill_LUT+0xe0>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7fa f848 	bl	8000648 <__aeabi_dmul>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t i = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	81fb      	strh	r3, [r7, #14]
	for(; i < LUT_SIZE; ++i)
 80065c4:	e04b      	b.n	800665e <fill_LUT+0xce>
	{
		SIN_LUT[i] = (uint16_t) ( (sin( ( (double) i) * 360.0 / ((double) LUT_SIZE)  * 3.14159265/180.0) * HALF_AMP) + 2048.0);
 80065c6:	89fb      	ldrh	r3, [r7, #14]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7f9 ffc3 	bl	8000554 <__aeabi_ui2d>
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006688 <fill_LUT+0xf8>)
 80065d4:	f7fa f838 	bl	8000648 <__aeabi_dmul>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4610      	mov	r0, r2
 80065de:	4619      	mov	r1, r3
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	4b27      	ldr	r3, [pc, #156]	@ (8006684 <fill_LUT+0xf4>)
 80065e6:	f7fa f959 	bl	800089c <__aeabi_ddiv>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4610      	mov	r0, r2
 80065f0:	4619      	mov	r1, r3
 80065f2:	a321      	add	r3, pc, #132	@ (adr r3, 8006678 <fill_LUT+0xe8>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f7fa f826 	bl	8000648 <__aeabi_dmul>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	4b20      	ldr	r3, [pc, #128]	@ (800668c <fill_LUT+0xfc>)
 800660a:	f7fa f947 	bl	800089c <__aeabi_ddiv>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	ec43 2b17 	vmov	d7, r2, r3
 8006616:	eeb0 0a47 	vmov.f32	s0, s14
 800661a:	eef0 0a67 	vmov.f32	s1, s15
 800661e:	f007 f883 	bl	800d728 <sin>
 8006622:	ec51 0b10 	vmov	r0, r1, d0
 8006626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800662a:	f7fa f80d 	bl	8000648 <__aeabi_dmul>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4610      	mov	r0, r2
 8006634:	4619      	mov	r1, r3
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	4b15      	ldr	r3, [pc, #84]	@ (8006690 <fill_LUT+0x100>)
 800663c:	f7f9 fe4e 	bl	80002dc <__adddf3>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	89fc      	ldrh	r4, [r7, #14]
 8006646:	4610      	mov	r0, r2
 8006648:	4619      	mov	r1, r3
 800664a:	f7fa fabf 	bl	8000bcc <__aeabi_d2uiz>
 800664e:	4603      	mov	r3, r0
 8006650:	b29a      	uxth	r2, r3
 8006652:	4b10      	ldr	r3, [pc, #64]	@ (8006694 <fill_LUT+0x104>)
 8006654:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(; i < LUT_SIZE; ++i)
 8006658:	89fb      	ldrh	r3, [r7, #14]
 800665a:	3301      	adds	r3, #1
 800665c:	81fb      	strh	r3, [r7, #14]
 800665e:	89fb      	ldrh	r3, [r7, #14]
 8006660:	2b63      	cmp	r3, #99	@ 0x63
 8006662:	d9b0      	bls.n	80065c6 <fill_LUT+0x36>
	}
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bd90      	pop	{r4, r7, pc}
 800666e:	bf00      	nop
 8006670:	00000000 	.word	0x00000000
 8006674:	409ffc00 	.word	0x409ffc00
 8006678:	53c8d4f1 	.word	0x53c8d4f1
 800667c:	400921fb 	.word	0x400921fb
 8006680:	40518000 	.word	0x40518000
 8006684:	40590000 	.word	0x40590000
 8006688:	40768000 	.word	0x40768000
 800668c:	40668000 	.word	0x40668000
 8006690:	40a00000 	.word	0x40a00000
 8006694:	200006bc 	.word	0x200006bc

08006698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800669e:	f001 f9e4 	bl	8007a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80066a2:	f000 f899 	bl	80067d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80066a6:	f000 fb3b 	bl	8006d20 <MX_GPIO_Init>
  MX_SPI2_Init();
 80066aa:	f000 f9d9 	bl	8006a60 <MX_SPI2_Init>
  MX_SPI3_Init();
 80066ae:	f000 fa15 	bl	8006adc <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80066b2:	f000 fa9d 	bl	8006bf0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80066b6:	f000 fae7 	bl	8006c88 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80066ba:	f000 f913 	bl	80068e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80066be:	f000 f991 	bl	80069e4 <MX_SPI1_Init>
  MX_I2C2_Init();
 80066c2:	f000 f94f 	bl	8006964 <MX_I2C2_Init>
  MX_DAC1_Init();
 80066c6:	f000 f8d9 	bl	800687c <MX_DAC1_Init>
  MX_TIM2_Init();
 80066ca:	f000 fa45 	bl	8006b58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9488_Init();
 80066ce:	f7fe ff13 	bl	80054f8 <ILI9488_Init>
  XPT2046_Init();
 80066d2:	f001 f8a9 	bl	8007828 <XPT2046_Init>

  HAL_Delay(250);
 80066d6:	20fa      	movs	r0, #250	@ 0xfa
 80066d8:	f001 fa3c 	bl	8007b54 <HAL_Delay>
  setRotation(1);
 80066dc:	2001      	movs	r0, #1
 80066de:	f7ff fa47 	bl	8005b70 <setRotation>
  fillScreen(ILI9488_WHITE);
 80066e2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80066e6:	f7ff f8e5 	bl	80058b4 <fillScreen>
  DS1307_Init(&hi2c1);
 80066ea:	4830      	ldr	r0, [pc, #192]	@ (80067ac <main+0x114>)
 80066ec:	f7fe fc52 	bl	8004f94 <DS1307_Init>
  Pixy_init(&hi2c2);
 80066f0:	482f      	ldr	r0, [pc, #188]	@ (80067b0 <main+0x118>)
 80066f2:	f7fb f985 	bl	8001a00 <Pixy_init>


  MX_TIM2_Init();
 80066f6:	f000 fa2f 	bl	8006b58 <MX_TIM2_Init>

  fill_LUT();
 80066fa:	f7ff ff49 	bl	8006590 <fill_LUT>

    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x0);
 80066fe:	2300      	movs	r3, #0
 8006700:	2200      	movs	r2, #0
 8006702:	2100      	movs	r1, #0
 8006704:	482b      	ldr	r0, [pc, #172]	@ (80067b4 <main+0x11c>)
 8006706:	f001 fbce 	bl	8007ea6 <HAL_DAC_SetValue>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800670a:	2100      	movs	r1, #0
 800670c:	4829      	ldr	r0, [pc, #164]	@ (80067b4 <main+0x11c>)
 800670e:	f001 fb78 	bl	8007e02 <HAL_DAC_Start>

    HAL_TIM_Base_Start_IT(&htim2);
 8006712:	4829      	ldr	r0, [pc, #164]	@ (80067b8 <main+0x120>)
 8006714:	f004 ff60 	bl	800b5d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	DS1307_Init(&hi2c1);
 8006718:	4824      	ldr	r0, [pc, #144]	@ (80067ac <main+0x114>)
 800671a:	f7fe fc3b 	bl	8004f94 <DS1307_Init>
	xbee_init(&huart2);
 800671e:	4827      	ldr	r0, [pc, #156]	@ (80067bc <main+0x124>)
 8006720:	f000 fede 	bl	80074e0 <xbee_init>
	fingerprint_init(&huart3);
 8006724:	4826      	ldr	r0, [pc, #152]	@ (80067c0 <main+0x128>)
 8006726:	f7fe fdef 	bl	8005308 <fingerprint_init>
	/* To test leap year correction. */
	DS1307_SetDate(4);
 800672a:	2004      	movs	r0, #4
 800672c:	f7fe fd22 	bl	8005174 <DS1307_SetDate>
	DS1307_SetMonth(3);
 8006730:	2003      	movs	r0, #3
 8006732:	f7fe fd31 	bl	8005198 <DS1307_SetMonth>
	DS1307_SetYear(2024);
 8006736:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 800673a:	f7fe fd3f 	bl	80051bc <DS1307_SetYear>
	DS1307_SetDayOfWeek(2);
 800673e:	2002      	movs	r0, #2
 8006740:	f7fe fd06 	bl	8005150 <DS1307_SetDayOfWeek>
	DS1307_SetHour(22);
 8006744:	2016      	movs	r0, #22
 8006746:	f7fe fd63 	bl	8005210 <DS1307_SetHour>
	DS1307_SetMinute(13);
 800674a:	200d      	movs	r0, #13
 800674c:	f7fe fd75 	bl	800523a <DS1307_SetMinute>
	DS1307_SetSecond(30);
 8006750:	201e      	movs	r0, #30
 8006752:	f7fe fd84 	bl	800525e <DS1307_SetSecond>

	HAL_Delay(1000);
 8006756:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800675a:	f001 f9fb 	bl	8007b54 <HAL_Delay>

	//Monday at 11:00.
	addNewEntry(0, "WEEWOO2", 1, 11, 00);
 800675e:	2300      	movs	r3, #0
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	230b      	movs	r3, #11
 8006764:	2201      	movs	r2, #1
 8006766:	4917      	ldr	r1, [pc, #92]	@ (80067c4 <main+0x12c>)
 8006768:	2000      	movs	r0, #0
 800676a:	f7fa fbc7 	bl	8000efc <addNewEntry>
	//Friday at 5:30.
	addNewEntry(0, "WEEWOO3", 6, 5, 30);
 800676e:	231e      	movs	r3, #30
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	2305      	movs	r3, #5
 8006774:	2206      	movs	r2, #6
 8006776:	4914      	ldr	r1, [pc, #80]	@ (80067c8 <main+0x130>)
 8006778:	2000      	movs	r0, #0
 800677a:	f7fa fbbf 	bl	8000efc <addNewEntry>
	//Sunday at 12:00.
	addNewEntry(0, "WEEWOO1", 0, 12, 00);
 800677e:	2300      	movs	r3, #0
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	230c      	movs	r3, #12
 8006784:	2200      	movs	r2, #0
 8006786:	4911      	ldr	r1, [pc, #68]	@ (80067cc <main+0x134>)
 8006788:	2000      	movs	r0, #0
 800678a:	f7fa fbb7 	bl	8000efc <addNewEntry>

	uint8_t tx_buff [10] = {0,1,2,3,4,5,6,7,8,9};
 800678e:	4a10      	ldr	r2, [pc, #64]	@ (80067d0 <main+0x138>)
 8006790:	1d3b      	adds	r3, r7, #4
 8006792:	ca07      	ldmia	r2, {r0, r1, r2}
 8006794:	c303      	stmia	r3!, {r0, r1}
 8006796:	801a      	strh	r2, [r3, #0]
	systemInit();
 8006798:	f000 feb2 	bl	8007500 <systemInit>
//	fingerprintScanPrint();
//	HAL_Delay(1000);
//	fingerprintRemovePrint();
//	HAL_Delay(1000);
//xbeeDownloadPills();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800679c:	2201      	movs	r2, #1
 800679e:	2140      	movs	r1, #64	@ 0x40
 80067a0:	480c      	ldr	r0, [pc, #48]	@ (80067d4 <main+0x13c>)
 80067a2:	f001 fe83 	bl	80084ac <HAL_GPIO_WritePin>
//	   //changeNote(329.63);
//	   //HAL_Delay(1000);
//	   changeNote(349.23);
//	   HAL_Delay(1000);

	  LockScreen();
 80067a6:	f7fb ff7f 	bl	80026a8 <LockScreen>
 80067aa:	e7fc      	b.n	80067a6 <main+0x10e>
 80067ac:	20000798 	.word	0x20000798
 80067b0:	200007ec 	.word	0x200007ec
 80067b4:	20000784 	.word	0x20000784
 80067b8:	2000096c 	.word	0x2000096c
 80067bc:	200009b8 	.word	0x200009b8
 80067c0:	20000a4c 	.word	0x20000a4c
 80067c4:	0800ec54 	.word	0x0800ec54
 80067c8:	0800ec5c 	.word	0x0800ec5c
 80067cc:	0800ec64 	.word	0x0800ec64
 80067d0:	0800ec6c 	.word	0x0800ec6c
 80067d4:	48000800 	.word	0x48000800

080067d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b096      	sub	sp, #88	@ 0x58
 80067dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067de:	f107 0314 	add.w	r3, r7, #20
 80067e2:	2244      	movs	r2, #68	@ 0x44
 80067e4:	2100      	movs	r1, #0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f006 fb1e 	bl	800ce28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067ec:	463b      	mov	r3, r7
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	605a      	str	r2, [r3, #4]
 80067f4:	609a      	str	r2, [r3, #8]
 80067f6:	60da      	str	r2, [r3, #12]
 80067f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80067fa:	2000      	movs	r0, #0
 80067fc:	f002 fc62 	bl	80090c4 <HAL_PWREx_ControlVoltageScaling>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8006806:	f000 fb55 	bl	8006eb4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800680a:	2310      	movs	r3, #16
 800680c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800680e:	2301      	movs	r3, #1
 8006810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006816:	2360      	movs	r3, #96	@ 0x60
 8006818:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800681a:	2302      	movs	r3, #2
 800681c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800681e:	2301      	movs	r3, #1
 8006820:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006822:	2301      	movs	r3, #1
 8006824:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8006826:	233c      	movs	r3, #60	@ 0x3c
 8006828:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800682a:	2302      	movs	r3, #2
 800682c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800682e:	2302      	movs	r3, #2
 8006830:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006832:	2302      	movs	r3, #2
 8006834:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006836:	f107 0314 	add.w	r3, r7, #20
 800683a:	4618      	mov	r0, r3
 800683c:	f002 fce6 	bl	800920c <HAL_RCC_OscConfig>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8006846:	f000 fb35 	bl	8006eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800684a:	230f      	movs	r3, #15
 800684c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800684e:	2303      	movs	r3, #3
 8006850:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006852:	2300      	movs	r3, #0
 8006854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800685e:	463b      	mov	r3, r7
 8006860:	2105      	movs	r1, #5
 8006862:	4618      	mov	r0, r3
 8006864:	f003 f8ec 	bl	8009a40 <HAL_RCC_ClockConfig>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800686e:	f000 fb21 	bl	8006eb4 <Error_Handler>
  }
}
 8006872:	bf00      	nop
 8006874:	3758      	adds	r7, #88	@ 0x58
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08a      	sub	sp, #40	@ 0x28
 8006880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006882:	463b      	mov	r3, r7
 8006884:	2228      	movs	r2, #40	@ 0x28
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f006 facd 	bl	800ce28 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800688e:	4b13      	ldr	r3, [pc, #76]	@ (80068dc <MX_DAC1_Init+0x60>)
 8006890:	4a13      	ldr	r2, [pc, #76]	@ (80068e0 <MX_DAC1_Init+0x64>)
 8006892:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006894:	4811      	ldr	r0, [pc, #68]	@ (80068dc <MX_DAC1_Init+0x60>)
 8006896:	f001 fa92 	bl	8007dbe <HAL_DAC_Init>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80068a0:	f000 fb08 	bl	8006eb4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80068ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068b0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80068b6:	2300      	movs	r3, #0
 80068b8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80068be:	463b      	mov	r3, r7
 80068c0:	2200      	movs	r2, #0
 80068c2:	4619      	mov	r1, r3
 80068c4:	4805      	ldr	r0, [pc, #20]	@ (80068dc <MX_DAC1_Init+0x60>)
 80068c6:	f001 fb13 	bl	8007ef0 <HAL_DAC_ConfigChannel>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80068d0:	f000 faf0 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80068d4:	bf00      	nop
 80068d6:	3728      	adds	r7, #40	@ 0x28
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000784 	.word	0x20000784
 80068e0:	40007400 	.word	0x40007400

080068e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80068e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006958 <MX_I2C1_Init+0x74>)
 80068ea:	4a1c      	ldr	r2, [pc, #112]	@ (800695c <MX_I2C1_Init+0x78>)
 80068ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80068ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006958 <MX_I2C1_Init+0x74>)
 80068f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006960 <MX_I2C1_Init+0x7c>)
 80068f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80068f4:	4b18      	ldr	r3, [pc, #96]	@ (8006958 <MX_I2C1_Init+0x74>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80068fa:	4b17      	ldr	r3, [pc, #92]	@ (8006958 <MX_I2C1_Init+0x74>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006900:	4b15      	ldr	r3, [pc, #84]	@ (8006958 <MX_I2C1_Init+0x74>)
 8006902:	2200      	movs	r2, #0
 8006904:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006906:	4b14      	ldr	r3, [pc, #80]	@ (8006958 <MX_I2C1_Init+0x74>)
 8006908:	2200      	movs	r2, #0
 800690a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800690c:	4b12      	ldr	r3, [pc, #72]	@ (8006958 <MX_I2C1_Init+0x74>)
 800690e:	2200      	movs	r2, #0
 8006910:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006912:	4b11      	ldr	r3, [pc, #68]	@ (8006958 <MX_I2C1_Init+0x74>)
 8006914:	2200      	movs	r2, #0
 8006916:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006918:	4b0f      	ldr	r3, [pc, #60]	@ (8006958 <MX_I2C1_Init+0x74>)
 800691a:	2200      	movs	r2, #0
 800691c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800691e:	480e      	ldr	r0, [pc, #56]	@ (8006958 <MX_I2C1_Init+0x74>)
 8006920:	f001 fddc 	bl	80084dc <HAL_I2C_Init>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800692a:	f000 fac3 	bl	8006eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800692e:	2100      	movs	r1, #0
 8006930:	4809      	ldr	r0, [pc, #36]	@ (8006958 <MX_I2C1_Init+0x74>)
 8006932:	f002 fb0f 	bl	8008f54 <HAL_I2CEx_ConfigAnalogFilter>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800693c:	f000 faba 	bl	8006eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006940:	2100      	movs	r1, #0
 8006942:	4805      	ldr	r0, [pc, #20]	@ (8006958 <MX_I2C1_Init+0x74>)
 8006944:	f002 fb51 	bl	8008fea <HAL_I2CEx_ConfigDigitalFilter>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800694e:	f000 fab1 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006952:	bf00      	nop
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000798 	.word	0x20000798
 800695c:	40005400 	.word	0x40005400
 8006960:	307075b1 	.word	0x307075b1

08006964 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006968:	4b1b      	ldr	r3, [pc, #108]	@ (80069d8 <MX_I2C2_Init+0x74>)
 800696a:	4a1c      	ldr	r2, [pc, #112]	@ (80069dc <MX_I2C2_Init+0x78>)
 800696c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800696e:	4b1a      	ldr	r3, [pc, #104]	@ (80069d8 <MX_I2C2_Init+0x74>)
 8006970:	4a1b      	ldr	r2, [pc, #108]	@ (80069e0 <MX_I2C2_Init+0x7c>)
 8006972:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006974:	4b18      	ldr	r3, [pc, #96]	@ (80069d8 <MX_I2C2_Init+0x74>)
 8006976:	2200      	movs	r2, #0
 8006978:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800697a:	4b17      	ldr	r3, [pc, #92]	@ (80069d8 <MX_I2C2_Init+0x74>)
 800697c:	2201      	movs	r2, #1
 800697e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006980:	4b15      	ldr	r3, [pc, #84]	@ (80069d8 <MX_I2C2_Init+0x74>)
 8006982:	2200      	movs	r2, #0
 8006984:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006986:	4b14      	ldr	r3, [pc, #80]	@ (80069d8 <MX_I2C2_Init+0x74>)
 8006988:	2200      	movs	r2, #0
 800698a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800698c:	4b12      	ldr	r3, [pc, #72]	@ (80069d8 <MX_I2C2_Init+0x74>)
 800698e:	2200      	movs	r2, #0
 8006990:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006992:	4b11      	ldr	r3, [pc, #68]	@ (80069d8 <MX_I2C2_Init+0x74>)
 8006994:	2200      	movs	r2, #0
 8006996:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006998:	4b0f      	ldr	r3, [pc, #60]	@ (80069d8 <MX_I2C2_Init+0x74>)
 800699a:	2200      	movs	r2, #0
 800699c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800699e:	480e      	ldr	r0, [pc, #56]	@ (80069d8 <MX_I2C2_Init+0x74>)
 80069a0:	f001 fd9c 	bl	80084dc <HAL_I2C_Init>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80069aa:	f000 fa83 	bl	8006eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80069ae:	2100      	movs	r1, #0
 80069b0:	4809      	ldr	r0, [pc, #36]	@ (80069d8 <MX_I2C2_Init+0x74>)
 80069b2:	f002 facf 	bl	8008f54 <HAL_I2CEx_ConfigAnalogFilter>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80069bc:	f000 fa7a 	bl	8006eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80069c0:	2100      	movs	r1, #0
 80069c2:	4805      	ldr	r0, [pc, #20]	@ (80069d8 <MX_I2C2_Init+0x74>)
 80069c4:	f002 fb11 	bl	8008fea <HAL_I2CEx_ConfigDigitalFilter>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80069ce:	f000 fa71 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80069d2:	bf00      	nop
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	200007ec 	.word	0x200007ec
 80069dc:	40005800 	.word	0x40005800
 80069e0:	307075b1 	.word	0x307075b1

080069e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80069e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a58 <MX_SPI1_Init+0x74>)
 80069ea:	4a1c      	ldr	r2, [pc, #112]	@ (8006a5c <MX_SPI1_Init+0x78>)
 80069ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80069ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006a58 <MX_SPI1_Init+0x74>)
 80069f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80069f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80069f6:	4b18      	ldr	r3, [pc, #96]	@ (8006a58 <MX_SPI1_Init+0x74>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80069fc:	4b16      	ldr	r3, [pc, #88]	@ (8006a58 <MX_SPI1_Init+0x74>)
 80069fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a04:	4b14      	ldr	r3, [pc, #80]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006a0a:	4b13      	ldr	r3, [pc, #76]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006a10:	4b11      	ldr	r3, [pc, #68]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a18:	4b0f      	ldr	r3, [pc, #60]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a24:	4b0c      	ldr	r3, [pc, #48]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006a30:	4b09      	ldr	r3, [pc, #36]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a32:	2207      	movs	r2, #7
 8006a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006a36:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006a3c:	4b06      	ldr	r3, [pc, #24]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a3e:	2208      	movs	r2, #8
 8006a40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006a42:	4805      	ldr	r0, [pc, #20]	@ (8006a58 <MX_SPI1_Init+0x74>)
 8006a44:	f003 ffd2 	bl	800a9ec <HAL_SPI_Init>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006a4e:	f000 fa31 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006a52:	bf00      	nop
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000840 	.word	0x20000840
 8006a5c:	40013000 	.word	0x40013000

08006a60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006a64:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006a66:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad8 <MX_SPI2_Init+0x78>)
 8006a68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006a6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006a70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006a72:	4b18      	ldr	r3, [pc, #96]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006a78:	4b16      	ldr	r3, [pc, #88]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006a7a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006a7e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a80:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006a86:	4b13      	ldr	r3, [pc, #76]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006a8c:	4b11      	ldr	r3, [pc, #68]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a92:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a94:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006aac:	4b09      	ldr	r3, [pc, #36]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006aae:	2207      	movs	r2, #7
 8006ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006ab2:	4b08      	ldr	r3, [pc, #32]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006ab8:	4b06      	ldr	r3, [pc, #24]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006aba:	2208      	movs	r2, #8
 8006abc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006abe:	4805      	ldr	r0, [pc, #20]	@ (8006ad4 <MX_SPI2_Init+0x74>)
 8006ac0:	f003 ff94 	bl	800a9ec <HAL_SPI_Init>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006aca:	f000 f9f3 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006ace:	bf00      	nop
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200008a4 	.word	0x200008a4
 8006ad8:	40003800 	.word	0x40003800

08006adc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b54 <MX_SPI3_Init+0x78>)
 8006ae4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006ae8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006aec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006aee:	4b18      	ldr	r3, [pc, #96]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006af4:	4b16      	ldr	r3, [pc, #88]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006af6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006afa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006afc:	4b14      	ldr	r3, [pc, #80]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b02:	4b13      	ldr	r3, [pc, #76]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006b08:	4b11      	ldr	r3, [pc, #68]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b0e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006b10:	4b0f      	ldr	r3, [pc, #60]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b12:	2218      	movs	r2, #24
 8006b14:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b16:	4b0e      	ldr	r3, [pc, #56]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b22:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006b28:	4b09      	ldr	r3, [pc, #36]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b2a:	2207      	movs	r2, #7
 8006b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006b2e:	4b08      	ldr	r3, [pc, #32]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006b34:	4b06      	ldr	r3, [pc, #24]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b36:	2208      	movs	r2, #8
 8006b38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006b3a:	4805      	ldr	r0, [pc, #20]	@ (8006b50 <MX_SPI3_Init+0x74>)
 8006b3c:	f003 ff56 	bl	800a9ec <HAL_SPI_Init>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006b46:	f000 f9b5 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006b4a:	bf00      	nop
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000908 	.word	0x20000908
 8006b54:	40003c00 	.word	0x40003c00

08006b58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b5e:	f107 0310 	add.w	r3, r7, #16
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	605a      	str	r2, [r3, #4]
 8006b68:	609a      	str	r2, [r3, #8]
 8006b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b6c:	1d3b      	adds	r3, r7, #4
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	605a      	str	r2, [r3, #4]
 8006b74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006b76:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <MX_TIM2_Init+0x94>)
 8006b78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006b7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12;
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bec <MX_TIM2_Init+0x94>)
 8006b80:	220c      	movs	r2, #12
 8006b82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b84:	4b19      	ldr	r3, [pc, #100]	@ (8006bec <MX_TIM2_Init+0x94>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8006b8a:	4b18      	ldr	r3, [pc, #96]	@ (8006bec <MX_TIM2_Init+0x94>)
 8006b8c:	225a      	movs	r2, #90	@ 0x5a
 8006b8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b90:	4b16      	ldr	r3, [pc, #88]	@ (8006bec <MX_TIM2_Init+0x94>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b96:	4b15      	ldr	r3, [pc, #84]	@ (8006bec <MX_TIM2_Init+0x94>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006b9c:	4813      	ldr	r0, [pc, #76]	@ (8006bec <MX_TIM2_Init+0x94>)
 8006b9e:	f004 fcc3 	bl	800b528 <HAL_TIM_Base_Init>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006ba8:	f000 f984 	bl	8006eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006bb2:	f107 0310 	add.w	r3, r7, #16
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	480c      	ldr	r0, [pc, #48]	@ (8006bec <MX_TIM2_Init+0x94>)
 8006bba:	f004 fe7f 	bl	800b8bc <HAL_TIM_ConfigClockSource>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006bc4:	f000 f976 	bl	8006eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006bd0:	1d3b      	adds	r3, r7, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4805      	ldr	r0, [pc, #20]	@ (8006bec <MX_TIM2_Init+0x94>)
 8006bd6:	f005 f8a1 	bl	800bd1c <HAL_TIMEx_MasterConfigSynchronization>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006be0:	f000 f968 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006be4:	bf00      	nop
 8006be6:	3720      	adds	r7, #32
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	2000096c 	.word	0x2000096c

08006bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006bf4:	4b22      	ldr	r3, [pc, #136]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006bf6:	4a23      	ldr	r2, [pc, #140]	@ (8006c84 <MX_USART2_UART_Init+0x94>)
 8006bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006bfa:	4b21      	ldr	r3, [pc, #132]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006c02:	4b1f      	ldr	r3, [pc, #124]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006c08:	4b1d      	ldr	r3, [pc, #116]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c14:	4b1a      	ldr	r3, [pc, #104]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c16:	220c      	movs	r2, #12
 8006c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c1a:	4b19      	ldr	r3, [pc, #100]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c20:	4b17      	ldr	r3, [pc, #92]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006c26:	4b16      	ldr	r3, [pc, #88]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006c2c:	4b14      	ldr	r3, [pc, #80]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006c32:	4b13      	ldr	r3, [pc, #76]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006c38:	4811      	ldr	r0, [pc, #68]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c3a:	f005 f915 	bl	800be68 <HAL_UART_Init>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006c44:	f000 f936 	bl	8006eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c48:	2100      	movs	r1, #0
 8006c4a:	480d      	ldr	r0, [pc, #52]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c4c:	f006 f802 	bl	800cc54 <HAL_UARTEx_SetTxFifoThreshold>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006c56:	f000 f92d 	bl	8006eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	4808      	ldr	r0, [pc, #32]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c5e:	f006 f837 	bl	800ccd0 <HAL_UARTEx_SetRxFifoThreshold>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006c68:	f000 f924 	bl	8006eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006c6c:	4804      	ldr	r0, [pc, #16]	@ (8006c80 <MX_USART2_UART_Init+0x90>)
 8006c6e:	f005 ffb8 	bl	800cbe2 <HAL_UARTEx_DisableFifoMode>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006c78:	f000 f91c 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006c7c:	bf00      	nop
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	200009b8 	.word	0x200009b8
 8006c84:	40004400 	.word	0x40004400

08006c88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006c8c:	4b22      	ldr	r3, [pc, #136]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006c8e:	4a23      	ldr	r2, [pc, #140]	@ (8006d1c <MX_USART3_UART_Init+0x94>)
 8006c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006c92:	4b21      	ldr	r3, [pc, #132]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006cac:	4b1a      	ldr	r3, [pc, #104]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006cae:	220c      	movs	r2, #12
 8006cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006cb2:	4b19      	ldr	r3, [pc, #100]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006cb8:	4b17      	ldr	r3, [pc, #92]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006cbe:	4b16      	ldr	r3, [pc, #88]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006cc4:	4b14      	ldr	r3, [pc, #80]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006cca:	4b13      	ldr	r3, [pc, #76]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006cd0:	4811      	ldr	r0, [pc, #68]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006cd2:	f005 f8c9 	bl	800be68 <HAL_UART_Init>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006cdc:	f000 f8ea 	bl	8006eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	480d      	ldr	r0, [pc, #52]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006ce4:	f005 ffb6 	bl	800cc54 <HAL_UARTEx_SetTxFifoThreshold>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006cee:	f000 f8e1 	bl	8006eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4808      	ldr	r0, [pc, #32]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006cf6:	f005 ffeb 	bl	800ccd0 <HAL_UARTEx_SetRxFifoThreshold>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006d00:	f000 f8d8 	bl	8006eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006d04:	4804      	ldr	r0, [pc, #16]	@ (8006d18 <MX_USART3_UART_Init+0x90>)
 8006d06:	f005 ff6c 	bl	800cbe2 <HAL_UARTEx_DisableFifoMode>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006d10:	f000 f8d0 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006d14:	bf00      	nop
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000a4c 	.word	0x20000a4c
 8006d1c:	40004800 	.word	0x40004800

08006d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08c      	sub	sp, #48	@ 0x30
 8006d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d26:	f107 031c 	add.w	r3, r7, #28
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	609a      	str	r2, [r3, #8]
 8006d32:	60da      	str	r2, [r3, #12]
 8006d34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d36:	4b59      	ldr	r3, [pc, #356]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d3a:	4a58      	ldr	r2, [pc, #352]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d3c:	f043 0320 	orr.w	r3, r3, #32
 8006d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d42:	4b56      	ldr	r3, [pc, #344]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d4e:	4b53      	ldr	r3, [pc, #332]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d52:	4a52      	ldr	r2, [pc, #328]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d54:	f043 0304 	orr.w	r3, r3, #4
 8006d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d5a:	4b50      	ldr	r3, [pc, #320]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d66:	4b4d      	ldr	r3, [pc, #308]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d6a:	4a4c      	ldr	r2, [pc, #304]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d72:	4b4a      	ldr	r3, [pc, #296]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d7e:	4b47      	ldr	r3, [pc, #284]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d82:	4a46      	ldr	r2, [pc, #280]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d84:	f043 0310 	orr.w	r3, r3, #16
 8006d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d8a:	4b44      	ldr	r3, [pc, #272]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d8e:	f003 0310 	and.w	r3, r3, #16
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d96:	4b41      	ldr	r3, [pc, #260]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9a:	4a40      	ldr	r2, [pc, #256]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006d9c:	f043 0302 	orr.w	r3, r3, #2
 8006da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006da2:	4b3e      	ldr	r3, [pc, #248]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dae:	4b3b      	ldr	r3, [pc, #236]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006db2:	4a3a      	ldr	r2, [pc, #232]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006db4:	f043 0308 	orr.w	r3, r3, #8
 8006db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006dba:	4b38      	ldr	r3, [pc, #224]	@ (8006e9c <MX_GPIO_Init+0x17c>)
 8006dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Actuator1_IN1_Pin|Actuaor1_IN2_Pin|GPIO_PIN_9|Actuator2_IN1_Pin
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f24e 2128 	movw	r1, #57896	@ 0xe228
 8006dcc:	4834      	ldr	r0, [pc, #208]	@ (8006ea0 <MX_GPIO_Init+0x180>)
 8006dce:	f001 fb6d 	bl	80084ac <HAL_GPIO_WritePin>
                          |Actuator3_In1_Pin|Actuator_3_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stepper_Step_Pin|Stepper_Dir_Pin|GPIO_PIN_6|Actuator_1_EN_Pin, GPIO_PIN_RESET);
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f240 2143 	movw	r1, #579	@ 0x243
 8006dd8:	4832      	ldr	r0, [pc, #200]	@ (8006ea4 <MX_GPIO_Init+0x184>)
 8006dda:	f001 fb67 	bl	80084ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Actuator2_IN2_Pin|Actuator2_En_Pin|Actuator_3_In2_Pin, GPIO_PIN_RESET);
 8006dde:	2200      	movs	r2, #0
 8006de0:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 8006de4:	4830      	ldr	r0, [pc, #192]	@ (8006ea8 <MX_GPIO_Init+0x188>)
 8006de6:	f001 fb61 	bl	80084ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8006dea:	2201      	movs	r2, #1
 8006dec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006df0:	482e      	ldr	r0, [pc, #184]	@ (8006eac <MX_GPIO_Init+0x18c>)
 8006df2:	f001 fb5b 	bl	80084ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8006df6:	2200      	movs	r2, #0
 8006df8:	21c1      	movs	r1, #193	@ 0xc1
 8006dfa:	482d      	ldr	r0, [pc, #180]	@ (8006eb0 <MX_GPIO_Init+0x190>)
 8006dfc:	f001 fb56 	bl	80084ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Actuator1_IN1_Pin Actuaor1_IN2_Pin PF9 Actuator2_IN1_Pin
                           Actuator3_In1_Pin Actuator_3_EN_Pin */
  GPIO_InitStruct.Pin = Actuator1_IN1_Pin|Actuaor1_IN2_Pin|GPIO_PIN_9|Actuator2_IN1_Pin
 8006e00:	f24e 2328 	movw	r3, #57896	@ 0xe228
 8006e04:	61fb      	str	r3, [r7, #28]
                          |Actuator3_In1_Pin|Actuator_3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e06:	2301      	movs	r3, #1
 8006e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006e12:	f107 031c 	add.w	r3, r7, #28
 8006e16:	4619      	mov	r1, r3
 8006e18:	4821      	ldr	r0, [pc, #132]	@ (8006ea0 <MX_GPIO_Init+0x180>)
 8006e1a:	f001 f9b5 	bl	8008188 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper_Step_Pin Stepper_Dir_Pin PC6 Actuator_1_EN_Pin */
  GPIO_InitStruct.Pin = Stepper_Step_Pin|Stepper_Dir_Pin|GPIO_PIN_6|Actuator_1_EN_Pin;
 8006e1e:	f240 2343 	movw	r3, #579	@ 0x243
 8006e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e24:	2301      	movs	r3, #1
 8006e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e30:	f107 031c 	add.w	r3, r7, #28
 8006e34:	4619      	mov	r1, r3
 8006e36:	481b      	ldr	r0, [pc, #108]	@ (8006ea4 <MX_GPIO_Init+0x184>)
 8006e38:	f001 f9a6 	bl	8008188 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator2_IN2_Pin Actuator2_En_Pin Actuator_3_In2_Pin */
  GPIO_InitStruct.Pin = Actuator2_IN2_Pin|Actuator2_En_Pin|Actuator_3_In2_Pin;
 8006e3c:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8006e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e42:	2301      	movs	r3, #1
 8006e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e4e:	f107 031c 	add.w	r3, r7, #28
 8006e52:	4619      	mov	r1, r3
 8006e54:	4814      	ldr	r0, [pc, #80]	@ (8006ea8 <MX_GPIO_Init+0x188>)
 8006e56:	f001 f997 	bl	8008188 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8006e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e60:	2301      	movs	r3, #1
 8006e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8006e6c:	f107 031c 	add.w	r3, r7, #28
 8006e70:	4619      	mov	r1, r3
 8006e72:	480e      	ldr	r0, [pc, #56]	@ (8006eac <MX_GPIO_Init+0x18c>)
 8006e74:	f001 f988 	bl	8008188 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 8006e78:	23c1      	movs	r3, #193	@ 0xc1
 8006e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e84:	2300      	movs	r3, #0
 8006e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e88:	f107 031c 	add.w	r3, r7, #28
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4808      	ldr	r0, [pc, #32]	@ (8006eb0 <MX_GPIO_Init+0x190>)
 8006e90:	f001 f97a 	bl	8008188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006e94:	bf00      	nop
 8006e96:	3730      	adds	r7, #48	@ 0x30
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	48001400 	.word	0x48001400
 8006ea4:	48000800 	.word	0x48000800
 8006ea8:	48001000 	.word	0x48001000
 8006eac:	48000400 	.word	0x48000400
 8006eb0:	48000c00 	.word	0x48000c00

08006eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006eb8:	b672      	cpsid	i
}
 8006eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ebc:	e7fe      	b.n	8006ebc <Error_Handler+0x8>
	...

08006ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f04 <HAL_MspInit+0x44>)
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eca:	4a0e      	ldr	r2, [pc, #56]	@ (8006f04 <HAL_MspInit+0x44>)
 8006ecc:	f043 0301 	orr.w	r3, r3, #1
 8006ed0:	6613      	str	r3, [r2, #96]	@ 0x60
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <HAL_MspInit+0x44>)
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ede:	4b09      	ldr	r3, [pc, #36]	@ (8006f04 <HAL_MspInit+0x44>)
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee2:	4a08      	ldr	r2, [pc, #32]	@ (8006f04 <HAL_MspInit+0x44>)
 8006ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eea:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <HAL_MspInit+0x44>)
 8006eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40021000 	.word	0x40021000

08006f08 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	@ 0x28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f10:	f107 0314 	add.w	r3, r7, #20
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a15      	ldr	r2, [pc, #84]	@ (8006f7c <HAL_DAC_MspInit+0x74>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d124      	bne.n	8006f74 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006f2a:	4b15      	ldr	r3, [pc, #84]	@ (8006f80 <HAL_DAC_MspInit+0x78>)
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2e:	4a14      	ldr	r2, [pc, #80]	@ (8006f80 <HAL_DAC_MspInit+0x78>)
 8006f30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f36:	4b12      	ldr	r3, [pc, #72]	@ (8006f80 <HAL_DAC_MspInit+0x78>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f42:	4b0f      	ldr	r3, [pc, #60]	@ (8006f80 <HAL_DAC_MspInit+0x78>)
 8006f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f46:	4a0e      	ldr	r2, [pc, #56]	@ (8006f80 <HAL_DAC_MspInit+0x78>)
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f80 <HAL_DAC_MspInit+0x78>)
 8006f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006f5a:	2310      	movs	r3, #16
 8006f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f66:	f107 0314 	add.w	r3, r7, #20
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f70:	f001 f90a 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006f74:	bf00      	nop
 8006f76:	3728      	adds	r7, #40	@ 0x28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	40007400 	.word	0x40007400
 8006f80:	40021000 	.word	0x40021000

08006f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b0b0      	sub	sp, #192	@ 0xc0
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f8c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	60da      	str	r2, [r3, #12]
 8006f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f9c:	f107 0318 	add.w	r3, r7, #24
 8006fa0:	2294      	movs	r2, #148	@ 0x94
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f005 ff3f 	bl	800ce28 <memset>
  if(hi2c->Instance==I2C1)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a42      	ldr	r2, [pc, #264]	@ (80070b8 <HAL_I2C_MspInit+0x134>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d13c      	bne.n	800702e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006fb4:	2340      	movs	r3, #64	@ 0x40
 8006fb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fbc:	f107 0318 	add.w	r3, r7, #24
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f002 fffb 	bl	8009fbc <HAL_RCCEx_PeriphCLKConfig>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006fcc:	f7ff ff72 	bl	8006eb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 8006fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fd4:	4a39      	ldr	r2, [pc, #228]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 8006fd6:	f043 0302 	orr.w	r3, r3, #2
 8006fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fdc:	4b37      	ldr	r3, [pc, #220]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 8006fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006fe8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006fec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ff0:	2312      	movs	r3, #18
 8006ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007002:	2304      	movs	r3, #4
 8007004:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007008:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800700c:	4619      	mov	r1, r3
 800700e:	482c      	ldr	r0, [pc, #176]	@ (80070c0 <HAL_I2C_MspInit+0x13c>)
 8007010:	f001 f8ba 	bl	8008188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007014:	4b29      	ldr	r3, [pc, #164]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 8007016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007018:	4a28      	ldr	r2, [pc, #160]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 800701a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800701e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007020:	4b26      	ldr	r3, [pc, #152]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 8007022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800702c:	e03f      	b.n	80070ae <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a24      	ldr	r2, [pc, #144]	@ (80070c4 <HAL_I2C_MspInit+0x140>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d13a      	bne.n	80070ae <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007038:	2380      	movs	r3, #128	@ 0x80
 800703a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800703c:	2300      	movs	r3, #0
 800703e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007040:	f107 0318 	add.w	r3, r7, #24
 8007044:	4618      	mov	r0, r3
 8007046:	f002 ffb9 	bl	8009fbc <HAL_RCCEx_PeriphCLKConfig>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8007050:	f7ff ff30 	bl	8006eb4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007054:	4b19      	ldr	r3, [pc, #100]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 8007056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007058:	4a18      	ldr	r2, [pc, #96]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 800705a:	f043 0320 	orr.w	r3, r3, #32
 800705e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007060:	4b16      	ldr	r3, [pc, #88]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 8007062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800706c:	2303      	movs	r3, #3
 800706e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007072:	2312      	movs	r3, #18
 8007074:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007078:	2301      	movs	r3, #1
 800707a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800707e:	2303      	movs	r3, #3
 8007080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007084:	2304      	movs	r3, #4
 8007086:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800708a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800708e:	4619      	mov	r1, r3
 8007090:	480d      	ldr	r0, [pc, #52]	@ (80070c8 <HAL_I2C_MspInit+0x144>)
 8007092:	f001 f879 	bl	8008188 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007096:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 8007098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709a:	4a08      	ldr	r2, [pc, #32]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 800709c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80070a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80070a2:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <HAL_I2C_MspInit+0x138>)
 80070a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070aa:	60bb      	str	r3, [r7, #8]
 80070ac:	68bb      	ldr	r3, [r7, #8]
}
 80070ae:	bf00      	nop
 80070b0:	37c0      	adds	r7, #192	@ 0xc0
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40005400 	.word	0x40005400
 80070bc:	40021000 	.word	0x40021000
 80070c0:	48000400 	.word	0x48000400
 80070c4:	40005800 	.word	0x40005800
 80070c8:	48001400 	.word	0x48001400

080070cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08e      	sub	sp, #56	@ 0x38
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	609a      	str	r2, [r3, #8]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a45      	ldr	r2, [pc, #276]	@ (8007200 <HAL_SPI_MspInit+0x134>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d129      	bne.n	8007142 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80070ee:	4b45      	ldr	r3, [pc, #276]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 80070f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f2:	4a44      	ldr	r2, [pc, #272]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 80070f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80070f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80070fa:	4b42      	ldr	r3, [pc, #264]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 80070fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007102:	623b      	str	r3, [r7, #32]
 8007104:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007106:	4b3f      	ldr	r3, [pc, #252]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 8007108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800710a:	4a3e      	ldr	r2, [pc, #248]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 800710c:	f043 0301 	orr.w	r3, r3, #1
 8007110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007112:	4b3c      	ldr	r3, [pc, #240]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 8007114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800711e:	23e0      	movs	r3, #224	@ 0xe0
 8007120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007122:	2302      	movs	r3, #2
 8007124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007126:	2300      	movs	r3, #0
 8007128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800712a:	2303      	movs	r3, #3
 800712c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800712e:	2305      	movs	r3, #5
 8007130:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007136:	4619      	mov	r1, r3
 8007138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800713c:	f001 f824 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007140:	e05a      	b.n	80071f8 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a30      	ldr	r2, [pc, #192]	@ (8007208 <HAL_SPI_MspInit+0x13c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d128      	bne.n	800719e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800714c:	4b2d      	ldr	r3, [pc, #180]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 800714e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007150:	4a2c      	ldr	r2, [pc, #176]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 8007152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007156:	6593      	str	r3, [r2, #88]	@ 0x58
 8007158:	4b2a      	ldr	r3, [pc, #168]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 800715a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007164:	4b27      	ldr	r3, [pc, #156]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 8007166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007168:	4a26      	ldr	r2, [pc, #152]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 800716a:	f043 0308 	orr.w	r3, r3, #8
 800716e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007170:	4b24      	ldr	r3, [pc, #144]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 8007172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800717c:	231a      	movs	r3, #26
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007180:	2302      	movs	r3, #2
 8007182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007184:	2300      	movs	r3, #0
 8007186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007188:	2303      	movs	r3, #3
 800718a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800718c:	2305      	movs	r3, #5
 800718e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007194:	4619      	mov	r1, r3
 8007196:	481d      	ldr	r0, [pc, #116]	@ (800720c <HAL_SPI_MspInit+0x140>)
 8007198:	f000 fff6 	bl	8008188 <HAL_GPIO_Init>
}
 800719c:	e02c      	b.n	80071f8 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI3)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007210 <HAL_SPI_MspInit+0x144>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d127      	bne.n	80071f8 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80071a8:	4b16      	ldr	r3, [pc, #88]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 80071aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ac:	4a15      	ldr	r2, [pc, #84]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 80071ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80071b4:	4b13      	ldr	r3, [pc, #76]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 80071b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071c0:	4b10      	ldr	r3, [pc, #64]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 80071c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071c4:	4a0f      	ldr	r2, [pc, #60]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 80071c6:	f043 0302 	orr.w	r3, r3, #2
 80071ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <HAL_SPI_MspInit+0x138>)
 80071ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80071d8:	2338      	movs	r3, #56	@ 0x38
 80071da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071dc:	2302      	movs	r3, #2
 80071de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071e4:	2303      	movs	r3, #3
 80071e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80071e8:	2306      	movs	r3, #6
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071f0:	4619      	mov	r1, r3
 80071f2:	4808      	ldr	r0, [pc, #32]	@ (8007214 <HAL_SPI_MspInit+0x148>)
 80071f4:	f000 ffc8 	bl	8008188 <HAL_GPIO_Init>
}
 80071f8:	bf00      	nop
 80071fa:	3738      	adds	r7, #56	@ 0x38
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40013000 	.word	0x40013000
 8007204:	40021000 	.word	0x40021000
 8007208:	40003800 	.word	0x40003800
 800720c:	48000c00 	.word	0x48000c00
 8007210:	40003c00 	.word	0x40003c00
 8007214:	48000400 	.word	0x48000400

08007218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007228:	d113      	bne.n	8007252 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800722a:	4b0c      	ldr	r3, [pc, #48]	@ (800725c <HAL_TIM_Base_MspInit+0x44>)
 800722c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722e:	4a0b      	ldr	r2, [pc, #44]	@ (800725c <HAL_TIM_Base_MspInit+0x44>)
 8007230:	f043 0301 	orr.w	r3, r3, #1
 8007234:	6593      	str	r3, [r2, #88]	@ 0x58
 8007236:	4b09      	ldr	r3, [pc, #36]	@ (800725c <HAL_TIM_Base_MspInit+0x44>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007242:	2200      	movs	r2, #0
 8007244:	2100      	movs	r1, #0
 8007246:	201c      	movs	r0, #28
 8007248:	f000 fd83 	bl	8007d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800724c:	201c      	movs	r0, #28
 800724e:	f000 fd9c 	bl	8007d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40021000 	.word	0x40021000

08007260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b0b2      	sub	sp, #200	@ 0xc8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007268:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	609a      	str	r2, [r3, #8]
 8007274:	60da      	str	r2, [r3, #12]
 8007276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007278:	f107 0320 	add.w	r3, r7, #32
 800727c:	2294      	movs	r2, #148	@ 0x94
 800727e:	2100      	movs	r1, #0
 8007280:	4618      	mov	r0, r3
 8007282:	f005 fdd1 	bl	800ce28 <memset>
  if(huart->Instance==USART2)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a53      	ldr	r2, [pc, #332]	@ (80073d8 <HAL_UART_MspInit+0x178>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d15d      	bne.n	800734c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007290:	2302      	movs	r3, #2
 8007292:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007294:	2300      	movs	r3, #0
 8007296:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007298:	f107 0320 	add.w	r3, r7, #32
 800729c:	4618      	mov	r0, r3
 800729e:	f002 fe8d 	bl	8009fbc <HAL_RCCEx_PeriphCLKConfig>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80072a8:	f7ff fe04 	bl	8006eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80072ac:	4b4b      	ldr	r3, [pc, #300]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 80072ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b0:	4a4a      	ldr	r2, [pc, #296]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 80072b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80072b8:	4b48      	ldr	r3, [pc, #288]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 80072ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072c4:	4b45      	ldr	r3, [pc, #276]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 80072c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c8:	4a44      	ldr	r2, [pc, #272]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072d0:	4b42      	ldr	r3, [pc, #264]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 80072d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072dc:	4b3f      	ldr	r3, [pc, #252]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 80072de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072e0:	4a3e      	ldr	r2, [pc, #248]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 80072e2:	f043 0308 	orr.w	r3, r3, #8
 80072e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072e8:	4b3c      	ldr	r3, [pc, #240]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 80072ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ec:	f003 0308 	and.w	r3, r3, #8
 80072f0:	617b      	str	r3, [r7, #20]
 80072f2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072f4:	2308      	movs	r3, #8
 80072f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fa:	2302      	movs	r3, #2
 80072fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007300:	2300      	movs	r3, #0
 8007302:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007306:	2303      	movs	r3, #3
 8007308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800730c:	2307      	movs	r3, #7
 800730e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007312:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8007316:	4619      	mov	r1, r3
 8007318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800731c:	f000 ff34 	bl	8008188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007320:	2320      	movs	r3, #32
 8007322:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007326:	2302      	movs	r3, #2
 8007328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732c:	2300      	movs	r3, #0
 800732e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007332:	2303      	movs	r3, #3
 8007334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007338:	2307      	movs	r3, #7
 800733a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800733e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8007342:	4619      	mov	r1, r3
 8007344:	4826      	ldr	r0, [pc, #152]	@ (80073e0 <HAL_UART_MspInit+0x180>)
 8007346:	f000 ff1f 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800734a:	e040      	b.n	80073ce <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a24      	ldr	r2, [pc, #144]	@ (80073e4 <HAL_UART_MspInit+0x184>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d13b      	bne.n	80073ce <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007356:	2304      	movs	r3, #4
 8007358:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800735a:	2300      	movs	r3, #0
 800735c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800735e:	f107 0320 	add.w	r3, r7, #32
 8007362:	4618      	mov	r0, r3
 8007364:	f002 fe2a 	bl	8009fbc <HAL_RCCEx_PeriphCLKConfig>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_UART_MspInit+0x112>
      Error_Handler();
 800736e:	f7ff fda1 	bl	8006eb4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007372:	4b1a      	ldr	r3, [pc, #104]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 8007374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007376:	4a19      	ldr	r2, [pc, #100]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 8007378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800737c:	6593      	str	r3, [r2, #88]	@ 0x58
 800737e:	4b17      	ldr	r3, [pc, #92]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 8007380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800738a:	4b14      	ldr	r3, [pc, #80]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 800738c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738e:	4a13      	ldr	r2, [pc, #76]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 8007390:	f043 0308 	orr.w	r3, r3, #8
 8007394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007396:	4b11      	ldr	r3, [pc, #68]	@ (80073dc <HAL_UART_MspInit+0x17c>)
 8007398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80073a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80073a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073aa:	2302      	movs	r3, #2
 80073ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b6:	2303      	movs	r3, #3
 80073b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80073bc:	2307      	movs	r3, #7
 80073be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073c2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80073c6:	4619      	mov	r1, r3
 80073c8:	4805      	ldr	r0, [pc, #20]	@ (80073e0 <HAL_UART_MspInit+0x180>)
 80073ca:	f000 fedd 	bl	8008188 <HAL_GPIO_Init>
}
 80073ce:	bf00      	nop
 80073d0:	37c8      	adds	r7, #200	@ 0xc8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	40004400 	.word	0x40004400
 80073dc:	40021000 	.word	0x40021000
 80073e0:	48000c00 	.word	0x48000c00
 80073e4:	40004800 	.word	0x40004800

080073e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80073ec:	e7fe      	b.n	80073ec <NMI_Handler+0x4>

080073ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073ee:	b480      	push	{r7}
 80073f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073f2:	e7fe      	b.n	80073f2 <HardFault_Handler+0x4>

080073f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073f8:	e7fe      	b.n	80073f8 <MemManage_Handler+0x4>

080073fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073fa:	b480      	push	{r7}
 80073fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073fe:	e7fe      	b.n	80073fe <BusFault_Handler+0x4>

08007400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007404:	e7fe      	b.n	8007404 <UsageFault_Handler+0x4>

08007406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007406:	b480      	push	{r7}
 8007408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800740a:	bf00      	nop
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007418:	bf00      	nop
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007422:	b480      	push	{r7}
 8007424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007426:	bf00      	nop
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007434:	f000 fb6e 	bl	8007b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007438:	bf00      	nop
 800743a:	bd80      	pop	{r7, pc}

0800743c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007440:	4802      	ldr	r0, [pc, #8]	@ (800744c <TIM2_IRQHandler+0x10>)
 8007442:	f004 f939 	bl	800b6b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007446:	bf00      	nop
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	2000096c 	.word	0x2000096c

08007450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007458:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <_sbrk+0x5c>)
 800745a:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <_sbrk+0x60>)
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007464:	4b13      	ldr	r3, [pc, #76]	@ (80074b4 <_sbrk+0x64>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800746c:	4b11      	ldr	r3, [pc, #68]	@ (80074b4 <_sbrk+0x64>)
 800746e:	4a12      	ldr	r2, [pc, #72]	@ (80074b8 <_sbrk+0x68>)
 8007470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007472:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <_sbrk+0x64>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d207      	bcs.n	8007490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007480:	f005 fcda 	bl	800ce38 <__errno>
 8007484:	4603      	mov	r3, r0
 8007486:	220c      	movs	r2, #12
 8007488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800748a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800748e:	e009      	b.n	80074a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007490:	4b08      	ldr	r3, [pc, #32]	@ (80074b4 <_sbrk+0x64>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007496:	4b07      	ldr	r3, [pc, #28]	@ (80074b4 <_sbrk+0x64>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4413      	add	r3, r2
 800749e:	4a05      	ldr	r2, [pc, #20]	@ (80074b4 <_sbrk+0x64>)
 80074a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	200a0000 	.word	0x200a0000
 80074b0:	00000400 	.word	0x00000400
 80074b4:	20000ae0 	.word	0x20000ae0
 80074b8:	20000c38 	.word	0x20000c38

080074bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80074c0:	4b06      	ldr	r3, [pc, #24]	@ (80074dc <SystemInit+0x20>)
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c6:	4a05      	ldr	r2, [pc, #20]	@ (80074dc <SystemInit+0x20>)
 80074c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80074cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80074d0:	bf00      	nop
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	e000ed00 	.word	0xe000ed00

080074e0 <xbee_init>:


UART_HandleTypeDef * xbee_uart;

//Sets UART Handle for our UART Stuff.
void xbee_init(UART_HandleTypeDef * uart_handle) {
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
	xbee_uart = uart_handle;
 80074e8:	4a04      	ldr	r2, [pc, #16]	@ (80074fc <xbee_init+0x1c>)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6013      	str	r3, [r2, #0]
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20000ae4 	.word	0x20000ae4

08007500 <systemInit>:

//Initial Setup w/ server. Sets correct time, receives existing pill data and configuration information from server.
void systemInit(){
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
	 xbeeGetHour();
 8007504:	f000 f810 	bl	8007528 <xbeeGetHour>
	 xbeeGetMin();
 8007508:	f000 f832 	bl	8007570 <xbeeGetMin>
	 xbeeGetYear();
 800750c:	f000 f84e 	bl	80075ac <xbeeGetYear>
	 xbeeGetDayOfWeek();
 8007510:	f000 f870 	bl	80075f4 <xbeeGetDayOfWeek>
	 xbeeGetMonth();
 8007514:	f000 f88c 	bl	8007630 <xbeeGetMonth>
	 xbeeGetSec();
 8007518:	f000 f8a8 	bl	800766c <xbeeGetSec>
	 xbeeGetDate();
 800751c:	f000 f8c4 	bl	80076a8 <xbeeGetDate>
	 xbeeDownloadPills();
 8007520:	f000 f8e0 	bl	80076e4 <xbeeDownloadPills>
}
 8007524:	bf00      	nop
 8007526:	bd80      	pop	{r7, pc}

08007528 <xbeeGetHour>:

	void xbeeGetHour(){
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x01;
 800752e:	23a1      	movs	r3, #161	@ 0xa1
 8007530:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8007532:	4b0e      	ldr	r3, [pc, #56]	@ (800756c <xbeeGetHour+0x44>)
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	1d39      	adds	r1, r7, #4
 8007538:	2364      	movs	r3, #100	@ 0x64
 800753a:	2201      	movs	r2, #1
 800753c:	f004 fce4 	bl	800bf08 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8007540:	4b0a      	ldr	r3, [pc, #40]	@ (800756c <xbeeGetHour+0x44>)
 8007542:	6818      	ldr	r0, [r3, #0]
 8007544:	4639      	mov	r1, r7
 8007546:	2364      	movs	r3, #100	@ 0x64
 8007548:	2201      	movs	r2, #1
 800754a:	f004 fd6b 	bl	800c024 <HAL_UART_Receive>
		DS1307_SetHour(rx_buffer[0]);
 800754e:	783b      	ldrb	r3, [r7, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f7fd fe5d 	bl	8005210 <DS1307_SetHour>
		uint8_t test = DS1307_GetHour();
 8007556:	f7fd fde0 	bl	800511a <DS1307_GetHour>
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(50);
 800755e:	2032      	movs	r0, #50	@ 0x32
 8007560:	f000 faf8 	bl	8007b54 <HAL_Delay>

	}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20000ae4 	.word	0x20000ae4

08007570 <xbeeGetMin>:

	void xbeeGetMin(){
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x02;
 8007576:	23a2      	movs	r3, #162	@ 0xa2
 8007578:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 800757a:	4b0b      	ldr	r3, [pc, #44]	@ (80075a8 <xbeeGetMin+0x38>)
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	1d39      	adds	r1, r7, #4
 8007580:	2364      	movs	r3, #100	@ 0x64
 8007582:	2201      	movs	r2, #1
 8007584:	f004 fcc0 	bl	800bf08 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8007588:	4b07      	ldr	r3, [pc, #28]	@ (80075a8 <xbeeGetMin+0x38>)
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	4639      	mov	r1, r7
 800758e:	2364      	movs	r3, #100	@ 0x64
 8007590:	2201      	movs	r2, #1
 8007592:	f004 fd47 	bl	800c024 <HAL_UART_Receive>
		DS1307_SetMinute(rx_buffer[0]);
 8007596:	783b      	ldrb	r3, [r7, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fd fe4e 	bl	800523a <DS1307_SetMinute>
	}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000ae4 	.word	0x20000ae4

080075ac <xbeeGetYear>:
	void xbeeGetYear(){
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x05;
 80075b2:	23a5      	movs	r3, #165	@ 0xa5
 80075b4:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [2];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 80075b6:	4b0e      	ldr	r3, [pc, #56]	@ (80075f0 <xbeeGetYear+0x44>)
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	1d39      	adds	r1, r7, #4
 80075bc:	2364      	movs	r3, #100	@ 0x64
 80075be:	2201      	movs	r2, #1
 80075c0:	f004 fca2 	bl	800bf08 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 2, 100);
 80075c4:	4b0a      	ldr	r3, [pc, #40]	@ (80075f0 <xbeeGetYear+0x44>)
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	4639      	mov	r1, r7
 80075ca:	2364      	movs	r3, #100	@ 0x64
 80075cc:	2202      	movs	r2, #2
 80075ce:	f004 fd29 	bl	800c024 <HAL_UART_Receive>
		DS1307_SetYear((rx_buffer[0] << 8) | rx_buffer[1]);
 80075d2:	783b      	ldrb	r3, [r7, #0]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	b21a      	sxth	r2, r3
 80075d8:	787b      	ldrb	r3, [r7, #1]
 80075da:	b21b      	sxth	r3, r3
 80075dc:	4313      	orrs	r3, r2
 80075de:	b21b      	sxth	r3, r3
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fd fdea 	bl	80051bc <DS1307_SetYear>
	}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000ae4 	.word	0x20000ae4

080075f4 <xbeeGetDayOfWeek>:
	void xbeeGetDayOfWeek(){
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x08;
 80075fa:	23a8      	movs	r3, #168	@ 0xa8
 80075fc:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 80075fe:	4b0b      	ldr	r3, [pc, #44]	@ (800762c <xbeeGetDayOfWeek+0x38>)
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	1d39      	adds	r1, r7, #4
 8007604:	2364      	movs	r3, #100	@ 0x64
 8007606:	2201      	movs	r2, #1
 8007608:	f004 fc7e 	bl	800bf08 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 800760c:	4b07      	ldr	r3, [pc, #28]	@ (800762c <xbeeGetDayOfWeek+0x38>)
 800760e:	6818      	ldr	r0, [r3, #0]
 8007610:	4639      	mov	r1, r7
 8007612:	2364      	movs	r3, #100	@ 0x64
 8007614:	2201      	movs	r2, #1
 8007616:	f004 fd05 	bl	800c024 <HAL_UART_Receive>
		DS1307_SetDayOfWeek(rx_buffer[0]);
 800761a:	783b      	ldrb	r3, [r7, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f7fd fd97 	bl	8005150 <DS1307_SetDayOfWeek>
	}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000ae4 	.word	0x20000ae4

08007630 <xbeeGetMonth>:
	void xbeeGetMonth(){
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x06;
 8007636:	23a6      	movs	r3, #166	@ 0xa6
 8007638:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 800763a:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <xbeeGetMonth+0x38>)
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	1d39      	adds	r1, r7, #4
 8007640:	2364      	movs	r3, #100	@ 0x64
 8007642:	2201      	movs	r2, #1
 8007644:	f004 fc60 	bl	800bf08 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8007648:	4b07      	ldr	r3, [pc, #28]	@ (8007668 <xbeeGetMonth+0x38>)
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	4639      	mov	r1, r7
 800764e:	2364      	movs	r3, #100	@ 0x64
 8007650:	2201      	movs	r2, #1
 8007652:	f004 fce7 	bl	800c024 <HAL_UART_Receive>
		DS1307_SetMonth(rx_buffer[0]);
 8007656:	783b      	ldrb	r3, [r7, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f7fd fd9d 	bl	8005198 <DS1307_SetMonth>
	}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000ae4 	.word	0x20000ae4

0800766c <xbeeGetSec>:

	void xbeeGetSec(){
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x03;
 8007672:	23a3      	movs	r3, #163	@ 0xa3
 8007674:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8007676:	4b0b      	ldr	r3, [pc, #44]	@ (80076a4 <xbeeGetSec+0x38>)
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	1d39      	adds	r1, r7, #4
 800767c:	2364      	movs	r3, #100	@ 0x64
 800767e:	2201      	movs	r2, #1
 8007680:	f004 fc42 	bl	800bf08 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8007684:	4b07      	ldr	r3, [pc, #28]	@ (80076a4 <xbeeGetSec+0x38>)
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	4639      	mov	r1, r7
 800768a:	2364      	movs	r3, #100	@ 0x64
 800768c:	2201      	movs	r2, #1
 800768e:	f004 fcc9 	bl	800c024 <HAL_UART_Receive>
		DS1307_SetSecond(rx_buffer[0]);
 8007692:	783b      	ldrb	r3, [r7, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f7fd fde2 	bl	800525e <DS1307_SetSecond>
	}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20000ae4 	.word	0x20000ae4

080076a8 <xbeeGetDate>:

	void xbeeGetDate(){
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x09;
 80076ae:	23a9      	movs	r3, #169	@ 0xa9
 80076b0:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 80076b2:	4b0b      	ldr	r3, [pc, #44]	@ (80076e0 <xbeeGetDate+0x38>)
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	1d39      	adds	r1, r7, #4
 80076b8:	2364      	movs	r3, #100	@ 0x64
 80076ba:	2201      	movs	r2, #1
 80076bc:	f004 fc24 	bl	800bf08 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 80076c0:	4b07      	ldr	r3, [pc, #28]	@ (80076e0 <xbeeGetDate+0x38>)
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	4639      	mov	r1, r7
 80076c6:	2364      	movs	r3, #100	@ 0x64
 80076c8:	2201      	movs	r2, #1
 80076ca:	f004 fcab 	bl	800c024 <HAL_UART_Receive>
		DS1307_SetDate(rx_buffer[0]);
 80076ce:	783b      	ldrb	r3, [r7, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fd fd4f 	bl	8005174 <DS1307_SetDate>
	}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000ae4 	.word	0x20000ae4

080076e4 <xbeeDownloadPills>:
void xbeeUploadPills(){

}


void xbeeDownloadPills(){
 80076e4:	b5b0      	push	{r4, r5, r7, lr}
 80076e6:	b0a4      	sub	sp, #144	@ 0x90
 80076e8:	af02      	add	r7, sp, #8
	clearPillList();
 80076ea:	f7f9 ff99 	bl	8001620 <clearPillList>
	uint8_t tx_buffer [1];
	uint8_t rx_buffer [100];
	memset(rx_buffer, 0, 100);
 80076ee:	f107 031c 	add.w	r3, r7, #28
 80076f2:	2264      	movs	r2, #100	@ 0x64
 80076f4:	2100      	movs	r1, #0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f005 fb96 	bl	800ce28 <memset>
	tx_buffer[0] = 0xA7; //INITIATE PILL TRANSFER INFORMATION.
 80076fc:	23a7      	movs	r3, #167	@ 0xa7
 80076fe:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8007702:	4b31      	ldr	r3, [pc, #196]	@ (80077c8 <xbeeDownloadPills+0xe4>)
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800770a:	2364      	movs	r3, #100	@ 0x64
 800770c:	2201      	movs	r2, #1
 800770e:	f004 fbfb 	bl	800bf08 <HAL_UART_Transmit>
	HAL_UART_Receive(xbee_uart, rx_buffer, 10, 100); //receive newNumpills
 8007712:	4b2d      	ldr	r3, [pc, #180]	@ (80077c8 <xbeeDownloadPills+0xe4>)
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	f107 011c 	add.w	r1, r7, #28
 800771a:	2364      	movs	r3, #100	@ 0x64
 800771c:	220a      	movs	r2, #10
 800771e:	f004 fc81 	bl	800c024 <HAL_UART_Receive>
	uint8_t numNewPills = rx_buffer[0];
 8007722:	7f3b      	ldrb	r3, [r7, #28]
 8007724:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	uint8_t i;
	for(i = 0; i < numNewPills; i++){
 8007728:	2300      	movs	r3, #0
 800772a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800772e:	e03f      	b.n	80077b0 <xbeeDownloadPills+0xcc>
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8007730:	4b25      	ldr	r3, [pc, #148]	@ (80077c8 <xbeeDownloadPills+0xe4>)
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8007738:	2364      	movs	r3, #100	@ 0x64
 800773a:	2201      	movs	r2, #1
 800773c:	f004 fbe4 	bl	800bf08 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 29, 100);
 8007740:	4b21      	ldr	r3, [pc, #132]	@ (80077c8 <xbeeDownloadPills+0xe4>)
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	f107 011c 	add.w	r1, r7, #28
 8007748:	2364      	movs	r3, #100	@ 0x64
 800774a:	221d      	movs	r2, #29
 800774c:	f004 fc6a 	bl	800c024 <HAL_UART_Receive>
		uint8_t dispenserNum = rx_buffer[0];
 8007750:	7f3b      	ldrb	r3, [r7, #28]
 8007752:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		char pillName [25];
		memcpy(pillName, rx_buffer + 1, 25);
 8007756:	f107 031c 	add.w	r3, r7, #28
 800775a:	3301      	adds	r3, #1
 800775c:	463c      	mov	r4, r7
 800775e:	461d      	mov	r5, r3
 8007760:	6828      	ldr	r0, [r5, #0]
 8007762:	6869      	ldr	r1, [r5, #4]
 8007764:	68aa      	ldr	r2, [r5, #8]
 8007766:	68eb      	ldr	r3, [r5, #12]
 8007768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800776a:	6928      	ldr	r0, [r5, #16]
 800776c:	6969      	ldr	r1, [r5, #20]
 800776e:	c403      	stmia	r4!, {r0, r1}
 8007770:	7e2b      	ldrb	r3, [r5, #24]
 8007772:	7023      	strb	r3, [r4, #0]
		uint8_t dayofWeek = rx_buffer[26];
 8007774:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007778:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
		uint8_t hour = rx_buffer[27];
 800777c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007780:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		uint8_t min = rx_buffer[28];
 8007784:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007788:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		loadNewPillEntry(dispenserNum, pillName, dayofWeek, hour, min);
 800778c:	f897 4083 	ldrb.w	r4, [r7, #131]	@ 0x83
 8007790:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 8007794:	4639      	mov	r1, r7
 8007796:	f897 0085 	ldrb.w	r0, [r7, #133]	@ 0x85
 800779a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	4623      	mov	r3, r4
 80077a2:	f7f9 ffe7 	bl	8001774 <loadNewPillEntry>
	for(i = 0; i < numNewPills; i++){
 80077a6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80077aa:	3301      	adds	r3, #1
 80077ac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80077b0:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80077b4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d3b9      	bcc.n	8007730 <xbeeDownloadPills+0x4c>
	}
	sortEntries();
 80077bc:	f7f9 fbfa 	bl	8000fb4 <sortEntries>
}
 80077c0:	bf00      	nop
 80077c2:	3788      	adds	r7, #136	@ 0x88
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bdb0      	pop	{r4, r5, r7, pc}
 80077c8:	20000ae4 	.word	0x20000ae4

080077cc <remap>:


extern SPI_HandleTypeDef hspi3;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	ed87 0a05 	vstr	s0, [r7, #20]
 80077d6:	edc7 0a04 	vstr	s1, [r7, #16]
 80077da:	ed87 1a03 	vstr	s2, [r7, #12]
 80077de:	edc7 1a02 	vstr	s3, [r7, #8]
 80077e2:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80077e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80077ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80077ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077f2:	edd7 6a01 	vldr	s13, [r7, #4]
 80077f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80077fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80077fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007802:	ed97 7a03 	vldr	s14, [r7, #12]
 8007806:	edd7 7a04 	vldr	s15, [r7, #16]
 800780a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800780e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007812:	edd7 7a02 	vldr	s15, [r7, #8]
 8007816:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800781a:	eeb0 0a67 	vmov.f32	s0, s15
 800781e:	371c      	adds	r7, #28
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800782c:	2200      	movs	r2, #0
 800782e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007832:	4810      	ldr	r0, [pc, #64]	@ (8007874 <XPT2046_Init+0x4c>)
 8007834:	f000 fe3a 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8007838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800783c:	2201      	movs	r2, #1
 800783e:	2180      	movs	r1, #128	@ 0x80
 8007840:	480d      	ldr	r0, [pc, #52]	@ (8007878 <XPT2046_Init+0x50>)
 8007842:	f003 f976 	bl	800ab32 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8007846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800784a:	2201      	movs	r2, #1
 800784c:	2100      	movs	r1, #0
 800784e:	480a      	ldr	r0, [pc, #40]	@ (8007878 <XPT2046_Init+0x50>)
 8007850:	f003 f96f 	bl	800ab32 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8007854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007858:	2201      	movs	r2, #1
 800785a:	2100      	movs	r1, #0
 800785c:	4806      	ldr	r0, [pc, #24]	@ (8007878 <XPT2046_Init+0x50>)
 800785e:	f003 f968 	bl	800ab32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8007862:	2201      	movs	r2, #1
 8007864:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007868:	4802      	ldr	r0, [pc, #8]	@ (8007874 <XPT2046_Init+0x4c>)
 800786a:	f000 fe1f 	bl	80084ac <HAL_GPIO_WritePin>
}
 800786e:	bf00      	nop
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	48000400 	.word	0x48000400
 8007878:	20000908 	.word	0x20000908

0800787c <getRaw>:

uint16_t getRaw(uint8_t address)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af02      	add	r7, sp, #8
 8007882:	4603      	mov	r3, r0
 8007884:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8007886:	2200      	movs	r2, #0
 8007888:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800788c:	481c      	ldr	r0, [pc, #112]	@ (8007900 <getRaw+0x84>)
 800788e:	f000 fe0d 	bl	80084ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007892:	2001      	movs	r0, #1
 8007894:	f000 f95e 	bl	8007b54 <HAL_Delay>
	HAL_SPI_Transmit(&hspi3, &address, 1, 1000);
 8007898:	1df9      	adds	r1, r7, #7
 800789a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800789e:	2201      	movs	r2, #1
 80078a0:	4818      	ldr	r0, [pc, #96]	@ (8007904 <getRaw+0x88>)
 80078a2:	f003 f946 	bl	800ab32 <HAL_SPI_Transmit>
	address = 0x00;
 80078a6:	2300      	movs	r3, #0
 80078a8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 80078aa:	f107 020b 	add.w	r2, r7, #11
 80078ae:	1df9      	adds	r1, r7, #7
 80078b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	2301      	movs	r3, #1
 80078b8:	4812      	ldr	r0, [pc, #72]	@ (8007904 <getRaw+0x88>)
 80078ba:	f003 faaf 	bl	800ae1c <HAL_SPI_TransmitReceive>
	MSB = data;   
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 80078c2:	2300      	movs	r3, #0
 80078c4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 80078c6:	f107 020b 	add.w	r2, r7, #11
 80078ca:	1df9      	adds	r1, r7, #7
 80078cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	2301      	movs	r3, #1
 80078d4:	480b      	ldr	r0, [pc, #44]	@ (8007904 <getRaw+0x88>)
 80078d6:	f003 faa1 	bl	800ae1c <HAL_SPI_TransmitReceive>
	LSB = data;
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80078de:	2201      	movs	r2, #1
 80078e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80078e4:	4806      	ldr	r0, [pc, #24]	@ (8007900 <getRaw+0x84>)
 80078e6:	f000 fde1 	bl	80084ac <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 80078ea:	89fb      	ldrh	r3, [r7, #14]
 80078ec:	021a      	lsls	r2, r3, #8
 80078ee:	89bb      	ldrh	r3, [r7, #12]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	10db      	asrs	r3, r3, #3
 80078f4:	b29b      	uxth	r3, r3
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	48000400 	.word	0x48000400
 8007904:	20000908 	.word	0x20000908

08007908 <X>:

inline static uint16_t X(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 800790e:	20d0      	movs	r0, #208	@ 0xd0
 8007910:	f7ff ffb4 	bl	800787c <getRaw>
 8007914:	4603      	mov	r3, r0
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 800796c <X+0x64>
 8007922:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8007970 <X+0x68>
 8007926:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8007974 <X+0x6c>
 800792a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8007978 <X+0x70>
 800792e:	eeb0 0a67 	vmov.f32	s0, s15
 8007932:	f7ff ff4b 	bl	80077cc <remap>
 8007936:	eef0 7a40 	vmov.f32	s15, s0
 800793a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800793e:	ee17 3a90 	vmov	r3, s15
 8007942:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800794a:	3301      	adds	r3, #1
 800794c:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <X+0x58>
 8007954:	88fb      	ldrh	r3, [r7, #6]
 8007956:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800795a:	d801      	bhi.n	8007960 <X+0x58>
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	e000      	b.n	8007962 <X+0x5a>
	else return 0;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	439f8000 	.word	0x439f8000
 8007970:	00000000 	.word	0x00000000
 8007974:	456d8000 	.word	0x456d8000
 8007978:	43960000 	.word	0x43960000

0800797c <Y>:

inline static uint16_t Y(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8007982:	2090      	movs	r0, #144	@ 0x90
 8007984:	f7ff ff7a 	bl	800787c <getRaw>
 8007988:	4603      	mov	r3, r0
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007992:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 80079e0 <Y+0x64>
 8007996:	eddf 1a13 	vldr	s3, [pc, #76]	@ 80079e4 <Y+0x68>
 800799a:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 80079e8 <Y+0x6c>
 800799e:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80079ec <Y+0x70>
 80079a2:	eeb0 0a67 	vmov.f32	s0, s15
 80079a6:	f7ff ff11 	bl	80077cc <remap>
 80079aa:	eef0 7a40 	vmov.f32	s15, s0
 80079ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b2:	ee17 3a90 	vmov	r3, s15
 80079b6:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
 80079b8:	88fb      	ldrh	r3, [r7, #6]
 80079ba:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 80079be:	3301      	adds	r3, #1
 80079c0:	80fb      	strh	r3, [r7, #6]
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 80079c2:	88fb      	ldrh	r3, [r7, #6]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <Y+0x58>
 80079c8:	88fb      	ldrh	r3, [r7, #6]
 80079ca:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 80079ce:	d801      	bhi.n	80079d4 <Y+0x58>
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	e000      	b.n	80079d6 <Y+0x5a>
	else return 0;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	43ef8000 	.word	0x43ef8000
 80079e4:	00000000 	.word	0x00000000
 80079e8:	456a6000 	.word	0x456a6000
 80079ec:	43c80000 	.word	0x43c80000

080079f0 <getX>:

uint16_t getX(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
 80079f6:	f7ff ffc1 	bl	800797c <Y>
 80079fa:	4603      	mov	r3, r0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <getY>:

uint16_t getY(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
 8007a0a:	f7ff ff7d 	bl	8007908 <X>
 8007a0e:	4603      	mov	r3, r0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007a18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007a50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007a1c:	f7ff fd4e 	bl	80074bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007a20:	480c      	ldr	r0, [pc, #48]	@ (8007a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8007a22:	490d      	ldr	r1, [pc, #52]	@ (8007a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007a24:	4a0d      	ldr	r2, [pc, #52]	@ (8007a5c <LoopForever+0xe>)
  movs r3, #0
 8007a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a28:	e002      	b.n	8007a30 <LoopCopyDataInit>

08007a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a2e:	3304      	adds	r3, #4

08007a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a34:	d3f9      	bcc.n	8007a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a36:	4a0a      	ldr	r2, [pc, #40]	@ (8007a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007a38:	4c0a      	ldr	r4, [pc, #40]	@ (8007a64 <LoopForever+0x16>)
  movs r3, #0
 8007a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a3c:	e001      	b.n	8007a42 <LoopFillZerobss>

08007a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a40:	3204      	adds	r2, #4

08007a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a44:	d3fb      	bcc.n	8007a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007a46:	f005 f9fd 	bl	800ce44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007a4a:	f7fe fe25 	bl	8006698 <main>

08007a4e <LoopForever>:

LoopForever:
    b LoopForever
 8007a4e:	e7fe      	b.n	8007a4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007a50:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8007a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a58:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8007a5c:	0801d910 	.word	0x0801d910
  ldr r2, =_sbss
 8007a60:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8007a64:	20000c34 	.word	0x20000c34

08007a68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007a68:	e7fe      	b.n	8007a68 <ADC1_IRQHandler>

08007a6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a74:	2003      	movs	r0, #3
 8007a76:	f000 f961 	bl	8007d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a7a:	200f      	movs	r0, #15
 8007a7c:	f000 f80e 	bl	8007a9c <HAL_InitTick>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	71fb      	strb	r3, [r7, #7]
 8007a8a:	e001      	b.n	8007a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007a8c:	f7ff fa18 	bl	8006ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007a90:	79fb      	ldrb	r3, [r7, #7]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007aa8:	4b17      	ldr	r3, [pc, #92]	@ (8007b08 <HAL_InitTick+0x6c>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d023      	beq.n	8007af8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007ab0:	4b16      	ldr	r3, [pc, #88]	@ (8007b0c <HAL_InitTick+0x70>)
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	4b14      	ldr	r3, [pc, #80]	@ (8007b08 <HAL_InitTick+0x6c>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f96d 	bl	8007da6 <HAL_SYSTICK_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10f      	bne.n	8007af2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b0f      	cmp	r3, #15
 8007ad6:	d809      	bhi.n	8007aec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ad8:	2200      	movs	r2, #0
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ae0:	f000 f937 	bl	8007d52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8007b10 <HAL_InitTick+0x74>)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	e007      	b.n	8007afc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
 8007af0:	e004      	b.n	8007afc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	73fb      	strb	r3, [r7, #15]
 8007af6:	e001      	b.n	8007afc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	2000000c 	.word	0x2000000c
 8007b0c:	20000004 	.word	0x20000004
 8007b10:	20000008 	.word	0x20000008

08007b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007b18:	4b06      	ldr	r3, [pc, #24]	@ (8007b34 <HAL_IncTick+0x20>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4b06      	ldr	r3, [pc, #24]	@ (8007b38 <HAL_IncTick+0x24>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4413      	add	r3, r2
 8007b24:	4a04      	ldr	r2, [pc, #16]	@ (8007b38 <HAL_IncTick+0x24>)
 8007b26:	6013      	str	r3, [r2, #0]
}
 8007b28:	bf00      	nop
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	2000000c 	.word	0x2000000c
 8007b38:	20000ae8 	.word	0x20000ae8

08007b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8007b40:	4b03      	ldr	r3, [pc, #12]	@ (8007b50 <HAL_GetTick+0x14>)
 8007b42:	681b      	ldr	r3, [r3, #0]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	20000ae8 	.word	0x20000ae8

08007b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b5c:	f7ff ffee 	bl	8007b3c <HAL_GetTick>
 8007b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b6c:	d005      	beq.n	8007b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <HAL_Delay+0x44>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007b7a:	bf00      	nop
 8007b7c:	f7ff ffde 	bl	8007b3c <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d8f7      	bhi.n	8007b7c <HAL_Delay+0x28>
  {
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	2000000c 	.word	0x2000000c

08007b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007bac:	4b0c      	ldr	r3, [pc, #48]	@ (8007be0 <__NVIC_SetPriorityGrouping+0x44>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007bb8:	4013      	ands	r3, r2
 8007bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bce:	4a04      	ldr	r2, [pc, #16]	@ (8007be0 <__NVIC_SetPriorityGrouping+0x44>)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	60d3      	str	r3, [r2, #12]
}
 8007bd4:	bf00      	nop
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	e000ed00 	.word	0xe000ed00

08007be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007be4:	b480      	push	{r7}
 8007be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007be8:	4b04      	ldr	r3, [pc, #16]	@ (8007bfc <__NVIC_GetPriorityGrouping+0x18>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	0a1b      	lsrs	r3, r3, #8
 8007bee:	f003 0307 	and.w	r3, r3, #7
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	e000ed00 	.word	0xe000ed00

08007c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	db0b      	blt.n	8007c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	f003 021f 	and.w	r2, r3, #31
 8007c18:	4907      	ldr	r1, [pc, #28]	@ (8007c38 <__NVIC_EnableIRQ+0x38>)
 8007c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	2001      	movs	r0, #1
 8007c22:	fa00 f202 	lsl.w	r2, r0, r2
 8007c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	e000e100 	.word	0xe000e100

08007c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	db0a      	blt.n	8007c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	490c      	ldr	r1, [pc, #48]	@ (8007c88 <__NVIC_SetPriority+0x4c>)
 8007c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5a:	0112      	lsls	r2, r2, #4
 8007c5c:	b2d2      	uxtb	r2, r2
 8007c5e:	440b      	add	r3, r1
 8007c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c64:	e00a      	b.n	8007c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	4908      	ldr	r1, [pc, #32]	@ (8007c8c <__NVIC_SetPriority+0x50>)
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	3b04      	subs	r3, #4
 8007c74:	0112      	lsls	r2, r2, #4
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	440b      	add	r3, r1
 8007c7a:	761a      	strb	r2, [r3, #24]
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	e000e100 	.word	0xe000e100
 8007c8c:	e000ed00 	.word	0xe000ed00

08007c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b089      	sub	sp, #36	@ 0x24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f1c3 0307 	rsb	r3, r3, #7
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	bf28      	it	cs
 8007cae:	2304      	movcs	r3, #4
 8007cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	2b06      	cmp	r3, #6
 8007cb8:	d902      	bls.n	8007cc0 <NVIC_EncodePriority+0x30>
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	3b03      	subs	r3, #3
 8007cbe:	e000      	b.n	8007cc2 <NVIC_EncodePriority+0x32>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	fa02 f303 	lsl.w	r3, r2, r3
 8007cce:	43da      	mvns	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce2:	43d9      	mvns	r1, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ce8:	4313      	orrs	r3, r2
         );
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3724      	adds	r7, #36	@ 0x24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
	...

08007cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d08:	d301      	bcc.n	8007d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e00f      	b.n	8007d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d38 <SysTick_Config+0x40>)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d16:	210f      	movs	r1, #15
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d1c:	f7ff ff8e 	bl	8007c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d20:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <SysTick_Config+0x40>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d26:	4b04      	ldr	r3, [pc, #16]	@ (8007d38 <SysTick_Config+0x40>)
 8007d28:	2207      	movs	r2, #7
 8007d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	e000e010 	.word	0xe000e010

08007d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff29 	bl	8007b9c <__NVIC_SetPriorityGrouping>
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b086      	sub	sp, #24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	4603      	mov	r3, r0
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
 8007d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007d60:	2300      	movs	r3, #0
 8007d62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d64:	f7ff ff3e 	bl	8007be4 <__NVIC_GetPriorityGrouping>
 8007d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f7ff ff8e 	bl	8007c90 <NVIC_EncodePriority>
 8007d74:	4602      	mov	r2, r0
 8007d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff ff5d 	bl	8007c3c <__NVIC_SetPriority>
}
 8007d82:	bf00      	nop
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	4603      	mov	r3, r0
 8007d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff ff31 	bl	8007c00 <__NVIC_EnableIRQ>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff ffa2 	bl	8007cf8 <SysTick_Config>
 8007db4:	4603      	mov	r3, r0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e014      	b.n	8007dfa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	791b      	ldrb	r3, [r3, #4]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d105      	bne.n	8007de6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff f891 	bl	8006f08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2202      	movs	r2, #2
 8007dea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	795b      	ldrb	r3, [r3, #5]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_DAC_Start+0x16>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e040      	b.n	8007e9a <HAL_DAC_Start+0x98>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2201      	movs	r2, #1
 8007e32:	409a      	lsls	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10f      	bne.n	8007e62 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d11d      	bne.n	8007e8c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0201 	orr.w	r2, r2, #1
 8007e5e:	605a      	str	r2, [r3, #4]
 8007e60:	e014      	b.n	8007e8c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f003 0310 	and.w	r3, r3, #16
 8007e72:	2102      	movs	r1, #2
 8007e74:	fa01 f303 	lsl.w	r3, r1, r3
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d107      	bne.n	8007e8c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0202 	orr.w	r2, r2, #2
 8007e8a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b087      	sub	sp, #28
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	607a      	str	r2, [r7, #4]
 8007eb2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d105      	bne.n	8007ed0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4413      	add	r3, r2
 8007eca:	3308      	adds	r3, #8
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	e004      	b.n	8007eda <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3314      	adds	r3, #20
 8007ed8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	461a      	mov	r2, r3
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	795b      	ldrb	r3, [r3, #5]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <HAL_DAC_ConfigChannel+0x1c>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e137      	b.n	800817c <HAL_DAC_ConfigChannel+0x28c>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2202      	movs	r2, #2
 8007f16:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	f040 8081 	bne.w	8008024 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007f22:	f7ff fe0b 	bl	8007b3c <HAL_GetTick>
 8007f26:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d140      	bne.n	8007fb0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007f2e:	e018      	b.n	8007f62 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007f30:	f7ff fe04 	bl	8007b3c <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d911      	bls.n	8007f62 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f043 0208 	orr.w	r2, r3, #8
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e10c      	b.n	800817c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1df      	bne.n	8007f30 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8007f70:	2001      	movs	r0, #1
 8007f72:	f7ff fdef 	bl	8007b54 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	69d2      	ldr	r2, [r2, #28]
 8007f7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f80:	e023      	b.n	8007fca <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007f82:	f7ff fddb 	bl	8007b3c <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d90f      	bls.n	8007fb0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da0a      	bge.n	8007fb0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f043 0208 	orr.w	r2, r3, #8
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2203      	movs	r2, #3
 8007faa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e0e5      	b.n	800817c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dbe3      	blt.n	8007f82 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8007fba:	2001      	movs	r0, #1
 8007fbc:	f7ff fdca 	bl	8007b54 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	69d2      	ldr	r2, [r2, #28]
 8007fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f003 0310 	and.w	r3, r3, #16
 8007fd6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007fda:	fa01 f303 	lsl.w	r3, r1, r3
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	ea02 0103 	and.w	r1, r2, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	6a1a      	ldr	r2, [r3, #32]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f003 0310 	and.w	r3, r3, #16
 8007fee:	409a      	lsls	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f003 0310 	and.w	r3, r3, #16
 8008004:	21ff      	movs	r1, #255	@ 0xff
 8008006:	fa01 f303 	lsl.w	r3, r1, r3
 800800a:	43db      	mvns	r3, r3
 800800c:	ea02 0103 	and.w	r1, r2, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	409a      	lsls	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d11d      	bne.n	8008068 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008032:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	221f      	movs	r2, #31
 800803c:	fa02 f303 	lsl.w	r3, r2, r3
 8008040:	43db      	mvns	r3, r3
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	4013      	ands	r3, r2
 8008046:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	fa02 f303 	lsl.w	r3, r2, r3
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	4313      	orrs	r3, r2
 800805e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800806e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f003 0310 	and.w	r3, r3, #16
 8008076:	2207      	movs	r2, #7
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	43db      	mvns	r3, r3
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	4013      	ands	r3, r2
 8008082:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	431a      	orrs	r2, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	fa02 f303 	lsl.w	r3, r2, r3
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6819      	ldr	r1, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	43da      	mvns	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	400a      	ands	r2, r1
 80080cc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	43db      	mvns	r3, r3
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	4013      	ands	r3, r2
 80080ea:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	4313      	orrs	r3, r2
 8008102:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800810c:	d104      	bne.n	8008118 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008114:	61fb      	str	r3, [r7, #28]
 8008116:	e018      	b.n	800814a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d104      	bne.n	800812a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	e00f      	b.n	800814a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800812a:	f001 fe4f 	bl	8009dcc <HAL_RCC_GetHCLKFreq>
 800812e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	4a14      	ldr	r2, [pc, #80]	@ (8008184 <HAL_DAC_ConfigChannel+0x294>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d904      	bls.n	8008142 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800813e:	61fb      	str	r3, [r7, #28]
 8008140:	e003      	b.n	800814a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008148:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6819      	ldr	r1, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f003 0310 	and.w	r3, r3, #16
 800815e:	22c0      	movs	r2, #192	@ 0xc0
 8008160:	fa02 f303 	lsl.w	r3, r2, r3
 8008164:	43da      	mvns	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	400a      	ands	r2, r1
 800816c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3720      	adds	r7, #32
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	04c4b400 	.word	0x04c4b400

08008188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008196:	e166      	b.n	8008466 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	2101      	movs	r1, #1
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	4013      	ands	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 8158 	beq.w	8008460 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d005      	beq.n	80081c8 <HAL_GPIO_Init+0x40>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d130      	bne.n	800822a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	2203      	movs	r2, #3
 80081d4:	fa02 f303 	lsl.w	r3, r2, r3
 80081d8:	43db      	mvns	r3, r3
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4013      	ands	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081fe:	2201      	movs	r2, #1
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	fa02 f303 	lsl.w	r3, r2, r3
 8008206:	43db      	mvns	r3, r3
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4013      	ands	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	f003 0201 	and.w	r2, r3, #1
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	fa02 f303 	lsl.w	r3, r2, r3
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	2b03      	cmp	r3, #3
 8008234:	d017      	beq.n	8008266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	2203      	movs	r2, #3
 8008242:	fa02 f303 	lsl.w	r3, r2, r3
 8008246:	43db      	mvns	r3, r3
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4013      	ands	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	fa02 f303 	lsl.w	r3, r2, r3
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	2b02      	cmp	r3, #2
 8008270:	d123      	bne.n	80082ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	08da      	lsrs	r2, r3, #3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3208      	adds	r2, #8
 800827a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	220f      	movs	r2, #15
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	43db      	mvns	r3, r3
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4013      	ands	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	691a      	ldr	r2, [r3, #16]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	fa02 f303 	lsl.w	r3, r2, r3
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	08da      	lsrs	r2, r3, #3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3208      	adds	r2, #8
 80082b4:	6939      	ldr	r1, [r7, #16]
 80082b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	2203      	movs	r2, #3
 80082c6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ca:	43db      	mvns	r3, r3
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4013      	ands	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f003 0203 	and.w	r2, r3, #3
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 80b2 	beq.w	8008460 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082fc:	4b61      	ldr	r3, [pc, #388]	@ (8008484 <HAL_GPIO_Init+0x2fc>)
 80082fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008300:	4a60      	ldr	r2, [pc, #384]	@ (8008484 <HAL_GPIO_Init+0x2fc>)
 8008302:	f043 0301 	orr.w	r3, r3, #1
 8008306:	6613      	str	r3, [r2, #96]	@ 0x60
 8008308:	4b5e      	ldr	r3, [pc, #376]	@ (8008484 <HAL_GPIO_Init+0x2fc>)
 800830a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	60bb      	str	r3, [r7, #8]
 8008312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008314:	4a5c      	ldr	r2, [pc, #368]	@ (8008488 <HAL_GPIO_Init+0x300>)
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	089b      	lsrs	r3, r3, #2
 800831a:	3302      	adds	r3, #2
 800831c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f003 0303 	and.w	r3, r3, #3
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	220f      	movs	r2, #15
 800832c:	fa02 f303 	lsl.w	r3, r2, r3
 8008330:	43db      	mvns	r3, r3
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4013      	ands	r3, r2
 8008336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800833e:	d02b      	beq.n	8008398 <HAL_GPIO_Init+0x210>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a52      	ldr	r2, [pc, #328]	@ (800848c <HAL_GPIO_Init+0x304>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d025      	beq.n	8008394 <HAL_GPIO_Init+0x20c>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a51      	ldr	r2, [pc, #324]	@ (8008490 <HAL_GPIO_Init+0x308>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d01f      	beq.n	8008390 <HAL_GPIO_Init+0x208>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a50      	ldr	r2, [pc, #320]	@ (8008494 <HAL_GPIO_Init+0x30c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d019      	beq.n	800838c <HAL_GPIO_Init+0x204>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a4f      	ldr	r2, [pc, #316]	@ (8008498 <HAL_GPIO_Init+0x310>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <HAL_GPIO_Init+0x200>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a4e      	ldr	r2, [pc, #312]	@ (800849c <HAL_GPIO_Init+0x314>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d00d      	beq.n	8008384 <HAL_GPIO_Init+0x1fc>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a4d      	ldr	r2, [pc, #308]	@ (80084a0 <HAL_GPIO_Init+0x318>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d007      	beq.n	8008380 <HAL_GPIO_Init+0x1f8>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a4c      	ldr	r2, [pc, #304]	@ (80084a4 <HAL_GPIO_Init+0x31c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d101      	bne.n	800837c <HAL_GPIO_Init+0x1f4>
 8008378:	2307      	movs	r3, #7
 800837a:	e00e      	b.n	800839a <HAL_GPIO_Init+0x212>
 800837c:	2308      	movs	r3, #8
 800837e:	e00c      	b.n	800839a <HAL_GPIO_Init+0x212>
 8008380:	2306      	movs	r3, #6
 8008382:	e00a      	b.n	800839a <HAL_GPIO_Init+0x212>
 8008384:	2305      	movs	r3, #5
 8008386:	e008      	b.n	800839a <HAL_GPIO_Init+0x212>
 8008388:	2304      	movs	r3, #4
 800838a:	e006      	b.n	800839a <HAL_GPIO_Init+0x212>
 800838c:	2303      	movs	r3, #3
 800838e:	e004      	b.n	800839a <HAL_GPIO_Init+0x212>
 8008390:	2302      	movs	r3, #2
 8008392:	e002      	b.n	800839a <HAL_GPIO_Init+0x212>
 8008394:	2301      	movs	r3, #1
 8008396:	e000      	b.n	800839a <HAL_GPIO_Init+0x212>
 8008398:	2300      	movs	r3, #0
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	f002 0203 	and.w	r2, r2, #3
 80083a0:	0092      	lsls	r2, r2, #2
 80083a2:	4093      	lsls	r3, r2
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80083aa:	4937      	ldr	r1, [pc, #220]	@ (8008488 <HAL_GPIO_Init+0x300>)
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	089b      	lsrs	r3, r3, #2
 80083b0:	3302      	adds	r3, #2
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083b8:	4b3b      	ldr	r3, [pc, #236]	@ (80084a8 <HAL_GPIO_Init+0x320>)
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	4013      	ands	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d003      	beq.n	80083dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4313      	orrs	r3, r2
 80083da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083dc:	4a32      	ldr	r2, [pc, #200]	@ (80084a8 <HAL_GPIO_Init+0x320>)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80083e2:	4b31      	ldr	r3, [pc, #196]	@ (80084a8 <HAL_GPIO_Init+0x320>)
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	43db      	mvns	r3, r3
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4013      	ands	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008406:	4a28      	ldr	r2, [pc, #160]	@ (80084a8 <HAL_GPIO_Init+0x320>)
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800840c:	4b26      	ldr	r3, [pc, #152]	@ (80084a8 <HAL_GPIO_Init+0x320>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	43db      	mvns	r3, r3
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4013      	ands	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008430:	4a1d      	ldr	r2, [pc, #116]	@ (80084a8 <HAL_GPIO_Init+0x320>)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008436:	4b1c      	ldr	r3, [pc, #112]	@ (80084a8 <HAL_GPIO_Init+0x320>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	43db      	mvns	r3, r3
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4013      	ands	r3, r2
 8008444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800845a:	4a13      	ldr	r2, [pc, #76]	@ (80084a8 <HAL_GPIO_Init+0x320>)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	3301      	adds	r3, #1
 8008464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	fa22 f303 	lsr.w	r3, r2, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	f47f ae91 	bne.w	8008198 <HAL_GPIO_Init+0x10>
  }
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	40021000 	.word	0x40021000
 8008488:	40010000 	.word	0x40010000
 800848c:	48000400 	.word	0x48000400
 8008490:	48000800 	.word	0x48000800
 8008494:	48000c00 	.word	0x48000c00
 8008498:	48001000 	.word	0x48001000
 800849c:	48001400 	.word	0x48001400
 80084a0:	48001800 	.word	0x48001800
 80084a4:	48001c00 	.word	0x48001c00
 80084a8:	40010400 	.word	0x40010400

080084ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	807b      	strh	r3, [r7, #2]
 80084b8:	4613      	mov	r3, r2
 80084ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084bc:	787b      	ldrb	r3, [r7, #1]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80084c2:	887a      	ldrh	r2, [r7, #2]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80084c8:	e002      	b.n	80084d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80084ca:	887a      	ldrh	r2, [r7, #2]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e08d      	b.n	800860a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7fe fd3e 	bl	8006f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2224      	movs	r2, #36	@ 0x24
 800850c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0201 	bic.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800852c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800853c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d107      	bne.n	8008556 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008552:	609a      	str	r2, [r3, #8]
 8008554:	e006      	b.n	8008564 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008562:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d108      	bne.n	800857e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800857a:	605a      	str	r2, [r3, #4]
 800857c:	e007      	b.n	800858e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800858c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6812      	ldr	r2, [r2, #0]
 8008598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800859c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	69d9      	ldr	r1, [r3, #28]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a1a      	ldr	r2, [r3, #32]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0201 	orr.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af02      	add	r7, sp, #8
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	607a      	str	r2, [r7, #4]
 800861e:	461a      	mov	r2, r3
 8008620:	460b      	mov	r3, r1
 8008622:	817b      	strh	r3, [r7, #10]
 8008624:	4613      	mov	r3, r2
 8008626:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b20      	cmp	r3, #32
 8008632:	f040 80fd 	bne.w	8008830 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_I2C_Master_Transmit+0x30>
 8008640:	2302      	movs	r3, #2
 8008642:	e0f6      	b.n	8008832 <HAL_I2C_Master_Transmit+0x21e>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800864c:	f7ff fa76 	bl	8007b3c <HAL_GetTick>
 8008650:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	2319      	movs	r3, #25
 8008658:	2201      	movs	r2, #1
 800865a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 fa0a 	bl	8008a78 <I2C_WaitOnFlagUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e0e1      	b.n	8008832 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2221      	movs	r2, #33	@ 0x21
 8008672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2210      	movs	r2, #16
 800867a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	893a      	ldrh	r2, [r7, #8]
 800868e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800869a:	b29b      	uxth	r3, r3
 800869c:	2bff      	cmp	r3, #255	@ 0xff
 800869e:	d906      	bls.n	80086ae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	22ff      	movs	r2, #255	@ 0xff
 80086a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80086a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	e007      	b.n	80086be <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80086b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d024      	beq.n	8008710 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	3b01      	subs	r3, #1
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	3301      	adds	r3, #1
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	8979      	ldrh	r1, [r7, #10]
 8008702:	4b4e      	ldr	r3, [pc, #312]	@ (800883c <HAL_I2C_Master_Transmit+0x228>)
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 fbf1 	bl	8008ef0 <I2C_TransferConfig>
 800870e:	e066      	b.n	80087de <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008714:	b2da      	uxtb	r2, r3
 8008716:	8979      	ldrh	r1, [r7, #10]
 8008718:	4b48      	ldr	r3, [pc, #288]	@ (800883c <HAL_I2C_Master_Transmit+0x228>)
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 fbe6 	bl	8008ef0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008724:	e05b      	b.n	80087de <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	6a39      	ldr	r1, [r7, #32]
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 f9f3 	bl	8008b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e07b      	b.n	8008832 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	781a      	ldrb	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008762:	3b01      	subs	r3, #1
 8008764:	b29a      	uxth	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d034      	beq.n	80087de <HAL_I2C_Master_Transmit+0x1ca>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008778:	2b00      	cmp	r3, #0
 800877a:	d130      	bne.n	80087de <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	2200      	movs	r2, #0
 8008784:	2180      	movs	r1, #128	@ 0x80
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f976 	bl	8008a78 <I2C_WaitOnFlagUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e04d      	b.n	8008832 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800879a:	b29b      	uxth	r3, r3
 800879c:	2bff      	cmp	r3, #255	@ 0xff
 800879e:	d90e      	bls.n	80087be <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	22ff      	movs	r2, #255	@ 0xff
 80087a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	8979      	ldrh	r1, [r7, #10]
 80087ae:	2300      	movs	r3, #0
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fb9a 	bl	8008ef0 <I2C_TransferConfig>
 80087bc:	e00f      	b.n	80087de <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	8979      	ldrh	r1, [r7, #10]
 80087d0:	2300      	movs	r3, #0
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 fb89 	bl	8008ef0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d19e      	bne.n	8008726 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	6a39      	ldr	r1, [r7, #32]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f9d9 	bl	8008ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e01a      	b.n	8008832 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2220      	movs	r2, #32
 8008802:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6859      	ldr	r1, [r3, #4]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4b0c      	ldr	r3, [pc, #48]	@ (8008840 <HAL_I2C_Master_Transmit+0x22c>)
 8008810:	400b      	ands	r3, r1
 8008812:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	e000      	b.n	8008832 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008830:	2302      	movs	r3, #2
  }
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	80002000 	.word	0x80002000
 8008840:	fe00e800 	.word	0xfe00e800

08008844 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	607a      	str	r2, [r7, #4]
 800884e:	461a      	mov	r2, r3
 8008850:	460b      	mov	r3, r1
 8008852:	817b      	strh	r3, [r7, #10]
 8008854:	4613      	mov	r3, r2
 8008856:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b20      	cmp	r3, #32
 8008862:	f040 80db 	bne.w	8008a1c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800886c:	2b01      	cmp	r3, #1
 800886e:	d101      	bne.n	8008874 <HAL_I2C_Master_Receive+0x30>
 8008870:	2302      	movs	r3, #2
 8008872:	e0d4      	b.n	8008a1e <HAL_I2C_Master_Receive+0x1da>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800887c:	f7ff f95e 	bl	8007b3c <HAL_GetTick>
 8008880:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2319      	movs	r3, #25
 8008888:	2201      	movs	r2, #1
 800888a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 f8f2 	bl	8008a78 <I2C_WaitOnFlagUntilTimeout>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e0bf      	b.n	8008a1e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2222      	movs	r2, #34	@ 0x22
 80088a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2210      	movs	r2, #16
 80088aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	893a      	ldrh	r2, [r7, #8]
 80088be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2bff      	cmp	r3, #255	@ 0xff
 80088ce:	d90e      	bls.n	80088ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	22ff      	movs	r2, #255	@ 0xff
 80088d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	8979      	ldrh	r1, [r7, #10]
 80088de:	4b52      	ldr	r3, [pc, #328]	@ (8008a28 <HAL_I2C_Master_Receive+0x1e4>)
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fb02 	bl	8008ef0 <I2C_TransferConfig>
 80088ec:	e06d      	b.n	80089ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	8979      	ldrh	r1, [r7, #10]
 8008900:	4b49      	ldr	r3, [pc, #292]	@ (8008a28 <HAL_I2C_Master_Receive+0x1e4>)
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 faf1 	bl	8008ef0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800890e:	e05c      	b.n	80089ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	6a39      	ldr	r1, [r7, #32]
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 f989 	bl	8008c2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e07c      	b.n	8008a1e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008940:	3b01      	subs	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800894c:	b29b      	uxth	r3, r3
 800894e:	3b01      	subs	r3, #1
 8008950:	b29a      	uxth	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d034      	beq.n	80089ca <HAL_I2C_Master_Receive+0x186>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008964:	2b00      	cmp	r3, #0
 8008966:	d130      	bne.n	80089ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	2200      	movs	r2, #0
 8008970:	2180      	movs	r1, #128	@ 0x80
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 f880 	bl	8008a78 <I2C_WaitOnFlagUntilTimeout>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e04d      	b.n	8008a1e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008986:	b29b      	uxth	r3, r3
 8008988:	2bff      	cmp	r3, #255	@ 0xff
 800898a:	d90e      	bls.n	80089aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	22ff      	movs	r2, #255	@ 0xff
 8008990:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008996:	b2da      	uxtb	r2, r3
 8008998:	8979      	ldrh	r1, [r7, #10]
 800899a:	2300      	movs	r3, #0
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 faa4 	bl	8008ef0 <I2C_TransferConfig>
 80089a8:	e00f      	b.n	80089ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	8979      	ldrh	r1, [r7, #10]
 80089bc:	2300      	movs	r3, #0
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fa93 	bl	8008ef0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d19d      	bne.n	8008910 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	6a39      	ldr	r1, [r7, #32]
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 f8e3 	bl	8008ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e01a      	b.n	8008a1e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2220      	movs	r2, #32
 80089ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6859      	ldr	r1, [r3, #4]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	4b0c      	ldr	r3, [pc, #48]	@ (8008a2c <HAL_I2C_Master_Receive+0x1e8>)
 80089fc:	400b      	ands	r3, r1
 80089fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2220      	movs	r2, #32
 8008a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e000      	b.n	8008a1e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008a1c:	2302      	movs	r3, #2
  }
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	80002400 	.word	0x80002400
 8008a2c:	fe00e800 	.word	0xfe00e800

08008a30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d103      	bne.n	8008a4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d007      	beq.n	8008a6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0201 	orr.w	r2, r2, #1
 8008a6a:	619a      	str	r2, [r3, #24]
  }
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	4613      	mov	r3, r2
 8008a86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a88:	e031      	b.n	8008aee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a90:	d02d      	beq.n	8008aee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a92:	f7ff f853 	bl	8007b3c <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d302      	bcc.n	8008aa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d122      	bne.n	8008aee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	699a      	ldr	r2, [r3, #24]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	bf0c      	ite	eq
 8008ab8:	2301      	moveq	r3, #1
 8008aba:	2300      	movne	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d113      	bne.n	8008aee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aca:	f043 0220 	orr.w	r2, r3, #32
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e00f      	b.n	8008b0e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	699a      	ldr	r2, [r3, #24]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4013      	ands	r3, r2
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	bf0c      	ite	eq
 8008afe:	2301      	moveq	r3, #1
 8008b00:	2300      	movne	r3, #0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	461a      	mov	r2, r3
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d0be      	beq.n	8008a8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b22:	e033      	b.n	8008b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f901 	bl	8008d30 <I2C_IsErrorOccurred>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e031      	b.n	8008b9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b3e:	d025      	beq.n	8008b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b40:	f7fe fffc 	bl	8007b3c <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d302      	bcc.n	8008b56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d11a      	bne.n	8008b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d013      	beq.n	8008b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b68:	f043 0220 	orr.w	r2, r3, #32
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2220      	movs	r2, #32
 8008b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e007      	b.n	8008b9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d1c4      	bne.n	8008b24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bb0:	e02f      	b.n	8008c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f8ba 	bl	8008d30 <I2C_IsErrorOccurred>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e02d      	b.n	8008c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bc6:	f7fe ffb9 	bl	8007b3c <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d302      	bcc.n	8008bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d11a      	bne.n	8008c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d013      	beq.n	8008c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bee:	f043 0220 	orr.w	r2, r3, #32
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e007      	b.n	8008c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b20      	cmp	r3, #32
 8008c1e:	d1c8      	bne.n	8008bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c38:	e06b      	b.n	8008d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 f876 	bl	8008d30 <I2C_IsErrorOccurred>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e069      	b.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	d138      	bne.n	8008cce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d105      	bne.n	8008c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	e055      	b.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f003 0310 	and.w	r3, r3, #16
 8008c80:	2b10      	cmp	r3, #16
 8008c82:	d107      	bne.n	8008c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2210      	movs	r2, #16
 8008c8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2204      	movs	r2, #4
 8008c90:	645a      	str	r2, [r3, #68]	@ 0x44
 8008c92:	e002      	b.n	8008c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6859      	ldr	r1, [r3, #4]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	4b1f      	ldr	r3, [pc, #124]	@ (8008d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008cae:	400b      	ands	r3, r1
 8008cb0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e029      	b.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cce:	f7fe ff35 	bl	8007b3c <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d302      	bcc.n	8008ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d116      	bne.n	8008d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	f003 0304 	and.w	r3, r3, #4
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	d00f      	beq.n	8008d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf6:	f043 0220 	orr.w	r2, r3, #32
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e007      	b.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d18c      	bne.n	8008c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	fe00e800 	.word	0xfe00e800

08008d30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	@ 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	f003 0310 	and.w	r3, r3, #16
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d068      	beq.n	8008e2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2210      	movs	r2, #16
 8008d62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d64:	e049      	b.n	8008dfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d6c:	d045      	beq.n	8008dfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d6e:	f7fe fee5 	bl	8007b3c <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d302      	bcc.n	8008d84 <I2C_IsErrorOccurred+0x54>
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d13a      	bne.n	8008dfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008da2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008da6:	d121      	bne.n	8008dec <I2C_IsErrorOccurred+0xbc>
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dae:	d01d      	beq.n	8008dec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008db0:	7cfb      	ldrb	r3, [r7, #19]
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	d01a      	beq.n	8008dec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008dc6:	f7fe feb9 	bl	8007b3c <HAL_GetTick>
 8008dca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dcc:	e00e      	b.n	8008dec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008dce:	f7fe feb5 	bl	8007b3c <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b19      	cmp	r3, #25
 8008dda:	d907      	bls.n	8008dec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	f043 0320 	orr.w	r3, r3, #32
 8008de2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008dea:	e006      	b.n	8008dfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	d1e9      	bne.n	8008dce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	f003 0320 	and.w	r3, r3, #32
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	d003      	beq.n	8008e10 <I2C_IsErrorOccurred+0xe0>
 8008e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0aa      	beq.n	8008d66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d103      	bne.n	8008e20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	f043 0304 	orr.w	r3, r3, #4
 8008e26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	f043 0301 	orr.w	r3, r3, #1
 8008e46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00b      	beq.n	8008e7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	f043 0308 	orr.w	r3, r3, #8
 8008e68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	f043 0302 	orr.w	r3, r3, #2
 8008e8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01c      	beq.n	8008ede <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7ff fdc3 	bl	8008a30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6859      	ldr	r1, [r3, #4]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8008eec <I2C_IsErrorOccurred+0x1bc>)
 8008eb6:	400b      	ands	r3, r1
 8008eb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3728      	adds	r7, #40	@ 0x28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	fe00e800 	.word	0xfe00e800

08008ef0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	607b      	str	r3, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	817b      	strh	r3, [r7, #10]
 8008efe:	4613      	mov	r3, r2
 8008f00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f02:	897b      	ldrh	r3, [r7, #10]
 8008f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f08:	7a7b      	ldrb	r3, [r7, #9]
 8008f0a:	041b      	lsls	r3, r3, #16
 8008f0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	0d5b      	lsrs	r3, r3, #21
 8008f2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008f2e:	4b08      	ldr	r3, [pc, #32]	@ (8008f50 <I2C_TransferConfig+0x60>)
 8008f30:	430b      	orrs	r3, r1
 8008f32:	43db      	mvns	r3, r3
 8008f34:	ea02 0103 	and.w	r1, r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f42:	bf00      	nop
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	03ff63ff 	.word	0x03ff63ff

08008f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b20      	cmp	r3, #32
 8008f68:	d138      	bne.n	8008fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d101      	bne.n	8008f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f74:	2302      	movs	r3, #2
 8008f76:	e032      	b.n	8008fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2224      	movs	r2, #36	@ 0x24
 8008f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6819      	ldr	r1, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0201 	orr.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e000      	b.n	8008fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fdc:	2302      	movs	r3, #2
  }
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d139      	bne.n	8009074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009006:	2b01      	cmp	r3, #1
 8009008:	d101      	bne.n	800900e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800900a:	2302      	movs	r3, #2
 800900c:	e033      	b.n	8009076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2224      	movs	r2, #36	@ 0x24
 800901a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 0201 	bic.w	r2, r2, #1
 800902c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800903c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	021b      	lsls	r3, r3, #8
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4313      	orrs	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0201 	orr.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2220      	movs	r2, #32
 8009064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	e000      	b.n	8009076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009074:	2302      	movs	r3, #2
  }
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
	...

08009084 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009088:	4b0d      	ldr	r3, [pc, #52]	@ (80090c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009094:	d102      	bne.n	800909c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8009096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800909a:	e00b      	b.n	80090b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800909c:	4b08      	ldr	r3, [pc, #32]	@ (80090c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800909e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090aa:	d102      	bne.n	80090b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80090ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090b0:	e000      	b.n	80090b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80090b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40007000 	.word	0x40007000

080090c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d141      	bne.n	8009156 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80090d2:	4b4b      	ldr	r3, [pc, #300]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80090da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090de:	d131      	bne.n	8009144 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80090e0:	4b47      	ldr	r3, [pc, #284]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090e6:	4a46      	ldr	r2, [pc, #280]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80090f0:	4b43      	ldr	r3, [pc, #268]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80090f8:	4a41      	ldr	r2, [pc, #260]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80090fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009100:	4b40      	ldr	r3, [pc, #256]	@ (8009204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2232      	movs	r2, #50	@ 0x32
 8009106:	fb02 f303 	mul.w	r3, r2, r3
 800910a:	4a3f      	ldr	r2, [pc, #252]	@ (8009208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800910c:	fba2 2303 	umull	r2, r3, r2, r3
 8009110:	0c9b      	lsrs	r3, r3, #18
 8009112:	3301      	adds	r3, #1
 8009114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009116:	e002      	b.n	800911e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3b01      	subs	r3, #1
 800911c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800911e:	4b38      	ldr	r3, [pc, #224]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800912a:	d102      	bne.n	8009132 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1f2      	bne.n	8009118 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009132:	4b33      	ldr	r3, [pc, #204]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800913a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800913e:	d158      	bne.n	80091f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e057      	b.n	80091f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009144:	4b2e      	ldr	r3, [pc, #184]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800914a:	4a2d      	ldr	r2, [pc, #180]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800914c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009150:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009154:	e04d      	b.n	80091f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800915c:	d141      	bne.n	80091e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800915e:	4b28      	ldr	r3, [pc, #160]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800916a:	d131      	bne.n	80091d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800916c:	4b24      	ldr	r3, [pc, #144]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800916e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009172:	4a23      	ldr	r2, [pc, #140]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009178:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800917c:	4b20      	ldr	r3, [pc, #128]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009184:	4a1e      	ldr	r2, [pc, #120]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800918a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800918c:	4b1d      	ldr	r3, [pc, #116]	@ (8009204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2232      	movs	r2, #50	@ 0x32
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	4a1c      	ldr	r2, [pc, #112]	@ (8009208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009198:	fba2 2303 	umull	r2, r3, r2, r3
 800919c:	0c9b      	lsrs	r3, r3, #18
 800919e:	3301      	adds	r3, #1
 80091a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091a2:	e002      	b.n	80091aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091aa:	4b15      	ldr	r3, [pc, #84]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091b6:	d102      	bne.n	80091be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1f2      	bne.n	80091a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80091be:	4b10      	ldr	r3, [pc, #64]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091ca:	d112      	bne.n	80091f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e011      	b.n	80091f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80091d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80091e0:	e007      	b.n	80091f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80091e2:	4b07      	ldr	r3, [pc, #28]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80091ea:	4a05      	ldr	r2, [pc, #20]	@ (8009200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80091f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	40007000 	.word	0x40007000
 8009204:	20000004 	.word	0x20000004
 8009208:	431bde83 	.word	0x431bde83

0800920c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d102      	bne.n	8009220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	f000 bc08 	b.w	8009a30 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009220:	4b96      	ldr	r3, [pc, #600]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f003 030c 	and.w	r3, r3, #12
 8009228:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800922a:	4b94      	ldr	r3, [pc, #592]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 80e4 	beq.w	800940a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d007      	beq.n	8009258 <HAL_RCC_OscConfig+0x4c>
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	2b0c      	cmp	r3, #12
 800924c:	f040 808b 	bne.w	8009366 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	2b01      	cmp	r3, #1
 8009254:	f040 8087 	bne.w	8009366 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009258:	4b88      	ldr	r3, [pc, #544]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <HAL_RCC_OscConfig+0x64>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e3df      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a1a      	ldr	r2, [r3, #32]
 8009274:	4b81      	ldr	r3, [pc, #516]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0308 	and.w	r3, r3, #8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d004      	beq.n	800928a <HAL_RCC_OscConfig+0x7e>
 8009280:	4b7e      	ldr	r3, [pc, #504]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009288:	e005      	b.n	8009296 <HAL_RCC_OscConfig+0x8a>
 800928a:	4b7c      	ldr	r3, [pc, #496]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 800928c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009290:	091b      	lsrs	r3, r3, #4
 8009292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009296:	4293      	cmp	r3, r2
 8009298:	d223      	bcs.n	80092e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fdcc 	bl	8009e3c <RCC_SetFlashLatencyFromMSIRange>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e3c0      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80092ae:	4b73      	ldr	r3, [pc, #460]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a72      	ldr	r2, [pc, #456]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092b4:	f043 0308 	orr.w	r3, r3, #8
 80092b8:	6013      	str	r3, [r2, #0]
 80092ba:	4b70      	ldr	r3, [pc, #448]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	496d      	ldr	r1, [pc, #436]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092c8:	4313      	orrs	r3, r2
 80092ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80092cc:	4b6b      	ldr	r3, [pc, #428]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	021b      	lsls	r3, r3, #8
 80092da:	4968      	ldr	r1, [pc, #416]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	604b      	str	r3, [r1, #4]
 80092e0:	e025      	b.n	800932e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80092e2:	4b66      	ldr	r3, [pc, #408]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a65      	ldr	r2, [pc, #404]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092e8:	f043 0308 	orr.w	r3, r3, #8
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	4b63      	ldr	r3, [pc, #396]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	4960      	ldr	r1, [pc, #384]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80092fc:	4313      	orrs	r3, r2
 80092fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009300:	4b5e      	ldr	r3, [pc, #376]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	495b      	ldr	r1, [pc, #364]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009310:	4313      	orrs	r3, r2
 8009312:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d109      	bne.n	800932e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	4618      	mov	r0, r3
 8009320:	f000 fd8c 	bl	8009e3c <RCC_SetFlashLatencyFromMSIRange>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e380      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800932e:	f000 fcc1 	bl	8009cb4 <HAL_RCC_GetSysClockFreq>
 8009332:	4602      	mov	r2, r0
 8009334:	4b51      	ldr	r3, [pc, #324]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	091b      	lsrs	r3, r3, #4
 800933a:	f003 030f 	and.w	r3, r3, #15
 800933e:	4950      	ldr	r1, [pc, #320]	@ (8009480 <HAL_RCC_OscConfig+0x274>)
 8009340:	5ccb      	ldrb	r3, [r1, r3]
 8009342:	f003 031f 	and.w	r3, r3, #31
 8009346:	fa22 f303 	lsr.w	r3, r2, r3
 800934a:	4a4e      	ldr	r2, [pc, #312]	@ (8009484 <HAL_RCC_OscConfig+0x278>)
 800934c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800934e:	4b4e      	ldr	r3, [pc, #312]	@ (8009488 <HAL_RCC_OscConfig+0x27c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fba2 	bl	8007a9c <HAL_InitTick>
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d052      	beq.n	8009408 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	e364      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d032      	beq.n	80093d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800936e:	4b43      	ldr	r3, [pc, #268]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a42      	ldr	r2, [pc, #264]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009374:	f043 0301 	orr.w	r3, r3, #1
 8009378:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800937a:	f7fe fbdf 	bl	8007b3c <HAL_GetTick>
 800937e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009380:	e008      	b.n	8009394 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009382:	f7fe fbdb 	bl	8007b3c <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d901      	bls.n	8009394 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e34d      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009394:	4b39      	ldr	r3, [pc, #228]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0f0      	beq.n	8009382 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80093a0:	4b36      	ldr	r3, [pc, #216]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a35      	ldr	r2, [pc, #212]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80093a6:	f043 0308 	orr.w	r3, r3, #8
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	4b33      	ldr	r3, [pc, #204]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a1b      	ldr	r3, [r3, #32]
 80093b8:	4930      	ldr	r1, [pc, #192]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80093be:	4b2f      	ldr	r3, [pc, #188]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	021b      	lsls	r3, r3, #8
 80093cc:	492b      	ldr	r1, [pc, #172]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	604b      	str	r3, [r1, #4]
 80093d2:	e01a      	b.n	800940a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80093d4:	4b29      	ldr	r3, [pc, #164]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a28      	ldr	r2, [pc, #160]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80093da:	f023 0301 	bic.w	r3, r3, #1
 80093de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80093e0:	f7fe fbac 	bl	8007b3c <HAL_GetTick>
 80093e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80093e6:	e008      	b.n	80093fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80093e8:	f7fe fba8 	bl	8007b3c <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d901      	bls.n	80093fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e31a      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80093fa:	4b20      	ldr	r3, [pc, #128]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1f0      	bne.n	80093e8 <HAL_RCC_OscConfig+0x1dc>
 8009406:	e000      	b.n	800940a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d073      	beq.n	80094fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	2b08      	cmp	r3, #8
 800941a:	d005      	beq.n	8009428 <HAL_RCC_OscConfig+0x21c>
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	2b0c      	cmp	r3, #12
 8009420:	d10e      	bne.n	8009440 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b03      	cmp	r3, #3
 8009426:	d10b      	bne.n	8009440 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009428:	4b14      	ldr	r3, [pc, #80]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d063      	beq.n	80094fc <HAL_RCC_OscConfig+0x2f0>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d15f      	bne.n	80094fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e2f7      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009448:	d106      	bne.n	8009458 <HAL_RCC_OscConfig+0x24c>
 800944a:	4b0c      	ldr	r3, [pc, #48]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a0b      	ldr	r2, [pc, #44]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	e025      	b.n	80094a4 <HAL_RCC_OscConfig+0x298>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009460:	d114      	bne.n	800948c <HAL_RCC_OscConfig+0x280>
 8009462:	4b06      	ldr	r3, [pc, #24]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a05      	ldr	r2, [pc, #20]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	4b03      	ldr	r3, [pc, #12]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a02      	ldr	r2, [pc, #8]	@ (800947c <HAL_RCC_OscConfig+0x270>)
 8009474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009478:	6013      	str	r3, [r2, #0]
 800947a:	e013      	b.n	80094a4 <HAL_RCC_OscConfig+0x298>
 800947c:	40021000 	.word	0x40021000
 8009480:	0801d680 	.word	0x0801d680
 8009484:	20000004 	.word	0x20000004
 8009488:	20000008 	.word	0x20000008
 800948c:	4ba0      	ldr	r3, [pc, #640]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a9f      	ldr	r2, [pc, #636]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	4b9d      	ldr	r3, [pc, #628]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a9c      	ldr	r2, [pc, #624]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 800949e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d013      	beq.n	80094d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ac:	f7fe fb46 	bl	8007b3c <HAL_GetTick>
 80094b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094b2:	e008      	b.n	80094c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094b4:	f7fe fb42 	bl	8007b3c <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	2b64      	cmp	r3, #100	@ 0x64
 80094c0:	d901      	bls.n	80094c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e2b4      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094c6:	4b92      	ldr	r3, [pc, #584]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0f0      	beq.n	80094b4 <HAL_RCC_OscConfig+0x2a8>
 80094d2:	e014      	b.n	80094fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d4:	f7fe fb32 	bl	8007b3c <HAL_GetTick>
 80094d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80094da:	e008      	b.n	80094ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094dc:	f7fe fb2e 	bl	8007b3c <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b64      	cmp	r3, #100	@ 0x64
 80094e8:	d901      	bls.n	80094ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e2a0      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80094ee:	4b88      	ldr	r3, [pc, #544]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1f0      	bne.n	80094dc <HAL_RCC_OscConfig+0x2d0>
 80094fa:	e000      	b.n	80094fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d060      	beq.n	80095cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	2b04      	cmp	r3, #4
 800950e:	d005      	beq.n	800951c <HAL_RCC_OscConfig+0x310>
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	2b0c      	cmp	r3, #12
 8009514:	d119      	bne.n	800954a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b02      	cmp	r3, #2
 800951a:	d116      	bne.n	800954a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800951c:	4b7c      	ldr	r3, [pc, #496]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <HAL_RCC_OscConfig+0x328>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e27d      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009534:	4b76      	ldr	r3, [pc, #472]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	061b      	lsls	r3, r3, #24
 8009542:	4973      	ldr	r1, [pc, #460]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009544:	4313      	orrs	r3, r2
 8009546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009548:	e040      	b.n	80095cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d023      	beq.n	800959a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009552:	4b6f      	ldr	r3, [pc, #444]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a6e      	ldr	r2, [pc, #440]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800955c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800955e:	f7fe faed 	bl	8007b3c <HAL_GetTick>
 8009562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009564:	e008      	b.n	8009578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009566:	f7fe fae9 	bl	8007b3c <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	d901      	bls.n	8009578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e25b      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009578:	4b65      	ldr	r3, [pc, #404]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009580:	2b00      	cmp	r3, #0
 8009582:	d0f0      	beq.n	8009566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009584:	4b62      	ldr	r3, [pc, #392]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	061b      	lsls	r3, r3, #24
 8009592:	495f      	ldr	r1, [pc, #380]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009594:	4313      	orrs	r3, r2
 8009596:	604b      	str	r3, [r1, #4]
 8009598:	e018      	b.n	80095cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800959a:	4b5d      	ldr	r3, [pc, #372]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a5c      	ldr	r2, [pc, #368]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80095a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a6:	f7fe fac9 	bl	8007b3c <HAL_GetTick>
 80095aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80095ac:	e008      	b.n	80095c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095ae:	f7fe fac5 	bl	8007b3c <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d901      	bls.n	80095c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e237      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80095c0:	4b53      	ldr	r3, [pc, #332]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1f0      	bne.n	80095ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 0308 	and.w	r3, r3, #8
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d03c      	beq.n	8009652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01c      	beq.n	800961a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80095e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095e6:	4a4a      	ldr	r2, [pc, #296]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80095e8:	f043 0301 	orr.w	r3, r3, #1
 80095ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095f0:	f7fe faa4 	bl	8007b3c <HAL_GetTick>
 80095f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095f6:	e008      	b.n	800960a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095f8:	f7fe faa0 	bl	8007b3c <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b02      	cmp	r3, #2
 8009604:	d901      	bls.n	800960a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e212      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800960a:	4b41      	ldr	r3, [pc, #260]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 800960c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0ef      	beq.n	80095f8 <HAL_RCC_OscConfig+0x3ec>
 8009618:	e01b      	b.n	8009652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800961a:	4b3d      	ldr	r3, [pc, #244]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 800961c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009620:	4a3b      	ldr	r2, [pc, #236]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009622:	f023 0301 	bic.w	r3, r3, #1
 8009626:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800962a:	f7fe fa87 	bl	8007b3c <HAL_GetTick>
 800962e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009630:	e008      	b.n	8009644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009632:	f7fe fa83 	bl	8007b3c <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b02      	cmp	r3, #2
 800963e:	d901      	bls.n	8009644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e1f5      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009644:	4b32      	ldr	r3, [pc, #200]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1ef      	bne.n	8009632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 80a6 	beq.w	80097ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009660:	2300      	movs	r3, #0
 8009662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009664:	4b2a      	ldr	r3, [pc, #168]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10d      	bne.n	800968c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009670:	4b27      	ldr	r3, [pc, #156]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009674:	4a26      	ldr	r2, [pc, #152]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800967a:	6593      	str	r3, [r2, #88]	@ 0x58
 800967c:	4b24      	ldr	r3, [pc, #144]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 800967e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009684:	60bb      	str	r3, [r7, #8]
 8009686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009688:	2301      	movs	r3, #1
 800968a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800968c:	4b21      	ldr	r3, [pc, #132]	@ (8009714 <HAL_RCC_OscConfig+0x508>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009694:	2b00      	cmp	r3, #0
 8009696:	d118      	bne.n	80096ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009698:	4b1e      	ldr	r3, [pc, #120]	@ (8009714 <HAL_RCC_OscConfig+0x508>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a1d      	ldr	r2, [pc, #116]	@ (8009714 <HAL_RCC_OscConfig+0x508>)
 800969e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096a4:	f7fe fa4a 	bl	8007b3c <HAL_GetTick>
 80096a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096aa:	e008      	b.n	80096be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096ac:	f7fe fa46 	bl	8007b3c <HAL_GetTick>
 80096b0:	4602      	mov	r2, r0
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d901      	bls.n	80096be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e1b8      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096be:	4b15      	ldr	r3, [pc, #84]	@ (8009714 <HAL_RCC_OscConfig+0x508>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f0      	beq.n	80096ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d108      	bne.n	80096e4 <HAL_RCC_OscConfig+0x4d8>
 80096d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80096d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d8:	4a0d      	ldr	r2, [pc, #52]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80096da:	f043 0301 	orr.w	r3, r3, #1
 80096de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80096e2:	e029      	b.n	8009738 <HAL_RCC_OscConfig+0x52c>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2b05      	cmp	r3, #5
 80096ea:	d115      	bne.n	8009718 <HAL_RCC_OscConfig+0x50c>
 80096ec:	4b08      	ldr	r3, [pc, #32]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80096ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f2:	4a07      	ldr	r2, [pc, #28]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80096f4:	f043 0304 	orr.w	r3, r3, #4
 80096f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80096fc:	4b04      	ldr	r3, [pc, #16]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 80096fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009702:	4a03      	ldr	r2, [pc, #12]	@ (8009710 <HAL_RCC_OscConfig+0x504>)
 8009704:	f043 0301 	orr.w	r3, r3, #1
 8009708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800970c:	e014      	b.n	8009738 <HAL_RCC_OscConfig+0x52c>
 800970e:	bf00      	nop
 8009710:	40021000 	.word	0x40021000
 8009714:	40007000 	.word	0x40007000
 8009718:	4b9d      	ldr	r3, [pc, #628]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 800971a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800971e:	4a9c      	ldr	r2, [pc, #624]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 8009720:	f023 0301 	bic.w	r3, r3, #1
 8009724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009728:	4b99      	ldr	r3, [pc, #612]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 800972a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800972e:	4a98      	ldr	r2, [pc, #608]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 8009730:	f023 0304 	bic.w	r3, r3, #4
 8009734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d016      	beq.n	800976e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009740:	f7fe f9fc 	bl	8007b3c <HAL_GetTick>
 8009744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009746:	e00a      	b.n	800975e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009748:	f7fe f9f8 	bl	8007b3c <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009756:	4293      	cmp	r3, r2
 8009758:	d901      	bls.n	800975e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	e168      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800975e:	4b8c      	ldr	r3, [pc, #560]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 8009760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009764:	f003 0302 	and.w	r3, r3, #2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0ed      	beq.n	8009748 <HAL_RCC_OscConfig+0x53c>
 800976c:	e015      	b.n	800979a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800976e:	f7fe f9e5 	bl	8007b3c <HAL_GetTick>
 8009772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009774:	e00a      	b.n	800978c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009776:	f7fe f9e1 	bl	8007b3c <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009784:	4293      	cmp	r3, r2
 8009786:	d901      	bls.n	800978c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009788:	2303      	movs	r3, #3
 800978a:	e151      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800978c:	4b80      	ldr	r3, [pc, #512]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 800978e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1ed      	bne.n	8009776 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800979a:	7ffb      	ldrb	r3, [r7, #31]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d105      	bne.n	80097ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097a0:	4b7b      	ldr	r3, [pc, #492]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80097a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a4:	4a7a      	ldr	r2, [pc, #488]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80097a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0320 	and.w	r3, r3, #32
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d03c      	beq.n	8009832 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01c      	beq.n	80097fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80097c0:	4b73      	ldr	r3, [pc, #460]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80097c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097c6:	4a72      	ldr	r2, [pc, #456]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80097c8:	f043 0301 	orr.w	r3, r3, #1
 80097cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097d0:	f7fe f9b4 	bl	8007b3c <HAL_GetTick>
 80097d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80097d6:	e008      	b.n	80097ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097d8:	f7fe f9b0 	bl	8007b3c <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e122      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80097ea:	4b69      	ldr	r3, [pc, #420]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80097ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0ef      	beq.n	80097d8 <HAL_RCC_OscConfig+0x5cc>
 80097f8:	e01b      	b.n	8009832 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80097fa:	4b65      	ldr	r3, [pc, #404]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80097fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009800:	4a63      	ldr	r2, [pc, #396]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 8009802:	f023 0301 	bic.w	r3, r3, #1
 8009806:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800980a:	f7fe f997 	bl	8007b3c <HAL_GetTick>
 800980e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009810:	e008      	b.n	8009824 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009812:	f7fe f993 	bl	8007b3c <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b02      	cmp	r3, #2
 800981e:	d901      	bls.n	8009824 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e105      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009824:	4b5a      	ldr	r3, [pc, #360]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 8009826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800982a:	f003 0302 	and.w	r3, r3, #2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1ef      	bne.n	8009812 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 80f9 	beq.w	8009a2e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	2b02      	cmp	r3, #2
 8009842:	f040 80cf 	bne.w	80099e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009846:	4b52      	ldr	r3, [pc, #328]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f003 0203 	and.w	r2, r3, #3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009856:	429a      	cmp	r2, r3
 8009858:	d12c      	bne.n	80098b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009864:	3b01      	subs	r3, #1
 8009866:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009868:	429a      	cmp	r2, r3
 800986a:	d123      	bne.n	80098b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009876:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009878:	429a      	cmp	r2, r3
 800987a:	d11b      	bne.n	80098b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009886:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009888:	429a      	cmp	r2, r3
 800988a:	d113      	bne.n	80098b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009896:	085b      	lsrs	r3, r3, #1
 8009898:	3b01      	subs	r3, #1
 800989a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800989c:	429a      	cmp	r2, r3
 800989e:	d109      	bne.n	80098b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098aa:	085b      	lsrs	r3, r3, #1
 80098ac:	3b01      	subs	r3, #1
 80098ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d071      	beq.n	8009998 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	2b0c      	cmp	r3, #12
 80098b8:	d068      	beq.n	800998c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80098ba:	4b35      	ldr	r3, [pc, #212]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d105      	bne.n	80098d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80098c6:	4b32      	ldr	r3, [pc, #200]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e0ac      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80098d6:	4b2e      	ldr	r3, [pc, #184]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a2d      	ldr	r2, [pc, #180]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80098dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80098e2:	f7fe f92b 	bl	8007b3c <HAL_GetTick>
 80098e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098e8:	e008      	b.n	80098fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ea:	f7fe f927 	bl	8007b3c <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d901      	bls.n	80098fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e099      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098fc:	4b24      	ldr	r3, [pc, #144]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1f0      	bne.n	80098ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009908:	4b21      	ldr	r3, [pc, #132]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	4b21      	ldr	r3, [pc, #132]	@ (8009994 <HAL_RCC_OscConfig+0x788>)
 800990e:	4013      	ands	r3, r2
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009918:	3a01      	subs	r2, #1
 800991a:	0112      	lsls	r2, r2, #4
 800991c:	4311      	orrs	r1, r2
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009922:	0212      	lsls	r2, r2, #8
 8009924:	4311      	orrs	r1, r2
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800992a:	0852      	lsrs	r2, r2, #1
 800992c:	3a01      	subs	r2, #1
 800992e:	0552      	lsls	r2, r2, #21
 8009930:	4311      	orrs	r1, r2
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009936:	0852      	lsrs	r2, r2, #1
 8009938:	3a01      	subs	r2, #1
 800993a:	0652      	lsls	r2, r2, #25
 800993c:	4311      	orrs	r1, r2
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009942:	06d2      	lsls	r2, r2, #27
 8009944:	430a      	orrs	r2, r1
 8009946:	4912      	ldr	r1, [pc, #72]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 8009948:	4313      	orrs	r3, r2
 800994a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800994c:	4b10      	ldr	r3, [pc, #64]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a0f      	ldr	r2, [pc, #60]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 8009952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009956:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009958:	4b0d      	ldr	r3, [pc, #52]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	4a0c      	ldr	r2, [pc, #48]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 800995e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009962:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009964:	f7fe f8ea 	bl	8007b3c <HAL_GetTick>
 8009968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800996a:	e008      	b.n	800997e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800996c:	f7fe f8e6 	bl	8007b3c <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b02      	cmp	r3, #2
 8009978:	d901      	bls.n	800997e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e058      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800997e:	4b04      	ldr	r3, [pc, #16]	@ (8009990 <HAL_RCC_OscConfig+0x784>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0f0      	beq.n	800996c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800998a:	e050      	b.n	8009a2e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e04f      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
 8009990:	40021000 	.word	0x40021000
 8009994:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009998:	4b27      	ldr	r3, [pc, #156]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d144      	bne.n	8009a2e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80099a4:	4b24      	ldr	r3, [pc, #144]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a23      	ldr	r2, [pc, #140]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 80099aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80099b0:	4b21      	ldr	r3, [pc, #132]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	4a20      	ldr	r2, [pc, #128]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 80099b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80099bc:	f7fe f8be 	bl	8007b3c <HAL_GetTick>
 80099c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80099c2:	e008      	b.n	80099d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099c4:	f7fe f8ba 	bl	8007b3c <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d901      	bls.n	80099d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e02c      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80099d6:	4b18      	ldr	r3, [pc, #96]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0f0      	beq.n	80099c4 <HAL_RCC_OscConfig+0x7b8>
 80099e2:	e024      	b.n	8009a2e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	2b0c      	cmp	r3, #12
 80099e8:	d01f      	beq.n	8009a2a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099ea:	4b13      	ldr	r3, [pc, #76]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a12      	ldr	r2, [pc, #72]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 80099f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f6:	f7fe f8a1 	bl	8007b3c <HAL_GetTick>
 80099fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099fc:	e008      	b.n	8009a10 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099fe:	f7fe f89d 	bl	8007b3c <HAL_GetTick>
 8009a02:	4602      	mov	r2, r0
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d901      	bls.n	8009a10 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e00f      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a10:	4b09      	ldr	r3, [pc, #36]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1f0      	bne.n	80099fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009a1c:	4b06      	ldr	r3, [pc, #24]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	4905      	ldr	r1, [pc, #20]	@ (8009a38 <HAL_RCC_OscConfig+0x82c>)
 8009a22:	4b06      	ldr	r3, [pc, #24]	@ (8009a3c <HAL_RCC_OscConfig+0x830>)
 8009a24:	4013      	ands	r3, r2
 8009a26:	60cb      	str	r3, [r1, #12]
 8009a28:	e001      	b.n	8009a2e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e000      	b.n	8009a30 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3720      	adds	r7, #32
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	40021000 	.word	0x40021000
 8009a3c:	feeefffc 	.word	0xfeeefffc

08009a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e11d      	b.n	8009c94 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a58:	4b90      	ldr	r3, [pc, #576]	@ (8009c9c <HAL_RCC_ClockConfig+0x25c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 030f 	and.w	r3, r3, #15
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d910      	bls.n	8009a88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a66:	4b8d      	ldr	r3, [pc, #564]	@ (8009c9c <HAL_RCC_ClockConfig+0x25c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f023 020f 	bic.w	r2, r3, #15
 8009a6e:	498b      	ldr	r1, [pc, #556]	@ (8009c9c <HAL_RCC_ClockConfig+0x25c>)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a76:	4b89      	ldr	r3, [pc, #548]	@ (8009c9c <HAL_RCC_ClockConfig+0x25c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 030f 	and.w	r3, r3, #15
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d001      	beq.n	8009a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e105      	b.n	8009c94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d010      	beq.n	8009ab6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	4b81      	ldr	r3, [pc, #516]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d908      	bls.n	8009ab6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	497b      	ldr	r1, [pc, #492]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d079      	beq.n	8009bb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d11e      	bne.n	8009b08 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009aca:	4b75      	ldr	r3, [pc, #468]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e0dc      	b.n	8009c94 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009ada:	f000 fa09 	bl	8009ef0 <RCC_GetSysClockFreqFromPLLSource>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	4a70      	ldr	r2, [pc, #448]	@ (8009ca4 <HAL_RCC_ClockConfig+0x264>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d946      	bls.n	8009b74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d140      	bne.n	8009b74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009af2:	4b6b      	ldr	r3, [pc, #428]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009afa:	4a69      	ldr	r2, [pc, #420]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009b02:	2380      	movs	r3, #128	@ 0x80
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	e035      	b.n	8009b74 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d107      	bne.n	8009b20 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b10:	4b63      	ldr	r3, [pc, #396]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d115      	bne.n	8009b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e0b9      	b.n	8009c94 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d107      	bne.n	8009b38 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009b28:	4b5d      	ldr	r3, [pc, #372]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0302 	and.w	r3, r3, #2
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d109      	bne.n	8009b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e0ad      	b.n	8009c94 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b38:	4b59      	ldr	r3, [pc, #356]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e0a5      	b.n	8009c94 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009b48:	f000 f8b4 	bl	8009cb4 <HAL_RCC_GetSysClockFreq>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4a55      	ldr	r2, [pc, #340]	@ (8009ca4 <HAL_RCC_ClockConfig+0x264>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d90f      	bls.n	8009b74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009b54:	4b52      	ldr	r3, [pc, #328]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d109      	bne.n	8009b74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009b60:	4b4f      	ldr	r3, [pc, #316]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b68:	4a4d      	ldr	r2, [pc, #308]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b6e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009b70:	2380      	movs	r3, #128	@ 0x80
 8009b72:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b74:	4b4a      	ldr	r3, [pc, #296]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f023 0203 	bic.w	r2, r3, #3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	4947      	ldr	r1, [pc, #284]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b86:	f7fd ffd9 	bl	8007b3c <HAL_GetTick>
 8009b8a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b8c:	e00a      	b.n	8009ba4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b8e:	f7fd ffd5 	bl	8007b3c <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d901      	bls.n	8009ba4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e077      	b.n	8009c94 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f003 020c 	and.w	r2, r3, #12
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d1eb      	bne.n	8009b8e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b80      	cmp	r3, #128	@ 0x80
 8009bba:	d105      	bne.n	8009bc8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009bbc:	4b38      	ldr	r3, [pc, #224]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	4a37      	ldr	r2, [pc, #220]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009bc6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d010      	beq.n	8009bf6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	4b31      	ldr	r3, [pc, #196]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d208      	bcs.n	8009bf6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009be4:	4b2e      	ldr	r3, [pc, #184]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	492b      	ldr	r1, [pc, #172]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009bf6:	4b29      	ldr	r3, [pc, #164]	@ (8009c9c <HAL_RCC_ClockConfig+0x25c>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 030f 	and.w	r3, r3, #15
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d210      	bcs.n	8009c26 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c04:	4b25      	ldr	r3, [pc, #148]	@ (8009c9c <HAL_RCC_ClockConfig+0x25c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f023 020f 	bic.w	r2, r3, #15
 8009c0c:	4923      	ldr	r1, [pc, #140]	@ (8009c9c <HAL_RCC_ClockConfig+0x25c>)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c14:	4b21      	ldr	r3, [pc, #132]	@ (8009c9c <HAL_RCC_ClockConfig+0x25c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 030f 	and.w	r3, r3, #15
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d001      	beq.n	8009c26 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e036      	b.n	8009c94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d008      	beq.n	8009c44 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	4918      	ldr	r1, [pc, #96]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0308 	and.w	r3, r3, #8
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d009      	beq.n	8009c64 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c50:	4b13      	ldr	r3, [pc, #76]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	4910      	ldr	r1, [pc, #64]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009c64:	f000 f826 	bl	8009cb4 <HAL_RCC_GetSysClockFreq>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca0 <HAL_RCC_ClockConfig+0x260>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	091b      	lsrs	r3, r3, #4
 8009c70:	f003 030f 	and.w	r3, r3, #15
 8009c74:	490c      	ldr	r1, [pc, #48]	@ (8009ca8 <HAL_RCC_ClockConfig+0x268>)
 8009c76:	5ccb      	ldrb	r3, [r1, r3]
 8009c78:	f003 031f 	and.w	r3, r3, #31
 8009c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c80:	4a0a      	ldr	r2, [pc, #40]	@ (8009cac <HAL_RCC_ClockConfig+0x26c>)
 8009c82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009c84:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb0 <HAL_RCC_ClockConfig+0x270>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fd ff07 	bl	8007a9c <HAL_InitTick>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]

  return status;
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	40022000 	.word	0x40022000
 8009ca0:	40021000 	.word	0x40021000
 8009ca4:	04c4b400 	.word	0x04c4b400
 8009ca8:	0801d680 	.word	0x0801d680
 8009cac:	20000004 	.word	0x20000004
 8009cb0:	20000008 	.word	0x20000008

08009cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b089      	sub	sp, #36	@ 0x24
 8009cb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f003 030c 	and.w	r3, r3, #12
 8009cca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f003 0303 	and.w	r3, r3, #3
 8009cd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	2b0c      	cmp	r3, #12
 8009ce0:	d121      	bne.n	8009d26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d11e      	bne.n	8009d26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009ce8:	4b34      	ldr	r3, [pc, #208]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0308 	and.w	r3, r3, #8
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d107      	bne.n	8009d04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009cf4:	4b31      	ldr	r3, [pc, #196]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8009cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cfa:	0a1b      	lsrs	r3, r3, #8
 8009cfc:	f003 030f 	and.w	r3, r3, #15
 8009d00:	61fb      	str	r3, [r7, #28]
 8009d02:	e005      	b.n	8009d10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009d04:	4b2d      	ldr	r3, [pc, #180]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	091b      	lsrs	r3, r3, #4
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009d10:	4a2b      	ldr	r2, [pc, #172]	@ (8009dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10d      	bne.n	8009d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009d24:	e00a      	b.n	8009d3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d102      	bne.n	8009d32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009d2c:	4b25      	ldr	r3, [pc, #148]	@ (8009dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8009d2e:	61bb      	str	r3, [r7, #24]
 8009d30:	e004      	b.n	8009d3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d101      	bne.n	8009d3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009d38:	4b23      	ldr	r3, [pc, #140]	@ (8009dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009d3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	2b0c      	cmp	r3, #12
 8009d40:	d134      	bne.n	8009dac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d42:	4b1e      	ldr	r3, [pc, #120]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	f003 0303 	and.w	r3, r3, #3
 8009d4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d003      	beq.n	8009d5a <HAL_RCC_GetSysClockFreq+0xa6>
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d003      	beq.n	8009d60 <HAL_RCC_GetSysClockFreq+0xac>
 8009d58:	e005      	b.n	8009d66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8009d5c:	617b      	str	r3, [r7, #20]
      break;
 8009d5e:	e005      	b.n	8009d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009d60:	4b19      	ldr	r3, [pc, #100]	@ (8009dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009d62:	617b      	str	r3, [r7, #20]
      break;
 8009d64:	e002      	b.n	8009d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	617b      	str	r3, [r7, #20]
      break;
 8009d6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d6c:	4b13      	ldr	r3, [pc, #76]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	091b      	lsrs	r3, r3, #4
 8009d72:	f003 030f 	and.w	r3, r3, #15
 8009d76:	3301      	adds	r3, #1
 8009d78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009d7a:	4b10      	ldr	r3, [pc, #64]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	0a1b      	lsrs	r3, r3, #8
 8009d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	fb03 f202 	mul.w	r2, r3, r2
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d92:	4b0a      	ldr	r3, [pc, #40]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	0e5b      	lsrs	r3, r3, #25
 8009d98:	f003 0303 	and.w	r3, r3, #3
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009daa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009dac:	69bb      	ldr	r3, [r7, #24]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3724      	adds	r7, #36	@ 0x24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	40021000 	.word	0x40021000
 8009dc0:	0801d698 	.word	0x0801d698
 8009dc4:	00f42400 	.word	0x00f42400
 8009dc8:	007a1200 	.word	0x007a1200

08009dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009dd0:	4b03      	ldr	r3, [pc, #12]	@ (8009de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20000004 	.word	0x20000004

08009de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009de8:	f7ff fff0 	bl	8009dcc <HAL_RCC_GetHCLKFreq>
 8009dec:	4602      	mov	r2, r0
 8009dee:	4b06      	ldr	r3, [pc, #24]	@ (8009e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	0a1b      	lsrs	r3, r3, #8
 8009df4:	f003 0307 	and.w	r3, r3, #7
 8009df8:	4904      	ldr	r1, [pc, #16]	@ (8009e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009dfa:	5ccb      	ldrb	r3, [r1, r3]
 8009dfc:	f003 031f 	and.w	r3, r3, #31
 8009e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	40021000 	.word	0x40021000
 8009e0c:	0801d690 	.word	0x0801d690

08009e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009e14:	f7ff ffda 	bl	8009dcc <HAL_RCC_GetHCLKFreq>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	4b06      	ldr	r3, [pc, #24]	@ (8009e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	0adb      	lsrs	r3, r3, #11
 8009e20:	f003 0307 	and.w	r3, r3, #7
 8009e24:	4904      	ldr	r1, [pc, #16]	@ (8009e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e26:	5ccb      	ldrb	r3, [r1, r3]
 8009e28:	f003 031f 	and.w	r3, r3, #31
 8009e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	40021000 	.word	0x40021000
 8009e38:	0801d690 	.word	0x0801d690

08009e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009e44:	2300      	movs	r3, #0
 8009e46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009e48:	4b27      	ldr	r3, [pc, #156]	@ (8009ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009e54:	f7ff f916 	bl	8009084 <HAL_PWREx_GetVoltageRange>
 8009e58:	6178      	str	r0, [r7, #20]
 8009e5a:	e014      	b.n	8009e86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e5c:	4b22      	ldr	r3, [pc, #136]	@ (8009ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e60:	4a21      	ldr	r2, [pc, #132]	@ (8009ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e68:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e70:	60fb      	str	r3, [r7, #12]
 8009e72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009e74:	f7ff f906 	bl	8009084 <HAL_PWREx_GetVoltageRange>
 8009e78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e8c:	d10b      	bne.n	8009ea6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b80      	cmp	r3, #128	@ 0x80
 8009e92:	d913      	bls.n	8009ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2ba0      	cmp	r3, #160	@ 0xa0
 8009e98:	d902      	bls.n	8009ea0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	613b      	str	r3, [r7, #16]
 8009e9e:	e00d      	b.n	8009ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	613b      	str	r3, [r7, #16]
 8009ea4:	e00a      	b.n	8009ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8009eaa:	d902      	bls.n	8009eb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009eac:	2302      	movs	r3, #2
 8009eae:	613b      	str	r3, [r7, #16]
 8009eb0:	e004      	b.n	8009ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b70      	cmp	r3, #112	@ 0x70
 8009eb6:	d101      	bne.n	8009ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009eb8:	2301      	movs	r3, #1
 8009eba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f023 020f 	bic.w	r2, r3, #15
 8009ec4:	4909      	ldr	r1, [pc, #36]	@ (8009eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009ecc:	4b07      	ldr	r3, [pc, #28]	@ (8009eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 030f 	and.w	r3, r3, #15
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d001      	beq.n	8009ede <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	40021000 	.word	0x40021000
 8009eec:	40022000 	.word	0x40022000

08009ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8009fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	d00b      	beq.n	8009f1e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d825      	bhi.n	8009f58 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d008      	beq.n	8009f24 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d11f      	bne.n	8009f58 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009f18:	4b25      	ldr	r3, [pc, #148]	@ (8009fb0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009f1a:	613b      	str	r3, [r7, #16]
    break;
 8009f1c:	e01f      	b.n	8009f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009f1e:	4b25      	ldr	r3, [pc, #148]	@ (8009fb4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009f20:	613b      	str	r3, [r7, #16]
    break;
 8009f22:	e01c      	b.n	8009f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009f24:	4b21      	ldr	r3, [pc, #132]	@ (8009fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0308 	and.w	r3, r3, #8
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d107      	bne.n	8009f40 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009f30:	4b1e      	ldr	r3, [pc, #120]	@ (8009fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	f003 030f 	and.w	r3, r3, #15
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	e005      	b.n	8009f4c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009f40:	4b1a      	ldr	r3, [pc, #104]	@ (8009fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	091b      	lsrs	r3, r3, #4
 8009f46:	f003 030f 	and.w	r3, r3, #15
 8009f4a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8009f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009fb8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f54:	613b      	str	r3, [r7, #16]
    break;
 8009f56:	e002      	b.n	8009f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	613b      	str	r3, [r7, #16]
    break;
 8009f5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009f5e:	4b13      	ldr	r3, [pc, #76]	@ (8009fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	091b      	lsrs	r3, r3, #4
 8009f64:	f003 030f 	and.w	r3, r3, #15
 8009f68:	3301      	adds	r3, #1
 8009f6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8009fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	0a1b      	lsrs	r3, r3, #8
 8009f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	fb03 f202 	mul.w	r2, r3, r2
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009f84:	4b09      	ldr	r3, [pc, #36]	@ (8009fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	0e5b      	lsrs	r3, r3, #25
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	3301      	adds	r3, #1
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009f9e:	683b      	ldr	r3, [r7, #0]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	371c      	adds	r7, #28
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	40021000 	.word	0x40021000
 8009fb0:	00f42400 	.word	0x00f42400
 8009fb4:	007a1200 	.word	0x007a1200
 8009fb8:	0801d698 	.word	0x0801d698

08009fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009fc8:	2300      	movs	r3, #0
 8009fca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d040      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fdc:	2b80      	cmp	r3, #128	@ 0x80
 8009fde:	d02a      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009fe0:	2b80      	cmp	r3, #128	@ 0x80
 8009fe2:	d825      	bhi.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009fe4:	2b60      	cmp	r3, #96	@ 0x60
 8009fe6:	d026      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009fe8:	2b60      	cmp	r3, #96	@ 0x60
 8009fea:	d821      	bhi.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009fec:	2b40      	cmp	r3, #64	@ 0x40
 8009fee:	d006      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009ff0:	2b40      	cmp	r3, #64	@ 0x40
 8009ff2:	d81d      	bhi.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009ff8:	2b20      	cmp	r3, #32
 8009ffa:	d010      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009ffc:	e018      	b.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009ffe:	4b89      	ldr	r3, [pc, #548]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	4a88      	ldr	r2, [pc, #544]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a008:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a00a:	e015      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3304      	adds	r3, #4
 800a010:	2100      	movs	r1, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f000 fb02 	bl	800a61c <RCCEx_PLLSAI1_Config>
 800a018:	4603      	mov	r3, r0
 800a01a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a01c:	e00c      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3320      	adds	r3, #32
 800a022:	2100      	movs	r1, #0
 800a024:	4618      	mov	r0, r3
 800a026:	f000 fbed 	bl	800a804 <RCCEx_PLLSAI2_Config>
 800a02a:	4603      	mov	r3, r0
 800a02c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a02e:	e003      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	74fb      	strb	r3, [r7, #19]
      break;
 800a034:	e000      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800a036:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a038:	7cfb      	ldrb	r3, [r7, #19]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10b      	bne.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a03e:	4b79      	ldr	r3, [pc, #484]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a040:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a044:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a04c:	4975      	ldr	r1, [pc, #468]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800a054:	e001      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a056:	7cfb      	ldrb	r3, [r7, #19]
 800a058:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d047      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a06a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a06e:	d030      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a074:	d82a      	bhi.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a07a:	d02a      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a07c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a080:	d824      	bhi.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a086:	d008      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800a088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a08c:	d81e      	bhi.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00a      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800a092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a096:	d010      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a098:	e018      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a09a:	4b62      	ldr	r3, [pc, #392]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	4a61      	ldr	r2, [pc, #388]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0a4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a0a6:	e015      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fab4 	bl	800a61c <RCCEx_PLLSAI1_Config>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a0b8:	e00c      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3320      	adds	r3, #32
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fb9f 	bl	800a804 <RCCEx_PLLSAI2_Config>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a0ca:	e003      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	74fb      	strb	r3, [r7, #19]
      break;
 800a0d0:	e000      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800a0d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0d4:	7cfb      	ldrb	r3, [r7, #19]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10b      	bne.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a0da:	4b52      	ldr	r3, [pc, #328]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a0e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0e8:	494e      	ldr	r1, [pc, #312]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800a0f0:	e001      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f2:	7cfb      	ldrb	r3, [r7, #19]
 800a0f4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 809f 	beq.w	800a242 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a104:	2300      	movs	r3, #0
 800a106:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a108:	4b46      	ldr	r3, [pc, #280]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a10a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a10c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a114:	2301      	movs	r3, #1
 800a116:	e000      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a118:	2300      	movs	r3, #0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00d      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a11e:	4b41      	ldr	r3, [pc, #260]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a122:	4a40      	ldr	r2, [pc, #256]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a128:	6593      	str	r3, [r2, #88]	@ 0x58
 800a12a:	4b3e      	ldr	r3, [pc, #248]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a12e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a132:	60bb      	str	r3, [r7, #8]
 800a134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a136:	2301      	movs	r3, #1
 800a138:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a13a:	4b3b      	ldr	r3, [pc, #236]	@ (800a228 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a3a      	ldr	r2, [pc, #232]	@ (800a228 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a144:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a146:	f7fd fcf9 	bl	8007b3c <HAL_GetTick>
 800a14a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a14c:	e009      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a14e:	f7fd fcf5 	bl	8007b3c <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d902      	bls.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	74fb      	strb	r3, [r7, #19]
        break;
 800a160:	e005      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a162:	4b31      	ldr	r3, [pc, #196]	@ (800a228 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0ef      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a16e:	7cfb      	ldrb	r3, [r7, #19]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d15b      	bne.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a174:	4b2b      	ldr	r3, [pc, #172]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a17a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a17e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01f      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d019      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a192:	4b24      	ldr	r3, [pc, #144]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a19c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a19e:	4b21      	ldr	r3, [pc, #132]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1be:	4a19      	ldr	r2, [pc, #100]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d016      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d0:	f7fd fcb4 	bl	8007b3c <HAL_GetTick>
 800a1d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1d6:	e00b      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1d8:	f7fd fcb0 	bl	8007b3c <HAL_GetTick>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d902      	bls.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	74fb      	strb	r3, [r7, #19]
            break;
 800a1ee:	e006      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0ec      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800a1fe:	7cfb      	ldrb	r3, [r7, #19]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10c      	bne.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a204:	4b07      	ldr	r3, [pc, #28]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a20a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a214:	4903      	ldr	r1, [pc, #12]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a216:	4313      	orrs	r3, r2
 800a218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a21c:	e008      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a21e:	7cfb      	ldrb	r3, [r7, #19]
 800a220:	74bb      	strb	r3, [r7, #18]
 800a222:	e005      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800a224:	40021000 	.word	0x40021000
 800a228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22c:	7cfb      	ldrb	r3, [r7, #19]
 800a22e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a230:	7c7b      	ldrb	r3, [r7, #17]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d105      	bne.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a236:	4ba0      	ldr	r3, [pc, #640]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a23a:	4a9f      	ldr	r2, [pc, #636]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a23c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a240:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00a      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a24e:	4b9a      	ldr	r3, [pc, #616]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a254:	f023 0203 	bic.w	r2, r3, #3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a25c:	4996      	ldr	r1, [pc, #600]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00a      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a270:	4b91      	ldr	r3, [pc, #580]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a276:	f023 020c 	bic.w	r2, r3, #12
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a27e:	498e      	ldr	r1, [pc, #568]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a280:	4313      	orrs	r3, r2
 800a282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0304 	and.w	r3, r3, #4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a292:	4b89      	ldr	r3, [pc, #548]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a298:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2a0:	4985      	ldr	r1, [pc, #532]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 0308 	and.w	r3, r3, #8
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00a      	beq.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a2b4:	4b80      	ldr	r3, [pc, #512]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2c2:	497d      	ldr	r1, [pc, #500]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0310 	and.w	r3, r3, #16
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a2d6:	4b78      	ldr	r3, [pc, #480]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2e4:	4974      	ldr	r1, [pc, #464]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0320 	and.w	r3, r3, #32
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00a      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2f8:	4b6f      	ldr	r3, [pc, #444]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a306:	496c      	ldr	r1, [pc, #432]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a308:	4313      	orrs	r3, r2
 800a30a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00a      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a31a:	4b67      	ldr	r3, [pc, #412]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a320:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a328:	4963      	ldr	r1, [pc, #396]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00a      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a33c:	4b5e      	ldr	r3, [pc, #376]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a342:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a34a:	495b      	ldr	r1, [pc, #364]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a34c:	4313      	orrs	r3, r2
 800a34e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00a      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a35e:	4b56      	ldr	r3, [pc, #344]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a364:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a36c:	4952      	ldr	r1, [pc, #328]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00a      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a380:	4b4d      	ldr	r3, [pc, #308]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a386:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a38e:	494a      	ldr	r1, [pc, #296]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a390:	4313      	orrs	r3, r2
 800a392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00a      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3a2:	4b45      	ldr	r3, [pc, #276]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3b0:	4941      	ldr	r1, [pc, #260]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00a      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3ca:	f023 0203 	bic.w	r2, r3, #3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3d2:	4939      	ldr	r1, [pc, #228]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d028      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a3e6:	4b34      	ldr	r3, [pc, #208]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3f4:	4930      	ldr	r1, [pc, #192]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a404:	d106      	bne.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a406:	4b2c      	ldr	r3, [pc, #176]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	4a2b      	ldr	r2, [pc, #172]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a40c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a410:	60d3      	str	r3, [r2, #12]
 800a412:	e011      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a418:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a41c:	d10c      	bne.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3304      	adds	r3, #4
 800a422:	2101      	movs	r1, #1
 800a424:	4618      	mov	r0, r3
 800a426:	f000 f8f9 	bl	800a61c <RCCEx_PLLSAI1_Config>
 800a42a:	4603      	mov	r3, r0
 800a42c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a42e:	7cfb      	ldrb	r3, [r7, #19]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800a434:	7cfb      	ldrb	r3, [r7, #19]
 800a436:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d04d      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a44c:	d108      	bne.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800a44e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a450:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a454:	4a18      	ldr	r2, [pc, #96]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a45a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800a45e:	e012      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a460:	4b15      	ldr	r3, [pc, #84]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a466:	4a14      	ldr	r2, [pc, #80]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a46c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800a470:	4b11      	ldr	r3, [pc, #68]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a47e:	490e      	ldr	r1, [pc, #56]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a48a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a48e:	d106      	bne.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a490:	4b09      	ldr	r3, [pc, #36]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	4a08      	ldr	r2, [pc, #32]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a49a:	60d3      	str	r3, [r2, #12]
 800a49c:	e020      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4a6:	d109      	bne.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a4a8:	4b03      	ldr	r3, [pc, #12]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	4a02      	ldr	r2, [pc, #8]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a4ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4b2:	60d3      	str	r3, [r2, #12]
 800a4b4:	e014      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a4b6:	bf00      	nop
 800a4b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4c4:	d10c      	bne.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 f8a5 	bl	800a61c <RCCEx_PLLSAI1_Config>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a4d6:	7cfb      	ldrb	r3, [r7, #19]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800a4dc:	7cfb      	ldrb	r3, [r7, #19]
 800a4de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d028      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a4ec:	4b4a      	ldr	r3, [pc, #296]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4fa:	4947      	ldr	r1, [pc, #284]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a50a:	d106      	bne.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a50c:	4b42      	ldr	r3, [pc, #264]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	4a41      	ldr	r2, [pc, #260]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a516:	60d3      	str	r3, [r2, #12]
 800a518:	e011      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a51e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a522:	d10c      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3304      	adds	r3, #4
 800a528:	2101      	movs	r1, #1
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f876 	bl	800a61c <RCCEx_PLLSAI1_Config>
 800a530:	4603      	mov	r3, r0
 800a532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a534:	7cfb      	ldrb	r3, [r7, #19]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800a53a:	7cfb      	ldrb	r3, [r7, #19]
 800a53c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d01e      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a54a:	4b33      	ldr	r3, [pc, #204]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a550:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a55a:	492f      	ldr	r1, [pc, #188]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a56c:	d10c      	bne.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3304      	adds	r3, #4
 800a572:	2102      	movs	r1, #2
 800a574:	4618      	mov	r0, r3
 800a576:	f000 f851 	bl	800a61c <RCCEx_PLLSAI1_Config>
 800a57a:	4603      	mov	r3, r0
 800a57c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a57e:	7cfb      	ldrb	r3, [r7, #19]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800a584:	7cfb      	ldrb	r3, [r7, #19]
 800a586:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00b      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a594:	4b20      	ldr	r3, [pc, #128]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a59a:	f023 0204 	bic.w	r2, r3, #4
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5a4:	491c      	ldr	r1, [pc, #112]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00b      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a5b8:	4b17      	ldr	r3, [pc, #92]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5be:	f023 0218 	bic.w	r2, r3, #24
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5c8:	4913      	ldr	r1, [pc, #76]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d017      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a5dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5ec:	490a      	ldr	r1, [pc, #40]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5fe:	d105      	bne.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a600:	4b05      	ldr	r3, [pc, #20]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	4a04      	ldr	r2, [pc, #16]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a60a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a60c:	7cbb      	ldrb	r3, [r7, #18]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	40021000 	.word	0x40021000

0800a61c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a62a:	4b72      	ldr	r3, [pc, #456]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	f003 0303 	and.w	r3, r3, #3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00e      	beq.n	800a654 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a636:	4b6f      	ldr	r3, [pc, #444]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f003 0203 	and.w	r2, r3, #3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d103      	bne.n	800a64e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
       ||
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d142      	bne.n	800a6d4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	73fb      	strb	r3, [r7, #15]
 800a652:	e03f      	b.n	800a6d4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d018      	beq.n	800a68e <RCCEx_PLLSAI1_Config+0x72>
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d825      	bhi.n	800a6ac <RCCEx_PLLSAI1_Config+0x90>
 800a660:	2b01      	cmp	r3, #1
 800a662:	d002      	beq.n	800a66a <RCCEx_PLLSAI1_Config+0x4e>
 800a664:	2b02      	cmp	r3, #2
 800a666:	d009      	beq.n	800a67c <RCCEx_PLLSAI1_Config+0x60>
 800a668:	e020      	b.n	800a6ac <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a66a:	4b62      	ldr	r3, [pc, #392]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d11d      	bne.n	800a6b2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a67a:	e01a      	b.n	800a6b2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a67c:	4b5d      	ldr	r3, [pc, #372]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a684:	2b00      	cmp	r3, #0
 800a686:	d116      	bne.n	800a6b6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a68c:	e013      	b.n	800a6b6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a68e:	4b59      	ldr	r3, [pc, #356]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10f      	bne.n	800a6ba <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a69a:	4b56      	ldr	r3, [pc, #344]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6aa:	e006      	b.n	800a6ba <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b0:	e004      	b.n	800a6bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a6b2:	bf00      	nop
 800a6b4:	e002      	b.n	800a6bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a6b6:	bf00      	nop
 800a6b8:	e000      	b.n	800a6bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a6ba:	bf00      	nop
    }

    if(status == HAL_OK)
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d108      	bne.n	800a6d4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800a6c2:	4b4c      	ldr	r3, [pc, #304]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	f023 0203 	bic.w	r2, r3, #3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4949      	ldr	r1, [pc, #292]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f040 8086 	bne.w	800a7e8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a6dc:	4b45      	ldr	r3, [pc, #276]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a44      	ldr	r2, [pc, #272]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a6e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6e8:	f7fd fa28 	bl	8007b3c <HAL_GetTick>
 800a6ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a6ee:	e009      	b.n	800a704 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a6f0:	f7fd fa24 	bl	8007b3c <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d902      	bls.n	800a704 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	73fb      	strb	r3, [r7, #15]
        break;
 800a702:	e005      	b.n	800a710 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a704:	4b3b      	ldr	r3, [pc, #236]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1ef      	bne.n	800a6f0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d168      	bne.n	800a7e8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d113      	bne.n	800a744 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a71c:	4b35      	ldr	r3, [pc, #212]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a71e:	691a      	ldr	r2, [r3, #16]
 800a720:	4b35      	ldr	r3, [pc, #212]	@ (800a7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a722:	4013      	ands	r3, r2
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6892      	ldr	r2, [r2, #8]
 800a728:	0211      	lsls	r1, r2, #8
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	68d2      	ldr	r2, [r2, #12]
 800a72e:	06d2      	lsls	r2, r2, #27
 800a730:	4311      	orrs	r1, r2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6852      	ldr	r2, [r2, #4]
 800a736:	3a01      	subs	r2, #1
 800a738:	0112      	lsls	r2, r2, #4
 800a73a:	430a      	orrs	r2, r1
 800a73c:	492d      	ldr	r1, [pc, #180]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	610b      	str	r3, [r1, #16]
 800a742:	e02d      	b.n	800a7a0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d115      	bne.n	800a776 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a74a:	4b2a      	ldr	r3, [pc, #168]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a74c:	691a      	ldr	r2, [r3, #16]
 800a74e:	4b2b      	ldr	r3, [pc, #172]	@ (800a7fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a750:	4013      	ands	r3, r2
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	6892      	ldr	r2, [r2, #8]
 800a756:	0211      	lsls	r1, r2, #8
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	6912      	ldr	r2, [r2, #16]
 800a75c:	0852      	lsrs	r2, r2, #1
 800a75e:	3a01      	subs	r2, #1
 800a760:	0552      	lsls	r2, r2, #21
 800a762:	4311      	orrs	r1, r2
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	6852      	ldr	r2, [r2, #4]
 800a768:	3a01      	subs	r2, #1
 800a76a:	0112      	lsls	r2, r2, #4
 800a76c:	430a      	orrs	r2, r1
 800a76e:	4921      	ldr	r1, [pc, #132]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a770:	4313      	orrs	r3, r2
 800a772:	610b      	str	r3, [r1, #16]
 800a774:	e014      	b.n	800a7a0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a776:	4b1f      	ldr	r3, [pc, #124]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a778:	691a      	ldr	r2, [r3, #16]
 800a77a:	4b21      	ldr	r3, [pc, #132]	@ (800a800 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	6892      	ldr	r2, [r2, #8]
 800a782:	0211      	lsls	r1, r2, #8
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	6952      	ldr	r2, [r2, #20]
 800a788:	0852      	lsrs	r2, r2, #1
 800a78a:	3a01      	subs	r2, #1
 800a78c:	0652      	lsls	r2, r2, #25
 800a78e:	4311      	orrs	r1, r2
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	6852      	ldr	r2, [r2, #4]
 800a794:	3a01      	subs	r2, #1
 800a796:	0112      	lsls	r2, r2, #4
 800a798:	430a      	orrs	r2, r1
 800a79a:	4916      	ldr	r1, [pc, #88]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a79c:	4313      	orrs	r3, r2
 800a79e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a7a0:	4b14      	ldr	r3, [pc, #80]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a13      	ldr	r2, [pc, #76]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a7a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a7aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7ac:	f7fd f9c6 	bl	8007b3c <HAL_GetTick>
 800a7b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a7b2:	e009      	b.n	800a7c8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a7b4:	f7fd f9c2 	bl	8007b3c <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d902      	bls.n	800a7c8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	73fb      	strb	r3, [r7, #15]
          break;
 800a7c6:	e005      	b.n	800a7d4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a7c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0ef      	beq.n	800a7b4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d106      	bne.n	800a7e8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a7da:	4b06      	ldr	r3, [pc, #24]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a7dc:	691a      	ldr	r2, [r3, #16]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	4904      	ldr	r1, [pc, #16]	@ (800a7f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	40021000 	.word	0x40021000
 800a7f8:	07ff800f 	.word	0x07ff800f
 800a7fc:	ff9f800f 	.word	0xff9f800f
 800a800:	f9ff800f 	.word	0xf9ff800f

0800a804 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a812:	4b72      	ldr	r3, [pc, #456]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	f003 0303 	and.w	r3, r3, #3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00e      	beq.n	800a83c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a81e:	4b6f      	ldr	r3, [pc, #444]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	f003 0203 	and.w	r2, r3, #3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d103      	bne.n	800a836 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
       ||
 800a832:	2b00      	cmp	r3, #0
 800a834:	d142      	bne.n	800a8bc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	73fb      	strb	r3, [r7, #15]
 800a83a:	e03f      	b.n	800a8bc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b03      	cmp	r3, #3
 800a842:	d018      	beq.n	800a876 <RCCEx_PLLSAI2_Config+0x72>
 800a844:	2b03      	cmp	r3, #3
 800a846:	d825      	bhi.n	800a894 <RCCEx_PLLSAI2_Config+0x90>
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d002      	beq.n	800a852 <RCCEx_PLLSAI2_Config+0x4e>
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d009      	beq.n	800a864 <RCCEx_PLLSAI2_Config+0x60>
 800a850:	e020      	b.n	800a894 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a852:	4b62      	ldr	r3, [pc, #392]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d11d      	bne.n	800a89a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a862:	e01a      	b.n	800a89a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a864:	4b5d      	ldr	r3, [pc, #372]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d116      	bne.n	800a89e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a874:	e013      	b.n	800a89e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a876:	4b59      	ldr	r3, [pc, #356]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10f      	bne.n	800a8a2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a882:	4b56      	ldr	r3, [pc, #344]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d109      	bne.n	800a8a2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a892:	e006      	b.n	800a8a2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
      break;
 800a898:	e004      	b.n	800a8a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a89a:	bf00      	nop
 800a89c:	e002      	b.n	800a8a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a89e:	bf00      	nop
 800a8a0:	e000      	b.n	800a8a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a8a2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d108      	bne.n	800a8bc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800a8aa:	4b4c      	ldr	r3, [pc, #304]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	f023 0203 	bic.w	r2, r3, #3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4949      	ldr	r1, [pc, #292]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f040 8086 	bne.w	800a9d0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a8c4:	4b45      	ldr	r3, [pc, #276]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a44      	ldr	r2, [pc, #272]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8d0:	f7fd f934 	bl	8007b3c <HAL_GetTick>
 800a8d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a8d6:	e009      	b.n	800a8ec <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a8d8:	f7fd f930 	bl	8007b3c <HAL_GetTick>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d902      	bls.n	800a8ec <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	73fb      	strb	r3, [r7, #15]
        break;
 800a8ea:	e005      	b.n	800a8f8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a8ec:	4b3b      	ldr	r3, [pc, #236]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1ef      	bne.n	800a8d8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d168      	bne.n	800a9d0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d113      	bne.n	800a92c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a904:	4b35      	ldr	r3, [pc, #212]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a906:	695a      	ldr	r2, [r3, #20]
 800a908:	4b35      	ldr	r3, [pc, #212]	@ (800a9e0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800a90a:	4013      	ands	r3, r2
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	6892      	ldr	r2, [r2, #8]
 800a910:	0211      	lsls	r1, r2, #8
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	68d2      	ldr	r2, [r2, #12]
 800a916:	06d2      	lsls	r2, r2, #27
 800a918:	4311      	orrs	r1, r2
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6852      	ldr	r2, [r2, #4]
 800a91e:	3a01      	subs	r2, #1
 800a920:	0112      	lsls	r2, r2, #4
 800a922:	430a      	orrs	r2, r1
 800a924:	492d      	ldr	r1, [pc, #180]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a926:	4313      	orrs	r3, r2
 800a928:	614b      	str	r3, [r1, #20]
 800a92a:	e02d      	b.n	800a988 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d115      	bne.n	800a95e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a932:	4b2a      	ldr	r3, [pc, #168]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a934:	695a      	ldr	r2, [r3, #20]
 800a936:	4b2b      	ldr	r3, [pc, #172]	@ (800a9e4 <RCCEx_PLLSAI2_Config+0x1e0>)
 800a938:	4013      	ands	r3, r2
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	6892      	ldr	r2, [r2, #8]
 800a93e:	0211      	lsls	r1, r2, #8
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	6912      	ldr	r2, [r2, #16]
 800a944:	0852      	lsrs	r2, r2, #1
 800a946:	3a01      	subs	r2, #1
 800a948:	0552      	lsls	r2, r2, #21
 800a94a:	4311      	orrs	r1, r2
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	6852      	ldr	r2, [r2, #4]
 800a950:	3a01      	subs	r2, #1
 800a952:	0112      	lsls	r2, r2, #4
 800a954:	430a      	orrs	r2, r1
 800a956:	4921      	ldr	r1, [pc, #132]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a958:	4313      	orrs	r3, r2
 800a95a:	614b      	str	r3, [r1, #20]
 800a95c:	e014      	b.n	800a988 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a95e:	4b1f      	ldr	r3, [pc, #124]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a960:	695a      	ldr	r2, [r3, #20]
 800a962:	4b21      	ldr	r3, [pc, #132]	@ (800a9e8 <RCCEx_PLLSAI2_Config+0x1e4>)
 800a964:	4013      	ands	r3, r2
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	6892      	ldr	r2, [r2, #8]
 800a96a:	0211      	lsls	r1, r2, #8
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	6952      	ldr	r2, [r2, #20]
 800a970:	0852      	lsrs	r2, r2, #1
 800a972:	3a01      	subs	r2, #1
 800a974:	0652      	lsls	r2, r2, #25
 800a976:	4311      	orrs	r1, r2
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	6852      	ldr	r2, [r2, #4]
 800a97c:	3a01      	subs	r2, #1
 800a97e:	0112      	lsls	r2, r2, #4
 800a980:	430a      	orrs	r2, r1
 800a982:	4916      	ldr	r1, [pc, #88]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a984:	4313      	orrs	r3, r2
 800a986:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a988:	4b14      	ldr	r3, [pc, #80]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a13      	ldr	r2, [pc, #76]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a98e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a992:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a994:	f7fd f8d2 	bl	8007b3c <HAL_GetTick>
 800a998:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a99a:	e009      	b.n	800a9b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a99c:	f7fd f8ce 	bl	8007b3c <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d902      	bls.n	800a9b0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	73fb      	strb	r3, [r7, #15]
          break;
 800a9ae:	e005      	b.n	800a9bc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a9b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d0ef      	beq.n	800a99c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d106      	bne.n	800a9d0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a9c2:	4b06      	ldr	r3, [pc, #24]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a9c4:	695a      	ldr	r2, [r3, #20]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	4904      	ldr	r1, [pc, #16]	@ (800a9dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	40021000 	.word	0x40021000
 800a9e0:	07ff800f 	.word	0x07ff800f
 800a9e4:	ff9f800f 	.word	0xff9f800f
 800a9e8:	f9ff800f 	.word	0xf9ff800f

0800a9ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e095      	b.n	800ab2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d108      	bne.n	800aa18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa0e:	d009      	beq.n	800aa24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	61da      	str	r2, [r3, #28]
 800aa16:	e005      	b.n	800aa24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7fc fb44 	bl	80070cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aa64:	d902      	bls.n	800aa6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	e002      	b.n	800aa72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aa6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800aa7a:	d007      	beq.n	800aa8c <HAL_SPI_Init+0xa0>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aa84:	d002      	beq.n	800aa8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800aa9c:	431a      	orrs	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	f003 0302 	and.w	r3, r3, #2
 800aaa6:	431a      	orrs	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	431a      	orrs	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aaba:	431a      	orrs	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aace:	ea42 0103 	orr.w	r1, r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	0c1b      	lsrs	r3, r3, #16
 800aae8:	f003 0204 	and.w	r2, r3, #4
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf0:	f003 0310 	and.w	r3, r3, #16
 800aaf4:	431a      	orrs	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	431a      	orrs	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ab08:	ea42 0103 	orr.w	r1, r2, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b088      	sub	sp, #32
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	60f8      	str	r0, [r7, #12]
 800ab3a:	60b9      	str	r1, [r7, #8]
 800ab3c:	603b      	str	r3, [r7, #0]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d101      	bne.n	800ab54 <HAL_SPI_Transmit+0x22>
 800ab50:	2302      	movs	r3, #2
 800ab52:	e15f      	b.n	800ae14 <HAL_SPI_Transmit+0x2e2>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab5c:	f7fc ffee 	bl	8007b3c <HAL_GetTick>
 800ab60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ab62:	88fb      	ldrh	r3, [r7, #6]
 800ab64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d002      	beq.n	800ab78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ab72:	2302      	movs	r3, #2
 800ab74:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab76:	e148      	b.n	800ae0a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <HAL_SPI_Transmit+0x52>
 800ab7e:	88fb      	ldrh	r3, [r7, #6]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d102      	bne.n	800ab8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab88:	e13f      	b.n	800ae0a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2203      	movs	r2, #3
 800ab8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	88fa      	ldrh	r2, [r7, #6]
 800aba2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	88fa      	ldrh	r2, [r7, #6]
 800aba8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abd4:	d10f      	bne.n	800abf6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abe4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800abf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac00:	2b40      	cmp	r3, #64	@ 0x40
 800ac02:	d007      	beq.n	800ac14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ac1c:	d94f      	bls.n	800acbe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <HAL_SPI_Transmit+0xfa>
 800ac26:	8afb      	ldrh	r3, [r7, #22]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d142      	bne.n	800acb2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac30:	881a      	ldrh	r2, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac3c:	1c9a      	adds	r2, r3, #2
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ac50:	e02f      	b.n	800acb2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d112      	bne.n	800ac86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac64:	881a      	ldrh	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac70:	1c9a      	adds	r2, r3, #2
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ac84:	e015      	b.n	800acb2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac86:	f7fc ff59 	bl	8007b3c <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d803      	bhi.n	800ac9e <HAL_SPI_Transmit+0x16c>
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac9c:	d102      	bne.n	800aca4 <HAL_SPI_Transmit+0x172>
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d106      	bne.n	800acb2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800aca4:	2303      	movs	r3, #3
 800aca6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800acb0:	e0ab      	b.n	800ae0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1ca      	bne.n	800ac52 <HAL_SPI_Transmit+0x120>
 800acbc:	e080      	b.n	800adc0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <HAL_SPI_Transmit+0x19a>
 800acc6:	8afb      	ldrh	r3, [r7, #22]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d174      	bne.n	800adb6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d912      	bls.n	800acfc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acda:	881a      	ldrh	r2, [r3, #0]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace6:	1c9a      	adds	r2, r3, #2
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3b02      	subs	r3, #2
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800acfa:	e05c      	b.n	800adb6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	330c      	adds	r3, #12
 800ad06:	7812      	ldrb	r2, [r2, #0]
 800ad08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ad22:	e048      	b.n	800adb6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f003 0302 	and.w	r3, r3, #2
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d12b      	bne.n	800ad8a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d912      	bls.n	800ad62 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad40:	881a      	ldrh	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4c:	1c9a      	adds	r2, r3, #2
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	3b02      	subs	r3, #2
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ad60:	e029      	b.n	800adb6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	330c      	adds	r3, #12
 800ad6c:	7812      	ldrb	r2, [r2, #0]
 800ad6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad74:	1c5a      	adds	r2, r3, #1
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	3b01      	subs	r3, #1
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ad88:	e015      	b.n	800adb6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad8a:	f7fc fed7 	bl	8007b3c <HAL_GetTick>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d803      	bhi.n	800ada2 <HAL_SPI_Transmit+0x270>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ada0:	d102      	bne.n	800ada8 <HAL_SPI_Transmit+0x276>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d106      	bne.n	800adb6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800ada8:	2303      	movs	r3, #3
 800adaa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800adb4:	e029      	b.n	800ae0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800adba:	b29b      	uxth	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1b1      	bne.n	800ad24 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 fb69 	bl	800b49c <SPI_EndRxTxTransaction>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2220      	movs	r2, #32
 800add4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10a      	bne.n	800adf4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800adde:	2300      	movs	r3, #0
 800ade0:	613b      	str	r3, [r7, #16]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	613b      	str	r3, [r7, #16]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	613b      	str	r3, [r7, #16]
 800adf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d002      	beq.n	800ae02 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	77fb      	strb	r3, [r7, #31]
 800ae00:	e003      	b.n	800ae0a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800ae12:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3720      	adds	r7, #32
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08a      	sub	sp, #40	@ 0x28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d101      	bne.n	800ae42 <HAL_SPI_TransmitReceive+0x26>
 800ae3e:	2302      	movs	r3, #2
 800ae40:	e20a      	b.n	800b258 <HAL_SPI_TransmitReceive+0x43c>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae4a:	f7fc fe77 	bl	8007b3c <HAL_GetTick>
 800ae4e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ae56:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ae5e:	887b      	ldrh	r3, [r7, #2]
 800ae60:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800ae62:	887b      	ldrh	r3, [r7, #2]
 800ae64:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ae66:	7efb      	ldrb	r3, [r7, #27]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d00e      	beq.n	800ae8a <HAL_SPI_TransmitReceive+0x6e>
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ae72:	d106      	bne.n	800ae82 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d102      	bne.n	800ae82 <HAL_SPI_TransmitReceive+0x66>
 800ae7c:	7efb      	ldrb	r3, [r7, #27]
 800ae7e:	2b04      	cmp	r3, #4
 800ae80:	d003      	beq.n	800ae8a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800ae82:	2302      	movs	r3, #2
 800ae84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800ae88:	e1e0      	b.n	800b24c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d005      	beq.n	800ae9c <HAL_SPI_TransmitReceive+0x80>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <HAL_SPI_TransmitReceive+0x80>
 800ae96:	887b      	ldrh	r3, [r7, #2]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800aea2:	e1d3      	b.n	800b24c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b04      	cmp	r3, #4
 800aeae:	d003      	beq.n	800aeb8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2205      	movs	r2, #5
 800aeb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	887a      	ldrh	r2, [r7, #2]
 800aec8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	887a      	ldrh	r2, [r7, #2]
 800aed0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	887a      	ldrh	r2, [r7, #2]
 800aede:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	887a      	ldrh	r2, [r7, #2]
 800aee4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aefa:	d802      	bhi.n	800af02 <HAL_SPI_TransmitReceive+0xe6>
 800aefc:	8a3b      	ldrh	r3, [r7, #16]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d908      	bls.n	800af14 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800af10:	605a      	str	r2, [r3, #4]
 800af12:	e007      	b.n	800af24 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800af22:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af2e:	2b40      	cmp	r3, #64	@ 0x40
 800af30:	d007      	beq.n	800af42 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800af4a:	f240 8081 	bls.w	800b050 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d002      	beq.n	800af5c <HAL_SPI_TransmitReceive+0x140>
 800af56:	8a7b      	ldrh	r3, [r7, #18]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d16d      	bne.n	800b038 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af60:	881a      	ldrh	r2, [r3, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af6c:	1c9a      	adds	r2, r3, #2
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af76:	b29b      	uxth	r3, r3
 800af78:	3b01      	subs	r3, #1
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af80:	e05a      	b.n	800b038 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d11b      	bne.n	800afc8 <HAL_SPI_TransmitReceive+0x1ac>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af94:	b29b      	uxth	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d016      	beq.n	800afc8 <HAL_SPI_TransmitReceive+0x1ac>
 800af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d113      	bne.n	800afc8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afa4:	881a      	ldrh	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb0:	1c9a      	adds	r2, r3, #2
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afba:	b29b      	uxth	r3, r3
 800afbc:	3b01      	subs	r3, #1
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800afc4:	2300      	movs	r3, #0
 800afc6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d11c      	bne.n	800b010 <HAL_SPI_TransmitReceive+0x1f4>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800afdc:	b29b      	uxth	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d016      	beq.n	800b010 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68da      	ldr	r2, [r3, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afec:	b292      	uxth	r2, r2
 800afee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff4:	1c9a      	adds	r2, r3, #2
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b000:	b29b      	uxth	r3, r3
 800b002:	3b01      	subs	r3, #1
 800b004:	b29a      	uxth	r2, r3
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b00c:	2301      	movs	r3, #1
 800b00e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b010:	f7fc fd94 	bl	8007b3c <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d80b      	bhi.n	800b038 <HAL_SPI_TransmitReceive+0x21c>
 800b020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b022:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b026:	d007      	beq.n	800b038 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800b036:	e109      	b.n	800b24c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d19f      	bne.n	800af82 <HAL_SPI_TransmitReceive+0x166>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b048:	b29b      	uxth	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d199      	bne.n	800af82 <HAL_SPI_TransmitReceive+0x166>
 800b04e:	e0e3      	b.n	800b218 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d003      	beq.n	800b060 <HAL_SPI_TransmitReceive+0x244>
 800b058:	8a7b      	ldrh	r3, [r7, #18]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	f040 80cf 	bne.w	800b1fe <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b064:	b29b      	uxth	r3, r3
 800b066:	2b01      	cmp	r3, #1
 800b068:	d912      	bls.n	800b090 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b06e:	881a      	ldrh	r2, [r3, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07a:	1c9a      	adds	r2, r3, #2
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b084:	b29b      	uxth	r3, r3
 800b086:	3b02      	subs	r3, #2
 800b088:	b29a      	uxth	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b08e:	e0b6      	b.n	800b1fe <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	330c      	adds	r3, #12
 800b09a:	7812      	ldrb	r2, [r2, #0]
 800b09c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0b6:	e0a2      	b.n	800b1fe <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f003 0302 	and.w	r3, r3, #2
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d134      	bne.n	800b130 <HAL_SPI_TransmitReceive+0x314>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d02f      	beq.n	800b130 <HAL_SPI_TransmitReceive+0x314>
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d12c      	bne.n	800b130 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d912      	bls.n	800b106 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e4:	881a      	ldrh	r2, [r3, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0f0:	1c9a      	adds	r2, r3, #2
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3b02      	subs	r3, #2
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b104:	e012      	b.n	800b12c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	330c      	adds	r3, #12
 800b110:	7812      	ldrb	r2, [r2, #0]
 800b112:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b122:	b29b      	uxth	r3, r3
 800b124:	3b01      	subs	r3, #1
 800b126:	b29a      	uxth	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b12c:	2300      	movs	r3, #0
 800b12e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d148      	bne.n	800b1d0 <HAL_SPI_TransmitReceive+0x3b4>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b144:	b29b      	uxth	r3, r3
 800b146:	2b00      	cmp	r3, #0
 800b148:	d042      	beq.n	800b1d0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b150:	b29b      	uxth	r3, r3
 800b152:	2b01      	cmp	r3, #1
 800b154:	d923      	bls.n	800b19e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68da      	ldr	r2, [r3, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b160:	b292      	uxth	r2, r2
 800b162:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b168:	1c9a      	adds	r2, r3, #2
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b174:	b29b      	uxth	r3, r3
 800b176:	3b02      	subs	r3, #2
 800b178:	b29a      	uxth	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b186:	b29b      	uxth	r3, r3
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d81f      	bhi.n	800b1cc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b19a:	605a      	str	r2, [r3, #4]
 800b19c:	e016      	b.n	800b1cc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f103 020c 	add.w	r2, r3, #12
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1aa:	7812      	ldrb	r2, [r2, #0]
 800b1ac:	b2d2      	uxtb	r2, r2
 800b1ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b1d0:	f7fc fcb4 	bl	8007b3c <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d803      	bhi.n	800b1e8 <HAL_SPI_TransmitReceive+0x3cc>
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1e6:	d102      	bne.n	800b1ee <HAL_SPI_TransmitReceive+0x3d2>
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d107      	bne.n	800b1fe <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800b1fc:	e026      	b.n	800b24c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b202:	b29b      	uxth	r3, r3
 800b204:	2b00      	cmp	r3, #0
 800b206:	f47f af57 	bne.w	800b0b8 <HAL_SPI_TransmitReceive+0x29c>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b210:	b29b      	uxth	r3, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	f47f af50 	bne.w	800b0b8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b218:	69fa      	ldr	r2, [r7, #28]
 800b21a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f000 f93d 	bl	800b49c <SPI_EndRxTxTransaction>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d005      	beq.n	800b234 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2220      	movs	r2, #32
 800b232:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d003      	beq.n	800b244 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b242:	e003      	b.n	800b24c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800b254:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3728      	adds	r7, #40	@ 0x28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	4613      	mov	r3, r2
 800b26e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b270:	f7fc fc64 	bl	8007b3c <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b278:	1a9b      	subs	r3, r3, r2
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	4413      	add	r3, r2
 800b27e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b280:	f7fc fc5c 	bl	8007b3c <HAL_GetTick>
 800b284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b286:	4b39      	ldr	r3, [pc, #228]	@ (800b36c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	015b      	lsls	r3, r3, #5
 800b28c:	0d1b      	lsrs	r3, r3, #20
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	fb02 f303 	mul.w	r3, r2, r3
 800b294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b296:	e054      	b.n	800b342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b29e:	d050      	beq.n	800b342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b2a0:	f7fc fc4c 	bl	8007b3c <HAL_GetTick>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	69fa      	ldr	r2, [r7, #28]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d902      	bls.n	800b2b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d13d      	bne.n	800b332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b2c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b2ce:	d111      	bne.n	800b2f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2d8:	d004      	beq.n	800b2e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2e2:	d107      	bne.n	800b2f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2fc:	d10f      	bne.n	800b31e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b31c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e017      	b.n	800b362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b338:	2300      	movs	r3, #0
 800b33a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	3b01      	subs	r3, #1
 800b340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689a      	ldr	r2, [r3, #8]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	4013      	ands	r3, r2
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	429a      	cmp	r2, r3
 800b350:	bf0c      	ite	eq
 800b352:	2301      	moveq	r3, #1
 800b354:	2300      	movne	r3, #0
 800b356:	b2db      	uxtb	r3, r3
 800b358:	461a      	mov	r2, r3
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d19b      	bne.n	800b298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3720      	adds	r7, #32
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20000004 	.word	0x20000004

0800b370 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08a      	sub	sp, #40	@ 0x28
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b382:	f7fc fbdb 	bl	8007b3c <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38a:	1a9b      	subs	r3, r3, r2
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	4413      	add	r3, r2
 800b390:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b392:	f7fc fbd3 	bl	8007b3c <HAL_GetTick>
 800b396:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	330c      	adds	r3, #12
 800b39e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b3a0:	4b3d      	ldr	r3, [pc, #244]	@ (800b498 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	00da      	lsls	r2, r3, #3
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	0d1b      	lsrs	r3, r3, #20
 800b3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3b2:	fb02 f303 	mul.w	r3, r2, r3
 800b3b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b3b8:	e060      	b.n	800b47c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b3c0:	d107      	bne.n	800b3d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d104      	bne.n	800b3d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3d8:	d050      	beq.n	800b47c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b3da:	f7fc fbaf 	bl	8007b3c <HAL_GetTick>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d902      	bls.n	800b3f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d13d      	bne.n	800b46c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b3fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b408:	d111      	bne.n	800b42e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b412:	d004      	beq.n	800b41e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b41c:	d107      	bne.n	800b42e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b42c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b436:	d10f      	bne.n	800b458 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b456:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b468:	2303      	movs	r3, #3
 800b46a:	e010      	b.n	800b48e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	3b01      	subs	r3, #1
 800b47a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689a      	ldr	r2, [r3, #8]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	4013      	ands	r3, r2
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d196      	bne.n	800b3ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3728      	adds	r7, #40	@ 0x28
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	20000004 	.word	0x20000004

0800b49c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af02      	add	r7, sp, #8
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f7ff ff5b 	bl	800b370 <SPI_WaitFifoStateUntilTimeout>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d007      	beq.n	800b4d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4c4:	f043 0220 	orr.w	r2, r3, #32
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e027      	b.n	800b520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2180      	movs	r1, #128	@ 0x80
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f7ff fec0 	bl	800b260 <SPI_WaitFlagStateUntilTimeout>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d007      	beq.n	800b4f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4ea:	f043 0220 	orr.w	r2, r3, #32
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e014      	b.n	800b520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f7ff ff34 	bl	800b370 <SPI_WaitFifoStateUntilTimeout>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d007      	beq.n	800b51e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b512:	f043 0220 	orr.w	r2, r3, #32
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e000      	b.n	800b520 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e049      	b.n	800b5ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d106      	bne.n	800b554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7fb fe62 	bl	8007218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2202      	movs	r2, #2
 800b558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3304      	adds	r3, #4
 800b564:	4619      	mov	r1, r3
 800b566:	4610      	mov	r0, r2
 800b568:	f000 faa4 	bl	800bab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
	...

0800b5d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d001      	beq.n	800b5f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e04f      	b.n	800b690 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68da      	ldr	r2, [r3, #12]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f042 0201 	orr.w	r2, r2, #1
 800b606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a23      	ldr	r2, [pc, #140]	@ (800b69c <HAL_TIM_Base_Start_IT+0xc4>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d01d      	beq.n	800b64e <HAL_TIM_Base_Start_IT+0x76>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b61a:	d018      	beq.n	800b64e <HAL_TIM_Base_Start_IT+0x76>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a1f      	ldr	r2, [pc, #124]	@ (800b6a0 <HAL_TIM_Base_Start_IT+0xc8>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d013      	beq.n	800b64e <HAL_TIM_Base_Start_IT+0x76>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a1e      	ldr	r2, [pc, #120]	@ (800b6a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d00e      	beq.n	800b64e <HAL_TIM_Base_Start_IT+0x76>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a1c      	ldr	r2, [pc, #112]	@ (800b6a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d009      	beq.n	800b64e <HAL_TIM_Base_Start_IT+0x76>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a1b      	ldr	r2, [pc, #108]	@ (800b6ac <HAL_TIM_Base_Start_IT+0xd4>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d004      	beq.n	800b64e <HAL_TIM_Base_Start_IT+0x76>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a19      	ldr	r2, [pc, #100]	@ (800b6b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d115      	bne.n	800b67a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	689a      	ldr	r2, [r3, #8]
 800b654:	4b17      	ldr	r3, [pc, #92]	@ (800b6b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b656:	4013      	ands	r3, r2
 800b658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b06      	cmp	r3, #6
 800b65e:	d015      	beq.n	800b68c <HAL_TIM_Base_Start_IT+0xb4>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b666:	d011      	beq.n	800b68c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f042 0201 	orr.w	r2, r2, #1
 800b676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b678:	e008      	b.n	800b68c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f042 0201 	orr.w	r2, r2, #1
 800b688:	601a      	str	r2, [r3, #0]
 800b68a:	e000      	b.n	800b68e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b68c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	40012c00 	.word	0x40012c00
 800b6a0:	40000400 	.word	0x40000400
 800b6a4:	40000800 	.word	0x40000800
 800b6a8:	40000c00 	.word	0x40000c00
 800b6ac:	40013400 	.word	0x40013400
 800b6b0:	40014000 	.word	0x40014000
 800b6b4:	00010007 	.word	0x00010007

0800b6b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d020      	beq.n	800b71c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f003 0302 	and.w	r3, r3, #2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d01b      	beq.n	800b71c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f06f 0202 	mvn.w	r2, #2
 800b6ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	f003 0303 	and.w	r3, r3, #3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f9b7 	bl	800ba76 <HAL_TIM_IC_CaptureCallback>
 800b708:	e005      	b.n	800b716 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f9a9 	bl	800ba62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f9ba 	bl	800ba8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f003 0304 	and.w	r3, r3, #4
 800b722:	2b00      	cmp	r3, #0
 800b724:	d020      	beq.n	800b768 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f003 0304 	and.w	r3, r3, #4
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d01b      	beq.n	800b768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f06f 0204 	mvn.w	r2, #4
 800b738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2202      	movs	r2, #2
 800b73e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f991 	bl	800ba76 <HAL_TIM_IC_CaptureCallback>
 800b754:	e005      	b.n	800b762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f983 	bl	800ba62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 f994 	bl	800ba8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	f003 0308 	and.w	r3, r3, #8
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d020      	beq.n	800b7b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f003 0308 	and.w	r3, r3, #8
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d01b      	beq.n	800b7b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f06f 0208 	mvn.w	r2, #8
 800b784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2204      	movs	r2, #4
 800b78a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	69db      	ldr	r3, [r3, #28]
 800b792:	f003 0303 	and.w	r3, r3, #3
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f96b 	bl	800ba76 <HAL_TIM_IC_CaptureCallback>
 800b7a0:	e005      	b.n	800b7ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f95d 	bl	800ba62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f96e 	bl	800ba8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	f003 0310 	and.w	r3, r3, #16
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d020      	beq.n	800b800 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f003 0310 	and.w	r3, r3, #16
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d01b      	beq.n	800b800 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f06f 0210 	mvn.w	r2, #16
 800b7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2208      	movs	r2, #8
 800b7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f945 	bl	800ba76 <HAL_TIM_IC_CaptureCallback>
 800b7ec:	e005      	b.n	800b7fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f937 	bl	800ba62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f948 	bl	800ba8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00c      	beq.n	800b824 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f06f 0201 	mvn.w	r2, #1
 800b81c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f915 	bl	800ba4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00c      	beq.n	800b848 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b834:	2b00      	cmp	r3, #0
 800b836:	d007      	beq.n	800b848 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fafc 	bl	800be40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00c      	beq.n	800b86c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d007      	beq.n	800b86c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 faf4 	bl	800be54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00c      	beq.n	800b890 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d007      	beq.n	800b890 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f907 	bl	800ba9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	f003 0320 	and.w	r3, r3, #32
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00c      	beq.n	800b8b4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f003 0320 	and.w	r3, r3, #32
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d007      	beq.n	800b8b4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f06f 0220 	mvn.w	r2, #32
 800b8ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fabc 	bl	800be2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8b4:	bf00      	nop
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d101      	bne.n	800b8d8 <HAL_TIM_ConfigClockSource+0x1c>
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	e0b6      	b.n	800ba46 <HAL_TIM_ConfigClockSource+0x18a>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b8fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b914:	d03e      	beq.n	800b994 <HAL_TIM_ConfigClockSource+0xd8>
 800b916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b91a:	f200 8087 	bhi.w	800ba2c <HAL_TIM_ConfigClockSource+0x170>
 800b91e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b922:	f000 8086 	beq.w	800ba32 <HAL_TIM_ConfigClockSource+0x176>
 800b926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b92a:	d87f      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x170>
 800b92c:	2b70      	cmp	r3, #112	@ 0x70
 800b92e:	d01a      	beq.n	800b966 <HAL_TIM_ConfigClockSource+0xaa>
 800b930:	2b70      	cmp	r3, #112	@ 0x70
 800b932:	d87b      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x170>
 800b934:	2b60      	cmp	r3, #96	@ 0x60
 800b936:	d050      	beq.n	800b9da <HAL_TIM_ConfigClockSource+0x11e>
 800b938:	2b60      	cmp	r3, #96	@ 0x60
 800b93a:	d877      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x170>
 800b93c:	2b50      	cmp	r3, #80	@ 0x50
 800b93e:	d03c      	beq.n	800b9ba <HAL_TIM_ConfigClockSource+0xfe>
 800b940:	2b50      	cmp	r3, #80	@ 0x50
 800b942:	d873      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x170>
 800b944:	2b40      	cmp	r3, #64	@ 0x40
 800b946:	d058      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x13e>
 800b948:	2b40      	cmp	r3, #64	@ 0x40
 800b94a:	d86f      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x170>
 800b94c:	2b30      	cmp	r3, #48	@ 0x30
 800b94e:	d064      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15e>
 800b950:	2b30      	cmp	r3, #48	@ 0x30
 800b952:	d86b      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x170>
 800b954:	2b20      	cmp	r3, #32
 800b956:	d060      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15e>
 800b958:	2b20      	cmp	r3, #32
 800b95a:	d867      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x170>
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d05c      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15e>
 800b960:	2b10      	cmp	r3, #16
 800b962:	d05a      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15e>
 800b964:	e062      	b.n	800ba2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b976:	f000 f9b1 	bl	800bcdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b988:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	609a      	str	r2, [r3, #8]
      break;
 800b992:	e04f      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b9a4:	f000 f99a 	bl	800bcdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689a      	ldr	r2, [r3, #8]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9b6:	609a      	str	r2, [r3, #8]
      break;
 800b9b8:	e03c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f000 f90e 	bl	800bbe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2150      	movs	r1, #80	@ 0x50
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 f967 	bl	800bca6 <TIM_ITRx_SetConfig>
      break;
 800b9d8:	e02c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f000 f92d 	bl	800bc46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2160      	movs	r1, #96	@ 0x60
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f957 	bl	800bca6 <TIM_ITRx_SetConfig>
      break;
 800b9f8:	e01c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba06:	461a      	mov	r2, r3
 800ba08:	f000 f8ee 	bl	800bbe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2140      	movs	r1, #64	@ 0x40
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 f947 	bl	800bca6 <TIM_ITRx_SetConfig>
      break;
 800ba18:	e00c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4619      	mov	r1, r3
 800ba24:	4610      	mov	r0, r2
 800ba26:	f000 f93e 	bl	800bca6 <TIM_ITRx_SetConfig>
      break;
 800ba2a:	e003      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba30:	e000      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ba32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba6a:	bf00      	nop
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b083      	sub	sp, #12
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba7e:	bf00      	nop
 800ba80:	370c      	adds	r7, #12
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b083      	sub	sp, #12
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba92:	bf00      	nop
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b083      	sub	sp, #12
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800baa6:	bf00      	nop
 800baa8:	370c      	adds	r7, #12
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
	...

0800bab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a40      	ldr	r2, [pc, #256]	@ (800bbc8 <TIM_Base_SetConfig+0x114>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d013      	beq.n	800baf4 <TIM_Base_SetConfig+0x40>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bad2:	d00f      	beq.n	800baf4 <TIM_Base_SetConfig+0x40>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a3d      	ldr	r2, [pc, #244]	@ (800bbcc <TIM_Base_SetConfig+0x118>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d00b      	beq.n	800baf4 <TIM_Base_SetConfig+0x40>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a3c      	ldr	r2, [pc, #240]	@ (800bbd0 <TIM_Base_SetConfig+0x11c>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d007      	beq.n	800baf4 <TIM_Base_SetConfig+0x40>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a3b      	ldr	r2, [pc, #236]	@ (800bbd4 <TIM_Base_SetConfig+0x120>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d003      	beq.n	800baf4 <TIM_Base_SetConfig+0x40>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a3a      	ldr	r2, [pc, #232]	@ (800bbd8 <TIM_Base_SetConfig+0x124>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d108      	bne.n	800bb06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bafa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a2f      	ldr	r2, [pc, #188]	@ (800bbc8 <TIM_Base_SetConfig+0x114>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d01f      	beq.n	800bb4e <TIM_Base_SetConfig+0x9a>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb14:	d01b      	beq.n	800bb4e <TIM_Base_SetConfig+0x9a>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a2c      	ldr	r2, [pc, #176]	@ (800bbcc <TIM_Base_SetConfig+0x118>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d017      	beq.n	800bb4e <TIM_Base_SetConfig+0x9a>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a2b      	ldr	r2, [pc, #172]	@ (800bbd0 <TIM_Base_SetConfig+0x11c>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d013      	beq.n	800bb4e <TIM_Base_SetConfig+0x9a>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a2a      	ldr	r2, [pc, #168]	@ (800bbd4 <TIM_Base_SetConfig+0x120>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d00f      	beq.n	800bb4e <TIM_Base_SetConfig+0x9a>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a29      	ldr	r2, [pc, #164]	@ (800bbd8 <TIM_Base_SetConfig+0x124>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d00b      	beq.n	800bb4e <TIM_Base_SetConfig+0x9a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a28      	ldr	r2, [pc, #160]	@ (800bbdc <TIM_Base_SetConfig+0x128>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d007      	beq.n	800bb4e <TIM_Base_SetConfig+0x9a>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a27      	ldr	r2, [pc, #156]	@ (800bbe0 <TIM_Base_SetConfig+0x12c>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d003      	beq.n	800bb4e <TIM_Base_SetConfig+0x9a>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a26      	ldr	r2, [pc, #152]	@ (800bbe4 <TIM_Base_SetConfig+0x130>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d108      	bne.n	800bb60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	689a      	ldr	r2, [r3, #8]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a10      	ldr	r2, [pc, #64]	@ (800bbc8 <TIM_Base_SetConfig+0x114>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d00f      	beq.n	800bbac <TIM_Base_SetConfig+0xf8>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a12      	ldr	r2, [pc, #72]	@ (800bbd8 <TIM_Base_SetConfig+0x124>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d00b      	beq.n	800bbac <TIM_Base_SetConfig+0xf8>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a11      	ldr	r2, [pc, #68]	@ (800bbdc <TIM_Base_SetConfig+0x128>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d007      	beq.n	800bbac <TIM_Base_SetConfig+0xf8>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a10      	ldr	r2, [pc, #64]	@ (800bbe0 <TIM_Base_SetConfig+0x12c>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d003      	beq.n	800bbac <TIM_Base_SetConfig+0xf8>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a0f      	ldr	r2, [pc, #60]	@ (800bbe4 <TIM_Base_SetConfig+0x130>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d103      	bne.n	800bbb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	691a      	ldr	r2, [r3, #16]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	615a      	str	r2, [r3, #20]
}
 800bbba:	bf00      	nop
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	40012c00 	.word	0x40012c00
 800bbcc:	40000400 	.word	0x40000400
 800bbd0:	40000800 	.word	0x40000800
 800bbd4:	40000c00 	.word	0x40000c00
 800bbd8:	40013400 	.word	0x40013400
 800bbdc:	40014000 	.word	0x40014000
 800bbe0:	40014400 	.word	0x40014400
 800bbe4:	40014800 	.word	0x40014800

0800bbe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b087      	sub	sp, #28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6a1b      	ldr	r3, [r3, #32]
 800bbf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	f023 0201 	bic.w	r2, r3, #1
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bc12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	011b      	lsls	r3, r3, #4
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	f023 030a 	bic.w	r3, r3, #10
 800bc24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	621a      	str	r2, [r3, #32]
}
 800bc3a:	bf00      	nop
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr

0800bc46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc46:	b480      	push	{r7}
 800bc48:	b087      	sub	sp, #28
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	60f8      	str	r0, [r7, #12]
 800bc4e:	60b9      	str	r1, [r7, #8]
 800bc50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	f023 0210 	bic.w	r2, r3, #16
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bc70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	031b      	lsls	r3, r3, #12
 800bc76:	693a      	ldr	r2, [r7, #16]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bc82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	011b      	lsls	r3, r3, #4
 800bc88:	697a      	ldr	r2, [r7, #20]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	621a      	str	r2, [r3, #32]
}
 800bc9a:	bf00      	nop
 800bc9c:	371c      	adds	r7, #28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b085      	sub	sp, #20
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	f043 0307 	orr.w	r3, r3, #7
 800bcc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	609a      	str	r2, [r3, #8]
}
 800bcd0:	bf00      	nop
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bcf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	021a      	lsls	r2, r3, #8
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	609a      	str	r2, [r3, #8]
}
 800bd10:	bf00      	nop
 800bd12:	371c      	adds	r7, #28
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d101      	bne.n	800bd34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd30:	2302      	movs	r3, #2
 800bd32:	e068      	b.n	800be06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a2e      	ldr	r2, [pc, #184]	@ (800be14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d004      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a2d      	ldr	r2, [pc, #180]	@ (800be18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d108      	bne.n	800bd7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bd6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a1e      	ldr	r2, [pc, #120]	@ (800be14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d01d      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda6:	d018      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a1b      	ldr	r2, [pc, #108]	@ (800be1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d013      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a1a      	ldr	r2, [pc, #104]	@ (800be20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d00e      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a18      	ldr	r2, [pc, #96]	@ (800be24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d009      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a13      	ldr	r2, [pc, #76]	@ (800be18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d004      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a14      	ldr	r2, [pc, #80]	@ (800be28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d10c      	bne.n	800bdf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bde0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	40012c00 	.word	0x40012c00
 800be18:	40013400 	.word	0x40013400
 800be1c:	40000400 	.word	0x40000400
 800be20:	40000800 	.word	0x40000800
 800be24:	40000c00 	.word	0x40000c00
 800be28:	40014000 	.word	0x40014000

0800be2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	e042      	b.n	800bf00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be80:	2b00      	cmp	r3, #0
 800be82:	d106      	bne.n	800be92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7fb f9e7 	bl	8007260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2224      	movs	r2, #36	@ 0x24
 800be96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f022 0201 	bic.w	r2, r2, #1
 800bea8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d002      	beq.n	800beb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fc7c 	bl	800c7b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 f97d 	bl	800c1b8 <UART_SetConfig>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d101      	bne.n	800bec8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	e01b      	b.n	800bf00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	689a      	ldr	r2, [r3, #8]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f042 0201 	orr.w	r2, r2, #1
 800bef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fcfb 	bl	800c8f4 <UART_CheckIdleState>
 800befe:	4603      	mov	r3, r0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08a      	sub	sp, #40	@ 0x28
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	603b      	str	r3, [r7, #0]
 800bf14:	4613      	mov	r3, r2
 800bf16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf1e:	2b20      	cmp	r3, #32
 800bf20:	d17b      	bne.n	800c01a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <HAL_UART_Transmit+0x26>
 800bf28:	88fb      	ldrh	r3, [r7, #6]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e074      	b.n	800c01c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2221      	movs	r2, #33	@ 0x21
 800bf3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf42:	f7fb fdfb 	bl	8007b3c <HAL_GetTick>
 800bf46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	88fa      	ldrh	r2, [r7, #6]
 800bf4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	88fa      	ldrh	r2, [r7, #6]
 800bf54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf60:	d108      	bne.n	800bf74 <HAL_UART_Transmit+0x6c>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d104      	bne.n	800bf74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	61bb      	str	r3, [r7, #24]
 800bf72:	e003      	b.n	800bf7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf7c:	e030      	b.n	800bfe0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	2200      	movs	r2, #0
 800bf86:	2180      	movs	r1, #128	@ 0x80
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f000 fd5d 	bl	800ca48 <UART_WaitOnFlagUntilTimeout>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d005      	beq.n	800bfa0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2220      	movs	r2, #32
 800bf98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e03d      	b.n	800c01c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d10b      	bne.n	800bfbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	881a      	ldrh	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfb2:	b292      	uxth	r2, r2
 800bfb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	3302      	adds	r3, #2
 800bfba:	61bb      	str	r3, [r7, #24]
 800bfbc:	e007      	b.n	800bfce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	781a      	ldrb	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1c8      	bne.n	800bf7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	2200      	movs	r2, #0
 800bff4:	2140      	movs	r1, #64	@ 0x40
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f000 fd26 	bl	800ca48 <UART_WaitOnFlagUntilTimeout>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d005      	beq.n	800c00e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2220      	movs	r2, #32
 800c006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c00a:	2303      	movs	r3, #3
 800c00c:	e006      	b.n	800c01c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2220      	movs	r2, #32
 800c012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	e000      	b.n	800c01c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c01a:	2302      	movs	r3, #2
  }
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08a      	sub	sp, #40	@ 0x28
 800c028:	af02      	add	r7, sp, #8
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	603b      	str	r3, [r7, #0]
 800c030:	4613      	mov	r3, r2
 800c032:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c03a:	2b20      	cmp	r3, #32
 800c03c:	f040 80b6 	bne.w	800c1ac <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <HAL_UART_Receive+0x28>
 800c046:	88fb      	ldrh	r3, [r7, #6]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e0ae      	b.n	800c1ae <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2222      	movs	r2, #34	@ 0x22
 800c05c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c066:	f7fb fd69 	bl	8007b3c <HAL_GetTick>
 800c06a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	88fa      	ldrh	r2, [r7, #6]
 800c070:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	88fa      	ldrh	r2, [r7, #6]
 800c078:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c084:	d10e      	bne.n	800c0a4 <HAL_UART_Receive+0x80>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d105      	bne.n	800c09a <HAL_UART_Receive+0x76>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c094:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c098:	e02d      	b.n	800c0f6 <HAL_UART_Receive+0xd2>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	22ff      	movs	r2, #255	@ 0xff
 800c09e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c0a2:	e028      	b.n	800c0f6 <HAL_UART_Receive+0xd2>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10d      	bne.n	800c0c8 <HAL_UART_Receive+0xa4>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d104      	bne.n	800c0be <HAL_UART_Receive+0x9a>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	22ff      	movs	r2, #255	@ 0xff
 800c0b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c0bc:	e01b      	b.n	800c0f6 <HAL_UART_Receive+0xd2>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	227f      	movs	r2, #127	@ 0x7f
 800c0c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c0c6:	e016      	b.n	800c0f6 <HAL_UART_Receive+0xd2>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0d0:	d10d      	bne.n	800c0ee <HAL_UART_Receive+0xca>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d104      	bne.n	800c0e4 <HAL_UART_Receive+0xc0>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	227f      	movs	r2, #127	@ 0x7f
 800c0de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c0e2:	e008      	b.n	800c0f6 <HAL_UART_Receive+0xd2>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	223f      	movs	r2, #63	@ 0x3f
 800c0e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c0ec:	e003      	b.n	800c0f6 <HAL_UART_Receive+0xd2>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c0fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c106:	d108      	bne.n	800c11a <HAL_UART_Receive+0xf6>
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d104      	bne.n	800c11a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800c110:	2300      	movs	r3, #0
 800c112:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	61bb      	str	r3, [r7, #24]
 800c118:	e003      	b.n	800c122 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c11e:	2300      	movs	r3, #0
 800c120:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c122:	e037      	b.n	800c194 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	2200      	movs	r2, #0
 800c12c:	2120      	movs	r1, #32
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 fc8a 	bl	800ca48 <UART_WaitOnFlagUntilTimeout>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c142:	2303      	movs	r3, #3
 800c144:	e033      	b.n	800c1ae <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10c      	bne.n	800c166 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c152:	b29a      	uxth	r2, r3
 800c154:	8a7b      	ldrh	r3, [r7, #18]
 800c156:	4013      	ands	r3, r2
 800c158:	b29a      	uxth	r2, r3
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	3302      	adds	r3, #2
 800c162:	61bb      	str	r3, [r7, #24]
 800c164:	e00d      	b.n	800c182 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	8a7b      	ldrh	r3, [r7, #18]
 800c172:	b2db      	uxtb	r3, r3
 800c174:	4013      	ands	r3, r2
 800c176:	b2da      	uxtb	r2, r3
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	3301      	adds	r3, #1
 800c180:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c188:	b29b      	uxth	r3, r3
 800c18a:	3b01      	subs	r3, #1
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1c1      	bne.n	800c124 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2220      	movs	r2, #32
 800c1a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	e000      	b.n	800c1ae <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800c1ac:	2302      	movs	r3, #2
  }
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3720      	adds	r7, #32
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1bc:	b08c      	sub	sp, #48	@ 0x30
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	689a      	ldr	r2, [r3, #8]
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	431a      	orrs	r2, r3
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	69db      	ldr	r3, [r3, #28]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	4baa      	ldr	r3, [pc, #680]	@ (800c490 <UART_SetConfig+0x2d8>)
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	6812      	ldr	r2, [r2, #0]
 800c1ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1f0:	430b      	orrs	r3, r1
 800c1f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	68da      	ldr	r2, [r3, #12]
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a9f      	ldr	r2, [pc, #636]	@ (800c494 <UART_SetConfig+0x2dc>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d004      	beq.n	800c224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	6a1b      	ldr	r3, [r3, #32]
 800c21e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c220:	4313      	orrs	r3, r2
 800c222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c22e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c232:	697a      	ldr	r2, [r7, #20]
 800c234:	6812      	ldr	r2, [r2, #0]
 800c236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c238:	430b      	orrs	r3, r1
 800c23a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c242:	f023 010f 	bic.w	r1, r3, #15
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	430a      	orrs	r2, r1
 800c250:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a90      	ldr	r2, [pc, #576]	@ (800c498 <UART_SetConfig+0x2e0>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d125      	bne.n	800c2a8 <UART_SetConfig+0xf0>
 800c25c:	4b8f      	ldr	r3, [pc, #572]	@ (800c49c <UART_SetConfig+0x2e4>)
 800c25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c262:	f003 0303 	and.w	r3, r3, #3
 800c266:	2b03      	cmp	r3, #3
 800c268:	d81a      	bhi.n	800c2a0 <UART_SetConfig+0xe8>
 800c26a:	a201      	add	r2, pc, #4	@ (adr r2, 800c270 <UART_SetConfig+0xb8>)
 800c26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c270:	0800c281 	.word	0x0800c281
 800c274:	0800c291 	.word	0x0800c291
 800c278:	0800c289 	.word	0x0800c289
 800c27c:	0800c299 	.word	0x0800c299
 800c280:	2301      	movs	r3, #1
 800c282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c286:	e116      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c288:	2302      	movs	r3, #2
 800c28a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c28e:	e112      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c290:	2304      	movs	r3, #4
 800c292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c296:	e10e      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c298:	2308      	movs	r3, #8
 800c29a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c29e:	e10a      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c2a0:	2310      	movs	r3, #16
 800c2a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2a6:	e106      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a7c      	ldr	r2, [pc, #496]	@ (800c4a0 <UART_SetConfig+0x2e8>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d138      	bne.n	800c324 <UART_SetConfig+0x16c>
 800c2b2:	4b7a      	ldr	r3, [pc, #488]	@ (800c49c <UART_SetConfig+0x2e4>)
 800c2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2b8:	f003 030c 	and.w	r3, r3, #12
 800c2bc:	2b0c      	cmp	r3, #12
 800c2be:	d82d      	bhi.n	800c31c <UART_SetConfig+0x164>
 800c2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c8 <UART_SetConfig+0x110>)
 800c2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c6:	bf00      	nop
 800c2c8:	0800c2fd 	.word	0x0800c2fd
 800c2cc:	0800c31d 	.word	0x0800c31d
 800c2d0:	0800c31d 	.word	0x0800c31d
 800c2d4:	0800c31d 	.word	0x0800c31d
 800c2d8:	0800c30d 	.word	0x0800c30d
 800c2dc:	0800c31d 	.word	0x0800c31d
 800c2e0:	0800c31d 	.word	0x0800c31d
 800c2e4:	0800c31d 	.word	0x0800c31d
 800c2e8:	0800c305 	.word	0x0800c305
 800c2ec:	0800c31d 	.word	0x0800c31d
 800c2f0:	0800c31d 	.word	0x0800c31d
 800c2f4:	0800c31d 	.word	0x0800c31d
 800c2f8:	0800c315 	.word	0x0800c315
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c302:	e0d8      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c304:	2302      	movs	r3, #2
 800c306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c30a:	e0d4      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c30c:	2304      	movs	r3, #4
 800c30e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c312:	e0d0      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c314:	2308      	movs	r3, #8
 800c316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c31a:	e0cc      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c31c:	2310      	movs	r3, #16
 800c31e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c322:	e0c8      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a5e      	ldr	r2, [pc, #376]	@ (800c4a4 <UART_SetConfig+0x2ec>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d125      	bne.n	800c37a <UART_SetConfig+0x1c2>
 800c32e:	4b5b      	ldr	r3, [pc, #364]	@ (800c49c <UART_SetConfig+0x2e4>)
 800c330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c334:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c338:	2b30      	cmp	r3, #48	@ 0x30
 800c33a:	d016      	beq.n	800c36a <UART_SetConfig+0x1b2>
 800c33c:	2b30      	cmp	r3, #48	@ 0x30
 800c33e:	d818      	bhi.n	800c372 <UART_SetConfig+0x1ba>
 800c340:	2b20      	cmp	r3, #32
 800c342:	d00a      	beq.n	800c35a <UART_SetConfig+0x1a2>
 800c344:	2b20      	cmp	r3, #32
 800c346:	d814      	bhi.n	800c372 <UART_SetConfig+0x1ba>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <UART_SetConfig+0x19a>
 800c34c:	2b10      	cmp	r3, #16
 800c34e:	d008      	beq.n	800c362 <UART_SetConfig+0x1aa>
 800c350:	e00f      	b.n	800c372 <UART_SetConfig+0x1ba>
 800c352:	2300      	movs	r3, #0
 800c354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c358:	e0ad      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c35a:	2302      	movs	r3, #2
 800c35c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c360:	e0a9      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c362:	2304      	movs	r3, #4
 800c364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c368:	e0a5      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c36a:	2308      	movs	r3, #8
 800c36c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c370:	e0a1      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c372:	2310      	movs	r3, #16
 800c374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c378:	e09d      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a4a      	ldr	r2, [pc, #296]	@ (800c4a8 <UART_SetConfig+0x2f0>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d125      	bne.n	800c3d0 <UART_SetConfig+0x218>
 800c384:	4b45      	ldr	r3, [pc, #276]	@ (800c49c <UART_SetConfig+0x2e4>)
 800c386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c38a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c38e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c390:	d016      	beq.n	800c3c0 <UART_SetConfig+0x208>
 800c392:	2bc0      	cmp	r3, #192	@ 0xc0
 800c394:	d818      	bhi.n	800c3c8 <UART_SetConfig+0x210>
 800c396:	2b80      	cmp	r3, #128	@ 0x80
 800c398:	d00a      	beq.n	800c3b0 <UART_SetConfig+0x1f8>
 800c39a:	2b80      	cmp	r3, #128	@ 0x80
 800c39c:	d814      	bhi.n	800c3c8 <UART_SetConfig+0x210>
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d002      	beq.n	800c3a8 <UART_SetConfig+0x1f0>
 800c3a2:	2b40      	cmp	r3, #64	@ 0x40
 800c3a4:	d008      	beq.n	800c3b8 <UART_SetConfig+0x200>
 800c3a6:	e00f      	b.n	800c3c8 <UART_SetConfig+0x210>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3ae:	e082      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3b6:	e07e      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c3b8:	2304      	movs	r3, #4
 800c3ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3be:	e07a      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c3c0:	2308      	movs	r3, #8
 800c3c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3c6:	e076      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c3c8:	2310      	movs	r3, #16
 800c3ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3ce:	e072      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a35      	ldr	r2, [pc, #212]	@ (800c4ac <UART_SetConfig+0x2f4>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d12a      	bne.n	800c430 <UART_SetConfig+0x278>
 800c3da:	4b30      	ldr	r3, [pc, #192]	@ (800c49c <UART_SetConfig+0x2e4>)
 800c3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3e8:	d01a      	beq.n	800c420 <UART_SetConfig+0x268>
 800c3ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3ee:	d81b      	bhi.n	800c428 <UART_SetConfig+0x270>
 800c3f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3f4:	d00c      	beq.n	800c410 <UART_SetConfig+0x258>
 800c3f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3fa:	d815      	bhi.n	800c428 <UART_SetConfig+0x270>
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d003      	beq.n	800c408 <UART_SetConfig+0x250>
 800c400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c404:	d008      	beq.n	800c418 <UART_SetConfig+0x260>
 800c406:	e00f      	b.n	800c428 <UART_SetConfig+0x270>
 800c408:	2300      	movs	r3, #0
 800c40a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c40e:	e052      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c410:	2302      	movs	r3, #2
 800c412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c416:	e04e      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c418:	2304      	movs	r3, #4
 800c41a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c41e:	e04a      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c420:	2308      	movs	r3, #8
 800c422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c426:	e046      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c428:	2310      	movs	r3, #16
 800c42a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c42e:	e042      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a17      	ldr	r2, [pc, #92]	@ (800c494 <UART_SetConfig+0x2dc>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d13a      	bne.n	800c4b0 <UART_SetConfig+0x2f8>
 800c43a:	4b18      	ldr	r3, [pc, #96]	@ (800c49c <UART_SetConfig+0x2e4>)
 800c43c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c440:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c444:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c448:	d01a      	beq.n	800c480 <UART_SetConfig+0x2c8>
 800c44a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c44e:	d81b      	bhi.n	800c488 <UART_SetConfig+0x2d0>
 800c450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c454:	d00c      	beq.n	800c470 <UART_SetConfig+0x2b8>
 800c456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c45a:	d815      	bhi.n	800c488 <UART_SetConfig+0x2d0>
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d003      	beq.n	800c468 <UART_SetConfig+0x2b0>
 800c460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c464:	d008      	beq.n	800c478 <UART_SetConfig+0x2c0>
 800c466:	e00f      	b.n	800c488 <UART_SetConfig+0x2d0>
 800c468:	2300      	movs	r3, #0
 800c46a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c46e:	e022      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c470:	2302      	movs	r3, #2
 800c472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c476:	e01e      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c478:	2304      	movs	r3, #4
 800c47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c47e:	e01a      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c480:	2308      	movs	r3, #8
 800c482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c486:	e016      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c488:	2310      	movs	r3, #16
 800c48a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c48e:	e012      	b.n	800c4b6 <UART_SetConfig+0x2fe>
 800c490:	cfff69f3 	.word	0xcfff69f3
 800c494:	40008000 	.word	0x40008000
 800c498:	40013800 	.word	0x40013800
 800c49c:	40021000 	.word	0x40021000
 800c4a0:	40004400 	.word	0x40004400
 800c4a4:	40004800 	.word	0x40004800
 800c4a8:	40004c00 	.word	0x40004c00
 800c4ac:	40005000 	.word	0x40005000
 800c4b0:	2310      	movs	r3, #16
 800c4b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4aae      	ldr	r2, [pc, #696]	@ (800c774 <UART_SetConfig+0x5bc>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	f040 8097 	bne.w	800c5f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c4c6:	2b08      	cmp	r3, #8
 800c4c8:	d823      	bhi.n	800c512 <UART_SetConfig+0x35a>
 800c4ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d0 <UART_SetConfig+0x318>)
 800c4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d0:	0800c4f5 	.word	0x0800c4f5
 800c4d4:	0800c513 	.word	0x0800c513
 800c4d8:	0800c4fd 	.word	0x0800c4fd
 800c4dc:	0800c513 	.word	0x0800c513
 800c4e0:	0800c503 	.word	0x0800c503
 800c4e4:	0800c513 	.word	0x0800c513
 800c4e8:	0800c513 	.word	0x0800c513
 800c4ec:	0800c513 	.word	0x0800c513
 800c4f0:	0800c50b 	.word	0x0800c50b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4f4:	f7fd fc76 	bl	8009de4 <HAL_RCC_GetPCLK1Freq>
 800c4f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c4fa:	e010      	b.n	800c51e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4fc:	4b9e      	ldr	r3, [pc, #632]	@ (800c778 <UART_SetConfig+0x5c0>)
 800c4fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c500:	e00d      	b.n	800c51e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c502:	f7fd fbd7 	bl	8009cb4 <HAL_RCC_GetSysClockFreq>
 800c506:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c508:	e009      	b.n	800c51e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c50a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c50e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c510:	e005      	b.n	800c51e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c512:	2300      	movs	r3, #0
 800c514:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c51c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	f000 8130 	beq.w	800c786 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c52a:	4a94      	ldr	r2, [pc, #592]	@ (800c77c <UART_SetConfig+0x5c4>)
 800c52c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c530:	461a      	mov	r2, r3
 800c532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c534:	fbb3 f3f2 	udiv	r3, r3, r2
 800c538:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	4613      	mov	r3, r2
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	4413      	add	r3, r2
 800c544:	69ba      	ldr	r2, [r7, #24]
 800c546:	429a      	cmp	r2, r3
 800c548:	d305      	bcc.n	800c556 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c550:	69ba      	ldr	r2, [r7, #24]
 800c552:	429a      	cmp	r2, r3
 800c554:	d903      	bls.n	800c55e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c556:	2301      	movs	r3, #1
 800c558:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c55c:	e113      	b.n	800c786 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c560:	2200      	movs	r2, #0
 800c562:	60bb      	str	r3, [r7, #8]
 800c564:	60fa      	str	r2, [r7, #12]
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c56a:	4a84      	ldr	r2, [pc, #528]	@ (800c77c <UART_SetConfig+0x5c4>)
 800c56c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c570:	b29b      	uxth	r3, r3
 800c572:	2200      	movs	r2, #0
 800c574:	603b      	str	r3, [r7, #0]
 800c576:	607a      	str	r2, [r7, #4]
 800c578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c57c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c580:	f7f4 fb44 	bl	8000c0c <__aeabi_uldivmod>
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	4610      	mov	r0, r2
 800c58a:	4619      	mov	r1, r3
 800c58c:	f04f 0200 	mov.w	r2, #0
 800c590:	f04f 0300 	mov.w	r3, #0
 800c594:	020b      	lsls	r3, r1, #8
 800c596:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c59a:	0202      	lsls	r2, r0, #8
 800c59c:	6979      	ldr	r1, [r7, #20]
 800c59e:	6849      	ldr	r1, [r1, #4]
 800c5a0:	0849      	lsrs	r1, r1, #1
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	460c      	mov	r4, r1
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	eb12 0804 	adds.w	r8, r2, r4
 800c5ac:	eb43 0905 	adc.w	r9, r3, r5
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	469a      	mov	sl, r3
 800c5b8:	4693      	mov	fp, r2
 800c5ba:	4652      	mov	r2, sl
 800c5bc:	465b      	mov	r3, fp
 800c5be:	4640      	mov	r0, r8
 800c5c0:	4649      	mov	r1, r9
 800c5c2:	f7f4 fb23 	bl	8000c0c <__aeabi_uldivmod>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5ce:	6a3b      	ldr	r3, [r7, #32]
 800c5d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5d4:	d308      	bcc.n	800c5e8 <UART_SetConfig+0x430>
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5dc:	d204      	bcs.n	800c5e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	6a3a      	ldr	r2, [r7, #32]
 800c5e4:	60da      	str	r2, [r3, #12]
 800c5e6:	e0ce      	b.n	800c786 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c5ee:	e0ca      	b.n	800c786 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	69db      	ldr	r3, [r3, #28]
 800c5f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5f8:	d166      	bne.n	800c6c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c5fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c5fe:	2b08      	cmp	r3, #8
 800c600:	d827      	bhi.n	800c652 <UART_SetConfig+0x49a>
 800c602:	a201      	add	r2, pc, #4	@ (adr r2, 800c608 <UART_SetConfig+0x450>)
 800c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c608:	0800c62d 	.word	0x0800c62d
 800c60c:	0800c635 	.word	0x0800c635
 800c610:	0800c63d 	.word	0x0800c63d
 800c614:	0800c653 	.word	0x0800c653
 800c618:	0800c643 	.word	0x0800c643
 800c61c:	0800c653 	.word	0x0800c653
 800c620:	0800c653 	.word	0x0800c653
 800c624:	0800c653 	.word	0x0800c653
 800c628:	0800c64b 	.word	0x0800c64b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c62c:	f7fd fbda 	bl	8009de4 <HAL_RCC_GetPCLK1Freq>
 800c630:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c632:	e014      	b.n	800c65e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c634:	f7fd fbec 	bl	8009e10 <HAL_RCC_GetPCLK2Freq>
 800c638:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c63a:	e010      	b.n	800c65e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c63c:	4b4e      	ldr	r3, [pc, #312]	@ (800c778 <UART_SetConfig+0x5c0>)
 800c63e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c640:	e00d      	b.n	800c65e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c642:	f7fd fb37 	bl	8009cb4 <HAL_RCC_GetSysClockFreq>
 800c646:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c648:	e009      	b.n	800c65e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c64a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c64e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c650:	e005      	b.n	800c65e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c652:	2300      	movs	r3, #0
 800c654:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c65c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c660:	2b00      	cmp	r3, #0
 800c662:	f000 8090 	beq.w	800c786 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66a:	4a44      	ldr	r2, [pc, #272]	@ (800c77c <UART_SetConfig+0x5c4>)
 800c66c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c670:	461a      	mov	r2, r3
 800c672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c674:	fbb3 f3f2 	udiv	r3, r3, r2
 800c678:	005a      	lsls	r2, r3, #1
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	085b      	lsrs	r3, r3, #1
 800c680:	441a      	add	r2, r3
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	fbb2 f3f3 	udiv	r3, r2, r3
 800c68a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	2b0f      	cmp	r3, #15
 800c690:	d916      	bls.n	800c6c0 <UART_SetConfig+0x508>
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c698:	d212      	bcs.n	800c6c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	f023 030f 	bic.w	r3, r3, #15
 800c6a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	085b      	lsrs	r3, r3, #1
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	f003 0307 	and.w	r3, r3, #7
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	8bfb      	ldrh	r3, [r7, #30]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	8bfa      	ldrh	r2, [r7, #30]
 800c6bc:	60da      	str	r2, [r3, #12]
 800c6be:	e062      	b.n	800c786 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c6c6:	e05e      	b.n	800c786 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c6cc:	2b08      	cmp	r3, #8
 800c6ce:	d828      	bhi.n	800c722 <UART_SetConfig+0x56a>
 800c6d0:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d8 <UART_SetConfig+0x520>)
 800c6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d6:	bf00      	nop
 800c6d8:	0800c6fd 	.word	0x0800c6fd
 800c6dc:	0800c705 	.word	0x0800c705
 800c6e0:	0800c70d 	.word	0x0800c70d
 800c6e4:	0800c723 	.word	0x0800c723
 800c6e8:	0800c713 	.word	0x0800c713
 800c6ec:	0800c723 	.word	0x0800c723
 800c6f0:	0800c723 	.word	0x0800c723
 800c6f4:	0800c723 	.word	0x0800c723
 800c6f8:	0800c71b 	.word	0x0800c71b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6fc:	f7fd fb72 	bl	8009de4 <HAL_RCC_GetPCLK1Freq>
 800c700:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c702:	e014      	b.n	800c72e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c704:	f7fd fb84 	bl	8009e10 <HAL_RCC_GetPCLK2Freq>
 800c708:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c70a:	e010      	b.n	800c72e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c70c:	4b1a      	ldr	r3, [pc, #104]	@ (800c778 <UART_SetConfig+0x5c0>)
 800c70e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c710:	e00d      	b.n	800c72e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c712:	f7fd facf 	bl	8009cb4 <HAL_RCC_GetSysClockFreq>
 800c716:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c718:	e009      	b.n	800c72e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c71a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c71e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c720:	e005      	b.n	800c72e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c722:	2300      	movs	r3, #0
 800c724:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c72c:	bf00      	nop
    }

    if (pclk != 0U)
 800c72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c730:	2b00      	cmp	r3, #0
 800c732:	d028      	beq.n	800c786 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c738:	4a10      	ldr	r2, [pc, #64]	@ (800c77c <UART_SetConfig+0x5c4>)
 800c73a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c73e:	461a      	mov	r2, r3
 800c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c742:	fbb3 f2f2 	udiv	r2, r3, r2
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	085b      	lsrs	r3, r3, #1
 800c74c:	441a      	add	r2, r3
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	fbb2 f3f3 	udiv	r3, r2, r3
 800c756:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	2b0f      	cmp	r3, #15
 800c75c:	d910      	bls.n	800c780 <UART_SetConfig+0x5c8>
 800c75e:	6a3b      	ldr	r3, [r7, #32]
 800c760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c764:	d20c      	bcs.n	800c780 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	b29a      	uxth	r2, r3
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60da      	str	r2, [r3, #12]
 800c770:	e009      	b.n	800c786 <UART_SetConfig+0x5ce>
 800c772:	bf00      	nop
 800c774:	40008000 	.word	0x40008000
 800c778:	00f42400 	.word	0x00f42400
 800c77c:	0801d6c8 	.word	0x0801d6c8
      }
      else
      {
        ret = HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2201      	movs	r2, #1
 800c78a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	2201      	movs	r2, #1
 800c792:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	2200      	movs	r2, #0
 800c79a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c7a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3730      	adds	r7, #48	@ 0x30
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c7b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7bc:	f003 0308 	and.w	r3, r3, #8
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00a      	beq.n	800c7da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	430a      	orrs	r2, r1
 800c7d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7de:	f003 0301 	and.w	r3, r3, #1
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00a      	beq.n	800c7fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	430a      	orrs	r2, r1
 800c7fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c800:	f003 0302 	and.w	r3, r3, #2
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00a      	beq.n	800c81e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	430a      	orrs	r2, r1
 800c81c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c822:	f003 0304 	and.w	r3, r3, #4
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00a      	beq.n	800c840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	430a      	orrs	r2, r1
 800c83e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c844:	f003 0310 	and.w	r3, r3, #16
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00a      	beq.n	800c862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	430a      	orrs	r2, r1
 800c860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c866:	f003 0320 	and.w	r3, r3, #32
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00a      	beq.n	800c884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	430a      	orrs	r2, r1
 800c882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d01a      	beq.n	800c8c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8ae:	d10a      	bne.n	800c8c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00a      	beq.n	800c8e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	430a      	orrs	r2, r1
 800c8e6:	605a      	str	r2, [r3, #4]
  }
}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b098      	sub	sp, #96	@ 0x60
 800c8f8:	af02      	add	r7, sp, #8
 800c8fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c904:	f7fb f91a 	bl	8007b3c <HAL_GetTick>
 800c908:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0308 	and.w	r3, r3, #8
 800c914:	2b08      	cmp	r3, #8
 800c916:	d12f      	bne.n	800c978 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c918:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c920:	2200      	movs	r2, #0
 800c922:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f88e 	bl	800ca48 <UART_WaitOnFlagUntilTimeout>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d022      	beq.n	800c978 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93a:	e853 3f00 	ldrex	r3, [r3]
 800c93e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c946:	653b      	str	r3, [r7, #80]	@ 0x50
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	461a      	mov	r2, r3
 800c94e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c950:	647b      	str	r3, [r7, #68]	@ 0x44
 800c952:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c954:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c958:	e841 2300 	strex	r3, r2, [r1]
 800c95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c95e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1e6      	bne.n	800c932 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2220      	movs	r2, #32
 800c968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c974:	2303      	movs	r3, #3
 800c976:	e063      	b.n	800ca40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 0304 	and.w	r3, r3, #4
 800c982:	2b04      	cmp	r3, #4
 800c984:	d149      	bne.n	800ca1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c986:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c98e:	2200      	movs	r2, #0
 800c990:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 f857 	bl	800ca48 <UART_WaitOnFlagUntilTimeout>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d03c      	beq.n	800ca1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a8:	e853 3f00 	ldrex	r3, [r3]
 800c9ac:	623b      	str	r3, [r7, #32]
   return(result);
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9be:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9c6:	e841 2300 	strex	r3, r2, [r1]
 800c9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1e6      	bne.n	800c9a0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	3308      	adds	r3, #8
 800c9d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	e853 3f00 	ldrex	r3, [r3]
 800c9e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f023 0301 	bic.w	r3, r3, #1
 800c9e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	3308      	adds	r3, #8
 800c9f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9f2:	61fa      	str	r2, [r7, #28]
 800c9f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f6:	69b9      	ldr	r1, [r7, #24]
 800c9f8:	69fa      	ldr	r2, [r7, #28]
 800c9fa:	e841 2300 	strex	r3, r2, [r1]
 800c9fe:	617b      	str	r3, [r7, #20]
   return(result);
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1e5      	bne.n	800c9d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2220      	movs	r2, #32
 800ca0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca16:	2303      	movs	r3, #3
 800ca18:	e012      	b.n	800ca40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2220      	movs	r2, #32
 800ca1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2220      	movs	r2, #32
 800ca26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3758      	adds	r7, #88	@ 0x58
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	603b      	str	r3, [r7, #0]
 800ca54:	4613      	mov	r3, r2
 800ca56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca58:	e049      	b.n	800caee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca60:	d045      	beq.n	800caee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca62:	f7fb f86b 	bl	8007b3c <HAL_GetTick>
 800ca66:	4602      	mov	r2, r0
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d302      	bcc.n	800ca78 <UART_WaitOnFlagUntilTimeout+0x30>
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	e048      	b.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f003 0304 	and.w	r3, r3, #4
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d031      	beq.n	800caee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	69db      	ldr	r3, [r3, #28]
 800ca90:	f003 0308 	and.w	r3, r3, #8
 800ca94:	2b08      	cmp	r3, #8
 800ca96:	d110      	bne.n	800caba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2208      	movs	r2, #8
 800ca9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f000 f838 	bl	800cb16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2208      	movs	r2, #8
 800caaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e029      	b.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	69db      	ldr	r3, [r3, #28]
 800cac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cac8:	d111      	bne.n	800caee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cad2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 f81e 	bl	800cb16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2220      	movs	r2, #32
 800cade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800caea:	2303      	movs	r3, #3
 800caec:	e00f      	b.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	69da      	ldr	r2, [r3, #28]
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	4013      	ands	r3, r2
 800caf8:	68ba      	ldr	r2, [r7, #8]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	bf0c      	ite	eq
 800cafe:	2301      	moveq	r3, #1
 800cb00:	2300      	movne	r3, #0
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	461a      	mov	r2, r3
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d0a6      	beq.n	800ca5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b095      	sub	sp, #84	@ 0x54
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb26:	e853 3f00 	ldrex	r3, [r3]
 800cb2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb44:	e841 2300 	strex	r3, r2, [r1]
 800cb48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1e6      	bne.n	800cb1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3308      	adds	r3, #8
 800cb56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	e853 3f00 	ldrex	r3, [r3]
 800cb5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb66:	f023 0301 	bic.w	r3, r3, #1
 800cb6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3308      	adds	r3, #8
 800cb72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb7c:	e841 2300 	strex	r3, r2, [r1]
 800cb80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e3      	bne.n	800cb50 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d118      	bne.n	800cbc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	e853 3f00 	ldrex	r3, [r3]
 800cb9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	f023 0310 	bic.w	r3, r3, #16
 800cba4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbae:	61bb      	str	r3, [r7, #24]
 800cbb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb2:	6979      	ldr	r1, [r7, #20]
 800cbb4:	69ba      	ldr	r2, [r7, #24]
 800cbb6:	e841 2300 	strex	r3, r2, [r1]
 800cbba:	613b      	str	r3, [r7, #16]
   return(result);
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d1e6      	bne.n	800cb90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2220      	movs	r2, #32
 800cbc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cbd6:	bf00      	nop
 800cbd8:	3754      	adds	r7, #84	@ 0x54
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr

0800cbe2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cbe2:	b480      	push	{r7}
 800cbe4:	b085      	sub	sp, #20
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d101      	bne.n	800cbf8 <HAL_UARTEx_DisableFifoMode+0x16>
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	e027      	b.n	800cc48 <HAL_UARTEx_DisableFifoMode+0x66>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2224      	movs	r2, #36	@ 0x24
 800cc04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f022 0201 	bic.w	r2, r2, #1
 800cc1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cc26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2220      	movs	r2, #32
 800cc3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3714      	adds	r7, #20
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d101      	bne.n	800cc6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc68:	2302      	movs	r3, #2
 800cc6a:	e02d      	b.n	800ccc8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2224      	movs	r2, #36	@ 0x24
 800cc78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f022 0201 	bic.w	r2, r2, #1
 800cc92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	683a      	ldr	r2, [r7, #0]
 800cca4:	430a      	orrs	r2, r1
 800cca6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 f84f 	bl	800cd4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2220      	movs	r2, #32
 800ccba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ccc6:	2300      	movs	r3, #0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d101      	bne.n	800cce8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cce4:	2302      	movs	r3, #2
 800cce6:	e02d      	b.n	800cd44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2201      	movs	r2, #1
 800ccec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2224      	movs	r2, #36	@ 0x24
 800ccf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f022 0201 	bic.w	r2, r2, #1
 800cd0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	430a      	orrs	r2, r1
 800cd22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f811 	bl	800cd4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2220      	movs	r2, #32
 800cd36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d108      	bne.n	800cd6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd6c:	e031      	b.n	800cdd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd6e:	2308      	movs	r3, #8
 800cd70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd72:	2308      	movs	r3, #8
 800cd74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	0e5b      	lsrs	r3, r3, #25
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	f003 0307 	and.w	r3, r3, #7
 800cd84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	0f5b      	lsrs	r3, r3, #29
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	f003 0307 	and.w	r3, r3, #7
 800cd94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	7b3a      	ldrb	r2, [r7, #12]
 800cd9a:	4911      	ldr	r1, [pc, #68]	@ (800cde0 <UARTEx_SetNbDataToProcess+0x94>)
 800cd9c:	5c8a      	ldrb	r2, [r1, r2]
 800cd9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cda2:	7b3a      	ldrb	r2, [r7, #12]
 800cda4:	490f      	ldr	r1, [pc, #60]	@ (800cde4 <UARTEx_SetNbDataToProcess+0x98>)
 800cda6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cda8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	7b7a      	ldrb	r2, [r7, #13]
 800cdb8:	4909      	ldr	r1, [pc, #36]	@ (800cde0 <UARTEx_SetNbDataToProcess+0x94>)
 800cdba:	5c8a      	ldrb	r2, [r1, r2]
 800cdbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdc0:	7b7a      	ldrb	r2, [r7, #13]
 800cdc2:	4908      	ldr	r1, [pc, #32]	@ (800cde4 <UARTEx_SetNbDataToProcess+0x98>)
 800cdc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cdd2:	bf00      	nop
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	0801d6e0 	.word	0x0801d6e0
 800cde4:	0801d6e8 	.word	0x0801d6e8

0800cde8 <siprintf>:
 800cde8:	b40e      	push	{r1, r2, r3}
 800cdea:	b500      	push	{lr}
 800cdec:	b09c      	sub	sp, #112	@ 0x70
 800cdee:	ab1d      	add	r3, sp, #116	@ 0x74
 800cdf0:	9002      	str	r0, [sp, #8]
 800cdf2:	9006      	str	r0, [sp, #24]
 800cdf4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cdf8:	4809      	ldr	r0, [pc, #36]	@ (800ce20 <siprintf+0x38>)
 800cdfa:	9107      	str	r1, [sp, #28]
 800cdfc:	9104      	str	r1, [sp, #16]
 800cdfe:	4909      	ldr	r1, [pc, #36]	@ (800ce24 <siprintf+0x3c>)
 800ce00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce04:	9105      	str	r1, [sp, #20]
 800ce06:	6800      	ldr	r0, [r0, #0]
 800ce08:	9301      	str	r3, [sp, #4]
 800ce0a:	a902      	add	r1, sp, #8
 800ce0c:	f000 f8aa 	bl	800cf64 <_svfiprintf_r>
 800ce10:	9b02      	ldr	r3, [sp, #8]
 800ce12:	2200      	movs	r2, #0
 800ce14:	701a      	strb	r2, [r3, #0]
 800ce16:	b01c      	add	sp, #112	@ 0x70
 800ce18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce1c:	b003      	add	sp, #12
 800ce1e:	4770      	bx	lr
 800ce20:	20000010 	.word	0x20000010
 800ce24:	ffff0208 	.word	0xffff0208

0800ce28 <memset>:
 800ce28:	4402      	add	r2, r0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d100      	bne.n	800ce32 <memset+0xa>
 800ce30:	4770      	bx	lr
 800ce32:	f803 1b01 	strb.w	r1, [r3], #1
 800ce36:	e7f9      	b.n	800ce2c <memset+0x4>

0800ce38 <__errno>:
 800ce38:	4b01      	ldr	r3, [pc, #4]	@ (800ce40 <__errno+0x8>)
 800ce3a:	6818      	ldr	r0, [r3, #0]
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop
 800ce40:	20000010 	.word	0x20000010

0800ce44 <__libc_init_array>:
 800ce44:	b570      	push	{r4, r5, r6, lr}
 800ce46:	4d0d      	ldr	r5, [pc, #52]	@ (800ce7c <__libc_init_array+0x38>)
 800ce48:	4c0d      	ldr	r4, [pc, #52]	@ (800ce80 <__libc_init_array+0x3c>)
 800ce4a:	1b64      	subs	r4, r4, r5
 800ce4c:	10a4      	asrs	r4, r4, #2
 800ce4e:	2600      	movs	r6, #0
 800ce50:	42a6      	cmp	r6, r4
 800ce52:	d109      	bne.n	800ce68 <__libc_init_array+0x24>
 800ce54:	4d0b      	ldr	r5, [pc, #44]	@ (800ce84 <__libc_init_array+0x40>)
 800ce56:	4c0c      	ldr	r4, [pc, #48]	@ (800ce88 <__libc_init_array+0x44>)
 800ce58:	f001 fc96 	bl	800e788 <_init>
 800ce5c:	1b64      	subs	r4, r4, r5
 800ce5e:	10a4      	asrs	r4, r4, #2
 800ce60:	2600      	movs	r6, #0
 800ce62:	42a6      	cmp	r6, r4
 800ce64:	d105      	bne.n	800ce72 <__libc_init_array+0x2e>
 800ce66:	bd70      	pop	{r4, r5, r6, pc}
 800ce68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce6c:	4798      	blx	r3
 800ce6e:	3601      	adds	r6, #1
 800ce70:	e7ee      	b.n	800ce50 <__libc_init_array+0xc>
 800ce72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce76:	4798      	blx	r3
 800ce78:	3601      	adds	r6, #1
 800ce7a:	e7f2      	b.n	800ce62 <__libc_init_array+0x1e>
 800ce7c:	0801d908 	.word	0x0801d908
 800ce80:	0801d908 	.word	0x0801d908
 800ce84:	0801d908 	.word	0x0801d908
 800ce88:	0801d90c 	.word	0x0801d90c

0800ce8c <__retarget_lock_acquire_recursive>:
 800ce8c:	4770      	bx	lr

0800ce8e <__retarget_lock_release_recursive>:
 800ce8e:	4770      	bx	lr

0800ce90 <memcpy>:
 800ce90:	440a      	add	r2, r1
 800ce92:	4291      	cmp	r1, r2
 800ce94:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ce98:	d100      	bne.n	800ce9c <memcpy+0xc>
 800ce9a:	4770      	bx	lr
 800ce9c:	b510      	push	{r4, lr}
 800ce9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cea6:	4291      	cmp	r1, r2
 800cea8:	d1f9      	bne.n	800ce9e <memcpy+0xe>
 800ceaa:	bd10      	pop	{r4, pc}

0800ceac <__ssputs_r>:
 800ceac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb0:	688e      	ldr	r6, [r1, #8]
 800ceb2:	461f      	mov	r7, r3
 800ceb4:	42be      	cmp	r6, r7
 800ceb6:	680b      	ldr	r3, [r1, #0]
 800ceb8:	4682      	mov	sl, r0
 800ceba:	460c      	mov	r4, r1
 800cebc:	4690      	mov	r8, r2
 800cebe:	d82d      	bhi.n	800cf1c <__ssputs_r+0x70>
 800cec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cec4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cec8:	d026      	beq.n	800cf18 <__ssputs_r+0x6c>
 800ceca:	6965      	ldr	r5, [r4, #20]
 800cecc:	6909      	ldr	r1, [r1, #16]
 800cece:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ced2:	eba3 0901 	sub.w	r9, r3, r1
 800ced6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceda:	1c7b      	adds	r3, r7, #1
 800cedc:	444b      	add	r3, r9
 800cede:	106d      	asrs	r5, r5, #1
 800cee0:	429d      	cmp	r5, r3
 800cee2:	bf38      	it	cc
 800cee4:	461d      	movcc	r5, r3
 800cee6:	0553      	lsls	r3, r2, #21
 800cee8:	d527      	bpl.n	800cf3a <__ssputs_r+0x8e>
 800ceea:	4629      	mov	r1, r5
 800ceec:	f000 f958 	bl	800d1a0 <_malloc_r>
 800cef0:	4606      	mov	r6, r0
 800cef2:	b360      	cbz	r0, 800cf4e <__ssputs_r+0xa2>
 800cef4:	6921      	ldr	r1, [r4, #16]
 800cef6:	464a      	mov	r2, r9
 800cef8:	f7ff ffca 	bl	800ce90 <memcpy>
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf06:	81a3      	strh	r3, [r4, #12]
 800cf08:	6126      	str	r6, [r4, #16]
 800cf0a:	6165      	str	r5, [r4, #20]
 800cf0c:	444e      	add	r6, r9
 800cf0e:	eba5 0509 	sub.w	r5, r5, r9
 800cf12:	6026      	str	r6, [r4, #0]
 800cf14:	60a5      	str	r5, [r4, #8]
 800cf16:	463e      	mov	r6, r7
 800cf18:	42be      	cmp	r6, r7
 800cf1a:	d900      	bls.n	800cf1e <__ssputs_r+0x72>
 800cf1c:	463e      	mov	r6, r7
 800cf1e:	6820      	ldr	r0, [r4, #0]
 800cf20:	4632      	mov	r2, r6
 800cf22:	4641      	mov	r1, r8
 800cf24:	f000 fb84 	bl	800d630 <memmove>
 800cf28:	68a3      	ldr	r3, [r4, #8]
 800cf2a:	1b9b      	subs	r3, r3, r6
 800cf2c:	60a3      	str	r3, [r4, #8]
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	4433      	add	r3, r6
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	2000      	movs	r0, #0
 800cf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf3a:	462a      	mov	r2, r5
 800cf3c:	f000 fb4a 	bl	800d5d4 <_realloc_r>
 800cf40:	4606      	mov	r6, r0
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d1e0      	bne.n	800cf08 <__ssputs_r+0x5c>
 800cf46:	6921      	ldr	r1, [r4, #16]
 800cf48:	4650      	mov	r0, sl
 800cf4a:	f000 fb9b 	bl	800d684 <_free_r>
 800cf4e:	230c      	movs	r3, #12
 800cf50:	f8ca 3000 	str.w	r3, [sl]
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf5a:	81a3      	strh	r3, [r4, #12]
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf60:	e7e9      	b.n	800cf36 <__ssputs_r+0x8a>
	...

0800cf64 <_svfiprintf_r>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	4698      	mov	r8, r3
 800cf6a:	898b      	ldrh	r3, [r1, #12]
 800cf6c:	061b      	lsls	r3, r3, #24
 800cf6e:	b09d      	sub	sp, #116	@ 0x74
 800cf70:	4607      	mov	r7, r0
 800cf72:	460d      	mov	r5, r1
 800cf74:	4614      	mov	r4, r2
 800cf76:	d510      	bpl.n	800cf9a <_svfiprintf_r+0x36>
 800cf78:	690b      	ldr	r3, [r1, #16]
 800cf7a:	b973      	cbnz	r3, 800cf9a <_svfiprintf_r+0x36>
 800cf7c:	2140      	movs	r1, #64	@ 0x40
 800cf7e:	f000 f90f 	bl	800d1a0 <_malloc_r>
 800cf82:	6028      	str	r0, [r5, #0]
 800cf84:	6128      	str	r0, [r5, #16]
 800cf86:	b930      	cbnz	r0, 800cf96 <_svfiprintf_r+0x32>
 800cf88:	230c      	movs	r3, #12
 800cf8a:	603b      	str	r3, [r7, #0]
 800cf8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf90:	b01d      	add	sp, #116	@ 0x74
 800cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf96:	2340      	movs	r3, #64	@ 0x40
 800cf98:	616b      	str	r3, [r5, #20]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf9e:	2320      	movs	r3, #32
 800cfa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfa8:	2330      	movs	r3, #48	@ 0x30
 800cfaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d148 <_svfiprintf_r+0x1e4>
 800cfae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfb2:	f04f 0901 	mov.w	r9, #1
 800cfb6:	4623      	mov	r3, r4
 800cfb8:	469a      	mov	sl, r3
 800cfba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfbe:	b10a      	cbz	r2, 800cfc4 <_svfiprintf_r+0x60>
 800cfc0:	2a25      	cmp	r2, #37	@ 0x25
 800cfc2:	d1f9      	bne.n	800cfb8 <_svfiprintf_r+0x54>
 800cfc4:	ebba 0b04 	subs.w	fp, sl, r4
 800cfc8:	d00b      	beq.n	800cfe2 <_svfiprintf_r+0x7e>
 800cfca:	465b      	mov	r3, fp
 800cfcc:	4622      	mov	r2, r4
 800cfce:	4629      	mov	r1, r5
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	f7ff ff6b 	bl	800ceac <__ssputs_r>
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	f000 80a7 	beq.w	800d12a <_svfiprintf_r+0x1c6>
 800cfdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfde:	445a      	add	r2, fp
 800cfe0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfe2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f000 809f 	beq.w	800d12a <_svfiprintf_r+0x1c6>
 800cfec:	2300      	movs	r3, #0
 800cfee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cff6:	f10a 0a01 	add.w	sl, sl, #1
 800cffa:	9304      	str	r3, [sp, #16]
 800cffc:	9307      	str	r3, [sp, #28]
 800cffe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d002:	931a      	str	r3, [sp, #104]	@ 0x68
 800d004:	4654      	mov	r4, sl
 800d006:	2205      	movs	r2, #5
 800d008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d00c:	484e      	ldr	r0, [pc, #312]	@ (800d148 <_svfiprintf_r+0x1e4>)
 800d00e:	f7f3 f90f 	bl	8000230 <memchr>
 800d012:	9a04      	ldr	r2, [sp, #16]
 800d014:	b9d8      	cbnz	r0, 800d04e <_svfiprintf_r+0xea>
 800d016:	06d0      	lsls	r0, r2, #27
 800d018:	bf44      	itt	mi
 800d01a:	2320      	movmi	r3, #32
 800d01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d020:	0711      	lsls	r1, r2, #28
 800d022:	bf44      	itt	mi
 800d024:	232b      	movmi	r3, #43	@ 0x2b
 800d026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d02a:	f89a 3000 	ldrb.w	r3, [sl]
 800d02e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d030:	d015      	beq.n	800d05e <_svfiprintf_r+0xfa>
 800d032:	9a07      	ldr	r2, [sp, #28]
 800d034:	4654      	mov	r4, sl
 800d036:	2000      	movs	r0, #0
 800d038:	f04f 0c0a 	mov.w	ip, #10
 800d03c:	4621      	mov	r1, r4
 800d03e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d042:	3b30      	subs	r3, #48	@ 0x30
 800d044:	2b09      	cmp	r3, #9
 800d046:	d94b      	bls.n	800d0e0 <_svfiprintf_r+0x17c>
 800d048:	b1b0      	cbz	r0, 800d078 <_svfiprintf_r+0x114>
 800d04a:	9207      	str	r2, [sp, #28]
 800d04c:	e014      	b.n	800d078 <_svfiprintf_r+0x114>
 800d04e:	eba0 0308 	sub.w	r3, r0, r8
 800d052:	fa09 f303 	lsl.w	r3, r9, r3
 800d056:	4313      	orrs	r3, r2
 800d058:	9304      	str	r3, [sp, #16]
 800d05a:	46a2      	mov	sl, r4
 800d05c:	e7d2      	b.n	800d004 <_svfiprintf_r+0xa0>
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	1d19      	adds	r1, r3, #4
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	9103      	str	r1, [sp, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	bfbb      	ittet	lt
 800d06a:	425b      	neglt	r3, r3
 800d06c:	f042 0202 	orrlt.w	r2, r2, #2
 800d070:	9307      	strge	r3, [sp, #28]
 800d072:	9307      	strlt	r3, [sp, #28]
 800d074:	bfb8      	it	lt
 800d076:	9204      	strlt	r2, [sp, #16]
 800d078:	7823      	ldrb	r3, [r4, #0]
 800d07a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d07c:	d10a      	bne.n	800d094 <_svfiprintf_r+0x130>
 800d07e:	7863      	ldrb	r3, [r4, #1]
 800d080:	2b2a      	cmp	r3, #42	@ 0x2a
 800d082:	d132      	bne.n	800d0ea <_svfiprintf_r+0x186>
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	1d1a      	adds	r2, r3, #4
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	9203      	str	r2, [sp, #12]
 800d08c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d090:	3402      	adds	r4, #2
 800d092:	9305      	str	r3, [sp, #20]
 800d094:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d158 <_svfiprintf_r+0x1f4>
 800d098:	7821      	ldrb	r1, [r4, #0]
 800d09a:	2203      	movs	r2, #3
 800d09c:	4650      	mov	r0, sl
 800d09e:	f7f3 f8c7 	bl	8000230 <memchr>
 800d0a2:	b138      	cbz	r0, 800d0b4 <_svfiprintf_r+0x150>
 800d0a4:	9b04      	ldr	r3, [sp, #16]
 800d0a6:	eba0 000a 	sub.w	r0, r0, sl
 800d0aa:	2240      	movs	r2, #64	@ 0x40
 800d0ac:	4082      	lsls	r2, r0
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	3401      	adds	r4, #1
 800d0b2:	9304      	str	r3, [sp, #16]
 800d0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b8:	4824      	ldr	r0, [pc, #144]	@ (800d14c <_svfiprintf_r+0x1e8>)
 800d0ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0be:	2206      	movs	r2, #6
 800d0c0:	f7f3 f8b6 	bl	8000230 <memchr>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d036      	beq.n	800d136 <_svfiprintf_r+0x1d2>
 800d0c8:	4b21      	ldr	r3, [pc, #132]	@ (800d150 <_svfiprintf_r+0x1ec>)
 800d0ca:	bb1b      	cbnz	r3, 800d114 <_svfiprintf_r+0x1b0>
 800d0cc:	9b03      	ldr	r3, [sp, #12]
 800d0ce:	3307      	adds	r3, #7
 800d0d0:	f023 0307 	bic.w	r3, r3, #7
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	9303      	str	r3, [sp, #12]
 800d0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0da:	4433      	add	r3, r6
 800d0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0de:	e76a      	b.n	800cfb6 <_svfiprintf_r+0x52>
 800d0e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	e7a8      	b.n	800d03c <_svfiprintf_r+0xd8>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	3401      	adds	r4, #1
 800d0ee:	9305      	str	r3, [sp, #20]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	f04f 0c0a 	mov.w	ip, #10
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0fc:	3a30      	subs	r2, #48	@ 0x30
 800d0fe:	2a09      	cmp	r2, #9
 800d100:	d903      	bls.n	800d10a <_svfiprintf_r+0x1a6>
 800d102:	2b00      	cmp	r3, #0
 800d104:	d0c6      	beq.n	800d094 <_svfiprintf_r+0x130>
 800d106:	9105      	str	r1, [sp, #20]
 800d108:	e7c4      	b.n	800d094 <_svfiprintf_r+0x130>
 800d10a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d10e:	4604      	mov	r4, r0
 800d110:	2301      	movs	r3, #1
 800d112:	e7f0      	b.n	800d0f6 <_svfiprintf_r+0x192>
 800d114:	ab03      	add	r3, sp, #12
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	462a      	mov	r2, r5
 800d11a:	4b0e      	ldr	r3, [pc, #56]	@ (800d154 <_svfiprintf_r+0x1f0>)
 800d11c:	a904      	add	r1, sp, #16
 800d11e:	4638      	mov	r0, r7
 800d120:	f3af 8000 	nop.w
 800d124:	1c42      	adds	r2, r0, #1
 800d126:	4606      	mov	r6, r0
 800d128:	d1d6      	bne.n	800d0d8 <_svfiprintf_r+0x174>
 800d12a:	89ab      	ldrh	r3, [r5, #12]
 800d12c:	065b      	lsls	r3, r3, #25
 800d12e:	f53f af2d 	bmi.w	800cf8c <_svfiprintf_r+0x28>
 800d132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d134:	e72c      	b.n	800cf90 <_svfiprintf_r+0x2c>
 800d136:	ab03      	add	r3, sp, #12
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	462a      	mov	r2, r5
 800d13c:	4b05      	ldr	r3, [pc, #20]	@ (800d154 <_svfiprintf_r+0x1f0>)
 800d13e:	a904      	add	r1, sp, #16
 800d140:	4638      	mov	r0, r7
 800d142:	f000 f91b 	bl	800d37c <_printf_i>
 800d146:	e7ed      	b.n	800d124 <_svfiprintf_r+0x1c0>
 800d148:	0801d6f0 	.word	0x0801d6f0
 800d14c:	0801d6fa 	.word	0x0801d6fa
 800d150:	00000000 	.word	0x00000000
 800d154:	0800cead 	.word	0x0800cead
 800d158:	0801d6f6 	.word	0x0801d6f6

0800d15c <sbrk_aligned>:
 800d15c:	b570      	push	{r4, r5, r6, lr}
 800d15e:	4e0f      	ldr	r6, [pc, #60]	@ (800d19c <sbrk_aligned+0x40>)
 800d160:	460c      	mov	r4, r1
 800d162:	6831      	ldr	r1, [r6, #0]
 800d164:	4605      	mov	r5, r0
 800d166:	b911      	cbnz	r1, 800d16e <sbrk_aligned+0x12>
 800d168:	f000 fa7c 	bl	800d664 <_sbrk_r>
 800d16c:	6030      	str	r0, [r6, #0]
 800d16e:	4621      	mov	r1, r4
 800d170:	4628      	mov	r0, r5
 800d172:	f000 fa77 	bl	800d664 <_sbrk_r>
 800d176:	1c43      	adds	r3, r0, #1
 800d178:	d103      	bne.n	800d182 <sbrk_aligned+0x26>
 800d17a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d17e:	4620      	mov	r0, r4
 800d180:	bd70      	pop	{r4, r5, r6, pc}
 800d182:	1cc4      	adds	r4, r0, #3
 800d184:	f024 0403 	bic.w	r4, r4, #3
 800d188:	42a0      	cmp	r0, r4
 800d18a:	d0f8      	beq.n	800d17e <sbrk_aligned+0x22>
 800d18c:	1a21      	subs	r1, r4, r0
 800d18e:	4628      	mov	r0, r5
 800d190:	f000 fa68 	bl	800d664 <_sbrk_r>
 800d194:	3001      	adds	r0, #1
 800d196:	d1f2      	bne.n	800d17e <sbrk_aligned+0x22>
 800d198:	e7ef      	b.n	800d17a <sbrk_aligned+0x1e>
 800d19a:	bf00      	nop
 800d19c:	20000c28 	.word	0x20000c28

0800d1a0 <_malloc_r>:
 800d1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a4:	1ccd      	adds	r5, r1, #3
 800d1a6:	f025 0503 	bic.w	r5, r5, #3
 800d1aa:	3508      	adds	r5, #8
 800d1ac:	2d0c      	cmp	r5, #12
 800d1ae:	bf38      	it	cc
 800d1b0:	250c      	movcc	r5, #12
 800d1b2:	2d00      	cmp	r5, #0
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	db01      	blt.n	800d1bc <_malloc_r+0x1c>
 800d1b8:	42a9      	cmp	r1, r5
 800d1ba:	d904      	bls.n	800d1c6 <_malloc_r+0x26>
 800d1bc:	230c      	movs	r3, #12
 800d1be:	6033      	str	r3, [r6, #0]
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d29c <_malloc_r+0xfc>
 800d1ca:	f000 f9f7 	bl	800d5bc <__malloc_lock>
 800d1ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d1d2:	461c      	mov	r4, r3
 800d1d4:	bb44      	cbnz	r4, 800d228 <_malloc_r+0x88>
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	4630      	mov	r0, r6
 800d1da:	f7ff ffbf 	bl	800d15c <sbrk_aligned>
 800d1de:	1c43      	adds	r3, r0, #1
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	d158      	bne.n	800d296 <_malloc_r+0xf6>
 800d1e4:	f8d8 4000 	ldr.w	r4, [r8]
 800d1e8:	4627      	mov	r7, r4
 800d1ea:	2f00      	cmp	r7, #0
 800d1ec:	d143      	bne.n	800d276 <_malloc_r+0xd6>
 800d1ee:	2c00      	cmp	r4, #0
 800d1f0:	d04b      	beq.n	800d28a <_malloc_r+0xea>
 800d1f2:	6823      	ldr	r3, [r4, #0]
 800d1f4:	4639      	mov	r1, r7
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	eb04 0903 	add.w	r9, r4, r3
 800d1fc:	f000 fa32 	bl	800d664 <_sbrk_r>
 800d200:	4581      	cmp	r9, r0
 800d202:	d142      	bne.n	800d28a <_malloc_r+0xea>
 800d204:	6821      	ldr	r1, [r4, #0]
 800d206:	1a6d      	subs	r5, r5, r1
 800d208:	4629      	mov	r1, r5
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7ff ffa6 	bl	800d15c <sbrk_aligned>
 800d210:	3001      	adds	r0, #1
 800d212:	d03a      	beq.n	800d28a <_malloc_r+0xea>
 800d214:	6823      	ldr	r3, [r4, #0]
 800d216:	442b      	add	r3, r5
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	f8d8 3000 	ldr.w	r3, [r8]
 800d21e:	685a      	ldr	r2, [r3, #4]
 800d220:	bb62      	cbnz	r2, 800d27c <_malloc_r+0xdc>
 800d222:	f8c8 7000 	str.w	r7, [r8]
 800d226:	e00f      	b.n	800d248 <_malloc_r+0xa8>
 800d228:	6822      	ldr	r2, [r4, #0]
 800d22a:	1b52      	subs	r2, r2, r5
 800d22c:	d420      	bmi.n	800d270 <_malloc_r+0xd0>
 800d22e:	2a0b      	cmp	r2, #11
 800d230:	d917      	bls.n	800d262 <_malloc_r+0xc2>
 800d232:	1961      	adds	r1, r4, r5
 800d234:	42a3      	cmp	r3, r4
 800d236:	6025      	str	r5, [r4, #0]
 800d238:	bf18      	it	ne
 800d23a:	6059      	strne	r1, [r3, #4]
 800d23c:	6863      	ldr	r3, [r4, #4]
 800d23e:	bf08      	it	eq
 800d240:	f8c8 1000 	streq.w	r1, [r8]
 800d244:	5162      	str	r2, [r4, r5]
 800d246:	604b      	str	r3, [r1, #4]
 800d248:	4630      	mov	r0, r6
 800d24a:	f000 f9bd 	bl	800d5c8 <__malloc_unlock>
 800d24e:	f104 000b 	add.w	r0, r4, #11
 800d252:	1d23      	adds	r3, r4, #4
 800d254:	f020 0007 	bic.w	r0, r0, #7
 800d258:	1ac2      	subs	r2, r0, r3
 800d25a:	bf1c      	itt	ne
 800d25c:	1a1b      	subne	r3, r3, r0
 800d25e:	50a3      	strne	r3, [r4, r2]
 800d260:	e7af      	b.n	800d1c2 <_malloc_r+0x22>
 800d262:	6862      	ldr	r2, [r4, #4]
 800d264:	42a3      	cmp	r3, r4
 800d266:	bf0c      	ite	eq
 800d268:	f8c8 2000 	streq.w	r2, [r8]
 800d26c:	605a      	strne	r2, [r3, #4]
 800d26e:	e7eb      	b.n	800d248 <_malloc_r+0xa8>
 800d270:	4623      	mov	r3, r4
 800d272:	6864      	ldr	r4, [r4, #4]
 800d274:	e7ae      	b.n	800d1d4 <_malloc_r+0x34>
 800d276:	463c      	mov	r4, r7
 800d278:	687f      	ldr	r7, [r7, #4]
 800d27a:	e7b6      	b.n	800d1ea <_malloc_r+0x4a>
 800d27c:	461a      	mov	r2, r3
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	42a3      	cmp	r3, r4
 800d282:	d1fb      	bne.n	800d27c <_malloc_r+0xdc>
 800d284:	2300      	movs	r3, #0
 800d286:	6053      	str	r3, [r2, #4]
 800d288:	e7de      	b.n	800d248 <_malloc_r+0xa8>
 800d28a:	230c      	movs	r3, #12
 800d28c:	6033      	str	r3, [r6, #0]
 800d28e:	4630      	mov	r0, r6
 800d290:	f000 f99a 	bl	800d5c8 <__malloc_unlock>
 800d294:	e794      	b.n	800d1c0 <_malloc_r+0x20>
 800d296:	6005      	str	r5, [r0, #0]
 800d298:	e7d6      	b.n	800d248 <_malloc_r+0xa8>
 800d29a:	bf00      	nop
 800d29c:	20000c2c 	.word	0x20000c2c

0800d2a0 <_printf_common>:
 800d2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a4:	4616      	mov	r6, r2
 800d2a6:	4698      	mov	r8, r3
 800d2a8:	688a      	ldr	r2, [r1, #8]
 800d2aa:	690b      	ldr	r3, [r1, #16]
 800d2ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	bfb8      	it	lt
 800d2b4:	4613      	movlt	r3, r2
 800d2b6:	6033      	str	r3, [r6, #0]
 800d2b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2bc:	4607      	mov	r7, r0
 800d2be:	460c      	mov	r4, r1
 800d2c0:	b10a      	cbz	r2, 800d2c6 <_printf_common+0x26>
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	6033      	str	r3, [r6, #0]
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	0699      	lsls	r1, r3, #26
 800d2ca:	bf42      	ittt	mi
 800d2cc:	6833      	ldrmi	r3, [r6, #0]
 800d2ce:	3302      	addmi	r3, #2
 800d2d0:	6033      	strmi	r3, [r6, #0]
 800d2d2:	6825      	ldr	r5, [r4, #0]
 800d2d4:	f015 0506 	ands.w	r5, r5, #6
 800d2d8:	d106      	bne.n	800d2e8 <_printf_common+0x48>
 800d2da:	f104 0a19 	add.w	sl, r4, #25
 800d2de:	68e3      	ldr	r3, [r4, #12]
 800d2e0:	6832      	ldr	r2, [r6, #0]
 800d2e2:	1a9b      	subs	r3, r3, r2
 800d2e4:	42ab      	cmp	r3, r5
 800d2e6:	dc26      	bgt.n	800d336 <_printf_common+0x96>
 800d2e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d2ec:	6822      	ldr	r2, [r4, #0]
 800d2ee:	3b00      	subs	r3, #0
 800d2f0:	bf18      	it	ne
 800d2f2:	2301      	movne	r3, #1
 800d2f4:	0692      	lsls	r2, r2, #26
 800d2f6:	d42b      	bmi.n	800d350 <_printf_common+0xb0>
 800d2f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d2fc:	4641      	mov	r1, r8
 800d2fe:	4638      	mov	r0, r7
 800d300:	47c8      	blx	r9
 800d302:	3001      	adds	r0, #1
 800d304:	d01e      	beq.n	800d344 <_printf_common+0xa4>
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	6922      	ldr	r2, [r4, #16]
 800d30a:	f003 0306 	and.w	r3, r3, #6
 800d30e:	2b04      	cmp	r3, #4
 800d310:	bf02      	ittt	eq
 800d312:	68e5      	ldreq	r5, [r4, #12]
 800d314:	6833      	ldreq	r3, [r6, #0]
 800d316:	1aed      	subeq	r5, r5, r3
 800d318:	68a3      	ldr	r3, [r4, #8]
 800d31a:	bf0c      	ite	eq
 800d31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d320:	2500      	movne	r5, #0
 800d322:	4293      	cmp	r3, r2
 800d324:	bfc4      	itt	gt
 800d326:	1a9b      	subgt	r3, r3, r2
 800d328:	18ed      	addgt	r5, r5, r3
 800d32a:	2600      	movs	r6, #0
 800d32c:	341a      	adds	r4, #26
 800d32e:	42b5      	cmp	r5, r6
 800d330:	d11a      	bne.n	800d368 <_printf_common+0xc8>
 800d332:	2000      	movs	r0, #0
 800d334:	e008      	b.n	800d348 <_printf_common+0xa8>
 800d336:	2301      	movs	r3, #1
 800d338:	4652      	mov	r2, sl
 800d33a:	4641      	mov	r1, r8
 800d33c:	4638      	mov	r0, r7
 800d33e:	47c8      	blx	r9
 800d340:	3001      	adds	r0, #1
 800d342:	d103      	bne.n	800d34c <_printf_common+0xac>
 800d344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d34c:	3501      	adds	r5, #1
 800d34e:	e7c6      	b.n	800d2de <_printf_common+0x3e>
 800d350:	18e1      	adds	r1, r4, r3
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	2030      	movs	r0, #48	@ 0x30
 800d356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d35a:	4422      	add	r2, r4
 800d35c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d364:	3302      	adds	r3, #2
 800d366:	e7c7      	b.n	800d2f8 <_printf_common+0x58>
 800d368:	2301      	movs	r3, #1
 800d36a:	4622      	mov	r2, r4
 800d36c:	4641      	mov	r1, r8
 800d36e:	4638      	mov	r0, r7
 800d370:	47c8      	blx	r9
 800d372:	3001      	adds	r0, #1
 800d374:	d0e6      	beq.n	800d344 <_printf_common+0xa4>
 800d376:	3601      	adds	r6, #1
 800d378:	e7d9      	b.n	800d32e <_printf_common+0x8e>
	...

0800d37c <_printf_i>:
 800d37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d380:	7e0f      	ldrb	r7, [r1, #24]
 800d382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d384:	2f78      	cmp	r7, #120	@ 0x78
 800d386:	4691      	mov	r9, r2
 800d388:	4680      	mov	r8, r0
 800d38a:	460c      	mov	r4, r1
 800d38c:	469a      	mov	sl, r3
 800d38e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d392:	d807      	bhi.n	800d3a4 <_printf_i+0x28>
 800d394:	2f62      	cmp	r7, #98	@ 0x62
 800d396:	d80a      	bhi.n	800d3ae <_printf_i+0x32>
 800d398:	2f00      	cmp	r7, #0
 800d39a:	f000 80d2 	beq.w	800d542 <_printf_i+0x1c6>
 800d39e:	2f58      	cmp	r7, #88	@ 0x58
 800d3a0:	f000 80b9 	beq.w	800d516 <_printf_i+0x19a>
 800d3a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3ac:	e03a      	b.n	800d424 <_printf_i+0xa8>
 800d3ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3b2:	2b15      	cmp	r3, #21
 800d3b4:	d8f6      	bhi.n	800d3a4 <_printf_i+0x28>
 800d3b6:	a101      	add	r1, pc, #4	@ (adr r1, 800d3bc <_printf_i+0x40>)
 800d3b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3bc:	0800d415 	.word	0x0800d415
 800d3c0:	0800d429 	.word	0x0800d429
 800d3c4:	0800d3a5 	.word	0x0800d3a5
 800d3c8:	0800d3a5 	.word	0x0800d3a5
 800d3cc:	0800d3a5 	.word	0x0800d3a5
 800d3d0:	0800d3a5 	.word	0x0800d3a5
 800d3d4:	0800d429 	.word	0x0800d429
 800d3d8:	0800d3a5 	.word	0x0800d3a5
 800d3dc:	0800d3a5 	.word	0x0800d3a5
 800d3e0:	0800d3a5 	.word	0x0800d3a5
 800d3e4:	0800d3a5 	.word	0x0800d3a5
 800d3e8:	0800d529 	.word	0x0800d529
 800d3ec:	0800d453 	.word	0x0800d453
 800d3f0:	0800d4e3 	.word	0x0800d4e3
 800d3f4:	0800d3a5 	.word	0x0800d3a5
 800d3f8:	0800d3a5 	.word	0x0800d3a5
 800d3fc:	0800d54b 	.word	0x0800d54b
 800d400:	0800d3a5 	.word	0x0800d3a5
 800d404:	0800d453 	.word	0x0800d453
 800d408:	0800d3a5 	.word	0x0800d3a5
 800d40c:	0800d3a5 	.word	0x0800d3a5
 800d410:	0800d4eb 	.word	0x0800d4eb
 800d414:	6833      	ldr	r3, [r6, #0]
 800d416:	1d1a      	adds	r2, r3, #4
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6032      	str	r2, [r6, #0]
 800d41c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d424:	2301      	movs	r3, #1
 800d426:	e09d      	b.n	800d564 <_printf_i+0x1e8>
 800d428:	6833      	ldr	r3, [r6, #0]
 800d42a:	6820      	ldr	r0, [r4, #0]
 800d42c:	1d19      	adds	r1, r3, #4
 800d42e:	6031      	str	r1, [r6, #0]
 800d430:	0606      	lsls	r6, r0, #24
 800d432:	d501      	bpl.n	800d438 <_printf_i+0xbc>
 800d434:	681d      	ldr	r5, [r3, #0]
 800d436:	e003      	b.n	800d440 <_printf_i+0xc4>
 800d438:	0645      	lsls	r5, r0, #25
 800d43a:	d5fb      	bpl.n	800d434 <_printf_i+0xb8>
 800d43c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d440:	2d00      	cmp	r5, #0
 800d442:	da03      	bge.n	800d44c <_printf_i+0xd0>
 800d444:	232d      	movs	r3, #45	@ 0x2d
 800d446:	426d      	negs	r5, r5
 800d448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d44c:	4859      	ldr	r0, [pc, #356]	@ (800d5b4 <_printf_i+0x238>)
 800d44e:	230a      	movs	r3, #10
 800d450:	e011      	b.n	800d476 <_printf_i+0xfa>
 800d452:	6821      	ldr	r1, [r4, #0]
 800d454:	6833      	ldr	r3, [r6, #0]
 800d456:	0608      	lsls	r0, r1, #24
 800d458:	f853 5b04 	ldr.w	r5, [r3], #4
 800d45c:	d402      	bmi.n	800d464 <_printf_i+0xe8>
 800d45e:	0649      	lsls	r1, r1, #25
 800d460:	bf48      	it	mi
 800d462:	b2ad      	uxthmi	r5, r5
 800d464:	2f6f      	cmp	r7, #111	@ 0x6f
 800d466:	4853      	ldr	r0, [pc, #332]	@ (800d5b4 <_printf_i+0x238>)
 800d468:	6033      	str	r3, [r6, #0]
 800d46a:	bf14      	ite	ne
 800d46c:	230a      	movne	r3, #10
 800d46e:	2308      	moveq	r3, #8
 800d470:	2100      	movs	r1, #0
 800d472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d476:	6866      	ldr	r6, [r4, #4]
 800d478:	60a6      	str	r6, [r4, #8]
 800d47a:	2e00      	cmp	r6, #0
 800d47c:	bfa2      	ittt	ge
 800d47e:	6821      	ldrge	r1, [r4, #0]
 800d480:	f021 0104 	bicge.w	r1, r1, #4
 800d484:	6021      	strge	r1, [r4, #0]
 800d486:	b90d      	cbnz	r5, 800d48c <_printf_i+0x110>
 800d488:	2e00      	cmp	r6, #0
 800d48a:	d04b      	beq.n	800d524 <_printf_i+0x1a8>
 800d48c:	4616      	mov	r6, r2
 800d48e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d492:	fb03 5711 	mls	r7, r3, r1, r5
 800d496:	5dc7      	ldrb	r7, [r0, r7]
 800d498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d49c:	462f      	mov	r7, r5
 800d49e:	42bb      	cmp	r3, r7
 800d4a0:	460d      	mov	r5, r1
 800d4a2:	d9f4      	bls.n	800d48e <_printf_i+0x112>
 800d4a4:	2b08      	cmp	r3, #8
 800d4a6:	d10b      	bne.n	800d4c0 <_printf_i+0x144>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	07df      	lsls	r7, r3, #31
 800d4ac:	d508      	bpl.n	800d4c0 <_printf_i+0x144>
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	6861      	ldr	r1, [r4, #4]
 800d4b2:	4299      	cmp	r1, r3
 800d4b4:	bfde      	ittt	le
 800d4b6:	2330      	movle	r3, #48	@ 0x30
 800d4b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4bc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d4c0:	1b92      	subs	r2, r2, r6
 800d4c2:	6122      	str	r2, [r4, #16]
 800d4c4:	f8cd a000 	str.w	sl, [sp]
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	aa03      	add	r2, sp, #12
 800d4cc:	4621      	mov	r1, r4
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	f7ff fee6 	bl	800d2a0 <_printf_common>
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	d14a      	bne.n	800d56e <_printf_i+0x1f2>
 800d4d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4dc:	b004      	add	sp, #16
 800d4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	f043 0320 	orr.w	r3, r3, #32
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	4833      	ldr	r0, [pc, #204]	@ (800d5b8 <_printf_i+0x23c>)
 800d4ec:	2778      	movs	r7, #120	@ 0x78
 800d4ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	6831      	ldr	r1, [r6, #0]
 800d4f6:	061f      	lsls	r7, r3, #24
 800d4f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d4fc:	d402      	bmi.n	800d504 <_printf_i+0x188>
 800d4fe:	065f      	lsls	r7, r3, #25
 800d500:	bf48      	it	mi
 800d502:	b2ad      	uxthmi	r5, r5
 800d504:	6031      	str	r1, [r6, #0]
 800d506:	07d9      	lsls	r1, r3, #31
 800d508:	bf44      	itt	mi
 800d50a:	f043 0320 	orrmi.w	r3, r3, #32
 800d50e:	6023      	strmi	r3, [r4, #0]
 800d510:	b11d      	cbz	r5, 800d51a <_printf_i+0x19e>
 800d512:	2310      	movs	r3, #16
 800d514:	e7ac      	b.n	800d470 <_printf_i+0xf4>
 800d516:	4827      	ldr	r0, [pc, #156]	@ (800d5b4 <_printf_i+0x238>)
 800d518:	e7e9      	b.n	800d4ee <_printf_i+0x172>
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	f023 0320 	bic.w	r3, r3, #32
 800d520:	6023      	str	r3, [r4, #0]
 800d522:	e7f6      	b.n	800d512 <_printf_i+0x196>
 800d524:	4616      	mov	r6, r2
 800d526:	e7bd      	b.n	800d4a4 <_printf_i+0x128>
 800d528:	6833      	ldr	r3, [r6, #0]
 800d52a:	6825      	ldr	r5, [r4, #0]
 800d52c:	6961      	ldr	r1, [r4, #20]
 800d52e:	1d18      	adds	r0, r3, #4
 800d530:	6030      	str	r0, [r6, #0]
 800d532:	062e      	lsls	r6, r5, #24
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	d501      	bpl.n	800d53c <_printf_i+0x1c0>
 800d538:	6019      	str	r1, [r3, #0]
 800d53a:	e002      	b.n	800d542 <_printf_i+0x1c6>
 800d53c:	0668      	lsls	r0, r5, #25
 800d53e:	d5fb      	bpl.n	800d538 <_printf_i+0x1bc>
 800d540:	8019      	strh	r1, [r3, #0]
 800d542:	2300      	movs	r3, #0
 800d544:	6123      	str	r3, [r4, #16]
 800d546:	4616      	mov	r6, r2
 800d548:	e7bc      	b.n	800d4c4 <_printf_i+0x148>
 800d54a:	6833      	ldr	r3, [r6, #0]
 800d54c:	1d1a      	adds	r2, r3, #4
 800d54e:	6032      	str	r2, [r6, #0]
 800d550:	681e      	ldr	r6, [r3, #0]
 800d552:	6862      	ldr	r2, [r4, #4]
 800d554:	2100      	movs	r1, #0
 800d556:	4630      	mov	r0, r6
 800d558:	f7f2 fe6a 	bl	8000230 <memchr>
 800d55c:	b108      	cbz	r0, 800d562 <_printf_i+0x1e6>
 800d55e:	1b80      	subs	r0, r0, r6
 800d560:	6060      	str	r0, [r4, #4]
 800d562:	6863      	ldr	r3, [r4, #4]
 800d564:	6123      	str	r3, [r4, #16]
 800d566:	2300      	movs	r3, #0
 800d568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d56c:	e7aa      	b.n	800d4c4 <_printf_i+0x148>
 800d56e:	6923      	ldr	r3, [r4, #16]
 800d570:	4632      	mov	r2, r6
 800d572:	4649      	mov	r1, r9
 800d574:	4640      	mov	r0, r8
 800d576:	47d0      	blx	sl
 800d578:	3001      	adds	r0, #1
 800d57a:	d0ad      	beq.n	800d4d8 <_printf_i+0x15c>
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	079b      	lsls	r3, r3, #30
 800d580:	d413      	bmi.n	800d5aa <_printf_i+0x22e>
 800d582:	68e0      	ldr	r0, [r4, #12]
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	4298      	cmp	r0, r3
 800d588:	bfb8      	it	lt
 800d58a:	4618      	movlt	r0, r3
 800d58c:	e7a6      	b.n	800d4dc <_printf_i+0x160>
 800d58e:	2301      	movs	r3, #1
 800d590:	4632      	mov	r2, r6
 800d592:	4649      	mov	r1, r9
 800d594:	4640      	mov	r0, r8
 800d596:	47d0      	blx	sl
 800d598:	3001      	adds	r0, #1
 800d59a:	d09d      	beq.n	800d4d8 <_printf_i+0x15c>
 800d59c:	3501      	adds	r5, #1
 800d59e:	68e3      	ldr	r3, [r4, #12]
 800d5a0:	9903      	ldr	r1, [sp, #12]
 800d5a2:	1a5b      	subs	r3, r3, r1
 800d5a4:	42ab      	cmp	r3, r5
 800d5a6:	dcf2      	bgt.n	800d58e <_printf_i+0x212>
 800d5a8:	e7eb      	b.n	800d582 <_printf_i+0x206>
 800d5aa:	2500      	movs	r5, #0
 800d5ac:	f104 0619 	add.w	r6, r4, #25
 800d5b0:	e7f5      	b.n	800d59e <_printf_i+0x222>
 800d5b2:	bf00      	nop
 800d5b4:	0801d701 	.word	0x0801d701
 800d5b8:	0801d712 	.word	0x0801d712

0800d5bc <__malloc_lock>:
 800d5bc:	4801      	ldr	r0, [pc, #4]	@ (800d5c4 <__malloc_lock+0x8>)
 800d5be:	f7ff bc65 	b.w	800ce8c <__retarget_lock_acquire_recursive>
 800d5c2:	bf00      	nop
 800d5c4:	20000c24 	.word	0x20000c24

0800d5c8 <__malloc_unlock>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	@ (800d5d0 <__malloc_unlock+0x8>)
 800d5ca:	f7ff bc60 	b.w	800ce8e <__retarget_lock_release_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	20000c24 	.word	0x20000c24

0800d5d4 <_realloc_r>:
 800d5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d8:	4680      	mov	r8, r0
 800d5da:	4615      	mov	r5, r2
 800d5dc:	460c      	mov	r4, r1
 800d5de:	b921      	cbnz	r1, 800d5ea <_realloc_r+0x16>
 800d5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	f7ff bddb 	b.w	800d1a0 <_malloc_r>
 800d5ea:	b92a      	cbnz	r2, 800d5f8 <_realloc_r+0x24>
 800d5ec:	f000 f84a 	bl	800d684 <_free_r>
 800d5f0:	2400      	movs	r4, #0
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f8:	f000 f88e 	bl	800d718 <_malloc_usable_size_r>
 800d5fc:	4285      	cmp	r5, r0
 800d5fe:	4606      	mov	r6, r0
 800d600:	d802      	bhi.n	800d608 <_realloc_r+0x34>
 800d602:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d606:	d8f4      	bhi.n	800d5f2 <_realloc_r+0x1e>
 800d608:	4629      	mov	r1, r5
 800d60a:	4640      	mov	r0, r8
 800d60c:	f7ff fdc8 	bl	800d1a0 <_malloc_r>
 800d610:	4607      	mov	r7, r0
 800d612:	2800      	cmp	r0, #0
 800d614:	d0ec      	beq.n	800d5f0 <_realloc_r+0x1c>
 800d616:	42b5      	cmp	r5, r6
 800d618:	462a      	mov	r2, r5
 800d61a:	4621      	mov	r1, r4
 800d61c:	bf28      	it	cs
 800d61e:	4632      	movcs	r2, r6
 800d620:	f7ff fc36 	bl	800ce90 <memcpy>
 800d624:	4621      	mov	r1, r4
 800d626:	4640      	mov	r0, r8
 800d628:	f000 f82c 	bl	800d684 <_free_r>
 800d62c:	463c      	mov	r4, r7
 800d62e:	e7e0      	b.n	800d5f2 <_realloc_r+0x1e>

0800d630 <memmove>:
 800d630:	4288      	cmp	r0, r1
 800d632:	b510      	push	{r4, lr}
 800d634:	eb01 0402 	add.w	r4, r1, r2
 800d638:	d902      	bls.n	800d640 <memmove+0x10>
 800d63a:	4284      	cmp	r4, r0
 800d63c:	4623      	mov	r3, r4
 800d63e:	d807      	bhi.n	800d650 <memmove+0x20>
 800d640:	1e43      	subs	r3, r0, #1
 800d642:	42a1      	cmp	r1, r4
 800d644:	d008      	beq.n	800d658 <memmove+0x28>
 800d646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d64a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d64e:	e7f8      	b.n	800d642 <memmove+0x12>
 800d650:	4402      	add	r2, r0
 800d652:	4601      	mov	r1, r0
 800d654:	428a      	cmp	r2, r1
 800d656:	d100      	bne.n	800d65a <memmove+0x2a>
 800d658:	bd10      	pop	{r4, pc}
 800d65a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d65e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d662:	e7f7      	b.n	800d654 <memmove+0x24>

0800d664 <_sbrk_r>:
 800d664:	b538      	push	{r3, r4, r5, lr}
 800d666:	4d06      	ldr	r5, [pc, #24]	@ (800d680 <_sbrk_r+0x1c>)
 800d668:	2300      	movs	r3, #0
 800d66a:	4604      	mov	r4, r0
 800d66c:	4608      	mov	r0, r1
 800d66e:	602b      	str	r3, [r5, #0]
 800d670:	f7f9 feee 	bl	8007450 <_sbrk>
 800d674:	1c43      	adds	r3, r0, #1
 800d676:	d102      	bne.n	800d67e <_sbrk_r+0x1a>
 800d678:	682b      	ldr	r3, [r5, #0]
 800d67a:	b103      	cbz	r3, 800d67e <_sbrk_r+0x1a>
 800d67c:	6023      	str	r3, [r4, #0]
 800d67e:	bd38      	pop	{r3, r4, r5, pc}
 800d680:	20000c30 	.word	0x20000c30

0800d684 <_free_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4605      	mov	r5, r0
 800d688:	2900      	cmp	r1, #0
 800d68a:	d041      	beq.n	800d710 <_free_r+0x8c>
 800d68c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d690:	1f0c      	subs	r4, r1, #4
 800d692:	2b00      	cmp	r3, #0
 800d694:	bfb8      	it	lt
 800d696:	18e4      	addlt	r4, r4, r3
 800d698:	f7ff ff90 	bl	800d5bc <__malloc_lock>
 800d69c:	4a1d      	ldr	r2, [pc, #116]	@ (800d714 <_free_r+0x90>)
 800d69e:	6813      	ldr	r3, [r2, #0]
 800d6a0:	b933      	cbnz	r3, 800d6b0 <_free_r+0x2c>
 800d6a2:	6063      	str	r3, [r4, #4]
 800d6a4:	6014      	str	r4, [r2, #0]
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ac:	f7ff bf8c 	b.w	800d5c8 <__malloc_unlock>
 800d6b0:	42a3      	cmp	r3, r4
 800d6b2:	d908      	bls.n	800d6c6 <_free_r+0x42>
 800d6b4:	6820      	ldr	r0, [r4, #0]
 800d6b6:	1821      	adds	r1, r4, r0
 800d6b8:	428b      	cmp	r3, r1
 800d6ba:	bf01      	itttt	eq
 800d6bc:	6819      	ldreq	r1, [r3, #0]
 800d6be:	685b      	ldreq	r3, [r3, #4]
 800d6c0:	1809      	addeq	r1, r1, r0
 800d6c2:	6021      	streq	r1, [r4, #0]
 800d6c4:	e7ed      	b.n	800d6a2 <_free_r+0x1e>
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	b10b      	cbz	r3, 800d6d0 <_free_r+0x4c>
 800d6cc:	42a3      	cmp	r3, r4
 800d6ce:	d9fa      	bls.n	800d6c6 <_free_r+0x42>
 800d6d0:	6811      	ldr	r1, [r2, #0]
 800d6d2:	1850      	adds	r0, r2, r1
 800d6d4:	42a0      	cmp	r0, r4
 800d6d6:	d10b      	bne.n	800d6f0 <_free_r+0x6c>
 800d6d8:	6820      	ldr	r0, [r4, #0]
 800d6da:	4401      	add	r1, r0
 800d6dc:	1850      	adds	r0, r2, r1
 800d6de:	4283      	cmp	r3, r0
 800d6e0:	6011      	str	r1, [r2, #0]
 800d6e2:	d1e0      	bne.n	800d6a6 <_free_r+0x22>
 800d6e4:	6818      	ldr	r0, [r3, #0]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	6053      	str	r3, [r2, #4]
 800d6ea:	4408      	add	r0, r1
 800d6ec:	6010      	str	r0, [r2, #0]
 800d6ee:	e7da      	b.n	800d6a6 <_free_r+0x22>
 800d6f0:	d902      	bls.n	800d6f8 <_free_r+0x74>
 800d6f2:	230c      	movs	r3, #12
 800d6f4:	602b      	str	r3, [r5, #0]
 800d6f6:	e7d6      	b.n	800d6a6 <_free_r+0x22>
 800d6f8:	6820      	ldr	r0, [r4, #0]
 800d6fa:	1821      	adds	r1, r4, r0
 800d6fc:	428b      	cmp	r3, r1
 800d6fe:	bf04      	itt	eq
 800d700:	6819      	ldreq	r1, [r3, #0]
 800d702:	685b      	ldreq	r3, [r3, #4]
 800d704:	6063      	str	r3, [r4, #4]
 800d706:	bf04      	itt	eq
 800d708:	1809      	addeq	r1, r1, r0
 800d70a:	6021      	streq	r1, [r4, #0]
 800d70c:	6054      	str	r4, [r2, #4]
 800d70e:	e7ca      	b.n	800d6a6 <_free_r+0x22>
 800d710:	bd38      	pop	{r3, r4, r5, pc}
 800d712:	bf00      	nop
 800d714:	20000c2c 	.word	0x20000c2c

0800d718 <_malloc_usable_size_r>:
 800d718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d71c:	1f18      	subs	r0, r3, #4
 800d71e:	2b00      	cmp	r3, #0
 800d720:	bfbc      	itt	lt
 800d722:	580b      	ldrlt	r3, [r1, r0]
 800d724:	18c0      	addlt	r0, r0, r3
 800d726:	4770      	bx	lr

0800d728 <sin>:
 800d728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d72a:	ec53 2b10 	vmov	r2, r3, d0
 800d72e:	4826      	ldr	r0, [pc, #152]	@ (800d7c8 <sin+0xa0>)
 800d730:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d734:	4281      	cmp	r1, r0
 800d736:	d807      	bhi.n	800d748 <sin+0x20>
 800d738:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d7c0 <sin+0x98>
 800d73c:	2000      	movs	r0, #0
 800d73e:	b005      	add	sp, #20
 800d740:	f85d eb04 	ldr.w	lr, [sp], #4
 800d744:	f000 be60 	b.w	800e408 <__kernel_sin>
 800d748:	4820      	ldr	r0, [pc, #128]	@ (800d7cc <sin+0xa4>)
 800d74a:	4281      	cmp	r1, r0
 800d74c:	d908      	bls.n	800d760 <sin+0x38>
 800d74e:	4610      	mov	r0, r2
 800d750:	4619      	mov	r1, r3
 800d752:	f7f2 fdc1 	bl	80002d8 <__aeabi_dsub>
 800d756:	ec41 0b10 	vmov	d0, r0, r1
 800d75a:	b005      	add	sp, #20
 800d75c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d760:	4668      	mov	r0, sp
 800d762:	f000 f835 	bl	800d7d0 <__ieee754_rem_pio2>
 800d766:	f000 0003 	and.w	r0, r0, #3
 800d76a:	2801      	cmp	r0, #1
 800d76c:	d00c      	beq.n	800d788 <sin+0x60>
 800d76e:	2802      	cmp	r0, #2
 800d770:	d011      	beq.n	800d796 <sin+0x6e>
 800d772:	b9e8      	cbnz	r0, 800d7b0 <sin+0x88>
 800d774:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d778:	ed9d 0b00 	vldr	d0, [sp]
 800d77c:	2001      	movs	r0, #1
 800d77e:	f000 fe43 	bl	800e408 <__kernel_sin>
 800d782:	ec51 0b10 	vmov	r0, r1, d0
 800d786:	e7e6      	b.n	800d756 <sin+0x2e>
 800d788:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d78c:	ed9d 0b00 	vldr	d0, [sp]
 800d790:	f000 fd72 	bl	800e278 <__kernel_cos>
 800d794:	e7f5      	b.n	800d782 <sin+0x5a>
 800d796:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d79a:	ed9d 0b00 	vldr	d0, [sp]
 800d79e:	2001      	movs	r0, #1
 800d7a0:	f000 fe32 	bl	800e408 <__kernel_sin>
 800d7a4:	ec53 2b10 	vmov	r2, r3, d0
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d7ae:	e7d2      	b.n	800d756 <sin+0x2e>
 800d7b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7b4:	ed9d 0b00 	vldr	d0, [sp]
 800d7b8:	f000 fd5e 	bl	800e278 <__kernel_cos>
 800d7bc:	e7f2      	b.n	800d7a4 <sin+0x7c>
 800d7be:	bf00      	nop
	...
 800d7c8:	3fe921fb 	.word	0x3fe921fb
 800d7cc:	7fefffff 	.word	0x7fefffff

0800d7d0 <__ieee754_rem_pio2>:
 800d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	ec57 6b10 	vmov	r6, r7, d0
 800d7d8:	4bc5      	ldr	r3, [pc, #788]	@ (800daf0 <__ieee754_rem_pio2+0x320>)
 800d7da:	b08d      	sub	sp, #52	@ 0x34
 800d7dc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d7e0:	4598      	cmp	r8, r3
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	9704      	str	r7, [sp, #16]
 800d7e6:	d807      	bhi.n	800d7f8 <__ieee754_rem_pio2+0x28>
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	ed80 0b00 	vstr	d0, [r0]
 800d7f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d7f4:	2500      	movs	r5, #0
 800d7f6:	e028      	b.n	800d84a <__ieee754_rem_pio2+0x7a>
 800d7f8:	4bbe      	ldr	r3, [pc, #760]	@ (800daf4 <__ieee754_rem_pio2+0x324>)
 800d7fa:	4598      	cmp	r8, r3
 800d7fc:	d878      	bhi.n	800d8f0 <__ieee754_rem_pio2+0x120>
 800d7fe:	9b04      	ldr	r3, [sp, #16]
 800d800:	4dbd      	ldr	r5, [pc, #756]	@ (800daf8 <__ieee754_rem_pio2+0x328>)
 800d802:	2b00      	cmp	r3, #0
 800d804:	4630      	mov	r0, r6
 800d806:	a3ac      	add	r3, pc, #688	@ (adr r3, 800dab8 <__ieee754_rem_pio2+0x2e8>)
 800d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80c:	4639      	mov	r1, r7
 800d80e:	dd38      	ble.n	800d882 <__ieee754_rem_pio2+0xb2>
 800d810:	f7f2 fd62 	bl	80002d8 <__aeabi_dsub>
 800d814:	45a8      	cmp	r8, r5
 800d816:	4606      	mov	r6, r0
 800d818:	460f      	mov	r7, r1
 800d81a:	d01a      	beq.n	800d852 <__ieee754_rem_pio2+0x82>
 800d81c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800dac0 <__ieee754_rem_pio2+0x2f0>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	f7f2 fd59 	bl	80002d8 <__aeabi_dsub>
 800d826:	4602      	mov	r2, r0
 800d828:	460b      	mov	r3, r1
 800d82a:	4680      	mov	r8, r0
 800d82c:	4689      	mov	r9, r1
 800d82e:	4630      	mov	r0, r6
 800d830:	4639      	mov	r1, r7
 800d832:	f7f2 fd51 	bl	80002d8 <__aeabi_dsub>
 800d836:	a3a2      	add	r3, pc, #648	@ (adr r3, 800dac0 <__ieee754_rem_pio2+0x2f0>)
 800d838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83c:	f7f2 fd4c 	bl	80002d8 <__aeabi_dsub>
 800d840:	e9c4 8900 	strd	r8, r9, [r4]
 800d844:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d848:	2501      	movs	r5, #1
 800d84a:	4628      	mov	r0, r5
 800d84c:	b00d      	add	sp, #52	@ 0x34
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	a39d      	add	r3, pc, #628	@ (adr r3, 800dac8 <__ieee754_rem_pio2+0x2f8>)
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	f7f2 fd3e 	bl	80002d8 <__aeabi_dsub>
 800d85c:	a39c      	add	r3, pc, #624	@ (adr r3, 800dad0 <__ieee754_rem_pio2+0x300>)
 800d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d862:	4606      	mov	r6, r0
 800d864:	460f      	mov	r7, r1
 800d866:	f7f2 fd37 	bl	80002d8 <__aeabi_dsub>
 800d86a:	4602      	mov	r2, r0
 800d86c:	460b      	mov	r3, r1
 800d86e:	4680      	mov	r8, r0
 800d870:	4689      	mov	r9, r1
 800d872:	4630      	mov	r0, r6
 800d874:	4639      	mov	r1, r7
 800d876:	f7f2 fd2f 	bl	80002d8 <__aeabi_dsub>
 800d87a:	a395      	add	r3, pc, #596	@ (adr r3, 800dad0 <__ieee754_rem_pio2+0x300>)
 800d87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d880:	e7dc      	b.n	800d83c <__ieee754_rem_pio2+0x6c>
 800d882:	f7f2 fd2b 	bl	80002dc <__adddf3>
 800d886:	45a8      	cmp	r8, r5
 800d888:	4606      	mov	r6, r0
 800d88a:	460f      	mov	r7, r1
 800d88c:	d018      	beq.n	800d8c0 <__ieee754_rem_pio2+0xf0>
 800d88e:	a38c      	add	r3, pc, #560	@ (adr r3, 800dac0 <__ieee754_rem_pio2+0x2f0>)
 800d890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d894:	f7f2 fd22 	bl	80002dc <__adddf3>
 800d898:	4602      	mov	r2, r0
 800d89a:	460b      	mov	r3, r1
 800d89c:	4680      	mov	r8, r0
 800d89e:	4689      	mov	r9, r1
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	4639      	mov	r1, r7
 800d8a4:	f7f2 fd18 	bl	80002d8 <__aeabi_dsub>
 800d8a8:	a385      	add	r3, pc, #532	@ (adr r3, 800dac0 <__ieee754_rem_pio2+0x2f0>)
 800d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ae:	f7f2 fd15 	bl	80002dc <__adddf3>
 800d8b2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d8b6:	e9c4 8900 	strd	r8, r9, [r4]
 800d8ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d8be:	e7c4      	b.n	800d84a <__ieee754_rem_pio2+0x7a>
 800d8c0:	a381      	add	r3, pc, #516	@ (adr r3, 800dac8 <__ieee754_rem_pio2+0x2f8>)
 800d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c6:	f7f2 fd09 	bl	80002dc <__adddf3>
 800d8ca:	a381      	add	r3, pc, #516	@ (adr r3, 800dad0 <__ieee754_rem_pio2+0x300>)
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	4606      	mov	r6, r0
 800d8d2:	460f      	mov	r7, r1
 800d8d4:	f7f2 fd02 	bl	80002dc <__adddf3>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	4680      	mov	r8, r0
 800d8de:	4689      	mov	r9, r1
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	4639      	mov	r1, r7
 800d8e4:	f7f2 fcf8 	bl	80002d8 <__aeabi_dsub>
 800d8e8:	a379      	add	r3, pc, #484	@ (adr r3, 800dad0 <__ieee754_rem_pio2+0x300>)
 800d8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ee:	e7de      	b.n	800d8ae <__ieee754_rem_pio2+0xde>
 800d8f0:	4b82      	ldr	r3, [pc, #520]	@ (800dafc <__ieee754_rem_pio2+0x32c>)
 800d8f2:	4598      	cmp	r8, r3
 800d8f4:	f200 80d1 	bhi.w	800da9a <__ieee754_rem_pio2+0x2ca>
 800d8f8:	f000 fe40 	bl	800e57c <fabs>
 800d8fc:	ec57 6b10 	vmov	r6, r7, d0
 800d900:	a375      	add	r3, pc, #468	@ (adr r3, 800dad8 <__ieee754_rem_pio2+0x308>)
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	4630      	mov	r0, r6
 800d908:	4639      	mov	r1, r7
 800d90a:	f7f2 fe9d 	bl	8000648 <__aeabi_dmul>
 800d90e:	4b7c      	ldr	r3, [pc, #496]	@ (800db00 <__ieee754_rem_pio2+0x330>)
 800d910:	2200      	movs	r2, #0
 800d912:	f7f2 fce3 	bl	80002dc <__adddf3>
 800d916:	f7f3 f931 	bl	8000b7c <__aeabi_d2iz>
 800d91a:	4605      	mov	r5, r0
 800d91c:	f7f2 fe2a 	bl	8000574 <__aeabi_i2d>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d928:	a363      	add	r3, pc, #396	@ (adr r3, 800dab8 <__ieee754_rem_pio2+0x2e8>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f2 fe8b 	bl	8000648 <__aeabi_dmul>
 800d932:	4602      	mov	r2, r0
 800d934:	460b      	mov	r3, r1
 800d936:	4630      	mov	r0, r6
 800d938:	4639      	mov	r1, r7
 800d93a:	f7f2 fccd 	bl	80002d8 <__aeabi_dsub>
 800d93e:	a360      	add	r3, pc, #384	@ (adr r3, 800dac0 <__ieee754_rem_pio2+0x2f0>)
 800d940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d944:	4682      	mov	sl, r0
 800d946:	468b      	mov	fp, r1
 800d948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d94c:	f7f2 fe7c 	bl	8000648 <__aeabi_dmul>
 800d950:	2d1f      	cmp	r5, #31
 800d952:	4606      	mov	r6, r0
 800d954:	460f      	mov	r7, r1
 800d956:	dc0c      	bgt.n	800d972 <__ieee754_rem_pio2+0x1a2>
 800d958:	4b6a      	ldr	r3, [pc, #424]	@ (800db04 <__ieee754_rem_pio2+0x334>)
 800d95a:	1e6a      	subs	r2, r5, #1
 800d95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d960:	4543      	cmp	r3, r8
 800d962:	d006      	beq.n	800d972 <__ieee754_rem_pio2+0x1a2>
 800d964:	4632      	mov	r2, r6
 800d966:	463b      	mov	r3, r7
 800d968:	4650      	mov	r0, sl
 800d96a:	4659      	mov	r1, fp
 800d96c:	f7f2 fcb4 	bl	80002d8 <__aeabi_dsub>
 800d970:	e00e      	b.n	800d990 <__ieee754_rem_pio2+0x1c0>
 800d972:	463b      	mov	r3, r7
 800d974:	4632      	mov	r2, r6
 800d976:	4650      	mov	r0, sl
 800d978:	4659      	mov	r1, fp
 800d97a:	f7f2 fcad 	bl	80002d8 <__aeabi_dsub>
 800d97e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d982:	9305      	str	r3, [sp, #20]
 800d984:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d988:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d98c:	2b10      	cmp	r3, #16
 800d98e:	dc02      	bgt.n	800d996 <__ieee754_rem_pio2+0x1c6>
 800d990:	e9c4 0100 	strd	r0, r1, [r4]
 800d994:	e039      	b.n	800da0a <__ieee754_rem_pio2+0x23a>
 800d996:	a34c      	add	r3, pc, #304	@ (adr r3, 800dac8 <__ieee754_rem_pio2+0x2f8>)
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9a0:	f7f2 fe52 	bl	8000648 <__aeabi_dmul>
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	460f      	mov	r7, r1
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	4650      	mov	r0, sl
 800d9ae:	4659      	mov	r1, fp
 800d9b0:	f7f2 fc92 	bl	80002d8 <__aeabi_dsub>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4680      	mov	r8, r0
 800d9ba:	4689      	mov	r9, r1
 800d9bc:	4650      	mov	r0, sl
 800d9be:	4659      	mov	r1, fp
 800d9c0:	f7f2 fc8a 	bl	80002d8 <__aeabi_dsub>
 800d9c4:	4632      	mov	r2, r6
 800d9c6:	463b      	mov	r3, r7
 800d9c8:	f7f2 fc86 	bl	80002d8 <__aeabi_dsub>
 800d9cc:	a340      	add	r3, pc, #256	@ (adr r3, 800dad0 <__ieee754_rem_pio2+0x300>)
 800d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	460f      	mov	r7, r1
 800d9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9da:	f7f2 fe35 	bl	8000648 <__aeabi_dmul>
 800d9de:	4632      	mov	r2, r6
 800d9e0:	463b      	mov	r3, r7
 800d9e2:	f7f2 fc79 	bl	80002d8 <__aeabi_dsub>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	460f      	mov	r7, r1
 800d9ee:	4640      	mov	r0, r8
 800d9f0:	4649      	mov	r1, r9
 800d9f2:	f7f2 fc71 	bl	80002d8 <__aeabi_dsub>
 800d9f6:	9a05      	ldr	r2, [sp, #20]
 800d9f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d9fc:	1ad3      	subs	r3, r2, r3
 800d9fe:	2b31      	cmp	r3, #49	@ 0x31
 800da00:	dc20      	bgt.n	800da44 <__ieee754_rem_pio2+0x274>
 800da02:	e9c4 0100 	strd	r0, r1, [r4]
 800da06:	46c2      	mov	sl, r8
 800da08:	46cb      	mov	fp, r9
 800da0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800da0e:	4650      	mov	r0, sl
 800da10:	4642      	mov	r2, r8
 800da12:	464b      	mov	r3, r9
 800da14:	4659      	mov	r1, fp
 800da16:	f7f2 fc5f 	bl	80002d8 <__aeabi_dsub>
 800da1a:	463b      	mov	r3, r7
 800da1c:	4632      	mov	r2, r6
 800da1e:	f7f2 fc5b 	bl	80002d8 <__aeabi_dsub>
 800da22:	9b04      	ldr	r3, [sp, #16]
 800da24:	2b00      	cmp	r3, #0
 800da26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800da2a:	f6bf af0e 	bge.w	800d84a <__ieee754_rem_pio2+0x7a>
 800da2e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800da32:	6063      	str	r3, [r4, #4]
 800da34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da38:	f8c4 8000 	str.w	r8, [r4]
 800da3c:	60a0      	str	r0, [r4, #8]
 800da3e:	60e3      	str	r3, [r4, #12]
 800da40:	426d      	negs	r5, r5
 800da42:	e702      	b.n	800d84a <__ieee754_rem_pio2+0x7a>
 800da44:	a326      	add	r3, pc, #152	@ (adr r3, 800dae0 <__ieee754_rem_pio2+0x310>)
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da4e:	f7f2 fdfb 	bl	8000648 <__aeabi_dmul>
 800da52:	4606      	mov	r6, r0
 800da54:	460f      	mov	r7, r1
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	4640      	mov	r0, r8
 800da5c:	4649      	mov	r1, r9
 800da5e:	f7f2 fc3b 	bl	80002d8 <__aeabi_dsub>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4682      	mov	sl, r0
 800da68:	468b      	mov	fp, r1
 800da6a:	4640      	mov	r0, r8
 800da6c:	4649      	mov	r1, r9
 800da6e:	f7f2 fc33 	bl	80002d8 <__aeabi_dsub>
 800da72:	4632      	mov	r2, r6
 800da74:	463b      	mov	r3, r7
 800da76:	f7f2 fc2f 	bl	80002d8 <__aeabi_dsub>
 800da7a:	a31b      	add	r3, pc, #108	@ (adr r3, 800dae8 <__ieee754_rem_pio2+0x318>)
 800da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da80:	4606      	mov	r6, r0
 800da82:	460f      	mov	r7, r1
 800da84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da88:	f7f2 fdde 	bl	8000648 <__aeabi_dmul>
 800da8c:	4632      	mov	r2, r6
 800da8e:	463b      	mov	r3, r7
 800da90:	f7f2 fc22 	bl	80002d8 <__aeabi_dsub>
 800da94:	4606      	mov	r6, r0
 800da96:	460f      	mov	r7, r1
 800da98:	e764      	b.n	800d964 <__ieee754_rem_pio2+0x194>
 800da9a:	4b1b      	ldr	r3, [pc, #108]	@ (800db08 <__ieee754_rem_pio2+0x338>)
 800da9c:	4598      	cmp	r8, r3
 800da9e:	d935      	bls.n	800db0c <__ieee754_rem_pio2+0x33c>
 800daa0:	4632      	mov	r2, r6
 800daa2:	463b      	mov	r3, r7
 800daa4:	4630      	mov	r0, r6
 800daa6:	4639      	mov	r1, r7
 800daa8:	f7f2 fc16 	bl	80002d8 <__aeabi_dsub>
 800daac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dab0:	e9c4 0100 	strd	r0, r1, [r4]
 800dab4:	e69e      	b.n	800d7f4 <__ieee754_rem_pio2+0x24>
 800dab6:	bf00      	nop
 800dab8:	54400000 	.word	0x54400000
 800dabc:	3ff921fb 	.word	0x3ff921fb
 800dac0:	1a626331 	.word	0x1a626331
 800dac4:	3dd0b461 	.word	0x3dd0b461
 800dac8:	1a600000 	.word	0x1a600000
 800dacc:	3dd0b461 	.word	0x3dd0b461
 800dad0:	2e037073 	.word	0x2e037073
 800dad4:	3ba3198a 	.word	0x3ba3198a
 800dad8:	6dc9c883 	.word	0x6dc9c883
 800dadc:	3fe45f30 	.word	0x3fe45f30
 800dae0:	2e000000 	.word	0x2e000000
 800dae4:	3ba3198a 	.word	0x3ba3198a
 800dae8:	252049c1 	.word	0x252049c1
 800daec:	397b839a 	.word	0x397b839a
 800daf0:	3fe921fb 	.word	0x3fe921fb
 800daf4:	4002d97b 	.word	0x4002d97b
 800daf8:	3ff921fb 	.word	0x3ff921fb
 800dafc:	413921fb 	.word	0x413921fb
 800db00:	3fe00000 	.word	0x3fe00000
 800db04:	0801d724 	.word	0x0801d724
 800db08:	7fefffff 	.word	0x7fefffff
 800db0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800db10:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800db14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800db18:	4630      	mov	r0, r6
 800db1a:	460f      	mov	r7, r1
 800db1c:	f7f3 f82e 	bl	8000b7c <__aeabi_d2iz>
 800db20:	f7f2 fd28 	bl	8000574 <__aeabi_i2d>
 800db24:	4602      	mov	r2, r0
 800db26:	460b      	mov	r3, r1
 800db28:	4630      	mov	r0, r6
 800db2a:	4639      	mov	r1, r7
 800db2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800db30:	f7f2 fbd2 	bl	80002d8 <__aeabi_dsub>
 800db34:	4b22      	ldr	r3, [pc, #136]	@ (800dbc0 <__ieee754_rem_pio2+0x3f0>)
 800db36:	2200      	movs	r2, #0
 800db38:	f7f2 fd86 	bl	8000648 <__aeabi_dmul>
 800db3c:	460f      	mov	r7, r1
 800db3e:	4606      	mov	r6, r0
 800db40:	f7f3 f81c 	bl	8000b7c <__aeabi_d2iz>
 800db44:	f7f2 fd16 	bl	8000574 <__aeabi_i2d>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4630      	mov	r0, r6
 800db4e:	4639      	mov	r1, r7
 800db50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800db54:	f7f2 fbc0 	bl	80002d8 <__aeabi_dsub>
 800db58:	4b19      	ldr	r3, [pc, #100]	@ (800dbc0 <__ieee754_rem_pio2+0x3f0>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	f7f2 fd74 	bl	8000648 <__aeabi_dmul>
 800db60:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800db64:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800db68:	f04f 0803 	mov.w	r8, #3
 800db6c:	2600      	movs	r6, #0
 800db6e:	2700      	movs	r7, #0
 800db70:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800db74:	4632      	mov	r2, r6
 800db76:	463b      	mov	r3, r7
 800db78:	46c2      	mov	sl, r8
 800db7a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800db7e:	f7f2 ffcb 	bl	8000b18 <__aeabi_dcmpeq>
 800db82:	2800      	cmp	r0, #0
 800db84:	d1f4      	bne.n	800db70 <__ieee754_rem_pio2+0x3a0>
 800db86:	4b0f      	ldr	r3, [pc, #60]	@ (800dbc4 <__ieee754_rem_pio2+0x3f4>)
 800db88:	9301      	str	r3, [sp, #4]
 800db8a:	2302      	movs	r3, #2
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	462a      	mov	r2, r5
 800db90:	4653      	mov	r3, sl
 800db92:	4621      	mov	r1, r4
 800db94:	a806      	add	r0, sp, #24
 800db96:	f000 f817 	bl	800dbc8 <__kernel_rem_pio2>
 800db9a:	9b04      	ldr	r3, [sp, #16]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	4605      	mov	r5, r0
 800dba0:	f6bf ae53 	bge.w	800d84a <__ieee754_rem_pio2+0x7a>
 800dba4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800dba8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dbac:	e9c4 2300 	strd	r2, r3, [r4]
 800dbb0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800dbb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dbb8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800dbbc:	e740      	b.n	800da40 <__ieee754_rem_pio2+0x270>
 800dbbe:	bf00      	nop
 800dbc0:	41700000 	.word	0x41700000
 800dbc4:	0801d7a4 	.word	0x0801d7a4

0800dbc8 <__kernel_rem_pio2>:
 800dbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbcc:	ed2d 8b02 	vpush	{d8}
 800dbd0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800dbd4:	f112 0f14 	cmn.w	r2, #20
 800dbd8:	9306      	str	r3, [sp, #24]
 800dbda:	9104      	str	r1, [sp, #16]
 800dbdc:	4bbe      	ldr	r3, [pc, #760]	@ (800ded8 <__kernel_rem_pio2+0x310>)
 800dbde:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800dbe0:	9008      	str	r0, [sp, #32]
 800dbe2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	9b06      	ldr	r3, [sp, #24]
 800dbea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800dbee:	bfa8      	it	ge
 800dbf0:	1ed4      	subge	r4, r2, #3
 800dbf2:	9305      	str	r3, [sp, #20]
 800dbf4:	bfb2      	itee	lt
 800dbf6:	2400      	movlt	r4, #0
 800dbf8:	2318      	movge	r3, #24
 800dbfa:	fb94 f4f3 	sdivge	r4, r4, r3
 800dbfe:	f06f 0317 	mvn.w	r3, #23
 800dc02:	fb04 3303 	mla	r3, r4, r3, r3
 800dc06:	eb03 0b02 	add.w	fp, r3, r2
 800dc0a:	9b00      	ldr	r3, [sp, #0]
 800dc0c:	9a05      	ldr	r2, [sp, #20]
 800dc0e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800dec8 <__kernel_rem_pio2+0x300>
 800dc12:	eb03 0802 	add.w	r8, r3, r2
 800dc16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800dc18:	1aa7      	subs	r7, r4, r2
 800dc1a:	ae20      	add	r6, sp, #128	@ 0x80
 800dc1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dc20:	2500      	movs	r5, #0
 800dc22:	4545      	cmp	r5, r8
 800dc24:	dd13      	ble.n	800dc4e <__kernel_rem_pio2+0x86>
 800dc26:	9b06      	ldr	r3, [sp, #24]
 800dc28:	aa20      	add	r2, sp, #128	@ 0x80
 800dc2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dc2e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800dc32:	f04f 0800 	mov.w	r8, #0
 800dc36:	9b00      	ldr	r3, [sp, #0]
 800dc38:	4598      	cmp	r8, r3
 800dc3a:	dc31      	bgt.n	800dca0 <__kernel_rem_pio2+0xd8>
 800dc3c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800dec8 <__kernel_rem_pio2+0x300>
 800dc40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc48:	462f      	mov	r7, r5
 800dc4a:	2600      	movs	r6, #0
 800dc4c:	e01b      	b.n	800dc86 <__kernel_rem_pio2+0xbe>
 800dc4e:	42ef      	cmn	r7, r5
 800dc50:	d407      	bmi.n	800dc62 <__kernel_rem_pio2+0x9a>
 800dc52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dc56:	f7f2 fc8d 	bl	8000574 <__aeabi_i2d>
 800dc5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dc5e:	3501      	adds	r5, #1
 800dc60:	e7df      	b.n	800dc22 <__kernel_rem_pio2+0x5a>
 800dc62:	ec51 0b18 	vmov	r0, r1, d8
 800dc66:	e7f8      	b.n	800dc5a <__kernel_rem_pio2+0x92>
 800dc68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dc70:	f7f2 fcea 	bl	8000648 <__aeabi_dmul>
 800dc74:	4602      	mov	r2, r0
 800dc76:	460b      	mov	r3, r1
 800dc78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc7c:	f7f2 fb2e 	bl	80002dc <__adddf3>
 800dc80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc84:	3601      	adds	r6, #1
 800dc86:	9b05      	ldr	r3, [sp, #20]
 800dc88:	429e      	cmp	r6, r3
 800dc8a:	f1a7 0708 	sub.w	r7, r7, #8
 800dc8e:	ddeb      	ble.n	800dc68 <__kernel_rem_pio2+0xa0>
 800dc90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc94:	f108 0801 	add.w	r8, r8, #1
 800dc98:	ecaa 7b02 	vstmia	sl!, {d7}
 800dc9c:	3508      	adds	r5, #8
 800dc9e:	e7ca      	b.n	800dc36 <__kernel_rem_pio2+0x6e>
 800dca0:	9b00      	ldr	r3, [sp, #0]
 800dca2:	f8dd 8000 	ldr.w	r8, [sp]
 800dca6:	aa0c      	add	r2, sp, #48	@ 0x30
 800dca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcac:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800dcb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dcb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcb6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800dcba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcbc:	ab98      	add	r3, sp, #608	@ 0x260
 800dcbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dcc2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800dcc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dcca:	ac0c      	add	r4, sp, #48	@ 0x30
 800dccc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dcce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800dcd2:	46a1      	mov	r9, r4
 800dcd4:	46c2      	mov	sl, r8
 800dcd6:	f1ba 0f00 	cmp.w	sl, #0
 800dcda:	f1a5 0508 	sub.w	r5, r5, #8
 800dcde:	dc77      	bgt.n	800ddd0 <__kernel_rem_pio2+0x208>
 800dce0:	4658      	mov	r0, fp
 800dce2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800dce6:	f000 fc53 	bl	800e590 <scalbn>
 800dcea:	ec57 6b10 	vmov	r6, r7, d0
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	4639      	mov	r1, r7
 800dcf8:	f7f2 fca6 	bl	8000648 <__aeabi_dmul>
 800dcfc:	ec41 0b10 	vmov	d0, r0, r1
 800dd00:	f000 fcc6 	bl	800e690 <floor>
 800dd04:	4b75      	ldr	r3, [pc, #468]	@ (800dedc <__kernel_rem_pio2+0x314>)
 800dd06:	ec51 0b10 	vmov	r0, r1, d0
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f7f2 fc9c 	bl	8000648 <__aeabi_dmul>
 800dd10:	4602      	mov	r2, r0
 800dd12:	460b      	mov	r3, r1
 800dd14:	4630      	mov	r0, r6
 800dd16:	4639      	mov	r1, r7
 800dd18:	f7f2 fade 	bl	80002d8 <__aeabi_dsub>
 800dd1c:	460f      	mov	r7, r1
 800dd1e:	4606      	mov	r6, r0
 800dd20:	f7f2 ff2c 	bl	8000b7c <__aeabi_d2iz>
 800dd24:	9002      	str	r0, [sp, #8]
 800dd26:	f7f2 fc25 	bl	8000574 <__aeabi_i2d>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	4630      	mov	r0, r6
 800dd30:	4639      	mov	r1, r7
 800dd32:	f7f2 fad1 	bl	80002d8 <__aeabi_dsub>
 800dd36:	f1bb 0f00 	cmp.w	fp, #0
 800dd3a:	4606      	mov	r6, r0
 800dd3c:	460f      	mov	r7, r1
 800dd3e:	dd6c      	ble.n	800de1a <__kernel_rem_pio2+0x252>
 800dd40:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800dd44:	ab0c      	add	r3, sp, #48	@ 0x30
 800dd46:	9d02      	ldr	r5, [sp, #8]
 800dd48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd4c:	f1cb 0018 	rsb	r0, fp, #24
 800dd50:	fa43 f200 	asr.w	r2, r3, r0
 800dd54:	4415      	add	r5, r2
 800dd56:	4082      	lsls	r2, r0
 800dd58:	1a9b      	subs	r3, r3, r2
 800dd5a:	aa0c      	add	r2, sp, #48	@ 0x30
 800dd5c:	9502      	str	r5, [sp, #8]
 800dd5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dd62:	f1cb 0217 	rsb	r2, fp, #23
 800dd66:	fa43 f902 	asr.w	r9, r3, r2
 800dd6a:	f1b9 0f00 	cmp.w	r9, #0
 800dd6e:	dd64      	ble.n	800de3a <__kernel_rem_pio2+0x272>
 800dd70:	9b02      	ldr	r3, [sp, #8]
 800dd72:	2200      	movs	r2, #0
 800dd74:	3301      	adds	r3, #1
 800dd76:	9302      	str	r3, [sp, #8]
 800dd78:	4615      	mov	r5, r2
 800dd7a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800dd7e:	4590      	cmp	r8, r2
 800dd80:	f300 80b8 	bgt.w	800def4 <__kernel_rem_pio2+0x32c>
 800dd84:	f1bb 0f00 	cmp.w	fp, #0
 800dd88:	dd07      	ble.n	800dd9a <__kernel_rem_pio2+0x1d2>
 800dd8a:	f1bb 0f01 	cmp.w	fp, #1
 800dd8e:	f000 80bf 	beq.w	800df10 <__kernel_rem_pio2+0x348>
 800dd92:	f1bb 0f02 	cmp.w	fp, #2
 800dd96:	f000 80c6 	beq.w	800df26 <__kernel_rem_pio2+0x35e>
 800dd9a:	f1b9 0f02 	cmp.w	r9, #2
 800dd9e:	d14c      	bne.n	800de3a <__kernel_rem_pio2+0x272>
 800dda0:	4632      	mov	r2, r6
 800dda2:	463b      	mov	r3, r7
 800dda4:	494e      	ldr	r1, [pc, #312]	@ (800dee0 <__kernel_rem_pio2+0x318>)
 800dda6:	2000      	movs	r0, #0
 800dda8:	f7f2 fa96 	bl	80002d8 <__aeabi_dsub>
 800ddac:	4606      	mov	r6, r0
 800ddae:	460f      	mov	r7, r1
 800ddb0:	2d00      	cmp	r5, #0
 800ddb2:	d042      	beq.n	800de3a <__kernel_rem_pio2+0x272>
 800ddb4:	4658      	mov	r0, fp
 800ddb6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800ded0 <__kernel_rem_pio2+0x308>
 800ddba:	f000 fbe9 	bl	800e590 <scalbn>
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	4639      	mov	r1, r7
 800ddc2:	ec53 2b10 	vmov	r2, r3, d0
 800ddc6:	f7f2 fa87 	bl	80002d8 <__aeabi_dsub>
 800ddca:	4606      	mov	r6, r0
 800ddcc:	460f      	mov	r7, r1
 800ddce:	e034      	b.n	800de3a <__kernel_rem_pio2+0x272>
 800ddd0:	4b44      	ldr	r3, [pc, #272]	@ (800dee4 <__kernel_rem_pio2+0x31c>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddd8:	f7f2 fc36 	bl	8000648 <__aeabi_dmul>
 800dddc:	f7f2 fece 	bl	8000b7c <__aeabi_d2iz>
 800dde0:	f7f2 fbc8 	bl	8000574 <__aeabi_i2d>
 800dde4:	4b40      	ldr	r3, [pc, #256]	@ (800dee8 <__kernel_rem_pio2+0x320>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	4606      	mov	r6, r0
 800ddea:	460f      	mov	r7, r1
 800ddec:	f7f2 fc2c 	bl	8000648 <__aeabi_dmul>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddf8:	f7f2 fa6e 	bl	80002d8 <__aeabi_dsub>
 800ddfc:	f7f2 febe 	bl	8000b7c <__aeabi_d2iz>
 800de00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de04:	f849 0b04 	str.w	r0, [r9], #4
 800de08:	4639      	mov	r1, r7
 800de0a:	4630      	mov	r0, r6
 800de0c:	f7f2 fa66 	bl	80002dc <__adddf3>
 800de10:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800de14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de18:	e75d      	b.n	800dcd6 <__kernel_rem_pio2+0x10e>
 800de1a:	d107      	bne.n	800de2c <__kernel_rem_pio2+0x264>
 800de1c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800de20:	aa0c      	add	r2, sp, #48	@ 0x30
 800de22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de26:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800de2a:	e79e      	b.n	800dd6a <__kernel_rem_pio2+0x1a2>
 800de2c:	4b2f      	ldr	r3, [pc, #188]	@ (800deec <__kernel_rem_pio2+0x324>)
 800de2e:	2200      	movs	r2, #0
 800de30:	f7f2 fe90 	bl	8000b54 <__aeabi_dcmpge>
 800de34:	2800      	cmp	r0, #0
 800de36:	d143      	bne.n	800dec0 <__kernel_rem_pio2+0x2f8>
 800de38:	4681      	mov	r9, r0
 800de3a:	2200      	movs	r2, #0
 800de3c:	2300      	movs	r3, #0
 800de3e:	4630      	mov	r0, r6
 800de40:	4639      	mov	r1, r7
 800de42:	f7f2 fe69 	bl	8000b18 <__aeabi_dcmpeq>
 800de46:	2800      	cmp	r0, #0
 800de48:	f000 80bf 	beq.w	800dfca <__kernel_rem_pio2+0x402>
 800de4c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800de50:	2200      	movs	r2, #0
 800de52:	9900      	ldr	r1, [sp, #0]
 800de54:	428b      	cmp	r3, r1
 800de56:	da6e      	bge.n	800df36 <__kernel_rem_pio2+0x36e>
 800de58:	2a00      	cmp	r2, #0
 800de5a:	f000 8089 	beq.w	800df70 <__kernel_rem_pio2+0x3a8>
 800de5e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800de62:	ab0c      	add	r3, sp, #48	@ 0x30
 800de64:	f1ab 0b18 	sub.w	fp, fp, #24
 800de68:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d0f6      	beq.n	800de5e <__kernel_rem_pio2+0x296>
 800de70:	4658      	mov	r0, fp
 800de72:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800ded0 <__kernel_rem_pio2+0x308>
 800de76:	f000 fb8b 	bl	800e590 <scalbn>
 800de7a:	f108 0301 	add.w	r3, r8, #1
 800de7e:	00da      	lsls	r2, r3, #3
 800de80:	9205      	str	r2, [sp, #20]
 800de82:	ec55 4b10 	vmov	r4, r5, d0
 800de86:	aa70      	add	r2, sp, #448	@ 0x1c0
 800de88:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800dee4 <__kernel_rem_pio2+0x31c>
 800de8c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800de90:	4646      	mov	r6, r8
 800de92:	f04f 0a00 	mov.w	sl, #0
 800de96:	2e00      	cmp	r6, #0
 800de98:	f280 80cf 	bge.w	800e03a <__kernel_rem_pio2+0x472>
 800de9c:	4644      	mov	r4, r8
 800de9e:	2c00      	cmp	r4, #0
 800dea0:	f2c0 80fd 	blt.w	800e09e <__kernel_rem_pio2+0x4d6>
 800dea4:	4b12      	ldr	r3, [pc, #72]	@ (800def0 <__kernel_rem_pio2+0x328>)
 800dea6:	461f      	mov	r7, r3
 800dea8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800deaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800deae:	9306      	str	r3, [sp, #24]
 800deb0:	f04f 0a00 	mov.w	sl, #0
 800deb4:	f04f 0b00 	mov.w	fp, #0
 800deb8:	2600      	movs	r6, #0
 800deba:	eba8 0504 	sub.w	r5, r8, r4
 800debe:	e0e2      	b.n	800e086 <__kernel_rem_pio2+0x4be>
 800dec0:	f04f 0902 	mov.w	r9, #2
 800dec4:	e754      	b.n	800dd70 <__kernel_rem_pio2+0x1a8>
 800dec6:	bf00      	nop
	...
 800ded4:	3ff00000 	.word	0x3ff00000
 800ded8:	0801d8f0 	.word	0x0801d8f0
 800dedc:	40200000 	.word	0x40200000
 800dee0:	3ff00000 	.word	0x3ff00000
 800dee4:	3e700000 	.word	0x3e700000
 800dee8:	41700000 	.word	0x41700000
 800deec:	3fe00000 	.word	0x3fe00000
 800def0:	0801d8b0 	.word	0x0801d8b0
 800def4:	f854 3b04 	ldr.w	r3, [r4], #4
 800def8:	b945      	cbnz	r5, 800df0c <__kernel_rem_pio2+0x344>
 800defa:	b123      	cbz	r3, 800df06 <__kernel_rem_pio2+0x33e>
 800defc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800df00:	f844 3c04 	str.w	r3, [r4, #-4]
 800df04:	2301      	movs	r3, #1
 800df06:	3201      	adds	r2, #1
 800df08:	461d      	mov	r5, r3
 800df0a:	e738      	b.n	800dd7e <__kernel_rem_pio2+0x1b6>
 800df0c:	1acb      	subs	r3, r1, r3
 800df0e:	e7f7      	b.n	800df00 <__kernel_rem_pio2+0x338>
 800df10:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800df14:	ab0c      	add	r3, sp, #48	@ 0x30
 800df16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800df1e:	a90c      	add	r1, sp, #48	@ 0x30
 800df20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800df24:	e739      	b.n	800dd9a <__kernel_rem_pio2+0x1d2>
 800df26:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800df2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800df2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800df34:	e7f3      	b.n	800df1e <__kernel_rem_pio2+0x356>
 800df36:	a90c      	add	r1, sp, #48	@ 0x30
 800df38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800df3c:	3b01      	subs	r3, #1
 800df3e:	430a      	orrs	r2, r1
 800df40:	e787      	b.n	800de52 <__kernel_rem_pio2+0x28a>
 800df42:	3401      	adds	r4, #1
 800df44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800df48:	2a00      	cmp	r2, #0
 800df4a:	d0fa      	beq.n	800df42 <__kernel_rem_pio2+0x37a>
 800df4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800df52:	eb0d 0503 	add.w	r5, sp, r3
 800df56:	9b06      	ldr	r3, [sp, #24]
 800df58:	aa20      	add	r2, sp, #128	@ 0x80
 800df5a:	4443      	add	r3, r8
 800df5c:	f108 0701 	add.w	r7, r8, #1
 800df60:	3d98      	subs	r5, #152	@ 0x98
 800df62:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800df66:	4444      	add	r4, r8
 800df68:	42bc      	cmp	r4, r7
 800df6a:	da04      	bge.n	800df76 <__kernel_rem_pio2+0x3ae>
 800df6c:	46a0      	mov	r8, r4
 800df6e:	e6a2      	b.n	800dcb6 <__kernel_rem_pio2+0xee>
 800df70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df72:	2401      	movs	r4, #1
 800df74:	e7e6      	b.n	800df44 <__kernel_rem_pio2+0x37c>
 800df76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df78:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800df7c:	f7f2 fafa 	bl	8000574 <__aeabi_i2d>
 800df80:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e248 <__kernel_rem_pio2+0x680>
 800df84:	e8e6 0102 	strd	r0, r1, [r6], #8
 800df88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df90:	46b2      	mov	sl, r6
 800df92:	f04f 0800 	mov.w	r8, #0
 800df96:	9b05      	ldr	r3, [sp, #20]
 800df98:	4598      	cmp	r8, r3
 800df9a:	dd05      	ble.n	800dfa8 <__kernel_rem_pio2+0x3e0>
 800df9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfa0:	3701      	adds	r7, #1
 800dfa2:	eca5 7b02 	vstmia	r5!, {d7}
 800dfa6:	e7df      	b.n	800df68 <__kernel_rem_pio2+0x3a0>
 800dfa8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800dfac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dfb0:	f7f2 fb4a 	bl	8000648 <__aeabi_dmul>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfbc:	f7f2 f98e 	bl	80002dc <__adddf3>
 800dfc0:	f108 0801 	add.w	r8, r8, #1
 800dfc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfc8:	e7e5      	b.n	800df96 <__kernel_rem_pio2+0x3ce>
 800dfca:	f1cb 0000 	rsb	r0, fp, #0
 800dfce:	ec47 6b10 	vmov	d0, r6, r7
 800dfd2:	f000 fadd 	bl	800e590 <scalbn>
 800dfd6:	ec55 4b10 	vmov	r4, r5, d0
 800dfda:	4b9d      	ldr	r3, [pc, #628]	@ (800e250 <__kernel_rem_pio2+0x688>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	4620      	mov	r0, r4
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	f7f2 fdb7 	bl	8000b54 <__aeabi_dcmpge>
 800dfe6:	b300      	cbz	r0, 800e02a <__kernel_rem_pio2+0x462>
 800dfe8:	4b9a      	ldr	r3, [pc, #616]	@ (800e254 <__kernel_rem_pio2+0x68c>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	4620      	mov	r0, r4
 800dfee:	4629      	mov	r1, r5
 800dff0:	f7f2 fb2a 	bl	8000648 <__aeabi_dmul>
 800dff4:	f7f2 fdc2 	bl	8000b7c <__aeabi_d2iz>
 800dff8:	4606      	mov	r6, r0
 800dffa:	f7f2 fabb 	bl	8000574 <__aeabi_i2d>
 800dffe:	4b94      	ldr	r3, [pc, #592]	@ (800e250 <__kernel_rem_pio2+0x688>)
 800e000:	2200      	movs	r2, #0
 800e002:	f7f2 fb21 	bl	8000648 <__aeabi_dmul>
 800e006:	460b      	mov	r3, r1
 800e008:	4602      	mov	r2, r0
 800e00a:	4629      	mov	r1, r5
 800e00c:	4620      	mov	r0, r4
 800e00e:	f7f2 f963 	bl	80002d8 <__aeabi_dsub>
 800e012:	f7f2 fdb3 	bl	8000b7c <__aeabi_d2iz>
 800e016:	ab0c      	add	r3, sp, #48	@ 0x30
 800e018:	f10b 0b18 	add.w	fp, fp, #24
 800e01c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e020:	f108 0801 	add.w	r8, r8, #1
 800e024:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e028:	e722      	b.n	800de70 <__kernel_rem_pio2+0x2a8>
 800e02a:	4620      	mov	r0, r4
 800e02c:	4629      	mov	r1, r5
 800e02e:	f7f2 fda5 	bl	8000b7c <__aeabi_d2iz>
 800e032:	ab0c      	add	r3, sp, #48	@ 0x30
 800e034:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e038:	e71a      	b.n	800de70 <__kernel_rem_pio2+0x2a8>
 800e03a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e03c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e040:	f7f2 fa98 	bl	8000574 <__aeabi_i2d>
 800e044:	4622      	mov	r2, r4
 800e046:	462b      	mov	r3, r5
 800e048:	f7f2 fafe 	bl	8000648 <__aeabi_dmul>
 800e04c:	4652      	mov	r2, sl
 800e04e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e052:	465b      	mov	r3, fp
 800e054:	4620      	mov	r0, r4
 800e056:	4629      	mov	r1, r5
 800e058:	f7f2 faf6 	bl	8000648 <__aeabi_dmul>
 800e05c:	3e01      	subs	r6, #1
 800e05e:	4604      	mov	r4, r0
 800e060:	460d      	mov	r5, r1
 800e062:	e718      	b.n	800de96 <__kernel_rem_pio2+0x2ce>
 800e064:	9906      	ldr	r1, [sp, #24]
 800e066:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e06a:	9106      	str	r1, [sp, #24]
 800e06c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e070:	f7f2 faea 	bl	8000648 <__aeabi_dmul>
 800e074:	4602      	mov	r2, r0
 800e076:	460b      	mov	r3, r1
 800e078:	4650      	mov	r0, sl
 800e07a:	4659      	mov	r1, fp
 800e07c:	f7f2 f92e 	bl	80002dc <__adddf3>
 800e080:	3601      	adds	r6, #1
 800e082:	4682      	mov	sl, r0
 800e084:	468b      	mov	fp, r1
 800e086:	9b00      	ldr	r3, [sp, #0]
 800e088:	429e      	cmp	r6, r3
 800e08a:	dc01      	bgt.n	800e090 <__kernel_rem_pio2+0x4c8>
 800e08c:	42b5      	cmp	r5, r6
 800e08e:	dae9      	bge.n	800e064 <__kernel_rem_pio2+0x49c>
 800e090:	ab48      	add	r3, sp, #288	@ 0x120
 800e092:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e096:	e9c5 ab00 	strd	sl, fp, [r5]
 800e09a:	3c01      	subs	r4, #1
 800e09c:	e6ff      	b.n	800de9e <__kernel_rem_pio2+0x2d6>
 800e09e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	dc0b      	bgt.n	800e0bc <__kernel_rem_pio2+0x4f4>
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	dc39      	bgt.n	800e11c <__kernel_rem_pio2+0x554>
 800e0a8:	d05d      	beq.n	800e166 <__kernel_rem_pio2+0x59e>
 800e0aa:	9b02      	ldr	r3, [sp, #8]
 800e0ac:	f003 0007 	and.w	r0, r3, #7
 800e0b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e0b4:	ecbd 8b02 	vpop	{d8}
 800e0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e0be:	2b03      	cmp	r3, #3
 800e0c0:	d1f3      	bne.n	800e0aa <__kernel_rem_pio2+0x4e2>
 800e0c2:	9b05      	ldr	r3, [sp, #20]
 800e0c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e0c8:	eb0d 0403 	add.w	r4, sp, r3
 800e0cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e0d0:	4625      	mov	r5, r4
 800e0d2:	46c2      	mov	sl, r8
 800e0d4:	f1ba 0f00 	cmp.w	sl, #0
 800e0d8:	f1a5 0508 	sub.w	r5, r5, #8
 800e0dc:	dc6b      	bgt.n	800e1b6 <__kernel_rem_pio2+0x5ee>
 800e0de:	4645      	mov	r5, r8
 800e0e0:	2d01      	cmp	r5, #1
 800e0e2:	f1a4 0408 	sub.w	r4, r4, #8
 800e0e6:	f300 8087 	bgt.w	800e1f8 <__kernel_rem_pio2+0x630>
 800e0ea:	9c05      	ldr	r4, [sp, #20]
 800e0ec:	ab48      	add	r3, sp, #288	@ 0x120
 800e0ee:	441c      	add	r4, r3
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	f1b8 0f01 	cmp.w	r8, #1
 800e0f8:	f300 809c 	bgt.w	800e234 <__kernel_rem_pio2+0x66c>
 800e0fc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e100:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e104:	f1b9 0f00 	cmp.w	r9, #0
 800e108:	f040 80a6 	bne.w	800e258 <__kernel_rem_pio2+0x690>
 800e10c:	9b04      	ldr	r3, [sp, #16]
 800e10e:	e9c3 7800 	strd	r7, r8, [r3]
 800e112:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e116:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e11a:	e7c6      	b.n	800e0aa <__kernel_rem_pio2+0x4e2>
 800e11c:	9d05      	ldr	r5, [sp, #20]
 800e11e:	ab48      	add	r3, sp, #288	@ 0x120
 800e120:	441d      	add	r5, r3
 800e122:	4644      	mov	r4, r8
 800e124:	2000      	movs	r0, #0
 800e126:	2100      	movs	r1, #0
 800e128:	2c00      	cmp	r4, #0
 800e12a:	da35      	bge.n	800e198 <__kernel_rem_pio2+0x5d0>
 800e12c:	f1b9 0f00 	cmp.w	r9, #0
 800e130:	d038      	beq.n	800e1a4 <__kernel_rem_pio2+0x5dc>
 800e132:	4602      	mov	r2, r0
 800e134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e138:	9c04      	ldr	r4, [sp, #16]
 800e13a:	e9c4 2300 	strd	r2, r3, [r4]
 800e13e:	4602      	mov	r2, r0
 800e140:	460b      	mov	r3, r1
 800e142:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e146:	f7f2 f8c7 	bl	80002d8 <__aeabi_dsub>
 800e14a:	ad4a      	add	r5, sp, #296	@ 0x128
 800e14c:	2401      	movs	r4, #1
 800e14e:	45a0      	cmp	r8, r4
 800e150:	da2b      	bge.n	800e1aa <__kernel_rem_pio2+0x5e2>
 800e152:	f1b9 0f00 	cmp.w	r9, #0
 800e156:	d002      	beq.n	800e15e <__kernel_rem_pio2+0x596>
 800e158:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e15c:	4619      	mov	r1, r3
 800e15e:	9b04      	ldr	r3, [sp, #16]
 800e160:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e164:	e7a1      	b.n	800e0aa <__kernel_rem_pio2+0x4e2>
 800e166:	9c05      	ldr	r4, [sp, #20]
 800e168:	ab48      	add	r3, sp, #288	@ 0x120
 800e16a:	441c      	add	r4, r3
 800e16c:	2000      	movs	r0, #0
 800e16e:	2100      	movs	r1, #0
 800e170:	f1b8 0f00 	cmp.w	r8, #0
 800e174:	da09      	bge.n	800e18a <__kernel_rem_pio2+0x5c2>
 800e176:	f1b9 0f00 	cmp.w	r9, #0
 800e17a:	d002      	beq.n	800e182 <__kernel_rem_pio2+0x5ba>
 800e17c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e180:	4619      	mov	r1, r3
 800e182:	9b04      	ldr	r3, [sp, #16]
 800e184:	e9c3 0100 	strd	r0, r1, [r3]
 800e188:	e78f      	b.n	800e0aa <__kernel_rem_pio2+0x4e2>
 800e18a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e18e:	f7f2 f8a5 	bl	80002dc <__adddf3>
 800e192:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e196:	e7eb      	b.n	800e170 <__kernel_rem_pio2+0x5a8>
 800e198:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e19c:	f7f2 f89e 	bl	80002dc <__adddf3>
 800e1a0:	3c01      	subs	r4, #1
 800e1a2:	e7c1      	b.n	800e128 <__kernel_rem_pio2+0x560>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	e7c6      	b.n	800e138 <__kernel_rem_pio2+0x570>
 800e1aa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e1ae:	f7f2 f895 	bl	80002dc <__adddf3>
 800e1b2:	3401      	adds	r4, #1
 800e1b4:	e7cb      	b.n	800e14e <__kernel_rem_pio2+0x586>
 800e1b6:	ed95 7b00 	vldr	d7, [r5]
 800e1ba:	ed8d 7b00 	vstr	d7, [sp]
 800e1be:	ed95 7b02 	vldr	d7, [r5, #8]
 800e1c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1c6:	ec53 2b17 	vmov	r2, r3, d7
 800e1ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e1ce:	f7f2 f885 	bl	80002dc <__adddf3>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	460f      	mov	r7, r1
 800e1da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1de:	f7f2 f87b 	bl	80002d8 <__aeabi_dsub>
 800e1e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1e6:	f7f2 f879 	bl	80002dc <__adddf3>
 800e1ea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e1ee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e1f2:	e9c5 6700 	strd	r6, r7, [r5]
 800e1f6:	e76d      	b.n	800e0d4 <__kernel_rem_pio2+0x50c>
 800e1f8:	ed94 7b00 	vldr	d7, [r4]
 800e1fc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e200:	ec51 0b17 	vmov	r0, r1, d7
 800e204:	4652      	mov	r2, sl
 800e206:	465b      	mov	r3, fp
 800e208:	ed8d 7b00 	vstr	d7, [sp]
 800e20c:	f7f2 f866 	bl	80002dc <__adddf3>
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
 800e214:	4606      	mov	r6, r0
 800e216:	460f      	mov	r7, r1
 800e218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e21c:	f7f2 f85c 	bl	80002d8 <__aeabi_dsub>
 800e220:	4652      	mov	r2, sl
 800e222:	465b      	mov	r3, fp
 800e224:	f7f2 f85a 	bl	80002dc <__adddf3>
 800e228:	3d01      	subs	r5, #1
 800e22a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e22e:	e9c4 6700 	strd	r6, r7, [r4]
 800e232:	e755      	b.n	800e0e0 <__kernel_rem_pio2+0x518>
 800e234:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e238:	f7f2 f850 	bl	80002dc <__adddf3>
 800e23c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e240:	e758      	b.n	800e0f4 <__kernel_rem_pio2+0x52c>
 800e242:	bf00      	nop
 800e244:	f3af 8000 	nop.w
	...
 800e250:	41700000 	.word	0x41700000
 800e254:	3e700000 	.word	0x3e700000
 800e258:	9b04      	ldr	r3, [sp, #16]
 800e25a:	9a04      	ldr	r2, [sp, #16]
 800e25c:	601f      	str	r7, [r3, #0]
 800e25e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e262:	605c      	str	r4, [r3, #4]
 800e264:	609d      	str	r5, [r3, #8]
 800e266:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e26a:	60d3      	str	r3, [r2, #12]
 800e26c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e270:	6110      	str	r0, [r2, #16]
 800e272:	6153      	str	r3, [r2, #20]
 800e274:	e719      	b.n	800e0aa <__kernel_rem_pio2+0x4e2>
 800e276:	bf00      	nop

0800e278 <__kernel_cos>:
 800e278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	ec57 6b10 	vmov	r6, r7, d0
 800e280:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e284:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e288:	ed8d 1b00 	vstr	d1, [sp]
 800e28c:	d206      	bcs.n	800e29c <__kernel_cos+0x24>
 800e28e:	4630      	mov	r0, r6
 800e290:	4639      	mov	r1, r7
 800e292:	f7f2 fc73 	bl	8000b7c <__aeabi_d2iz>
 800e296:	2800      	cmp	r0, #0
 800e298:	f000 8088 	beq.w	800e3ac <__kernel_cos+0x134>
 800e29c:	4632      	mov	r2, r6
 800e29e:	463b      	mov	r3, r7
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	f7f2 f9d0 	bl	8000648 <__aeabi_dmul>
 800e2a8:	4b51      	ldr	r3, [pc, #324]	@ (800e3f0 <__kernel_cos+0x178>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	460d      	mov	r5, r1
 800e2b0:	f7f2 f9ca 	bl	8000648 <__aeabi_dmul>
 800e2b4:	a340      	add	r3, pc, #256	@ (adr r3, 800e3b8 <__kernel_cos+0x140>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	4682      	mov	sl, r0
 800e2bc:	468b      	mov	fp, r1
 800e2be:	4620      	mov	r0, r4
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	f7f2 f9c1 	bl	8000648 <__aeabi_dmul>
 800e2c6:	a33e      	add	r3, pc, #248	@ (adr r3, 800e3c0 <__kernel_cos+0x148>)
 800e2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2cc:	f7f2 f806 	bl	80002dc <__adddf3>
 800e2d0:	4622      	mov	r2, r4
 800e2d2:	462b      	mov	r3, r5
 800e2d4:	f7f2 f9b8 	bl	8000648 <__aeabi_dmul>
 800e2d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800e3c8 <__kernel_cos+0x150>)
 800e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2de:	f7f1 fffb 	bl	80002d8 <__aeabi_dsub>
 800e2e2:	4622      	mov	r2, r4
 800e2e4:	462b      	mov	r3, r5
 800e2e6:	f7f2 f9af 	bl	8000648 <__aeabi_dmul>
 800e2ea:	a339      	add	r3, pc, #228	@ (adr r3, 800e3d0 <__kernel_cos+0x158>)
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	f7f1 fff4 	bl	80002dc <__adddf3>
 800e2f4:	4622      	mov	r2, r4
 800e2f6:	462b      	mov	r3, r5
 800e2f8:	f7f2 f9a6 	bl	8000648 <__aeabi_dmul>
 800e2fc:	a336      	add	r3, pc, #216	@ (adr r3, 800e3d8 <__kernel_cos+0x160>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	f7f1 ffe9 	bl	80002d8 <__aeabi_dsub>
 800e306:	4622      	mov	r2, r4
 800e308:	462b      	mov	r3, r5
 800e30a:	f7f2 f99d 	bl	8000648 <__aeabi_dmul>
 800e30e:	a334      	add	r3, pc, #208	@ (adr r3, 800e3e0 <__kernel_cos+0x168>)
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	f7f1 ffe2 	bl	80002dc <__adddf3>
 800e318:	4622      	mov	r2, r4
 800e31a:	462b      	mov	r3, r5
 800e31c:	f7f2 f994 	bl	8000648 <__aeabi_dmul>
 800e320:	4622      	mov	r2, r4
 800e322:	462b      	mov	r3, r5
 800e324:	f7f2 f990 	bl	8000648 <__aeabi_dmul>
 800e328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e32c:	4604      	mov	r4, r0
 800e32e:	460d      	mov	r5, r1
 800e330:	4630      	mov	r0, r6
 800e332:	4639      	mov	r1, r7
 800e334:	f7f2 f988 	bl	8000648 <__aeabi_dmul>
 800e338:	460b      	mov	r3, r1
 800e33a:	4602      	mov	r2, r0
 800e33c:	4629      	mov	r1, r5
 800e33e:	4620      	mov	r0, r4
 800e340:	f7f1 ffca 	bl	80002d8 <__aeabi_dsub>
 800e344:	4b2b      	ldr	r3, [pc, #172]	@ (800e3f4 <__kernel_cos+0x17c>)
 800e346:	4598      	cmp	r8, r3
 800e348:	4606      	mov	r6, r0
 800e34a:	460f      	mov	r7, r1
 800e34c:	d810      	bhi.n	800e370 <__kernel_cos+0xf8>
 800e34e:	4602      	mov	r2, r0
 800e350:	460b      	mov	r3, r1
 800e352:	4650      	mov	r0, sl
 800e354:	4659      	mov	r1, fp
 800e356:	f7f1 ffbf 	bl	80002d8 <__aeabi_dsub>
 800e35a:	460b      	mov	r3, r1
 800e35c:	4926      	ldr	r1, [pc, #152]	@ (800e3f8 <__kernel_cos+0x180>)
 800e35e:	4602      	mov	r2, r0
 800e360:	2000      	movs	r0, #0
 800e362:	f7f1 ffb9 	bl	80002d8 <__aeabi_dsub>
 800e366:	ec41 0b10 	vmov	d0, r0, r1
 800e36a:	b003      	add	sp, #12
 800e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e370:	4b22      	ldr	r3, [pc, #136]	@ (800e3fc <__kernel_cos+0x184>)
 800e372:	4921      	ldr	r1, [pc, #132]	@ (800e3f8 <__kernel_cos+0x180>)
 800e374:	4598      	cmp	r8, r3
 800e376:	bf8c      	ite	hi
 800e378:	4d21      	ldrhi	r5, [pc, #132]	@ (800e400 <__kernel_cos+0x188>)
 800e37a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e37e:	2400      	movs	r4, #0
 800e380:	4622      	mov	r2, r4
 800e382:	462b      	mov	r3, r5
 800e384:	2000      	movs	r0, #0
 800e386:	f7f1 ffa7 	bl	80002d8 <__aeabi_dsub>
 800e38a:	4622      	mov	r2, r4
 800e38c:	4680      	mov	r8, r0
 800e38e:	4689      	mov	r9, r1
 800e390:	462b      	mov	r3, r5
 800e392:	4650      	mov	r0, sl
 800e394:	4659      	mov	r1, fp
 800e396:	f7f1 ff9f 	bl	80002d8 <__aeabi_dsub>
 800e39a:	4632      	mov	r2, r6
 800e39c:	463b      	mov	r3, r7
 800e39e:	f7f1 ff9b 	bl	80002d8 <__aeabi_dsub>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	4640      	mov	r0, r8
 800e3a8:	4649      	mov	r1, r9
 800e3aa:	e7da      	b.n	800e362 <__kernel_cos+0xea>
 800e3ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e3e8 <__kernel_cos+0x170>
 800e3b0:	e7db      	b.n	800e36a <__kernel_cos+0xf2>
 800e3b2:	bf00      	nop
 800e3b4:	f3af 8000 	nop.w
 800e3b8:	be8838d4 	.word	0xbe8838d4
 800e3bc:	bda8fae9 	.word	0xbda8fae9
 800e3c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e3c4:	3e21ee9e 	.word	0x3e21ee9e
 800e3c8:	809c52ad 	.word	0x809c52ad
 800e3cc:	3e927e4f 	.word	0x3e927e4f
 800e3d0:	19cb1590 	.word	0x19cb1590
 800e3d4:	3efa01a0 	.word	0x3efa01a0
 800e3d8:	16c15177 	.word	0x16c15177
 800e3dc:	3f56c16c 	.word	0x3f56c16c
 800e3e0:	5555554c 	.word	0x5555554c
 800e3e4:	3fa55555 	.word	0x3fa55555
 800e3e8:	00000000 	.word	0x00000000
 800e3ec:	3ff00000 	.word	0x3ff00000
 800e3f0:	3fe00000 	.word	0x3fe00000
 800e3f4:	3fd33332 	.word	0x3fd33332
 800e3f8:	3ff00000 	.word	0x3ff00000
 800e3fc:	3fe90000 	.word	0x3fe90000
 800e400:	3fd20000 	.word	0x3fd20000
 800e404:	00000000 	.word	0x00000000

0800e408 <__kernel_sin>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	ec55 4b10 	vmov	r4, r5, d0
 800e410:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e414:	b085      	sub	sp, #20
 800e416:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e41a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e41e:	4680      	mov	r8, r0
 800e420:	d205      	bcs.n	800e42e <__kernel_sin+0x26>
 800e422:	4620      	mov	r0, r4
 800e424:	4629      	mov	r1, r5
 800e426:	f7f2 fba9 	bl	8000b7c <__aeabi_d2iz>
 800e42a:	2800      	cmp	r0, #0
 800e42c:	d052      	beq.n	800e4d4 <__kernel_sin+0xcc>
 800e42e:	4622      	mov	r2, r4
 800e430:	462b      	mov	r3, r5
 800e432:	4620      	mov	r0, r4
 800e434:	4629      	mov	r1, r5
 800e436:	f7f2 f907 	bl	8000648 <__aeabi_dmul>
 800e43a:	4682      	mov	sl, r0
 800e43c:	468b      	mov	fp, r1
 800e43e:	4602      	mov	r2, r0
 800e440:	460b      	mov	r3, r1
 800e442:	4620      	mov	r0, r4
 800e444:	4629      	mov	r1, r5
 800e446:	f7f2 f8ff 	bl	8000648 <__aeabi_dmul>
 800e44a:	a342      	add	r3, pc, #264	@ (adr r3, 800e554 <__kernel_sin+0x14c>)
 800e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e450:	e9cd 0100 	strd	r0, r1, [sp]
 800e454:	4650      	mov	r0, sl
 800e456:	4659      	mov	r1, fp
 800e458:	f7f2 f8f6 	bl	8000648 <__aeabi_dmul>
 800e45c:	a33f      	add	r3, pc, #252	@ (adr r3, 800e55c <__kernel_sin+0x154>)
 800e45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e462:	f7f1 ff39 	bl	80002d8 <__aeabi_dsub>
 800e466:	4652      	mov	r2, sl
 800e468:	465b      	mov	r3, fp
 800e46a:	f7f2 f8ed 	bl	8000648 <__aeabi_dmul>
 800e46e:	a33d      	add	r3, pc, #244	@ (adr r3, 800e564 <__kernel_sin+0x15c>)
 800e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e474:	f7f1 ff32 	bl	80002dc <__adddf3>
 800e478:	4652      	mov	r2, sl
 800e47a:	465b      	mov	r3, fp
 800e47c:	f7f2 f8e4 	bl	8000648 <__aeabi_dmul>
 800e480:	a33a      	add	r3, pc, #232	@ (adr r3, 800e56c <__kernel_sin+0x164>)
 800e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e486:	f7f1 ff27 	bl	80002d8 <__aeabi_dsub>
 800e48a:	4652      	mov	r2, sl
 800e48c:	465b      	mov	r3, fp
 800e48e:	f7f2 f8db 	bl	8000648 <__aeabi_dmul>
 800e492:	a338      	add	r3, pc, #224	@ (adr r3, 800e574 <__kernel_sin+0x16c>)
 800e494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e498:	f7f1 ff20 	bl	80002dc <__adddf3>
 800e49c:	4606      	mov	r6, r0
 800e49e:	460f      	mov	r7, r1
 800e4a0:	f1b8 0f00 	cmp.w	r8, #0
 800e4a4:	d11b      	bne.n	800e4de <__kernel_sin+0xd6>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	4650      	mov	r0, sl
 800e4ac:	4659      	mov	r1, fp
 800e4ae:	f7f2 f8cb 	bl	8000648 <__aeabi_dmul>
 800e4b2:	a325      	add	r3, pc, #148	@ (adr r3, 800e548 <__kernel_sin+0x140>)
 800e4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b8:	f7f1 ff0e 	bl	80002d8 <__aeabi_dsub>
 800e4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4c0:	f7f2 f8c2 	bl	8000648 <__aeabi_dmul>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	f7f1 ff06 	bl	80002dc <__adddf3>
 800e4d0:	4604      	mov	r4, r0
 800e4d2:	460d      	mov	r5, r1
 800e4d4:	ec45 4b10 	vmov	d0, r4, r5
 800e4d8:	b005      	add	sp, #20
 800e4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e550 <__kernel_sin+0x148>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f7f2 f8af 	bl	8000648 <__aeabi_dmul>
 800e4ea:	4632      	mov	r2, r6
 800e4ec:	4680      	mov	r8, r0
 800e4ee:	4689      	mov	r9, r1
 800e4f0:	463b      	mov	r3, r7
 800e4f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4f6:	f7f2 f8a7 	bl	8000648 <__aeabi_dmul>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	4640      	mov	r0, r8
 800e500:	4649      	mov	r1, r9
 800e502:	f7f1 fee9 	bl	80002d8 <__aeabi_dsub>
 800e506:	4652      	mov	r2, sl
 800e508:	465b      	mov	r3, fp
 800e50a:	f7f2 f89d 	bl	8000648 <__aeabi_dmul>
 800e50e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e512:	f7f1 fee1 	bl	80002d8 <__aeabi_dsub>
 800e516:	a30c      	add	r3, pc, #48	@ (adr r3, 800e548 <__kernel_sin+0x140>)
 800e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51c:	4606      	mov	r6, r0
 800e51e:	460f      	mov	r7, r1
 800e520:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e524:	f7f2 f890 	bl	8000648 <__aeabi_dmul>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	4630      	mov	r0, r6
 800e52e:	4639      	mov	r1, r7
 800e530:	f7f1 fed4 	bl	80002dc <__adddf3>
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	4620      	mov	r0, r4
 800e53a:	4629      	mov	r1, r5
 800e53c:	f7f1 fecc 	bl	80002d8 <__aeabi_dsub>
 800e540:	e7c6      	b.n	800e4d0 <__kernel_sin+0xc8>
 800e542:	bf00      	nop
 800e544:	f3af 8000 	nop.w
 800e548:	55555549 	.word	0x55555549
 800e54c:	3fc55555 	.word	0x3fc55555
 800e550:	3fe00000 	.word	0x3fe00000
 800e554:	5acfd57c 	.word	0x5acfd57c
 800e558:	3de5d93a 	.word	0x3de5d93a
 800e55c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e560:	3e5ae5e6 	.word	0x3e5ae5e6
 800e564:	57b1fe7d 	.word	0x57b1fe7d
 800e568:	3ec71de3 	.word	0x3ec71de3
 800e56c:	19c161d5 	.word	0x19c161d5
 800e570:	3f2a01a0 	.word	0x3f2a01a0
 800e574:	1110f8a6 	.word	0x1110f8a6
 800e578:	3f811111 	.word	0x3f811111

0800e57c <fabs>:
 800e57c:	ec51 0b10 	vmov	r0, r1, d0
 800e580:	4602      	mov	r2, r0
 800e582:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e586:	ec43 2b10 	vmov	d0, r2, r3
 800e58a:	4770      	bx	lr
 800e58c:	0000      	movs	r0, r0
	...

0800e590 <scalbn>:
 800e590:	b570      	push	{r4, r5, r6, lr}
 800e592:	ec55 4b10 	vmov	r4, r5, d0
 800e596:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e59a:	4606      	mov	r6, r0
 800e59c:	462b      	mov	r3, r5
 800e59e:	b991      	cbnz	r1, 800e5c6 <scalbn+0x36>
 800e5a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e5a4:	4323      	orrs	r3, r4
 800e5a6:	d03d      	beq.n	800e624 <scalbn+0x94>
 800e5a8:	4b35      	ldr	r3, [pc, #212]	@ (800e680 <scalbn+0xf0>)
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f7f2 f84a 	bl	8000648 <__aeabi_dmul>
 800e5b4:	4b33      	ldr	r3, [pc, #204]	@ (800e684 <scalbn+0xf4>)
 800e5b6:	429e      	cmp	r6, r3
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	460d      	mov	r5, r1
 800e5bc:	da0f      	bge.n	800e5de <scalbn+0x4e>
 800e5be:	a328      	add	r3, pc, #160	@ (adr r3, 800e660 <scalbn+0xd0>)
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	e01e      	b.n	800e604 <scalbn+0x74>
 800e5c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e5ca:	4291      	cmp	r1, r2
 800e5cc:	d10b      	bne.n	800e5e6 <scalbn+0x56>
 800e5ce:	4622      	mov	r2, r4
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	4629      	mov	r1, r5
 800e5d4:	f7f1 fe82 	bl	80002dc <__adddf3>
 800e5d8:	4604      	mov	r4, r0
 800e5da:	460d      	mov	r5, r1
 800e5dc:	e022      	b.n	800e624 <scalbn+0x94>
 800e5de:	460b      	mov	r3, r1
 800e5e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e5e4:	3936      	subs	r1, #54	@ 0x36
 800e5e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e5ea:	4296      	cmp	r6, r2
 800e5ec:	dd0d      	ble.n	800e60a <scalbn+0x7a>
 800e5ee:	2d00      	cmp	r5, #0
 800e5f0:	a11d      	add	r1, pc, #116	@ (adr r1, 800e668 <scalbn+0xd8>)
 800e5f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5f6:	da02      	bge.n	800e5fe <scalbn+0x6e>
 800e5f8:	a11d      	add	r1, pc, #116	@ (adr r1, 800e670 <scalbn+0xe0>)
 800e5fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5fe:	a31a      	add	r3, pc, #104	@ (adr r3, 800e668 <scalbn+0xd8>)
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	f7f2 f820 	bl	8000648 <__aeabi_dmul>
 800e608:	e7e6      	b.n	800e5d8 <scalbn+0x48>
 800e60a:	1872      	adds	r2, r6, r1
 800e60c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e610:	428a      	cmp	r2, r1
 800e612:	dcec      	bgt.n	800e5ee <scalbn+0x5e>
 800e614:	2a00      	cmp	r2, #0
 800e616:	dd08      	ble.n	800e62a <scalbn+0x9a>
 800e618:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e61c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e620:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e624:	ec45 4b10 	vmov	d0, r4, r5
 800e628:	bd70      	pop	{r4, r5, r6, pc}
 800e62a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e62e:	da08      	bge.n	800e642 <scalbn+0xb2>
 800e630:	2d00      	cmp	r5, #0
 800e632:	a10b      	add	r1, pc, #44	@ (adr r1, 800e660 <scalbn+0xd0>)
 800e634:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e638:	dac1      	bge.n	800e5be <scalbn+0x2e>
 800e63a:	a10f      	add	r1, pc, #60	@ (adr r1, 800e678 <scalbn+0xe8>)
 800e63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e640:	e7bd      	b.n	800e5be <scalbn+0x2e>
 800e642:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e646:	3236      	adds	r2, #54	@ 0x36
 800e648:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e64c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e650:	4620      	mov	r0, r4
 800e652:	4b0d      	ldr	r3, [pc, #52]	@ (800e688 <scalbn+0xf8>)
 800e654:	4629      	mov	r1, r5
 800e656:	2200      	movs	r2, #0
 800e658:	e7d4      	b.n	800e604 <scalbn+0x74>
 800e65a:	bf00      	nop
 800e65c:	f3af 8000 	nop.w
 800e660:	c2f8f359 	.word	0xc2f8f359
 800e664:	01a56e1f 	.word	0x01a56e1f
 800e668:	8800759c 	.word	0x8800759c
 800e66c:	7e37e43c 	.word	0x7e37e43c
 800e670:	8800759c 	.word	0x8800759c
 800e674:	fe37e43c 	.word	0xfe37e43c
 800e678:	c2f8f359 	.word	0xc2f8f359
 800e67c:	81a56e1f 	.word	0x81a56e1f
 800e680:	43500000 	.word	0x43500000
 800e684:	ffff3cb0 	.word	0xffff3cb0
 800e688:	3c900000 	.word	0x3c900000
 800e68c:	00000000 	.word	0x00000000

0800e690 <floor>:
 800e690:	ec51 0b10 	vmov	r0, r1, d0
 800e694:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e6a0:	2e13      	cmp	r6, #19
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	4680      	mov	r8, r0
 800e6a8:	dc34      	bgt.n	800e714 <floor+0x84>
 800e6aa:	2e00      	cmp	r6, #0
 800e6ac:	da17      	bge.n	800e6de <floor+0x4e>
 800e6ae:	a332      	add	r3, pc, #200	@ (adr r3, 800e778 <floor+0xe8>)
 800e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b4:	f7f1 fe12 	bl	80002dc <__adddf3>
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f7f2 fa54 	bl	8000b68 <__aeabi_dcmpgt>
 800e6c0:	b150      	cbz	r0, 800e6d8 <floor+0x48>
 800e6c2:	2c00      	cmp	r4, #0
 800e6c4:	da55      	bge.n	800e772 <floor+0xe2>
 800e6c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e6ca:	432c      	orrs	r4, r5
 800e6cc:	2500      	movs	r5, #0
 800e6ce:	42ac      	cmp	r4, r5
 800e6d0:	4c2b      	ldr	r4, [pc, #172]	@ (800e780 <floor+0xf0>)
 800e6d2:	bf08      	it	eq
 800e6d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e6d8:	4621      	mov	r1, r4
 800e6da:	4628      	mov	r0, r5
 800e6dc:	e023      	b.n	800e726 <floor+0x96>
 800e6de:	4f29      	ldr	r7, [pc, #164]	@ (800e784 <floor+0xf4>)
 800e6e0:	4137      	asrs	r7, r6
 800e6e2:	ea01 0307 	and.w	r3, r1, r7
 800e6e6:	4303      	orrs	r3, r0
 800e6e8:	d01d      	beq.n	800e726 <floor+0x96>
 800e6ea:	a323      	add	r3, pc, #140	@ (adr r3, 800e778 <floor+0xe8>)
 800e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f0:	f7f1 fdf4 	bl	80002dc <__adddf3>
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	f7f2 fa36 	bl	8000b68 <__aeabi_dcmpgt>
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	d0eb      	beq.n	800e6d8 <floor+0x48>
 800e700:	2c00      	cmp	r4, #0
 800e702:	bfbe      	ittt	lt
 800e704:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e708:	4133      	asrlt	r3, r6
 800e70a:	18e4      	addlt	r4, r4, r3
 800e70c:	ea24 0407 	bic.w	r4, r4, r7
 800e710:	2500      	movs	r5, #0
 800e712:	e7e1      	b.n	800e6d8 <floor+0x48>
 800e714:	2e33      	cmp	r6, #51	@ 0x33
 800e716:	dd0a      	ble.n	800e72e <floor+0x9e>
 800e718:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e71c:	d103      	bne.n	800e726 <floor+0x96>
 800e71e:	4602      	mov	r2, r0
 800e720:	460b      	mov	r3, r1
 800e722:	f7f1 fddb 	bl	80002dc <__adddf3>
 800e726:	ec41 0b10 	vmov	d0, r0, r1
 800e72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e732:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e736:	40df      	lsrs	r7, r3
 800e738:	4207      	tst	r7, r0
 800e73a:	d0f4      	beq.n	800e726 <floor+0x96>
 800e73c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e778 <floor+0xe8>)
 800e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e742:	f7f1 fdcb 	bl	80002dc <__adddf3>
 800e746:	2200      	movs	r2, #0
 800e748:	2300      	movs	r3, #0
 800e74a:	f7f2 fa0d 	bl	8000b68 <__aeabi_dcmpgt>
 800e74e:	2800      	cmp	r0, #0
 800e750:	d0c2      	beq.n	800e6d8 <floor+0x48>
 800e752:	2c00      	cmp	r4, #0
 800e754:	da0a      	bge.n	800e76c <floor+0xdc>
 800e756:	2e14      	cmp	r6, #20
 800e758:	d101      	bne.n	800e75e <floor+0xce>
 800e75a:	3401      	adds	r4, #1
 800e75c:	e006      	b.n	800e76c <floor+0xdc>
 800e75e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e762:	2301      	movs	r3, #1
 800e764:	40b3      	lsls	r3, r6
 800e766:	441d      	add	r5, r3
 800e768:	4545      	cmp	r5, r8
 800e76a:	d3f6      	bcc.n	800e75a <floor+0xca>
 800e76c:	ea25 0507 	bic.w	r5, r5, r7
 800e770:	e7b2      	b.n	800e6d8 <floor+0x48>
 800e772:	2500      	movs	r5, #0
 800e774:	462c      	mov	r4, r5
 800e776:	e7af      	b.n	800e6d8 <floor+0x48>
 800e778:	8800759c 	.word	0x8800759c
 800e77c:	7e37e43c 	.word	0x7e37e43c
 800e780:	bff00000 	.word	0xbff00000
 800e784:	000fffff 	.word	0x000fffff

0800e788 <_init>:
 800e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78a:	bf00      	nop
 800e78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e78e:	bc08      	pop	{r3}
 800e790:	469e      	mov	lr, r3
 800e792:	4770      	bx	lr

0800e794 <_fini>:
 800e794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e796:	bf00      	nop
 800e798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e79a:	bc08      	pop	{r3}
 800e79c:	469e      	mov	lr, r3
 800e79e:	4770      	bx	lr
