
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d10  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08005ecc  08005ecc  00006ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006460  08006460  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006460  08006460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006468  08006468  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006468  08006468  00007468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800646c  0800646c  0000746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006470  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000010  08006480  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08006480  00008744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146a5  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6f  00000000  00000000  0001c6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001f158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5e  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003eef  00000000  00000000  00020fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f9a  00000000  00000000  00024ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a3c  00000000  00000000  0003ae6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e8ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a0  00000000  00000000  0013e8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00143090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005eb4 	.word	0x08005eb4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08005eb4 	.word	0x08005eb4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <pillsinit>:
#include "Pills.h"

static pillEntry pillList [50];

void pillsinit(){
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	numPills = 0;
 80004f0:	4b03      	ldr	r3, [pc, #12]	@ (8000500 <pillsinit+0x14>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	2000002c 	.word	0x2000002c

08000504 <addNewEntry>:
void addNewEntry(uint8_t dispenserNum, char * name, uint8_t dayofWeek, uint8_t hour, uint8_t min){
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b087      	sub	sp, #28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6039      	str	r1, [r7, #0]
 800050c:	4611      	mov	r1, r2
 800050e:	461a      	mov	r2, r3
 8000510:	4603      	mov	r3, r0
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	460b      	mov	r3, r1
 8000516:	71bb      	strb	r3, [r7, #6]
 8000518:	4613      	mov	r3, r2
 800051a:	717b      	strb	r3, [r7, #5]
	//uint8_t ID; uint8_t dispenserNum; char * name; uint8_t dayofWeek; uint8_t hour; uint8_t min; uint8_t taken;
	pillEntry wew = {numPills, dispenserNum, name, dayofWeek, hour, min, 1};
 800051c:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <addNewEntry+0x70>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	733b      	strb	r3, [r7, #12]
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	737b      	strb	r3, [r7, #13]
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	753b      	strb	r3, [r7, #20]
 800052e:	797b      	ldrb	r3, [r7, #5]
 8000530:	757b      	strb	r3, [r7, #21]
 8000532:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000536:	75bb      	strb	r3, [r7, #22]
 8000538:	2301      	movs	r3, #1
 800053a:	75fb      	strb	r3, [r7, #23]
	pillList[numPills + 1] = wew;
 800053c:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <addNewEntry+0x70>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	490d      	ldr	r1, [pc, #52]	@ (8000578 <addNewEntry+0x74>)
 8000544:	4613      	mov	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4413      	add	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	440b      	add	r3, r1
 800054e:	461c      	mov	r4, r3
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	numPills++;
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <addNewEntry+0x70>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b03      	ldr	r3, [pc, #12]	@ (8000574 <addNewEntry+0x70>)
 8000566:	701a      	strb	r2, [r3, #0]
	sortEntries();
 8000568:	f000 f808 	bl	800057c <sortEntries>
}
 800056c:	bf00      	nop
 800056e:	371c      	adds	r7, #28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd90      	pop	{r4, r7, pc}
 8000574:	2000002c 	.word	0x2000002c
 8000578:	20000030 	.word	0x20000030

0800057c <sortEntries>:

void sortEntries(){
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
	uint8_t i = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	73bb      	strb	r3, [r7, #14]
	uint8_t minimum_idx = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	737b      	strb	r3, [r7, #13]

	//WOOOO SELECTION SORT MY BELOVED!!!!
	for (i = 0; i < numPills; i++){
 800058e:	2300      	movs	r3, #0
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e060      	b.n	8000656 <sortEntries+0xda>
		for (j = i; j < numPills; j++){
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	73bb      	strb	r3, [r7, #14]
 8000598:	e01f      	b.n	80005da <sortEntries+0x5e>
			if (compPillEntry(pillList[minimum_idx], pillList[j])){
 800059a:	7b7a      	ldrb	r2, [r7, #13]
 800059c:	7bb9      	ldrb	r1, [r7, #14]
 800059e:	4833      	ldr	r0, [pc, #204]	@ (800066c <sortEntries+0xf0>)
 80005a0:	460b      	mov	r3, r1
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	440b      	add	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	18c4      	adds	r4, r0, r3
 80005aa:	4930      	ldr	r1, [pc, #192]	@ (800066c <sortEntries+0xf0>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	18ca      	adds	r2, r1, r3
 80005b6:	466d      	mov	r5, sp
 80005b8:	1d23      	adds	r3, r4, #4
 80005ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005be:	e885 0003 	stmia.w	r5, {r0, r1}
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80005c6:	f000 f855 	bl	8000674 <compPillEntry>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <sortEntries+0x58>
				minimum_idx = j;
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	737b      	strb	r3, [r7, #13]
		for (j = i; j < numPills; j++){
 80005d4:	7bbb      	ldrb	r3, [r7, #14]
 80005d6:	3301      	adds	r3, #1
 80005d8:	73bb      	strb	r3, [r7, #14]
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <sortEntries+0xf4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	7bba      	ldrb	r2, [r7, #14]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d3da      	bcc.n	800059a <sortEntries+0x1e>
			}
		}
		pillEntry temp = pillList[i];
 80005e4:	7bfa      	ldrb	r2, [r7, #15]
 80005e6:	4921      	ldr	r1, [pc, #132]	@ (800066c <sortEntries+0xf0>)
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	18ca      	adds	r2, r1, r3
 80005f2:	463b      	mov	r3, r7
 80005f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		pillList[i] = pillList[minimum_idx];
 80005fa:	7b7a      	ldrb	r2, [r7, #13]
 80005fc:	7bf9      	ldrb	r1, [r7, #15]
 80005fe:	481b      	ldr	r0, [pc, #108]	@ (800066c <sortEntries+0xf0>)
 8000600:	460b      	mov	r3, r1
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	440b      	add	r3, r1
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4418      	add	r0, r3
 800060a:	4918      	ldr	r1, [pc, #96]	@ (800066c <sortEntries+0xf0>)
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	18ca      	adds	r2, r1, r3
 8000616:	4603      	mov	r3, r0
 8000618:	ca07      	ldmia	r2, {r0, r1, r2}
 800061a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		pillList[minimum_idx] = temp;
 800061e:	7b7a      	ldrb	r2, [r7, #13]
 8000620:	4912      	ldr	r1, [pc, #72]	@ (800066c <sortEntries+0xf0>)
 8000622:	4613      	mov	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	4413      	add	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	440b      	add	r3, r1
 800062c:	461c      	mov	r4, r3
 800062e:	463b      	mov	r3, r7
 8000630:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		pillList[i].ID = i;
 8000638:	7bfa      	ldrb	r2, [r7, #15]
 800063a:	490c      	ldr	r1, [pc, #48]	@ (800066c <sortEntries+0xf0>)
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	7bfa      	ldrb	r2, [r7, #15]
 8000648:	701a      	strb	r2, [r3, #0]
		minimum_idx = i + 1;
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3301      	adds	r3, #1
 800064e:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < numPills; i++){
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	3301      	adds	r3, #1
 8000654:	73fb      	strb	r3, [r7, #15]
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <sortEntries+0xf4>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	7bfa      	ldrb	r2, [r7, #15]
 800065c:	429a      	cmp	r2, r3
 800065e:	d399      	bcc.n	8000594 <sortEntries+0x18>
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bdb0      	pop	{r4, r5, r7, pc}
 800066a:	bf00      	nop
 800066c:	20000030 	.word	0x20000030
 8000670:	2000002c 	.word	0x2000002c

08000674 <compPillEntry>:

//returns 1 if lhs is less than rhs
uint8_t compPillEntry(pillEntry lhs, pillEntry rhs){
 8000674:	b082      	sub	sp, #8
 8000676:	b490      	push	{r4, r7}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	1d3c      	adds	r4, r7, #4
 800067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000682:	61fb      	str	r3, [r7, #28]
	return lhs.dayofWeek < rhs.dayofWeek || lhs.hour < rhs.hour || lhs.min < rhs.min;
 8000684:	7b3a      	ldrb	r2, [r7, #12]
 8000686:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800068a:	429a      	cmp	r2, r3
 800068c:	d309      	bcc.n	80006a2 <compPillEntry+0x2e>
 800068e:	7b7a      	ldrb	r2, [r7, #13]
 8000690:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000694:	429a      	cmp	r2, r3
 8000696:	d304      	bcc.n	80006a2 <compPillEntry+0x2e>
 8000698:	7bba      	ldrb	r2, [r7, #14]
 800069a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800069e:	429a      	cmp	r2, r3
 80006a0:	d201      	bcs.n	80006a6 <compPillEntry+0x32>
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <compPillEntry+0x34>
 80006a6:	2300      	movs	r3, #0
 80006a8:	b2db      	uxtb	r3, r3
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc90      	pop	{r4, r7}
 80006b2:	b002      	add	sp, #8
 80006b4:	4770      	bx	lr
	...

080006b8 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <DS1307_Init+0x1c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f806 	bl	80006d8 <DS1307_SetClockHalt>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000288 	.word	0x20000288

080006d8 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <DS1307_SetClockHalt+0x14>
 80006e8:	2380      	movs	r3, #128	@ 0x80
 80006ea:	e000      	b.n	80006ee <DS1307_SetClockHalt+0x16>
 80006ec:	2300      	movs	r3, #0
 80006ee:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 f83d 	bl	8000770 <DS1307_GetRegByte>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006fe:	b25a      	sxtb	r2, r3
 8000700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000704:	4313      	orrs	r3, r2
 8000706:	b25b      	sxtb	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f811 	bl	8000734 <DS1307_SetRegByte>
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f826 	bl	8000770 <DS1307_GetRegByte>
 8000724:	4603      	mov	r3, r0
 8000726:	11db      	asrs	r3, r3, #7
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
}
 8000730:	4618      	mov	r0, r3
 8000732:	bd80      	pop	{r7, pc}

08000734 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af02      	add	r7, sp, #8
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	733b      	strb	r3, [r7, #12]
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <DS1307_SetRegByte+0x38>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	f107 020c 	add.w	r2, r7, #12
 8000754:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2302      	movs	r3, #2
 800075c:	21d0      	movs	r1, #208	@ 0xd0
 800075e:	f001 ffad 	bl	80026bc <HAL_I2C_Master_Transmit>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000288 	.word	0x20000288

08000770 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af02      	add	r7, sp, #8
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <DS1307_GetRegByte+0x40>)
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	1dfa      	adds	r2, r7, #7
 8000780:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	21d0      	movs	r1, #208	@ 0xd0
 800078a:	f001 ff97 	bl	80026bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <DS1307_GetRegByte+0x40>)
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	f107 020f 	add.w	r2, r7, #15
 8000796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	21d0      	movs	r1, #208	@ 0xd0
 80007a0:	f002 f8a4 	bl	80028ec <HAL_I2C_Master_Receive>
	return val;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000288 	.word	0x20000288

080007b4 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f897 	bl	80008f4 <DS1307_EncodeBCD>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4619      	mov	r1, r3
 80007ca:	2003      	movs	r0, #3
 80007cc:	f7ff ffb2 	bl	8000734 <DS1307_SetRegByte>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f885 	bl	80008f4 <DS1307_EncodeBCD>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4619      	mov	r1, r3
 80007ee:	2004      	movs	r0, #4
 80007f0:	f7ff ffa0 	bl	8000734 <DS1307_SetRegByte>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f873 	bl	80008f4 <DS1307_EncodeBCD>
 800080e:	4603      	mov	r3, r0
 8000810:	4619      	mov	r1, r3
 8000812:	2005      	movs	r0, #5
 8000814:	f7ff ff8e 	bl	8000734 <DS1307_SetRegByte>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <DS1307_SetYear+0x50>)
 800082e:	fba2 2303 	umull	r2, r3, r2, r3
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4619      	mov	r1, r3
 800083a:	2010      	movs	r0, #16
 800083c:	f7ff ff7a 	bl	8000734 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	4a0b      	ldr	r2, [pc, #44]	@ (8000870 <DS1307_SetYear+0x50>)
 8000844:	fba2 1203 	umull	r1, r2, r2, r3
 8000848:	0952      	lsrs	r2, r2, #5
 800084a:	2164      	movs	r1, #100	@ 0x64
 800084c:	fb01 f202 	mul.w	r2, r1, r2
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	b29b      	uxth	r3, r3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f84c 	bl	80008f4 <DS1307_EncodeBCD>
 800085c:	4603      	mov	r3, r0
 800085e:	4619      	mov	r1, r3
 8000860:	2006      	movs	r0, #6
 8000862:	f7ff ff67 	bl	8000734 <DS1307_SetRegByte>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	51eb851f 	.word	0x51eb851f

08000874 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f834 	bl	80008f4 <DS1307_EncodeBCD>
 800088c:	4603      	mov	r3, r0
 800088e:	4619      	mov	r1, r3
 8000890:	2002      	movs	r0, #2
 8000892:	f7ff ff4f 	bl	8000734 <DS1307_SetRegByte>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f822 	bl	80008f4 <DS1307_EncodeBCD>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4619      	mov	r1, r3
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff ff3d 	bl	8000734 <DS1307_SetRegByte>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b084      	sub	sp, #16
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 80008cc:	f7ff ff25 	bl	800071a <DS1307_GetClockHalt>
 80008d0:	4603      	mov	r3, r0
 80008d2:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	4313      	orrs	r3, r2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f809 	bl	80008f4 <DS1307_EncodeBCD>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4619      	mov	r1, r3
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff ff24 	bl	8000734 <DS1307_SetRegByte>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <DS1307_EncodeBCD+0x40>)
 8000902:	fba3 1302 	umull	r1, r3, r3, r2
 8000906:	08d9      	lsrs	r1, r3, #3
 8000908:	460b      	mov	r3, r1
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	440b      	add	r3, r1
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b2da      	uxtb	r2, r3
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	4907      	ldr	r1, [pc, #28]	@ (8000934 <DS1307_EncodeBCD+0x40>)
 8000918:	fba1 1303 	umull	r1, r3, r1, r3
 800091c:	08db      	lsrs	r3, r3, #3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4413      	add	r3, r2
 8000926:	b2db      	uxtb	r3, r3
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	cccccccd 	.word	0xcccccccd

08000938 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	@ 0x40
 800094a:	480c      	ldr	r0, [pc, #48]	@ (800097c <ILI9488_SendCommand+0x44>)
 800094c:	f001 fe02 	bl	8002554 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000950:	2200      	movs	r2, #0
 8000952:	2101      	movs	r1, #1
 8000954:	4809      	ldr	r0, [pc, #36]	@ (800097c <ILI9488_SendCommand+0x44>)
 8000956:	f001 fdfd 	bl	8002554 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800095a:	f107 010f 	add.w	r1, r7, #15
 800095e:	2301      	movs	r3, #1
 8000960:	2201      	movs	r2, #1
 8000962:	4807      	ldr	r0, [pc, #28]	@ (8000980 <ILI9488_SendCommand+0x48>)
 8000964:	f004 f939 	bl	8004bda <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000968:	2201      	movs	r2, #1
 800096a:	2101      	movs	r1, #1
 800096c:	4803      	ldr	r0, [pc, #12]	@ (800097c <ILI9488_SendCommand+0x44>)
 800096e:	f001 fdf1 	bl	8002554 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	48000c00 	.word	0x48000c00
 8000980:	200002f8 	.word	0x200002f8

08000984 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 8000992:	2201      	movs	r2, #1
 8000994:	2140      	movs	r1, #64	@ 0x40
 8000996:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <ILI9488_SendData+0x44>)
 8000998:	f001 fddc 	bl	8002554 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 800099c:	2200      	movs	r2, #0
 800099e:	2101      	movs	r1, #1
 80009a0:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <ILI9488_SendData+0x44>)
 80009a2:	f001 fdd7 	bl	8002554 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 80009a6:	f107 010f 	add.w	r1, r7, #15
 80009aa:	2301      	movs	r3, #1
 80009ac:	2201      	movs	r2, #1
 80009ae:	4807      	ldr	r0, [pc, #28]	@ (80009cc <ILI9488_SendData+0x48>)
 80009b0:	f004 f913 	bl	8004bda <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 80009b4:	2201      	movs	r2, #1
 80009b6:	2101      	movs	r1, #1
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <ILI9488_SendData+0x44>)
 80009ba:	f001 fdcb 	bl	8002554 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	48000c00 	.word	0x48000c00
 80009cc:	200002f8 	.word	0x200002f8

080009d0 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80009da:	2201      	movs	r2, #1
 80009dc:	2140      	movs	r1, #64	@ 0x40
 80009de:	4815      	ldr	r0, [pc, #84]	@ (8000a34 <ILI9488_SendData_Multi+0x64>)
 80009e0:	f001 fdb8 	bl	8002554 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 80009e4:	2200      	movs	r2, #0
 80009e6:	2101      	movs	r1, #1
 80009e8:	4812      	ldr	r0, [pc, #72]	@ (8000a34 <ILI9488_SendData_Multi+0x64>)
 80009ea:	f001 fdb3 	bl	8002554 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 80009ee:	e015      	b.n	8000a1c <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80009f6:	bf28      	it	cs
 80009f8:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80009fc:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80009fe:	89fa      	ldrh	r2, [r7, #14]
 8000a00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <ILI9488_SendData_Multi+0x68>)
 8000a08:	f004 f8e7 	bl	8004bda <HAL_SPI_Transmit>
		buff += chunk_size;
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1e6      	bne.n	80009f0 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 8000a22:	2201      	movs	r2, #1
 8000a24:	2101      	movs	r1, #1
 8000a26:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <ILI9488_SendData_Multi+0x64>)
 8000a28:	f001 fd94 	bl	8002554 <HAL_GPIO_WritePin>
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	48000c00 	.word	0x48000c00
 8000a38:	200002f8 	.word	0x200002f8

08000a3c <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 8000a40:	2201      	movs	r2, #1
 8000a42:	2101      	movs	r1, #1
 8000a44:	486c      	ldr	r0, [pc, #432]	@ (8000bf8 <ILI9488_Init+0x1bc>)
 8000a46:	f001 fd85 	bl	8002554 <HAL_GPIO_WritePin>
	RST_A();
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2180      	movs	r1, #128	@ 0x80
 8000a4e:	486a      	ldr	r0, [pc, #424]	@ (8000bf8 <ILI9488_Init+0x1bc>)
 8000a50:	f001 fd80 	bl	8002554 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f001 fae1 	bl	800201c <HAL_Delay>
		 RST_D();
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2180      	movs	r1, #128	@ 0x80
 8000a5e:	4866      	ldr	r0, [pc, #408]	@ (8000bf8 <ILI9488_Init+0x1bc>)
 8000a60:	f001 fd78 	bl	8002554 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 8000a64:	4b65      	ldr	r3, [pc, #404]	@ (8000bfc <ILI9488_Init+0x1c0>)
 8000a66:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a6a:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 8000a6c:	4b64      	ldr	r3, [pc, #400]	@ (8000c00 <ILI9488_Init+0x1c4>)
 8000a6e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a72:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 8000a74:	20e0      	movs	r0, #224	@ 0xe0
 8000a76:	f7ff ff5f 	bl	8000938 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ff82 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f7ff ff7f 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000a86:	2009      	movs	r0, #9
 8000a88:	f7ff ff7c 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000a8c:	2008      	movs	r0, #8
 8000a8e:	f7ff ff79 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000a92:	2016      	movs	r0, #22
 8000a94:	f7ff ff76 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f7ff ff73 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 8000a9e:	203f      	movs	r0, #63	@ 0x3f
 8000aa0:	f7ff ff70 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8000aa4:	2078      	movs	r0, #120	@ 0x78
 8000aa6:	f7ff ff6d 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 8000aaa:	204c      	movs	r0, #76	@ 0x4c
 8000aac:	f7ff ff6a 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000ab0:	2009      	movs	r0, #9
 8000ab2:	f7ff ff67 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f7ff ff64 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000abc:	2008      	movs	r0, #8
 8000abe:	f7ff ff61 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000ac2:	2016      	movs	r0, #22
 8000ac4:	f7ff ff5e 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8000ac8:	201a      	movs	r0, #26
 8000aca:	f7ff ff5b 	bl	8000984 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f7ff ff58 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 8000ad4:	20e1      	movs	r0, #225	@ 0xe1
 8000ad6:	f7ff ff2f 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff ff52 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 8000ae0:	2016      	movs	r0, #22
 8000ae2:	f7ff ff4f 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 8000ae6:	2019      	movs	r0, #25
 8000ae8:	f7ff ff4c 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f7ff ff49 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f7ff ff46 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 8000af8:	2005      	movs	r0, #5
 8000afa:	f7ff ff43 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 8000afe:	2032      	movs	r0, #50	@ 0x32
 8000b00:	f7ff ff40 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 8000b04:	2045      	movs	r0, #69	@ 0x45
 8000b06:	f7ff ff3d 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 8000b0a:	2046      	movs	r0, #70	@ 0x46
 8000b0c:	f7ff ff3a 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 8000b10:	2004      	movs	r0, #4
 8000b12:	f7ff ff37 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 8000b16:	200e      	movs	r0, #14
 8000b18:	f7ff ff34 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 8000b1c:	200d      	movs	r0, #13
 8000b1e:	f7ff ff31 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 8000b22:	2035      	movs	r0, #53	@ 0x35
 8000b24:	f7ff ff2e 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 8000b28:	2037      	movs	r0, #55	@ 0x37
 8000b2a:	f7ff ff2b 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f7ff ff28 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 8000b34:	20c0      	movs	r0, #192	@ 0xc0
 8000b36:	f7ff feff 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 8000b3a:	2017      	movs	r0, #23
 8000b3c:	f7ff ff22 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 8000b40:	2015      	movs	r0, #21
 8000b42:	f7ff ff1f 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 8000b46:	20c1      	movs	r0, #193	@ 0xc1
 8000b48:	f7ff fef6 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 8000b4c:	2041      	movs	r0, #65	@ 0x41
 8000b4e:	f7ff ff19 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 8000b52:	20c5      	movs	r0, #197	@ 0xc5
 8000b54:	f7ff fef0 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ff13 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 8000b5e:	2012      	movs	r0, #18
 8000b60:	f7ff ff10 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 8000b64:	2080      	movs	r0, #128	@ 0x80
 8000b66:	f7ff ff0d 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 8000b6a:	2036      	movs	r0, #54	@ 0x36
 8000b6c:	f7ff fee4 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 8000b70:	2048      	movs	r0, #72	@ 0x48
 8000b72:	f7ff ff07 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 8000b76:	203a      	movs	r0, #58	@ 0x3a
 8000b78:	f7ff fede 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 8000b7c:	2066      	movs	r0, #102	@ 0x66
 8000b7e:	f7ff ff01 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 8000b82:	20b0      	movs	r0, #176	@ 0xb0
 8000b84:	f7ff fed8 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8000b88:	2080      	movs	r0, #128	@ 0x80
 8000b8a:	f7ff fefb 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 8000b8e:	20b1      	movs	r0, #177	@ 0xb1
 8000b90:	f7ff fed2 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 8000b94:	20a0      	movs	r0, #160	@ 0xa0
 8000b96:	f7ff fef5 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 8000b9a:	20b4      	movs	r0, #180	@ 0xb4
 8000b9c:	f7ff fecc 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff feef 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8000ba6:	20b6      	movs	r0, #182	@ 0xb6
 8000ba8:	f7ff fec6 	bl	8000938 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000bac:	2002      	movs	r0, #2
 8000bae:	f7ff fee9 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff fee6 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8000bb8:	20e9      	movs	r0, #233	@ 0xe9
 8000bba:	f7ff febd 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fee0 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 8000bc4:	20f7      	movs	r0, #247	@ 0xf7
 8000bc6:	f7ff feb7 	bl	8000938 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 8000bca:	20a9      	movs	r0, #169	@ 0xa9
 8000bcc:	f7ff feda 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 8000bd0:	2051      	movs	r0, #81	@ 0x51
 8000bd2:	f7ff fed7 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 8000bd6:	202c      	movs	r0, #44	@ 0x2c
 8000bd8:	f7ff fed4 	bl	8000984 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 8000bdc:	2082      	movs	r0, #130	@ 0x82
 8000bde:	f7ff fed1 	bl	8000984 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 8000be2:	2011      	movs	r0, #17
 8000be4:	f7ff fea8 	bl	8000938 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 8000be8:	2078      	movs	r0, #120	@ 0x78
 8000bea:	f001 fa17 	bl	800201c <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 8000bee:	2029      	movs	r0, #41	@ 0x29
 8000bf0:	f7ff fea2 	bl	8000938 <ILI9488_SendCommand>

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	48000c00 	.word	0x48000c00
 8000bfc:	2000029e 	.word	0x2000029e
 8000c00:	200002a0 	.word	0x200002a0

08000c04 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	4603      	mov	r3, r0
 8000c18:	80bb      	strh	r3, [r7, #4]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	807b      	strh	r3, [r7, #2]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 8000c22:	202a      	movs	r0, #42	@ 0x2a
 8000c24:	f7ff fe88 	bl	8000938 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	733b      	strb	r3, [r7, #12]
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	737b      	strb	r3, [r7, #13]
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	73bb      	strb	r3, [r7, #14]
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff febe 	bl	80009d0 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8000c54:	202b      	movs	r0, #43	@ 0x2b
 8000c56:	f7ff fe6f 	bl	8000938 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 8000c5a:	88bb      	ldrh	r3, [r7, #4]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	723b      	strb	r3, [r7, #8]
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	727b      	strb	r3, [r7, #9]
 8000c6a:	883b      	ldrh	r3, [r7, #0]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	72bb      	strb	r3, [r7, #10]
 8000c74:	883b      	ldrh	r3, [r7, #0]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2104      	movs	r1, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fea5 	bl	80009d0 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 8000c86:	202c      	movs	r0, #44	@ 0x2c
 8000c88:	f7ff fe56 	bl	8000938 <ILI9488_SendCommand>
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8000ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db36      	blt.n	8000d1c <drawPixel+0x88>
 8000cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <drawPixel+0x90>)
 8000cb4:	8812      	ldrh	r2, [r2, #0]
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	da30      	bge.n	8000d1c <drawPixel+0x88>
 8000cba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db2c      	blt.n	8000d1c <drawPixel+0x88>
 8000cc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cc6:	4a18      	ldr	r2, [pc, #96]	@ (8000d28 <drawPixel+0x94>)
 8000cc8:	8812      	ldrh	r2, [r2, #0]
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	da26      	bge.n	8000d1c <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 8000cce:	88f8      	ldrh	r0, [r7, #6]
 8000cd0:	88b9      	ldrh	r1, [r7, #4]
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	f7ff ff91 	bl	8000c04 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <drawPixel+0x98>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <drawPixel+0x9c>)
 8000ce8:	8811      	ldrh	r1, [r2, #0]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 fc31 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <drawPixel+0xa0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <drawPixel+0xa4>)
 8000cf8:	8811      	ldrh	r1, [r2, #0]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fc29 	bl	8002554 <HAL_GPIO_WritePin>

	write16BitColor(color);
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fb79 	bl	80013fc <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <drawPixel+0xa0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <drawPixel+0xa4>)
 8000d10:	8811      	ldrh	r1, [r2, #0]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fc1d 	bl	8002554 <HAL_GPIO_WritePin>
 8000d1a:	e000      	b.n	8000d1e <drawPixel+0x8a>
		return;
 8000d1c:	bf00      	nop

}
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000029e 	.word	0x2000029e
 8000d28:	200002a0 	.word	0x200002a0
 8000d2c:	20000298 	.word	0x20000298
 8000d30:	2000029c 	.word	0x2000029c
 8000d34:	20000290 	.word	0x20000290
 8000d38:	20000294 	.word	0x20000294

08000d3c <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <fillScreen+0x2c>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <fillScreen+0x30>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	b219      	sxth	r1, r3
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	460b      	mov	r3, r1
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f808 	bl	8000d70 <fillRect>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000029e 	.word	0x2000029e
 8000d6c:	200002a0 	.word	0x200002a0

08000d70 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	b08a      	sub	sp, #40	@ 0x28
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4633      	mov	r3, r6
 8000d82:	80fb      	strh	r3, [r7, #6]
 8000d84:	4603      	mov	r3, r0
 8000d86:	80bb      	strh	r3, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	803b      	strh	r3, [r7, #0]
 8000d90:	466b      	mov	r3, sp
 8000d92:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d98:	4a8f      	ldr	r2, [pc, #572]	@ (8000fd8 <fillRect+0x268>)
 8000d9a:	8812      	ldrh	r2, [r2, #0]
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	da05      	bge.n	8000dac <fillRect+0x3c>
 8000da0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000da4:	4a8d      	ldr	r2, [pc, #564]	@ (8000fdc <fillRect+0x26c>)
 8000da6:	8812      	ldrh	r2, [r2, #0]
 8000da8:	4293      	cmp	r3, r2
 8000daa:	db01      	blt.n	8000db0 <fillRect+0x40>
		return;
 8000dac:	46d5      	mov	sp, sl
 8000dae:	e10f      	b.n	8000fd0 <fillRect+0x260>
	if ((x + w - 1) >= width)
 8000db0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000db4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a87      	ldr	r2, [pc, #540]	@ (8000fd8 <fillRect+0x268>)
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	dd05      	ble.n	8000dce <fillRect+0x5e>
		w = width - x;
 8000dc2:	4b85      	ldr	r3, [pc, #532]	@ (8000fd8 <fillRect+0x268>)
 8000dc4:	881a      	ldrh	r2, [r3, #0]
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 8000dce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000dd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a80      	ldr	r2, [pc, #512]	@ (8000fdc <fillRect+0x26c>)
 8000dda:	8812      	ldrh	r2, [r2, #0]
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	dd05      	ble.n	8000dec <fillRect+0x7c>
		h = height - y;
 8000de0:	4b7e      	ldr	r3, [pc, #504]	@ (8000fdc <fillRect+0x26c>)
 8000de2:	881a      	ldrh	r2, [r3, #0]
 8000de4:	88bb      	ldrh	r3, [r7, #4]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000dec:	88f8      	ldrh	r0, [r7, #6]
 8000dee:	88b9      	ldrh	r1, [r7, #4]
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	4413      	add	r3, r2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	b29e      	uxth	r6, r3
 8000dfc:	88ba      	ldrh	r2, [r7, #4]
 8000dfe:	883b      	ldrh	r3, [r7, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4632      	mov	r2, r6
 8000e0a:	f7ff fefb 	bl	8000c04 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 8000e0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000e12:	0adb      	lsrs	r3, r3, #11
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 8000e18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000e1c:	115b      	asrs	r3, r3, #5
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e24:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 8000e26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f003 031f 	and.w	r3, r3, #31
 8000e30:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 8000e32:	7efa      	ldrb	r2, [r7, #27]
 8000e34:	4613      	mov	r3, r2
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	1a9b      	subs	r3, r3, r2
 8000e3a:	4a69      	ldr	r2, [pc, #420]	@ (8000fe0 <fillRect+0x270>)
 8000e3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e40:	441a      	add	r2, r3
 8000e42:	1112      	asrs	r2, r2, #4
 8000e44:	17db      	asrs	r3, r3, #31
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 8000e4a:	7eba      	ldrb	r2, [r7, #26]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	4a64      	ldr	r2, [pc, #400]	@ (8000fe4 <fillRect+0x274>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	441a      	add	r2, r3
 8000e5a:	1152      	asrs	r2, r2, #5
 8000e5c:	17db      	asrs	r3, r3, #31
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8000e62:	7e7a      	ldrb	r2, [r7, #25]
 8000e64:	4613      	mov	r3, r2
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	4a5d      	ldr	r2, [pc, #372]	@ (8000fe0 <fillRect+0x270>)
 8000e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e70:	441a      	add	r2, r3
 8000e72:	1112      	asrs	r2, r2, #4
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 8000e7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e7e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e82:	fb03 f202 	mul.w	r2, r3, r2
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e94:	d204      	bcs.n	8000ea0 <fillRect+0x130>
		cnt = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
		buf_size = n;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e02f      	b.n	8000f00 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	4a51      	ldr	r2, [pc, #324]	@ (8000fe8 <fillRect+0x278>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 8000eac:	2303      	movs	r3, #3
 8000eae:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	4a4e      	ldr	r2, [pc, #312]	@ (8000fec <fillRect+0x27c>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	0bdb      	lsrs	r3, r3, #15
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8000ec0:	7cfb      	ldrb	r3, [r7, #19]
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec4:	e014      	b.n	8000ef0 <fillRect+0x180>
			if(n%i == 0){
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eca:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ece:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ed0:	fb01 f202 	mul.w	r2, r1, r2
 8000ed4:	1a9b      	subs	r3, r3, r2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d107      	bne.n	8000eea <fillRect+0x17a>
				cnt = i;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000edc:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	61fb      	str	r3, [r7, #28]
				break;
 8000ee8:	e00a      	b.n	8000f00 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	3301      	adds	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4a3d      	ldr	r2, [pc, #244]	@ (8000fe8 <fillRect+0x278>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	085b      	lsrs	r3, r3, #1
 8000efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3e2      	bcc.n	8000ec6 <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 8000f00:	69f9      	ldr	r1, [r7, #28]
 8000f02:	460b      	mov	r3, r1
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4688      	mov	r8, r1
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f22:	2300      	movs	r3, #0
 8000f24:	460c      	mov	r4, r1
 8000f26:	461d      	mov	r5, r3
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	00eb      	lsls	r3, r5, #3
 8000f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f36:	00e2      	lsls	r2, r4, #3
 8000f38:	1dcb      	adds	r3, r1, #7
 8000f3a:	08db      	lsrs	r3, r3, #3
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f42:	466b      	mov	r3, sp
 8000f44:	3300      	adds	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f4c:	e019      	b.n	8000f82 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 8000f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	7ef9      	ldrb	r1, [r7, #27]
 8000f5a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8000f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	3301      	adds	r3, #1
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	7eb9      	ldrb	r1, [r7, #26]
 8000f6a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	3302      	adds	r3, #2
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	7e79      	ldrb	r1, [r7, #25]
 8000f7a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7e:	3301      	adds	r3, #1
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <fillRect+0x278>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	085b      	lsrs	r3, r3, #1
 8000f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3dd      	bcc.n	8000f4e <fillRect+0x1de>
	}
	DC_DATA();
 8000f92:	2201      	movs	r2, #1
 8000f94:	2140      	movs	r1, #64	@ 0x40
 8000f96:	4816      	ldr	r0, [pc, #88]	@ (8000ff0 <fillRect+0x280>)
 8000f98:	f001 fadc 	bl	8002554 <HAL_GPIO_WritePin>
	CS_A();
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4813      	ldr	r0, [pc, #76]	@ (8000ff0 <fillRect+0x280>)
 8000fa2:	f001 fad7 	bl	8002554 <HAL_GPIO_WritePin>
		while(cnt>0)
 8000fa6:	e00a      	b.n	8000fbe <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <fillRect+0x284>)
 8000fb4:	f003 fe11 	bl	8004bda <HAL_SPI_Transmit>

			cnt -= 1;
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f1      	bne.n	8000fa8 <fillRect+0x238>
		}
		CS_D();
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <fillRect+0x280>)
 8000fca:	f001 fac3 	bl	8002554 <HAL_GPIO_WritePin>
 8000fce:	46d5      	mov	sp, sl

}
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd8:	2000029e 	.word	0x2000029e
 8000fdc:	200002a0 	.word	0x200002a0
 8000fe0:	84210843 	.word	0x84210843
 8000fe4:	82082083 	.word	0x82082083
 8000fe8:	aaaaaaab 	.word	0xaaaaaaab
 8000fec:	80008001 	.word	0x80008001
 8000ff0:	48000c00 	.word	0x48000c00
 8000ff4:	200002f8 	.word	0x200002f8

08000ff8 <setRotation>:


void setRotation(uint8_t r)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 8001002:	2036      	movs	r0, #54	@ 0x36
 8001004:	f7ff fc98 	bl	8000938 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d83a      	bhi.n	800108c <setRotation+0x94>
 8001016:	a201      	add	r2, pc, #4	@ (adr r2, 800101c <setRotation+0x24>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	0800102d 	.word	0x0800102d
 8001020:	08001045 	.word	0x08001045
 8001024:	0800105d 	.word	0x0800105d
 8001028:	08001075 	.word	0x08001075
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 800102c:	2048      	movs	r0, #72	@ 0x48
 800102e:	f7ff fca9 	bl	8000984 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8001032:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <setRotation+0x9c>)
 8001034:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001038:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <setRotation+0xa0>)
 800103c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001040:	801a      	strh	r2, [r3, #0]
		break;
 8001042:	e023      	b.n	800108c <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8001044:	2028      	movs	r0, #40	@ 0x28
 8001046:	f7ff fc9d 	bl	8000984 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <setRotation+0x9c>)
 800104c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001050:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <setRotation+0xa0>)
 8001054:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001058:	801a      	strh	r2, [r3, #0]
		break;
 800105a:	e017      	b.n	800108c <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 800105c:	2088      	movs	r0, #136	@ 0x88
 800105e:	f7ff fc91 	bl	8000984 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <setRotation+0x9c>)
 8001064:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001068:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <setRotation+0xa0>)
 800106c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001070:	801a      	strh	r2, [r3, #0]
		break;
 8001072:	e00b      	b.n	800108c <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001074:	20e8      	movs	r0, #232	@ 0xe8
 8001076:	f7ff fc85 	bl	8000984 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <setRotation+0x9c>)
 800107c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001080:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8001082:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <setRotation+0xa0>)
 8001084:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001088:	801a      	strh	r2, [r3, #0]
		break;
 800108a:	bf00      	nop
	}

}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000029e 	.word	0x2000029e
 8001098:	200002a0 	.word	0x200002a0

0800109c <drawChar>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

//11. Text printing functions
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4604      	mov	r4, r0
 80010a4:	4608      	mov	r0, r1
 80010a6:	4611      	mov	r1, r2
 80010a8:	461a      	mov	r2, r3
 80010aa:	4623      	mov	r3, r4
 80010ac:	80fb      	strh	r3, [r7, #6]
 80010ae:	4603      	mov	r3, r0
 80010b0:	80bb      	strh	r3, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
 80010b6:	4613      	mov	r3, r2
 80010b8:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 80010ba:	4bac      	ldr	r3, [pc, #688]	@ (800136c <drawChar+0x2d0>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d003      	beq.n	80010ca <drawChar+0x2e>
 80010c2:	4baa      	ldr	r3, [pc, #680]	@ (800136c <drawChar+0x2d0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d120      	bne.n	800110c <drawChar+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 80010ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80010d2:	f280 8144 	bge.w	800135e <drawChar+0x2c2>
 80010d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010da:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80010de:	f280 813e 	bge.w	800135e <drawChar+0x2c2>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80010e2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010e6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f340 8132 	ble.w	800135e <drawChar+0x2c2>
     ((y + 8 * size - 1) < 0))   // Clip top
 80010fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8001106:	2b00      	cmp	r3, #0
 8001108:	dc22      	bgt.n	8001150 <drawChar+0xb4>
    return;
 800110a:	e128      	b.n	800135e <drawChar+0x2c2>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 800110c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001110:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001114:	f280 8125 	bge.w	8001362 <drawChar+0x2c6>
 8001118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001120:	f280 811f 	bge.w	8001362 <drawChar+0x2c6>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8001124:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001128:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8001136:	2b00      	cmp	r3, #0
 8001138:	f340 8113 	ble.w	8001362 <drawChar+0x2c6>
     ((x + 8 * size - 1) < 0))   // Clip top
 800113c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001140:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8001148:	2b00      	cmp	r3, #0
 800114a:	f340 810a 	ble.w	8001362 <drawChar+0x2c6>
 800114e:	e000      	b.n	8001152 <drawChar+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8001150:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001152:	4b87      	ldr	r3, [pc, #540]	@ (8001370 <drawChar+0x2d4>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <drawChar+0xd0>
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	2baf      	cmp	r3, #175	@ 0xaf
 8001164:	d902      	bls.n	800116c <drawChar+0xd0>
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	3301      	adds	r3, #1
 800116a:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e0ef      	b.n	8001352 <drawChar+0x2b6>
    uint8_t line;
    if (i == 5)
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	2b05      	cmp	r3, #5
 8001178:	d102      	bne.n	8001180 <drawChar+0xe4>
      line = 0x0;
 800117a:	2300      	movs	r3, #0
 800117c:	73bb      	strb	r3, [r7, #14]
 800117e:	e00b      	b.n	8001198 <drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8001180:	78fa      	ldrb	r2, [r7, #3]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	461a      	mov	r2, r3
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4413      	add	r3, r2
 8001190:	4a78      	ldr	r2, [pc, #480]	@ (8001374 <drawChar+0x2d8>)
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001198:	2300      	movs	r3, #0
 800119a:	737b      	strb	r3, [r7, #13]
 800119c:	e0ce      	b.n	800133c <drawChar+0x2a0>
      if (line & 0x1) {
 800119e:	7bbb      	ldrb	r3, [r7, #14]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d05e      	beq.n	8001266 <drawChar+0x1ca>
        if (size == 1) // default size
 80011a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d112      	bne.n	80011d6 <drawChar+0x13a>
        	drawPixel(x+i, y+j, color);
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4413      	add	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b218      	sxth	r0, r3
 80011be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	88bb      	ldrh	r3, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	883a      	ldrh	r2, [r7, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fd60 	bl	8000c94 <drawPixel>
 80011d4:	e0a9      	b.n	800132a <drawChar+0x28e>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	fb12 f303 	smulbb	r3, r2, r3
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	4413      	add	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b218      	sxth	r0, r3
 80011f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	fb12 f303 	smulbb	r3, r2, r3
 8001200:	b29a      	uxth	r2, r3
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	b29b      	uxth	r3, r3
 8001208:	b21c      	sxth	r4, r3
 800120a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800120e:	b29a      	uxth	r2, r3
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	4413      	add	r3, r2
 8001214:	b29a      	uxth	r2, r3
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	b299      	uxth	r1, r3
 800121c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001220:	b29b      	uxth	r3, r3
 8001222:	fb11 f303 	smulbb	r3, r1, r3
 8001226:	b29b      	uxth	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	b29b      	uxth	r3, r3
 800122c:	b21d      	sxth	r5, r3
 800122e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001232:	b29a      	uxth	r2, r3
 8001234:	88bb      	ldrh	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	b29a      	uxth	r2, r3
 800123a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800123e:	b299      	uxth	r1, r3
 8001240:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001244:	b29b      	uxth	r3, r3
 8001246:	fb11 f303 	smulbb	r3, r1, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	4413      	add	r3, r2
 800124e:	b29b      	uxth	r3, r3
 8001250:	3301      	adds	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	b21a      	sxth	r2, r3
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4613      	mov	r3, r2
 800125c:	462a      	mov	r2, r5
 800125e:	4621      	mov	r1, r4
 8001260:	f7ff fd86 	bl	8000d70 <fillRect>
 8001264:	e061      	b.n	800132a <drawChar+0x28e>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }
      } else if (bg != color) {
 8001266:	8c3a      	ldrh	r2, [r7, #32]
 8001268:	883b      	ldrh	r3, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d05d      	beq.n	800132a <drawChar+0x28e>
        if (size == 1) // default size
 800126e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001272:	2b01      	cmp	r3, #1
 8001274:	d112      	bne.n	800129c <drawChar+0x200>
        	drawPixel(x+i, y+j, bg);
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	b29a      	uxth	r2, r3
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	4413      	add	r3, r2
 8001280:	b29b      	uxth	r3, r3
 8001282:	b218      	sxth	r0, r3
 8001284:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001288:	b29a      	uxth	r2, r3
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	b29b      	uxth	r3, r3
 8001290:	b21b      	sxth	r3, r3
 8001292:	8c3a      	ldrh	r2, [r7, #32]
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fcfd 	bl	8000c94 <drawPixel>
 800129a:	e046      	b.n	800132a <drawChar+0x28e>
        else {  // big size
        	fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800129c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	fb12 f303 	smulbb	r3, r2, r3
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4413      	add	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b218      	sxth	r0, r3
 80012b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	fb12 f303 	smulbb	r3, r2, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b21c      	sxth	r4, r3
 80012d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	4413      	add	r3, r2
 80012da:	b29a      	uxth	r2, r3
 80012dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e0:	b299      	uxth	r1, r3
 80012e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	fb11 f303 	smulbb	r3, r1, r3
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4413      	add	r3, r2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b21d      	sxth	r5, r3
 80012f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	b29a      	uxth	r2, r3
 8001300:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001304:	b299      	uxth	r1, r3
 8001306:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800130a:	b29b      	uxth	r3, r3
 800130c:	fb11 f303 	smulbb	r3, r1, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	b29b      	uxth	r3, r3
 8001316:	3301      	adds	r3, #1
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21a      	sxth	r2, r3
 800131c:	8c3b      	ldrh	r3, [r7, #32]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4613      	mov	r3, r2
 8001322:	462a      	mov	r2, r5
 8001324:	4621      	mov	r1, r4
 8001326:	f7ff fd23 	bl	8000d70 <fillRect>
        }
      }
      line >>= 1;
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	085b      	lsrs	r3, r3, #1
 800132e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001330:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3301      	adds	r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	737b      	strb	r3, [r7, #13]
 800133c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001340:	2b07      	cmp	r3, #7
 8001342:	f77f af2c 	ble.w	800119e <drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	2b05      	cmp	r3, #5
 8001358:	f77f af0b 	ble.w	8001172 <drawChar+0xd6>
 800135c:	e002      	b.n	8001364 <drawChar+0x2c8>
    return;
 800135e:	bf00      	nop
 8001360:	e000      	b.n	8001364 <drawChar+0x2c8>
    return;
 8001362:	bf00      	nop
    }
  }
}
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000
 8001370:	2000028c 	.word	0x2000028c
 8001374:	08005ef0 	.word	0x08005ef0

08001378 <ILI9488_printText>:
    }
  }
}

void ILI9488_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4603      	mov	r3, r0
 8001388:	817b      	strh	r3, [r7, #10]
 800138a:	460b      	mov	r3, r1
 800138c:	813b      	strh	r3, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001392:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001396:	b29b      	uxth	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	0052      	lsls	r2, r2, #1
 800139c:	4413      	add	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	82fb      	strh	r3, [r7, #22]
 80013a8:	e01a      	b.n	80013e0 <ILI9488_printText+0x68>
	{
		drawChar(x+(offset*i), y, text[i],color,bg,size);
 80013aa:	8abb      	ldrh	r3, [r7, #20]
 80013ac:	8afa      	ldrh	r2, [r7, #22]
 80013ae:	fb12 f303 	smulbb	r3, r2, r3
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	897b      	ldrh	r3, [r7, #10]
 80013b6:	4413      	add	r3, r2
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b218      	sxth	r0, r3
 80013bc:	8afb      	ldrh	r3, [r7, #22]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	88fc      	ldrh	r4, [r7, #6]
 80013c6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80013ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	4623      	mov	r3, r4
 80013d6:	f7ff fe61 	bl	800109c <drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80013da:	8afb      	ldrh	r3, [r7, #22]
 80013dc:	3301      	adds	r3, #1
 80013de:	82fb      	strh	r3, [r7, #22]
 80013e0:	8afb      	ldrh	r3, [r7, #22]
 80013e2:	2b27      	cmp	r3, #39	@ 0x27
 80013e4:	d805      	bhi.n	80013f2 <ILI9488_printText+0x7a>
 80013e6:	8afb      	ldrh	r3, [r7, #22]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1db      	bne.n	80013aa <ILI9488_printText+0x32>
	}
}
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}
	...

080013fc <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	0adb      	lsrs	r3, r3, #11
 800140a:	b29b      	uxth	r3, r3
 800140c:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	115b      	asrs	r3, r3, #5
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001418:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	4613      	mov	r3, r2
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	4a17      	ldr	r2, [pc, #92]	@ (800148c <write16BitColor+0x90>)
 800142e:	fb82 1203 	smull	r1, r2, r2, r3
 8001432:	441a      	add	r2, r3
 8001434:	1112      	asrs	r2, r2, #4
 8001436:	17db      	asrs	r3, r3, #31
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 800143c:	7bba      	ldrb	r2, [r7, #14]
 800143e:	4613      	mov	r3, r2
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <write16BitColor+0x94>)
 8001446:	fb82 1203 	smull	r1, r2, r2, r3
 800144a:	441a      	add	r2, r3
 800144c:	1152      	asrs	r2, r2, #5
 800144e:	17db      	asrs	r3, r3, #31
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8001454:	7b7a      	ldrb	r2, [r7, #13]
 8001456:	4613      	mov	r3, r2
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <write16BitColor+0x90>)
 800145e:	fb82 1203 	smull	r1, r2, r2, r3
 8001462:	441a      	add	r2, r3
 8001464:	1112      	asrs	r2, r2, #4
 8001466:	17db      	asrs	r3, r3, #31
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	723b      	strb	r3, [r7, #8]
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	727b      	strb	r3, [r7, #9]
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2103      	movs	r1, #3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff faa6 	bl	80009d0 <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	84210843 	.word	0x84210843
 8001490:	82082083 	.word	0x82082083

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	@ 0x30
 8001498:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149a:	f000 fd4a 	bl	8001f32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149e:	f000 f8a5 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a2:	f000 fa49 	bl	8001938 <MX_GPIO_Init>
  MX_SPI2_Init();
 80014a6:	f000 f933 	bl	8001710 <MX_SPI2_Init>
  MX_SPI3_Init();
 80014aa:	f000 f96f 	bl	800178c <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80014ae:	f000 f9ab 	bl	8001808 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014b2:	f000 f9f5 	bl	80018a0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80014b6:	f000 f8eb 	bl	8001690 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILI9488_Init();
 80014ba:	f7ff fabf 	bl	8000a3c <ILI9488_Init>
  XPT2046_Init();
 80014be:	f000 fce5 	bl	8001e8c <XPT2046_Init>

  HAL_Delay(250);
 80014c2:	20fa      	movs	r0, #250	@ 0xfa
 80014c4:	f000 fdaa 	bl	800201c <HAL_Delay>
  setRotation(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff fd95 	bl	8000ff8 <setRotation>
  fillScreen(ILI9488_WHITE);
 80014ce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014d2:	f7ff fc33 	bl	8000d3c <fillScreen>
  DS1307_Init(&hi2c1);
 80014d6:	4840      	ldr	r0, [pc, #256]	@ (80015d8 <main+0x144>)
 80014d8:	f7ff f8ee 	bl	80006b8 <DS1307_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	DS1307_Init(&hi2c1);
 80014dc:	483e      	ldr	r0, [pc, #248]	@ (80015d8 <main+0x144>)
 80014de:	f7ff f8eb 	bl	80006b8 <DS1307_Init>
	/* To test leap year correction. */
	DS1307_SetDate(14);
 80014e2:	200e      	movs	r0, #14
 80014e4:	f7ff f978 	bl	80007d8 <DS1307_SetDate>
	DS1307_SetMonth(4);
 80014e8:	2004      	movs	r0, #4
 80014ea:	f7ff f987 	bl	80007fc <DS1307_SetMonth>
	DS1307_SetYear(2024);
 80014ee:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 80014f2:	f7ff f995 	bl	8000820 <DS1307_SetYear>
	DS1307_SetDayOfWeek(0);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff f95c 	bl	80007b4 <DS1307_SetDayOfWeek>
	DS1307_SetHour(22);
 80014fc:	2016      	movs	r0, #22
 80014fe:	f7ff f9b9 	bl	8000874 <DS1307_SetHour>
	DS1307_SetMinute(13);
 8001502:	200d      	movs	r0, #13
 8001504:	f7ff f9cb 	bl	800089e <DS1307_SetMinute>
	DS1307_SetSecond(30);
 8001508:	201e      	movs	r0, #30
 800150a:	f7ff f9da 	bl	80008c2 <DS1307_SetSecond>
	HAL_Delay(1000);
 800150e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001512:	f000 fd83 	bl	800201c <HAL_Delay>
	char name [10] = "WEEWOO";
 8001516:	4a31      	ldr	r2, [pc, #196]	@ (80015dc <main+0x148>)
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001520:	6018      	str	r0, [r3, #0]
 8001522:	3304      	adds	r3, #4
 8001524:	8019      	strh	r1, [r3, #0]
 8001526:	3302      	adds	r3, #2
 8001528:	0c0a      	lsrs	r2, r1, #16
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8001530:	2200      	movs	r2, #0
 8001532:	801a      	strh	r2, [r3, #0]
 8001534:	709a      	strb	r2, [r3, #2]
	char name2 [10] = "WEEWOO 2";
 8001536:	4a2a      	ldr	r2, [pc, #168]	@ (80015e0 <main+0x14c>)
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	ca07      	ldmia	r2, {r0, r1, r2}
 800153e:	c303      	stmia	r3!, {r0, r1}
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	2300      	movs	r3, #0
 8001544:	767b      	strb	r3, [r7, #25]
	char name3 [10] = "WEEWOO 3";
 8001546:	4a27      	ldr	r2, [pc, #156]	@ (80015e4 <main+0x150>)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	ca07      	ldmia	r2, {r0, r1, r2}
 800154c:	c303      	stmia	r3!, {r0, r1}
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	2300      	movs	r3, #0
 8001552:	737b      	strb	r3, [r7, #13]
	//Monday at 11:00.
	addNewEntry(0, name3, 0, 11, 00);
 8001554:	1d39      	adds	r1, r7, #4
 8001556:	2300      	movs	r3, #0
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	230b      	movs	r3, #11
 800155c:	2200      	movs	r2, #0
 800155e:	2000      	movs	r0, #0
 8001560:	f7fe ffd0 	bl	8000504 <addNewEntry>
	//Friday at 5:30.
	addNewEntry(0, name, 0, 5, 30);
 8001564:	f107 011c 	add.w	r1, r7, #28
 8001568:	231e      	movs	r3, #30
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2305      	movs	r3, #5
 800156e:	2200      	movs	r2, #0
 8001570:	2000      	movs	r0, #0
 8001572:	f7fe ffc7 	bl	8000504 <addNewEntry>
	//Sunday at 12:00.
	addNewEntry(0, name2, 0, 12, 00);
 8001576:	f107 0110 	add.w	r1, r7, #16
 800157a:	2300      	movs	r3, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	230c      	movs	r3, #12
 8001580:	2200      	movs	r2, #0
 8001582:	2000      	movs	r0, #0
 8001584:	f7fe ffbe 	bl	8000504 <addNewEntry>
	static pillEntry pillList [50];
	pillsinit();
 8001588:	f7fe ffb0 	bl	80004ec <pillsinit>
  while (1)
  {

	  ILI9488_printText(pillList[0].name, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 800158c:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <main+0x154>)
 800158e:	6858      	ldr	r0, [r3, #4]
 8001590:	2301      	movs	r3, #1
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	220a      	movs	r2, #10
 800159e:	210a      	movs	r1, #10
 80015a0:	f7ff feea 	bl	8001378 <ILI9488_printText>
	  ILI9488_printText(pillList[1].name, 10, 100, ILI9488_BLACK, ILI9488_WHITE, 1);
 80015a4:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <main+0x154>)
 80015a6:	6918      	ldr	r0, [r3, #16]
 80015a8:	2301      	movs	r3, #1
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	2264      	movs	r2, #100	@ 0x64
 80015b6:	210a      	movs	r1, #10
 80015b8:	f7ff fede 	bl	8001378 <ILI9488_printText>
	  ILI9488_printText(pillList[2].name, 10, 200, ILI9488_BLACK, ILI9488_WHITE, 1);
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <main+0x154>)
 80015be:	69d8      	ldr	r0, [r3, #28]
 80015c0:	2301      	movs	r3, #1
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	22c8      	movs	r2, #200	@ 0xc8
 80015ce:	210a      	movs	r1, #10
 80015d0:	f7ff fed2 	bl	8001378 <ILI9488_printText>
	  ILI9488_printText(pillList[0].name, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 80015d4:	bf00      	nop
 80015d6:	e7d9      	b.n	800158c <main+0xf8>
 80015d8:	200002a4 	.word	0x200002a4
 80015dc:	08005ecc 	.word	0x08005ecc
 80015e0:	08005ed8 	.word	0x08005ed8
 80015e4:	08005ee4 	.word	0x08005ee4
 80015e8:	200004e8 	.word	0x200004e8

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b096      	sub	sp, #88	@ 0x58
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	2244      	movs	r2, #68	@ 0x44
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fc2e 	bl	8005e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800160e:	2000      	movs	r0, #0
 8001610:	f001 fdac 	bl	800316c <HAL_PWREx_ControlVoltageScaling>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800161a:	f000 fa33 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800161e:	2310      	movs	r3, #16
 8001620:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001622:	2301      	movs	r3, #1
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800162a:	2360      	movs	r3, #96	@ 0x60
 800162c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001632:	2301      	movs	r3, #1
 8001634:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800163a:	233c      	movs	r3, #60	@ 0x3c
 800163c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001646:	2302      	movs	r3, #2
 8001648:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fe30 	bl	80032b4 <HAL_RCC_OscConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800165a:	f000 fa13 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001662:	2303      	movs	r3, #3
 8001664:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	2105      	movs	r1, #5
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fa36 	bl	8003ae8 <HAL_RCC_ClockConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001682:	f000 f9ff 	bl	8001a84 <Error_Handler>
  }
}
 8001686:	bf00      	nop
 8001688:	3758      	adds	r7, #88	@ 0x58
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001694:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <MX_I2C1_Init+0x74>)
 8001696:	4a1c      	ldr	r2, [pc, #112]	@ (8001708 <MX_I2C1_Init+0x78>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800169a:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <MX_I2C1_Init+0x74>)
 800169c:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <MX_I2C1_Init+0x7c>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a0:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a6:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016b2:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ca:	480e      	ldr	r0, [pc, #56]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016cc:	f000 ff5a 	bl	8002584 <HAL_I2C_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016d6:	f000 f9d5 	bl	8001a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016da:	2100      	movs	r1, #0
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016de:	f001 fc8d 	bl	8002ffc <HAL_I2CEx_ConfigAnalogFilter>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016e8:	f000 f9cc 	bl	8001a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_I2C1_Init+0x74>)
 80016f0:	f001 fccf 	bl	8003092 <HAL_I2CEx_ConfigDigitalFilter>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016fa:	f000 f9c3 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200002a4 	.word	0x200002a4
 8001708:	40005400 	.word	0x40005400
 800170c:	307075b1 	.word	0x307075b1

08001710 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <MX_SPI2_Init+0x74>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <MX_SPI2_Init+0x78>)
 8001718:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_SPI2_Init+0x74>)
 800171c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001720:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001722:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <MX_SPI2_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <MX_SPI2_Init+0x74>)
 800172a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800172e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_SPI2_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_SPI2_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_SPI2_Init+0x74>)
 800173e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001742:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <MX_SPI2_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_SPI2_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <MX_SPI2_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <MX_SPI2_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_SPI2_Init+0x74>)
 800175e:	2207      	movs	r2, #7
 8001760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <MX_SPI2_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <MX_SPI2_Init+0x74>)
 800176a:	2208      	movs	r2, #8
 800176c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_SPI2_Init+0x74>)
 8001770:	f003 f990 	bl	8004a94 <HAL_SPI_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 f983 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002f8 	.word	0x200002f8
 8001788:	40003800 	.word	0x40003800

0800178c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <MX_SPI3_Init+0x74>)
 8001792:	4a1c      	ldr	r2, [pc, #112]	@ (8001804 <MX_SPI3_Init+0x78>)
 8001794:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <MX_SPI3_Init+0x74>)
 8001798:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800179c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800179e:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017c2:	2218      	movs	r2, #24
 80017c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017da:	2207      	movs	r2, #7
 80017dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017e6:	2208      	movs	r2, #8
 80017e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_SPI3_Init+0x74>)
 80017ec:	f003 f952 	bl	8004a94 <HAL_SPI_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80017f6:	f000 f945 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000035c 	.word	0x2000035c
 8001804:	40003c00 	.word	0x40003c00

08001808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800180c:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800180e:	4a23      	ldr	r2, [pc, #140]	@ (800189c <MX_USART2_UART_Init+0x94>)
 8001810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001850:	4811      	ldr	r0, [pc, #68]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001852:	f003 fc9b 	bl	800518c <HAL_UART_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800185c:	f000 f912 	bl	8001a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001860:	2100      	movs	r1, #0
 8001862:	480d      	ldr	r0, [pc, #52]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001864:	f004 fa30 	bl	8005cc8 <HAL_UARTEx_SetTxFifoThreshold>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800186e:	f000 f909 	bl	8001a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001872:	2100      	movs	r1, #0
 8001874:	4808      	ldr	r0, [pc, #32]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001876:	f004 fa65 	bl	8005d44 <HAL_UARTEx_SetRxFifoThreshold>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001880:	f000 f900 	bl	8001a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001886:	f004 f9e6 	bl	8005c56 <HAL_UARTEx_DisableFifoMode>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001890:	f000 f8f8 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200003c0 	.word	0x200003c0
 800189c:	40004400 	.word	0x40004400

080018a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a4:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018a6:	4a23      	ldr	r2, [pc, #140]	@ (8001934 <MX_USART3_UART_Init+0x94>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018e8:	4811      	ldr	r0, [pc, #68]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018ea:	f003 fc4f 	bl	800518c <HAL_UART_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018f4:	f000 f8c6 	bl	8001a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	480d      	ldr	r0, [pc, #52]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018fc:	f004 f9e4 	bl	8005cc8 <HAL_UARTEx_SetTxFifoThreshold>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001906:	f000 f8bd 	bl	8001a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 800190e:	f004 fa19 	bl	8005d44 <HAL_UARTEx_SetRxFifoThreshold>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001918:	f000 f8b4 	bl	8001a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 800191e:	f004 f99a 	bl	8005c56 <HAL_UARTEx_DisableFifoMode>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001928:	f000 f8ac 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000454 	.word	0x20000454
 8001934:	40004800 	.word	0x40004800

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	@ 0x28
 800193c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800194e:	4b48      	ldr	r3, [pc, #288]	@ (8001a70 <MX_GPIO_Init+0x138>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	4a47      	ldr	r2, [pc, #284]	@ (8001a70 <MX_GPIO_Init+0x138>)
 8001954:	f043 0320 	orr.w	r3, r3, #32
 8001958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195a:	4b45      	ldr	r3, [pc, #276]	@ (8001a70 <MX_GPIO_Init+0x138>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	4b42      	ldr	r3, [pc, #264]	@ (8001a70 <MX_GPIO_Init+0x138>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	4a41      	ldr	r2, [pc, #260]	@ (8001a70 <MX_GPIO_Init+0x138>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001972:	4b3f      	ldr	r3, [pc, #252]	@ (8001a70 <MX_GPIO_Init+0x138>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a70 <MX_GPIO_Init+0x138>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	4a3b      	ldr	r2, [pc, #236]	@ (8001a70 <MX_GPIO_Init+0x138>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198a:	4b39      	ldr	r3, [pc, #228]	@ (8001a70 <MX_GPIO_Init+0x138>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	4b36      	ldr	r3, [pc, #216]	@ (8001a70 <MX_GPIO_Init+0x138>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	4a35      	ldr	r2, [pc, #212]	@ (8001a70 <MX_GPIO_Init+0x138>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a2:	4b33      	ldr	r3, [pc, #204]	@ (8001a70 <MX_GPIO_Init+0x138>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ae:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <MX_GPIO_Init+0x138>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a70 <MX_GPIO_Init+0x138>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <MX_GPIO_Init+0x138>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Actuator1_IN1_Pin|Actuaor1_IN2_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2128      	movs	r1, #40	@ 0x28
 80019ca:	482a      	ldr	r0, [pc, #168]	@ (8001a74 <MX_GPIO_Init+0x13c>)
 80019cc:	f000 fdc2 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f240 2103 	movw	r1, #515	@ 0x203
 80019d6:	4828      	ldr	r0, [pc, #160]	@ (8001a78 <MX_GPIO_Init+0x140>)
 80019d8:	f000 fdbc 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019e2:	4826      	ldr	r0, [pc, #152]	@ (8001a7c <MX_GPIO_Init+0x144>)
 80019e4:	f000 fdb6 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	21c1      	movs	r1, #193	@ 0xc1
 80019ec:	4824      	ldr	r0, [pc, #144]	@ (8001a80 <MX_GPIO_Init+0x148>)
 80019ee:	f000 fdb1 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Actuator1_IN1_Pin Actuaor1_IN2_Pin */
  GPIO_InitStruct.Pin = Actuator1_IN1_Pin|Actuaor1_IN2_Pin;
 80019f2:	2328      	movs	r3, #40	@ 0x28
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	481a      	ldr	r0, [pc, #104]	@ (8001a74 <MX_GPIO_Init+0x13c>)
 8001a0a:	f000 fc11 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper_Step_Pin Stepper_Dir_Pin Actuator_1_EN_Pin */
  GPIO_InitStruct.Pin = Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin;
 8001a0e:	f240 2303 	movw	r3, #515	@ 0x203
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4814      	ldr	r0, [pc, #80]	@ (8001a78 <MX_GPIO_Init+0x140>)
 8001a28:	f000 fc02 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <MX_GPIO_Init+0x144>)
 8001a46:	f000 fbf3 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 8001a4a:	23c1      	movs	r3, #193	@ 0xc1
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4807      	ldr	r0, [pc, #28]	@ (8001a80 <MX_GPIO_Init+0x148>)
 8001a62:	f000 fbe5 	bl	8002230 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	@ 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48001400 	.word	0x48001400
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	48000c00 	.word	0x48000c00

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <Error_Handler+0x8>

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0ae      	sub	sp, #184	@ 0xb8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	2294      	movs	r2, #148	@ 0x94
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 f9af 	bl	8005e5c <memset>
  if(hi2c->Instance==I2C1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a21      	ldr	r2, [pc, #132]	@ (8001b88 <HAL_I2C_MspInit+0xb0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d13b      	bne.n	8001b80 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b08:	2340      	movs	r3, #64	@ 0x40
 8001b0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 faa5 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b20:	f7ff ffb0 	bl	8001a84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_I2C_MspInit+0xb4>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b28:	4a18      	ldr	r2, [pc, #96]	@ (8001b8c <HAL_I2C_MspInit+0xb4>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_I2C_MspInit+0xb4>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b44:	2312      	movs	r3, #18
 8001b46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b56:	2304      	movs	r3, #4
 8001b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b60:	4619      	mov	r1, r3
 8001b62:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <HAL_I2C_MspInit+0xb8>)
 8001b64:	f000 fb64 	bl	8002230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <HAL_I2C_MspInit+0xb4>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <HAL_I2C_MspInit+0xb4>)
 8001b6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_I2C_MspInit+0xb4>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	37b8      	adds	r7, #184	@ 0xb8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	48000400 	.word	0x48000400

08001b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	@ 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c6c <HAL_SPI_MspInit+0xd8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d128      	bne.n	8001c08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	4a2d      	ldr	r2, [pc, #180]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bce:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	4a27      	ldr	r2, [pc, #156]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bda:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001be6:	231a      	movs	r3, #26
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	481c      	ldr	r0, [pc, #112]	@ (8001c74 <HAL_SPI_MspInit+0xe0>)
 8001c02:	f000 fb15 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c06:	e02c      	b.n	8001c62 <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c78 <HAL_SPI_MspInit+0xe4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d127      	bne.n	8001c62 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c12:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c16:	4a16      	ldr	r2, [pc, #88]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c1e:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	4a10      	ldr	r2, [pc, #64]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_SPI_MspInit+0xdc>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c42:	2338      	movs	r3, #56	@ 0x38
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c52:	2306      	movs	r3, #6
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4807      	ldr	r0, [pc, #28]	@ (8001c7c <HAL_SPI_MspInit+0xe8>)
 8001c5e:	f000 fae7 	bl	8002230 <HAL_GPIO_Init>
}
 8001c62:	bf00      	nop
 8001c64:	3730      	adds	r7, #48	@ 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40003800 	.word	0x40003800
 8001c70:	40021000 	.word	0x40021000
 8001c74:	48000c00 	.word	0x48000c00
 8001c78:	40003c00 	.word	0x40003c00
 8001c7c:	48000400 	.word	0x48000400

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0b2      	sub	sp, #200	@ 0xc8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	2294      	movs	r2, #148	@ 0x94
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 f8db 	bl	8005e5c <memset>
  if(huart->Instance==USART2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a53      	ldr	r2, [pc, #332]	@ (8001df8 <HAL_UART_MspInit+0x178>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d15d      	bne.n	8001d6c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 f9d1 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cc8:	f7ff fedc 	bl	8001a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd8:	4b48      	ldr	r3, [pc, #288]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b45      	ldr	r3, [pc, #276]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	4a44      	ldr	r2, [pc, #272]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf0:	4b42      	ldr	r3, [pc, #264]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d00:	4a3e      	ldr	r2, [pc, #248]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d08:	4b3c      	ldr	r3, [pc, #240]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d14:	2308      	movs	r3, #8
 8001d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3c:	f000 fa78 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d40:	2320      	movs	r3, #32
 8001d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4826      	ldr	r0, [pc, #152]	@ (8001e00 <HAL_UART_MspInit+0x180>)
 8001d66:	f000 fa63 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d6a:	e040      	b.n	8001dee <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a24      	ldr	r2, [pc, #144]	@ (8001e04 <HAL_UART_MspInit+0x184>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d13b      	bne.n	8001dee <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d76:	2304      	movs	r3, #4
 8001d78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 f96e 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_UART_MspInit+0x112>
      Error_Handler();
 8001d8e:	f7ff fe79 	bl	8001a84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	4a13      	ldr	r2, [pc, #76]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db6:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <HAL_UART_MspInit+0x17c>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ddc:	2307      	movs	r3, #7
 8001dde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <HAL_UART_MspInit+0x180>)
 8001dea:	f000 fa21 	bl	8002230 <HAL_GPIO_Init>
}
 8001dee:	bf00      	nop
 8001df0:	37c8      	adds	r7, #200	@ 0xc8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40004400 	.word	0x40004400
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000c00 	.word	0x48000c00
 8001e04:	40004800 	.word	0x40004800

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <NMI_Handler+0x4>

08001e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <MemManage_Handler+0x4>

08001e20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <BusFault_Handler+0x4>

08001e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <UsageFault_Handler+0x4>

08001e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5e:	f000 f8bd 	bl	8001fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <SystemInit+0x20>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <SystemInit+0x20>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <XPT2046_Init>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void XPT2046_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e96:	4810      	ldr	r0, [pc, #64]	@ (8001ed8 <XPT2046_Init+0x4c>)
 8001e98:	f000 fb5c 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8001e9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2180      	movs	r1, #128	@ 0x80
 8001ea4:	480d      	ldr	r0, [pc, #52]	@ (8001edc <XPT2046_Init+0x50>)
 8001ea6:	f002 fe98 	bl	8004bda <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8001eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	480a      	ldr	r0, [pc, #40]	@ (8001edc <XPT2046_Init+0x50>)
 8001eb4:	f002 fe91 	bl	8004bda <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8001eb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4806      	ldr	r0, [pc, #24]	@ (8001edc <XPT2046_Init+0x50>)
 8001ec2:	f002 fe8a 	bl	8004bda <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <XPT2046_Init+0x4c>)
 8001ece:	f000 fb41 	bl	8002554 <HAL_GPIO_WritePin>
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	48000400 	.word	0x48000400
 8001edc:	2000035c 	.word	0x2000035c

08001ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee4:	f7ff ffc0 	bl	8001e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee8:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001eea:	490d      	ldr	r1, [pc, #52]	@ (8001f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <LoopForever+0xe>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f00:	4c0a      	ldr	r4, [pc, #40]	@ (8001f2c <LoopForever+0x16>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f003 ffad 	bl	8005e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f12:	f7ff fabf 	bl	8001494 <main>

08001f16 <LoopForever>:

LoopForever:
    b LoopForever
 8001f16:	e7fe      	b.n	8001f16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f18:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f24:	08006470 	.word	0x08006470
  ldr r2, =_sbss
 8001f28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f2c:	20000744 	.word	0x20000744

08001f30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC1_IRQHandler>

08001f32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 f943 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f42:	200f      	movs	r0, #15
 8001f44:	f000 f80e 	bl	8001f64 <HAL_InitTick>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	71fb      	strb	r3, [r7, #7]
 8001f52:	e001      	b.n	8001f58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f54:	f7ff fd9c 	bl	8001a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f58:	79fb      	ldrb	r3, [r7, #7]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f70:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <HAL_InitTick+0x6c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d023      	beq.n	8001fc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f78:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <HAL_InitTick+0x70>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <HAL_InitTick+0x6c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f941 	bl	8002216 <HAL_SYSTICK_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10f      	bne.n	8001fba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d809      	bhi.n	8001fb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fa8:	f000 f919 	bl	80021de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fac:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <HAL_InitTick+0x74>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e007      	b.n	8001fc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e004      	b.n	8001fc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	73fb      	strb	r3, [r7, #15]
 8001fbe:	e001      	b.n	8001fc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000000c 	.word	0x2000000c
 8001fd4:	20000004 	.word	0x20000004
 8001fd8:	20000008 	.word	0x20000008

08001fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <HAL_IncTick+0x24>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000000c 	.word	0x2000000c
 8002000:	20000740 	.word	0x20000740

08002004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <HAL_GetTick+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000740 	.word	0x20000740

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff ffee 	bl	8002004 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffde 	bl	8002004 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000000c 	.word	0x2000000c

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	@ (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	@ (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	@ 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff47 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff5c 	bl	80020ac <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffb0 	bl	8002184 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223e:	e166      	b.n	800250e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8158 	beq.w	8002508 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d005      	beq.n	8002270 <HAL_GPIO_Init+0x40>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d130      	bne.n	80022d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022a6:	2201      	movs	r2, #1
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 0201 	and.w	r2, r3, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d017      	beq.n	800230e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d123      	bne.n	8002362 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	6939      	ldr	r1, [r7, #16]
 800235e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0203 	and.w	r2, r3, #3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80b2 	beq.w	8002508 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a4:	4b61      	ldr	r3, [pc, #388]	@ (800252c <HAL_GPIO_Init+0x2fc>)
 80023a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a8:	4a60      	ldr	r2, [pc, #384]	@ (800252c <HAL_GPIO_Init+0x2fc>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80023b0:	4b5e      	ldr	r3, [pc, #376]	@ (800252c <HAL_GPIO_Init+0x2fc>)
 80023b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023bc:	4a5c      	ldr	r2, [pc, #368]	@ (8002530 <HAL_GPIO_Init+0x300>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023e6:	d02b      	beq.n	8002440 <HAL_GPIO_Init+0x210>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a52      	ldr	r2, [pc, #328]	@ (8002534 <HAL_GPIO_Init+0x304>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d025      	beq.n	800243c <HAL_GPIO_Init+0x20c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a51      	ldr	r2, [pc, #324]	@ (8002538 <HAL_GPIO_Init+0x308>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d01f      	beq.n	8002438 <HAL_GPIO_Init+0x208>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a50      	ldr	r2, [pc, #320]	@ (800253c <HAL_GPIO_Init+0x30c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d019      	beq.n	8002434 <HAL_GPIO_Init+0x204>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a4f      	ldr	r2, [pc, #316]	@ (8002540 <HAL_GPIO_Init+0x310>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_GPIO_Init+0x200>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a4e      	ldr	r2, [pc, #312]	@ (8002544 <HAL_GPIO_Init+0x314>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00d      	beq.n	800242c <HAL_GPIO_Init+0x1fc>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a4d      	ldr	r2, [pc, #308]	@ (8002548 <HAL_GPIO_Init+0x318>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d007      	beq.n	8002428 <HAL_GPIO_Init+0x1f8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a4c      	ldr	r2, [pc, #304]	@ (800254c <HAL_GPIO_Init+0x31c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_GPIO_Init+0x1f4>
 8002420:	2307      	movs	r3, #7
 8002422:	e00e      	b.n	8002442 <HAL_GPIO_Init+0x212>
 8002424:	2308      	movs	r3, #8
 8002426:	e00c      	b.n	8002442 <HAL_GPIO_Init+0x212>
 8002428:	2306      	movs	r3, #6
 800242a:	e00a      	b.n	8002442 <HAL_GPIO_Init+0x212>
 800242c:	2305      	movs	r3, #5
 800242e:	e008      	b.n	8002442 <HAL_GPIO_Init+0x212>
 8002430:	2304      	movs	r3, #4
 8002432:	e006      	b.n	8002442 <HAL_GPIO_Init+0x212>
 8002434:	2303      	movs	r3, #3
 8002436:	e004      	b.n	8002442 <HAL_GPIO_Init+0x212>
 8002438:	2302      	movs	r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0x212>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_GPIO_Init+0x212>
 8002440:	2300      	movs	r3, #0
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	f002 0203 	and.w	r2, r2, #3
 8002448:	0092      	lsls	r2, r2, #2
 800244a:	4093      	lsls	r3, r2
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002452:	4937      	ldr	r1, [pc, #220]	@ (8002530 <HAL_GPIO_Init+0x300>)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002460:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <HAL_GPIO_Init+0x320>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002484:	4a32      	ldr	r2, [pc, #200]	@ (8002550 <HAL_GPIO_Init+0x320>)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800248a:	4b31      	ldr	r3, [pc, #196]	@ (8002550 <HAL_GPIO_Init+0x320>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ae:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <HAL_GPIO_Init+0x320>)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024b4:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <HAL_GPIO_Init+0x320>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_GPIO_Init+0x320>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024de:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <HAL_GPIO_Init+0x320>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002502:	4a13      	ldr	r2, [pc, #76]	@ (8002550 <HAL_GPIO_Init+0x320>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	f47f ae91 	bne.w	8002240 <HAL_GPIO_Init+0x10>
  }
}
 800251e:	bf00      	nop
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40021000 	.word	0x40021000
 8002530:	40010000 	.word	0x40010000
 8002534:	48000400 	.word	0x48000400
 8002538:	48000800 	.word	0x48000800
 800253c:	48000c00 	.word	0x48000c00
 8002540:	48001000 	.word	0x48001000
 8002544:	48001400 	.word	0x48001400
 8002548:	48001800 	.word	0x48001800
 800254c:	48001c00 	.word	0x48001c00
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002570:	e002      	b.n	8002578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e08d      	b.n	80026b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fa94 	bl	8001ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	@ 0x24
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d107      	bne.n	80025fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	e006      	b.n	800260c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800260a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d108      	bne.n	8002626 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	e007      	b.n	8002636 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002648:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002658:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69d9      	ldr	r1, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
 80026cc:	4613      	mov	r3, r2
 80026ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b20      	cmp	r3, #32
 80026da:	f040 80fd 	bne.w	80028d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_I2C_Master_Transmit+0x30>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e0f6      	b.n	80028da <HAL_I2C_Master_Transmit+0x21e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026f4:	f7ff fc86 	bl	8002004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2319      	movs	r3, #25
 8002700:	2201      	movs	r2, #1
 8002702:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fa0a 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0e1      	b.n	80028da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2221      	movs	r2, #33	@ 0x21
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2210      	movs	r2, #16
 8002722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	893a      	ldrh	r2, [r7, #8]
 8002736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	2bff      	cmp	r3, #255	@ 0xff
 8002746:	d906      	bls.n	8002756 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	22ff      	movs	r2, #255	@ 0xff
 800274c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800274e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e007      	b.n	8002766 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002760:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002764:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d024      	beq.n	80027b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	3301      	adds	r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	4b4e      	ldr	r3, [pc, #312]	@ (80028e4 <HAL_I2C_Master_Transmit+0x228>)
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fbf1 	bl	8002f98 <I2C_TransferConfig>
 80027b6:	e066      	b.n	8002886 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	4b48      	ldr	r3, [pc, #288]	@ (80028e4 <HAL_I2C_Master_Transmit+0x228>)
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fbe6 	bl	8002f98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80027cc:	e05b      	b.n	8002886 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	6a39      	ldr	r1, [r7, #32]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f9f3 	bl	8002bbe <I2C_WaitOnTXISFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07b      	b.n	80028da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d034      	beq.n	8002886 <HAL_I2C_Master_Transmit+0x1ca>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d130      	bne.n	8002886 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	2200      	movs	r2, #0
 800282c:	2180      	movs	r1, #128	@ 0x80
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f976 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e04d      	b.n	80028da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	2bff      	cmp	r3, #255	@ 0xff
 8002846:	d90e      	bls.n	8002866 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	22ff      	movs	r2, #255	@ 0xff
 800284c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002852:	b2da      	uxtb	r2, r3
 8002854:	8979      	ldrh	r1, [r7, #10]
 8002856:	2300      	movs	r3, #0
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fb9a 	bl	8002f98 <I2C_TransferConfig>
 8002864:	e00f      	b.n	8002886 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	b2da      	uxtb	r2, r3
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	2300      	movs	r3, #0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fb89 	bl	8002f98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d19e      	bne.n	80027ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	6a39      	ldr	r1, [r7, #32]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f9d9 	bl	8002c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e01a      	b.n	80028da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2220      	movs	r2, #32
 80028aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <HAL_I2C_Master_Transmit+0x22c>)
 80028b8:	400b      	ands	r3, r1
 80028ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e000      	b.n	80028da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
  }
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	80002000 	.word	0x80002000
 80028e8:	fe00e800 	.word	0xfe00e800

080028ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	461a      	mov	r2, r3
 80028f8:	460b      	mov	r3, r1
 80028fa:	817b      	strh	r3, [r7, #10]
 80028fc:	4613      	mov	r3, r2
 80028fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b20      	cmp	r3, #32
 800290a:	f040 80db 	bne.w	8002ac4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_I2C_Master_Receive+0x30>
 8002918:	2302      	movs	r3, #2
 800291a:	e0d4      	b.n	8002ac6 <HAL_I2C_Master_Receive+0x1da>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002924:	f7ff fb6e 	bl	8002004 <HAL_GetTick>
 8002928:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	2319      	movs	r3, #25
 8002930:	2201      	movs	r2, #1
 8002932:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f8f2 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0bf      	b.n	8002ac6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2222      	movs	r2, #34	@ 0x22
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2210      	movs	r2, #16
 8002952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	893a      	ldrh	r2, [r7, #8]
 8002966:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	2bff      	cmp	r3, #255	@ 0xff
 8002976:	d90e      	bls.n	8002996 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	22ff      	movs	r2, #255	@ 0xff
 800297c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	b2da      	uxtb	r2, r3
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	4b52      	ldr	r3, [pc, #328]	@ (8002ad0 <HAL_I2C_Master_Receive+0x1e4>)
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fb02 	bl	8002f98 <I2C_TransferConfig>
 8002994:	e06d      	b.n	8002a72 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	8979      	ldrh	r1, [r7, #10]
 80029a8:	4b49      	ldr	r3, [pc, #292]	@ (8002ad0 <HAL_I2C_Master_Receive+0x1e4>)
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 faf1 	bl	8002f98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80029b6:	e05c      	b.n	8002a72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	6a39      	ldr	r1, [r7, #32]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f989 	bl	8002cd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e07c      	b.n	8002ac6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d034      	beq.n	8002a72 <HAL_I2C_Master_Receive+0x186>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d130      	bne.n	8002a72 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	2200      	movs	r2, #0
 8002a18:	2180      	movs	r1, #128	@ 0x80
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f880 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e04d      	b.n	8002ac6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2bff      	cmp	r3, #255	@ 0xff
 8002a32:	d90e      	bls.n	8002a52 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	22ff      	movs	r2, #255	@ 0xff
 8002a38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	8979      	ldrh	r1, [r7, #10]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 faa4 	bl	8002f98 <I2C_TransferConfig>
 8002a50:	e00f      	b.n	8002a72 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	2300      	movs	r3, #0
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fa93 	bl	8002f98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d19d      	bne.n	80029b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	6a39      	ldr	r1, [r7, #32]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f8e3 	bl	8002c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e01a      	b.n	8002ac6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <HAL_I2C_Master_Receive+0x1e8>)
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	80002400 	.word	0x80002400
 8002ad4:	fe00e800 	.word	0xfe00e800

08002ad8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d103      	bne.n	8002af6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2200      	movs	r2, #0
 8002af4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d007      	beq.n	8002b14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	619a      	str	r2, [r3, #24]
  }
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b30:	e031      	b.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b38:	d02d      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3a:	f7ff fa63 	bl	8002004 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d302      	bcc.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d122      	bne.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d113      	bne.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00f      	b.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	2300      	movne	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d0be      	beq.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bca:	e033      	b.n	8002c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f901 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e031      	b.n	8002c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002be6:	d025      	beq.n	8002c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be8:	f7ff fa0c 	bl	8002004 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d302      	bcc.n	8002bfe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d11a      	bne.n	8002c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d013      	beq.n	8002c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e007      	b.n	8002c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d1c4      	bne.n	8002bcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c58:	e02f      	b.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f8ba 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e02d      	b.n	8002cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6e:	f7ff f9c9 	bl	8002004 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d302      	bcc.n	8002c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d11a      	bne.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d013      	beq.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e007      	b.n	8002cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d1c8      	bne.n	8002c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ce0:	e06b      	b.n	8002dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f876 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e069      	b.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d138      	bne.n	8002d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d105      	bne.n	8002d1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e055      	b.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d107      	bne.n	8002d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2210      	movs	r2, #16
 8002d32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2204      	movs	r2, #4
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d3a:	e002      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2220      	movs	r2, #32
 8002d48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002d56:	400b      	ands	r3, r1
 8002d58:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e029      	b.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7ff f945 	bl	8002004 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00f      	beq.n	8002dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e007      	b.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d18c      	bne.n	8002ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	fe00e800 	.word	0xfe00e800

08002dd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	@ 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d068      	beq.n	8002ed6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e0c:	e049      	b.n	8002ea2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e14:	d045      	beq.n	8002ea2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7ff f8f5 	bl	8002004 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_IsErrorOccurred+0x54>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d13a      	bne.n	8002ea2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e4e:	d121      	bne.n	8002e94 <I2C_IsErrorOccurred+0xbc>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e56:	d01d      	beq.n	8002e94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d01a      	beq.n	8002e94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e6e:	f7ff f8c9 	bl	8002004 <HAL_GetTick>
 8002e72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	e00e      	b.n	8002e94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e76:	f7ff f8c5 	bl	8002004 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b19      	cmp	r3, #25
 8002e82:	d907      	bls.n	8002e94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f043 0320 	orr.w	r3, r3, #32
 8002e8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e92:	e006      	b.n	8002ea2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d1e9      	bne.n	8002e76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d003      	beq.n	8002eb8 <I2C_IsErrorOccurred+0xe0>
 8002eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0aa      	beq.n	8002e0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d103      	bne.n	8002ec8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ef8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01c      	beq.n	8002f86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff fdc3 	bl	8002ad8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <I2C_IsErrorOccurred+0x1bc>)
 8002f5e:	400b      	ands	r3, r1
 8002f60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3728      	adds	r7, #40	@ 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	fe00e800 	.word	0xfe00e800

08002f98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fb0:	7a7b      	ldrb	r3, [r7, #9]
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	0d5b      	lsrs	r3, r3, #21
 8002fd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <I2C_TransferConfig+0x60>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	ea02 0103 	and.w	r1, r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	03ff63ff 	.word	0x03ff63ff

08002ffc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b20      	cmp	r3, #32
 8003010:	d138      	bne.n	8003084 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800301c:	2302      	movs	r3, #2
 800301e:	e032      	b.n	8003086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	@ 0x24
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800304e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d139      	bne.n	800311c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e033      	b.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2224      	movs	r2, #36	@ 0x24
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003130:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313c:	d102      	bne.n	8003144 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800313e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003142:	e00b      	b.n	800315c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003144:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003152:	d102      	bne.n	800315a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003158:	e000      	b.n	800315c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800315a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40007000 	.word	0x40007000

0800316c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d141      	bne.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800317a:	4b4b      	ldr	r3, [pc, #300]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003186:	d131      	bne.n	80031ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003188:	4b47      	ldr	r3, [pc, #284]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800318e:	4a46      	ldr	r2, [pc, #280]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003194:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003198:	4b43      	ldr	r3, [pc, #268]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031a0:	4a41      	ldr	r2, [pc, #260]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031a8:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2232      	movs	r2, #50	@ 0x32
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	4a3f      	ldr	r2, [pc, #252]	@ (80032b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	0c9b      	lsrs	r3, r3, #18
 80031ba:	3301      	adds	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031be:	e002      	b.n	80031c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c6:	4b38      	ldr	r3, [pc, #224]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d2:	d102      	bne.n	80031da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f2      	bne.n	80031c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031da:	4b33      	ldr	r3, [pc, #204]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e6:	d158      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e057      	b.n	800329c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031ec:	4b2e      	ldr	r3, [pc, #184]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031f2:	4a2d      	ldr	r2, [pc, #180]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031fc:	e04d      	b.n	800329a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003204:	d141      	bne.n	800328a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003206:	4b28      	ldr	r3, [pc, #160]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003212:	d131      	bne.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003214:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800321a:	4a23      	ldr	r2, [pc, #140]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003220:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003224:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800322c:	4a1e      	ldr	r2, [pc, #120]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003232:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003234:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2232      	movs	r2, #50	@ 0x32
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9b      	lsrs	r3, r3, #18
 8003246:	3301      	adds	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800324a:	e002      	b.n	8003252 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3b01      	subs	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003252:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325e:	d102      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f2      	bne.n	800324c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003266:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003272:	d112      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e011      	b.n	800329c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800327e:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003288:	e007      	b.n	800329a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800328a:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003292:	4a05      	ldr	r2, [pc, #20]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003298:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40007000 	.word	0x40007000
 80032ac:	20000004 	.word	0x20000004
 80032b0:	431bde83 	.word	0x431bde83

080032b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f000 bc08 	b.w	8003ad8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c8:	4b96      	ldr	r3, [pc, #600]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d2:	4b94      	ldr	r3, [pc, #592]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80e4 	beq.w	80034b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_RCC_OscConfig+0x4c>
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	f040 808b 	bne.w	800340e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	f040 8087 	bne.w	800340e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003300:	4b88      	ldr	r3, [pc, #544]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_OscConfig+0x64>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e3df      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	4b81      	ldr	r3, [pc, #516]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d004      	beq.n	8003332 <HAL_RCC_OscConfig+0x7e>
 8003328:	4b7e      	ldr	r3, [pc, #504]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003330:	e005      	b.n	800333e <HAL_RCC_OscConfig+0x8a>
 8003332:	4b7c      	ldr	r3, [pc, #496]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800333e:	4293      	cmp	r3, r2
 8003340:	d223      	bcs.n	800338a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fdcc 	bl	8003ee4 <RCC_SetFlashLatencyFromMSIRange>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e3c0      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003356:	4b73      	ldr	r3, [pc, #460]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a72      	ldr	r2, [pc, #456]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800335c:	f043 0308 	orr.w	r3, r3, #8
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b70      	ldr	r3, [pc, #448]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	496d      	ldr	r1, [pc, #436]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003374:	4b6b      	ldr	r3, [pc, #428]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	4968      	ldr	r1, [pc, #416]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
 8003388:	e025      	b.n	80033d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800338a:	4b66      	ldr	r3, [pc, #408]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a65      	ldr	r2, [pc, #404]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003390:	f043 0308 	orr.w	r3, r3, #8
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b63      	ldr	r3, [pc, #396]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4960      	ldr	r1, [pc, #384]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	495b      	ldr	r1, [pc, #364]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fd8c 	bl	8003ee4 <RCC_SetFlashLatencyFromMSIRange>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e380      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033d6:	f000 fcc1 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b51      	ldr	r3, [pc, #324]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	4950      	ldr	r1, [pc, #320]	@ (8003528 <HAL_RCC_OscConfig+0x274>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a4e      	ldr	r2, [pc, #312]	@ (800352c <HAL_RCC_OscConfig+0x278>)
 80033f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003530 <HAL_RCC_OscConfig+0x27c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fdb2 	bl	8001f64 <HAL_InitTick>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d052      	beq.n	80034b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	e364      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d032      	beq.n	800347c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003416:	4b43      	ldr	r3, [pc, #268]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a42      	ldr	r2, [pc, #264]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003422:	f7fe fdef 	bl	8002004 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800342a:	f7fe fdeb 	bl	8002004 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e34d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800343c:	4b39      	ldr	r3, [pc, #228]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003448:	4b36      	ldr	r3, [pc, #216]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a35      	ldr	r2, [pc, #212]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800344e:	f043 0308 	orr.w	r3, r3, #8
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b33      	ldr	r3, [pc, #204]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4930      	ldr	r1, [pc, #192]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003466:	4b2f      	ldr	r3, [pc, #188]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	492b      	ldr	r1, [pc, #172]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
 800347a:	e01a      	b.n	80034b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800347c:	4b29      	ldr	r3, [pc, #164]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a28      	ldr	r2, [pc, #160]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003488:	f7fe fdbc 	bl	8002004 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003490:	f7fe fdb8 	bl	8002004 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e31a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1dc>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d073      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_OscConfig+0x21c>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d10e      	bne.n	80034e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d10b      	bne.n	80034e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	4b14      	ldr	r3, [pc, #80]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d063      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2f0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d15f      	bne.n	80035a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e2f7      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f0:	d106      	bne.n	8003500 <HAL_RCC_OscConfig+0x24c>
 80034f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e025      	b.n	800354c <HAL_RCC_OscConfig+0x298>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003508:	d114      	bne.n	8003534 <HAL_RCC_OscConfig+0x280>
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a05      	ldr	r2, [pc, #20]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b03      	ldr	r3, [pc, #12]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a02      	ldr	r2, [pc, #8]	@ (8003524 <HAL_RCC_OscConfig+0x270>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e013      	b.n	800354c <HAL_RCC_OscConfig+0x298>
 8003524:	40021000 	.word	0x40021000
 8003528:	080063f0 	.word	0x080063f0
 800352c:	20000004 	.word	0x20000004
 8003530:	20000008 	.word	0x20000008
 8003534:	4ba0      	ldr	r3, [pc, #640]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a9f      	ldr	r2, [pc, #636]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b9d      	ldr	r3, [pc, #628]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a9c      	ldr	r2, [pc, #624]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800354a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fd56 	bl	8002004 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fd52 	bl	8002004 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	@ 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e2b4      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356e:	4b92      	ldr	r3, [pc, #584]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x2a8>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe fd42 	bl	8002004 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe fd3e 	bl	8002004 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e2a0      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003596:	4b88      	ldr	r3, [pc, #544]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x2d0>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d060      	beq.n	8003674 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_OscConfig+0x310>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d119      	bne.n	80035f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d116      	bne.n	80035f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c4:	4b7c      	ldr	r3, [pc, #496]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_OscConfig+0x328>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e27d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b76      	ldr	r3, [pc, #472]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	4973      	ldr	r1, [pc, #460]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f0:	e040      	b.n	8003674 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d023      	beq.n	8003642 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fa:	4b6f      	ldr	r3, [pc, #444]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6e      	ldr	r2, [pc, #440]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fe fcfd 	bl	8002004 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360e:	f7fe fcf9 	bl	8002004 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e25b      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003620:	4b65      	ldr	r3, [pc, #404]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362c:	4b62      	ldr	r3, [pc, #392]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	495f      	ldr	r1, [pc, #380]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
 8003640:	e018      	b.n	8003674 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003642:	4b5d      	ldr	r3, [pc, #372]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a5c      	ldr	r2, [pc, #368]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800364c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7fe fcd9 	bl	8002004 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe fcd5 	bl	8002004 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e237      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003668:	4b53      	ldr	r3, [pc, #332]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d03c      	beq.n	80036fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01c      	beq.n	80036c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003688:	4b4b      	ldr	r3, [pc, #300]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800368e:	4a4a      	ldr	r2, [pc, #296]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7fe fcb4 	bl	8002004 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a0:	f7fe fcb0 	bl	8002004 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e212      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b2:	4b41      	ldr	r3, [pc, #260]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80036b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ef      	beq.n	80036a0 <HAL_RCC_OscConfig+0x3ec>
 80036c0:	e01b      	b.n	80036fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c2:	4b3d      	ldr	r3, [pc, #244]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80036c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036c8:	4a3b      	ldr	r2, [pc, #236]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d2:	f7fe fc97 	bl	8002004 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036da:	f7fe fc93 	bl	8002004 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1f5      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ec:	4b32      	ldr	r3, [pc, #200]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80036ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ef      	bne.n	80036da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80a6 	beq.w	8003854 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800370c:	4b2a      	ldr	r3, [pc, #168]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800370e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10d      	bne.n	8003734 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b27      	ldr	r3, [pc, #156]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371c:	4a26      	ldr	r2, [pc, #152]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003722:	6593      	str	r3, [r2, #88]	@ 0x58
 8003724:	4b24      	ldr	r3, [pc, #144]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003730:	2301      	movs	r3, #1
 8003732:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003734:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <HAL_RCC_OscConfig+0x508>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d118      	bne.n	8003772 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003740:	4b1e      	ldr	r3, [pc, #120]	@ (80037bc <HAL_RCC_OscConfig+0x508>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1d      	ldr	r2, [pc, #116]	@ (80037bc <HAL_RCC_OscConfig+0x508>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374c:	f7fe fc5a 	bl	8002004 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003754:	f7fe fc56 	bl	8002004 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1b8      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003766:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <HAL_RCC_OscConfig+0x508>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d108      	bne.n	800378c <HAL_RCC_OscConfig+0x4d8>
 800377a:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003780:	4a0d      	ldr	r2, [pc, #52]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800378a:	e029      	b.n	80037e0 <HAL_RCC_OscConfig+0x52c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b05      	cmp	r3, #5
 8003792:	d115      	bne.n	80037c0 <HAL_RCC_OscConfig+0x50c>
 8003794:	4b08      	ldr	r3, [pc, #32]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379a:	4a07      	ldr	r2, [pc, #28]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037a4:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	4a03      	ldr	r2, [pc, #12]	@ (80037b8 <HAL_RCC_OscConfig+0x504>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037b4:	e014      	b.n	80037e0 <HAL_RCC_OscConfig+0x52c>
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40007000 	.word	0x40007000
 80037c0:	4b9d      	ldr	r3, [pc, #628]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	4a9c      	ldr	r2, [pc, #624]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d0:	4b99      	ldr	r3, [pc, #612]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d6:	4a98      	ldr	r2, [pc, #608]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d016      	beq.n	8003816 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7fe fc0c 	bl	8002004 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f0:	f7fe fc08 	bl	8002004 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e168      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003806:	4b8c      	ldr	r3, [pc, #560]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ed      	beq.n	80037f0 <HAL_RCC_OscConfig+0x53c>
 8003814:	e015      	b.n	8003842 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe fbf5 	bl	8002004 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe fbf1 	bl	8002004 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e151      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003834:	4b80      	ldr	r3, [pc, #512]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ed      	bne.n	800381e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003842:	7ffb      	ldrb	r3, [r7, #31]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b7b      	ldr	r3, [pc, #492]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003852:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d03c      	beq.n	80038da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01c      	beq.n	80038a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003868:	4b73      	ldr	r3, [pc, #460]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 800386a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800386e:	4a72      	ldr	r2, [pc, #456]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fe fbc4 	bl	8002004 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003880:	f7fe fbc0 	bl	8002004 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e122      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003892:	4b69      	ldr	r3, [pc, #420]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003894:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ef      	beq.n	8003880 <HAL_RCC_OscConfig+0x5cc>
 80038a0:	e01b      	b.n	80038da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038a2:	4b65      	ldr	r3, [pc, #404]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80038a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038a8:	4a63      	ldr	r2, [pc, #396]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fe fba7 	bl	8002004 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ba:	f7fe fba3 	bl	8002004 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e105      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80038ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ef      	bne.n	80038ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80f9 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	f040 80cf 	bne.w	8003a8c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038ee:	4b52      	ldr	r3, [pc, #328]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f003 0203 	and.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	429a      	cmp	r2, r3
 8003900:	d12c      	bne.n	800395c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	3b01      	subs	r3, #1
 800390e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d123      	bne.n	800395c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d11b      	bne.n	800395c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d113      	bne.n	800395c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	3b01      	subs	r3, #1
 8003942:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d109      	bne.n	800395c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	3b01      	subs	r3, #1
 8003956:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d071      	beq.n	8003a40 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d068      	beq.n	8003a34 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003962:	4b35      	ldr	r3, [pc, #212]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800396e:	4b32      	ldr	r3, [pc, #200]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0ac      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800397e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2d      	ldr	r2, [pc, #180]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003988:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800398a:	f7fe fb3b 	bl	8002004 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe fb37 	bl	8002004 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e099      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	4b24      	ldr	r3, [pc, #144]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b0:	4b21      	ldr	r3, [pc, #132]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	4b21      	ldr	r3, [pc, #132]	@ (8003a3c <HAL_RCC_OscConfig+0x788>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	4311      	orrs	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039ca:	0212      	lsls	r2, r2, #8
 80039cc:	4311      	orrs	r1, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039d2:	0852      	lsrs	r2, r2, #1
 80039d4:	3a01      	subs	r2, #1
 80039d6:	0552      	lsls	r2, r2, #21
 80039d8:	4311      	orrs	r1, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039de:	0852      	lsrs	r2, r2, #1
 80039e0:	3a01      	subs	r2, #1
 80039e2:	0652      	lsls	r2, r2, #25
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039ea:	06d2      	lsls	r2, r2, #27
 80039ec:	430a      	orrs	r2, r1
 80039ee:	4912      	ldr	r1, [pc, #72]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039f4:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 80039fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a00:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a0c      	ldr	r2, [pc, #48]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a0c:	f7fe fafa 	bl	8002004 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fe faf6 	bl	8002004 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e058      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a26:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <HAL_RCC_OscConfig+0x784>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a32:	e050      	b.n	8003ad6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e04f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a40:	4b27      	ldr	r3, [pc, #156]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d144      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a4c:	4b24      	ldr	r3, [pc, #144]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a23      	ldr	r2, [pc, #140]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a58:	4b21      	ldr	r3, [pc, #132]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a20      	ldr	r2, [pc, #128]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a64:	f7fe face 	bl	8002004 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fe faca 	bl	8002004 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e02c      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x7b8>
 8003a8a:	e024      	b.n	8003ad6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d01f      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a92:	4b13      	ldr	r3, [pc, #76]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a12      	ldr	r2, [pc, #72]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003a98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fab1 	bl	8002004 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe faad 	bl	8002004 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e00f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	4905      	ldr	r1, [pc, #20]	@ (8003ae0 <HAL_RCC_OscConfig+0x82c>)
 8003aca:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <HAL_RCC_OscConfig+0x830>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	60cb      	str	r3, [r1, #12]
 8003ad0:	e001      	b.n	8003ad6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	feeefffc 	.word	0xfeeefffc

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e11d      	b.n	8003d3c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b90      	ldr	r3, [pc, #576]	@ (8003d44 <HAL_RCC_ClockConfig+0x25c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8003d44 <HAL_RCC_ClockConfig+0x25c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	498b      	ldr	r1, [pc, #556]	@ (8003d44 <HAL_RCC_ClockConfig+0x25c>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b89      	ldr	r3, [pc, #548]	@ (8003d44 <HAL_RCC_ClockConfig+0x25c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e105      	b.n	8003d3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d010      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	4b81      	ldr	r3, [pc, #516]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d908      	bls.n	8003b5e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	497b      	ldr	r1, [pc, #492]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d079      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d11e      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b72:	4b75      	ldr	r3, [pc, #468]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0dc      	b.n	8003d3c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003b82:	f000 fa09 	bl	8003f98 <RCC_GetSysClockFreqFromPLLSource>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4a70      	ldr	r2, [pc, #448]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d946      	bls.n	8003c1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d140      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b9a:	4b6b      	ldr	r3, [pc, #428]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ba2:	4a69      	ldr	r2, [pc, #420]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003baa:	2380      	movs	r3, #128	@ 0x80
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e035      	b.n	8003c1c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb8:	4b63      	ldr	r3, [pc, #396]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d115      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0b9      	b.n	8003d3c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0ad      	b.n	8003d3c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	4b59      	ldr	r3, [pc, #356]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0a5      	b.n	8003d3c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003bf0:	f000 f8b4 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4a55      	ldr	r2, [pc, #340]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d90f      	bls.n	8003c1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003bfc:	4b52      	ldr	r3, [pc, #328]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c08:	4b4f      	ldr	r3, [pc, #316]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c10:	4a4d      	ldr	r2, [pc, #308]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c16:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 0203 	bic.w	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4947      	ldr	r1, [pc, #284]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c2e:	f7fe f9e9 	bl	8002004 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c36:	f7fe f9e5 	bl	8002004 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e077      	b.n	8003d3c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 020c 	and.w	r2, r3, #12
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d1eb      	bne.n	8003c36 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b80      	cmp	r3, #128	@ 0x80
 8003c62:	d105      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c64:	4b38      	ldr	r3, [pc, #224]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a37      	ldr	r2, [pc, #220]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c6e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	4b31      	ldr	r3, [pc, #196]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d208      	bcs.n	8003c9e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	492b      	ldr	r1, [pc, #172]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9e:	4b29      	ldr	r3, [pc, #164]	@ (8003d44 <HAL_RCC_ClockConfig+0x25c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d210      	bcs.n	8003cce <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cac:	4b25      	ldr	r3, [pc, #148]	@ (8003d44 <HAL_RCC_ClockConfig+0x25c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 020f 	bic.w	r2, r3, #15
 8003cb4:	4923      	ldr	r1, [pc, #140]	@ (8003d44 <HAL_RCC_ClockConfig+0x25c>)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbc:	4b21      	ldr	r3, [pc, #132]	@ (8003d44 <HAL_RCC_ClockConfig+0x25c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e036      	b.n	8003d3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cda:	4b1b      	ldr	r3, [pc, #108]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4918      	ldr	r1, [pc, #96]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf8:	4b13      	ldr	r3, [pc, #76]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4910      	ldr	r1, [pc, #64]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d0c:	f000 f826 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	490c      	ldr	r1, [pc, #48]	@ (8003d50 <HAL_RCC_ClockConfig+0x268>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
 8003d28:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <HAL_RCC_ClockConfig+0x26c>)
 8003d2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <HAL_RCC_ClockConfig+0x270>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe f917 	bl	8001f64 <HAL_InitTick>
 8003d36:	4603      	mov	r3, r0
 8003d38:	73fb      	strb	r3, [r7, #15]

  return status;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	04c4b400 	.word	0x04c4b400
 8003d50:	080063f0 	.word	0x080063f0
 8003d54:	20000004 	.word	0x20000004
 8003d58:	20000008 	.word	0x20000008

08003d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	@ 0x24
 8003d60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d74:	4b3b      	ldr	r3, [pc, #236]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x34>
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d121      	bne.n	8003dce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d11e      	bne.n	8003dce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d90:	4b34      	ldr	r3, [pc, #208]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d107      	bne.n	8003dac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d9c:	4b31      	ldr	r3, [pc, #196]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	e005      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dac:	4b2d      	ldr	r3, [pc, #180]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003db8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10d      	bne.n	8003de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d102      	bne.n	8003dda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dd4:	4b25      	ldr	r3, [pc, #148]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	e004      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003de0:	4b23      	ldr	r3, [pc, #140]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8003de2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d134      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dea:	4b1e      	ldr	r3, [pc, #120]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d003      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0xa6>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d003      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0xac>
 8003e00:	e005      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e02:	4b1a      	ldr	r3, [pc, #104]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e04:	617b      	str	r3, [r7, #20]
      break;
 8003e06:	e005      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e08:	4b19      	ldr	r3, [pc, #100]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e0a:	617b      	str	r3, [r7, #20]
      break;
 8003e0c:	e002      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	617b      	str	r3, [r7, #20]
      break;
 8003e12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e14:	4b13      	ldr	r3, [pc, #76]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	3301      	adds	r3, #1
 8003e20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e22:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	fb03 f202 	mul.w	r2, r3, r2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	0e5b      	lsrs	r3, r3, #25
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	3301      	adds	r3, #1
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e54:	69bb      	ldr	r3, [r7, #24]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3724      	adds	r7, #36	@ 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	08006408 	.word	0x08006408
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	007a1200 	.word	0x007a1200

08003e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e78:	4b03      	ldr	r3, [pc, #12]	@ (8003e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000004 	.word	0x20000004

08003e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e90:	f7ff fff0 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4904      	ldr	r1, [pc, #16]	@ (8003eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08006400 	.word	0x08006400

08003eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ebc:	f7ff ffda 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	0adb      	lsrs	r3, r3, #11
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4904      	ldr	r1, [pc, #16]	@ (8003ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08006400 	.word	0x08006400

08003ee4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ef0:	4b27      	ldr	r3, [pc, #156]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003efc:	f7ff f916 	bl	800312c <HAL_PWREx_GetVoltageRange>
 8003f00:	6178      	str	r0, [r7, #20]
 8003f02:	e014      	b.n	8003f2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f04:	4b22      	ldr	r3, [pc, #136]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f08:	4a21      	ldr	r2, [pc, #132]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f10:	4b1f      	ldr	r3, [pc, #124]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f1c:	f7ff f906 	bl	800312c <HAL_PWREx_GetVoltageRange>
 8003f20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	4a1a      	ldr	r2, [pc, #104]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f34:	d10b      	bne.n	8003f4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b80      	cmp	r3, #128	@ 0x80
 8003f3a:	d913      	bls.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f40:	d902      	bls.n	8003f48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f42:	2302      	movs	r3, #2
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e00d      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f48:	2301      	movs	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e00a      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f52:	d902      	bls.n	8003f5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003f54:	2302      	movs	r3, #2
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	e004      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b70      	cmp	r3, #112	@ 0x70
 8003f5e:	d101      	bne.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f60:	2301      	movs	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 020f 	bic.w	r2, r3, #15
 8003f6c:	4909      	ldr	r1, [pc, #36]	@ (8003f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f74:	4b07      	ldr	r3, [pc, #28]	@ (8003f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d001      	beq.n	8003f86 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40022000 	.word	0x40022000

08003f98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d00b      	beq.n	8003fc6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d825      	bhi.n	8004000 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d008      	beq.n	8003fcc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d11f      	bne.n	8004000 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003fc0:	4b25      	ldr	r3, [pc, #148]	@ (8004058 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003fc2:	613b      	str	r3, [r7, #16]
    break;
 8003fc4:	e01f      	b.n	8004006 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003fc6:	4b25      	ldr	r3, [pc, #148]	@ (800405c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003fc8:	613b      	str	r3, [r7, #16]
    break;
 8003fca:	e01c      	b.n	8004006 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fcc:	4b21      	ldr	r3, [pc, #132]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d107      	bne.n	8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e005      	b.n	8003ff4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8004060 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffc:	613b      	str	r3, [r7, #16]
    break;
 8003ffe:	e002      	b.n	8004006 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
    break;
 8004004:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004006:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	3301      	adds	r3, #1
 8004012:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004014:	4b0f      	ldr	r3, [pc, #60]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	fb03 f202 	mul.w	r2, r3, r2
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800402c:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	0e5b      	lsrs	r3, r3, #25
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	3301      	adds	r3, #1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004046:	683b      	ldr	r3, [r7, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40021000 	.word	0x40021000
 8004058:	00f42400 	.word	0x00f42400
 800405c:	007a1200 	.word	0x007a1200
 8004060:	08006408 	.word	0x08006408

08004064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800406c:	2300      	movs	r3, #0
 800406e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004070:	2300      	movs	r3, #0
 8004072:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800407c:	2b00      	cmp	r3, #0
 800407e:	d040      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004084:	2b80      	cmp	r3, #128	@ 0x80
 8004086:	d02a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004088:	2b80      	cmp	r3, #128	@ 0x80
 800408a:	d825      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800408c:	2b60      	cmp	r3, #96	@ 0x60
 800408e:	d026      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004090:	2b60      	cmp	r3, #96	@ 0x60
 8004092:	d821      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d006      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004098:	2b40      	cmp	r3, #64	@ 0x40
 800409a:	d81d      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d010      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80040a4:	e018      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a6:	4b89      	ldr	r3, [pc, #548]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	4a88      	ldr	r2, [pc, #544]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040b2:	e015      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fb02 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c4:	e00c      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3320      	adds	r3, #32
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fbed 	bl	80048ac <RCCEx_PLLSAI2_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d6:	e003      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	74fb      	strb	r3, [r7, #19]
      break;
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80040de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10b      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e6:	4b79      	ldr	r3, [pc, #484]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040ec:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040f4:	4975      	ldr	r1, [pc, #468]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80040fc:	e001      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d047      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004116:	d030      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411c:	d82a      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800411e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004122:	d02a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004128:	d824      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800412a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412e:	d008      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004134:	d81e      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800413a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800413e:	d010      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004140:	e018      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004142:	4b62      	ldr	r3, [pc, #392]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	4a61      	ldr	r2, [pc, #388]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800414e:	e015      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fab4 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004160:	e00c      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3320      	adds	r3, #32
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fb9f 	bl	80048ac <RCCEx_PLLSAI2_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004172:	e003      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	74fb      	strb	r3, [r7, #19]
      break;
 8004178:	e000      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800417a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004182:	4b52      	ldr	r3, [pc, #328]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004184:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004190:	494e      	ldr	r1, [pc, #312]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004198:	e001      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 809f 	beq.w	80042ea <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ac:	2300      	movs	r3, #0
 80041ae:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b0:	4b46      	ldr	r3, [pc, #280]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	4b41      	ldr	r3, [pc, #260]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	4a40      	ldr	r2, [pc, #256]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d2:	4b3e      	ldr	r3, [pc, #248]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e2:	4b3b      	ldr	r3, [pc, #236]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a3a      	ldr	r2, [pc, #232]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ee:	f7fd ff09 	bl	8002004 <HAL_GetTick>
 80041f2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041f4:	e009      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7fd ff05 	bl	8002004 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d902      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	74fb      	strb	r3, [r7, #19]
        break;
 8004208:	e005      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800420a:	4b31      	ldr	r3, [pc, #196]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0ef      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d15b      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800421c:	4b2b      	ldr	r3, [pc, #172]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004226:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01f      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	429a      	cmp	r2, r3
 8004238:	d019      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800423a:	4b24      	ldr	r3, [pc, #144]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004244:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004246:	4b21      	ldr	r3, [pc, #132]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424c:	4a1f      	ldr	r2, [pc, #124]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800424e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004252:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004256:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425c:	4a1b      	ldr	r2, [pc, #108]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004262:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004266:	4a19      	ldr	r2, [pc, #100]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd fec4 	bl	8002004 <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427e:	e00b      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fd fec0 	bl	8002004 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d902      	bls.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	74fb      	strb	r3, [r7, #19]
            break;
 8004296:	e006      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ec      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10c      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ac:	4b07      	ldr	r3, [pc, #28]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042bc:	4903      	ldr	r1, [pc, #12]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042c4:	e008      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042c6:	7cfb      	ldrb	r3, [r7, #19]
 80042c8:	74bb      	strb	r3, [r7, #18]
 80042ca:	e005      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d8:	7c7b      	ldrb	r3, [r7, #17]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d105      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042de:	4ba0      	ldr	r3, [pc, #640]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e2:	4a9f      	ldr	r2, [pc, #636]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f6:	4b9a      	ldr	r3, [pc, #616]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fc:	f023 0203 	bic.w	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004304:	4996      	ldr	r1, [pc, #600]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004318:	4b91      	ldr	r3, [pc, #580]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f023 020c 	bic.w	r2, r3, #12
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	498e      	ldr	r1, [pc, #568]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800433a:	4b89      	ldr	r3, [pc, #548]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004340:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004348:	4985      	ldr	r1, [pc, #532]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800435c:	4b80      	ldr	r3, [pc, #512]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004362:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436a:	497d      	ldr	r1, [pc, #500]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800437e:	4b78      	ldr	r3, [pc, #480]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004384:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438c:	4974      	ldr	r1, [pc, #464]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ae:	496c      	ldr	r1, [pc, #432]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c2:	4b67      	ldr	r3, [pc, #412]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043d0:	4963      	ldr	r1, [pc, #396]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043f2:	495b      	ldr	r1, [pc, #364]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004406:	4b56      	ldr	r3, [pc, #344]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	4952      	ldr	r1, [pc, #328]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004428:	4b4d      	ldr	r3, [pc, #308]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004436:	494a      	ldr	r1, [pc, #296]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800444a:	4b45      	ldr	r3, [pc, #276]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004450:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004458:	4941      	ldr	r1, [pc, #260]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800446c:	4b3c      	ldr	r3, [pc, #240]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447a:	4939      	ldr	r1, [pc, #228]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d028      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800448e:	4b34      	ldr	r3, [pc, #208]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004494:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449c:	4930      	ldr	r1, [pc, #192]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ac:	d106      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044b8:	60d3      	str	r3, [r2, #12]
 80044ba:	e011      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	2101      	movs	r1, #1
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f8f9 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d04d      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044f4:	d108      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80044f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044fc:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004502:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004506:	e012      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004508:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800450a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800450e:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004510:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004514:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004526:	490e      	ldr	r1, [pc, #56]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004536:	d106      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004538:	4b09      	ldr	r3, [pc, #36]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a08      	ldr	r2, [pc, #32]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800453e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004542:	60d3      	str	r3, [r2, #12]
 8004544:	e020      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800454a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800454e:	d109      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004550:	4b03      	ldr	r3, [pc, #12]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a02      	ldr	r2, [pc, #8]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455a:	60d3      	str	r3, [r2, #12]
 800455c:	e014      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800456c:	d10c      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f8a5 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d028      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004594:	4b4a      	ldr	r3, [pc, #296]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a2:	4947      	ldr	r1, [pc, #284]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045b2:	d106      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b4:	4b42      	ldr	r3, [pc, #264]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a41      	ldr	r2, [pc, #260]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045be:	60d3      	str	r3, [r2, #12]
 80045c0:	e011      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045ca:	d10c      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f876 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80045e2:	7cfb      	ldrb	r3, [r7, #19]
 80045e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01e      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045f2:	4b33      	ldr	r3, [pc, #204]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004602:	492f      	ldr	r1, [pc, #188]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004614:	d10c      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f851 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004626:	7cfb      	ldrb	r3, [r7, #19]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800463c:	4b20      	ldr	r3, [pc, #128]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800463e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004642:	f023 0204 	bic.w	r2, r3, #4
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800464c:	491c      	ldr	r1, [pc, #112]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004660:	4b17      	ldr	r3, [pc, #92]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004666:	f023 0218 	bic.w	r2, r3, #24
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	4913      	ldr	r1, [pc, #76]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d017      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004684:	4b0e      	ldr	r3, [pc, #56]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800468a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004694:	490a      	ldr	r1, [pc, #40]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046a6:	d105      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a04      	ldr	r2, [pc, #16]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000

080046c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046d2:	4b72      	ldr	r3, [pc, #456]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00e      	beq.n	80046fc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046de:	4b6f      	ldr	r3, [pc, #444]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0203 	and.w	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d103      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
       ||
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d142      	bne.n	800477c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
 80046fa:	e03f      	b.n	800477c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d018      	beq.n	8004736 <RCCEx_PLLSAI1_Config+0x72>
 8004704:	2b03      	cmp	r3, #3
 8004706:	d825      	bhi.n	8004754 <RCCEx_PLLSAI1_Config+0x90>
 8004708:	2b01      	cmp	r3, #1
 800470a:	d002      	beq.n	8004712 <RCCEx_PLLSAI1_Config+0x4e>
 800470c:	2b02      	cmp	r3, #2
 800470e:	d009      	beq.n	8004724 <RCCEx_PLLSAI1_Config+0x60>
 8004710:	e020      	b.n	8004754 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004712:	4b62      	ldr	r3, [pc, #392]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d11d      	bne.n	800475a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004722:	e01a      	b.n	800475a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004724:	4b5d      	ldr	r3, [pc, #372]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472c:	2b00      	cmp	r3, #0
 800472e:	d116      	bne.n	800475e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004734:	e013      	b.n	800475e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004736:	4b59      	ldr	r3, [pc, #356]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004742:	4b56      	ldr	r3, [pc, #344]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004752:	e006      	b.n	8004762 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      break;
 8004758:	e004      	b.n	8004764 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800475a:	bf00      	nop
 800475c:	e002      	b.n	8004764 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004762:	bf00      	nop
    }

    if(status == HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800476a:	4b4c      	ldr	r3, [pc, #304]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4949      	ldr	r1, [pc, #292]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004778:	4313      	orrs	r3, r2
 800477a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f040 8086 	bne.w	8004890 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004784:	4b45      	ldr	r3, [pc, #276]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a44      	ldr	r2, [pc, #272]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 800478a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800478e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004790:	f7fd fc38 	bl	8002004 <HAL_GetTick>
 8004794:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004796:	e009      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004798:	f7fd fc34 	bl	8002004 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d902      	bls.n	80047ac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	73fb      	strb	r3, [r7, #15]
        break;
 80047aa:	e005      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ac:	4b3b      	ldr	r3, [pc, #236]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ef      	bne.n	8004798 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d168      	bne.n	8004890 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d113      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c4:	4b35      	ldr	r3, [pc, #212]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	4b35      	ldr	r3, [pc, #212]	@ (80048a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6892      	ldr	r2, [r2, #8]
 80047d0:	0211      	lsls	r1, r2, #8
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68d2      	ldr	r2, [r2, #12]
 80047d6:	06d2      	lsls	r2, r2, #27
 80047d8:	4311      	orrs	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6852      	ldr	r2, [r2, #4]
 80047de:	3a01      	subs	r2, #1
 80047e0:	0112      	lsls	r2, r2, #4
 80047e2:	430a      	orrs	r2, r1
 80047e4:	492d      	ldr	r1, [pc, #180]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	610b      	str	r3, [r1, #16]
 80047ea:	e02d      	b.n	8004848 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d115      	bne.n	800481e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f2:	4b2a      	ldr	r3, [pc, #168]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	4b2b      	ldr	r3, [pc, #172]	@ (80048a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6892      	ldr	r2, [r2, #8]
 80047fe:	0211      	lsls	r1, r2, #8
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6912      	ldr	r2, [r2, #16]
 8004804:	0852      	lsrs	r2, r2, #1
 8004806:	3a01      	subs	r2, #1
 8004808:	0552      	lsls	r2, r2, #21
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6852      	ldr	r2, [r2, #4]
 8004810:	3a01      	subs	r2, #1
 8004812:	0112      	lsls	r2, r2, #4
 8004814:	430a      	orrs	r2, r1
 8004816:	4921      	ldr	r1, [pc, #132]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	610b      	str	r3, [r1, #16]
 800481c:	e014      	b.n	8004848 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800481e:	4b1f      	ldr	r3, [pc, #124]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	4b21      	ldr	r3, [pc, #132]	@ (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004824:	4013      	ands	r3, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6892      	ldr	r2, [r2, #8]
 800482a:	0211      	lsls	r1, r2, #8
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6952      	ldr	r2, [r2, #20]
 8004830:	0852      	lsrs	r2, r2, #1
 8004832:	3a01      	subs	r2, #1
 8004834:	0652      	lsls	r2, r2, #25
 8004836:	4311      	orrs	r1, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6852      	ldr	r2, [r2, #4]
 800483c:	3a01      	subs	r2, #1
 800483e:	0112      	lsls	r2, r2, #4
 8004840:	430a      	orrs	r2, r1
 8004842:	4916      	ldr	r1, [pc, #88]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004844:	4313      	orrs	r3, r2
 8004846:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004848:	4b14      	ldr	r3, [pc, #80]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a13      	ldr	r2, [pc, #76]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 800484e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004852:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fd fbd6 	bl	8002004 <HAL_GetTick>
 8004858:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800485a:	e009      	b.n	8004870 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800485c:	f7fd fbd2 	bl	8002004 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d902      	bls.n	8004870 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	73fb      	strb	r3, [r7, #15]
          break;
 800486e:	e005      	b.n	800487c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004870:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ef      	beq.n	800485c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004882:	4b06      	ldr	r3, [pc, #24]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	4904      	ldr	r1, [pc, #16]	@ (800489c <RCCEx_PLLSAI1_Config+0x1d8>)
 800488c:	4313      	orrs	r3, r2
 800488e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
 80048a0:	07ff800f 	.word	0x07ff800f
 80048a4:	ff9f800f 	.word	0xff9f800f
 80048a8:	f9ff800f 	.word	0xf9ff800f

080048ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ba:	4b72      	ldr	r3, [pc, #456]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0203 	and.w	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d103      	bne.n	80048de <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
       ||
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d142      	bne.n	8004964 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	e03f      	b.n	8004964 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d018      	beq.n	800491e <RCCEx_PLLSAI2_Config+0x72>
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d825      	bhi.n	800493c <RCCEx_PLLSAI2_Config+0x90>
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d002      	beq.n	80048fa <RCCEx_PLLSAI2_Config+0x4e>
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d009      	beq.n	800490c <RCCEx_PLLSAI2_Config+0x60>
 80048f8:	e020      	b.n	800493c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048fa:	4b62      	ldr	r3, [pc, #392]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11d      	bne.n	8004942 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800490a:	e01a      	b.n	8004942 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800490c:	4b5d      	ldr	r3, [pc, #372]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800491c:	e013      	b.n	8004946 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800491e:	4b59      	ldr	r3, [pc, #356]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10f      	bne.n	800494a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800492a:	4b56      	ldr	r3, [pc, #344]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800493a:	e006      	b.n	800494a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      break;
 8004940:	e004      	b.n	800494c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004942:	bf00      	nop
 8004944:	e002      	b.n	800494c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800494a:	bf00      	nop
    }

    if(status == HAL_OK)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d108      	bne.n	8004964 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004952:	4b4c      	ldr	r3, [pc, #304]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4949      	ldr	r1, [pc, #292]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004960:	4313      	orrs	r3, r2
 8004962:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f040 8086 	bne.w	8004a78 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800496c:	4b45      	ldr	r3, [pc, #276]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a44      	ldr	r2, [pc, #272]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004978:	f7fd fb44 	bl	8002004 <HAL_GetTick>
 800497c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800497e:	e009      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004980:	f7fd fb40 	bl	8002004 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d902      	bls.n	8004994 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	73fb      	strb	r3, [r7, #15]
        break;
 8004992:	e005      	b.n	80049a0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004994:	4b3b      	ldr	r3, [pc, #236]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ef      	bne.n	8004980 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d168      	bne.n	8004a78 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d113      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049ac:	4b35      	ldr	r3, [pc, #212]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	4b35      	ldr	r3, [pc, #212]	@ (8004a88 <RCCEx_PLLSAI2_Config+0x1dc>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6892      	ldr	r2, [r2, #8]
 80049b8:	0211      	lsls	r1, r2, #8
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68d2      	ldr	r2, [r2, #12]
 80049be:	06d2      	lsls	r2, r2, #27
 80049c0:	4311      	orrs	r1, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6852      	ldr	r2, [r2, #4]
 80049c6:	3a01      	subs	r2, #1
 80049c8:	0112      	lsls	r2, r2, #4
 80049ca:	430a      	orrs	r2, r1
 80049cc:	492d      	ldr	r1, [pc, #180]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	614b      	str	r3, [r1, #20]
 80049d2:	e02d      	b.n	8004a30 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d115      	bne.n	8004a06 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049da:	4b2a      	ldr	r3, [pc, #168]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	4b2b      	ldr	r3, [pc, #172]	@ (8004a8c <RCCEx_PLLSAI2_Config+0x1e0>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6892      	ldr	r2, [r2, #8]
 80049e6:	0211      	lsls	r1, r2, #8
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6912      	ldr	r2, [r2, #16]
 80049ec:	0852      	lsrs	r2, r2, #1
 80049ee:	3a01      	subs	r2, #1
 80049f0:	0552      	lsls	r2, r2, #21
 80049f2:	4311      	orrs	r1, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6852      	ldr	r2, [r2, #4]
 80049f8:	3a01      	subs	r2, #1
 80049fa:	0112      	lsls	r2, r2, #4
 80049fc:	430a      	orrs	r2, r1
 80049fe:	4921      	ldr	r1, [pc, #132]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	614b      	str	r3, [r1, #20]
 8004a04:	e014      	b.n	8004a30 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a06:	4b1f      	ldr	r3, [pc, #124]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	4b21      	ldr	r3, [pc, #132]	@ (8004a90 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6892      	ldr	r2, [r2, #8]
 8004a12:	0211      	lsls	r1, r2, #8
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6952      	ldr	r2, [r2, #20]
 8004a18:	0852      	lsrs	r2, r2, #1
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	0652      	lsls	r2, r2, #25
 8004a1e:	4311      	orrs	r1, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6852      	ldr	r2, [r2, #4]
 8004a24:	3a01      	subs	r2, #1
 8004a26:	0112      	lsls	r2, r2, #4
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	4916      	ldr	r1, [pc, #88]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a30:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a13      	ldr	r2, [pc, #76]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3c:	f7fd fae2 	bl	8002004 <HAL_GetTick>
 8004a40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a42:	e009      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a44:	f7fd fade 	bl	8002004 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d902      	bls.n	8004a58 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	73fb      	strb	r3, [r7, #15]
          break;
 8004a56:	e005      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a58:	4b0a      	ldr	r3, [pc, #40]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ef      	beq.n	8004a44 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a6a:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a6c:	695a      	ldr	r2, [r3, #20]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	4904      	ldr	r1, [pc, #16]	@ (8004a84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	07ff800f 	.word	0x07ff800f
 8004a8c:	ff9f800f 	.word	0xff9f800f
 8004a90:	f9ff800f 	.word	0xf9ff800f

08004a94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e095      	b.n	8004bd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d108      	bne.n	8004ac0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ab6:	d009      	beq.n	8004acc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	61da      	str	r2, [r3, #28]
 8004abe:	e005      	b.n	8004acc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fd f854 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b0c:	d902      	bls.n	8004b14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e002      	b.n	8004b1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004b22:	d007      	beq.n	8004b34 <HAL_SPI_Init+0xa0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	ea42 0103 	orr.w	r1, r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	0c1b      	lsrs	r3, r3, #16
 8004b90:	f003 0204 	and.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004bb0:	ea42 0103 	orr.w	r1, r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b088      	sub	sp, #32
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_SPI_Transmit+0x22>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e15f      	b.n	8004ebc <HAL_SPI_Transmit+0x2e2>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c04:	f7fd f9fe 	bl	8002004 <HAL_GetTick>
 8004c08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c1e:	e148      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_SPI_Transmit+0x52>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c30:	e13f      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2203      	movs	r2, #3
 8004c36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c7c:	d10f      	bne.n	8004c9e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca8:	2b40      	cmp	r3, #64	@ 0x40
 8004caa:	d007      	beq.n	8004cbc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cc4:	d94f      	bls.n	8004d66 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_SPI_Transmit+0xfa>
 8004cce:	8afb      	ldrh	r3, [r7, #22]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d142      	bne.n	8004d5a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	1c9a      	adds	r2, r3, #2
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cf8:	e02f      	b.n	8004d5a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d112      	bne.n	8004d2e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	881a      	ldrh	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d2c:	e015      	b.n	8004d5a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d2e:	f7fd f969 	bl	8002004 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d803      	bhi.n	8004d46 <HAL_SPI_Transmit+0x16c>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d44:	d102      	bne.n	8004d4c <HAL_SPI_Transmit+0x172>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004d58:	e0ab      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ca      	bne.n	8004cfa <HAL_SPI_Transmit+0x120>
 8004d64:	e080      	b.n	8004e68 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_SPI_Transmit+0x19a>
 8004d6e:	8afb      	ldrh	r3, [r7, #22]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d174      	bne.n	8004e5e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d912      	bls.n	8004da4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d82:	881a      	ldrh	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	1c9a      	adds	r2, r3, #2
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b02      	subs	r3, #2
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004da2:	e05c      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	7812      	ldrb	r2, [r2, #0]
 8004db0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004dca:	e048      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d12b      	bne.n	8004e32 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d912      	bls.n	8004e0a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	881a      	ldrh	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	1c9a      	adds	r2, r3, #2
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b02      	subs	r3, #2
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e08:	e029      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e30:	e015      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e32:	f7fd f8e7 	bl	8002004 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d803      	bhi.n	8004e4a <HAL_SPI_Transmit+0x270>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e48:	d102      	bne.n	8004e50 <HAL_SPI_Transmit+0x276>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004e5c:	e029      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1b1      	bne.n	8004dcc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f947 	bl	8005100 <SPI_EndRxTxTransaction>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e003      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004eba:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ed4:	f7fd f896 	bl	8002004 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ee4:	f7fd f88e 	bl	8002004 <HAL_GetTick>
 8004ee8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eea:	4b39      	ldr	r3, [pc, #228]	@ (8004fd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	015b      	lsls	r3, r3, #5
 8004ef0:	0d1b      	lsrs	r3, r3, #20
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
 8004ef8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004efa:	e054      	b.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f02:	d050      	beq.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f04:	f7fd f87e 	bl	8002004 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d902      	bls.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d13d      	bne.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f32:	d111      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f3c:	d004      	beq.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f46:	d107      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f60:	d10f      	bne.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e017      	b.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d19b      	bne.n	8004efc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000004 	.word	0x20000004

08004fd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	@ 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fe6:	f7fd f80d 	bl	8002004 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004ff6:	f7fd f805 	bl	8002004 <HAL_GetTick>
 8004ffa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005004:	4b3d      	ldr	r3, [pc, #244]	@ (80050fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	00da      	lsls	r2, r3, #3
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	0d1b      	lsrs	r3, r3, #20
 8005014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800501c:	e060      	b.n	80050e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005024:	d107      	bne.n	8005036 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005034:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800503c:	d050      	beq.n	80050e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800503e:	f7fc ffe1 	bl	8002004 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800504a:	429a      	cmp	r2, r3
 800504c:	d902      	bls.n	8005054 <SPI_WaitFifoStateUntilTimeout+0x80>
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d13d      	bne.n	80050d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005062:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800506c:	d111      	bne.n	8005092 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005076:	d004      	beq.n	8005082 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005080:	d107      	bne.n	8005092 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005090:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800509a:	d10f      	bne.n	80050bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e010      	b.n	80050f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	3b01      	subs	r3, #1
 80050de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4013      	ands	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d196      	bne.n	800501e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3728      	adds	r7, #40	@ 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000004 	.word	0x20000004

08005100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ff5b 	bl	8004fd4 <SPI_WaitFifoStateUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e027      	b.n	8005184 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2200      	movs	r2, #0
 800513c:	2180      	movs	r1, #128	@ 0x80
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff fec0 	bl	8004ec4 <SPI_WaitFlagStateUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e014      	b.n	8005184 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2200      	movs	r2, #0
 8005162:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff ff34 	bl	8004fd4 <SPI_WaitFifoStateUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e000      	b.n	8005184 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e042      	b.n	8005224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fc fd65 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2224      	movs	r2, #36	@ 0x24
 80051ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fb24 	bl	8005824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f825 	bl	800522c <UART_SetConfig>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e01b      	b.n	8005224 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800520a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fba3 	bl	8005968 <UART_CheckIdleState>
 8005222:	4603      	mov	r3, r0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800522c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005230:	b08c      	sub	sp, #48	@ 0x30
 8005232:	af00      	add	r7, sp, #0
 8005234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	431a      	orrs	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	431a      	orrs	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	4313      	orrs	r3, r2
 8005252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4baa      	ldr	r3, [pc, #680]	@ (8005504 <UART_SetConfig+0x2d8>)
 800525c:	4013      	ands	r3, r2
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005264:	430b      	orrs	r3, r1
 8005266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a9f      	ldr	r2, [pc, #636]	@ (8005508 <UART_SetConfig+0x2dc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005294:	4313      	orrs	r3, r2
 8005296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80052a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	6812      	ldr	r2, [r2, #0]
 80052aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ac:	430b      	orrs	r3, r1
 80052ae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b6:	f023 010f 	bic.w	r1, r3, #15
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a90      	ldr	r2, [pc, #576]	@ (800550c <UART_SetConfig+0x2e0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d125      	bne.n	800531c <UART_SetConfig+0xf0>
 80052d0:	4b8f      	ldr	r3, [pc, #572]	@ (8005510 <UART_SetConfig+0x2e4>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d81a      	bhi.n	8005314 <UART_SetConfig+0xe8>
 80052de:	a201      	add	r2, pc, #4	@ (adr r2, 80052e4 <UART_SetConfig+0xb8>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005305 	.word	0x08005305
 80052ec:	080052fd 	.word	0x080052fd
 80052f0:	0800530d 	.word	0x0800530d
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fa:	e116      	b.n	800552a <UART_SetConfig+0x2fe>
 80052fc:	2302      	movs	r3, #2
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005302:	e112      	b.n	800552a <UART_SetConfig+0x2fe>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530a:	e10e      	b.n	800552a <UART_SetConfig+0x2fe>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005312:	e10a      	b.n	800552a <UART_SetConfig+0x2fe>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531a:	e106      	b.n	800552a <UART_SetConfig+0x2fe>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a7c      	ldr	r2, [pc, #496]	@ (8005514 <UART_SetConfig+0x2e8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d138      	bne.n	8005398 <UART_SetConfig+0x16c>
 8005326:	4b7a      	ldr	r3, [pc, #488]	@ (8005510 <UART_SetConfig+0x2e4>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d82d      	bhi.n	8005390 <UART_SetConfig+0x164>
 8005334:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <UART_SetConfig+0x110>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005371 	.word	0x08005371
 8005340:	08005391 	.word	0x08005391
 8005344:	08005391 	.word	0x08005391
 8005348:	08005391 	.word	0x08005391
 800534c:	08005381 	.word	0x08005381
 8005350:	08005391 	.word	0x08005391
 8005354:	08005391 	.word	0x08005391
 8005358:	08005391 	.word	0x08005391
 800535c:	08005379 	.word	0x08005379
 8005360:	08005391 	.word	0x08005391
 8005364:	08005391 	.word	0x08005391
 8005368:	08005391 	.word	0x08005391
 800536c:	08005389 	.word	0x08005389
 8005370:	2300      	movs	r3, #0
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005376:	e0d8      	b.n	800552a <UART_SetConfig+0x2fe>
 8005378:	2302      	movs	r3, #2
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537e:	e0d4      	b.n	800552a <UART_SetConfig+0x2fe>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005386:	e0d0      	b.n	800552a <UART_SetConfig+0x2fe>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538e:	e0cc      	b.n	800552a <UART_SetConfig+0x2fe>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005396:	e0c8      	b.n	800552a <UART_SetConfig+0x2fe>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a5e      	ldr	r2, [pc, #376]	@ (8005518 <UART_SetConfig+0x2ec>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d125      	bne.n	80053ee <UART_SetConfig+0x1c2>
 80053a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005510 <UART_SetConfig+0x2e4>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053ac:	2b30      	cmp	r3, #48	@ 0x30
 80053ae:	d016      	beq.n	80053de <UART_SetConfig+0x1b2>
 80053b0:	2b30      	cmp	r3, #48	@ 0x30
 80053b2:	d818      	bhi.n	80053e6 <UART_SetConfig+0x1ba>
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d00a      	beq.n	80053ce <UART_SetConfig+0x1a2>
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d814      	bhi.n	80053e6 <UART_SetConfig+0x1ba>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <UART_SetConfig+0x19a>
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d008      	beq.n	80053d6 <UART_SetConfig+0x1aa>
 80053c4:	e00f      	b.n	80053e6 <UART_SetConfig+0x1ba>
 80053c6:	2300      	movs	r3, #0
 80053c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053cc:	e0ad      	b.n	800552a <UART_SetConfig+0x2fe>
 80053ce:	2302      	movs	r3, #2
 80053d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d4:	e0a9      	b.n	800552a <UART_SetConfig+0x2fe>
 80053d6:	2304      	movs	r3, #4
 80053d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053dc:	e0a5      	b.n	800552a <UART_SetConfig+0x2fe>
 80053de:	2308      	movs	r3, #8
 80053e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e4:	e0a1      	b.n	800552a <UART_SetConfig+0x2fe>
 80053e6:	2310      	movs	r3, #16
 80053e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ec:	e09d      	b.n	800552a <UART_SetConfig+0x2fe>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a4a      	ldr	r2, [pc, #296]	@ (800551c <UART_SetConfig+0x2f0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d125      	bne.n	8005444 <UART_SetConfig+0x218>
 80053f8:	4b45      	ldr	r3, [pc, #276]	@ (8005510 <UART_SetConfig+0x2e4>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005402:	2bc0      	cmp	r3, #192	@ 0xc0
 8005404:	d016      	beq.n	8005434 <UART_SetConfig+0x208>
 8005406:	2bc0      	cmp	r3, #192	@ 0xc0
 8005408:	d818      	bhi.n	800543c <UART_SetConfig+0x210>
 800540a:	2b80      	cmp	r3, #128	@ 0x80
 800540c:	d00a      	beq.n	8005424 <UART_SetConfig+0x1f8>
 800540e:	2b80      	cmp	r3, #128	@ 0x80
 8005410:	d814      	bhi.n	800543c <UART_SetConfig+0x210>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <UART_SetConfig+0x1f0>
 8005416:	2b40      	cmp	r3, #64	@ 0x40
 8005418:	d008      	beq.n	800542c <UART_SetConfig+0x200>
 800541a:	e00f      	b.n	800543c <UART_SetConfig+0x210>
 800541c:	2300      	movs	r3, #0
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005422:	e082      	b.n	800552a <UART_SetConfig+0x2fe>
 8005424:	2302      	movs	r3, #2
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542a:	e07e      	b.n	800552a <UART_SetConfig+0x2fe>
 800542c:	2304      	movs	r3, #4
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005432:	e07a      	b.n	800552a <UART_SetConfig+0x2fe>
 8005434:	2308      	movs	r3, #8
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543a:	e076      	b.n	800552a <UART_SetConfig+0x2fe>
 800543c:	2310      	movs	r3, #16
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005442:	e072      	b.n	800552a <UART_SetConfig+0x2fe>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a35      	ldr	r2, [pc, #212]	@ (8005520 <UART_SetConfig+0x2f4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d12a      	bne.n	80054a4 <UART_SetConfig+0x278>
 800544e:	4b30      	ldr	r3, [pc, #192]	@ (8005510 <UART_SetConfig+0x2e4>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005454:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005458:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800545c:	d01a      	beq.n	8005494 <UART_SetConfig+0x268>
 800545e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005462:	d81b      	bhi.n	800549c <UART_SetConfig+0x270>
 8005464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005468:	d00c      	beq.n	8005484 <UART_SetConfig+0x258>
 800546a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800546e:	d815      	bhi.n	800549c <UART_SetConfig+0x270>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <UART_SetConfig+0x250>
 8005474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005478:	d008      	beq.n	800548c <UART_SetConfig+0x260>
 800547a:	e00f      	b.n	800549c <UART_SetConfig+0x270>
 800547c:	2300      	movs	r3, #0
 800547e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005482:	e052      	b.n	800552a <UART_SetConfig+0x2fe>
 8005484:	2302      	movs	r3, #2
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800548a:	e04e      	b.n	800552a <UART_SetConfig+0x2fe>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005492:	e04a      	b.n	800552a <UART_SetConfig+0x2fe>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800549a:	e046      	b.n	800552a <UART_SetConfig+0x2fe>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a2:	e042      	b.n	800552a <UART_SetConfig+0x2fe>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a17      	ldr	r2, [pc, #92]	@ (8005508 <UART_SetConfig+0x2dc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d13a      	bne.n	8005524 <UART_SetConfig+0x2f8>
 80054ae:	4b18      	ldr	r3, [pc, #96]	@ (8005510 <UART_SetConfig+0x2e4>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054bc:	d01a      	beq.n	80054f4 <UART_SetConfig+0x2c8>
 80054be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054c2:	d81b      	bhi.n	80054fc <UART_SetConfig+0x2d0>
 80054c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c8:	d00c      	beq.n	80054e4 <UART_SetConfig+0x2b8>
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ce:	d815      	bhi.n	80054fc <UART_SetConfig+0x2d0>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <UART_SetConfig+0x2b0>
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d8:	d008      	beq.n	80054ec <UART_SetConfig+0x2c0>
 80054da:	e00f      	b.n	80054fc <UART_SetConfig+0x2d0>
 80054dc:	2300      	movs	r3, #0
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e2:	e022      	b.n	800552a <UART_SetConfig+0x2fe>
 80054e4:	2302      	movs	r3, #2
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ea:	e01e      	b.n	800552a <UART_SetConfig+0x2fe>
 80054ec:	2304      	movs	r3, #4
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f2:	e01a      	b.n	800552a <UART_SetConfig+0x2fe>
 80054f4:	2308      	movs	r3, #8
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054fa:	e016      	b.n	800552a <UART_SetConfig+0x2fe>
 80054fc:	2310      	movs	r3, #16
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005502:	e012      	b.n	800552a <UART_SetConfig+0x2fe>
 8005504:	cfff69f3 	.word	0xcfff69f3
 8005508:	40008000 	.word	0x40008000
 800550c:	40013800 	.word	0x40013800
 8005510:	40021000 	.word	0x40021000
 8005514:	40004400 	.word	0x40004400
 8005518:	40004800 	.word	0x40004800
 800551c:	40004c00 	.word	0x40004c00
 8005520:	40005000 	.word	0x40005000
 8005524:	2310      	movs	r3, #16
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4aae      	ldr	r2, [pc, #696]	@ (80057e8 <UART_SetConfig+0x5bc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	f040 8097 	bne.w	8005664 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005536:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800553a:	2b08      	cmp	r3, #8
 800553c:	d823      	bhi.n	8005586 <UART_SetConfig+0x35a>
 800553e:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <UART_SetConfig+0x318>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	08005569 	.word	0x08005569
 8005548:	08005587 	.word	0x08005587
 800554c:	08005571 	.word	0x08005571
 8005550:	08005587 	.word	0x08005587
 8005554:	08005577 	.word	0x08005577
 8005558:	08005587 	.word	0x08005587
 800555c:	08005587 	.word	0x08005587
 8005560:	08005587 	.word	0x08005587
 8005564:	0800557f 	.word	0x0800557f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005568:	f7fe fc90 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 800556c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800556e:	e010      	b.n	8005592 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005570:	4b9e      	ldr	r3, [pc, #632]	@ (80057ec <UART_SetConfig+0x5c0>)
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005574:	e00d      	b.n	8005592 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7fe fbf1 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 800557a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800557c:	e009      	b.n	8005592 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005584:	e005      	b.n	8005592 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005590:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8130 	beq.w	80057fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	4a94      	ldr	r2, [pc, #592]	@ (80057f0 <UART_SetConfig+0x5c4>)
 80055a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d305      	bcc.n	80055ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d903      	bls.n	80055d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055d0:	e113      	b.n	80057fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	2200      	movs	r2, #0
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	60fa      	str	r2, [r7, #12]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	4a84      	ldr	r2, [pc, #528]	@ (80057f0 <UART_SetConfig+0x5c4>)
 80055e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2200      	movs	r2, #0
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055f4:	f7fa fe02 	bl	80001fc <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4610      	mov	r0, r2
 80055fe:	4619      	mov	r1, r3
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	020b      	lsls	r3, r1, #8
 800560a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800560e:	0202      	lsls	r2, r0, #8
 8005610:	6979      	ldr	r1, [r7, #20]
 8005612:	6849      	ldr	r1, [r1, #4]
 8005614:	0849      	lsrs	r1, r1, #1
 8005616:	2000      	movs	r0, #0
 8005618:	460c      	mov	r4, r1
 800561a:	4605      	mov	r5, r0
 800561c:	eb12 0804 	adds.w	r8, r2, r4
 8005620:	eb43 0905 	adc.w	r9, r3, r5
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	469a      	mov	sl, r3
 800562c:	4693      	mov	fp, r2
 800562e:	4652      	mov	r2, sl
 8005630:	465b      	mov	r3, fp
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	f7fa fde1 	bl	80001fc <__aeabi_uldivmod>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4613      	mov	r3, r2
 8005640:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005648:	d308      	bcc.n	800565c <UART_SetConfig+0x430>
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005650:	d204      	bcs.n	800565c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a3a      	ldr	r2, [r7, #32]
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	e0ce      	b.n	80057fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005662:	e0ca      	b.n	80057fa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800566c:	d166      	bne.n	800573c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800566e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005672:	2b08      	cmp	r3, #8
 8005674:	d827      	bhi.n	80056c6 <UART_SetConfig+0x49a>
 8005676:	a201      	add	r2, pc, #4	@ (adr r2, 800567c <UART_SetConfig+0x450>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe fbf4 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 80056a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056a6:	e014      	b.n	80056d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fe fc06 	bl	8003eb8 <HAL_RCC_GetPCLK2Freq>
 80056ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056ae:	e010      	b.n	80056d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b4e      	ldr	r3, [pc, #312]	@ (80057ec <UART_SetConfig+0x5c0>)
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056b4:	e00d      	b.n	80056d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7fe fb51 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 80056ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056bc:	e009      	b.n	80056d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056c4:	e005      	b.n	80056d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8090 	beq.w	80057fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	4a44      	ldr	r2, [pc, #272]	@ (80057f0 <UART_SetConfig+0x5c4>)
 80056e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ec:	005a      	lsls	r2, r3, #1
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	441a      	add	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	2b0f      	cmp	r3, #15
 8005704:	d916      	bls.n	8005734 <UART_SetConfig+0x508>
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800570c:	d212      	bcs.n	8005734 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f023 030f 	bic.w	r3, r3, #15
 8005716:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	b29b      	uxth	r3, r3
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	b29a      	uxth	r2, r3
 8005724:	8bfb      	ldrh	r3, [r7, #30]
 8005726:	4313      	orrs	r3, r2
 8005728:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	8bfa      	ldrh	r2, [r7, #30]
 8005730:	60da      	str	r2, [r3, #12]
 8005732:	e062      	b.n	80057fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800573a:	e05e      	b.n	80057fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800573c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005740:	2b08      	cmp	r3, #8
 8005742:	d828      	bhi.n	8005796 <UART_SetConfig+0x56a>
 8005744:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <UART_SetConfig+0x520>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	08005771 	.word	0x08005771
 8005750:	08005779 	.word	0x08005779
 8005754:	08005781 	.word	0x08005781
 8005758:	08005797 	.word	0x08005797
 800575c:	08005787 	.word	0x08005787
 8005760:	08005797 	.word	0x08005797
 8005764:	08005797 	.word	0x08005797
 8005768:	08005797 	.word	0x08005797
 800576c:	0800578f 	.word	0x0800578f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005770:	f7fe fb8c 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8005774:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005776:	e014      	b.n	80057a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005778:	f7fe fb9e 	bl	8003eb8 <HAL_RCC_GetPCLK2Freq>
 800577c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800577e:	e010      	b.n	80057a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005780:	4b1a      	ldr	r3, [pc, #104]	@ (80057ec <UART_SetConfig+0x5c0>)
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005784:	e00d      	b.n	80057a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005786:	f7fe fae9 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 800578a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800578c:	e009      	b.n	80057a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005794:	e005      	b.n	80057a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057a0:	bf00      	nop
    }

    if (pclk != 0U)
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d028      	beq.n	80057fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ac:	4a10      	ldr	r2, [pc, #64]	@ (80057f0 <UART_SetConfig+0x5c4>)
 80057ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b2:	461a      	mov	r2, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	441a      	add	r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	d910      	bls.n	80057f4 <UART_SetConfig+0x5c8>
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d8:	d20c      	bcs.n	80057f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	b29a      	uxth	r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	e009      	b.n	80057fa <UART_SetConfig+0x5ce>
 80057e6:	bf00      	nop
 80057e8:	40008000 	.word	0x40008000
 80057ec:	00f42400 	.word	0x00f42400
 80057f0:	08006438 	.word	0x08006438
      }
      else
      {
        ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2201      	movs	r2, #1
 8005806:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2200      	movs	r2, #0
 8005814:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005816:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800581a:	4618      	mov	r0, r3
 800581c:	3730      	adds	r7, #48	@ 0x30
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01a      	beq.n	800593a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005922:	d10a      	bne.n	800593a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  }
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b098      	sub	sp, #96	@ 0x60
 800596c:	af02      	add	r7, sp, #8
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005978:	f7fc fb44 	bl	8002004 <HAL_GetTick>
 800597c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b08      	cmp	r3, #8
 800598a:	d12f      	bne.n	80059ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800598c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005994:	2200      	movs	r2, #0
 8005996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f88e 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d022      	beq.n	80059ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e063      	b.n	8005ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d149      	bne.n	8005a8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a02:	2200      	movs	r2, #0
 8005a04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f857 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d03c      	beq.n	8005a8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	623b      	str	r3, [r7, #32]
   return(result);
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e6      	bne.n	8005a14 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3308      	adds	r3, #8
 8005a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a66:	61fa      	str	r2, [r7, #28]
 8005a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	69b9      	ldr	r1, [r7, #24]
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	617b      	str	r3, [r7, #20]
   return(result);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e012      	b.n	8005ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3758      	adds	r7, #88	@ 0x58
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005acc:	e049      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ad4:	d045      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad6:	f7fc fa95 	bl	8002004 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <UART_WaitOnFlagUntilTimeout+0x30>
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e048      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d031      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d110      	bne.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2208      	movs	r2, #8
 8005b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f838 	bl	8005b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e029      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b3c:	d111      	bne.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f81e 	bl	8005b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e00f      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d0a6      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b095      	sub	sp, #84	@ 0x54
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e6      	bne.n	8005b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3308      	adds	r3, #8
 8005be6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005be8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e3      	bne.n	8005bc4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d118      	bne.n	8005c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 0310 	bic.w	r3, r3, #16
 8005c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6979      	ldr	r1, [r7, #20]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e6      	bne.n	8005c04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c4a:	bf00      	nop
 8005c4c:	3754      	adds	r7, #84	@ 0x54
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_UARTEx_DisableFifoMode+0x16>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e027      	b.n	8005cbc <HAL_UARTEx_DisableFifoMode+0x66>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	@ 0x24
 8005c78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0201 	bic.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e02d      	b.n	8005d3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2224      	movs	r2, #36	@ 0x24
 8005cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f84f 	bl	8005dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e02d      	b.n	8005db8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2224      	movs	r2, #36	@ 0x24
 8005d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f811 	bl	8005dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d108      	bne.n	8005de2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005de0:	e031      	b.n	8005e46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005de2:	2308      	movs	r3, #8
 8005de4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005de6:	2308      	movs	r3, #8
 8005de8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	0e5b      	lsrs	r3, r3, #25
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	0f5b      	lsrs	r3, r3, #29
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e0a:	7bbb      	ldrb	r3, [r7, #14]
 8005e0c:	7b3a      	ldrb	r2, [r7, #12]
 8005e0e:	4911      	ldr	r1, [pc, #68]	@ (8005e54 <UARTEx_SetNbDataToProcess+0x94>)
 8005e10:	5c8a      	ldrb	r2, [r1, r2]
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e16:	7b3a      	ldrb	r2, [r7, #12]
 8005e18:	490f      	ldr	r1, [pc, #60]	@ (8005e58 <UARTEx_SetNbDataToProcess+0x98>)
 8005e1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	7b7a      	ldrb	r2, [r7, #13]
 8005e2c:	4909      	ldr	r1, [pc, #36]	@ (8005e54 <UARTEx_SetNbDataToProcess+0x94>)
 8005e2e:	5c8a      	ldrb	r2, [r1, r2]
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e34:	7b7a      	ldrb	r2, [r7, #13]
 8005e36:	4908      	ldr	r1, [pc, #32]	@ (8005e58 <UARTEx_SetNbDataToProcess+0x98>)
 8005e38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	08006450 	.word	0x08006450
 8005e58:	08006458 	.word	0x08006458

08005e5c <memset>:
 8005e5c:	4402      	add	r2, r0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d100      	bne.n	8005e66 <memset+0xa>
 8005e64:	4770      	bx	lr
 8005e66:	f803 1b01 	strb.w	r1, [r3], #1
 8005e6a:	e7f9      	b.n	8005e60 <memset+0x4>

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ea4 <__libc_init_array+0x38>)
 8005e70:	4c0d      	ldr	r4, [pc, #52]	@ (8005ea8 <__libc_init_array+0x3c>)
 8005e72:	1b64      	subs	r4, r4, r5
 8005e74:	10a4      	asrs	r4, r4, #2
 8005e76:	2600      	movs	r6, #0
 8005e78:	42a6      	cmp	r6, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005eac <__libc_init_array+0x40>)
 8005e7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005eb0 <__libc_init_array+0x44>)
 8005e80:	f000 f818 	bl	8005eb4 <_init>
 8005e84:	1b64      	subs	r4, r4, r5
 8005e86:	10a4      	asrs	r4, r4, #2
 8005e88:	2600      	movs	r6, #0
 8005e8a:	42a6      	cmp	r6, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e94:	4798      	blx	r3
 8005e96:	3601      	adds	r6, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9e:	4798      	blx	r3
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	08006468 	.word	0x08006468
 8005ea8:	08006468 	.word	0x08006468
 8005eac:	08006468 	.word	0x08006468
 8005eb0:	0800646c 	.word	0x0800646c

08005eb4 <_init>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr

08005ec0 <_fini>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr
