
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005ea4  08005ea4  00006ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f38  08005f38  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f38  08005f38  00006f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f40  08005f40  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f40  08005f40  00006f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f44  08005f44  00006f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f48  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  2000000c  08005f54  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08005f54  000074d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151fe  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c95  00000000  00000000  0001c23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc7  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b9d6  00000000  00000000  00020e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017065  00000000  00000000  0004c82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103b98  00000000  00000000  00063892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016742a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c0  00000000  00000000  00167470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0016be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005e8c 	.word	0x08005e8c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005e8c 	.word	0x08005e8c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <addNewEntry>:


void pillsinit(){
	numPills = 0;
}
void addNewEntry(uint8_t dispenserNum, char * name, uint8_t dayofWeek, uint8_t hour, uint8_t min){
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6039      	str	r1, [r7, #0]
 80004f4:	4611      	mov	r1, r2
 80004f6:	461a      	mov	r2, r3
 80004f8:	4603      	mov	r3, r0
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	460b      	mov	r3, r1
 80004fe:	71bb      	strb	r3, [r7, #6]
 8000500:	4613      	mov	r3, r2
 8000502:	717b      	strb	r3, [r7, #5]
	//uint8_t ID; uint8_t dispenserNum; char * name; uint8_t dayofWeek; uint8_t hour; uint8_t min; uint8_t taken;
	pillEntry wew = {numPills, dispenserNum, name, dayofWeek, hour, min, 1};
 8000504:	4b15      	ldr	r3, [pc, #84]	@ (800055c <addNewEntry+0x70>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	733b      	strb	r3, [r7, #12]
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	737b      	strb	r3, [r7, #13]
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	753b      	strb	r3, [r7, #20]
 8000516:	797b      	ldrb	r3, [r7, #5]
 8000518:	757b      	strb	r3, [r7, #21]
 800051a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800051e:	75bb      	strb	r3, [r7, #22]
 8000520:	2301      	movs	r3, #1
 8000522:	75fb      	strb	r3, [r7, #23]
	pillList[numPills] = wew;
 8000524:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <addNewEntry+0x70>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	4a0d      	ldr	r2, [pc, #52]	@ (8000560 <addNewEntry+0x74>)
 800052c:	460b      	mov	r3, r1
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	440b      	add	r3, r1
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	461c      	mov	r4, r3
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	numPills++;
 8000544:	4b05      	ldr	r3, [pc, #20]	@ (800055c <addNewEntry+0x70>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b03      	ldr	r3, [pc, #12]	@ (800055c <addNewEntry+0x70>)
 800054e:	701a      	strb	r2, [r3, #0]
	sortEntries();
 8000550:	f000 f808 	bl	8000564 <sortEntries>
	//update_next_pill_idx(DS1307_GetDayOfWeek, DS1307_GetHour, DS1307_GetMinute);
}
 8000554:	bf00      	nop
 8000556:	371c      	adds	r7, #28
 8000558:	46bd      	mov	sp, r7
 800055a:	bd90      	pop	{r4, r7, pc}
 800055c:	20000028 	.word	0x20000028
 8000560:	2000002c 	.word	0x2000002c

08000564 <sortEntries>:

void sortEntries(){
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
	uint8_t i = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	73bb      	strb	r3, [r7, #14]
	uint8_t minimum_idx = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	737b      	strb	r3, [r7, #13]

	//WOOOO SELECTION SORT MY BELOVED!!!!
	for (i = 0; i < numPills; i++){
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	e060      	b.n	800063e <sortEntries+0xda>
		minimum_idx = i;
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	737b      	strb	r3, [r7, #13]
		for (j = i + 1; j < numPills; j++){
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	3301      	adds	r3, #1
 8000584:	73bb      	strb	r3, [r7, #14]
 8000586:	e01f      	b.n	80005c8 <sortEntries+0x64>
			if (compPillEntry(pillList[j], pillList[minimum_idx])){
 8000588:	7bba      	ldrb	r2, [r7, #14]
 800058a:	7b79      	ldrb	r1, [r7, #13]
 800058c:	4831      	ldr	r0, [pc, #196]	@ (8000654 <sortEntries+0xf0>)
 800058e:	460b      	mov	r3, r1
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	440b      	add	r3, r1
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	18c4      	adds	r4, r0, r3
 8000598:	492e      	ldr	r1, [pc, #184]	@ (8000654 <sortEntries+0xf0>)
 800059a:	4613      	mov	r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	4413      	add	r3, r2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	18ca      	adds	r2, r1, r3
 80005a4:	466d      	mov	r5, sp
 80005a6:	1d23      	adds	r3, r4, #4
 80005a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005b4:	f000 f852 	bl	800065c <compPillEntry>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <sortEntries+0x5e>
				minimum_idx = j;
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	737b      	strb	r3, [r7, #13]
		for (j = i + 1; j < numPills; j++){
 80005c2:	7bbb      	ldrb	r3, [r7, #14]
 80005c4:	3301      	adds	r3, #1
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <sortEntries+0xf4>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	7bba      	ldrb	r2, [r7, #14]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d3da      	bcc.n	8000588 <sortEntries+0x24>
			}
		}
		pillEntry temp = pillList[i];
 80005d2:	7bfa      	ldrb	r2, [r7, #15]
 80005d4:	491f      	ldr	r1, [pc, #124]	@ (8000654 <sortEntries+0xf0>)
 80005d6:	4613      	mov	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	4413      	add	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	18ca      	adds	r2, r1, r3
 80005e0:	463b      	mov	r3, r7
 80005e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		pillList[i] = pillList[minimum_idx];
 80005e8:	7b7a      	ldrb	r2, [r7, #13]
 80005ea:	7bf9      	ldrb	r1, [r7, #15]
 80005ec:	4819      	ldr	r0, [pc, #100]	@ (8000654 <sortEntries+0xf0>)
 80005ee:	460b      	mov	r3, r1
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	440b      	add	r3, r1
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4418      	add	r0, r3
 80005f8:	4916      	ldr	r1, [pc, #88]	@ (8000654 <sortEntries+0xf0>)
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	18ca      	adds	r2, r1, r3
 8000604:	4603      	mov	r3, r0
 8000606:	ca07      	ldmia	r2, {r0, r1, r2}
 8000608:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		pillList[minimum_idx] = temp;
 800060c:	7b7a      	ldrb	r2, [r7, #13]
 800060e:	4911      	ldr	r1, [pc, #68]	@ (8000654 <sortEntries+0xf0>)
 8000610:	4613      	mov	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	440b      	add	r3, r1
 800061a:	461c      	mov	r4, r3
 800061c:	463b      	mov	r3, r7
 800061e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		pillList[i].ID = i;
 8000626:	7bfa      	ldrb	r2, [r7, #15]
 8000628:	490a      	ldr	r1, [pc, #40]	@ (8000654 <sortEntries+0xf0>)
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	440b      	add	r3, r1
 8000634:	7bfa      	ldrb	r2, [r7, #15]
 8000636:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numPills; i++){
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	3301      	adds	r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <sortEntries+0xf4>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	7bfa      	ldrb	r2, [r7, #15]
 8000644:	429a      	cmp	r2, r3
 8000646:	d399      	bcc.n	800057c <sortEntries+0x18>

	}
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bdb0      	pop	{r4, r5, r7, pc}
 8000652:	bf00      	nop
 8000654:	2000002c 	.word	0x2000002c
 8000658:	20000028 	.word	0x20000028

0800065c <compPillEntry>:

//returns 1 if lhs is less than rhs
uint8_t compPillEntry(pillEntry lhs, pillEntry rhs){
 800065c:	b082      	sub	sp, #8
 800065e:	b490      	push	{r4, r7}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	1d3c      	adds	r4, r7, #4
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800066a:	61fb      	str	r3, [r7, #28]

	if (!(lhs.dayofWeek == rhs.dayofWeek)){
 800066c:	7b3a      	ldrb	r2, [r7, #12]
 800066e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000672:	429a      	cmp	r2, r3
 8000674:	d008      	beq.n	8000688 <compPillEntry+0x2c>
		return lhs.dayofWeek < rhs.dayofWeek;
 8000676:	7b3a      	ldrb	r2, [r7, #12]
 8000678:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800067c:	429a      	cmp	r2, r3
 800067e:	bf34      	ite	cc
 8000680:	2301      	movcc	r3, #1
 8000682:	2300      	movcs	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	e01c      	b.n	80006c2 <compPillEntry+0x66>
	}

	if (!(lhs.hour == rhs.hour)){
 8000688:	7b7a      	ldrb	r2, [r7, #13]
 800068a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800068e:	429a      	cmp	r2, r3
 8000690:	d008      	beq.n	80006a4 <compPillEntry+0x48>
		return lhs.hour < rhs.hour;
 8000692:	7b7a      	ldrb	r2, [r7, #13]
 8000694:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000698:	429a      	cmp	r2, r3
 800069a:	bf34      	ite	cc
 800069c:	2301      	movcc	r3, #1
 800069e:	2300      	movcs	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	e00e      	b.n	80006c2 <compPillEntry+0x66>
	}

	if (!(lhs.min == rhs.min)){
 80006a4:	7bba      	ldrb	r2, [r7, #14]
 80006a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d008      	beq.n	80006c0 <compPillEntry+0x64>
		return lhs.min < rhs.min;
 80006ae:	7bba      	ldrb	r2, [r7, #14]
 80006b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80006b4:	429a      	cmp	r2, r3
 80006b6:	bf34      	ite	cc
 80006b8:	2301      	movcc	r3, #1
 80006ba:	2300      	movcs	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	e000      	b.n	80006c2 <compPillEntry+0x66>
	}

	return 0;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc90      	pop	{r4, r7}
 80006ca:	b002      	add	sp, #8
 80006cc:	4770      	bx	lr
	...

080006d0 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <DS1307_Init+0x1c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f806 	bl	80006f0 <DS1307_SetClockHalt>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000284 	.word	0x20000284

080006f0 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <DS1307_SetClockHalt+0x14>
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	e000      	b.n	8000706 <DS1307_SetClockHalt+0x16>
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8000708:	2000      	movs	r0, #0
 800070a:	f000 f83d 	bl	8000788 <DS1307_GetRegByte>
 800070e:	4603      	mov	r3, r0
 8000710:	b25b      	sxtb	r3, r3
 8000712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000716:	b25a      	sxtb	r2, r3
 8000718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071c:	4313      	orrs	r3, r2
 800071e:	b25b      	sxtb	r3, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4619      	mov	r1, r3
 8000724:	2000      	movs	r0, #0
 8000726:	f000 f811 	bl	800074c <DS1307_SetRegByte>
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f826 	bl	8000788 <DS1307_GetRegByte>
 800073c:	4603      	mov	r3, r0
 800073e:	11db      	asrs	r3, r3, #7
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
}
 8000748:	4618      	mov	r0, r3
 800074a:	bd80      	pop	{r7, pc}

0800074c <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af02      	add	r7, sp, #8
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	733b      	strb	r3, [r7, #12]
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <DS1307_SetRegByte+0x38>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	f107 020c 	add.w	r2, r7, #12
 800076c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2302      	movs	r3, #2
 8000774:	21d0      	movs	r1, #208	@ 0xd0
 8000776:	f001 fe35 	bl	80023e4 <HAL_I2C_Master_Transmit>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000284 	.word	0x20000284

08000788 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af02      	add	r7, sp, #8
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <DS1307_GetRegByte+0x40>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	1dfa      	adds	r2, r7, #7
 8000798:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2301      	movs	r3, #1
 80007a0:	21d0      	movs	r1, #208	@ 0xd0
 80007a2:	f001 fe1f 	bl	80023e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <DS1307_GetRegByte+0x40>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	f107 020f 	add.w	r2, r7, #15
 80007ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2301      	movs	r3, #1
 80007b6:	21d0      	movs	r1, #208	@ 0xd0
 80007b8:	f001 ff2c 	bl	8002614 <HAL_I2C_Master_Receive>
	return val;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000284 	.word	0x20000284

080007cc <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 80007d0:	2002      	movs	r0, #2
 80007d2:	f7ff ffd9 	bl	8000788 <DS1307_GetRegByte>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f8a4 	bl	800092c <DS1307_DecodeBCD>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}

080007ea <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f8b2 	bl	8000960 <DS1307_EncodeBCD>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4619      	mov	r1, r3
 8000800:	2003      	movs	r0, #3
 8000802:	f7ff ffa3 	bl	800074c <DS1307_SetRegByte>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f8a0 	bl	8000960 <DS1307_EncodeBCD>
 8000820:	4603      	mov	r3, r0
 8000822:	4619      	mov	r1, r3
 8000824:	2004      	movs	r0, #4
 8000826:	f7ff ff91 	bl	800074c <DS1307_SetRegByte>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f88e 	bl	8000960 <DS1307_EncodeBCD>
 8000844:	4603      	mov	r3, r0
 8000846:	4619      	mov	r1, r3
 8000848:	2005      	movs	r0, #5
 800084a:	f7ff ff7f 	bl	800074c <DS1307_SetRegByte>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <DS1307_SetYear+0x50>)
 8000866:	fba2 2303 	umull	r2, r3, r2, r3
 800086a:	095b      	lsrs	r3, r3, #5
 800086c:	b29b      	uxth	r3, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4619      	mov	r1, r3
 8000872:	2010      	movs	r0, #16
 8000874:	f7ff ff6a 	bl	800074c <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	4a0b      	ldr	r2, [pc, #44]	@ (80008a8 <DS1307_SetYear+0x50>)
 800087c:	fba2 1203 	umull	r1, r2, r2, r3
 8000880:	0952      	lsrs	r2, r2, #5
 8000882:	2164      	movs	r1, #100	@ 0x64
 8000884:	fb01 f202 	mul.w	r2, r1, r2
 8000888:	1a9b      	subs	r3, r3, r2
 800088a:	b29b      	uxth	r3, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f866 	bl	8000960 <DS1307_EncodeBCD>
 8000894:	4603      	mov	r3, r0
 8000896:	4619      	mov	r1, r3
 8000898:	2006      	movs	r0, #6
 800089a:	f7ff ff57 	bl	800074c <DS1307_SetRegByte>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	51eb851f 	.word	0x51eb851f

080008ac <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f84e 	bl	8000960 <DS1307_EncodeBCD>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4619      	mov	r1, r3
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff ff3f 	bl	800074c <DS1307_SetRegByte>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f83c 	bl	8000960 <DS1307_EncodeBCD>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4619      	mov	r1, r3
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff ff2d 	bl	800074c <DS1307_SetRegByte>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8000904:	f7ff ff15 	bl	8000732 <DS1307_GetClockHalt>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	4313      	orrs	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f823 	bl	8000960 <DS1307_EncodeBCD>
 800091a:	4603      	mov	r3, r0
 800091c:	4619      	mov	r1, r3
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff14 	bl	800074c <DS1307_SetRegByte>
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	091b      	lsrs	r3, r3, #4
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	0092      	lsls	r2, r2, #2
 8000940:	4413      	add	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 030f 	and.w	r3, r3, #15
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	b2db      	uxtb	r3, r3
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <DS1307_EncodeBCD+0x40>)
 800096e:	fba3 1302 	umull	r1, r3, r3, r2
 8000972:	08d9      	lsrs	r1, r3, #3
 8000974:	460b      	mov	r3, r1
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b2da      	uxtb	r2, r3
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4907      	ldr	r1, [pc, #28]	@ (80009a0 <DS1307_EncodeBCD+0x40>)
 8000984:	fba1 1303 	umull	r1, r3, r1, r3
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4413      	add	r3, r2
 8000992:	b2db      	uxtb	r3, r3
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	cccccccd 	.word	0xcccccccd

080009a4 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	@ 0x40
 80009b6:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <ILI9488_SendCommand+0x44>)
 80009b8:	f001 fc60 	bl	800227c <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 80009bc:	2200      	movs	r2, #0
 80009be:	2101      	movs	r1, #1
 80009c0:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <ILI9488_SendCommand+0x44>)
 80009c2:	f001 fc5b 	bl	800227c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 80009c6:	f107 010f 	add.w	r1, r7, #15
 80009ca:	2301      	movs	r3, #1
 80009cc:	2201      	movs	r2, #1
 80009ce:	4807      	ldr	r0, [pc, #28]	@ (80009ec <ILI9488_SendCommand+0x48>)
 80009d0:	f003 ff97 	bl	8004902 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 80009d4:	2201      	movs	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <ILI9488_SendCommand+0x44>)
 80009da:	f001 fc4f 	bl	800227c <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	48000c00 	.word	0x48000c00
 80009ec:	200002e0 	.word	0x200002e0

080009f0 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 80009fe:	2201      	movs	r2, #1
 8000a00:	2140      	movs	r1, #64	@ 0x40
 8000a02:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <ILI9488_SendData+0x44>)
 8000a04:	f001 fc3a 	bl	800227c <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <ILI9488_SendData+0x44>)
 8000a0e:	f001 fc35 	bl	800227c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 8000a12:	f107 010f 	add.w	r1, r7, #15
 8000a16:	2301      	movs	r3, #1
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <ILI9488_SendData+0x48>)
 8000a1c:	f003 ff71 	bl	8004902 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000a20:	2201      	movs	r2, #1
 8000a22:	2101      	movs	r1, #1
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <ILI9488_SendData+0x44>)
 8000a26:	f001 fc29 	bl	800227c <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	48000c00 	.word	0x48000c00
 8000a38:	200002e0 	.word	0x200002e0

08000a3c <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8000a46:	2201      	movs	r2, #1
 8000a48:	2140      	movs	r1, #64	@ 0x40
 8000a4a:	4815      	ldr	r0, [pc, #84]	@ (8000aa0 <ILI9488_SendData_Multi+0x64>)
 8000a4c:	f001 fc16 	bl	800227c <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 8000a50:	2200      	movs	r2, #0
 8000a52:	2101      	movs	r1, #1
 8000a54:	4812      	ldr	r0, [pc, #72]	@ (8000aa0 <ILI9488_SendData_Multi+0x64>)
 8000a56:	f001 fc11 	bl	800227c <HAL_GPIO_WritePin>
	while (buff_size > 0){
 8000a5a:	e015      	b.n	8000a88 <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a62:	bf28      	it	cs
 8000a64:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000a68:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 8000a6a:	89fa      	ldrh	r2, [r7, #14]
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <ILI9488_SendData_Multi+0x68>)
 8000a74:	f003 ff45 	bl	8004902 <HAL_SPI_Transmit>
		buff += chunk_size;
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1e6      	bne.n	8000a5c <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2101      	movs	r1, #1
 8000a92:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <ILI9488_SendData_Multi+0x64>)
 8000a94:	f001 fbf2 	bl	800227c <HAL_GPIO_WritePin>
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	48000c00 	.word	0x48000c00
 8000aa4:	200002e0 	.word	0x200002e0

08000aa8 <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 8000aac:	2201      	movs	r2, #1
 8000aae:	2101      	movs	r1, #1
 8000ab0:	486c      	ldr	r0, [pc, #432]	@ (8000c64 <ILI9488_Init+0x1bc>)
 8000ab2:	f001 fbe3 	bl	800227c <HAL_GPIO_WritePin>
	RST_A();
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	486a      	ldr	r0, [pc, #424]	@ (8000c64 <ILI9488_Init+0x1bc>)
 8000abc:	f001 fbde 	bl	800227c <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f001 f93f 	bl	8001d44 <HAL_Delay>
		 RST_D();
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	4866      	ldr	r0, [pc, #408]	@ (8000c64 <ILI9488_Init+0x1bc>)
 8000acc:	f001 fbd6 	bl	800227c <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 8000ad0:	4b65      	ldr	r3, [pc, #404]	@ (8000c68 <ILI9488_Init+0x1c0>)
 8000ad2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ad6:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 8000ad8:	4b64      	ldr	r3, [pc, #400]	@ (8000c6c <ILI9488_Init+0x1c4>)
 8000ada:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000ade:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 8000ae0:	20e0      	movs	r0, #224	@ 0xe0
 8000ae2:	f7ff ff5f 	bl	80009a4 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff ff82 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f7ff ff7f 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000af2:	2009      	movs	r0, #9
 8000af4:	f7ff ff7c 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000af8:	2008      	movs	r0, #8
 8000afa:	f7ff ff79 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000afe:	2016      	movs	r0, #22
 8000b00:	f7ff ff76 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000b04:	200a      	movs	r0, #10
 8000b06:	f7ff ff73 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 8000b0a:	203f      	movs	r0, #63	@ 0x3f
 8000b0c:	f7ff ff70 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8000b10:	2078      	movs	r0, #120	@ 0x78
 8000b12:	f7ff ff6d 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 8000b16:	204c      	movs	r0, #76	@ 0x4c
 8000b18:	f7ff ff6a 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000b1c:	2009      	movs	r0, #9
 8000b1e:	f7ff ff67 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000b22:	200a      	movs	r0, #10
 8000b24:	f7ff ff64 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000b28:	2008      	movs	r0, #8
 8000b2a:	f7ff ff61 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000b2e:	2016      	movs	r0, #22
 8000b30:	f7ff ff5e 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8000b34:	201a      	movs	r0, #26
 8000b36:	f7ff ff5b 	bl	80009f0 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f7ff ff58 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 8000b40:	20e1      	movs	r0, #225	@ 0xe1
 8000b42:	f7ff ff2f 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff ff52 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 8000b4c:	2016      	movs	r0, #22
 8000b4e:	f7ff ff4f 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 8000b52:	2019      	movs	r0, #25
 8000b54:	f7ff ff4c 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f7ff ff49 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f7ff ff46 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 8000b64:	2005      	movs	r0, #5
 8000b66:	f7ff ff43 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 8000b6a:	2032      	movs	r0, #50	@ 0x32
 8000b6c:	f7ff ff40 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 8000b70:	2045      	movs	r0, #69	@ 0x45
 8000b72:	f7ff ff3d 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 8000b76:	2046      	movs	r0, #70	@ 0x46
 8000b78:	f7ff ff3a 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 8000b7c:	2004      	movs	r0, #4
 8000b7e:	f7ff ff37 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 8000b82:	200e      	movs	r0, #14
 8000b84:	f7ff ff34 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 8000b88:	200d      	movs	r0, #13
 8000b8a:	f7ff ff31 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 8000b8e:	2035      	movs	r0, #53	@ 0x35
 8000b90:	f7ff ff2e 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 8000b94:	2037      	movs	r0, #55	@ 0x37
 8000b96:	f7ff ff2b 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f7ff ff28 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 8000ba0:	20c0      	movs	r0, #192	@ 0xc0
 8000ba2:	f7ff feff 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 8000ba6:	2017      	movs	r0, #23
 8000ba8:	f7ff ff22 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 8000bac:	2015      	movs	r0, #21
 8000bae:	f7ff ff1f 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 8000bb2:	20c1      	movs	r0, #193	@ 0xc1
 8000bb4:	f7ff fef6 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 8000bb8:	2041      	movs	r0, #65	@ 0x41
 8000bba:	f7ff ff19 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 8000bbe:	20c5      	movs	r0, #197	@ 0xc5
 8000bc0:	f7ff fef0 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff ff13 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 8000bca:	2012      	movs	r0, #18
 8000bcc:	f7ff ff10 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 8000bd0:	2080      	movs	r0, #128	@ 0x80
 8000bd2:	f7ff ff0d 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 8000bd6:	2036      	movs	r0, #54	@ 0x36
 8000bd8:	f7ff fee4 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 8000bdc:	2048      	movs	r0, #72	@ 0x48
 8000bde:	f7ff ff07 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 8000be2:	203a      	movs	r0, #58	@ 0x3a
 8000be4:	f7ff fede 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 8000be8:	2066      	movs	r0, #102	@ 0x66
 8000bea:	f7ff ff01 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 8000bee:	20b0      	movs	r0, #176	@ 0xb0
 8000bf0:	f7ff fed8 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8000bf4:	2080      	movs	r0, #128	@ 0x80
 8000bf6:	f7ff fefb 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 8000bfa:	20b1      	movs	r0, #177	@ 0xb1
 8000bfc:	f7ff fed2 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 8000c00:	20a0      	movs	r0, #160	@ 0xa0
 8000c02:	f7ff fef5 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 8000c06:	20b4      	movs	r0, #180	@ 0xb4
 8000c08:	f7ff fecc 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f7ff feef 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8000c12:	20b6      	movs	r0, #182	@ 0xb6
 8000c14:	f7ff fec6 	bl	80009a4 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fee9 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f7ff fee6 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8000c24:	20e9      	movs	r0, #233	@ 0xe9
 8000c26:	f7ff febd 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fee0 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 8000c30:	20f7      	movs	r0, #247	@ 0xf7
 8000c32:	f7ff feb7 	bl	80009a4 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 8000c36:	20a9      	movs	r0, #169	@ 0xa9
 8000c38:	f7ff feda 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 8000c3c:	2051      	movs	r0, #81	@ 0x51
 8000c3e:	f7ff fed7 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 8000c42:	202c      	movs	r0, #44	@ 0x2c
 8000c44:	f7ff fed4 	bl	80009f0 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 8000c48:	2082      	movs	r0, #130	@ 0x82
 8000c4a:	f7ff fed1 	bl	80009f0 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 8000c4e:	2011      	movs	r0, #17
 8000c50:	f7ff fea8 	bl	80009a4 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 8000c54:	2078      	movs	r0, #120	@ 0x78
 8000c56:	f001 f875 	bl	8001d44 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 8000c5a:	2029      	movs	r0, #41	@ 0x29
 8000c5c:	f7ff fea2 	bl	80009a4 <ILI9488_SendCommand>

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	48000c00 	.word	0x48000c00
 8000c68:	20000288 	.word	0x20000288
 8000c6c:	2000028a 	.word	0x2000028a

08000c70 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4604      	mov	r4, r0
 8000c78:	4608      	mov	r0, r1
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4623      	mov	r3, r4
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	4603      	mov	r3, r0
 8000c84:	80bb      	strh	r3, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	807b      	strh	r3, [r7, #2]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 8000c8e:	202a      	movs	r0, #42	@ 0x2a
 8000c90:	f7ff fe88 	bl	80009a4 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	733b      	strb	r3, [r7, #12]
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	737b      	strb	r3, [r7, #13]
 8000ca4:	887b      	ldrh	r3, [r7, #2]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	73bb      	strb	r3, [r7, #14]
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff febe 	bl	8000a3c <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8000cc0:	202b      	movs	r0, #43	@ 0x2b
 8000cc2:	f7ff fe6f 	bl	80009a4 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	723b      	strb	r3, [r7, #8]
 8000cd0:	88bb      	ldrh	r3, [r7, #4]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	727b      	strb	r3, [r7, #9]
 8000cd6:	883b      	ldrh	r3, [r7, #0]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	72bb      	strb	r3, [r7, #10]
 8000ce0:	883b      	ldrh	r3, [r7, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2104      	movs	r1, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fea5 	bl	8000a3c <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 8000cf2:	202c      	movs	r0, #44	@ 0x2c
 8000cf4:	f7ff fe56 	bl	80009a4 <ILI9488_SendCommand>
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd90      	pop	{r4, r7, pc}

08000d00 <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <fillScreen+0x2c>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <fillScreen+0x30>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b219      	sxth	r1, r3
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 f808 	bl	8000d34 <fillRect>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000288 	.word	0x20000288
 8000d30:	2000028a 	.word	0x2000028a

08000d34 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	b08a      	sub	sp, #40	@ 0x28
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4606      	mov	r6, r0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	4611      	mov	r1, r2
 8000d42:	461a      	mov	r2, r3
 8000d44:	4633      	mov	r3, r6
 8000d46:	80fb      	strh	r3, [r7, #6]
 8000d48:	4603      	mov	r3, r0
 8000d4a:	80bb      	strh	r3, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	4613      	mov	r3, r2
 8000d52:	803b      	strh	r3, [r7, #0]
 8000d54:	466b      	mov	r3, sp
 8000d56:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5c:	4a8f      	ldr	r2, [pc, #572]	@ (8000f9c <fillRect+0x268>)
 8000d5e:	8812      	ldrh	r2, [r2, #0]
 8000d60:	4293      	cmp	r3, r2
 8000d62:	da05      	bge.n	8000d70 <fillRect+0x3c>
 8000d64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d68:	4a8d      	ldr	r2, [pc, #564]	@ (8000fa0 <fillRect+0x26c>)
 8000d6a:	8812      	ldrh	r2, [r2, #0]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	db01      	blt.n	8000d74 <fillRect+0x40>
		return;
 8000d70:	46d5      	mov	sp, sl
 8000d72:	e10f      	b.n	8000f94 <fillRect+0x260>
	if ((x + w - 1) >= width)
 8000d74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a87      	ldr	r2, [pc, #540]	@ (8000f9c <fillRect+0x268>)
 8000d80:	8812      	ldrh	r2, [r2, #0]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	dd05      	ble.n	8000d92 <fillRect+0x5e>
		w = width - x;
 8000d86:	4b85      	ldr	r3, [pc, #532]	@ (8000f9c <fillRect+0x268>)
 8000d88:	881a      	ldrh	r2, [r3, #0]
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 8000d92:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a80      	ldr	r2, [pc, #512]	@ (8000fa0 <fillRect+0x26c>)
 8000d9e:	8812      	ldrh	r2, [r2, #0]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	dd05      	ble.n	8000db0 <fillRect+0x7c>
		h = height - y;
 8000da4:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa0 <fillRect+0x26c>)
 8000da6:	881a      	ldrh	r2, [r3, #0]
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000db0:	88f8      	ldrh	r0, [r7, #6]
 8000db2:	88b9      	ldrh	r1, [r7, #4]
 8000db4:	88fa      	ldrh	r2, [r7, #6]
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	4413      	add	r3, r2
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	b29e      	uxth	r6, r3
 8000dc0:	88ba      	ldrh	r2, [r7, #4]
 8000dc2:	883b      	ldrh	r3, [r7, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4632      	mov	r2, r6
 8000dce:	f7ff ff4f 	bl	8000c70 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 8000dd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000dd6:	0adb      	lsrs	r3, r3, #11
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 8000ddc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000de0:	115b      	asrs	r3, r3, #5
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000de8:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 8000dea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 8000df6:	7efa      	ldrb	r2, [r7, #27]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	1a9b      	subs	r3, r3, r2
 8000dfe:	4a69      	ldr	r2, [pc, #420]	@ (8000fa4 <fillRect+0x270>)
 8000e00:	fb82 1203 	smull	r1, r2, r2, r3
 8000e04:	441a      	add	r2, r3
 8000e06:	1112      	asrs	r2, r2, #4
 8000e08:	17db      	asrs	r3, r3, #31
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 8000e0e:	7eba      	ldrb	r2, [r7, #26]
 8000e10:	4613      	mov	r3, r2
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	4a64      	ldr	r2, [pc, #400]	@ (8000fa8 <fillRect+0x274>)
 8000e18:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1c:	441a      	add	r2, r3
 8000e1e:	1152      	asrs	r2, r2, #5
 8000e20:	17db      	asrs	r3, r3, #31
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8000e26:	7e7a      	ldrb	r2, [r7, #25]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	4a5d      	ldr	r2, [pc, #372]	@ (8000fa4 <fillRect+0x270>)
 8000e30:	fb82 1203 	smull	r1, r2, r2, r3
 8000e34:	441a      	add	r2, r3
 8000e36:	1112      	asrs	r2, r2, #4
 8000e38:	17db      	asrs	r3, r3, #31
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 8000e3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e46:	fb03 f202 	mul.w	r2, r3, r2
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e58:	d204      	bcs.n	8000e64 <fillRect+0x130>
		cnt = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	623b      	str	r3, [r7, #32]
		buf_size = n;
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e02f      	b.n	8000ec4 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	4a51      	ldr	r2, [pc, #324]	@ (8000fac <fillRect+0x278>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 8000e70:	2303      	movs	r3, #3
 8000e72:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	4a4e      	ldr	r2, [pc, #312]	@ (8000fb0 <fillRect+0x27c>)
 8000e78:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7c:	0bdb      	lsrs	r3, r3, #15
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	3301      	adds	r3, #1
 8000e82:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8000e84:	7cfb      	ldrb	r3, [r7, #19]
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e88:	e014      	b.n	8000eb4 <fillRect+0x180>
			if(n%i == 0){
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e94:	fb01 f202 	mul.w	r2, r1, r2
 8000e98:	1a9b      	subs	r3, r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d107      	bne.n	8000eae <fillRect+0x17a>
				cnt = i;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea0:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	61fb      	str	r3, [r7, #28]
				break;
 8000eac:	e00a      	b.n	8000ec4 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fac <fillRect+0x278>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	085b      	lsrs	r3, r3, #1
 8000ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3e2      	bcc.n	8000e8a <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 8000ec4:	69f9      	ldr	r1, [r7, #28]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	4688      	mov	r8, r1
 8000ed0:	4699      	mov	r9, r3
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	461d      	mov	r5, r3
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	00eb      	lsls	r3, r5, #3
 8000ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000efa:	00e2      	lsls	r2, r4, #3
 8000efc:	1dcb      	adds	r3, r1, #7
 8000efe:	08db      	lsrs	r3, r3, #3
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	ebad 0d03 	sub.w	sp, sp, r3
 8000f06:	466b      	mov	r3, sp
 8000f08:	3300      	adds	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f10:	e019      	b.n	8000f46 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 8000f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	7ef9      	ldrb	r1, [r7, #27]
 8000f1e:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8000f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	3301      	adds	r3, #1
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	7eb9      	ldrb	r1, [r7, #26]
 8000f2e:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8000f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	7e79      	ldrb	r1, [r7, #25]
 8000f3e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8000f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f42:	3301      	adds	r3, #1
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	4a18      	ldr	r2, [pc, #96]	@ (8000fac <fillRect+0x278>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	085b      	lsrs	r3, r3, #1
 8000f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d3dd      	bcc.n	8000f12 <fillRect+0x1de>
	}
	DC_DATA();
 8000f56:	2201      	movs	r2, #1
 8000f58:	2140      	movs	r1, #64	@ 0x40
 8000f5a:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <fillRect+0x280>)
 8000f5c:	f001 f98e 	bl	800227c <HAL_GPIO_WritePin>
	CS_A();
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <fillRect+0x280>)
 8000f66:	f001 f989 	bl	800227c <HAL_GPIO_WritePin>
		while(cnt>0)
 8000f6a:	e00a      	b.n	8000f82 <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	4810      	ldr	r0, [pc, #64]	@ (8000fb8 <fillRect+0x284>)
 8000f78:	f003 fcc3 	bl	8004902 <HAL_SPI_Transmit>

			cnt -= 1;
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f1      	bne.n	8000f6c <fillRect+0x238>
		}
		CS_D();
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <fillRect+0x280>)
 8000f8e:	f001 f975 	bl	800227c <HAL_GPIO_WritePin>
 8000f92:	46d5      	mov	sp, sl

}
 8000f94:	3728      	adds	r7, #40	@ 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9c:	20000288 	.word	0x20000288
 8000fa0:	2000028a 	.word	0x2000028a
 8000fa4:	84210843 	.word	0x84210843
 8000fa8:	82082083 	.word	0x82082083
 8000fac:	aaaaaaab 	.word	0xaaaaaaab
 8000fb0:	80008001 	.word	0x80008001
 8000fb4:	48000c00 	.word	0x48000c00
 8000fb8:	200002e0 	.word	0x200002e0

08000fbc <setRotation>:


void setRotation(uint8_t r)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 8000fc6:	2036      	movs	r0, #54	@ 0x36
 8000fc8:	f7ff fcec 	bl	80009a4 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d83a      	bhi.n	8001050 <setRotation+0x94>
 8000fda:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe0 <setRotation+0x24>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08001009 	.word	0x08001009
 8000fe8:	08001021 	.word	0x08001021
 8000fec:	08001039 	.word	0x08001039
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 8000ff0:	2048      	movs	r0, #72	@ 0x48
 8000ff2:	f7ff fcfd 	bl	80009f0 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <setRotation+0x9c>)
 8000ff8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ffc:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <setRotation+0xa0>)
 8001000:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001004:	801a      	strh	r2, [r3, #0]
		break;
 8001006:	e023      	b.n	8001050 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8001008:	2028      	movs	r0, #40	@ 0x28
 800100a:	f7ff fcf1 	bl	80009f0 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <setRotation+0x9c>)
 8001010:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001014:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <setRotation+0xa0>)
 8001018:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800101c:	801a      	strh	r2, [r3, #0]
		break;
 800101e:	e017      	b.n	8001050 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 8001020:	2088      	movs	r0, #136	@ 0x88
 8001022:	f7ff fce5 	bl	80009f0 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <setRotation+0x9c>)
 8001028:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800102c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800102e:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <setRotation+0xa0>)
 8001030:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001034:	801a      	strh	r2, [r3, #0]
		break;
 8001036:	e00b      	b.n	8001050 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001038:	20e8      	movs	r0, #232	@ 0xe8
 800103a:	f7ff fcd9 	bl	80009f0 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <setRotation+0x9c>)
 8001040:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001044:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <setRotation+0xa0>)
 8001048:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800104c:	801a      	strh	r2, [r3, #0]
		break;
 800104e:	bf00      	nop
	}

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000288 	.word	0x20000288
 800105c:	2000028a 	.word	0x2000028a

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001066:	f000 fdf8 	bl	8001c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106a:	f000 f869 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106e:	f000 fa0d 	bl	800148c <MX_GPIO_Init>
  MX_SPI2_Init();
 8001072:	f000 f8f7 	bl	8001264 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001076:	f000 f933 	bl	80012e0 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800107a:	f000 f96f 	bl	800135c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800107e:	f000 f9b9 	bl	80013f4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001082:	f000 f8af 	bl	80011e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILI9488_Init();
 8001086:	f7ff fd0f 	bl	8000aa8 <ILI9488_Init>
  XPT2046_Init();
 800108a:	f000 fd93 	bl	8001bb4 <XPT2046_Init>

  HAL_Delay(250);
 800108e:	20fa      	movs	r0, #250	@ 0xfa
 8001090:	f000 fe58 	bl	8001d44 <HAL_Delay>
  setRotation(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff91 	bl	8000fbc <setRotation>
  fillScreen(ILI9488_WHITE);
 800109a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800109e:	f7ff fe2f 	bl	8000d00 <fillScreen>
  DS1307_Init(&hi2c1);
 80010a2:	4821      	ldr	r0, [pc, #132]	@ (8001128 <main+0xc8>)
 80010a4:	f7ff fb14 	bl	80006d0 <DS1307_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	DS1307_Init(&hi2c1);
 80010a8:	481f      	ldr	r0, [pc, #124]	@ (8001128 <main+0xc8>)
 80010aa:	f7ff fb11 	bl	80006d0 <DS1307_Init>
	xbee_init(&huart2);
 80010ae:	481f      	ldr	r0, [pc, #124]	@ (800112c <main+0xcc>)
 80010b0:	f000 fc96 	bl	80019e0 <xbee_init>
	/* To test leap year correction. */
	DS1307_SetDate(14);
 80010b4:	200e      	movs	r0, #14
 80010b6:	f7ff fbaa 	bl	800080e <DS1307_SetDate>
	DS1307_SetMonth(4);
 80010ba:	2004      	movs	r0, #4
 80010bc:	f7ff fbb9 	bl	8000832 <DS1307_SetMonth>
	DS1307_SetYear(2024);
 80010c0:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 80010c4:	f7ff fbc8 	bl	8000858 <DS1307_SetYear>
	DS1307_SetDayOfWeek(2);
 80010c8:	2002      	movs	r0, #2
 80010ca:	f7ff fb8e 	bl	80007ea <DS1307_SetDayOfWeek>
	DS1307_SetHour(22);
 80010ce:	2016      	movs	r0, #22
 80010d0:	f7ff fbec 	bl	80008ac <DS1307_SetHour>
	DS1307_SetMinute(13);
 80010d4:	200d      	movs	r0, #13
 80010d6:	f7ff fbfe 	bl	80008d6 <DS1307_SetMinute>
	DS1307_SetSecond(30);
 80010da:	201e      	movs	r0, #30
 80010dc:	f7ff fc0d 	bl	80008fa <DS1307_SetSecond>

	HAL_Delay(1000);
 80010e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e4:	f000 fe2e 	bl	8001d44 <HAL_Delay>

	//Monday at 11:00.
	addNewEntry(0, "WEEWOO2", 1, 11, 00);
 80010e8:	2300      	movs	r3, #0
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	230b      	movs	r3, #11
 80010ee:	2201      	movs	r2, #1
 80010f0:	490f      	ldr	r1, [pc, #60]	@ (8001130 <main+0xd0>)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff f9fa 	bl	80004ec <addNewEntry>
	//Friday at 5:30.
	addNewEntry(0, "WEEWOO3", 6, 5, 30);
 80010f8:	231e      	movs	r3, #30
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2305      	movs	r3, #5
 80010fe:	2206      	movs	r2, #6
 8001100:	490c      	ldr	r1, [pc, #48]	@ (8001134 <main+0xd4>)
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff f9f2 	bl	80004ec <addNewEntry>
	//Sunday at 12:00.
	addNewEntry(0, "WEEWOO1", 0, 12, 00);
 8001108:	2300      	movs	r3, #0
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	230c      	movs	r3, #12
 800110e:	2200      	movs	r2, #0
 8001110:	4909      	ldr	r1, [pc, #36]	@ (8001138 <main+0xd8>)
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff f9ea 	bl	80004ec <addNewEntry>

	uint8_t tx_buff [10] = {0,1,2,3,4,5,6,7,8,9};
 8001118:	4a08      	ldr	r2, [pc, #32]	@ (800113c <main+0xdc>)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	ca07      	ldmia	r2, {r0, r1, r2}
 800111e:	c303      	stmia	r3!, {r0, r1}
 8001120:	801a      	strh	r2, [r3, #0]
  while (1)
  {
	  //HAL_UART_Transmit(&huart2, tx_buff, 10, 1000);
	  systemInit();
 8001122:	f000 fc6d 	bl	8001a00 <systemInit>
 8001126:	e7fc      	b.n	8001122 <main+0xc2>
 8001128:	2000028c 	.word	0x2000028c
 800112c:	200003a8 	.word	0x200003a8
 8001130:	08005ea4 	.word	0x08005ea4
 8001134:	08005eac 	.word	0x08005eac
 8001138:	08005eb4 	.word	0x08005eb4
 800113c:	08005ebc 	.word	0x08005ebc

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b096      	sub	sp, #88	@ 0x58
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2244      	movs	r2, #68	@ 0x44
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f004 fe70 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001162:	2000      	movs	r0, #0
 8001164:	f001 fe96 	bl	8002e94 <HAL_PWREx_ControlVoltageScaling>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800116e:	f000 fa33 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001172:	2310      	movs	r3, #16
 8001174:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001176:	2301      	movs	r3, #1
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800117e:	2360      	movs	r3, #96	@ 0x60
 8001180:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	2302      	movs	r3, #2
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001186:	2301      	movs	r3, #1
 8001188:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800118a:	2301      	movs	r3, #1
 800118c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800118e:	233c      	movs	r3, #60	@ 0x3c
 8001190:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001196:	2302      	movs	r3, #2
 8001198:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800119a:	2302      	movs	r3, #2
 800119c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 ff1a 	bl	8002fdc <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011ae:	f000 fa13 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2303      	movs	r3, #3
 80011b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	2105      	movs	r1, #5
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fb20 	bl	8003810 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011d6:	f000 f9ff 	bl	80015d8 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3758      	adds	r7, #88	@ 0x58
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <MX_I2C1_Init+0x74>)
 80011ea:	4a1c      	ldr	r2, [pc, #112]	@ (800125c <MX_I2C1_Init+0x78>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <MX_I2C1_Init+0x74>)
 80011f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001260 <MX_I2C1_Init+0x7c>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <MX_I2C1_Init+0x74>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_I2C1_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800121e:	480e      	ldr	r0, [pc, #56]	@ (8001258 <MX_I2C1_Init+0x74>)
 8001220:	f001 f844 	bl	80022ac <HAL_I2C_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800122a:	f000 f9d5 	bl	80015d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800122e:	2100      	movs	r1, #0
 8001230:	4809      	ldr	r0, [pc, #36]	@ (8001258 <MX_I2C1_Init+0x74>)
 8001232:	f001 fd77 	bl	8002d24 <HAL_I2CEx_ConfigAnalogFilter>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800123c:	f000 f9cc 	bl	80015d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001240:	2100      	movs	r1, #0
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_I2C1_Init+0x74>)
 8001244:	f001 fdb9 	bl	8002dba <HAL_I2CEx_ConfigDigitalFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800124e:	f000 f9c3 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000028c 	.word	0x2000028c
 800125c:	40005400 	.word	0x40005400
 8001260:	307075b1 	.word	0x307075b1

08001264 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MX_SPI2_Init+0x74>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <MX_SPI2_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_SPI2_Init+0x74>)
 8001270:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001274:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <MX_SPI2_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_SPI2_Init+0x74>)
 800127e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001282:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_SPI2_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_SPI2_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_SPI2_Init+0x74>)
 8001292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001296:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_SPI2_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_SPI2_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_SPI2_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_SPI2_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_SPI2_Init+0x74>)
 80012b2:	2207      	movs	r2, #7
 80012b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_SPI2_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_SPI2_Init+0x74>)
 80012be:	2208      	movs	r2, #8
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_SPI2_Init+0x74>)
 80012c4:	f003 fa7a 	bl	80047bc <HAL_SPI_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012ce:	f000 f983 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200002e0 	.word	0x200002e0
 80012dc:	40003800 	.word	0x40003800

080012e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <MX_SPI3_Init+0x74>)
 80012e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001358 <MX_SPI3_Init+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_SPI3_Init+0x74>)
 80012ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012f2:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <MX_SPI3_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <MX_SPI3_Init+0x74>)
 80012fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012fe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <MX_SPI3_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <MX_SPI3_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_SPI3_Init+0x74>)
 800130e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001312:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <MX_SPI3_Init+0x74>)
 8001316:	2218      	movs	r2, #24
 8001318:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_SPI3_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_SPI3_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_SPI3_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_SPI3_Init+0x74>)
 800132e:	2207      	movs	r2, #7
 8001330:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_SPI3_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_SPI3_Init+0x74>)
 800133a:	2208      	movs	r2, #8
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_SPI3_Init+0x74>)
 8001340:	f003 fa3c 	bl	80047bc <HAL_SPI_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800134a:	f000 f945 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000344 	.word	0x20000344
 8001358:	40003c00 	.word	0x40003c00

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <MX_USART2_UART_Init+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a4:	4811      	ldr	r0, [pc, #68]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013a6:	f003 fd85 	bl	8004eb4 <HAL_UART_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013b0:	f000 f912 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013b8:	f004 fc72 	bl	8005ca0 <HAL_UARTEx_SetTxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013c2:	f000 f909 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4808      	ldr	r0, [pc, #32]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013ca:	f004 fca7 	bl	8005d1c <HAL_UARTEx_SetRxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013d4:	f000 f900 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013da:	f004 fc28 	bl	8005c2e <HAL_UARTEx_DisableFifoMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013e4:	f000 f8f8 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200003a8 	.word	0x200003a8
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f8:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 80013fa:	4a23      	ldr	r2, [pc, #140]	@ (8001488 <MX_USART3_UART_Init+0x94>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800143c:	4811      	ldr	r0, [pc, #68]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 800143e:	f003 fd39 	bl	8004eb4 <HAL_UART_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001448:	f000 f8c6 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144c:	2100      	movs	r1, #0
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001450:	f004 fc26 	bl	8005ca0 <HAL_UARTEx_SetTxFifoThreshold>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800145a:	f000 f8bd 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145e:	2100      	movs	r1, #0
 8001460:	4808      	ldr	r0, [pc, #32]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001462:	f004 fc5b 	bl	8005d1c <HAL_UARTEx_SetRxFifoThreshold>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800146c:	f000 f8b4 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001472:	f004 fbdc 	bl	8005c2e <HAL_UARTEx_DisableFifoMode>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800147c:	f000 f8ac 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000043c 	.word	0x2000043c
 8001488:	40004800 	.word	0x40004800

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a2:	4b48      	ldr	r3, [pc, #288]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a47      	ldr	r2, [pc, #284]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b45      	ldr	r3, [pc, #276]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0320 	and.w	r3, r3, #32
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	4b42      	ldr	r3, [pc, #264]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	4a41      	ldr	r2, [pc, #260]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c6:	4b3f      	ldr	r3, [pc, #252]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b3c      	ldr	r3, [pc, #240]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a3b      	ldr	r2, [pc, #236]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b39      	ldr	r3, [pc, #228]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b36      	ldr	r3, [pc, #216]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a35      	ldr	r2, [pc, #212]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <MX_GPIO_Init+0x138>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001502:	4b30      	ldr	r3, [pc, #192]	@ (80015c4 <MX_GPIO_Init+0x138>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a2f      	ldr	r2, [pc, #188]	@ (80015c4 <MX_GPIO_Init+0x138>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <MX_GPIO_Init+0x138>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Actuator1_IN1_Pin|Actuaor1_IN2_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2128      	movs	r1, #40	@ 0x28
 800151e:	482a      	ldr	r0, [pc, #168]	@ (80015c8 <MX_GPIO_Init+0x13c>)
 8001520:	f000 feac 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f240 2103 	movw	r1, #515	@ 0x203
 800152a:	4828      	ldr	r0, [pc, #160]	@ (80015cc <MX_GPIO_Init+0x140>)
 800152c:	f000 fea6 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001536:	4826      	ldr	r0, [pc, #152]	@ (80015d0 <MX_GPIO_Init+0x144>)
 8001538:	f000 fea0 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	21c1      	movs	r1, #193	@ 0xc1
 8001540:	4824      	ldr	r0, [pc, #144]	@ (80015d4 <MX_GPIO_Init+0x148>)
 8001542:	f000 fe9b 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Actuator1_IN1_Pin Actuaor1_IN2_Pin */
  GPIO_InitStruct.Pin = Actuator1_IN1_Pin|Actuaor1_IN2_Pin;
 8001546:	2328      	movs	r3, #40	@ 0x28
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	481a      	ldr	r0, [pc, #104]	@ (80015c8 <MX_GPIO_Init+0x13c>)
 800155e:	f000 fcfb 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper_Step_Pin Stepper_Dir_Pin Actuator_1_EN_Pin */
  GPIO_InitStruct.Pin = Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin;
 8001562:	f240 2303 	movw	r3, #515	@ 0x203
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4814      	ldr	r0, [pc, #80]	@ (80015cc <MX_GPIO_Init+0x140>)
 800157c:	f000 fcec 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <MX_GPIO_Init+0x144>)
 800159a:	f000 fcdd 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 800159e:	23c1      	movs	r3, #193	@ 0xc1
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <MX_GPIO_Init+0x148>)
 80015b6:	f000 fccf 	bl	8001f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48001400 	.word	0x48001400
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000400 	.word	0x48000400
 80015d4:	48000c00 	.word	0x48000c00

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <Error_Handler+0x8>

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <HAL_MspInit+0x44>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001628 <HAL_MspInit+0x44>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_MspInit+0x44>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_MspInit+0x44>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_MspInit+0x44>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160c:	6593      	str	r3, [r2, #88]	@ 0x58
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_MspInit+0x44>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0ae      	sub	sp, #184	@ 0xb8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	2294      	movs	r2, #148	@ 0x94
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fbf1 	bl	8005e34 <memset>
  if(hi2c->Instance==I2C1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a21      	ldr	r2, [pc, #132]	@ (80016dc <HAL_I2C_MspInit+0xb0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d13b      	bne.n	80016d4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800165c:	2340      	movs	r3, #64	@ 0x40
 800165e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001660:	2300      	movs	r3, #0
 8001662:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fb8f 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001674:	f7ff ffb0 	bl	80015d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167c:	4a18      	ldr	r2, [pc, #96]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001684:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001690:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001694:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001698:	2312      	movs	r3, #18
 800169a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016aa:	2304      	movs	r3, #4
 80016ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016b4:	4619      	mov	r1, r3
 80016b6:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <HAL_I2C_MspInit+0xb8>)
 80016b8:	f000 fc4e 	bl	8001f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 80016c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_I2C_MspInit+0xb4>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016d4:	bf00      	nop
 80016d6:	37b8      	adds	r7, #184	@ 0xb8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40005400 	.word	0x40005400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400

080016e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	@ 0x30
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a2e      	ldr	r2, [pc, #184]	@ (80017c0 <HAL_SPI_MspInit+0xd8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d128      	bne.n	800175c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800170a:	4b2e      	ldr	r3, [pc, #184]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	4a2d      	ldr	r2, [pc, #180]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001714:	6593      	str	r3, [r2, #88]	@ 0x58
 8001716:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	4a27      	ldr	r2, [pc, #156]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800173a:	231a      	movs	r3, #26
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800174a:	2305      	movs	r3, #5
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	481c      	ldr	r0, [pc, #112]	@ (80017c8 <HAL_SPI_MspInit+0xe0>)
 8001756:	f000 fbff 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800175a:	e02c      	b.n	80017b6 <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1a      	ldr	r2, [pc, #104]	@ (80017cc <HAL_SPI_MspInit+0xe4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d127      	bne.n	80017b6 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001766:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	4a16      	ldr	r2, [pc, #88]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 800176c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001770:	6593      	str	r3, [r2, #88]	@ 0x58
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <HAL_SPI_MspInit+0xdc>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001796:	2338      	movs	r3, #56	@ 0x38
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017a6:	2306      	movs	r3, #6
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	4807      	ldr	r0, [pc, #28]	@ (80017d0 <HAL_SPI_MspInit+0xe8>)
 80017b2:	f000 fbd1 	bl	8001f58 <HAL_GPIO_Init>
}
 80017b6:	bf00      	nop
 80017b8:	3730      	adds	r7, #48	@ 0x30
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40003800 	.word	0x40003800
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48000c00 	.word	0x48000c00
 80017cc:	40003c00 	.word	0x40003c00
 80017d0:	48000400 	.word	0x48000400

080017d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0b2      	sub	sp, #200	@ 0xc8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ec:	f107 0320 	add.w	r3, r7, #32
 80017f0:	2294      	movs	r2, #148	@ 0x94
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 fb1d 	bl	8005e34 <memset>
  if(huart->Instance==USART2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a53      	ldr	r2, [pc, #332]	@ (800194c <HAL_UART_MspInit+0x178>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d15d      	bne.n	80018c0 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001808:	2300      	movs	r3, #0
 800180a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fabb 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800181c:	f7ff fedc 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001820:	4b4b      	ldr	r3, [pc, #300]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	4a4a      	ldr	r2, [pc, #296]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 8001826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182a:	6593      	str	r3, [r2, #88]	@ 0x58
 800182c:	4b48      	ldr	r3, [pc, #288]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b45      	ldr	r3, [pc, #276]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183c:	4a44      	ldr	r2, [pc, #272]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001844:	4b42      	ldr	r3, [pc, #264]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 8001846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001850:	4b3f      	ldr	r3, [pc, #252]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 8001852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001854:	4a3e      	ldr	r2, [pc, #248]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185c:	4b3c      	ldr	r3, [pc, #240]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001868:	2308      	movs	r3, #8
 800186a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001880:	2307      	movs	r3, #7
 8001882:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001890:	f000 fb62 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001894:	2320      	movs	r3, #32
 8001896:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ac:	2307      	movs	r3, #7
 80018ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4826      	ldr	r0, [pc, #152]	@ (8001954 <HAL_UART_MspInit+0x180>)
 80018ba:	f000 fb4d 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018be:	e040      	b.n	8001942 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a24      	ldr	r2, [pc, #144]	@ (8001958 <HAL_UART_MspInit+0x184>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d13b      	bne.n	8001942 <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018ca:	2304      	movs	r3, #4
 80018cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fa58 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_UART_MspInit+0x112>
      Error_Handler();
 80018e2:	f7ff fe79 	bl	80015d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	4a19      	ldr	r2, [pc, #100]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <HAL_UART_MspInit+0x17c>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001916:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800191a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001930:	2307      	movs	r3, #7
 8001932:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001936:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	@ (8001954 <HAL_UART_MspInit+0x180>)
 800193e:	f000 fb0b 	bl	8001f58 <HAL_GPIO_Init>
}
 8001942:	bf00      	nop
 8001944:	37c8      	adds	r7, #200	@ 0xc8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40004400 	.word	0x40004400
 8001950:	40021000 	.word	0x40021000
 8001954:	48000c00 	.word	0x48000c00
 8001958:	40004800 	.word	0x40004800

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <NMI_Handler+0x4>

08001964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <MemManage_Handler+0x4>

08001974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <UsageFault_Handler+0x4>

08001984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b2:	f000 f9a7 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <xbee_init>:


UART_HandleTypeDef * xbee_uart;

//Sets UART Handle for our UART Stuff.
void xbee_init(UART_HandleTypeDef * uart_handle) {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	xbee_uart = uart_handle;
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <xbee_init+0x1c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200004d0 	.word	0x200004d0

08001a00 <systemInit>:

//Initial Setup w/ server. Sets correct time, receives existing pill data and configuration information from server.
void systemInit(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	 xbeeGetHour();
 8001a04:	f000 f80e 	bl	8001a24 <xbeeGetHour>
	 xbeeGetMin();
 8001a08:	f000 f830 	bl	8001a6c <xbeeGetMin>
	 xbeeGetYear();
 8001a0c:	f000 f84c 	bl	8001aa8 <xbeeGetYear>
	 xbeeGetDayOfWeek();
 8001a10:	f000 f86e 	bl	8001af0 <xbeeGetDayOfWeek>
	 xbeeGetMonth();
 8001a14:	f000 f88a 	bl	8001b2c <xbeeGetMonth>
	 xbeeGetSec();
 8001a18:	f000 f8a6 	bl	8001b68 <xbeeGetSec>
	 xbeeDownloadPills();
 8001a1c:	f000 f8c2 	bl	8001ba4 <xbeeDownloadPills>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <xbeeGetHour>:

void xbeeGetHour(){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
	uint8_t tx_buffer [1];
	tx_buffer [0] = (0xA) << 4 | 0x01;
 8001a2a:	23a1      	movs	r3, #161	@ 0xa1
 8001a2c:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buffer [1];
	HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <xbeeGetHour+0x44>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	1d39      	adds	r1, r7, #4
 8001a34:	2364      	movs	r3, #100	@ 0x64
 8001a36:	2201      	movs	r2, #1
 8001a38:	f003 fa8c 	bl	8004f54 <HAL_UART_Transmit>
	HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <xbeeGetHour+0x44>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	4639      	mov	r1, r7
 8001a42:	2364      	movs	r3, #100	@ 0x64
 8001a44:	2201      	movs	r2, #1
 8001a46:	f003 fb13 	bl	8005070 <HAL_UART_Receive>
	DS1307_SetHour(rx_buffer[0]);
 8001a4a:	783b      	ldrb	r3, [r7, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe ff2d 	bl	80008ac <DS1307_SetHour>
	uint8_t test = DS1307_GetHour();
 8001a52:	f7fe febb 	bl	80007cc <DS1307_GetHour>
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(50);
 8001a5a:	2032      	movs	r0, #50	@ 0x32
 8001a5c:	f000 f972 	bl	8001d44 <HAL_Delay>

}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200004d0 	.word	0x200004d0

08001a6c <xbeeGetMin>:

void xbeeGetMin(){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
	uint8_t tx_buffer [1];
	tx_buffer [0] = (0xA) << 4 | 0x02;
 8001a72:	23a2      	movs	r3, #162	@ 0xa2
 8001a74:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buffer [1];
	HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <xbeeGetMin+0x38>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	1d39      	adds	r1, r7, #4
 8001a7c:	2364      	movs	r3, #100	@ 0x64
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f003 fa68 	bl	8004f54 <HAL_UART_Transmit>
	HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8001a84:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <xbeeGetMin+0x38>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	4639      	mov	r1, r7
 8001a8a:	2364      	movs	r3, #100	@ 0x64
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f003 faef 	bl	8005070 <HAL_UART_Receive>
	DS1307_SetMinute(rx_buffer[0]);
 8001a92:	783b      	ldrb	r3, [r7, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe ff1e 	bl	80008d6 <DS1307_SetMinute>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200004d0 	.word	0x200004d0

08001aa8 <xbeeGetYear>:
void xbeeGetYear(){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	uint8_t tx_buffer [1];
	tx_buffer [0] = (0xA) << 4 | 0x05;
 8001aae:	23a5      	movs	r3, #165	@ 0xa5
 8001ab0:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buffer [2];
	HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <xbeeGetYear+0x44>)
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	1d39      	adds	r1, r7, #4
 8001ab8:	2364      	movs	r3, #100	@ 0x64
 8001aba:	2201      	movs	r2, #1
 8001abc:	f003 fa4a 	bl	8004f54 <HAL_UART_Transmit>
	HAL_UART_Receive(xbee_uart, rx_buffer, 2, 100);
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <xbeeGetYear+0x44>)
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	4639      	mov	r1, r7
 8001ac6:	2364      	movs	r3, #100	@ 0x64
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f003 fad1 	bl	8005070 <HAL_UART_Receive>
	DS1307_SetYear((rx_buffer[0] << 8) | rx_buffer[1]);
 8001ace:	783b      	ldrb	r3, [r7, #0]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe feba 	bl	8000858 <DS1307_SetYear>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200004d0 	.word	0x200004d0

08001af0 <xbeeGetDayOfWeek>:
void xbeeGetDayOfWeek(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	uint8_t tx_buffer [1];
	tx_buffer [0] = (0xA) << 4 | 0x08;
 8001af6:	23a8      	movs	r3, #168	@ 0xa8
 8001af8:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buffer [1];
	HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <xbeeGetDayOfWeek+0x38>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	1d39      	adds	r1, r7, #4
 8001b00:	2364      	movs	r3, #100	@ 0x64
 8001b02:	2201      	movs	r2, #1
 8001b04:	f003 fa26 	bl	8004f54 <HAL_UART_Transmit>
	HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8001b08:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <xbeeGetDayOfWeek+0x38>)
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	4639      	mov	r1, r7
 8001b0e:	2364      	movs	r3, #100	@ 0x64
 8001b10:	2201      	movs	r2, #1
 8001b12:	f003 faad 	bl	8005070 <HAL_UART_Receive>
	DS1307_SetDayOfWeek(rx_buffer[0]);
 8001b16:	783b      	ldrb	r3, [r7, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fe66 	bl	80007ea <DS1307_SetDayOfWeek>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200004d0 	.word	0x200004d0

08001b2c <xbeeGetMonth>:
void xbeeGetMonth(){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
	uint8_t tx_buffer [1];
	tx_buffer [0] = (0xA) << 4 | 0x06;
 8001b32:	23a6      	movs	r3, #166	@ 0xa6
 8001b34:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buffer [1];
	HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <xbeeGetMonth+0x38>)
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	1d39      	adds	r1, r7, #4
 8001b3c:	2364      	movs	r3, #100	@ 0x64
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f003 fa08 	bl	8004f54 <HAL_UART_Transmit>
	HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <xbeeGetMonth+0x38>)
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	4639      	mov	r1, r7
 8001b4a:	2364      	movs	r3, #100	@ 0x64
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f003 fa8f 	bl	8005070 <HAL_UART_Receive>
	DS1307_SetMonth(rx_buffer[0]);
 8001b52:	783b      	ldrb	r3, [r7, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fe6c 	bl	8000832 <DS1307_SetMonth>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200004d0 	.word	0x200004d0

08001b68 <xbeeGetSec>:
void xbeeGetSec(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	uint8_t tx_buffer [1];
	tx_buffer [0] = (0xA) << 4 | 0x03;
 8001b6e:	23a3      	movs	r3, #163	@ 0xa3
 8001b70:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buffer [1];
	HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <xbeeGetSec+0x38>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	1d39      	adds	r1, r7, #4
 8001b78:	2364      	movs	r3, #100	@ 0x64
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f003 f9ea 	bl	8004f54 <HAL_UART_Transmit>
	HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8001b80:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <xbeeGetSec+0x38>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	4639      	mov	r1, r7
 8001b86:	2364      	movs	r3, #100	@ 0x64
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f003 fa71 	bl	8005070 <HAL_UART_Receive>
	DS1307_SetSecond(rx_buffer[0]);
 8001b8e:	783b      	ldrb	r3, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe feb2 	bl	80008fa <DS1307_SetSecond>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200004d0 	.word	0x200004d0

08001ba4 <xbeeDownloadPills>:
void xbeeUploadPills(){

}
void xbeeDownloadPills(){
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <XPT2046_Init>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void XPT2046_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bbe:	4810      	ldr	r0, [pc, #64]	@ (8001c00 <XPT2046_Init+0x4c>)
 8001bc0:	f000 fb5c 	bl	800227c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8001bc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2180      	movs	r1, #128	@ 0x80
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <XPT2046_Init+0x50>)
 8001bce:	f002 fe98 	bl	8004902 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8001bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2100      	movs	r1, #0
 8001bda:	480a      	ldr	r0, [pc, #40]	@ (8001c04 <XPT2046_Init+0x50>)
 8001bdc:	f002 fe91 	bl	8004902 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8001be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be4:	2201      	movs	r2, #1
 8001be6:	2100      	movs	r1, #0
 8001be8:	4806      	ldr	r0, [pc, #24]	@ (8001c04 <XPT2046_Init+0x50>)
 8001bea:	f002 fe8a 	bl	8004902 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <XPT2046_Init+0x4c>)
 8001bf6:	f000 fb41 	bl	800227c <HAL_GPIO_WritePin>
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	48000400 	.word	0x48000400
 8001c04:	20000344 	.word	0x20000344

08001c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c0c:	f7ff fed6 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c12:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <LoopForever+0xe>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c28:	4c0a      	ldr	r4, [pc, #40]	@ (8001c54 <LoopForever+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c36:	f004 f905 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3a:	f7ff fa11 	bl	8001060 <main>

08001c3e <LoopForever>:

LoopForever:
    b LoopForever
 8001c3e:	e7fe      	b.n	8001c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c40:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c4c:	08005f48 	.word	0x08005f48
  ldr r2, =_sbss
 8001c50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c54:	200004d8 	.word	0x200004d8

08001c58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC1_IRQHandler>

08001c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f000 f943 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6a:	200f      	movs	r0, #15
 8001c6c:	f000 f80e 	bl	8001c8c <HAL_InitTick>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	71fb      	strb	r3, [r7, #7]
 8001c7a:	e001      	b.n	8001c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c7c:	f7ff fcb2 	bl	80015e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c80:	79fb      	ldrb	r3, [r7, #7]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c98:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <HAL_InitTick+0x6c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca0:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_InitTick+0x70>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <HAL_InitTick+0x6c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f941 	bl	8001f3e <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d809      	bhi.n	8001cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cd0:	f000 f919 	bl	8001f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_InitTick+0x74>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e007      	b.n	8001cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e004      	b.n	8001cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	e001      	b.n	8001cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	200004d4 	.word	0x200004d4

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200004d4 	.word	0x200004d4

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000008 	.word	0x20000008

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	@ (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff47 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff5c 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffb0 	bl	8001eac <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f66:	e166      	b.n	8002236 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8158 	beq.w	8002230 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d005      	beq.n	8001f98 <HAL_GPIO_Init+0x40>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d130      	bne.n	8001ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fce:	2201      	movs	r2, #1
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	f003 0201 	and.w	r2, r3, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b03      	cmp	r3, #3
 8002004:	d017      	beq.n	8002036 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d123      	bne.n	800208a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	08da      	lsrs	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	6939      	ldr	r1, [r7, #16]
 8002086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0203 	and.w	r2, r3, #3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80b2 	beq.w	8002230 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020cc:	4b61      	ldr	r3, [pc, #388]	@ (8002254 <HAL_GPIO_Init+0x2fc>)
 80020ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d0:	4a60      	ldr	r2, [pc, #384]	@ (8002254 <HAL_GPIO_Init+0x2fc>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80020d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002254 <HAL_GPIO_Init+0x2fc>)
 80020da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002258 <HAL_GPIO_Init+0x300>)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800210e:	d02b      	beq.n	8002168 <HAL_GPIO_Init+0x210>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a52      	ldr	r2, [pc, #328]	@ (800225c <HAL_GPIO_Init+0x304>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d025      	beq.n	8002164 <HAL_GPIO_Init+0x20c>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a51      	ldr	r2, [pc, #324]	@ (8002260 <HAL_GPIO_Init+0x308>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d01f      	beq.n	8002160 <HAL_GPIO_Init+0x208>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a50      	ldr	r2, [pc, #320]	@ (8002264 <HAL_GPIO_Init+0x30c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d019      	beq.n	800215c <HAL_GPIO_Init+0x204>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a4f      	ldr	r2, [pc, #316]	@ (8002268 <HAL_GPIO_Init+0x310>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_GPIO_Init+0x200>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a4e      	ldr	r2, [pc, #312]	@ (800226c <HAL_GPIO_Init+0x314>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00d      	beq.n	8002154 <HAL_GPIO_Init+0x1fc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a4d      	ldr	r2, [pc, #308]	@ (8002270 <HAL_GPIO_Init+0x318>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0x1f8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a4c      	ldr	r2, [pc, #304]	@ (8002274 <HAL_GPIO_Init+0x31c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_GPIO_Init+0x1f4>
 8002148:	2307      	movs	r3, #7
 800214a:	e00e      	b.n	800216a <HAL_GPIO_Init+0x212>
 800214c:	2308      	movs	r3, #8
 800214e:	e00c      	b.n	800216a <HAL_GPIO_Init+0x212>
 8002150:	2306      	movs	r3, #6
 8002152:	e00a      	b.n	800216a <HAL_GPIO_Init+0x212>
 8002154:	2305      	movs	r3, #5
 8002156:	e008      	b.n	800216a <HAL_GPIO_Init+0x212>
 8002158:	2304      	movs	r3, #4
 800215a:	e006      	b.n	800216a <HAL_GPIO_Init+0x212>
 800215c:	2303      	movs	r3, #3
 800215e:	e004      	b.n	800216a <HAL_GPIO_Init+0x212>
 8002160:	2302      	movs	r3, #2
 8002162:	e002      	b.n	800216a <HAL_GPIO_Init+0x212>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_GPIO_Init+0x212>
 8002168:	2300      	movs	r3, #0
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4093      	lsls	r3, r2
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800217a:	4937      	ldr	r1, [pc, #220]	@ (8002258 <HAL_GPIO_Init+0x300>)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002188:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <HAL_GPIO_Init+0x320>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021ac:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <HAL_GPIO_Init+0x320>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021b2:	4b31      	ldr	r3, [pc, #196]	@ (8002278 <HAL_GPIO_Init+0x320>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021d6:	4a28      	ldr	r2, [pc, #160]	@ (8002278 <HAL_GPIO_Init+0x320>)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021dc:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <HAL_GPIO_Init+0x320>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002200:	4a1d      	ldr	r2, [pc, #116]	@ (8002278 <HAL_GPIO_Init+0x320>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002206:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <HAL_GPIO_Init+0x320>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800222a:	4a13      	ldr	r2, [pc, #76]	@ (8002278 <HAL_GPIO_Init+0x320>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3301      	adds	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	f47f ae91 	bne.w	8001f68 <HAL_GPIO_Init+0x10>
  }
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000
 8002258:	40010000 	.word	0x40010000
 800225c:	48000400 	.word	0x48000400
 8002260:	48000800 	.word	0x48000800
 8002264:	48000c00 	.word	0x48000c00
 8002268:	48001000 	.word	0x48001000
 800226c:	48001400 	.word	0x48001400
 8002270:	48001800 	.word	0x48001800
 8002274:	48001c00 	.word	0x48001c00
 8002278:	40010400 	.word	0x40010400

0800227c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
 8002288:	4613      	mov	r3, r2
 800228a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800228c:	787b      	ldrb	r3, [r7, #1]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002298:	e002      	b.n	80022a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e08d      	b.n	80023da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff f9aa 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	@ 0x24
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800230c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d107      	bne.n	8002326 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	e006      	b.n	8002334 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002332:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d108      	bne.n	800234e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	e007      	b.n	800235e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800235c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800236c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002370:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002380:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69d9      	ldr	r1, [r3, #28]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1a      	ldr	r2, [r3, #32]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	461a      	mov	r2, r3
 80023f0:	460b      	mov	r3, r1
 80023f2:	817b      	strh	r3, [r7, #10]
 80023f4:	4613      	mov	r3, r2
 80023f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	f040 80fd 	bne.w	8002600 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2C_Master_Transmit+0x30>
 8002410:	2302      	movs	r3, #2
 8002412:	e0f6      	b.n	8002602 <HAL_I2C_Master_Transmit+0x21e>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800241c:	f7ff fc86 	bl	8001d2c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	2319      	movs	r3, #25
 8002428:	2201      	movs	r2, #1
 800242a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fa0a 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0e1      	b.n	8002602 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2221      	movs	r2, #33	@ 0x21
 8002442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2210      	movs	r2, #16
 800244a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	893a      	ldrh	r2, [r7, #8]
 800245e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	2bff      	cmp	r3, #255	@ 0xff
 800246e:	d906      	bls.n	800247e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	22ff      	movs	r2, #255	@ 0xff
 8002474:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002476:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e007      	b.n	800248e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002488:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800248c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002492:	2b00      	cmp	r3, #0
 8002494:	d024      	beq.n	80024e0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	8979      	ldrh	r1, [r7, #10]
 80024d2:	4b4e      	ldr	r3, [pc, #312]	@ (800260c <HAL_I2C_Master_Transmit+0x228>)
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fbf1 	bl	8002cc0 <I2C_TransferConfig>
 80024de:	e066      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	4b48      	ldr	r3, [pc, #288]	@ (800260c <HAL_I2C_Master_Transmit+0x228>)
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fbe6 	bl	8002cc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024f4:	e05b      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	6a39      	ldr	r1, [r7, #32]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f9f3 	bl	80028e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07b      	b.n	8002602 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d034      	beq.n	80025ae <HAL_I2C_Master_Transmit+0x1ca>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d130      	bne.n	80025ae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2200      	movs	r2, #0
 8002554:	2180      	movs	r1, #128	@ 0x80
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f976 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e04d      	b.n	8002602 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	2bff      	cmp	r3, #255	@ 0xff
 800256e:	d90e      	bls.n	800258e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	22ff      	movs	r2, #255	@ 0xff
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	b2da      	uxtb	r2, r3
 800257c:	8979      	ldrh	r1, [r7, #10]
 800257e:	2300      	movs	r3, #0
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fb9a 	bl	8002cc0 <I2C_TransferConfig>
 800258c:	e00f      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	b2da      	uxtb	r2, r3
 800259e:	8979      	ldrh	r1, [r7, #10]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fb89 	bl	8002cc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d19e      	bne.n	80024f6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	6a39      	ldr	r1, [r7, #32]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f9d9 	bl	8002974 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e01a      	b.n	8002602 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2220      	movs	r2, #32
 80025d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <HAL_I2C_Master_Transmit+0x22c>)
 80025e0:	400b      	ands	r3, r1
 80025e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	80002000 	.word	0x80002000
 8002610:	fe00e800 	.word	0xfe00e800

08002614 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	461a      	mov	r2, r3
 8002620:	460b      	mov	r3, r1
 8002622:	817b      	strh	r3, [r7, #10]
 8002624:	4613      	mov	r3, r2
 8002626:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	f040 80db 	bne.w	80027ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_I2C_Master_Receive+0x30>
 8002640:	2302      	movs	r3, #2
 8002642:	e0d4      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800264c:	f7ff fb6e 	bl	8001d2c <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2319      	movs	r3, #25
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f8f2 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0bf      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2222      	movs	r2, #34	@ 0x22
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2210      	movs	r2, #16
 800267a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	893a      	ldrh	r2, [r7, #8]
 800268e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	2bff      	cmp	r3, #255	@ 0xff
 800269e:	d90e      	bls.n	80026be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	22ff      	movs	r2, #255	@ 0xff
 80026a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	8979      	ldrh	r1, [r7, #10]
 80026ae:	4b52      	ldr	r3, [pc, #328]	@ (80027f8 <HAL_I2C_Master_Receive+0x1e4>)
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fb02 	bl	8002cc0 <I2C_TransferConfig>
 80026bc:	e06d      	b.n	800279a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	8979      	ldrh	r1, [r7, #10]
 80026d0:	4b49      	ldr	r3, [pc, #292]	@ (80027f8 <HAL_I2C_Master_Receive+0x1e4>)
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 faf1 	bl	8002cc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80026de:	e05c      	b.n	800279a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	6a39      	ldr	r1, [r7, #32]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f989 	bl	80029fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e07c      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d034      	beq.n	800279a <HAL_I2C_Master_Receive+0x186>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d130      	bne.n	800279a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	2200      	movs	r2, #0
 8002740:	2180      	movs	r1, #128	@ 0x80
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f880 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e04d      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	2bff      	cmp	r3, #255	@ 0xff
 800275a:	d90e      	bls.n	800277a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	22ff      	movs	r2, #255	@ 0xff
 8002760:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002766:	b2da      	uxtb	r2, r3
 8002768:	8979      	ldrh	r1, [r7, #10]
 800276a:	2300      	movs	r3, #0
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 faa4 	bl	8002cc0 <I2C_TransferConfig>
 8002778:	e00f      	b.n	800279a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002788:	b2da      	uxtb	r2, r3
 800278a:	8979      	ldrh	r1, [r7, #10]
 800278c:	2300      	movs	r3, #0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fa93 	bl	8002cc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d19d      	bne.n	80026e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	6a39      	ldr	r1, [r7, #32]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f8e3 	bl	8002974 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e01a      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2220      	movs	r2, #32
 80027be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <HAL_I2C_Master_Receive+0x1e8>)
 80027cc:	400b      	ands	r3, r1
 80027ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	80002400 	.word	0x80002400
 80027fc:	fe00e800 	.word	0xfe00e800

08002800 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d103      	bne.n	800281e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d007      	beq.n	800283c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	619a      	str	r2, [r3, #24]
  }
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002858:	e031      	b.n	80028be <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002860:	d02d      	beq.n	80028be <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7ff fa63 	bl	8001d2c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d122      	bne.n	80028be <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	429a      	cmp	r2, r3
 8002894:	d113      	bne.n	80028be <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f043 0220 	orr.w	r2, r3, #32
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00f      	b.n	80028de <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4013      	ands	r3, r2
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d0be      	beq.n	800285a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028f2:	e033      	b.n	800295c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f901 	bl	8002b00 <I2C_IsErrorOccurred>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e031      	b.n	800296c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800290e:	d025      	beq.n	800295c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002910:	f7ff fa0c 	bl	8001d2c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d302      	bcc.n	8002926 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11a      	bne.n	800295c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b02      	cmp	r3, #2
 8002932:	d013      	beq.n	800295c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e007      	b.n	800296c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b02      	cmp	r3, #2
 8002968:	d1c4      	bne.n	80028f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002980:	e02f      	b.n	80029e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f8ba 	bl	8002b00 <I2C_IsErrorOccurred>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e02d      	b.n	80029f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002996:	f7ff f9c9 	bl	8001d2c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11a      	bne.n	80029e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d013      	beq.n	80029e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d1c8      	bne.n	8002982 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a08:	e06b      	b.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f876 	bl	8002b00 <I2C_IsErrorOccurred>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e069      	b.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d138      	bne.n	8002a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d105      	bne.n	8002a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e055      	b.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d107      	bne.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2210      	movs	r2, #16
 8002a5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a62:	e002      	b.n	8002a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002afc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002a7e:	400b      	ands	r3, r1
 8002a80:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e029      	b.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9e:	f7ff f945 	bl	8001d2c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d302      	bcc.n	8002ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d116      	bne.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d00f      	beq.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e007      	b.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d18c      	bne.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	fe00e800 	.word	0xfe00e800

08002b00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	@ 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d068      	beq.n	8002bfe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2210      	movs	r2, #16
 8002b32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b34:	e049      	b.n	8002bca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b3c:	d045      	beq.n	8002bca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7ff f8f5 	bl	8001d2c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_IsErrorOccurred+0x54>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d13a      	bne.n	8002bca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b76:	d121      	bne.n	8002bbc <I2C_IsErrorOccurred+0xbc>
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b7e:	d01d      	beq.n	8002bbc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d01a      	beq.n	8002bbc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b96:	f7ff f8c9 	bl	8001d2c <HAL_GetTick>
 8002b9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b9c:	e00e      	b.n	8002bbc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b9e:	f7ff f8c5 	bl	8001d2c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b19      	cmp	r3, #25
 8002baa:	d907      	bls.n	8002bbc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	f043 0320 	orr.w	r3, r3, #32
 8002bb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002bba:	e006      	b.n	8002bca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d1e9      	bne.n	8002b9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d003      	beq.n	8002be0 <I2C_IsErrorOccurred+0xe0>
 8002bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0aa      	beq.n	8002b36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2220      	movs	r2, #32
 8002bee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00b      	beq.n	8002c28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f043 0302 	orr.w	r3, r3, #2
 8002c5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01c      	beq.n	8002cae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff fdc3 	bl	8002800 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <I2C_IsErrorOccurred+0x1bc>)
 8002c86:	400b      	ands	r3, r1
 8002c88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002cae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3728      	adds	r7, #40	@ 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	fe00e800 	.word	0xfe00e800

08002cc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cd8:	7a7b      	ldrb	r3, [r7, #9]
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	0d5b      	lsrs	r3, r3, #21
 8002cfa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002cfe:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <I2C_TransferConfig+0x60>)
 8002d00:	430b      	orrs	r3, r1
 8002d02:	43db      	mvns	r3, r3
 8002d04:	ea02 0103 	and.w	r1, r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	03ff63ff 	.word	0x03ff63ff

08002d24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d138      	bne.n	8002dac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e032      	b.n	8002dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	@ 0x24
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d139      	bne.n	8002e44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e033      	b.n	8002e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2224      	movs	r2, #36	@ 0x24
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e58:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e64:	d102      	bne.n	8002e6c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e6a:	e00b      	b.n	8002e84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e6c:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e7a:	d102      	bne.n	8002e82 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e80:	e000      	b.n	8002e84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e82:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40007000 	.word	0x40007000

08002e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d141      	bne.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eae:	d131      	bne.n	8002f14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eb0:	4b47      	ldr	r3, [pc, #284]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eb6:	4a46      	ldr	r2, [pc, #280]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec0:	4b43      	ldr	r3, [pc, #268]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ec8:	4a41      	ldr	r2, [pc, #260]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ed0:	4b40      	ldr	r3, [pc, #256]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2232      	movs	r2, #50	@ 0x32
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0c9b      	lsrs	r3, r3, #18
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee6:	e002      	b.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eee:	4b38      	ldr	r3, [pc, #224]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efa:	d102      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f2      	bne.n	8002ee8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f02:	4b33      	ldr	r3, [pc, #204]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f0e:	d158      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e057      	b.n	8002fc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f14:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f24:	e04d      	b.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f2c:	d141      	bne.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2e:	4b28      	ldr	r3, [pc, #160]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3a:	d131      	bne.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f3c:	4b24      	ldr	r3, [pc, #144]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f42:	4a23      	ldr	r2, [pc, #140]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f4c:	4b20      	ldr	r3, [pc, #128]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f54:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2232      	movs	r2, #50	@ 0x32
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	0c9b      	lsrs	r3, r3, #18
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f72:	e002      	b.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f7a:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f86:	d102      	bne.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f2      	bne.n	8002f74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9a:	d112      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e011      	b.n	8002fc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fb0:	e007      	b.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fb2:	4b07      	ldr	r3, [pc, #28]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fba:	4a05      	ldr	r2, [pc, #20]	@ (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fc0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	431bde83 	.word	0x431bde83

08002fdc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f000 bc08 	b.w	8003800 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff0:	4b96      	ldr	r3, [pc, #600]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ffa:	4b94      	ldr	r3, [pc, #592]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80e4 	beq.w	80031da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_RCC_OscConfig+0x4c>
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b0c      	cmp	r3, #12
 800301c:	f040 808b 	bne.w	8003136 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b01      	cmp	r3, #1
 8003024:	f040 8087 	bne.w	8003136 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003028:	4b88      	ldr	r3, [pc, #544]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_OscConfig+0x64>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e3df      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1a      	ldr	r2, [r3, #32]
 8003044:	4b81      	ldr	r3, [pc, #516]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_RCC_OscConfig+0x7e>
 8003050:	4b7e      	ldr	r3, [pc, #504]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003058:	e005      	b.n	8003066 <HAL_RCC_OscConfig+0x8a>
 800305a:	4b7c      	ldr	r3, [pc, #496]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 800305c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003066:	4293      	cmp	r3, r2
 8003068:	d223      	bcs.n	80030b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fdcc 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e3c0      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800307e:	4b73      	ldr	r3, [pc, #460]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a72      	ldr	r2, [pc, #456]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b70      	ldr	r3, [pc, #448]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	496d      	ldr	r1, [pc, #436]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800309c:	4b6b      	ldr	r3, [pc, #428]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	4968      	ldr	r1, [pc, #416]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
 80030b0:	e025      	b.n	80030fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b2:	4b66      	ldr	r3, [pc, #408]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a65      	ldr	r2, [pc, #404]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80030b8:	f043 0308 	orr.w	r3, r3, #8
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b63      	ldr	r3, [pc, #396]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4960      	ldr	r1, [pc, #384]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d0:	4b5e      	ldr	r3, [pc, #376]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	495b      	ldr	r1, [pc, #364]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fd8c 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e380      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030fe:	f000 fcc1 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8003102:	4602      	mov	r2, r0
 8003104:	4b51      	ldr	r3, [pc, #324]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	4950      	ldr	r1, [pc, #320]	@ (8003250 <HAL_RCC_OscConfig+0x274>)
 8003110:	5ccb      	ldrb	r3, [r1, r3]
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a4e      	ldr	r2, [pc, #312]	@ (8003254 <HAL_RCC_OscConfig+0x278>)
 800311c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800311e:	4b4e      	ldr	r3, [pc, #312]	@ (8003258 <HAL_RCC_OscConfig+0x27c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fdb2 	bl	8001c8c <HAL_InitTick>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d052      	beq.n	80031d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	e364      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d032      	beq.n	80031a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800313e:	4b43      	ldr	r3, [pc, #268]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a42      	ldr	r2, [pc, #264]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314a:	f7fe fdef 	bl	8001d2c <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003152:	f7fe fdeb 	bl	8001d2c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e34d      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003164:	4b39      	ldr	r3, [pc, #228]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003170:	4b36      	ldr	r3, [pc, #216]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a35      	ldr	r2, [pc, #212]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003176:	f043 0308 	orr.w	r3, r3, #8
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b33      	ldr	r3, [pc, #204]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4930      	ldr	r1, [pc, #192]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800318e:	4b2f      	ldr	r3, [pc, #188]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	492b      	ldr	r1, [pc, #172]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
 80031a2:	e01a      	b.n	80031da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031a4:	4b29      	ldr	r3, [pc, #164]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a28      	ldr	r2, [pc, #160]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fdbc 	bl	8001d2c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b8:	f7fe fdb8 	bl	8001d2c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e31a      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ca:	4b20      	ldr	r3, [pc, #128]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x1dc>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d073      	beq.n	80032ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_OscConfig+0x21c>
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d10e      	bne.n	8003210 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4b14      	ldr	r3, [pc, #80]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d063      	beq.n	80032cc <HAL_RCC_OscConfig+0x2f0>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d15f      	bne.n	80032cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e2f7      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x24c>
 800321a:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0b      	ldr	r2, [pc, #44]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e025      	b.n	8003274 <HAL_RCC_OscConfig+0x298>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003230:	d114      	bne.n	800325c <HAL_RCC_OscConfig+0x280>
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a05      	ldr	r2, [pc, #20]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b03      	ldr	r3, [pc, #12]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a02      	ldr	r2, [pc, #8]	@ (800324c <HAL_RCC_OscConfig+0x270>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e013      	b.n	8003274 <HAL_RCC_OscConfig+0x298>
 800324c:	40021000 	.word	0x40021000
 8003250:	08005ec8 	.word	0x08005ec8
 8003254:	20000000 	.word	0x20000000
 8003258:	20000004 	.word	0x20000004
 800325c:	4ba0      	ldr	r3, [pc, #640]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a9f      	ldr	r2, [pc, #636]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b9d      	ldr	r3, [pc, #628]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a9c      	ldr	r2, [pc, #624]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe fd56 	bl	8001d2c <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fd52 	bl	8001d2c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	@ 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e2b4      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003296:	4b92      	ldr	r3, [pc, #584]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x2a8>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fd42 	bl	8001d2c <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fd3e 	bl	8001d2c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e2a0      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032be:	4b88      	ldr	r3, [pc, #544]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x2d0>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d060      	beq.n	800339c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d005      	beq.n	80032ec <HAL_RCC_OscConfig+0x310>
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d119      	bne.n	800331a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d116      	bne.n	800331a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ec:	4b7c      	ldr	r3, [pc, #496]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_OscConfig+0x328>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e27d      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	4b76      	ldr	r3, [pc, #472]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	4973      	ldr	r1, [pc, #460]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003318:	e040      	b.n	800339c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d023      	beq.n	800336a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003322:	4b6f      	ldr	r3, [pc, #444]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6e      	ldr	r2, [pc, #440]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fe fcfd 	bl	8001d2c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003336:	f7fe fcf9 	bl	8001d2c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e25b      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003348:	4b65      	ldr	r3, [pc, #404]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003354:	4b62      	ldr	r3, [pc, #392]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	061b      	lsls	r3, r3, #24
 8003362:	495f      	ldr	r1, [pc, #380]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	e018      	b.n	800339c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336a:	4b5d      	ldr	r3, [pc, #372]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5c      	ldr	r2, [pc, #368]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fe fcd9 	bl	8001d2c <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337e:	f7fe fcd5 	bl	8001d2c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e237      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003390:	4b53      	ldr	r3, [pc, #332]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d03c      	beq.n	8003422 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01c      	beq.n	80033ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b0:	4b4b      	ldr	r3, [pc, #300]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80033b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b6:	4a4a      	ldr	r2, [pc, #296]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fe fcb4 	bl	8001d2c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c8:	f7fe fcb0 	bl	8001d2c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e212      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033da:	4b41      	ldr	r3, [pc, #260]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80033dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ef      	beq.n	80033c8 <HAL_RCC_OscConfig+0x3ec>
 80033e8:	e01b      	b.n	8003422 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ea:	4b3d      	ldr	r3, [pc, #244]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80033ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f0:	4a3b      	ldr	r2, [pc, #236]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe fc97 	bl	8001d2c <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003402:	f7fe fc93 	bl	8001d2c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e1f5      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003414:	4b32      	ldr	r3, [pc, #200]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ef      	bne.n	8003402 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80a6 	beq.w	800357c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003434:	4b2a      	ldr	r3, [pc, #168]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003440:	4b27      	ldr	r3, [pc, #156]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	4a26      	ldr	r2, [pc, #152]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 8003446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800344a:	6593      	str	r3, [r2, #88]	@ 0x58
 800344c:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003458:	2301      	movs	r3, #1
 800345a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345c:	4b21      	ldr	r3, [pc, #132]	@ (80034e4 <HAL_RCC_OscConfig+0x508>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d118      	bne.n	800349a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003468:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <HAL_RCC_OscConfig+0x508>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <HAL_RCC_OscConfig+0x508>)
 800346e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003472:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003474:	f7fe fc5a 	bl	8001d2c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347c:	f7fe fc56 	bl	8001d2c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e1b8      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348e:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <HAL_RCC_OscConfig+0x508>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d108      	bne.n	80034b4 <HAL_RCC_OscConfig+0x4d8>
 80034a2:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	4a0d      	ldr	r2, [pc, #52]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034b2:	e029      	b.n	8003508 <HAL_RCC_OscConfig+0x52c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d115      	bne.n	80034e8 <HAL_RCC_OscConfig+0x50c>
 80034bc:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c2:	4a07      	ldr	r2, [pc, #28]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034cc:	4b04      	ldr	r3, [pc, #16]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d2:	4a03      	ldr	r2, [pc, #12]	@ (80034e0 <HAL_RCC_OscConfig+0x504>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034dc:	e014      	b.n	8003508 <HAL_RCC_OscConfig+0x52c>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40007000 	.word	0x40007000
 80034e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ee:	4a9c      	ldr	r2, [pc, #624]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034f8:	4b99      	ldr	r3, [pc, #612]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fe:	4a98      	ldr	r2, [pc, #608]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d016      	beq.n	800353e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fe fc0c 	bl	8001d2c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003516:	e00a      	b.n	800352e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe fc08 	bl	8001d2c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e168      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352e:	4b8c      	ldr	r3, [pc, #560]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ed      	beq.n	8003518 <HAL_RCC_OscConfig+0x53c>
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353e:	f7fe fbf5 	bl	8001d2c <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe fbf1 	bl	8001d2c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e151      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800355c:	4b80      	ldr	r3, [pc, #512]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ed      	bne.n	8003546 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356a:	7ffb      	ldrb	r3, [r7, #31]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d105      	bne.n	800357c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003570:	4b7b      	ldr	r3, [pc, #492]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	4a7a      	ldr	r2, [pc, #488]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800357a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d03c      	beq.n	8003602 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01c      	beq.n	80035ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003590:	4b73      	ldr	r3, [pc, #460]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003592:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003596:	4a72      	ldr	r2, [pc, #456]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fbc4 	bl	8001d2c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035a8:	f7fe fbc0 	bl	8001d2c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e122      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ba:	4b69      	ldr	r3, [pc, #420]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80035bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ef      	beq.n	80035a8 <HAL_RCC_OscConfig+0x5cc>
 80035c8:	e01b      	b.n	8003602 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ca:	4b65      	ldr	r3, [pc, #404]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80035cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035d0:	4a63      	ldr	r2, [pc, #396]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fe fba7 	bl	8001d2c <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e2:	f7fe fba3 	bl	8001d2c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e105      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80035f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1ef      	bne.n	80035e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80f9 	beq.w	80037fe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	2b02      	cmp	r3, #2
 8003612:	f040 80cf 	bne.w	80037b4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003616:	4b52      	ldr	r3, [pc, #328]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f003 0203 	and.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	429a      	cmp	r2, r3
 8003628:	d12c      	bne.n	8003684 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	3b01      	subs	r3, #1
 8003636:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d123      	bne.n	8003684 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003646:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d11b      	bne.n	8003684 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003656:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d113      	bne.n	8003684 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	3b01      	subs	r3, #1
 800366a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d109      	bne.n	8003684 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	3b01      	subs	r3, #1
 800367e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d071      	beq.n	8003768 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d068      	beq.n	800375c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800368a:	4b35      	ldr	r3, [pc, #212]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003696:	4b32      	ldr	r3, [pc, #200]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0ac      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80036ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036b2:	f7fe fb3b 	bl	8001d2c <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fe fb37 	bl	8001d2c <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e099      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036cc:	4b24      	ldr	r3, [pc, #144]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f0      	bne.n	80036ba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d8:	4b21      	ldr	r3, [pc, #132]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	4b21      	ldr	r3, [pc, #132]	@ (8003764 <HAL_RCC_OscConfig+0x788>)
 80036de:	4013      	ands	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036e8:	3a01      	subs	r2, #1
 80036ea:	0112      	lsls	r2, r2, #4
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036f2:	0212      	lsls	r2, r2, #8
 80036f4:	4311      	orrs	r1, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036fa:	0852      	lsrs	r2, r2, #1
 80036fc:	3a01      	subs	r2, #1
 80036fe:	0552      	lsls	r2, r2, #21
 8003700:	4311      	orrs	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003706:	0852      	lsrs	r2, r2, #1
 8003708:	3a01      	subs	r2, #1
 800370a:	0652      	lsls	r2, r2, #25
 800370c:	4311      	orrs	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003712:	06d2      	lsls	r2, r2, #27
 8003714:	430a      	orrs	r2, r1
 8003716:	4912      	ldr	r1, [pc, #72]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003718:	4313      	orrs	r3, r2
 800371a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800371c:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0f      	ldr	r2, [pc, #60]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003726:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003728:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a0c      	ldr	r2, [pc, #48]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003732:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003734:	f7fe fafa 	bl	8001d2c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe faf6 	bl	8001d2c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e058      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374e:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <HAL_RCC_OscConfig+0x784>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800375a:	e050      	b.n	80037fe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e04f      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
 8003760:	40021000 	.word	0x40021000
 8003764:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003768:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d144      	bne.n	80037fe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003774:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a23      	ldr	r2, [pc, #140]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003780:	4b21      	ldr	r3, [pc, #132]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a20      	ldr	r2, [pc, #128]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800378c:	f7fe face 	bl	8001d2c <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe faca 	bl	8001d2c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e02c      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	4b18      	ldr	r3, [pc, #96]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x7b8>
 80037b2:	e024      	b.n	80037fe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d01f      	beq.n	80037fa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b13      	ldr	r3, [pc, #76]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 80037c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fe fab1 	bl	8001d2c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe faad 	bl	8001d2c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e00f      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e0:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	4905      	ldr	r1, [pc, #20]	@ (8003808 <HAL_RCC_OscConfig+0x82c>)
 80037f2:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_RCC_OscConfig+0x830>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	60cb      	str	r3, [r1, #12]
 80037f8:	e001      	b.n	80037fe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	feeefffc 	.word	0xfeeefffc

08003810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e11d      	b.n	8003a64 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b90      	ldr	r3, [pc, #576]	@ (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d910      	bls.n	8003858 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b8d      	ldr	r3, [pc, #564]	@ (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 020f 	bic.w	r2, r3, #15
 800383e:	498b      	ldr	r1, [pc, #556]	@ (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b89      	ldr	r3, [pc, #548]	@ (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e105      	b.n	8003a64 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4b81      	ldr	r3, [pc, #516]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003870:	429a      	cmp	r2, r3
 8003872:	d908      	bls.n	8003886 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003874:	4b7e      	ldr	r3, [pc, #504]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	497b      	ldr	r1, [pc, #492]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d079      	beq.n	8003986 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d11e      	bne.n	80038d8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	4b75      	ldr	r3, [pc, #468]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0dc      	b.n	8003a64 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80038aa:	f000 fa09 	bl	8003cc0 <RCC_GetSysClockFreqFromPLLSource>
 80038ae:	4603      	mov	r3, r0
 80038b0:	4a70      	ldr	r2, [pc, #448]	@ (8003a74 <HAL_RCC_ClockConfig+0x264>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d946      	bls.n	8003944 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d140      	bne.n	8003944 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038c2:	4b6b      	ldr	r3, [pc, #428]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ca:	4a69      	ldr	r2, [pc, #420]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038d2:	2380      	movs	r3, #128	@ 0x80
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e035      	b.n	8003944 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e0:	4b63      	ldr	r3, [pc, #396]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d115      	bne.n	8003918 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0b9      	b.n	8003a64 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f8:	4b5d      	ldr	r3, [pc, #372]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0ad      	b.n	8003a64 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003908:	4b59      	ldr	r3, [pc, #356]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0a5      	b.n	8003a64 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003918:	f000 f8b4 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 800391c:	4603      	mov	r3, r0
 800391e:	4a55      	ldr	r2, [pc, #340]	@ (8003a74 <HAL_RCC_ClockConfig+0x264>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d90f      	bls.n	8003944 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003924:	4b52      	ldr	r3, [pc, #328]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003930:	4b4f      	ldr	r3, [pc, #316]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003938:	4a4d      	ldr	r2, [pc, #308]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 800393a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800393e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003940:	2380      	movs	r3, #128	@ 0x80
 8003942:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003944:	4b4a      	ldr	r3, [pc, #296]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f023 0203 	bic.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4947      	ldr	r1, [pc, #284]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003956:	f7fe f9e9 	bl	8001d2c <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395c:	e00a      	b.n	8003974 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395e:	f7fe f9e5 	bl	8001d2c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e077      	b.n	8003a64 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003974:	4b3e      	ldr	r3, [pc, #248]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 020c 	and.w	r2, r3, #12
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	429a      	cmp	r2, r3
 8003984:	d1eb      	bne.n	800395e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b80      	cmp	r3, #128	@ 0x80
 800398a:	d105      	bne.n	8003998 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800398c:	4b38      	ldr	r3, [pc, #224]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a37      	ldr	r2, [pc, #220]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003992:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003996:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d010      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	4b31      	ldr	r3, [pc, #196]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d208      	bcs.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	492b      	ldr	r1, [pc, #172]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c6:	4b29      	ldr	r3, [pc, #164]	@ (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d210      	bcs.n	80039f6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d4:	4b25      	ldr	r3, [pc, #148]	@ (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 020f 	bic.w	r2, r3, #15
 80039dc:	4923      	ldr	r1, [pc, #140]	@ (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e4:	4b21      	ldr	r3, [pc, #132]	@ (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e036      	b.n	8003a64 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a02:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	4918      	ldr	r1, [pc, #96]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d009      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a20:	4b13      	ldr	r3, [pc, #76]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4910      	ldr	r1, [pc, #64]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a34:	f000 f826 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	490c      	ldr	r1, [pc, #48]	@ (8003a78 <HAL_RCC_ClockConfig+0x268>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	4a0a      	ldr	r2, [pc, #40]	@ (8003a7c <HAL_RCC_ClockConfig+0x26c>)
 8003a52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a54:	4b0a      	ldr	r3, [pc, #40]	@ (8003a80 <HAL_RCC_ClockConfig+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe f917 	bl	8001c8c <HAL_InitTick>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40022000 	.word	0x40022000
 8003a70:	40021000 	.word	0x40021000
 8003a74:	04c4b400 	.word	0x04c4b400
 8003a78:	08005ec8 	.word	0x08005ec8
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	20000004 	.word	0x20000004

08003a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	@ 0x24
 8003a88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a92:	4b3e      	ldr	r3, [pc, #248]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b0c      	cmp	r3, #12
 8003ab0:	d121      	bne.n	8003af6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d11e      	bne.n	8003af6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ab8:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ac4:	4b31      	ldr	r3, [pc, #196]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e005      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10d      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d102      	bne.n	8003b02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	e004      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b08:	4b23      	ldr	r3, [pc, #140]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d134      	bne.n	8003b7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b12:	4b1e      	ldr	r3, [pc, #120]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d003      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0xac>
 8003b28:	e005      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b2c:	617b      	str	r3, [r7, #20]
      break;
 8003b2e:	e005      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b32:	617b      	str	r3, [r7, #20]
      break;
 8003b34:	e002      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	617b      	str	r3, [r7, #20]
      break;
 8003b3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b3c:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	3301      	adds	r3, #1
 8003b48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	fb03 f202 	mul.w	r2, r3, r2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b62:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	0e5b      	lsrs	r3, r3, #25
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	@ 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	08005ee0 	.word	0x08005ee0
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	007a1200 	.word	0x007a1200

08003b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	@ (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000000 	.word	0x20000000

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4904      	ldr	r1, [pc, #16]	@ (8003bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	08005ed8 	.word	0x08005ed8

08003be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003be4:	f7ff ffda 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0adb      	lsrs	r3, r3, #11
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4904      	ldr	r1, [pc, #16]	@ (8003c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08005ed8 	.word	0x08005ed8

08003c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c18:	4b27      	ldr	r3, [pc, #156]	@ (8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c24:	f7ff f916 	bl	8002e54 <HAL_PWREx_GetVoltageRange>
 8003c28:	6178      	str	r0, [r7, #20]
 8003c2a:	e014      	b.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c2c:	4b22      	ldr	r3, [pc, #136]	@ (8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c30:	4a21      	ldr	r2, [pc, #132]	@ (8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c38:	4b1f      	ldr	r3, [pc, #124]	@ (8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c44:	f7ff f906 	bl	8002e54 <HAL_PWREx_GetVoltageRange>
 8003c48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c5c:	d10b      	bne.n	8003c76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b80      	cmp	r3, #128	@ 0x80
 8003c62:	d913      	bls.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c68:	d902      	bls.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	e00d      	b.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c70:	2301      	movs	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	e00a      	b.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c7a:	d902      	bls.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	e004      	b.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b70      	cmp	r3, #112	@ 0x70
 8003c86:	d101      	bne.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c88:	2301      	movs	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f023 020f 	bic.w	r2, r3, #15
 8003c94:	4909      	ldr	r1, [pc, #36]	@ (8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c9c:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d001      	beq.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40022000 	.word	0x40022000

08003cc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d00b      	beq.n	8003cee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d825      	bhi.n	8003d28 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d008      	beq.n	8003cf4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d11f      	bne.n	8003d28 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003ce8:	4b25      	ldr	r3, [pc, #148]	@ (8003d80 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cea:	613b      	str	r3, [r7, #16]
    break;
 8003cec:	e01f      	b.n	8003d2e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003cee:	4b25      	ldr	r3, [pc, #148]	@ (8003d84 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003cf0:	613b      	str	r3, [r7, #16]
    break;
 8003cf2:	e01c      	b.n	8003d2e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cf4:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d00:	4b1e      	ldr	r3, [pc, #120]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e005      	b.n	8003d1c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d10:	4b1a      	ldr	r3, [pc, #104]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d88 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	613b      	str	r3, [r7, #16]
    break;
 8003d26:	e002      	b.n	8003d2e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
    break;
 8003d2c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d2e:	4b13      	ldr	r3, [pc, #76]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	fb03 f202 	mul.w	r2, r3, r2
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d54:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0e5b      	lsrs	r3, r3, #25
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d6e:	683b      	ldr	r3, [r7, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	00f42400 	.word	0x00f42400
 8003d84:	007a1200 	.word	0x007a1200
 8003d88:	08005ee0 	.word	0x08005ee0

08003d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d94:	2300      	movs	r3, #0
 8003d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d98:	2300      	movs	r3, #0
 8003d9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d040      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dac:	2b80      	cmp	r3, #128	@ 0x80
 8003dae:	d02a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003db0:	2b80      	cmp	r3, #128	@ 0x80
 8003db2:	d825      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003db4:	2b60      	cmp	r3, #96	@ 0x60
 8003db6:	d026      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003db8:	2b60      	cmp	r3, #96	@ 0x60
 8003dba:	d821      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dbc:	2b40      	cmp	r3, #64	@ 0x40
 8003dbe:	d006      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003dc0:	2b40      	cmp	r3, #64	@ 0x40
 8003dc2:	d81d      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d010      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003dcc:	e018      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dce:	4b89      	ldr	r3, [pc, #548]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4a88      	ldr	r2, [pc, #544]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dda:	e015      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fb02 	bl	80043ec <RCCEx_PLLSAI1_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3320      	adds	r3, #32
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fbed 	bl	80045d4 <RCCEx_PLLSAI2_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	74fb      	strb	r3, [r7, #19]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10b      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e0e:	4b79      	ldr	r3, [pc, #484]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e14:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e1c:	4975      	ldr	r1, [pc, #468]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003e24:	e001      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d047      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3e:	d030      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e44:	d82a      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e4a:	d02a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e50:	d824      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e56:	d008      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e5c:	d81e      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e66:	d010      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e68:	e018      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e6a:	4b62      	ldr	r3, [pc, #392]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	4a61      	ldr	r2, [pc, #388]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e74:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e76:	e015      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fab4 	bl	80043ec <RCCEx_PLLSAI1_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e88:	e00c      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3320      	adds	r3, #32
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fb9f 	bl	80045d4 <RCCEx_PLLSAI2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	74fb      	strb	r3, [r7, #19]
      break;
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eaa:	4b52      	ldr	r3, [pc, #328]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	494e      	ldr	r1, [pc, #312]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003ec0:	e001      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 809f 	beq.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ed8:	4b46      	ldr	r3, [pc, #280]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	4b41      	ldr	r3, [pc, #260]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	4a40      	ldr	r2, [pc, #256]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003efa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f06:	2301      	movs	r3, #1
 8003f08:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f16:	f7fd ff09 	bl	8001d2c <HAL_GetTick>
 8003f1a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f1c:	e009      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1e:	f7fd ff05 	bl	8001d2c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d902      	bls.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f30:	e005      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f32:	4b31      	ldr	r3, [pc, #196]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ef      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d15b      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01f      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d019      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f62:	4b24      	ldr	r3, [pc, #144]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f6e:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f84:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f8e:	4a19      	ldr	r2, [pc, #100]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d016      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fec4 	bl	8001d2c <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa6:	e00b      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fd fec0 	bl	8001d2c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d902      	bls.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	74fb      	strb	r3, [r7, #19]
            break;
 8003fbe:	e006      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0ec      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10c      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd4:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe4:	4903      	ldr	r1, [pc, #12]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fec:	e008      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	74bb      	strb	r3, [r7, #18]
 8003ff2:	e005      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004000:	7c7b      	ldrb	r3, [r7, #17]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d105      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004006:	4ba0      	ldr	r3, [pc, #640]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	4a9f      	ldr	r2, [pc, #636]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004010:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800401e:	4b9a      	ldr	r3, [pc, #616]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004024:	f023 0203 	bic.w	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	4996      	ldr	r1, [pc, #600]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004040:	4b91      	ldr	r3, [pc, #580]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f023 020c 	bic.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	498e      	ldr	r1, [pc, #568]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004062:	4b89      	ldr	r3, [pc, #548]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	4985      	ldr	r1, [pc, #532]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004084:	4b80      	ldr	r3, [pc, #512]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004092:	497d      	ldr	r1, [pc, #500]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040a6:	4b78      	ldr	r3, [pc, #480]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b4:	4974      	ldr	r1, [pc, #464]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d6:	496c      	ldr	r1, [pc, #432]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ea:	4b67      	ldr	r3, [pc, #412]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040f8:	4963      	ldr	r1, [pc, #396]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800410c:	4b5e      	ldr	r3, [pc, #376]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411a:	495b      	ldr	r1, [pc, #364]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800412e:	4b56      	ldr	r3, [pc, #344]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004134:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413c:	4952      	ldr	r1, [pc, #328]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004150:	4b4d      	ldr	r3, [pc, #308]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415e:	494a      	ldr	r1, [pc, #296]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004172:	4b45      	ldr	r3, [pc, #276]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004180:	4941      	ldr	r1, [pc, #260]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004194:	4b3c      	ldr	r3, [pc, #240]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004196:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800419a:	f023 0203 	bic.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a2:	4939      	ldr	r1, [pc, #228]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d028      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b6:	4b34      	ldr	r3, [pc, #208]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c4:	4930      	ldr	r1, [pc, #192]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041d4:	d106      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4a2b      	ldr	r2, [pc, #172]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e0:	60d3      	str	r3, [r2, #12]
 80041e2:	e011      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041ec:	d10c      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	2101      	movs	r1, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f8f9 	bl	80043ec <RCCEx_PLLSAI1_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d04d      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800421c:	d108      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800421e:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004220:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004224:	4a18      	ldr	r2, [pc, #96]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800422a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800422e:	e012      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004230:	4b15      	ldr	r3, [pc, #84]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004236:	4a14      	ldr	r2, [pc, #80]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004238:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800423c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004240:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004246:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800424e:	490e      	ldr	r1, [pc, #56]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800425a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800425e:	d106      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004260:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a08      	ldr	r2, [pc, #32]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800426a:	60d3      	str	r3, [r2, #12]
 800426c:	e020      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004272:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004276:	d109      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a02      	ldr	r2, [pc, #8]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004282:	60d3      	str	r3, [r2, #12]
 8004284:	e014      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004290:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	2101      	movs	r1, #1
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f8a5 	bl	80043ec <RCCEx_PLLSAI1_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d028      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042bc:	4b4a      	ldr	r3, [pc, #296]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ca:	4947      	ldr	r1, [pc, #284]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042da:	d106      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042dc:	4b42      	ldr	r3, [pc, #264]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a41      	ldr	r2, [pc, #260]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042e6:	60d3      	str	r3, [r2, #12]
 80042e8:	e011      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042f2:	d10c      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f876 	bl	80043ec <RCCEx_PLLSAI1_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01e      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800431a:	4b33      	ldr	r3, [pc, #204]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004320:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800432a:	492f      	ldr	r1, [pc, #188]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800433c:	d10c      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	2102      	movs	r1, #2
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f851 	bl	80043ec <RCCEx_PLLSAI1_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004364:	4b20      	ldr	r3, [pc, #128]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800436a:	f023 0204 	bic.w	r2, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004374:	491c      	ldr	r1, [pc, #112]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004388:	4b17      	ldr	r3, [pc, #92]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800438e:	f023 0218 	bic.w	r2, r3, #24
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004398:	4913      	ldr	r1, [pc, #76]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d017      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043ac:	4b0e      	ldr	r3, [pc, #56]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043bc:	490a      	ldr	r1, [pc, #40]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ce:	d105      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a04      	ldr	r2, [pc, #16]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000

080043ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043fa:	4b72      	ldr	r3, [pc, #456]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00e      	beq.n	8004424 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004406:	4b6f      	ldr	r3, [pc, #444]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0203 	and.w	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d103      	bne.n	800441e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
       ||
 800441a:	2b00      	cmp	r3, #0
 800441c:	d142      	bne.n	80044a4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
 8004422:	e03f      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d018      	beq.n	800445e <RCCEx_PLLSAI1_Config+0x72>
 800442c:	2b03      	cmp	r3, #3
 800442e:	d825      	bhi.n	800447c <RCCEx_PLLSAI1_Config+0x90>
 8004430:	2b01      	cmp	r3, #1
 8004432:	d002      	beq.n	800443a <RCCEx_PLLSAI1_Config+0x4e>
 8004434:	2b02      	cmp	r3, #2
 8004436:	d009      	beq.n	800444c <RCCEx_PLLSAI1_Config+0x60>
 8004438:	e020      	b.n	800447c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800443a:	4b62      	ldr	r3, [pc, #392]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11d      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444a:	e01a      	b.n	8004482 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800444c:	4b5d      	ldr	r3, [pc, #372]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d116      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800445c:	e013      	b.n	8004486 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800445e:	4b59      	ldr	r3, [pc, #356]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10f      	bne.n	800448a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800446a:	4b56      	ldr	r3, [pc, #344]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800447a:	e006      	b.n	800448a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
      break;
 8004480:	e004      	b.n	800448c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004482:	bf00      	nop
 8004484:	e002      	b.n	800448c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004486:	bf00      	nop
 8004488:	e000      	b.n	800448c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800448a:	bf00      	nop
    }

    if(status == HAL_OK)
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004492:	4b4c      	ldr	r3, [pc, #304]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f023 0203 	bic.w	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4949      	ldr	r1, [pc, #292]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f040 8086 	bne.w	80045b8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044ac:	4b45      	ldr	r3, [pc, #276]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a44      	ldr	r2, [pc, #272]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fd fc38 	bl	8001d2c <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044be:	e009      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c0:	f7fd fc34 	bl	8001d2c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	73fb      	strb	r3, [r7, #15]
        break;
 80044d2:	e005      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044d4:	4b3b      	ldr	r3, [pc, #236]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ef      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d168      	bne.n	80045b8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d113      	bne.n	8004514 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ec:	4b35      	ldr	r3, [pc, #212]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	4b35      	ldr	r3, [pc, #212]	@ (80045c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6892      	ldr	r2, [r2, #8]
 80044f8:	0211      	lsls	r1, r2, #8
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68d2      	ldr	r2, [r2, #12]
 80044fe:	06d2      	lsls	r2, r2, #27
 8004500:	4311      	orrs	r1, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6852      	ldr	r2, [r2, #4]
 8004506:	3a01      	subs	r2, #1
 8004508:	0112      	lsls	r2, r2, #4
 800450a:	430a      	orrs	r2, r1
 800450c:	492d      	ldr	r1, [pc, #180]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	610b      	str	r3, [r1, #16]
 8004512:	e02d      	b.n	8004570 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d115      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800451a:	4b2a      	ldr	r3, [pc, #168]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	4b2b      	ldr	r3, [pc, #172]	@ (80045cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004520:	4013      	ands	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6892      	ldr	r2, [r2, #8]
 8004526:	0211      	lsls	r1, r2, #8
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6912      	ldr	r2, [r2, #16]
 800452c:	0852      	lsrs	r2, r2, #1
 800452e:	3a01      	subs	r2, #1
 8004530:	0552      	lsls	r2, r2, #21
 8004532:	4311      	orrs	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6852      	ldr	r2, [r2, #4]
 8004538:	3a01      	subs	r2, #1
 800453a:	0112      	lsls	r2, r2, #4
 800453c:	430a      	orrs	r2, r1
 800453e:	4921      	ldr	r1, [pc, #132]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004540:	4313      	orrs	r3, r2
 8004542:	610b      	str	r3, [r1, #16]
 8004544:	e014      	b.n	8004570 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004546:	4b1f      	ldr	r3, [pc, #124]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	4b21      	ldr	r3, [pc, #132]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6892      	ldr	r2, [r2, #8]
 8004552:	0211      	lsls	r1, r2, #8
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6952      	ldr	r2, [r2, #20]
 8004558:	0852      	lsrs	r2, r2, #1
 800455a:	3a01      	subs	r2, #1
 800455c:	0652      	lsls	r2, r2, #25
 800455e:	4311      	orrs	r1, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6852      	ldr	r2, [r2, #4]
 8004564:	3a01      	subs	r2, #1
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	430a      	orrs	r2, r1
 800456a:	4916      	ldr	r1, [pc, #88]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800456c:	4313      	orrs	r3, r2
 800456e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004570:	4b14      	ldr	r3, [pc, #80]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a13      	ldr	r2, [pc, #76]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004576:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800457a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd fbd6 	bl	8001d2c <HAL_GetTick>
 8004580:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004582:	e009      	b.n	8004598 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004584:	f7fd fbd2 	bl	8001d2c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d902      	bls.n	8004598 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	73fb      	strb	r3, [r7, #15]
          break;
 8004596:	e005      	b.n	80045a4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004598:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ef      	beq.n	8004584 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045aa:	4b06      	ldr	r3, [pc, #24]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	4904      	ldr	r1, [pc, #16]	@ (80045c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	07ff800f 	.word	0x07ff800f
 80045cc:	ff9f800f 	.word	0xff9f800f
 80045d0:	f9ff800f 	.word	0xf9ff800f

080045d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045e2:	4b72      	ldr	r3, [pc, #456]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00e      	beq.n	800460c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045ee:	4b6f      	ldr	r3, [pc, #444]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0203 	and.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d103      	bne.n	8004606 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
       ||
 8004602:	2b00      	cmp	r3, #0
 8004604:	d142      	bne.n	800468c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
 800460a:	e03f      	b.n	800468c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d018      	beq.n	8004646 <RCCEx_PLLSAI2_Config+0x72>
 8004614:	2b03      	cmp	r3, #3
 8004616:	d825      	bhi.n	8004664 <RCCEx_PLLSAI2_Config+0x90>
 8004618:	2b01      	cmp	r3, #1
 800461a:	d002      	beq.n	8004622 <RCCEx_PLLSAI2_Config+0x4e>
 800461c:	2b02      	cmp	r3, #2
 800461e:	d009      	beq.n	8004634 <RCCEx_PLLSAI2_Config+0x60>
 8004620:	e020      	b.n	8004664 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004622:	4b62      	ldr	r3, [pc, #392]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d11d      	bne.n	800466a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004632:	e01a      	b.n	800466a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004634:	4b5d      	ldr	r3, [pc, #372]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d116      	bne.n	800466e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004644:	e013      	b.n	800466e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004646:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10f      	bne.n	8004672 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004652:	4b56      	ldr	r3, [pc, #344]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004662:	e006      	b.n	8004672 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      break;
 8004668:	e004      	b.n	8004674 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800466a:	bf00      	nop
 800466c:	e002      	b.n	8004674 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004672:	bf00      	nop
    }

    if(status == HAL_OK)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800467a:	4b4c      	ldr	r3, [pc, #304]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4949      	ldr	r1, [pc, #292]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004688:	4313      	orrs	r3, r2
 800468a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f040 8086 	bne.w	80047a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004694:	4b45      	ldr	r3, [pc, #276]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a44      	ldr	r2, [pc, #272]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800469a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800469e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a0:	f7fd fb44 	bl	8001d2c <HAL_GetTick>
 80046a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046a6:	e009      	b.n	80046bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046a8:	f7fd fb40 	bl	8001d2c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d902      	bls.n	80046bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	73fb      	strb	r3, [r7, #15]
        break;
 80046ba:	e005      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046bc:	4b3b      	ldr	r3, [pc, #236]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1ef      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d168      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d113      	bne.n	80046fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046d4:	4b35      	ldr	r3, [pc, #212]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	4b35      	ldr	r3, [pc, #212]	@ (80047b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80046da:	4013      	ands	r3, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6892      	ldr	r2, [r2, #8]
 80046e0:	0211      	lsls	r1, r2, #8
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68d2      	ldr	r2, [r2, #12]
 80046e6:	06d2      	lsls	r2, r2, #27
 80046e8:	4311      	orrs	r1, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6852      	ldr	r2, [r2, #4]
 80046ee:	3a01      	subs	r2, #1
 80046f0:	0112      	lsls	r2, r2, #4
 80046f2:	430a      	orrs	r2, r1
 80046f4:	492d      	ldr	r1, [pc, #180]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	614b      	str	r3, [r1, #20]
 80046fa:	e02d      	b.n	8004758 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d115      	bne.n	800472e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004702:	4b2a      	ldr	r3, [pc, #168]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	4b2b      	ldr	r3, [pc, #172]	@ (80047b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004708:	4013      	ands	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6892      	ldr	r2, [r2, #8]
 800470e:	0211      	lsls	r1, r2, #8
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6912      	ldr	r2, [r2, #16]
 8004714:	0852      	lsrs	r2, r2, #1
 8004716:	3a01      	subs	r2, #1
 8004718:	0552      	lsls	r2, r2, #21
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6852      	ldr	r2, [r2, #4]
 8004720:	3a01      	subs	r2, #1
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	430a      	orrs	r2, r1
 8004726:	4921      	ldr	r1, [pc, #132]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004728:	4313      	orrs	r3, r2
 800472a:	614b      	str	r3, [r1, #20]
 800472c:	e014      	b.n	8004758 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800472e:	4b1f      	ldr	r3, [pc, #124]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	4b21      	ldr	r3, [pc, #132]	@ (80047b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	0211      	lsls	r1, r2, #8
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6952      	ldr	r2, [r2, #20]
 8004740:	0852      	lsrs	r2, r2, #1
 8004742:	3a01      	subs	r2, #1
 8004744:	0652      	lsls	r2, r2, #25
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6852      	ldr	r2, [r2, #4]
 800474c:	3a01      	subs	r2, #1
 800474e:	0112      	lsls	r2, r2, #4
 8004750:	430a      	orrs	r2, r1
 8004752:	4916      	ldr	r1, [pc, #88]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004754:	4313      	orrs	r3, r2
 8004756:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004758:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a13      	ldr	r2, [pc, #76]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd fae2 	bl	8001d2c <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800476c:	f7fd fade 	bl	8001d2c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
          break;
 800477e:	e005      	b.n	800478c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004780:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ef      	beq.n	800476c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004792:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	4904      	ldr	r1, [pc, #16]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
 80047b0:	07ff800f 	.word	0x07ff800f
 80047b4:	ff9f800f 	.word	0xff9f800f
 80047b8:	f9ff800f 	.word	0xf9ff800f

080047bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e095      	b.n	80048fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d108      	bne.n	80047e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047de:	d009      	beq.n	80047f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	61da      	str	r2, [r3, #28]
 80047e6:	e005      	b.n	80047f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc ff6a 	bl	80016e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800482a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004834:	d902      	bls.n	800483c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	e002      	b.n	8004842 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800483c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004840:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800484a:	d007      	beq.n	800485c <HAL_SPI_Init+0xa0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004854:	d002      	beq.n	800485c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489e:	ea42 0103 	orr.w	r1, r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	0c1b      	lsrs	r3, r3, #16
 80048b8:	f003 0204 	and.w	r2, r3, #4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80048d8:	ea42 0103 	orr.w	r1, r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b088      	sub	sp, #32
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_SPI_Transmit+0x22>
 8004920:	2302      	movs	r3, #2
 8004922:	e15f      	b.n	8004be4 <HAL_SPI_Transmit+0x2e2>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800492c:	f7fd f9fe 	bl	8001d2c <HAL_GetTick>
 8004930:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b01      	cmp	r3, #1
 8004940:	d002      	beq.n	8004948 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004942:	2302      	movs	r3, #2
 8004944:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004946:	e148      	b.n	8004bda <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_SPI_Transmit+0x52>
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004958:	e13f      	b.n	8004bda <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2203      	movs	r2, #3
 800495e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	88fa      	ldrh	r2, [r7, #6]
 8004972:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a4:	d10f      	bne.n	80049c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d0:	2b40      	cmp	r3, #64	@ 0x40
 80049d2:	d007      	beq.n	80049e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049ec:	d94f      	bls.n	8004a8e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_SPI_Transmit+0xfa>
 80049f6:	8afb      	ldrh	r3, [r7, #22]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d142      	bne.n	8004a82 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	1c9a      	adds	r2, r3, #2
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a20:	e02f      	b.n	8004a82 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d112      	bne.n	8004a56 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	881a      	ldrh	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a54:	e015      	b.n	8004a82 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a56:	f7fd f969 	bl	8001d2c <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d803      	bhi.n	8004a6e <HAL_SPI_Transmit+0x16c>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a6c:	d102      	bne.n	8004a74 <HAL_SPI_Transmit+0x172>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004a80:	e0ab      	b.n	8004bda <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1ca      	bne.n	8004a22 <HAL_SPI_Transmit+0x120>
 8004a8c:	e080      	b.n	8004b90 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Transmit+0x19a>
 8004a96:	8afb      	ldrh	r3, [r7, #22]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d174      	bne.n	8004b86 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d912      	bls.n	8004acc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	881a      	ldrh	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b02      	subs	r3, #2
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004aca:	e05c      	b.n	8004b86 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	7812      	ldrb	r2, [r2, #0]
 8004ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004af2:	e048      	b.n	8004b86 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d12b      	bne.n	8004b5a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d912      	bls.n	8004b32 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b10:	881a      	ldrh	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1c:	1c9a      	adds	r2, r3, #2
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b02      	subs	r3, #2
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b30:	e029      	b.n	8004b86 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b58:	e015      	b.n	8004b86 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b5a:	f7fd f8e7 	bl	8001d2c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d803      	bhi.n	8004b72 <HAL_SPI_Transmit+0x270>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b70:	d102      	bne.n	8004b78 <HAL_SPI_Transmit+0x276>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004b84:	e029      	b.n	8004bda <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1b1      	bne.n	8004af4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f947 	bl	8004e28 <SPI_EndRxTxTransaction>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e003      	b.n	8004bda <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bfc:	f7fd f896 	bl	8001d2c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c0c:	f7fd f88e 	bl	8001d2c <HAL_GetTick>
 8004c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c12:	4b39      	ldr	r3, [pc, #228]	@ (8004cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	015b      	lsls	r3, r3, #5
 8004c18:	0d1b      	lsrs	r3, r3, #20
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c22:	e054      	b.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c2a:	d050      	beq.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c2c:	f7fd f87e 	bl	8001d2c <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d902      	bls.n	8004c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d13d      	bne.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c5a:	d111      	bne.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c64:	d004      	beq.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6e:	d107      	bne.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c88:	d10f      	bne.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e017      	b.n	8004cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d19b      	bne.n	8004c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000000 	.word	0x20000000

08004cfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	@ 0x28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d0e:	f7fd f80d 	bl	8001d2c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004d1e:	f7fd f805 	bl	8001d2c <HAL_GetTick>
 8004d22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	00da      	lsls	r2, r3, #3
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	0d1b      	lsrs	r3, r3, #20
 8004d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d44:	e060      	b.n	8004e08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d4c:	d107      	bne.n	8004d5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d64:	d050      	beq.n	8004e08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d66:	f7fc ffe1 	bl	8001d2c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d902      	bls.n	8004d7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d13d      	bne.n	8004df8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d94:	d111      	bne.n	8004dba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d9e:	d004      	beq.n	8004daa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004da8:	d107      	bne.n	8004dba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004db8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc2:	d10f      	bne.n	8004de4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004de2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e010      	b.n	8004e1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4013      	ands	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d196      	bne.n	8004d46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3728      	adds	r7, #40	@ 0x28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000000 	.word	0x20000000

08004e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff ff5b 	bl	8004cfc <SPI_WaitFifoStateUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e50:	f043 0220 	orr.w	r2, r3, #32
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e027      	b.n	8004eac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2200      	movs	r2, #0
 8004e64:	2180      	movs	r1, #128	@ 0x80
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7ff fec0 	bl	8004bec <SPI_WaitFlagStateUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e014      	b.n	8004eac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7ff ff34 	bl	8004cfc <SPI_WaitFifoStateUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e000      	b.n	8004eac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e042      	b.n	8004f4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fc fc7b 	bl	80017d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2224      	movs	r2, #36	@ 0x24
 8004ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fc7c 	bl	80057fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f97d 	bl	8005204 <UART_SetConfig>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e01b      	b.n	8004f4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fcfb 	bl	8005940 <UART_CheckIdleState>
 8004f4a:	4603      	mov	r3, r0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	@ 0x28
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d17b      	bne.n	8005066 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_UART_Transmit+0x26>
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e074      	b.n	8005068 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2221      	movs	r2, #33	@ 0x21
 8004f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f8e:	f7fc fecd 	bl	8001d2c <HAL_GetTick>
 8004f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	88fa      	ldrh	r2, [r7, #6]
 8004f98:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fac:	d108      	bne.n	8004fc0 <HAL_UART_Transmit+0x6c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d104      	bne.n	8004fc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	e003      	b.n	8004fc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fc8:	e030      	b.n	800502c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2180      	movs	r1, #128	@ 0x80
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fd5d 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e03d      	b.n	8005068 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10b      	bne.n	800500a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	881a      	ldrh	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ffe:	b292      	uxth	r2, r2
 8005000:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	3302      	adds	r3, #2
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e007      	b.n	800501a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	3301      	adds	r3, #1
 8005018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1c8      	bne.n	8004fca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2200      	movs	r2, #0
 8005040:	2140      	movs	r1, #64	@ 0x40
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fd26 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e006      	b.n	8005068 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005066:	2302      	movs	r3, #2
  }
}
 8005068:	4618      	mov	r0, r3
 800506a:	3720      	adds	r7, #32
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	@ 0x28
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005086:	2b20      	cmp	r3, #32
 8005088:	f040 80b6 	bne.w	80051f8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_UART_Receive+0x28>
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0ae      	b.n	80051fa <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2222      	movs	r2, #34	@ 0x22
 80050a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b2:	f7fc fe3b 	bl	8001d2c <HAL_GetTick>
 80050b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d0:	d10e      	bne.n	80050f0 <HAL_UART_Receive+0x80>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <HAL_UART_Receive+0x76>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80050e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050e4:	e02d      	b.n	8005142 <HAL_UART_Receive+0xd2>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	22ff      	movs	r2, #255	@ 0xff
 80050ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050ee:	e028      	b.n	8005142 <HAL_UART_Receive+0xd2>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10d      	bne.n	8005114 <HAL_UART_Receive+0xa4>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <HAL_UART_Receive+0x9a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	22ff      	movs	r2, #255	@ 0xff
 8005104:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005108:	e01b      	b.n	8005142 <HAL_UART_Receive+0xd2>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	227f      	movs	r2, #127	@ 0x7f
 800510e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005112:	e016      	b.n	8005142 <HAL_UART_Receive+0xd2>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800511c:	d10d      	bne.n	800513a <HAL_UART_Receive+0xca>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d104      	bne.n	8005130 <HAL_UART_Receive+0xc0>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	227f      	movs	r2, #127	@ 0x7f
 800512a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800512e:	e008      	b.n	8005142 <HAL_UART_Receive+0xd2>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	223f      	movs	r2, #63	@ 0x3f
 8005134:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005138:	e003      	b.n	8005142 <HAL_UART_Receive+0xd2>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005148:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005152:	d108      	bne.n	8005166 <HAL_UART_Receive+0xf6>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	e003      	b.n	800516e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800516e:	e037      	b.n	80051e0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2200      	movs	r2, #0
 8005178:	2120      	movs	r1, #32
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fc8a 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e033      	b.n	80051fa <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10c      	bne.n	80051b2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800519e:	b29a      	uxth	r2, r3
 80051a0:	8a7b      	ldrh	r3, [r7, #18]
 80051a2:	4013      	ands	r3, r2
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	3302      	adds	r3, #2
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e00d      	b.n	80051ce <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	8a7b      	ldrh	r3, [r7, #18]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	4013      	ands	r3, r2
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	3301      	adds	r3, #1
 80051cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1c1      	bne.n	8005170 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e000      	b.n	80051fa <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
  }
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005208:	b08c      	sub	sp, #48	@ 0x30
 800520a:	af00      	add	r7, sp, #0
 800520c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	431a      	orrs	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	431a      	orrs	r2, r3
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	4313      	orrs	r3, r2
 800522a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4baa      	ldr	r3, [pc, #680]	@ (80054dc <UART_SetConfig+0x2d8>)
 8005234:	4013      	ands	r3, r2
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800523c:	430b      	orrs	r3, r1
 800523e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a9f      	ldr	r2, [pc, #636]	@ (80054e0 <UART_SetConfig+0x2dc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800526c:	4313      	orrs	r3, r2
 800526e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800527a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005284:	430b      	orrs	r3, r1
 8005286:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	f023 010f 	bic.w	r1, r3, #15
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a90      	ldr	r2, [pc, #576]	@ (80054e4 <UART_SetConfig+0x2e0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d125      	bne.n	80052f4 <UART_SetConfig+0xf0>
 80052a8:	4b8f      	ldr	r3, [pc, #572]	@ (80054e8 <UART_SetConfig+0x2e4>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d81a      	bhi.n	80052ec <UART_SetConfig+0xe8>
 80052b6:	a201      	add	r2, pc, #4	@ (adr r2, 80052bc <UART_SetConfig+0xb8>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052cd 	.word	0x080052cd
 80052c0:	080052dd 	.word	0x080052dd
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052e5 	.word	0x080052e5
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e116      	b.n	8005502 <UART_SetConfig+0x2fe>
 80052d4:	2302      	movs	r3, #2
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052da:	e112      	b.n	8005502 <UART_SetConfig+0x2fe>
 80052dc:	2304      	movs	r3, #4
 80052de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e2:	e10e      	b.n	8005502 <UART_SetConfig+0x2fe>
 80052e4:	2308      	movs	r3, #8
 80052e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ea:	e10a      	b.n	8005502 <UART_SetConfig+0x2fe>
 80052ec:	2310      	movs	r3, #16
 80052ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f2:	e106      	b.n	8005502 <UART_SetConfig+0x2fe>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a7c      	ldr	r2, [pc, #496]	@ (80054ec <UART_SetConfig+0x2e8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d138      	bne.n	8005370 <UART_SetConfig+0x16c>
 80052fe:	4b7a      	ldr	r3, [pc, #488]	@ (80054e8 <UART_SetConfig+0x2e4>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005304:	f003 030c 	and.w	r3, r3, #12
 8005308:	2b0c      	cmp	r3, #12
 800530a:	d82d      	bhi.n	8005368 <UART_SetConfig+0x164>
 800530c:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <UART_SetConfig+0x110>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005349 	.word	0x08005349
 8005318:	08005369 	.word	0x08005369
 800531c:	08005369 	.word	0x08005369
 8005320:	08005369 	.word	0x08005369
 8005324:	08005359 	.word	0x08005359
 8005328:	08005369 	.word	0x08005369
 800532c:	08005369 	.word	0x08005369
 8005330:	08005369 	.word	0x08005369
 8005334:	08005351 	.word	0x08005351
 8005338:	08005369 	.word	0x08005369
 800533c:	08005369 	.word	0x08005369
 8005340:	08005369 	.word	0x08005369
 8005344:	08005361 	.word	0x08005361
 8005348:	2300      	movs	r3, #0
 800534a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534e:	e0d8      	b.n	8005502 <UART_SetConfig+0x2fe>
 8005350:	2302      	movs	r3, #2
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005356:	e0d4      	b.n	8005502 <UART_SetConfig+0x2fe>
 8005358:	2304      	movs	r3, #4
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535e:	e0d0      	b.n	8005502 <UART_SetConfig+0x2fe>
 8005360:	2308      	movs	r3, #8
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005366:	e0cc      	b.n	8005502 <UART_SetConfig+0x2fe>
 8005368:	2310      	movs	r3, #16
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536e:	e0c8      	b.n	8005502 <UART_SetConfig+0x2fe>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a5e      	ldr	r2, [pc, #376]	@ (80054f0 <UART_SetConfig+0x2ec>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d125      	bne.n	80053c6 <UART_SetConfig+0x1c2>
 800537a:	4b5b      	ldr	r3, [pc, #364]	@ (80054e8 <UART_SetConfig+0x2e4>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005380:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005384:	2b30      	cmp	r3, #48	@ 0x30
 8005386:	d016      	beq.n	80053b6 <UART_SetConfig+0x1b2>
 8005388:	2b30      	cmp	r3, #48	@ 0x30
 800538a:	d818      	bhi.n	80053be <UART_SetConfig+0x1ba>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d00a      	beq.n	80053a6 <UART_SetConfig+0x1a2>
 8005390:	2b20      	cmp	r3, #32
 8005392:	d814      	bhi.n	80053be <UART_SetConfig+0x1ba>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <UART_SetConfig+0x19a>
 8005398:	2b10      	cmp	r3, #16
 800539a:	d008      	beq.n	80053ae <UART_SetConfig+0x1aa>
 800539c:	e00f      	b.n	80053be <UART_SetConfig+0x1ba>
 800539e:	2300      	movs	r3, #0
 80053a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a4:	e0ad      	b.n	8005502 <UART_SetConfig+0x2fe>
 80053a6:	2302      	movs	r3, #2
 80053a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ac:	e0a9      	b.n	8005502 <UART_SetConfig+0x2fe>
 80053ae:	2304      	movs	r3, #4
 80053b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b4:	e0a5      	b.n	8005502 <UART_SetConfig+0x2fe>
 80053b6:	2308      	movs	r3, #8
 80053b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053bc:	e0a1      	b.n	8005502 <UART_SetConfig+0x2fe>
 80053be:	2310      	movs	r3, #16
 80053c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c4:	e09d      	b.n	8005502 <UART_SetConfig+0x2fe>
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a4a      	ldr	r2, [pc, #296]	@ (80054f4 <UART_SetConfig+0x2f0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d125      	bne.n	800541c <UART_SetConfig+0x218>
 80053d0:	4b45      	ldr	r3, [pc, #276]	@ (80054e8 <UART_SetConfig+0x2e4>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053da:	2bc0      	cmp	r3, #192	@ 0xc0
 80053dc:	d016      	beq.n	800540c <UART_SetConfig+0x208>
 80053de:	2bc0      	cmp	r3, #192	@ 0xc0
 80053e0:	d818      	bhi.n	8005414 <UART_SetConfig+0x210>
 80053e2:	2b80      	cmp	r3, #128	@ 0x80
 80053e4:	d00a      	beq.n	80053fc <UART_SetConfig+0x1f8>
 80053e6:	2b80      	cmp	r3, #128	@ 0x80
 80053e8:	d814      	bhi.n	8005414 <UART_SetConfig+0x210>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <UART_SetConfig+0x1f0>
 80053ee:	2b40      	cmp	r3, #64	@ 0x40
 80053f0:	d008      	beq.n	8005404 <UART_SetConfig+0x200>
 80053f2:	e00f      	b.n	8005414 <UART_SetConfig+0x210>
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fa:	e082      	b.n	8005502 <UART_SetConfig+0x2fe>
 80053fc:	2302      	movs	r3, #2
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005402:	e07e      	b.n	8005502 <UART_SetConfig+0x2fe>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540a:	e07a      	b.n	8005502 <UART_SetConfig+0x2fe>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005412:	e076      	b.n	8005502 <UART_SetConfig+0x2fe>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800541a:	e072      	b.n	8005502 <UART_SetConfig+0x2fe>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a35      	ldr	r2, [pc, #212]	@ (80054f8 <UART_SetConfig+0x2f4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d12a      	bne.n	800547c <UART_SetConfig+0x278>
 8005426:	4b30      	ldr	r3, [pc, #192]	@ (80054e8 <UART_SetConfig+0x2e4>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005430:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005434:	d01a      	beq.n	800546c <UART_SetConfig+0x268>
 8005436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800543a:	d81b      	bhi.n	8005474 <UART_SetConfig+0x270>
 800543c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005440:	d00c      	beq.n	800545c <UART_SetConfig+0x258>
 8005442:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005446:	d815      	bhi.n	8005474 <UART_SetConfig+0x270>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <UART_SetConfig+0x250>
 800544c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005450:	d008      	beq.n	8005464 <UART_SetConfig+0x260>
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x270>
 8005454:	2300      	movs	r3, #0
 8005456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545a:	e052      	b.n	8005502 <UART_SetConfig+0x2fe>
 800545c:	2302      	movs	r3, #2
 800545e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005462:	e04e      	b.n	8005502 <UART_SetConfig+0x2fe>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546a:	e04a      	b.n	8005502 <UART_SetConfig+0x2fe>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005472:	e046      	b.n	8005502 <UART_SetConfig+0x2fe>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547a:	e042      	b.n	8005502 <UART_SetConfig+0x2fe>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <UART_SetConfig+0x2dc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d13a      	bne.n	80054fc <UART_SetConfig+0x2f8>
 8005486:	4b18      	ldr	r3, [pc, #96]	@ (80054e8 <UART_SetConfig+0x2e4>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005490:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005494:	d01a      	beq.n	80054cc <UART_SetConfig+0x2c8>
 8005496:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800549a:	d81b      	bhi.n	80054d4 <UART_SetConfig+0x2d0>
 800549c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a0:	d00c      	beq.n	80054bc <UART_SetConfig+0x2b8>
 80054a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a6:	d815      	bhi.n	80054d4 <UART_SetConfig+0x2d0>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <UART_SetConfig+0x2b0>
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054b0:	d008      	beq.n	80054c4 <UART_SetConfig+0x2c0>
 80054b2:	e00f      	b.n	80054d4 <UART_SetConfig+0x2d0>
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ba:	e022      	b.n	8005502 <UART_SetConfig+0x2fe>
 80054bc:	2302      	movs	r3, #2
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c2:	e01e      	b.n	8005502 <UART_SetConfig+0x2fe>
 80054c4:	2304      	movs	r3, #4
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ca:	e01a      	b.n	8005502 <UART_SetConfig+0x2fe>
 80054cc:	2308      	movs	r3, #8
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d2:	e016      	b.n	8005502 <UART_SetConfig+0x2fe>
 80054d4:	2310      	movs	r3, #16
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054da:	e012      	b.n	8005502 <UART_SetConfig+0x2fe>
 80054dc:	cfff69f3 	.word	0xcfff69f3
 80054e0:	40008000 	.word	0x40008000
 80054e4:	40013800 	.word	0x40013800
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40004400 	.word	0x40004400
 80054f0:	40004800 	.word	0x40004800
 80054f4:	40004c00 	.word	0x40004c00
 80054f8:	40005000 	.word	0x40005000
 80054fc:	2310      	movs	r3, #16
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4aae      	ldr	r2, [pc, #696]	@ (80057c0 <UART_SetConfig+0x5bc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	f040 8097 	bne.w	800563c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800550e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005512:	2b08      	cmp	r3, #8
 8005514:	d823      	bhi.n	800555e <UART_SetConfig+0x35a>
 8005516:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <UART_SetConfig+0x318>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	08005541 	.word	0x08005541
 8005520:	0800555f 	.word	0x0800555f
 8005524:	08005549 	.word	0x08005549
 8005528:	0800555f 	.word	0x0800555f
 800552c:	0800554f 	.word	0x0800554f
 8005530:	0800555f 	.word	0x0800555f
 8005534:	0800555f 	.word	0x0800555f
 8005538:	0800555f 	.word	0x0800555f
 800553c:	08005557 	.word	0x08005557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005540:	f7fe fb38 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8005544:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005546:	e010      	b.n	800556a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005548:	4b9e      	ldr	r3, [pc, #632]	@ (80057c4 <UART_SetConfig+0x5c0>)
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800554c:	e00d      	b.n	800556a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554e:	f7fe fa99 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8005552:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005554:	e009      	b.n	800556a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800555c:	e005      	b.n	800556a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8130 	beq.w	80057d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005576:	4a94      	ldr	r2, [pc, #592]	@ (80057c8 <UART_SetConfig+0x5c4>)
 8005578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800557c:	461a      	mov	r2, r3
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	fbb3 f3f2 	udiv	r3, r3, r2
 8005584:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	4413      	add	r3, r2
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	429a      	cmp	r2, r3
 8005594:	d305      	bcc.n	80055a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d903      	bls.n	80055aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055a8:	e113      	b.n	80057d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	2200      	movs	r2, #0
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	60fa      	str	r2, [r7, #12]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	4a84      	ldr	r2, [pc, #528]	@ (80057c8 <UART_SetConfig+0x5c4>)
 80055b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2200      	movs	r2, #0
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055cc:	f7fa fe16 	bl	80001fc <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4610      	mov	r0, r2
 80055d6:	4619      	mov	r1, r3
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	020b      	lsls	r3, r1, #8
 80055e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055e6:	0202      	lsls	r2, r0, #8
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	6849      	ldr	r1, [r1, #4]
 80055ec:	0849      	lsrs	r1, r1, #1
 80055ee:	2000      	movs	r0, #0
 80055f0:	460c      	mov	r4, r1
 80055f2:	4605      	mov	r5, r0
 80055f4:	eb12 0804 	adds.w	r8, r2, r4
 80055f8:	eb43 0905 	adc.w	r9, r3, r5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	469a      	mov	sl, r3
 8005604:	4693      	mov	fp, r2
 8005606:	4652      	mov	r2, sl
 8005608:	465b      	mov	r3, fp
 800560a:	4640      	mov	r0, r8
 800560c:	4649      	mov	r1, r9
 800560e:	f7fa fdf5 	bl	80001fc <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4613      	mov	r3, r2
 8005618:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005620:	d308      	bcc.n	8005634 <UART_SetConfig+0x430>
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005628:	d204      	bcs.n	8005634 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a3a      	ldr	r2, [r7, #32]
 8005630:	60da      	str	r2, [r3, #12]
 8005632:	e0ce      	b.n	80057d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800563a:	e0ca      	b.n	80057d2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005644:	d166      	bne.n	8005714 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005646:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800564a:	2b08      	cmp	r3, #8
 800564c:	d827      	bhi.n	800569e <UART_SetConfig+0x49a>
 800564e:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <UART_SetConfig+0x450>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	0800569f 	.word	0x0800569f
 8005664:	0800568f 	.word	0x0800568f
 8005668:	0800569f 	.word	0x0800569f
 800566c:	0800569f 	.word	0x0800569f
 8005670:	0800569f 	.word	0x0800569f
 8005674:	08005697 	.word	0x08005697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7fe fa9c 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 800567c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800567e:	e014      	b.n	80056aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005680:	f7fe faae 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8005684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005686:	e010      	b.n	80056aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005688:	4b4e      	ldr	r3, [pc, #312]	@ (80057c4 <UART_SetConfig+0x5c0>)
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800568c:	e00d      	b.n	80056aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568e:	f7fe f9f9 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8005692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005694:	e009      	b.n	80056aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800569c:	e005      	b.n	80056aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8090 	beq.w	80057d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	4a44      	ldr	r2, [pc, #272]	@ (80057c8 <UART_SetConfig+0x5c4>)
 80056b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056bc:	461a      	mov	r2, r3
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c4:	005a      	lsls	r2, r3, #1
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	441a      	add	r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	2b0f      	cmp	r3, #15
 80056dc:	d916      	bls.n	800570c <UART_SetConfig+0x508>
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e4:	d212      	bcs.n	800570c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f023 030f 	bic.w	r3, r3, #15
 80056ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	8bfb      	ldrh	r3, [r7, #30]
 80056fe:	4313      	orrs	r3, r2
 8005700:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	8bfa      	ldrh	r2, [r7, #30]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	e062      	b.n	80057d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005712:	e05e      	b.n	80057d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005714:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005718:	2b08      	cmp	r3, #8
 800571a:	d828      	bhi.n	800576e <UART_SetConfig+0x56a>
 800571c:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <UART_SetConfig+0x520>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005749 	.word	0x08005749
 8005728:	08005751 	.word	0x08005751
 800572c:	08005759 	.word	0x08005759
 8005730:	0800576f 	.word	0x0800576f
 8005734:	0800575f 	.word	0x0800575f
 8005738:	0800576f 	.word	0x0800576f
 800573c:	0800576f 	.word	0x0800576f
 8005740:	0800576f 	.word	0x0800576f
 8005744:	08005767 	.word	0x08005767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005748:	f7fe fa34 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 800574c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800574e:	e014      	b.n	800577a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005750:	f7fe fa46 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8005754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005756:	e010      	b.n	800577a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005758:	4b1a      	ldr	r3, [pc, #104]	@ (80057c4 <UART_SetConfig+0x5c0>)
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800575c:	e00d      	b.n	800577a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575e:	f7fe f991 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8005762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005764:	e009      	b.n	800577a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800576c:	e005      	b.n	800577a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005778:	bf00      	nop
    }

    if (pclk != 0U)
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d028      	beq.n	80057d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	4a10      	ldr	r2, [pc, #64]	@ (80057c8 <UART_SetConfig+0x5c4>)
 8005786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800578a:	461a      	mov	r2, r3
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	441a      	add	r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	d910      	bls.n	80057cc <UART_SetConfig+0x5c8>
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b0:	d20c      	bcs.n	80057cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60da      	str	r2, [r3, #12]
 80057bc:	e009      	b.n	80057d2 <UART_SetConfig+0x5ce>
 80057be:	bf00      	nop
 80057c0:	40008000 	.word	0x40008000
 80057c4:	00f42400 	.word	0x00f42400
 80057c8:	08005f10 	.word	0x08005f10
      }
      else
      {
        ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2201      	movs	r2, #1
 80057de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2200      	movs	r2, #0
 80057ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3730      	adds	r7, #48	@ 0x30
 80057f6:	46bd      	mov	sp, r7
 80057f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01a      	beq.n	8005912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058fa:	d10a      	bne.n	8005912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b098      	sub	sp, #96	@ 0x60
 8005944:	af02      	add	r7, sp, #8
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005950:	f7fc f9ec 	bl	8001d2c <HAL_GetTick>
 8005954:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b08      	cmp	r3, #8
 8005962:	d12f      	bne.n	80059c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005964:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800596c:	2200      	movs	r2, #0
 800596e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f88e 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d022      	beq.n	80059c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800598c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005992:	653b      	str	r3, [r7, #80]	@ 0x50
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800599c:	647b      	str	r3, [r7, #68]	@ 0x44
 800599e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e6      	bne.n	800597e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e063      	b.n	8005a8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d149      	bne.n	8005a66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059da:	2200      	movs	r2, #0
 80059dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f857 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d03c      	beq.n	8005a66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	623b      	str	r3, [r7, #32]
   return(result);
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e6      	bne.n	80059ec <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3308      	adds	r3, #8
 8005a24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a3e:	61fa      	str	r2, [r7, #28]
 8005a40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	69b9      	ldr	r1, [r7, #24]
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e5      	bne.n	8005a1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e012      	b.n	8005a8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3758      	adds	r7, #88	@ 0x58
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa4:	e049      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aac:	d045      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aae:	f7fc f93d 	bl	8001d2c <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d302      	bcc.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e048      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d031      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d110      	bne.n	8005b06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f838 	bl	8005b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2208      	movs	r2, #8
 8005af6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e029      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b14:	d111      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f81e 	bl	8005b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e00f      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4013      	ands	r3, r2
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	bf0c      	ite	eq
 8005b4a:	2301      	moveq	r3, #1
 8005b4c:	2300      	movne	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d0a6      	beq.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b095      	sub	sp, #84	@ 0x54
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bb2:	f023 0301 	bic.w	r3, r3, #1
 8005bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e3      	bne.n	8005b9c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d118      	bne.n	8005c0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f023 0310 	bic.w	r3, r3, #16
 8005bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6979      	ldr	r1, [r7, #20]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	613b      	str	r3, [r7, #16]
   return(result);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e6      	bne.n	8005bdc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c22:	bf00      	nop
 8005c24:	3754      	adds	r7, #84	@ 0x54
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e027      	b.n	8005c94 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2224      	movs	r2, #36	@ 0x24
 8005c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e02d      	b.n	8005d14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2224      	movs	r2, #36	@ 0x24
 8005cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f84f 	bl	8005d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e02d      	b.n	8005d90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2224      	movs	r2, #36	@ 0x24
 8005d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f811 	bl	8005d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d108      	bne.n	8005dba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005db8:	e031      	b.n	8005e1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dba:	2308      	movs	r3, #8
 8005dbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	0e5b      	lsrs	r3, r3, #25
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	0f5b      	lsrs	r3, r3, #29
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005de2:	7bbb      	ldrb	r3, [r7, #14]
 8005de4:	7b3a      	ldrb	r2, [r7, #12]
 8005de6:	4911      	ldr	r1, [pc, #68]	@ (8005e2c <UARTEx_SetNbDataToProcess+0x94>)
 8005de8:	5c8a      	ldrb	r2, [r1, r2]
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dee:	7b3a      	ldrb	r2, [r7, #12]
 8005df0:	490f      	ldr	r1, [pc, #60]	@ (8005e30 <UARTEx_SetNbDataToProcess+0x98>)
 8005df2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	7b7a      	ldrb	r2, [r7, #13]
 8005e04:	4909      	ldr	r1, [pc, #36]	@ (8005e2c <UARTEx_SetNbDataToProcess+0x94>)
 8005e06:	5c8a      	ldrb	r2, [r1, r2]
 8005e08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e0c:	7b7a      	ldrb	r2, [r7, #13]
 8005e0e:	4908      	ldr	r1, [pc, #32]	@ (8005e30 <UARTEx_SetNbDataToProcess+0x98>)
 8005e10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e12:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	08005f28 	.word	0x08005f28
 8005e30:	08005f30 	.word	0x08005f30

08005e34 <memset>:
 8005e34:	4402      	add	r2, r0
 8005e36:	4603      	mov	r3, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4d0d      	ldr	r5, [pc, #52]	@ (8005e7c <__libc_init_array+0x38>)
 8005e48:	4c0d      	ldr	r4, [pc, #52]	@ (8005e80 <__libc_init_array+0x3c>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	2600      	movs	r6, #0
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4d0b      	ldr	r5, [pc, #44]	@ (8005e84 <__libc_init_array+0x40>)
 8005e56:	4c0c      	ldr	r4, [pc, #48]	@ (8005e88 <__libc_init_array+0x44>)
 8005e58:	f000 f818 	bl	8005e8c <_init>
 8005e5c:	1b64      	subs	r4, r4, r5
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	2600      	movs	r6, #0
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08005f40 	.word	0x08005f40
 8005e80:	08005f40 	.word	0x08005f40
 8005e84:	08005f40 	.word	0x08005f40
 8005e88:	08005f44 	.word	0x08005f44

08005e8c <_init>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr

08005e98 <_fini>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr
