
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c80  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  08006e40  08006e40  00007e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007574  08007574  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007574  08007574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800757c  0800757c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800757c  0800757c  0000857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007580  08007580  00008580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007584  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000060  080075e4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  080075e4  0000968c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e52  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d62  00000000  00000000  0001dee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00020c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dac  00000000  00000000  00021de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf2f  00000000  00000000  00022b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001769e  00000000  00000000  0004eac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104063  00000000  00000000  00066161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a1c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e24  00000000  00000000  0016a208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0016f02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006e28 	.word	0x08006e28

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	08006e28 	.word	0x08006e28

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <addNewEntry>:


void pillsinit(){
	numPills = 0;
}
void addNewEntry(uint8_t dispenserNum, char * name, uint8_t dayofWeek, uint8_t hour, uint8_t min){
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b087      	sub	sp, #28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6039      	str	r1, [r7, #0]
 8000598:	4611      	mov	r1, r2
 800059a:	461a      	mov	r2, r3
 800059c:	4603      	mov	r3, r0
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	460b      	mov	r3, r1
 80005a2:	71bb      	strb	r3, [r7, #6]
 80005a4:	4613      	mov	r3, r2
 80005a6:	717b      	strb	r3, [r7, #5]
	//uint8_t ID; uint8_t dispenserNum; char * name; uint8_t dayofWeek; uint8_t hour; uint8_t min; uint8_t taken;
	pillEntry wew = {numPills, dispenserNum, name, dayofWeek, hour, min, 1};
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <addNewEntry+0x70>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	733b      	strb	r3, [r7, #12]
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	737b      	strb	r3, [r7, #13]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	753b      	strb	r3, [r7, #20]
 80005ba:	797b      	ldrb	r3, [r7, #5]
 80005bc:	757b      	strb	r3, [r7, #21]
 80005be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005c2:	75bb      	strb	r3, [r7, #22]
 80005c4:	2301      	movs	r3, #1
 80005c6:	75fb      	strb	r3, [r7, #23]
	pillList[numPills] = wew;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <addNewEntry+0x70>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <addNewEntry+0x74>)
 80005d0:	460b      	mov	r3, r1
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	440b      	add	r3, r1
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	461c      	mov	r4, r3
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	numPills++;
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <addNewEntry+0x70>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <addNewEntry+0x70>)
 80005f2:	701a      	strb	r2, [r3, #0]
	sortEntries();
 80005f4:	f000 f808 	bl	8000608 <sortEntries>
	//update_next_pill_idx(DS1307_GetDayOfWeek, DS1307_GetHour, DS1307_GetMinute);
}
 80005f8:	bf00      	nop
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	2000007c 	.word	0x2000007c
 8000604:	20000080 	.word	0x20000080

08000608 <sortEntries>:

void sortEntries(){
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
	uint8_t i = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	73bb      	strb	r3, [r7, #14]
	uint8_t minimum_idx = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	737b      	strb	r3, [r7, #13]

	//WOOOO SELECTION SORT MY BELOVED!!!!
	for (i = 0; i < numPills; i++){
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e060      	b.n	80006e2 <sortEntries+0xda>
		minimum_idx = i;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	737b      	strb	r3, [r7, #13]
		for (j = i + 1; j < numPills; j++){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	3301      	adds	r3, #1
 8000628:	73bb      	strb	r3, [r7, #14]
 800062a:	e01f      	b.n	800066c <sortEntries+0x64>
			if (compPillEntry(pillList[j], pillList[minimum_idx])){
 800062c:	7bba      	ldrb	r2, [r7, #14]
 800062e:	7b79      	ldrb	r1, [r7, #13]
 8000630:	4831      	ldr	r0, [pc, #196]	@ (80006f8 <sortEntries+0xf0>)
 8000632:	460b      	mov	r3, r1
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	440b      	add	r3, r1
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	18c4      	adds	r4, r0, r3
 800063c:	492e      	ldr	r1, [pc, #184]	@ (80006f8 <sortEntries+0xf0>)
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	18ca      	adds	r2, r1, r3
 8000648:	466d      	mov	r5, sp
 800064a:	1d23      	adds	r3, r4, #4
 800064c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000650:	e885 0003 	stmia.w	r5, {r0, r1}
 8000654:	6823      	ldr	r3, [r4, #0]
 8000656:	ca07      	ldmia	r2, {r0, r1, r2}
 8000658:	f000 f852 	bl	8000700 <compPillEntry>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <sortEntries+0x5e>
				minimum_idx = j;
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	737b      	strb	r3, [r7, #13]
		for (j = i + 1; j < numPills; j++){
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	3301      	adds	r3, #1
 800066a:	73bb      	strb	r3, [r7, #14]
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <sortEntries+0xf4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	7bba      	ldrb	r2, [r7, #14]
 8000672:	429a      	cmp	r2, r3
 8000674:	d3da      	bcc.n	800062c <sortEntries+0x24>
			}
		}
		pillEntry temp = pillList[i];
 8000676:	7bfa      	ldrb	r2, [r7, #15]
 8000678:	491f      	ldr	r1, [pc, #124]	@ (80006f8 <sortEntries+0xf0>)
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	18ca      	adds	r2, r1, r3
 8000684:	463b      	mov	r3, r7
 8000686:	ca07      	ldmia	r2, {r0, r1, r2}
 8000688:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		pillList[i] = pillList[minimum_idx];
 800068c:	7b7a      	ldrb	r2, [r7, #13]
 800068e:	7bf9      	ldrb	r1, [r7, #15]
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <sortEntries+0xf0>)
 8000692:	460b      	mov	r3, r1
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	440b      	add	r3, r1
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4418      	add	r0, r3
 800069c:	4916      	ldr	r1, [pc, #88]	@ (80006f8 <sortEntries+0xf0>)
 800069e:	4613      	mov	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4413      	add	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	18ca      	adds	r2, r1, r3
 80006a8:	4603      	mov	r3, r0
 80006aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		pillList[minimum_idx] = temp;
 80006b0:	7b7a      	ldrb	r2, [r7, #13]
 80006b2:	4911      	ldr	r1, [pc, #68]	@ (80006f8 <sortEntries+0xf0>)
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	440b      	add	r3, r1
 80006be:	461c      	mov	r4, r3
 80006c0:	463b      	mov	r3, r7
 80006c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		pillList[i].ID = i;
 80006ca:	7bfa      	ldrb	r2, [r7, #15]
 80006cc:	490a      	ldr	r1, [pc, #40]	@ (80006f8 <sortEntries+0xf0>)
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	7bfa      	ldrb	r2, [r7, #15]
 80006da:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numPills; i++){
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	3301      	adds	r3, #1
 80006e0:	73fb      	strb	r3, [r7, #15]
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <sortEntries+0xf4>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	7bfa      	ldrb	r2, [r7, #15]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d399      	bcc.n	8000620 <sortEntries+0x18>

	}
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bdb0      	pop	{r4, r5, r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000080 	.word	0x20000080
 80006fc:	2000007c 	.word	0x2000007c

08000700 <compPillEntry>:

//returns 1 if lhs is less than rhs
uint8_t compPillEntry(pillEntry lhs, pillEntry rhs){
 8000700:	b082      	sub	sp, #8
 8000702:	b490      	push	{r4, r7}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	1d3c      	adds	r4, r7, #4
 800070a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800070e:	61fb      	str	r3, [r7, #28]

	if (!(lhs.dayofWeek == rhs.dayofWeek)){
 8000710:	7b3a      	ldrb	r2, [r7, #12]
 8000712:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000716:	429a      	cmp	r2, r3
 8000718:	d008      	beq.n	800072c <compPillEntry+0x2c>
		return lhs.dayofWeek < rhs.dayofWeek;
 800071a:	7b3a      	ldrb	r2, [r7, #12]
 800071c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000720:	429a      	cmp	r2, r3
 8000722:	bf34      	ite	cc
 8000724:	2301      	movcc	r3, #1
 8000726:	2300      	movcs	r3, #0
 8000728:	b2db      	uxtb	r3, r3
 800072a:	e01c      	b.n	8000766 <compPillEntry+0x66>
	}

	if (!(lhs.hour == rhs.hour)){
 800072c:	7b7a      	ldrb	r2, [r7, #13]
 800072e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000732:	429a      	cmp	r2, r3
 8000734:	d008      	beq.n	8000748 <compPillEntry+0x48>
		return lhs.hour < rhs.hour;
 8000736:	7b7a      	ldrb	r2, [r7, #13]
 8000738:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800073c:	429a      	cmp	r2, r3
 800073e:	bf34      	ite	cc
 8000740:	2301      	movcc	r3, #1
 8000742:	2300      	movcs	r3, #0
 8000744:	b2db      	uxtb	r3, r3
 8000746:	e00e      	b.n	8000766 <compPillEntry+0x66>
	}

	if (!(lhs.min == rhs.min)){
 8000748:	7bba      	ldrb	r2, [r7, #14]
 800074a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800074e:	429a      	cmp	r2, r3
 8000750:	d008      	beq.n	8000764 <compPillEntry+0x64>
		return lhs.min < rhs.min;
 8000752:	7bba      	ldrb	r2, [r7, #14]
 8000754:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000758:	429a      	cmp	r2, r3
 800075a:	bf34      	ite	cc
 800075c:	2301      	movcc	r3, #1
 800075e:	2300      	movcs	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	e000      	b.n	8000766 <compPillEntry+0x66>
	}

	return 0;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bc90      	pop	{r4, r7}
 800076e:	b002      	add	sp, #8
 8000770:	4770      	bx	lr
	...

08000774 <update_next_pill_idx>:

uint8_t update_next_pill_idx(uint8_t dayofweek, uint8_t hour, uint8_t min){
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	460b      	mov	r3, r1
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	4613      	mov	r3, r2
 8000784:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
	//find closest next pill to the current time. Actual search algorithms be damned.
	for (i = 0; i < numPills; i++){
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e053      	b.n	8000838 <update_next_pill_idx+0xc4>
		if (!(dayofweek == pillList[i].dayofWeek)){
 8000790:	7bfa      	ldrb	r2, [r7, #15]
 8000792:	492f      	ldr	r1, [pc, #188]	@ (8000850 <update_next_pill_idx+0xdc>)
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	440b      	add	r3, r1
 800079e:	3308      	adds	r3, #8
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d00e      	beq.n	80007c6 <update_next_pill_idx+0x52>
			if (dayofweek < pillList[i].dayofWeek){
 80007a8:	7bfa      	ldrb	r2, [r7, #15]
 80007aa:	4929      	ldr	r1, [pc, #164]	@ (8000850 <update_next_pill_idx+0xdc>)
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	3308      	adds	r3, #8
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d202      	bcs.n	80007c6 <update_next_pill_idx+0x52>
				next_time_pill_idx = i;
 80007c0:	4a24      	ldr	r2, [pc, #144]	@ (8000854 <update_next_pill_idx+0xe0>)
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	7013      	strb	r3, [r2, #0]
			}

		}

		if (!(hour == pillList[i].hour)){
 80007c6:	7bfa      	ldrb	r2, [r7, #15]
 80007c8:	4921      	ldr	r1, [pc, #132]	@ (8000850 <update_next_pill_idx+0xdc>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	3309      	adds	r3, #9
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	79ba      	ldrb	r2, [r7, #6]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d00e      	beq.n	80007fc <update_next_pill_idx+0x88>
			if (dayofweek < pillList[i].dayofWeek){
 80007de:	7bfa      	ldrb	r2, [r7, #15]
 80007e0:	491b      	ldr	r1, [pc, #108]	@ (8000850 <update_next_pill_idx+0xdc>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	3308      	adds	r3, #8
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d202      	bcs.n	80007fc <update_next_pill_idx+0x88>
				next_time_pill_idx = i;
 80007f6:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <update_next_pill_idx+0xe0>)
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	7013      	strb	r3, [r2, #0]
			}
		}

		if (!(min == pillList[i].min)){
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	4914      	ldr	r1, [pc, #80]	@ (8000850 <update_next_pill_idx+0xdc>)
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	440b      	add	r3, r1
 800080a:	330a      	adds	r3, #10
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	797a      	ldrb	r2, [r7, #5]
 8000810:	429a      	cmp	r2, r3
 8000812:	d00e      	beq.n	8000832 <update_next_pill_idx+0xbe>
			if (dayofweek < pillList[i].dayofWeek){
 8000814:	7bfa      	ldrb	r2, [r7, #15]
 8000816:	490e      	ldr	r1, [pc, #56]	@ (8000850 <update_next_pill_idx+0xdc>)
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	440b      	add	r3, r1
 8000822:	3308      	adds	r3, #8
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	79fa      	ldrb	r2, [r7, #7]
 8000828:	429a      	cmp	r2, r3
 800082a:	d202      	bcs.n	8000832 <update_next_pill_idx+0xbe>
				next_time_pill_idx = i;
 800082c:	4a09      	ldr	r2, [pc, #36]	@ (8000854 <update_next_pill_idx+0xe0>)
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < numPills; i++){
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <update_next_pill_idx+0xe4>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	7bfa      	ldrb	r2, [r7, #15]
 800083e:	429a      	cmp	r2, r3
 8000840:	d3a6      	bcc.n	8000790 <update_next_pill_idx+0x1c>
			}
		}
	}

}
 8000842:	bf00      	nop
 8000844:	4618      	mov	r0, r3
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	20000080 	.word	0x20000080
 8000854:	200002d8 	.word	0x200002d8
 8000858:	2000007c 	.word	0x2000007c

0800085c <get_next_pill_idx>:

uint8_t get_next_pill_idx(){
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	return next_time_pill_idx;
 8000860:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <get_next_pill_idx+0x14>)
 8000862:	781b      	ldrb	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	200002d8 	.word	0x200002d8

08000874 <getPillInfo>:
		last_taken_pill_idx = next_time_pill_idx - 1;
	}

}

pillEntry getPillInfo(uint8_t idx){
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
	return pillList[idx];
 8000880:	78fa      	ldrb	r2, [r7, #3]
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	4907      	ldr	r1, [pc, #28]	@ (80008a4 <getPillInfo+0x30>)
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	18ca      	adds	r2, r1, r3
 8000890:	4603      	mov	r3, r0
 8000892:	ca07      	ldmia	r2, {r0, r1, r2}
 8000894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	20000080 	.word	0x20000080

080008a8 <LockScreen>:
	return;
}



void LockScreen(){
 80008a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008aa:	b0cd      	sub	sp, #308	@ 0x134
 80008ac:	af06      	add	r7, sp, #24
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 80008ae:	4bbd      	ldr	r3, [pc, #756]	@ (8000ba4 <LockScreen+0x2fc>)
 80008b0:	f107 04f0 	add.w	r4, r7, #240	@ 0xf0
 80008b4:	461d      	mov	r5, r3
 80008b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const char *MONTHS_OF_YEAR[12] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
 80008c2:	4bb9      	ldr	r3, [pc, #740]	@ (8000ba8 <LockScreen+0x300>)
 80008c4:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 80008c8:	461d      	mov	r5, r3
 80008ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	uint8_t date = DS1307_GetDate();
 80008da:	f000 fa45 	bl	8000d68 <DS1307_GetDate>
 80008de:	4603      	mov	r3, r0
 80008e0:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
	uint8_t month = DS1307_GetMonth();
 80008e4:	f000 fa4c 	bl	8000d80 <DS1307_GetMonth>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	uint16_t year = DS1307_GetYear();
 80008ee:	f000 fa53 	bl	8000d98 <DS1307_GetYear>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
	uint8_t dow = DS1307_GetDayOfWeek();
 80008f8:	f000 fa2a 	bl	8000d50 <DS1307_GetDayOfWeek>
 80008fc:	4603      	mov	r3, r0
 80008fe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t hour = DS1307_GetHour();
 8000902:	f000 fa6a 	bl	8000dda <DS1307_GetHour>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	uint8_t minute = DS1307_GetMinute();
 800090c:	f000 fa74 	bl	8000df8 <DS1307_GetMinute>
 8000910:	4603      	mov	r3, r0
 8000912:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	uint8_t second = DS1307_GetSecond();
 8000916:	f000 fa7b 	bl	8000e10 <DS1307_GetSecond>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	char buffer[100] = { 0 };
 8000920:	2300      	movs	r3, #0
 8000922:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000924:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000928:	2260      	movs	r2, #96	@ 0x60
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f005 fdfb 	bl	8006528 <memset>
	char ampm[4] = "AM";
 8000932:	f644 5341 	movw	r3, #19777	@ 0x4d41
 8000936:	65bb      	str	r3, [r7, #88]	@ 0x58
	char formattedMinute[4];
	if (minute < 10){
 8000938:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800093c:	2b09      	cmp	r3, #9
 800093e:	d808      	bhi.n	8000952 <LockScreen+0xaa>
		sprintf(formattedMinute, "0%i", minute);
 8000940:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8000944:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000948:	4998      	ldr	r1, [pc, #608]	@ (8000bac <LockScreen+0x304>)
 800094a:	4618      	mov	r0, r3
 800094c:	f005 fdcc 	bl	80064e8 <siprintf>
 8000950:	e007      	b.n	8000962 <LockScreen+0xba>
	}
	else{
		sprintf(formattedMinute, "%i", minute);
 8000952:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8000956:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800095a:	4995      	ldr	r1, [pc, #596]	@ (8000bb0 <LockScreen+0x308>)
 800095c:	4618      	mov	r0, r3
 800095e:	f005 fdc3 	bl	80064e8 <siprintf>
	}
 	//convert to 12hr time
	if (hour == 0){
 8000962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000966:	2b00      	cmp	r3, #0
 8000968:	d103      	bne.n	8000972 <LockScreen+0xca>
		hour = 12;
 800096a:	230c      	movs	r3, #12
 800096c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000970:	e00f      	b.n	8000992 <LockScreen+0xea>
	}
	else if (hour > 12){
 8000972:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000976:	2b0c      	cmp	r3, #12
 8000978:	d90b      	bls.n	8000992 <LockScreen+0xea>
		hour = hour - 12;
 800097a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800097e:	3b0c      	subs	r3, #12
 8000980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		sprintf(ampm, "%s", "PM");
 8000984:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000988:	4a8a      	ldr	r2, [pc, #552]	@ (8000bb4 <LockScreen+0x30c>)
 800098a:	498b      	ldr	r1, [pc, #556]	@ (8000bb8 <LockScreen+0x310>)
 800098c:	4618      	mov	r0, r3
 800098e:	f005 fdab 	bl	80064e8 <siprintf>
	}
	/* May show warning below. Ignore and proceed. */
	sprintf(buffer, "Now: %s, %s %i %i, %i:%s:%i %s",
 8000992:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800099c:	f107 0208 	add.w	r2, r7, #8
 80009a0:	4413      	add	r3, r2
 80009a2:	f853 6c28 	ldr.w	r6, [r3, #-40]
	DAYS_OF_WEEK[dow], MONTHS_OF_YEAR[month - 1], date, year, hour, formattedMinute, second, ampm);
 80009a6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80009aa:	3b01      	subs	r3, #1
	sprintf(buffer, "Now: %s, %s %i %i, %i:%s:%i %s",
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80009b2:	f107 0208 	add.w	r2, r7, #8
 80009b6:	4413      	add	r3, r2
 80009b8:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 80009c2:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 80009c6:	f897 1117 	ldrb.w	r1, [r7, #279]	@ 0x117
 80009ca:	f897 010d 	ldrb.w	r0, [r7, #269]	@ 0x10d
 80009ce:	f107 055c 	add.w	r5, r7, #92	@ 0x5c
 80009d2:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80009d6:	9405      	str	r4, [sp, #20]
 80009d8:	9004      	str	r0, [sp, #16]
 80009da:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80009de:	9003      	str	r0, [sp, #12]
 80009e0:	9102      	str	r1, [sp, #8]
 80009e2:	9201      	str	r2, [sp, #4]
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4632      	mov	r2, r6
 80009ea:	4974      	ldr	r1, [pc, #464]	@ (8000bbc <LockScreen+0x314>)
 80009ec:	4628      	mov	r0, r5
 80009ee:	f005 fd7b 	bl	80064e8 <siprintf>
	ILI9488_printText(buffer, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 2);
 80009f2:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80009f6:	2302      	movs	r3, #2
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2300      	movs	r3, #0
 8000a02:	220a      	movs	r2, #10
 8000a04:	210a      	movs	r1, #10
 8000a06:	f001 f80f 	bl	8001a28 <ILI9488_printText>
	HAL_Delay(50);
 8000a0a:	2032      	movs	r0, #50	@ 0x32
 8000a0c:	f001 fe4c 	bl	80026a8 <HAL_Delay>

	update_next_pill_idx(DS1307_GetDayOfWeek(), DS1307_GetHour(), DS1307_GetMinute());
 8000a10:	f000 f99e 	bl	8000d50 <DS1307_GetDayOfWeek>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461c      	mov	r4, r3
 8000a18:	f000 f9df 	bl	8000dda <DS1307_GetHour>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461d      	mov	r5, r3
 8000a20:	f000 f9ea 	bl	8000df8 <DS1307_GetMinute>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	4629      	mov	r1, r5
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f7ff fea2 	bl	8000774 <update_next_pill_idx>

	 uint8_t pil = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
	 for (pil = 0; pil < 3; pil++){
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000a3c:	e0fc      	b.n	8000c38 <LockScreen+0x390>

		 //12 hour time for every pill
		 pillEntry temp = getPillInfo(pil);
 8000a3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a42:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff13 	bl	8000874 <getPillInfo>
		 uint8_t tempHour = temp.hour;
 8000a4e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8000a52:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
		 char tempampm[4] = "AM";
 8000a56:	f644 5341 	movw	r3, #19777	@ 0x4d41
 8000a5a:	647b      	str	r3, [r7, #68]	@ 0x44
		 char pillTime [50];
		 char pillFormatMinute [5] = " ";
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40


		 if (temp.min < 10){
 8000a66:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000a6a:	2b09      	cmp	r3, #9
 8000a6c:	d809      	bhi.n	8000a82 <LockScreen+0x1da>
				sprintf(pillFormatMinute, "0%i", temp.min);
 8000a6e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000a72:	461a      	mov	r2, r3
 8000a74:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a78:	494c      	ldr	r1, [pc, #304]	@ (8000bac <LockScreen+0x304>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fd34 	bl	80064e8 <siprintf>
 8000a80:	e008      	b.n	8000a94 <LockScreen+0x1ec>
			}

		 else{
				sprintf(pillFormatMinute, "%i", temp.min);
 8000a82:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000a86:	461a      	mov	r2, r3
 8000a88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a8c:	4948      	ldr	r1, [pc, #288]	@ (8000bb0 <LockScreen+0x308>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 fd2a 	bl	80064e8 <siprintf>
			}
		 if (tempHour == 0){
 8000a94:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d103      	bne.n	8000aa4 <LockScreen+0x1fc>
			tempHour = 12;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000aa2:	e00f      	b.n	8000ac4 <LockScreen+0x21c>
		 }
		 else if (tempHour > 12){
 8000aa4:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000aa8:	2b0c      	cmp	r3, #12
 8000aaa:	d90b      	bls.n	8000ac4 <LockScreen+0x21c>
			tempHour = tempHour - 12;
 8000aac:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000ab0:	3b0c      	subs	r3, #12
 8000ab2:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
			sprintf(tempampm, "%s", "PM");
 8000ab6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000aba:	4a3e      	ldr	r2, [pc, #248]	@ (8000bb4 <LockScreen+0x30c>)
 8000abc:	493e      	ldr	r1, [pc, #248]	@ (8000bb8 <LockScreen+0x310>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 fd12 	bl	80064e8 <siprintf>
		 }

		sprintf(pillTime, "Pill Due at %s, %s %i @ %i:%s %s", DAYS_OF_WEEK[temp.dayofWeek], MONTHS_OF_YEAR[month - 1], date + (temp.dayofWeek - dow),tempHour,  pillFormatMinute, tempampm);
 8000ac4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8000ace:	f107 0208 	add.w	r2, r7, #8
 8000ad2:	4413      	add	r3, r2
 8000ad4:	f853 4c28 	ldr.w	r4, [r3, #-40]
 8000ad8:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8000adc:	3b01      	subs	r3, #1
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	4413      	add	r3, r2
 8000aea:	f853 5c58 	ldr.w	r5, [r3, #-88]
 8000aee:	f897 2114 	ldrb.w	r2, [r7, #276]	@ 0x114
 8000af2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000af6:	4619      	mov	r1, r3
 8000af8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000afc:	1acb      	subs	r3, r1, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	f897 2115 	ldrb.w	r2, [r7, #277]	@ 0x115
 8000b04:	f107 0008 	add.w	r0, r7, #8
 8000b08:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000b0c:	9103      	str	r1, [sp, #12]
 8000b0e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000b12:	9102      	str	r1, [sp, #8]
 8000b14:	9201      	str	r2, [sp, #4]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	462b      	mov	r3, r5
 8000b1a:	4622      	mov	r2, r4
 8000b1c:	4928      	ldr	r1, [pc, #160]	@ (8000bc0 <LockScreen+0x318>)
 8000b1e:	f005 fce3 	bl	80064e8 <siprintf>
		//overdue pills.
		if (pil < get_next_pill_idx()){
 8000b22:	f7ff fe9b 	bl	800085c <get_next_pill_idx>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d248      	bcs.n	8000bc4 <LockScreen+0x31c>
			ILI9488_printText(temp.name, 10, (pil + 1) * 50, ILI9488_RED, ILI9488_WHITE, 1);
 8000b32:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000b34:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000b38:	3301      	adds	r3, #1
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	0092      	lsls	r2, r2, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	461a      	mov	r2, r3
 8000b44:	0091      	lsls	r1, r2, #2
 8000b46:	461a      	mov	r2, r3
 8000b48:	460b      	mov	r3, r1
 8000b4a:	4413      	add	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b21a      	sxth	r2, r3
 8000b52:	2301      	movs	r3, #1
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b60:	210a      	movs	r1, #10
 8000b62:	f000 ff61 	bl	8001a28 <ILI9488_printText>
			ILI9488_printText(pillTime, 10, (pil + 1)*50 + 10, ILI9488_RED, ILI9488_WHITE, 1);
 8000b66:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	0092      	lsls	r2, r2, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	461a      	mov	r2, r3
 8000b76:	0091      	lsls	r1, r2, #2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	330a      	adds	r3, #10
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	f107 0008 	add.w	r0, r7, #8
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b9a:	210a      	movs	r1, #10
 8000b9c:	f000 ff44 	bl	8001a28 <ILI9488_printText>
 8000ba0:	e045      	b.n	8000c2e <LockScreen+0x386>
 8000ba2:	bf00      	nop
 8000ba4:	08006f00 	.word	0x08006f00
 8000ba8:	08006f88 	.word	0x08006f88
 8000bac:	08006e68 	.word	0x08006e68
 8000bb0:	08006e6c 	.word	0x08006e6c
 8000bb4:	08006e70 	.word	0x08006e70
 8000bb8:	08006e74 	.word	0x08006e74
 8000bbc:	08006e78 	.word	0x08006e78
 8000bc0:	08006e98 	.word	0x08006e98
		}
		else {
			ILI9488_printText(temp.name, 10, (pil + 1) * 50, ILI9488_BLACK, ILI9488_WHITE, 1);
 8000bc4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000bc6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	0091      	lsls	r1, r2, #2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4413      	add	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	2301      	movs	r3, #1
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	210a      	movs	r1, #10
 8000bf2:	f000 ff19 	bl	8001a28 <ILI9488_printText>
			ILI9488_printText(pillTime, 10, (pil + 1) * 50 + 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 8000bf6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	0091      	lsls	r1, r2, #2
 8000c08:	461a      	mov	r2, r3
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	330a      	adds	r3, #10
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	f107 0008 	add.w	r0, r7, #8
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	210a      	movs	r1, #10
 8000c2a:	f000 fefd 	bl	8001a28 <ILI9488_printText>
	 for (pil = 0; pil < 3; pil++){
 8000c2e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000c32:	3301      	adds	r3, #1
 8000c34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000c38:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	f67f aefe 	bls.w	8000a3e <LockScreen+0x196>
		}
	 }
	 HAL_Delay(1000);
 8000c42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c46:	f001 fd2f 	bl	80026a8 <HAL_Delay>
}
 8000c4a:	bf00      	nop
 8000c4c:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c54 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8000c5c:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <DS1307_Init+0x1c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 f806 	bl	8000c74 <DS1307_SetClockHalt>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200002dc 	.word	0x200002dc

08000c74 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <DS1307_SetClockHalt+0x14>
 8000c84:	2380      	movs	r3, #128	@ 0x80
 8000c86:	e000      	b.n	8000c8a <DS1307_SetClockHalt+0x16>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 f83d 	bl	8000d0c <DS1307_GetRegByte>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c9a:	b25a      	sxtb	r2, r3
 8000c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 f811 	bl	8000cd0 <DS1307_SetRegByte>
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f826 	bl	8000d0c <DS1307_GetRegByte>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	11db      	asrs	r3, r3, #7
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	733b      	strb	r3, [r7, #12]
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <DS1307_SetRegByte+0x38>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	f107 020c 	add.w	r2, r7, #12
 8000cf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	21d0      	movs	r1, #208	@ 0xd0
 8000cfa:	f002 f825 	bl	8002d48 <HAL_I2C_Master_Transmit>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200002dc 	.word	0x200002dc

08000d0c <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <DS1307_GetRegByte+0x40>)
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	1dfa      	adds	r2, r7, #7
 8000d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	21d0      	movs	r1, #208	@ 0xd0
 8000d26:	f002 f80f 	bl	8002d48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <DS1307_GetRegByte+0x40>)
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	f107 020f 	add.w	r2, r7, #15
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	21d0      	movs	r1, #208	@ 0xd0
 8000d3c:	f002 f91c 	bl	8002f78 <HAL_I2C_Master_Receive>
	return val;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200002dc 	.word	0x200002dc

08000d50 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8000d54:	2003      	movs	r0, #3
 8000d56:	f7ff ffd9 	bl	8000d0c <DS1307_GetRegByte>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 f907 	bl	8000f70 <DS1307_DecodeBCD>
 8000d62:	4603      	mov	r3, r0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8000d6c:	2004      	movs	r0, #4
 8000d6e:	f7ff ffcd 	bl	8000d0c <DS1307_GetRegByte>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f8fb 	bl	8000f70 <DS1307_DecodeBCD>
 8000d7a:	4603      	mov	r3, r0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8000d84:	2005      	movs	r0, #5
 8000d86:	f7ff ffc1 	bl	8000d0c <DS1307_GetRegByte>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f8ef 	bl	8000f70 <DS1307_DecodeBCD>
 8000d92:	4603      	mov	r3, r0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8000d9e:	2010      	movs	r0, #16
 8000da0:	f7ff ffb4 	bl	8000d0c <DS1307_GetRegByte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	461a      	mov	r2, r3
 8000dae:	0091      	lsls	r1, r2, #2
 8000db0:	461a      	mov	r2, r3
 8000db2:	460b      	mov	r3, r1
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8000dba:	2006      	movs	r0, #6
 8000dbc:	f7ff ffa6 	bl	8000d0c <DS1307_GetRegByte>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f8d4 	bl	8000f70 <DS1307_DecodeBCD>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	4413      	add	r3, r2
 8000dd0:	b29b      	uxth	r3, r3
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8000dde:	2002      	movs	r0, #2
 8000de0:	f7ff ff94 	bl	8000d0c <DS1307_GetRegByte>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 f8bf 	bl	8000f70 <DS1307_DecodeBCD>
 8000df2:	4603      	mov	r3, r0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff ff85 	bl	8000d0c <DS1307_GetRegByte>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f8b3 	bl	8000f70 <DS1307_DecodeBCD>
 8000e0a:	4603      	mov	r3, r0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff ff79 	bl	8000d0c <DS1307_GetRegByte>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f8a4 	bl	8000f70 <DS1307_DecodeBCD>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f8b2 	bl	8000fa4 <DS1307_EncodeBCD>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4619      	mov	r1, r3
 8000e44:	2003      	movs	r0, #3
 8000e46:	f7ff ff43 	bl	8000cd0 <DS1307_SetRegByte>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f8a0 	bl	8000fa4 <DS1307_EncodeBCD>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f7ff ff31 	bl	8000cd0 <DS1307_SetRegByte>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f88e 	bl	8000fa4 <DS1307_EncodeBCD>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2005      	movs	r0, #5
 8000e8e:	f7ff ff1f 	bl	8000cd0 <DS1307_SetRegByte>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	4a10      	ldr	r2, [pc, #64]	@ (8000eec <DS1307_SetYear+0x50>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2010      	movs	r0, #16
 8000eb8:	f7ff ff0a 	bl	8000cd0 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8000eec <DS1307_SetYear+0x50>)
 8000ec0:	fba2 1203 	umull	r1, r2, r2, r3
 8000ec4:	0952      	lsrs	r2, r2, #5
 8000ec6:	2164      	movs	r1, #100	@ 0x64
 8000ec8:	fb01 f202 	mul.w	r2, r1, r2
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f866 	bl	8000fa4 <DS1307_EncodeBCD>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4619      	mov	r1, r3
 8000edc:	2006      	movs	r0, #6
 8000ede:	f7ff fef7 	bl	8000cd0 <DS1307_SetRegByte>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	51eb851f 	.word	0x51eb851f

08000ef0 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f84e 	bl	8000fa4 <DS1307_EncodeBCD>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f7ff fedf 	bl	8000cd0 <DS1307_SetRegByte>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f83c 	bl	8000fa4 <DS1307_EncodeBCD>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff fecd 	bl	8000cd0 <DS1307_SetRegByte>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8000f48:	f7ff feb5 	bl	8000cb6 <DS1307_GetClockHalt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f823 	bl	8000fa4 <DS1307_EncodeBCD>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4619      	mov	r1, r3
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff feb4 	bl	8000cd0 <DS1307_SetRegByte>
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4413      	add	r3, r2
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <DS1307_EncodeBCD+0x40>)
 8000fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb6:	08d9      	lsrs	r1, r3, #3
 8000fb8:	460b      	mov	r3, r1
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <DS1307_EncodeBCD+0x40>)
 8000fc8:	fba1 1303 	umull	r1, r3, r1, r3
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b2db      	uxtb	r3, r3
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	cccccccd 	.word	0xcccccccd

08000fe8 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2140      	movs	r1, #64	@ 0x40
 8000ffa:	480c      	ldr	r0, [pc, #48]	@ (800102c <ILI9488_SendCommand+0x44>)
 8000ffc:	f001 fdf0 	bl	8002be0 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	4809      	ldr	r0, [pc, #36]	@ (800102c <ILI9488_SendCommand+0x44>)
 8001006:	f001 fdeb 	bl	8002be0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800100a:	f107 010f 	add.w	r1, r7, #15
 800100e:	2301      	movs	r3, #1
 8001010:	2201      	movs	r2, #1
 8001012:	4807      	ldr	r0, [pc, #28]	@ (8001030 <ILI9488_SendCommand+0x48>)
 8001014:	f004 f927 	bl	8005266 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8001018:	2201      	movs	r2, #1
 800101a:	2101      	movs	r1, #1
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <ILI9488_SendCommand+0x44>)
 800101e:	f001 fddf 	bl	8002be0 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	48000c00 	.word	0x48000c00
 8001030:	2000034c 	.word	0x2000034c

08001034 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 8001042:	2201      	movs	r2, #1
 8001044:	2140      	movs	r1, #64	@ 0x40
 8001046:	480c      	ldr	r0, [pc, #48]	@ (8001078 <ILI9488_SendData+0x44>)
 8001048:	f001 fdca 	bl	8002be0 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 800104c:	2200      	movs	r2, #0
 800104e:	2101      	movs	r1, #1
 8001050:	4809      	ldr	r0, [pc, #36]	@ (8001078 <ILI9488_SendData+0x44>)
 8001052:	f001 fdc5 	bl	8002be0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 8001056:	f107 010f 	add.w	r1, r7, #15
 800105a:	2301      	movs	r3, #1
 800105c:	2201      	movs	r2, #1
 800105e:	4807      	ldr	r0, [pc, #28]	@ (800107c <ILI9488_SendData+0x48>)
 8001060:	f004 f901 	bl	8005266 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8001064:	2201      	movs	r2, #1
 8001066:	2101      	movs	r1, #1
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <ILI9488_SendData+0x44>)
 800106a:	f001 fdb9 	bl	8002be0 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000c00 	.word	0x48000c00
 800107c:	2000034c 	.word	0x2000034c

08001080 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	DC_DATA();
 800108a:	2201      	movs	r2, #1
 800108c:	2140      	movs	r1, #64	@ 0x40
 800108e:	4815      	ldr	r0, [pc, #84]	@ (80010e4 <ILI9488_SendData_Multi+0x64>)
 8001090:	f001 fda6 	bl	8002be0 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 8001094:	2200      	movs	r2, #0
 8001096:	2101      	movs	r1, #1
 8001098:	4812      	ldr	r0, [pc, #72]	@ (80010e4 <ILI9488_SendData_Multi+0x64>)
 800109a:	f001 fda1 	bl	8002be0 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 800109e:	e015      	b.n	80010cc <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010a6:	bf28      	it	cs
 80010a8:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80010ac:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80010ae:	89fa      	ldrh	r2, [r7, #14]
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <ILI9488_SendData_Multi+0x68>)
 80010b8:	f004 f8d5 	bl	8005266 <HAL_SPI_Transmit>
		buff += chunk_size;
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1e6      	bne.n	80010a0 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 80010d2:	2201      	movs	r2, #1
 80010d4:	2101      	movs	r1, #1
 80010d6:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <ILI9488_SendData_Multi+0x64>)
 80010d8:	f001 fd82 	bl	8002be0 <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	48000c00 	.word	0x48000c00
 80010e8:	2000034c 	.word	0x2000034c

080010ec <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	486c      	ldr	r0, [pc, #432]	@ (80012a8 <ILI9488_Init+0x1bc>)
 80010f6:	f001 fd73 	bl	8002be0 <HAL_GPIO_WritePin>
	RST_A();
 80010fa:	2200      	movs	r2, #0
 80010fc:	2180      	movs	r1, #128	@ 0x80
 80010fe:	486a      	ldr	r0, [pc, #424]	@ (80012a8 <ILI9488_Init+0x1bc>)
 8001100:	f001 fd6e 	bl	8002be0 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f001 facf 	bl	80026a8 <HAL_Delay>
		 RST_D();
 800110a:	2201      	movs	r2, #1
 800110c:	2180      	movs	r1, #128	@ 0x80
 800110e:	4866      	ldr	r0, [pc, #408]	@ (80012a8 <ILI9488_Init+0x1bc>)
 8001110:	f001 fd66 	bl	8002be0 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 8001114:	4b65      	ldr	r3, [pc, #404]	@ (80012ac <ILI9488_Init+0x1c0>)
 8001116:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800111a:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 800111c:	4b64      	ldr	r3, [pc, #400]	@ (80012b0 <ILI9488_Init+0x1c4>)
 800111e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001122:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 8001124:	20e0      	movs	r0, #224	@ 0xe0
 8001126:	f7ff ff5f 	bl	8000fe8 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ff82 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 8001130:	2003      	movs	r0, #3
 8001132:	f7ff ff7f 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8001136:	2009      	movs	r0, #9
 8001138:	f7ff ff7c 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 800113c:	2008      	movs	r0, #8
 800113e:	f7ff ff79 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8001142:	2016      	movs	r0, #22
 8001144:	f7ff ff76 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8001148:	200a      	movs	r0, #10
 800114a:	f7ff ff73 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 800114e:	203f      	movs	r0, #63	@ 0x3f
 8001150:	f7ff ff70 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8001154:	2078      	movs	r0, #120	@ 0x78
 8001156:	f7ff ff6d 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 800115a:	204c      	movs	r0, #76	@ 0x4c
 800115c:	f7ff ff6a 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8001160:	2009      	movs	r0, #9
 8001162:	f7ff ff67 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8001166:	200a      	movs	r0, #10
 8001168:	f7ff ff64 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 800116c:	2008      	movs	r0, #8
 800116e:	f7ff ff61 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8001172:	2016      	movs	r0, #22
 8001174:	f7ff ff5e 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8001178:	201a      	movs	r0, #26
 800117a:	f7ff ff5b 	bl	8001034 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 800117e:	200f      	movs	r0, #15
 8001180:	f7ff ff58 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 8001184:	20e1      	movs	r0, #225	@ 0xe1
 8001186:	f7ff ff2f 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff ff52 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 8001190:	2016      	movs	r0, #22
 8001192:	f7ff ff4f 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 8001196:	2019      	movs	r0, #25
 8001198:	f7ff ff4c 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 800119c:	2003      	movs	r0, #3
 800119e:	f7ff ff49 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f7ff ff46 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 80011a8:	2005      	movs	r0, #5
 80011aa:	f7ff ff43 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 80011ae:	2032      	movs	r0, #50	@ 0x32
 80011b0:	f7ff ff40 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 80011b4:	2045      	movs	r0, #69	@ 0x45
 80011b6:	f7ff ff3d 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 80011ba:	2046      	movs	r0, #70	@ 0x46
 80011bc:	f7ff ff3a 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 80011c0:	2004      	movs	r0, #4
 80011c2:	f7ff ff37 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 80011c6:	200e      	movs	r0, #14
 80011c8:	f7ff ff34 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 80011cc:	200d      	movs	r0, #13
 80011ce:	f7ff ff31 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 80011d2:	2035      	movs	r0, #53	@ 0x35
 80011d4:	f7ff ff2e 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 80011d8:	2037      	movs	r0, #55	@ 0x37
 80011da:	f7ff ff2b 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80011de:	200f      	movs	r0, #15
 80011e0:	f7ff ff28 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 80011e4:	20c0      	movs	r0, #192	@ 0xc0
 80011e6:	f7ff feff 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 80011ea:	2017      	movs	r0, #23
 80011ec:	f7ff ff22 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 80011f0:	2015      	movs	r0, #21
 80011f2:	f7ff ff1f 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 80011f6:	20c1      	movs	r0, #193	@ 0xc1
 80011f8:	f7ff fef6 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 80011fc:	2041      	movs	r0, #65	@ 0x41
 80011fe:	f7ff ff19 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 8001202:	20c5      	movs	r0, #197	@ 0xc5
 8001204:	f7ff fef0 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff ff13 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 800120e:	2012      	movs	r0, #18
 8001210:	f7ff ff10 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 8001214:	2080      	movs	r0, #128	@ 0x80
 8001216:	f7ff ff0d 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 800121a:	2036      	movs	r0, #54	@ 0x36
 800121c:	f7ff fee4 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 8001220:	2048      	movs	r0, #72	@ 0x48
 8001222:	f7ff ff07 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 8001226:	203a      	movs	r0, #58	@ 0x3a
 8001228:	f7ff fede 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 800122c:	2066      	movs	r0, #102	@ 0x66
 800122e:	f7ff ff01 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 8001232:	20b0      	movs	r0, #176	@ 0xb0
 8001234:	f7ff fed8 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8001238:	2080      	movs	r0, #128	@ 0x80
 800123a:	f7ff fefb 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 800123e:	20b1      	movs	r0, #177	@ 0xb1
 8001240:	f7ff fed2 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 8001244:	20a0      	movs	r0, #160	@ 0xa0
 8001246:	f7ff fef5 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 800124a:	20b4      	movs	r0, #180	@ 0xb4
 800124c:	f7ff fecc 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8001250:	2002      	movs	r0, #2
 8001252:	f7ff feef 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8001256:	20b6      	movs	r0, #182	@ 0xb6
 8001258:	f7ff fec6 	bl	8000fe8 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 800125c:	2002      	movs	r0, #2
 800125e:	f7ff fee9 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 8001262:	2002      	movs	r0, #2
 8001264:	f7ff fee6 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8001268:	20e9      	movs	r0, #233	@ 0xe9
 800126a:	f7ff febd 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fee0 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 8001274:	20f7      	movs	r0, #247	@ 0xf7
 8001276:	f7ff feb7 	bl	8000fe8 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 800127a:	20a9      	movs	r0, #169	@ 0xa9
 800127c:	f7ff feda 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 8001280:	2051      	movs	r0, #81	@ 0x51
 8001282:	f7ff fed7 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 8001286:	202c      	movs	r0, #44	@ 0x2c
 8001288:	f7ff fed4 	bl	8001034 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 800128c:	2082      	movs	r0, #130	@ 0x82
 800128e:	f7ff fed1 	bl	8001034 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 8001292:	2011      	movs	r0, #17
 8001294:	f7ff fea8 	bl	8000fe8 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 8001298:	2078      	movs	r0, #120	@ 0x78
 800129a:	f001 fa05 	bl	80026a8 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 800129e:	2029      	movs	r0, #41	@ 0x29
 80012a0:	f7ff fea2 	bl	8000fe8 <ILI9488_SendCommand>

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	48000c00 	.word	0x48000c00
 80012ac:	200002f2 	.word	0x200002f2
 80012b0:	200002f4 	.word	0x200002f4

080012b4 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4623      	mov	r3, r4
 80012c4:	80fb      	strh	r3, [r7, #6]
 80012c6:	4603      	mov	r3, r0
 80012c8:	80bb      	strh	r3, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]
 80012ce:	4613      	mov	r3, r2
 80012d0:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 80012d2:	202a      	movs	r0, #42	@ 0x2a
 80012d4:	f7ff fe88 	bl	8000fe8 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	733b      	strb	r3, [r7, #12]
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	737b      	strb	r3, [r7, #13]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73bb      	strb	r3, [r7, #14]
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2104      	movs	r1, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff febe 	bl	8001080 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8001304:	202b      	movs	r0, #43	@ 0x2b
 8001306:	f7ff fe6f 	bl	8000fe8 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b29b      	uxth	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	723b      	strb	r3, [r7, #8]
 8001314:	88bb      	ldrh	r3, [r7, #4]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	727b      	strb	r3, [r7, #9]
 800131a:	883b      	ldrh	r3, [r7, #0]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	b29b      	uxth	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	72bb      	strb	r3, [r7, #10]
 8001324:	883b      	ldrh	r3, [r7, #0]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	2104      	movs	r1, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fea5 	bl	8001080 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 8001336:	202c      	movs	r0, #44	@ 0x2c
 8001338:	f7ff fe56 	bl	8000fe8 <ILI9488_SendCommand>
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}

08001344 <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
 800134e:	460b      	mov	r3, r1
 8001350:	80bb      	strh	r3, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8001356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db36      	blt.n	80013cc <drawPixel+0x88>
 800135e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001362:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <drawPixel+0x90>)
 8001364:	8812      	ldrh	r2, [r2, #0]
 8001366:	4293      	cmp	r3, r2
 8001368:	da30      	bge.n	80013cc <drawPixel+0x88>
 800136a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db2c      	blt.n	80013cc <drawPixel+0x88>
 8001372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001376:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <drawPixel+0x94>)
 8001378:	8812      	ldrh	r2, [r2, #0]
 800137a:	4293      	cmp	r3, r2
 800137c:	da26      	bge.n	80013cc <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 800137e:	88f8      	ldrh	r0, [r7, #6]
 8001380:	88b9      	ldrh	r1, [r7, #4]
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	3301      	adds	r3, #1
 8001386:	b29a      	uxth	r2, r3
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	3301      	adds	r3, #1
 800138c:	b29b      	uxth	r3, r3
 800138e:	f7ff ff91 	bl	80012b4 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <drawPixel+0x98>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <drawPixel+0x9c>)
 8001398:	8811      	ldrh	r1, [r2, #0]
 800139a:	2201      	movs	r2, #1
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fc1f 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <drawPixel+0xa0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <drawPixel+0xa4>)
 80013a8:	8811      	ldrh	r1, [r2, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fc17 	bl	8002be0 <HAL_GPIO_WritePin>

	write16BitColor(color);
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fb79 	bl	8001aac <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <drawPixel+0xa0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <drawPixel+0xa4>)
 80013c0:	8811      	ldrh	r1, [r2, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 fc0b 	bl	8002be0 <HAL_GPIO_WritePin>
 80013ca:	e000      	b.n	80013ce <drawPixel+0x8a>
		return;
 80013cc:	bf00      	nop

}
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200002f2 	.word	0x200002f2
 80013d8:	200002f4 	.word	0x200002f4
 80013dc:	200002ec 	.word	0x200002ec
 80013e0:	200002f0 	.word	0x200002f0
 80013e4:	200002e4 	.word	0x200002e4
 80013e8:	200002e8 	.word	0x200002e8

080013ec <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <fillScreen+0x2c>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <fillScreen+0x30>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b219      	sxth	r1, r3
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	460b      	mov	r3, r1
 8001408:	2100      	movs	r1, #0
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f808 	bl	8001420 <fillRect>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200002f2 	.word	0x200002f2
 800141c:	200002f4 	.word	0x200002f4

08001420 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001424:	b08a      	sub	sp, #40	@ 0x28
 8001426:	af00      	add	r7, sp, #0
 8001428:	4606      	mov	r6, r0
 800142a:	4608      	mov	r0, r1
 800142c:	4611      	mov	r1, r2
 800142e:	461a      	mov	r2, r3
 8001430:	4633      	mov	r3, r6
 8001432:	80fb      	strh	r3, [r7, #6]
 8001434:	4603      	mov	r3, r0
 8001436:	80bb      	strh	r3, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	803b      	strh	r3, [r7, #0]
 8001440:	466b      	mov	r3, sp
 8001442:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8001444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001448:	4a8f      	ldr	r2, [pc, #572]	@ (8001688 <fillRect+0x268>)
 800144a:	8812      	ldrh	r2, [r2, #0]
 800144c:	4293      	cmp	r3, r2
 800144e:	da05      	bge.n	800145c <fillRect+0x3c>
 8001450:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001454:	4a8d      	ldr	r2, [pc, #564]	@ (800168c <fillRect+0x26c>)
 8001456:	8812      	ldrh	r2, [r2, #0]
 8001458:	4293      	cmp	r3, r2
 800145a:	db01      	blt.n	8001460 <fillRect+0x40>
		return;
 800145c:	46d5      	mov	sp, sl
 800145e:	e10f      	b.n	8001680 <fillRect+0x260>
	if ((x + w - 1) >= width)
 8001460:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001468:	4413      	add	r3, r2
 800146a:	4a87      	ldr	r2, [pc, #540]	@ (8001688 <fillRect+0x268>)
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	4293      	cmp	r3, r2
 8001470:	dd05      	ble.n	800147e <fillRect+0x5e>
		w = width - x;
 8001472:	4b85      	ldr	r3, [pc, #532]	@ (8001688 <fillRect+0x268>)
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	b29b      	uxth	r3, r3
 800147c:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 800147e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001482:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001486:	4413      	add	r3, r2
 8001488:	4a80      	ldr	r2, [pc, #512]	@ (800168c <fillRect+0x26c>)
 800148a:	8812      	ldrh	r2, [r2, #0]
 800148c:	4293      	cmp	r3, r2
 800148e:	dd05      	ble.n	800149c <fillRect+0x7c>
		h = height - y;
 8001490:	4b7e      	ldr	r3, [pc, #504]	@ (800168c <fillRect+0x26c>)
 8001492:	881a      	ldrh	r2, [r3, #0]
 8001494:	88bb      	ldrh	r3, [r7, #4]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	b29b      	uxth	r3, r3
 800149a:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 800149c:	88f8      	ldrh	r0, [r7, #6]
 800149e:	88b9      	ldrh	r1, [r7, #4]
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	4413      	add	r3, r2
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b29e      	uxth	r6, r3
 80014ac:	88ba      	ldrh	r2, [r7, #4]
 80014ae:	883b      	ldrh	r3, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3b01      	subs	r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4632      	mov	r2, r6
 80014ba:	f7ff fefb 	bl	80012b4 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 80014be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80014c2:	0adb      	lsrs	r3, r3, #11
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 80014c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80014cc:	115b      	asrs	r3, r3, #5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014d4:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 80014d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 80014e2:	7efa      	ldrb	r2, [r7, #27]
 80014e4:	4613      	mov	r3, r2
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	4a69      	ldr	r2, [pc, #420]	@ (8001690 <fillRect+0x270>)
 80014ec:	fb82 1203 	smull	r1, r2, r2, r3
 80014f0:	441a      	add	r2, r3
 80014f2:	1112      	asrs	r2, r2, #4
 80014f4:	17db      	asrs	r3, r3, #31
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 80014fa:	7eba      	ldrb	r2, [r7, #26]
 80014fc:	4613      	mov	r3, r2
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	4a64      	ldr	r2, [pc, #400]	@ (8001694 <fillRect+0x274>)
 8001504:	fb82 1203 	smull	r1, r2, r2, r3
 8001508:	441a      	add	r2, r3
 800150a:	1152      	asrs	r2, r2, #5
 800150c:	17db      	asrs	r3, r3, #31
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8001512:	7e7a      	ldrb	r2, [r7, #25]
 8001514:	4613      	mov	r3, r2
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	1a9b      	subs	r3, r3, r2
 800151a:	4a5d      	ldr	r2, [pc, #372]	@ (8001690 <fillRect+0x270>)
 800151c:	fb82 1203 	smull	r1, r2, r2, r3
 8001520:	441a      	add	r2, r3
 8001522:	1112      	asrs	r2, r2, #4
 8001524:	17db      	asrs	r3, r3, #31
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 800152a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800152e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001532:	fb03 f202 	mul.w	r2, r3, r2
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001544:	d204      	bcs.n	8001550 <fillRect+0x130>
		cnt = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
		buf_size = n;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	e02f      	b.n	80015b0 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	4a51      	ldr	r2, [pc, #324]	@ (8001698 <fillRect+0x278>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 800155c:	2303      	movs	r3, #3
 800155e:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	4a4e      	ldr	r2, [pc, #312]	@ (800169c <fillRect+0x27c>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0bdb      	lsrs	r3, r3, #15
 800156a:	b2db      	uxtb	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8001570:	7cfb      	ldrb	r3, [r7, #19]
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
 8001574:	e014      	b.n	80015a0 <fillRect+0x180>
			if(n%i == 0){
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157a:	fbb3 f2f2 	udiv	r2, r3, r2
 800157e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001580:	fb01 f202 	mul.w	r2, r1, r2
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d107      	bne.n	800159a <fillRect+0x17a>
				cnt = i;
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	61fb      	str	r3, [r7, #28]
				break;
 8001598:	e00a      	b.n	80015b0 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	3301      	adds	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001698 <fillRect+0x278>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3e2      	bcc.n	8001576 <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 80015b0:	69f9      	ldr	r1, [r7, #28]
 80015b2:	460b      	mov	r3, r1
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	2300      	movs	r3, #0
 80015ba:	4688      	mov	r8, r1
 80015bc:	4699      	mov	r9, r3
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015d2:	2300      	movs	r3, #0
 80015d4:	460c      	mov	r4, r1
 80015d6:	461d      	mov	r5, r3
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	00eb      	lsls	r3, r5, #3
 80015e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015e6:	00e2      	lsls	r2, r4, #3
 80015e8:	1dcb      	adds	r3, r1, #7
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	ebad 0d03 	sub.w	sp, sp, r3
 80015f2:	466b      	mov	r3, sp
 80015f4:	3300      	adds	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80015fc:	e019      	b.n	8001632 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 80015fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	7ef9      	ldrb	r1, [r7, #27]
 800160a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 800160c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	3301      	adds	r3, #1
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	7eb9      	ldrb	r1, [r7, #26]
 800161a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 800161c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	3302      	adds	r3, #2
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	7e79      	ldrb	r1, [r7, #25]
 800162a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	3301      	adds	r3, #1
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4a18      	ldr	r2, [pc, #96]	@ (8001698 <fillRect+0x278>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163e:	429a      	cmp	r2, r3
 8001640:	d3dd      	bcc.n	80015fe <fillRect+0x1de>
	}
	DC_DATA();
 8001642:	2201      	movs	r2, #1
 8001644:	2140      	movs	r1, #64	@ 0x40
 8001646:	4816      	ldr	r0, [pc, #88]	@ (80016a0 <fillRect+0x280>)
 8001648:	f001 faca 	bl	8002be0 <HAL_GPIO_WritePin>
	CS_A();
 800164c:	2200      	movs	r2, #0
 800164e:	2101      	movs	r1, #1
 8001650:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <fillRect+0x280>)
 8001652:	f001 fac5 	bl	8002be0 <HAL_GPIO_WritePin>
		while(cnt>0)
 8001656:	e00a      	b.n	800166e <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	b29a      	uxth	r2, r3
 800165c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	4810      	ldr	r0, [pc, #64]	@ (80016a4 <fillRect+0x284>)
 8001664:	f003 fdff 	bl	8005266 <HAL_SPI_Transmit>

			cnt -= 1;
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	3b01      	subs	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f1      	bne.n	8001658 <fillRect+0x238>
		}
		CS_D();
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <fillRect+0x280>)
 800167a:	f001 fab1 	bl	8002be0 <HAL_GPIO_WritePin>
 800167e:	46d5      	mov	sp, sl

}
 8001680:	3728      	adds	r7, #40	@ 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001688:	200002f2 	.word	0x200002f2
 800168c:	200002f4 	.word	0x200002f4
 8001690:	84210843 	.word	0x84210843
 8001694:	82082083 	.word	0x82082083
 8001698:	aaaaaaab 	.word	0xaaaaaaab
 800169c:	80008001 	.word	0x80008001
 80016a0:	48000c00 	.word	0x48000c00
 80016a4:	2000034c 	.word	0x2000034c

080016a8 <setRotation>:


void setRotation(uint8_t r)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 80016b2:	2036      	movs	r0, #54	@ 0x36
 80016b4:	f7ff fc98 	bl	8000fe8 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d83a      	bhi.n	800173c <setRotation+0x94>
 80016c6:	a201      	add	r2, pc, #4	@ (adr r2, 80016cc <setRotation+0x24>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	080016f5 	.word	0x080016f5
 80016d4:	0800170d 	.word	0x0800170d
 80016d8:	08001725 	.word	0x08001725
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 80016dc:	2048      	movs	r0, #72	@ 0x48
 80016de:	f7ff fca9 	bl	8001034 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <setRotation+0x9c>)
 80016e4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016e8:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <setRotation+0xa0>)
 80016ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80016f0:	801a      	strh	r2, [r3, #0]
		break;
 80016f2:	e023      	b.n	800173c <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 80016f4:	2028      	movs	r0, #40	@ 0x28
 80016f6:	f7ff fc9d 	bl	8001034 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <setRotation+0x9c>)
 80016fc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001700:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <setRotation+0xa0>)
 8001704:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001708:	801a      	strh	r2, [r3, #0]
		break;
 800170a:	e017      	b.n	800173c <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 800170c:	2088      	movs	r0, #136	@ 0x88
 800170e:	f7ff fc91 	bl	8001034 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <setRotation+0x9c>)
 8001714:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001718:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <setRotation+0xa0>)
 800171c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001720:	801a      	strh	r2, [r3, #0]
		break;
 8001722:	e00b      	b.n	800173c <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001724:	20e8      	movs	r0, #232	@ 0xe8
 8001726:	f7ff fc85 	bl	8001034 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <setRotation+0x9c>)
 800172c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001730:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8001732:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <setRotation+0xa0>)
 8001734:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001738:	801a      	strh	r2, [r3, #0]
		break;
 800173a:	bf00      	nop
	}

}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200002f2 	.word	0x200002f2
 8001748:	200002f4 	.word	0x200002f4

0800174c <drawChar>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

//11. Text printing functions
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 800174c:	b5b0      	push	{r4, r5, r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af02      	add	r7, sp, #8
 8001752:	4604      	mov	r4, r0
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4623      	mov	r3, r4
 800175c:	80fb      	strh	r3, [r7, #6]
 800175e:	4603      	mov	r3, r0
 8001760:	80bb      	strh	r3, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	70fb      	strb	r3, [r7, #3]
 8001766:	4613      	mov	r3, r2
 8001768:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 800176a:	4bac      	ldr	r3, [pc, #688]	@ (8001a1c <drawChar+0x2d0>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d003      	beq.n	800177a <drawChar+0x2e>
 8001772:	4baa      	ldr	r3, [pc, #680]	@ (8001a1c <drawChar+0x2d0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d120      	bne.n	80017bc <drawChar+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 800177a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001782:	f280 8144 	bge.w	8001a0e <drawChar+0x2c2>
 8001786:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800178a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800178e:	f280 813e 	bge.w	8001a0e <drawChar+0x2c2>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8001792:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001796:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f340 8132 	ble.w	8001a0e <drawChar+0x2c2>
     ((y + 8 * size - 1) < 0))   // Clip top
 80017aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc22      	bgt.n	8001800 <drawChar+0xb4>
    return;
 80017ba:	e128      	b.n	8001a0e <drawChar+0x2c2>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 80017bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80017c4:	f280 8125 	bge.w	8001a12 <drawChar+0x2c6>
 80017c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017cc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80017d0:	f280 811f 	bge.w	8001a12 <drawChar+0x2c6>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 80017d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017d8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f340 8113 	ble.w	8001a12 <drawChar+0x2c6>
     ((x + 8 * size - 1) < 0))   // Clip top
 80017ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f340 810a 	ble.w	8001a12 <drawChar+0x2c6>
 80017fe:	e000      	b.n	8001802 <drawChar+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8001800:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001802:	4b87      	ldr	r3, [pc, #540]	@ (8001a20 <drawChar+0x2d4>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	f083 0301 	eor.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <drawChar+0xd0>
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2baf      	cmp	r3, #175	@ 0xaf
 8001814:	d902      	bls.n	800181c <drawChar+0xd0>
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	3301      	adds	r3, #1
 800181a:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e0ef      	b.n	8001a02 <drawChar+0x2b6>
    uint8_t line;
    if (i == 5)
 8001822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d102      	bne.n	8001830 <drawChar+0xe4>
      line = 0x0;
 800182a:	2300      	movs	r3, #0
 800182c:	73bb      	strb	r3, [r7, #14]
 800182e:	e00b      	b.n	8001848 <drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4413      	add	r3, r2
 8001840:	4a78      	ldr	r2, [pc, #480]	@ (8001a24 <drawChar+0x2d8>)
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001848:	2300      	movs	r3, #0
 800184a:	737b      	strb	r3, [r7, #13]
 800184c:	e0ce      	b.n	80019ec <drawChar+0x2a0>
      if (line & 0x1) {
 800184e:	7bbb      	ldrb	r3, [r7, #14]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d05e      	beq.n	8001916 <drawChar+0x1ca>
        if (size == 1) // default size
 8001858:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800185c:	2b01      	cmp	r3, #1
 800185e:	d112      	bne.n	8001886 <drawChar+0x13a>
        	drawPixel(x+i, y+j, color);
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	b29a      	uxth	r2, r3
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4413      	add	r3, r2
 800186a:	b29b      	uxth	r3, r3
 800186c:	b218      	sxth	r0, r3
 800186e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001872:	b29a      	uxth	r2, r3
 8001874:	88bb      	ldrh	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	b29b      	uxth	r3, r3
 800187a:	b21b      	sxth	r3, r3
 800187c:	883a      	ldrh	r2, [r7, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff fd60 	bl	8001344 <drawPixel>
 8001884:	e0a9      	b.n	80019da <drawChar+0x28e>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	b29a      	uxth	r2, r3
 800188c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001890:	b29b      	uxth	r3, r3
 8001892:	fb12 f303 	smulbb	r3, r2, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4413      	add	r3, r2
 800189c:	b29b      	uxth	r3, r3
 800189e:	b218      	sxth	r0, r3
 80018a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	fb12 f303 	smulbb	r3, r2, r3
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	b21c      	sxth	r4, r3
 80018ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018be:	b29a      	uxth	r2, r3
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	4413      	add	r3, r2
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	b299      	uxth	r1, r3
 80018cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	fb11 f303 	smulbb	r3, r1, r3
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b21d      	sxth	r5, r3
 80018de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	88bb      	ldrh	r3, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ee:	b299      	uxth	r1, r3
 80018f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	fb11 f303 	smulbb	r3, r1, r3
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3301      	adds	r3, #1
 8001902:	b29b      	uxth	r3, r3
 8001904:	b21a      	sxth	r2, r3
 8001906:	883b      	ldrh	r3, [r7, #0]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	4613      	mov	r3, r2
 800190c:	462a      	mov	r2, r5
 800190e:	4621      	mov	r1, r4
 8001910:	f7ff fd86 	bl	8001420 <fillRect>
 8001914:	e061      	b.n	80019da <drawChar+0x28e>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }
      } else if (bg != color) {
 8001916:	8c3a      	ldrh	r2, [r7, #32]
 8001918:	883b      	ldrh	r3, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d05d      	beq.n	80019da <drawChar+0x28e>
        if (size == 1) // default size
 800191e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001922:	2b01      	cmp	r3, #1
 8001924:	d112      	bne.n	800194c <drawChar+0x200>
        	drawPixel(x+i, y+j, bg);
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	b29a      	uxth	r2, r3
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	4413      	add	r3, r2
 8001930:	b29b      	uxth	r3, r3
 8001932:	b218      	sxth	r0, r3
 8001934:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001938:	b29a      	uxth	r2, r3
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	b29b      	uxth	r3, r3
 8001940:	b21b      	sxth	r3, r3
 8001942:	8c3a      	ldrh	r2, [r7, #32]
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff fcfd 	bl	8001344 <drawPixel>
 800194a:	e046      	b.n	80019da <drawChar+0x28e>
        else {  // big size
        	fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001950:	b29a      	uxth	r2, r3
 8001952:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001956:	b29b      	uxth	r3, r3
 8001958:	fb12 f303 	smulbb	r3, r2, r3
 800195c:	b29a      	uxth	r2, r3
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	4413      	add	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	b218      	sxth	r0, r3
 8001966:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800196a:	b29a      	uxth	r2, r3
 800196c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001970:	b29b      	uxth	r3, r3
 8001972:	fb12 f303 	smulbb	r3, r2, r3
 8001976:	b29a      	uxth	r2, r3
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	b21c      	sxth	r4, r3
 8001980:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001984:	b29a      	uxth	r2, r3
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4413      	add	r3, r2
 800198a:	b29a      	uxth	r2, r3
 800198c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001990:	b299      	uxth	r1, r3
 8001992:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001996:	b29b      	uxth	r3, r3
 8001998:	fb11 f303 	smulbb	r3, r1, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	4413      	add	r3, r2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b21d      	sxth	r5, r3
 80019a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019b4:	b299      	uxth	r1, r3
 80019b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	fb11 f303 	smulbb	r3, r1, r3
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3301      	adds	r3, #1
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	8c3b      	ldrh	r3, [r7, #32]
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4613      	mov	r3, r2
 80019d2:	462a      	mov	r2, r5
 80019d4:	4621      	mov	r1, r4
 80019d6:	f7ff fd23 	bl	8001420 <fillRect>
        }
      }
      line >>= 1;
 80019da:	7bbb      	ldrb	r3, [r7, #14]
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80019e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	737b      	strb	r3, [r7, #13]
 80019ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019f0:	2b07      	cmp	r3, #7
 80019f2:	f77f af2c 	ble.w	800184e <drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	3301      	adds	r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	f77f af0b 	ble.w	8001822 <drawChar+0xd6>
 8001a0c:	e002      	b.n	8001a14 <drawChar+0x2c8>
    return;
 8001a0e:	bf00      	nop
 8001a10:	e000      	b.n	8001a14 <drawChar+0x2c8>
    return;
 8001a12:	bf00      	nop
    }
  }
}
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	200002e0 	.word	0x200002e0
 8001a24:	08006fd0 	.word	0x08006fd0

08001a28 <ILI9488_printText>:
    }
  }
}

void ILI9488_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	817b      	strh	r3, [r7, #10]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	813b      	strh	r3, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001a42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	0052      	lsls	r2, r2, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	82fb      	strh	r3, [r7, #22]
 8001a58:	e01a      	b.n	8001a90 <ILI9488_printText+0x68>
	{
		drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001a5a:	8abb      	ldrh	r3, [r7, #20]
 8001a5c:	8afa      	ldrh	r2, [r7, #22]
 8001a5e:	fb12 f303 	smulbb	r3, r2, r3
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	897b      	ldrh	r3, [r7, #10]
 8001a66:	4413      	add	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b218      	sxth	r0, r3
 8001a6c:	8afb      	ldrh	r3, [r7, #22]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	88fc      	ldrh	r4, [r7, #6]
 8001a76:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001a7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4623      	mov	r3, r4
 8001a86:	f7ff fe61 	bl	800174c <drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a8a:	8afb      	ldrh	r3, [r7, #22]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	82fb      	strh	r3, [r7, #22]
 8001a90:	8afb      	ldrh	r3, [r7, #22]
 8001a92:	2b27      	cmp	r3, #39	@ 0x27
 8001a94:	d805      	bhi.n	8001aa2 <ILI9488_printText+0x7a>
 8001a96:	8afb      	ldrh	r3, [r7, #22]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1db      	bne.n	8001a5a <ILI9488_printText+0x32>
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd90      	pop	{r4, r7, pc}
	...

08001aac <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	0adb      	lsrs	r3, r3, #11
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	115b      	asrs	r3, r3, #5
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac8:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	4a17      	ldr	r2, [pc, #92]	@ (8001b3c <write16BitColor+0x90>)
 8001ade:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae2:	441a      	add	r2, r3
 8001ae4:	1112      	asrs	r2, r2, #4
 8001ae6:	17db      	asrs	r3, r3, #31
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8001aec:	7bba      	ldrb	r2, [r7, #14]
 8001aee:	4613      	mov	r3, r2
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <write16BitColor+0x94>)
 8001af6:	fb82 1203 	smull	r1, r2, r2, r3
 8001afa:	441a      	add	r2, r3
 8001afc:	1152      	asrs	r2, r2, #5
 8001afe:	17db      	asrs	r3, r3, #31
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8001b04:	7b7a      	ldrb	r2, [r7, #13]
 8001b06:	4613      	mov	r3, r2
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b3c <write16BitColor+0x90>)
 8001b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b12:	441a      	add	r2, r3
 8001b14:	1112      	asrs	r2, r2, #4
 8001b16:	17db      	asrs	r3, r3, #31
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	723b      	strb	r3, [r7, #8]
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	727b      	strb	r3, [r7, #9]
 8001b24:	7b7b      	ldrb	r3, [r7, #13]
 8001b26:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	2103      	movs	r1, #3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff faa6 	bl	8001080 <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	84210843 	.word	0x84210843
 8001b40:	82082083 	.word	0x82082083

08001b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b4a:	f000 fd38 	bl	80025be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b4e:	f000 f85d 	bl	8001c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b52:	f000 fa01 	bl	8001f58 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001b56:	f000 f8eb 	bl	8001d30 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001b5a:	f000 f927 	bl	8001dac <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001b5e:	f000 f963 	bl	8001e28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b62:	f000 f9ad 	bl	8001ec0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001b66:	f000 f8a3 	bl	8001cb0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILI9488_Init();
 8001b6a:	f7ff fabf 	bl	80010ec <ILI9488_Init>
  XPT2046_Init();
 8001b6e:	f000 fcd3 	bl	8002518 <XPT2046_Init>

  HAL_Delay(250);
 8001b72:	20fa      	movs	r0, #250	@ 0xfa
 8001b74:	f000 fd98 	bl	80026a8 <HAL_Delay>
  setRotation(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff fd95 	bl	80016a8 <setRotation>
  fillScreen(ILI9488_WHITE);
 8001b7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b82:	f7ff fc33 	bl	80013ec <fillScreen>
  DS1307_Init(&hi2c1);
 8001b86:	481d      	ldr	r0, [pc, #116]	@ (8001bfc <main+0xb8>)
 8001b88:	f7ff f864 	bl	8000c54 <DS1307_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	DS1307_Init(&hi2c1);
 8001b8c:	481b      	ldr	r0, [pc, #108]	@ (8001bfc <main+0xb8>)
 8001b8e:	f7ff f861 	bl	8000c54 <DS1307_Init>
	/* To test leap year correction. */
	DS1307_SetDate(14);
 8001b92:	200e      	movs	r0, #14
 8001b94:	f7ff f95d 	bl	8000e52 <DS1307_SetDate>
	DS1307_SetMonth(4);
 8001b98:	2004      	movs	r0, #4
 8001b9a:	f7ff f96c 	bl	8000e76 <DS1307_SetMonth>
	DS1307_SetYear(2024);
 8001b9e:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 8001ba2:	f7ff f97b 	bl	8000e9c <DS1307_SetYear>
	DS1307_SetDayOfWeek(2);
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f7ff f941 	bl	8000e2e <DS1307_SetDayOfWeek>
	DS1307_SetHour(22);
 8001bac:	2016      	movs	r0, #22
 8001bae:	f7ff f99f 	bl	8000ef0 <DS1307_SetHour>
	DS1307_SetMinute(13);
 8001bb2:	200d      	movs	r0, #13
 8001bb4:	f7ff f9b1 	bl	8000f1a <DS1307_SetMinute>
	DS1307_SetSecond(30);
 8001bb8:	201e      	movs	r0, #30
 8001bba:	f7ff f9c0 	bl	8000f3e <DS1307_SetSecond>

	HAL_Delay(1000);
 8001bbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bc2:	f000 fd71 	bl	80026a8 <HAL_Delay>

	//Monday at 11:00.
	addNewEntry(0, "WEEWOO2", 1, 11, 00);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	230b      	movs	r3, #11
 8001bcc:	2201      	movs	r2, #1
 8001bce:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <main+0xbc>)
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7fe fcdd 	bl	8000590 <addNewEntry>
	//Friday at 5:30.
	addNewEntry(0, "WEEWOO3", 6, 5, 30);
 8001bd6:	231e      	movs	r3, #30
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2305      	movs	r3, #5
 8001bdc:	2206      	movs	r2, #6
 8001bde:	4909      	ldr	r1, [pc, #36]	@ (8001c04 <main+0xc0>)
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7fe fcd5 	bl	8000590 <addNewEntry>
	//Sunday at 12:00.
	addNewEntry(0, "WEEWOO1", 0, 12, 00);
 8001be6:	2300      	movs	r3, #0
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	230c      	movs	r3, #12
 8001bec:	2200      	movs	r2, #0
 8001bee:	4906      	ldr	r1, [pc, #24]	@ (8001c08 <main+0xc4>)
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7fe fccd 	bl	8000590 <addNewEntry>


  while (1)
  {

	 LockScreen();
 8001bf6:	f7fe fe57 	bl	80008a8 <LockScreen>
 8001bfa:	e7fc      	b.n	8001bf6 <main+0xb2>
 8001bfc:	200002f8 	.word	0x200002f8
 8001c00:	08006fb8 	.word	0x08006fb8
 8001c04:	08006fc0 	.word	0x08006fc0
 8001c08:	08006fc8 	.word	0x08006fc8

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b096      	sub	sp, #88	@ 0x58
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	2244      	movs	r2, #68	@ 0x44
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 fc84 	bl	8006528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	463b      	mov	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f001 fde2 	bl	80037f8 <HAL_PWREx_ControlVoltageScaling>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001c3a:	f000 fa33 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c3e:	2310      	movs	r3, #16
 8001c40:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c42:	2301      	movs	r3, #1
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c4a:	2360      	movs	r3, #96	@ 0x60
 8001c4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c52:	2301      	movs	r3, #1
 8001c54:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001c5a:	233c      	movs	r3, #60	@ 0x3c
 8001c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c62:	2302      	movs	r3, #2
 8001c64:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c66:	2302      	movs	r3, #2
 8001c68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 fe66 	bl	8003940 <HAL_RCC_OscConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c7a:	f000 fa13 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7e:	230f      	movs	r3, #15
 8001c80:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c82:	2303      	movs	r3, #3
 8001c84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c92:	463b      	mov	r3, r7
 8001c94:	2105      	movs	r1, #5
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fa6c 	bl	8004174 <HAL_RCC_ClockConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ca2:	f000 f9ff 	bl	80020a4 <Error_Handler>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3758      	adds	r7, #88	@ 0x58
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d28 <MX_I2C1_Init+0x78>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <MX_I2C1_Init+0x7c>)
 8001cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc6:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cea:	480e      	ldr	r0, [pc, #56]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cec:	f000 ff90 	bl	8002c10 <HAL_I2C_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cf6:	f000 f9d5 	bl	80020a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4809      	ldr	r0, [pc, #36]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cfe:	f001 fcc3 	bl	8003688 <HAL_I2CEx_ConfigAnalogFilter>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d08:	f000 f9cc 	bl	80020a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001d10:	f001 fd05 	bl	800371e <HAL_I2CEx_ConfigDigitalFilter>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d1a:	f000 f9c3 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200002f8 	.word	0x200002f8
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	307075b1 	.word	0x307075b1

08001d30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d36:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <MX_SPI2_Init+0x78>)
 8001d38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d4a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d4e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d56:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d62:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d7e:	2207      	movs	r2, #7
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d90:	f003 f9c6 	bl	8005120 <HAL_SPI_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d9a:	f000 f983 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000034c 	.word	0x2000034c
 8001da8:	40003800 	.word	0x40003800

08001dac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001db2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <MX_SPI3_Init+0x78>)
 8001db4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001db8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001dbe:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc4:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dc6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001dca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd2:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dde:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001de2:	2218      	movs	r2, #24
 8001de4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001e06:	2208      	movs	r2, #8
 8001e08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001e0c:	f003 f988 	bl	8005120 <HAL_SPI_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e16:	f000 f945 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200003b0 	.word	0x200003b0
 8001e24:	40003c00 	.word	0x40003c00

08001e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e2c:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e2e:	4a23      	ldr	r2, [pc, #140]	@ (8001ebc <MX_USART2_UART_Init+0x94>)
 8001e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e32:	4b21      	ldr	r3, [pc, #132]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e40:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e46:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e64:	4b14      	ldr	r3, [pc, #80]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e70:	4811      	ldr	r0, [pc, #68]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e72:	f003 fcd1 	bl	8005818 <HAL_UART_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e7c:	f000 f912 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e80:	2100      	movs	r1, #0
 8001e82:	480d      	ldr	r0, [pc, #52]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e84:	f004 fa66 	bl	8006354 <HAL_UARTEx_SetTxFifoThreshold>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e8e:	f000 f909 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e92:	2100      	movs	r1, #0
 8001e94:	4808      	ldr	r0, [pc, #32]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001e96:	f004 fa9b 	bl	80063d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ea0:	f000 f900 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	@ (8001eb8 <MX_USART2_UART_Init+0x90>)
 8001ea6:	f004 fa1c 	bl	80062e2 <HAL_UARTEx_DisableFifoMode>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001eb0:	f000 f8f8 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000414 	.word	0x20000414
 8001ebc:	40004400 	.word	0x40004400

08001ec0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ec4:	4b22      	ldr	r3, [pc, #136]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ec6:	4a23      	ldr	r2, [pc, #140]	@ (8001f54 <MX_USART3_UART_Init+0x94>)
 8001ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eca:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ecc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ede:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eea:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f02:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f08:	4811      	ldr	r0, [pc, #68]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f0a:	f003 fc85 	bl	8005818 <HAL_UART_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f14:	f000 f8c6 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	480d      	ldr	r0, [pc, #52]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f1c:	f004 fa1a 	bl	8006354 <HAL_UARTEx_SetTxFifoThreshold>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f26:	f000 f8bd 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4808      	ldr	r0, [pc, #32]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f2e:	f004 fa4f 	bl	80063d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f38:	f000 f8b4 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	@ (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f3e:	f004 f9d0 	bl	80062e2 <HAL_UARTEx_DisableFifoMode>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f48:	f000 f8ac 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200004a8 	.word	0x200004a8
 8001f54:	40004800 	.word	0x40004800

08001f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f6e:	4b48      	ldr	r3, [pc, #288]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	4a47      	ldr	r2, [pc, #284]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001f74:	f043 0320 	orr.w	r3, r3, #32
 8001f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7a:	4b45      	ldr	r3, [pc, #276]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b42      	ldr	r3, [pc, #264]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8a:	4a41      	ldr	r2, [pc, #260]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f92:	4b3f      	ldr	r3, [pc, #252]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001faa:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	4b36      	ldr	r3, [pc, #216]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	4a35      	ldr	r2, [pc, #212]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc2:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fce:	4b30      	ldr	r3, [pc, #192]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fda:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <MX_GPIO_Init+0x138>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Actuator1_IN1_Pin|Actuaor1_IN2_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2128      	movs	r1, #40	@ 0x28
 8001fea:	482a      	ldr	r0, [pc, #168]	@ (8002094 <MX_GPIO_Init+0x13c>)
 8001fec:	f000 fdf8 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f240 2103 	movw	r1, #515	@ 0x203
 8001ff6:	4828      	ldr	r0, [pc, #160]	@ (8002098 <MX_GPIO_Init+0x140>)
 8001ff8:	f000 fdf2 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002002:	4826      	ldr	r0, [pc, #152]	@ (800209c <MX_GPIO_Init+0x144>)
 8002004:	f000 fdec 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	21c1      	movs	r1, #193	@ 0xc1
 800200c:	4824      	ldr	r0, [pc, #144]	@ (80020a0 <MX_GPIO_Init+0x148>)
 800200e:	f000 fde7 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Actuator1_IN1_Pin Actuaor1_IN2_Pin */
  GPIO_InitStruct.Pin = Actuator1_IN1_Pin|Actuaor1_IN2_Pin;
 8002012:	2328      	movs	r3, #40	@ 0x28
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	481a      	ldr	r0, [pc, #104]	@ (8002094 <MX_GPIO_Init+0x13c>)
 800202a:	f000 fc47 	bl	80028bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper_Step_Pin Stepper_Dir_Pin Actuator_1_EN_Pin */
  GPIO_InitStruct.Pin = Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin;
 800202e:	f240 2303 	movw	r3, #515	@ 0x203
 8002032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4814      	ldr	r0, [pc, #80]	@ (8002098 <MX_GPIO_Init+0x140>)
 8002048:	f000 fc38 	bl	80028bc <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800204c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	480d      	ldr	r0, [pc, #52]	@ (800209c <MX_GPIO_Init+0x144>)
 8002066:	f000 fc29 	bl	80028bc <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 800206a:	23c1      	movs	r3, #193	@ 0xc1
 800206c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4807      	ldr	r0, [pc, #28]	@ (80020a0 <MX_GPIO_Init+0x148>)
 8002082:	f000 fc1b 	bl	80028bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	@ 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	48001400 	.word	0x48001400
 8002098:	48000800 	.word	0x48000800
 800209c:	48000400 	.word	0x48000400
 80020a0:	48000c00 	.word	0x48000c00

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <Error_Handler+0x8>

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <HAL_MspInit+0x44>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	4a0e      	ldr	r2, [pc, #56]	@ (80020f4 <HAL_MspInit+0x44>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020c2:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <HAL_MspInit+0x44>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_MspInit+0x44>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <HAL_MspInit+0x44>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_MspInit+0x44>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b0ae      	sub	sp, #184	@ 0xb8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	2294      	movs	r2, #148	@ 0x94
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f004 fa05 	bl	8006528 <memset>
  if(hi2c->Instance==I2C1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a21      	ldr	r2, [pc, #132]	@ (80021a8 <HAL_I2C_MspInit+0xb0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d13b      	bne.n	80021a0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002128:	2340      	movs	r3, #64	@ 0x40
 800212a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800212c:	2300      	movs	r3, #0
 800212e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4618      	mov	r0, r3
 8002136:	f002 fadb 	bl	80046f0 <HAL_RCCEx_PeriphCLKConfig>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002140:	f7ff ffb0 	bl	80020a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_I2C_MspInit+0xb4>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	4a18      	ldr	r2, [pc, #96]	@ (80021ac <HAL_I2C_MspInit+0xb4>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002150:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <HAL_I2C_MspInit+0xb4>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800215c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002160:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002164:	2312      	movs	r3, #18
 8002166:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002176:	2304      	movs	r3, #4
 8002178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002180:	4619      	mov	r1, r3
 8002182:	480b      	ldr	r0, [pc, #44]	@ (80021b0 <HAL_I2C_MspInit+0xb8>)
 8002184:	f000 fb9a 	bl	80028bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <HAL_I2C_MspInit+0xb4>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218c:	4a07      	ldr	r2, [pc, #28]	@ (80021ac <HAL_I2C_MspInit+0xb4>)
 800218e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002192:	6593      	str	r3, [r2, #88]	@ 0x58
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <HAL_I2C_MspInit+0xb4>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	37b8      	adds	r7, #184	@ 0xb8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40005400 	.word	0x40005400
 80021ac:	40021000 	.word	0x40021000
 80021b0:	48000400 	.word	0x48000400

080021b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	@ 0x30
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2e      	ldr	r2, [pc, #184]	@ (800228c <HAL_SPI_MspInit+0xd8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d128      	bne.n	8002228 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	4a2d      	ldr	r2, [pc, #180]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ee:	4b28      	ldr	r3, [pc, #160]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	4a27      	ldr	r2, [pc, #156]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fa:	4b25      	ldr	r3, [pc, #148]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002206:	231a      	movs	r3, #26
 8002208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002216:	2305      	movs	r3, #5
 8002218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	4619      	mov	r1, r3
 8002220:	481c      	ldr	r0, [pc, #112]	@ (8002294 <HAL_SPI_MspInit+0xe0>)
 8002222:	f000 fb4b 	bl	80028bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002226:	e02c      	b.n	8002282 <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1a      	ldr	r2, [pc, #104]	@ (8002298 <HAL_SPI_MspInit+0xe4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d127      	bne.n	8002282 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002232:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002236:	4a16      	ldr	r2, [pc, #88]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 8002238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800223c:	6593      	str	r3, [r2, #88]	@ 0x58
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224e:	4a10      	ldr	r2, [pc, #64]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002256:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <HAL_SPI_MspInit+0xdc>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002262:	2338      	movs	r3, #56	@ 0x38
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226e:	2303      	movs	r3, #3
 8002270:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002272:	2306      	movs	r3, #6
 8002274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	4807      	ldr	r0, [pc, #28]	@ (800229c <HAL_SPI_MspInit+0xe8>)
 800227e:	f000 fb1d 	bl	80028bc <HAL_GPIO_Init>
}
 8002282:	bf00      	nop
 8002284:	3730      	adds	r7, #48	@ 0x30
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40003800 	.word	0x40003800
 8002290:	40021000 	.word	0x40021000
 8002294:	48000c00 	.word	0x48000c00
 8002298:	40003c00 	.word	0x40003c00
 800229c:	48000400 	.word	0x48000400

080022a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0b2      	sub	sp, #200	@ 0xc8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022b8:	f107 0320 	add.w	r3, r7, #32
 80022bc:	2294      	movs	r2, #148	@ 0x94
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 f931 	bl	8006528 <memset>
  if(huart->Instance==USART2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a53      	ldr	r2, [pc, #332]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d15d      	bne.n	800238c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022d0:	2302      	movs	r3, #2
 80022d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 fa07 	bl	80046f0 <HAL_RCCEx_PeriphCLKConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022e8:	f7ff fedc 	bl	80020a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ec:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <HAL_UART_MspInit+0x17c>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f0:	4a4a      	ldr	r2, [pc, #296]	@ (800241c <HAL_UART_MspInit+0x17c>)
 80022f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f8:	4b48      	ldr	r3, [pc, #288]	@ (800241c <HAL_UART_MspInit+0x17c>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	4b45      	ldr	r3, [pc, #276]	@ (800241c <HAL_UART_MspInit+0x17c>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	4a44      	ldr	r2, [pc, #272]	@ (800241c <HAL_UART_MspInit+0x17c>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002310:	4b42      	ldr	r3, [pc, #264]	@ (800241c <HAL_UART_MspInit+0x17c>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231c:	4b3f      	ldr	r3, [pc, #252]	@ (800241c <HAL_UART_MspInit+0x17c>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002320:	4a3e      	ldr	r2, [pc, #248]	@ (800241c <HAL_UART_MspInit+0x17c>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002328:	4b3c      	ldr	r3, [pc, #240]	@ (800241c <HAL_UART_MspInit+0x17c>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002334:	2308      	movs	r3, #8
 8002336:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800234c:	2307      	movs	r3, #7
 800234e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002356:	4619      	mov	r1, r3
 8002358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235c:	f000 faae 	bl	80028bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002360:	2320      	movs	r3, #32
 8002362:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002378:	2307      	movs	r3, #7
 800237a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002382:	4619      	mov	r1, r3
 8002384:	4826      	ldr	r0, [pc, #152]	@ (8002420 <HAL_UART_MspInit+0x180>)
 8002386:	f000 fa99 	bl	80028bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800238a:	e040      	b.n	800240e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a24      	ldr	r2, [pc, #144]	@ (8002424 <HAL_UART_MspInit+0x184>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d13b      	bne.n	800240e <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002396:	2304      	movs	r3, #4
 8002398:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800239a:	2300      	movs	r3, #0
 800239c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239e:	f107 0320 	add.w	r3, r7, #32
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 f9a4 	bl	80046f0 <HAL_RCCEx_PeriphCLKConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_UART_MspInit+0x112>
      Error_Handler();
 80023ae:	f7ff fe79 	bl	80020a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023b2:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <HAL_UART_MspInit+0x17c>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b6:	4a19      	ldr	r2, [pc, #100]	@ (800241c <HAL_UART_MspInit+0x17c>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80023be:	4b17      	ldr	r3, [pc, #92]	@ (800241c <HAL_UART_MspInit+0x17c>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ca:	4b14      	ldr	r3, [pc, #80]	@ (800241c <HAL_UART_MspInit+0x17c>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ce:	4a13      	ldr	r2, [pc, #76]	@ (800241c <HAL_UART_MspInit+0x17c>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <HAL_UART_MspInit+0x17c>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023fc:	2307      	movs	r3, #7
 80023fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002402:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002406:	4619      	mov	r1, r3
 8002408:	4805      	ldr	r0, [pc, #20]	@ (8002420 <HAL_UART_MspInit+0x180>)
 800240a:	f000 fa57 	bl	80028bc <HAL_GPIO_Init>
}
 800240e:	bf00      	nop
 8002410:	37c8      	adds	r7, #200	@ 0xc8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40004400 	.word	0x40004400
 800241c:	40021000 	.word	0x40021000
 8002420:	48000c00 	.word	0x48000c00
 8002424:	40004800 	.word	0x40004800

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <NMI_Handler+0x4>

08002430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <HardFault_Handler+0x4>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <MemManage_Handler+0x4>

08002440 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <BusFault_Handler+0x4>

08002448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <UsageFault_Handler+0x4>

08002450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247e:	f000 f8f3 	bl	8002668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002490:	4a14      	ldr	r2, [pc, #80]	@ (80024e4 <_sbrk+0x5c>)
 8002492:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <_sbrk+0x60>)
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <_sbrk+0x64>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	@ (80024f0 <_sbrk+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024aa:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b8:	f004 f83e 	bl	8006538 <__errno>
 80024bc:	4603      	mov	r3, r0
 80024be:	220c      	movs	r2, #12
 80024c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024c6:	e009      	b.n	80024dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	4a05      	ldr	r2, [pc, #20]	@ (80024ec <_sbrk+0x64>)
 80024d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200a0000 	.word	0x200a0000
 80024e8:	00000400 	.word	0x00000400
 80024ec:	2000053c 	.word	0x2000053c
 80024f0:	20000690 	.word	0x20000690

080024f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <SystemInit+0x20>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <SystemInit+0x20>)
 8002500:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002504:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <XPT2046_Init>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void XPT2046_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002522:	4810      	ldr	r0, [pc, #64]	@ (8002564 <XPT2046_Init+0x4c>)
 8002524:	f000 fb5c 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8002528:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252c:	2201      	movs	r2, #1
 800252e:	2180      	movs	r1, #128	@ 0x80
 8002530:	480d      	ldr	r0, [pc, #52]	@ (8002568 <XPT2046_Init+0x50>)
 8002532:	f002 fe98 	bl	8005266 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8002536:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800253a:	2201      	movs	r2, #1
 800253c:	2100      	movs	r1, #0
 800253e:	480a      	ldr	r0, [pc, #40]	@ (8002568 <XPT2046_Init+0x50>)
 8002540:	f002 fe91 	bl	8005266 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8002544:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002548:	2201      	movs	r2, #1
 800254a:	2100      	movs	r1, #0
 800254c:	4806      	ldr	r0, [pc, #24]	@ (8002568 <XPT2046_Init+0x50>)
 800254e:	f002 fe8a 	bl	8005266 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002552:	2201      	movs	r2, #1
 8002554:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <XPT2046_Init+0x4c>)
 800255a:	f000 fb41 	bl	8002be0 <HAL_GPIO_WritePin>
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	48000400 	.word	0x48000400
 8002568:	200003b0 	.word	0x200003b0

0800256c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800256c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002570:	f7ff ffc0 	bl	80024f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002574:	480c      	ldr	r0, [pc, #48]	@ (80025a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002576:	490d      	ldr	r1, [pc, #52]	@ (80025ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002578:	4a0d      	ldr	r2, [pc, #52]	@ (80025b0 <LoopForever+0xe>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800257c:	e002      	b.n	8002584 <LoopCopyDataInit>

0800257e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002582:	3304      	adds	r3, #4

08002584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002588:	d3f9      	bcc.n	800257e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258a:	4a0a      	ldr	r2, [pc, #40]	@ (80025b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800258c:	4c0a      	ldr	r4, [pc, #40]	@ (80025b8 <LoopForever+0x16>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002590:	e001      	b.n	8002596 <LoopFillZerobss>

08002592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002594:	3204      	adds	r2, #4

08002596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002598:	d3fb      	bcc.n	8002592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800259a:	f003 ffd3 	bl	8006544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800259e:	f7ff fad1 	bl	8001b44 <main>

080025a2 <LoopForever>:

LoopForever:
    b LoopForever
 80025a2:	e7fe      	b.n	80025a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025a4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80025a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80025b0:	08007584 	.word	0x08007584
  ldr r2, =_sbss
 80025b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80025b8:	2000068c 	.word	0x2000068c

080025bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025bc:	e7fe      	b.n	80025bc <ADC1_IRQHandler>

080025be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c8:	2003      	movs	r0, #3
 80025ca:	f000 f943 	bl	8002854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ce:	200f      	movs	r0, #15
 80025d0:	f000 f80e 	bl	80025f0 <HAL_InitTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	e001      	b.n	80025e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025e0:	f7ff fd66 	bl	80020b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025e4:	79fb      	ldrb	r3, [r7, #7]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025fc:	4b17      	ldr	r3, [pc, #92]	@ (800265c <HAL_InitTick+0x6c>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d023      	beq.n	800264c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002604:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <HAL_InitTick+0x70>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_InitTick+0x6c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002612:	fbb3 f3f1 	udiv	r3, r3, r1
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f941 	bl	80028a2 <HAL_SYSTICK_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10f      	bne.n	8002646 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d809      	bhi.n	8002640 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262c:	2200      	movs	r2, #0
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002634:	f000 f919 	bl	800286a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002638:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <HAL_InitTick+0x74>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e007      	b.n	8002650 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e004      	b.n	8002650 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e001      	b.n	8002650 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000000c 	.word	0x2000000c
 8002660:	20000004 	.word	0x20000004
 8002664:	20000008 	.word	0x20000008

08002668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800266c:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <HAL_IncTick+0x20>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_IncTick+0x24>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4413      	add	r3, r2
 8002678:	4a04      	ldr	r2, [pc, #16]	@ (800268c <HAL_IncTick+0x24>)
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2000000c 	.word	0x2000000c
 800268c:	20000540 	.word	0x20000540

08002690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return uwTick;
 8002694:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <HAL_GetTick+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000540 	.word	0x20000540

080026a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff ffee 	bl	8002690 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026c0:	d005      	beq.n	80026ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_Delay+0x44>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ce:	bf00      	nop
 80026d0:	f7ff ffde 	bl	8002690 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d8f7      	bhi.n	80026d0 <HAL_Delay+0x28>
  {
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000000c 	.word	0x2000000c

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	6039      	str	r1, [r7, #0]
 800275e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	2b00      	cmp	r3, #0
 8002766:	db0a      	blt.n	800277e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	b2da      	uxtb	r2, r3
 800276c:	490c      	ldr	r1, [pc, #48]	@ (80027a0 <__NVIC_SetPriority+0x4c>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	0112      	lsls	r2, r2, #4
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	440b      	add	r3, r1
 8002778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800277c:	e00a      	b.n	8002794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <__NVIC_SetPriority+0x50>)
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3b04      	subs	r3, #4
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	440b      	add	r3, r1
 8002792:	761a      	strb	r2, [r3, #24]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000e100 	.word	0xe000e100
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	@ 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f1c3 0307 	rsb	r3, r3, #7
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	bf28      	it	cs
 80027c6:	2304      	movcs	r3, #4
 80027c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3304      	adds	r3, #4
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d902      	bls.n	80027d8 <NVIC_EncodePriority+0x30>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3b03      	subs	r3, #3
 80027d6:	e000      	b.n	80027da <NVIC_EncodePriority+0x32>
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43da      	mvns	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	401a      	ands	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	43d9      	mvns	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	4313      	orrs	r3, r2
         );
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	@ 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002820:	d301      	bcc.n	8002826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002822:	2301      	movs	r3, #1
 8002824:	e00f      	b.n	8002846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002826:	4a0a      	ldr	r2, [pc, #40]	@ (8002850 <SysTick_Config+0x40>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282e:	210f      	movs	r1, #15
 8002830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002834:	f7ff ff8e 	bl	8002754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <SysTick_Config+0x40>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283e:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <SysTick_Config+0x40>)
 8002840:	2207      	movs	r2, #7
 8002842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010

08002854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff47 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800287c:	f7ff ff5c 	bl	8002738 <__NVIC_GetPriorityGrouping>
 8002880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff ff8e 	bl	80027a8 <NVIC_EncodePriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff5d 	bl	8002754 <__NVIC_SetPriority>
}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ffb0 	bl	8002810 <SysTick_Config>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ca:	e166      	b.n	8002b9a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2101      	movs	r1, #1
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	4013      	ands	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8158 	beq.w	8002b94 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d005      	beq.n	80028fc <HAL_GPIO_Init+0x40>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d130      	bne.n	800295e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002932:	2201      	movs	r2, #1
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 0201 	and.w	r2, r3, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b03      	cmp	r3, #3
 8002968:	d017      	beq.n	800299a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d123      	bne.n	80029ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	08da      	lsrs	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	08da      	lsrs	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3208      	adds	r2, #8
 80029e8:	6939      	ldr	r1, [r7, #16]
 80029ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2203      	movs	r2, #3
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0203 	and.w	r2, r3, #3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80b2 	beq.w	8002b94 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a30:	4b61      	ldr	r3, [pc, #388]	@ (8002bb8 <HAL_GPIO_Init+0x2fc>)
 8002a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a34:	4a60      	ldr	r2, [pc, #384]	@ (8002bb8 <HAL_GPIO_Init+0x2fc>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a3c:	4b5e      	ldr	r3, [pc, #376]	@ (8002bb8 <HAL_GPIO_Init+0x2fc>)
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a48:	4a5c      	ldr	r2, [pc, #368]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a72:	d02b      	beq.n	8002acc <HAL_GPIO_Init+0x210>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a52      	ldr	r2, [pc, #328]	@ (8002bc0 <HAL_GPIO_Init+0x304>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d025      	beq.n	8002ac8 <HAL_GPIO_Init+0x20c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a51      	ldr	r2, [pc, #324]	@ (8002bc4 <HAL_GPIO_Init+0x308>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d01f      	beq.n	8002ac4 <HAL_GPIO_Init+0x208>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a50      	ldr	r2, [pc, #320]	@ (8002bc8 <HAL_GPIO_Init+0x30c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d019      	beq.n	8002ac0 <HAL_GPIO_Init+0x204>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a4f      	ldr	r2, [pc, #316]	@ (8002bcc <HAL_GPIO_Init+0x310>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <HAL_GPIO_Init+0x200>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd0 <HAL_GPIO_Init+0x314>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_GPIO_Init+0x1fc>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd4 <HAL_GPIO_Init+0x318>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d007      	beq.n	8002ab4 <HAL_GPIO_Init+0x1f8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd8 <HAL_GPIO_Init+0x31c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_GPIO_Init+0x1f4>
 8002aac:	2307      	movs	r3, #7
 8002aae:	e00e      	b.n	8002ace <HAL_GPIO_Init+0x212>
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	e00c      	b.n	8002ace <HAL_GPIO_Init+0x212>
 8002ab4:	2306      	movs	r3, #6
 8002ab6:	e00a      	b.n	8002ace <HAL_GPIO_Init+0x212>
 8002ab8:	2305      	movs	r3, #5
 8002aba:	e008      	b.n	8002ace <HAL_GPIO_Init+0x212>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e006      	b.n	8002ace <HAL_GPIO_Init+0x212>
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e004      	b.n	8002ace <HAL_GPIO_Init+0x212>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e002      	b.n	8002ace <HAL_GPIO_Init+0x212>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_GPIO_Init+0x212>
 8002acc:	2300      	movs	r3, #0
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	f002 0203 	and.w	r2, r2, #3
 8002ad4:	0092      	lsls	r2, r2, #2
 8002ad6:	4093      	lsls	r3, r2
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ade:	4937      	ldr	r1, [pc, #220]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aec:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <HAL_GPIO_Init+0x320>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b10:	4a32      	ldr	r2, [pc, #200]	@ (8002bdc <HAL_GPIO_Init+0x320>)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b16:	4b31      	ldr	r3, [pc, #196]	@ (8002bdc <HAL_GPIO_Init+0x320>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b3a:	4a28      	ldr	r2, [pc, #160]	@ (8002bdc <HAL_GPIO_Init+0x320>)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b40:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <HAL_GPIO_Init+0x320>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b64:	4a1d      	ldr	r2, [pc, #116]	@ (8002bdc <HAL_GPIO_Init+0x320>)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <HAL_GPIO_Init+0x320>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b8e:	4a13      	ldr	r2, [pc, #76]	@ (8002bdc <HAL_GPIO_Init+0x320>)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f ae91 	bne.w	80028cc <HAL_GPIO_Init+0x10>
  }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	48000800 	.word	0x48000800
 8002bc8:	48000c00 	.word	0x48000c00
 8002bcc:	48001000 	.word	0x48001000
 8002bd0:	48001400 	.word	0x48001400
 8002bd4:	48001800 	.word	0x48001800
 8002bd8:	48001c00 	.word	0x48001c00
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e08d      	b.n	8002d3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fa5e 	bl	80020f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	@ 0x24
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d107      	bne.n	8002c8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	e006      	b.n	8002c98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d108      	bne.n	8002cb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	e007      	b.n	8002cc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ce4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69d9      	ldr	r1, [r3, #28]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1a      	ldr	r2, [r3, #32]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	461a      	mov	r2, r3
 8002d54:	460b      	mov	r3, r1
 8002d56:	817b      	strh	r3, [r7, #10]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	f040 80fd 	bne.w	8002f64 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_I2C_Master_Transmit+0x30>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e0f6      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x21e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d80:	f7ff fc86 	bl	8002690 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2319      	movs	r3, #25
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa0a 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0e1      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2221      	movs	r2, #33	@ 0x21
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2210      	movs	r2, #16
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	893a      	ldrh	r2, [r7, #8]
 8002dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2bff      	cmp	r3, #255	@ 0xff
 8002dd2:	d906      	bls.n	8002de2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	22ff      	movs	r2, #255	@ 0xff
 8002dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002dda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e007      	b.n	8002df2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d024      	beq.n	8002e44 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	8979      	ldrh	r1, [r7, #10]
 8002e36:	4b4e      	ldr	r3, [pc, #312]	@ (8002f70 <HAL_I2C_Master_Transmit+0x228>)
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fbf1 	bl	8003624 <I2C_TransferConfig>
 8002e42:	e066      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	4b48      	ldr	r3, [pc, #288]	@ (8002f70 <HAL_I2C_Master_Transmit+0x228>)
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fbe6 	bl	8003624 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e58:	e05b      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	6a39      	ldr	r1, [r7, #32]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f9f3 	bl	800324a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e07b      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d034      	beq.n	8002f12 <HAL_I2C_Master_Transmit+0x1ca>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d130      	bne.n	8002f12 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2180      	movs	r1, #128	@ 0x80
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f976 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e04d      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2bff      	cmp	r3, #255	@ 0xff
 8002ed2:	d90e      	bls.n	8002ef2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	22ff      	movs	r2, #255	@ 0xff
 8002ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	8979      	ldrh	r1, [r7, #10]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fb9a 	bl	8003624 <I2C_TransferConfig>
 8002ef0:	e00f      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	2300      	movs	r3, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fb89 	bl	8003624 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d19e      	bne.n	8002e5a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	6a39      	ldr	r1, [r7, #32]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f9d9 	bl	80032d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e01a      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2220      	movs	r2, #32
 8002f36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b0c      	ldr	r3, [pc, #48]	@ (8002f74 <HAL_I2C_Master_Transmit+0x22c>)
 8002f44:	400b      	ands	r3, r1
 8002f46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	80002000 	.word	0x80002000
 8002f74:	fe00e800 	.word	0xfe00e800

08002f78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	461a      	mov	r2, r3
 8002f84:	460b      	mov	r3, r1
 8002f86:	817b      	strh	r3, [r7, #10]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	f040 80db 	bne.w	8003150 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_I2C_Master_Receive+0x30>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e0d4      	b.n	8003152 <HAL_I2C_Master_Receive+0x1da>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fb0:	f7ff fb6e 	bl	8002690 <HAL_GetTick>
 8002fb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2319      	movs	r3, #25
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f8f2 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0bf      	b.n	8003152 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2222      	movs	r2, #34	@ 0x22
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2210      	movs	r2, #16
 8002fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	893a      	ldrh	r2, [r7, #8]
 8002ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2bff      	cmp	r3, #255	@ 0xff
 8003002:	d90e      	bls.n	8003022 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	22ff      	movs	r2, #255	@ 0xff
 8003008:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300e:	b2da      	uxtb	r2, r3
 8003010:	8979      	ldrh	r1, [r7, #10]
 8003012:	4b52      	ldr	r3, [pc, #328]	@ (800315c <HAL_I2C_Master_Receive+0x1e4>)
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fb02 	bl	8003624 <I2C_TransferConfig>
 8003020:	e06d      	b.n	80030fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	b2da      	uxtb	r2, r3
 8003032:	8979      	ldrh	r1, [r7, #10]
 8003034:	4b49      	ldr	r3, [pc, #292]	@ (800315c <HAL_I2C_Master_Receive+0x1e4>)
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 faf1 	bl	8003624 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003042:	e05c      	b.n	80030fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	6a39      	ldr	r1, [r7, #32]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f989 	bl	8003360 <I2C_WaitOnRXNEFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e07c      	b.n	8003152 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d034      	beq.n	80030fe <HAL_I2C_Master_Receive+0x186>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d130      	bne.n	80030fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f880 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e04d      	b.n	8003152 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2bff      	cmp	r3, #255	@ 0xff
 80030be:	d90e      	bls.n	80030de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	22ff      	movs	r2, #255	@ 0xff
 80030c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	8979      	ldrh	r1, [r7, #10]
 80030ce:	2300      	movs	r3, #0
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 faa4 	bl	8003624 <I2C_TransferConfig>
 80030dc:	e00f      	b.n	80030fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	8979      	ldrh	r1, [r7, #10]
 80030f0:	2300      	movs	r3, #0
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fa93 	bl	8003624 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d19d      	bne.n	8003044 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	6a39      	ldr	r1, [r7, #32]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f8e3 	bl	80032d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e01a      	b.n	8003152 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2220      	movs	r2, #32
 8003122:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <HAL_I2C_Master_Receive+0x1e8>)
 8003130:	400b      	ands	r3, r1
 8003132:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	80002400 	.word	0x80002400
 8003160:	fe00e800 	.word	0xfe00e800

08003164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d103      	bne.n	8003182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d007      	beq.n	80031a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	619a      	str	r2, [r3, #24]
  }
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031bc:	e031      	b.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031c4:	d02d      	beq.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7ff fa63 	bl	8002690 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d122      	bne.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4013      	ands	r3, r2
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d113      	bne.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e00f      	b.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	429a      	cmp	r2, r3
 800323e:	d0be      	beq.n	80031be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003256:	e033      	b.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f901 	bl	8003464 <I2C_IsErrorOccurred>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e031      	b.n	80032d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003272:	d025      	beq.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003274:	f7ff fa0c 	bl	8002690 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	d302      	bcc.n	800328a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d11a      	bne.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	d013      	beq.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d1c4      	bne.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032e4:	e02f      	b.n	8003346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f8ba 	bl	8003464 <I2C_IsErrorOccurred>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e02d      	b.n	8003356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7ff f9c9 	bl	8002690 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d11a      	bne.n	8003346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b20      	cmp	r3, #32
 800331c:	d013      	beq.n	8003346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e007      	b.n	8003356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b20      	cmp	r3, #32
 8003352:	d1c8      	bne.n	80032e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800336c:	e06b      	b.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f876 	bl	8003464 <I2C_IsErrorOccurred>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e069      	b.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d138      	bne.n	8003402 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b04      	cmp	r3, #4
 800339c:	d105      	bne.n	80033aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e055      	b.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d107      	bne.n	80033c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2210      	movs	r2, #16
 80033be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2204      	movs	r2, #4
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80033c6:	e002      	b.n	80033ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2220      	movs	r2, #32
 80033d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80033e2:	400b      	ands	r3, r1
 80033e4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e029      	b.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7ff f945 	bl	8002690 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d116      	bne.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d00f      	beq.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d18c      	bne.n	800336e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	fe00e800 	.word	0xfe00e800

08003464 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	@ 0x28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d068      	beq.n	8003562 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2210      	movs	r2, #16
 8003496:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003498:	e049      	b.n	800352e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034a0:	d045      	beq.n	800352e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7ff f8f5 	bl	8002690 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_IsErrorOccurred+0x54>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d13a      	bne.n	800352e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034da:	d121      	bne.n	8003520 <I2C_IsErrorOccurred+0xbc>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e2:	d01d      	beq.n	8003520 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d01a      	beq.n	8003520 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034fa:	f7ff f8c9 	bl	8002690 <HAL_GetTick>
 80034fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003500:	e00e      	b.n	8003520 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003502:	f7ff f8c5 	bl	8002690 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b19      	cmp	r3, #25
 800350e:	d907      	bls.n	8003520 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f043 0320 	orr.w	r3, r3, #32
 8003516:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800351e:	e006      	b.n	800352e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b20      	cmp	r3, #32
 800352c:	d1e9      	bne.n	8003502 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b20      	cmp	r3, #32
 800353a:	d003      	beq.n	8003544 <I2C_IsErrorOccurred+0xe0>
 800353c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0aa      	beq.n	800349a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2220      	movs	r2, #32
 8003552:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003584:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f043 0308 	orr.w	r3, r3, #8
 800359c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80035d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01c      	beq.n	8003612 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7ff fdc3 	bl	8003164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003620 <I2C_IsErrorOccurred+0x1bc>)
 80035ea:	400b      	ands	r3, r1
 80035ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003616:	4618      	mov	r0, r3
 8003618:	3728      	adds	r7, #40	@ 0x28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	fe00e800 	.word	0xfe00e800

08003624 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	460b      	mov	r3, r1
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	4613      	mov	r3, r2
 8003634:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003636:	897b      	ldrh	r3, [r7, #10]
 8003638:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800363c:	7a7b      	ldrb	r3, [r7, #9]
 800363e:	041b      	lsls	r3, r3, #16
 8003640:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003644:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	4313      	orrs	r3, r2
 800364e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003652:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	0d5b      	lsrs	r3, r3, #21
 800365e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003662:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <I2C_TransferConfig+0x60>)
 8003664:	430b      	orrs	r3, r1
 8003666:	43db      	mvns	r3, r3
 8003668:	ea02 0103 	and.w	r1, r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	03ff63ff 	.word	0x03ff63ff

08003688 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b20      	cmp	r3, #32
 800369c:	d138      	bne.n	8003710 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e032      	b.n	8003712 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	@ 0x24
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e000      	b.n	8003712 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003710:	2302      	movs	r3, #2
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b20      	cmp	r3, #32
 8003732:	d139      	bne.n	80037a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800373e:	2302      	movs	r3, #2
 8003740:	e033      	b.n	80037aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2224      	movs	r2, #36	@ 0x24
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003770:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037bc:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c8:	d102      	bne.n	80037d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80037ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037ce:	e00b      	b.n	80037e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80037d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037de:	d102      	bne.n	80037e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80037e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037e4:	e000      	b.n	80037e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80037e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40007000 	.word	0x40007000

080037f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d141      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003806:	4b4b      	ldr	r3, [pc, #300]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800380e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003812:	d131      	bne.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003814:	4b47      	ldr	r3, [pc, #284]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800381a:	4a46      	ldr	r2, [pc, #280]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003820:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003824:	4b43      	ldr	r3, [pc, #268]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800382c:	4a41      	ldr	r2, [pc, #260]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003832:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003834:	4b40      	ldr	r3, [pc, #256]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2232      	movs	r2, #50	@ 0x32
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	4a3f      	ldr	r2, [pc, #252]	@ (800393c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	0c9b      	lsrs	r3, r3, #18
 8003846:	3301      	adds	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800384a:	e002      	b.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3b01      	subs	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003852:	4b38      	ldr	r3, [pc, #224]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385e:	d102      	bne.n	8003866 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f2      	bne.n	800384c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003866:	4b33      	ldr	r3, [pc, #204]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003872:	d158      	bne.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e057      	b.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003878:	4b2e      	ldr	r3, [pc, #184]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800387e:	4a2d      	ldr	r2, [pc, #180]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003888:	e04d      	b.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003890:	d141      	bne.n	8003916 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003892:	4b28      	ldr	r3, [pc, #160]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800389a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389e:	d131      	bne.n	8003904 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038a0:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a6:	4a23      	ldr	r2, [pc, #140]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b0:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2232      	movs	r2, #50	@ 0x32
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	4a1c      	ldr	r2, [pc, #112]	@ (800393c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	0c9b      	lsrs	r3, r3, #18
 80038d2:	3301      	adds	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d6:	e002      	b.n	80038de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3b01      	subs	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038de:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ea:	d102      	bne.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f2      	bne.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038f2:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fe:	d112      	bne.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e011      	b.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003904:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800390a:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003910:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003914:	e007      	b.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003916:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800391e:	4a05      	ldr	r2, [pc, #20]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003924:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40007000 	.word	0x40007000
 8003938:	20000004 	.word	0x20000004
 800393c:	431bde83 	.word	0x431bde83

08003940 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f000 bc08 	b.w	8004164 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003954:	4b96      	ldr	r3, [pc, #600]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 030c 	and.w	r3, r3, #12
 800395c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800395e:	4b94      	ldr	r3, [pc, #592]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80e4 	beq.w	8003b3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <HAL_RCC_OscConfig+0x4c>
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	f040 808b 	bne.w	8003a9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b01      	cmp	r3, #1
 8003988:	f040 8087 	bne.w	8003a9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800398c:	4b88      	ldr	r3, [pc, #544]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_OscConfig+0x64>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e3df      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	4b81      	ldr	r3, [pc, #516]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <HAL_RCC_OscConfig+0x7e>
 80039b4:	4b7e      	ldr	r3, [pc, #504]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039bc:	e005      	b.n	80039ca <HAL_RCC_OscConfig+0x8a>
 80039be:	4b7c      	ldr	r3, [pc, #496]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d223      	bcs.n	8003a16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fdcc 	bl	8004570 <RCC_SetFlashLatencyFromMSIRange>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e3c0      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e2:	4b73      	ldr	r3, [pc, #460]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a72      	ldr	r2, [pc, #456]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b70      	ldr	r3, [pc, #448]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	496d      	ldr	r1, [pc, #436]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a00:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	4968      	ldr	r1, [pc, #416]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	e025      	b.n	8003a62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a16:	4b66      	ldr	r3, [pc, #408]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a65      	ldr	r2, [pc, #404]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b63      	ldr	r3, [pc, #396]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4960      	ldr	r1, [pc, #384]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a34:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	495b      	ldr	r1, [pc, #364]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fd8c 	bl	8004570 <RCC_SetFlashLatencyFromMSIRange>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e380      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a62:	f000 fcc1 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8003a66:	4602      	mov	r2, r0
 8003a68:	4b51      	ldr	r3, [pc, #324]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	4950      	ldr	r1, [pc, #320]	@ (8003bb4 <HAL_RCC_OscConfig+0x274>)
 8003a74:	5ccb      	ldrb	r3, [r1, r3]
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb8 <HAL_RCC_OscConfig+0x278>)
 8003a80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a82:	4b4e      	ldr	r3, [pc, #312]	@ (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fdb2 	bl	80025f0 <HAL_InitTick>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d052      	beq.n	8003b3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	e364      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d032      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003aa2:	4b43      	ldr	r3, [pc, #268]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aae:	f7fe fdef 	bl	8002690 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab6:	f7fe fdeb 	bl	8002690 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e34d      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ac8:	4b39      	ldr	r3, [pc, #228]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ad4:	4b36      	ldr	r3, [pc, #216]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a35      	ldr	r2, [pc, #212]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ada:	f043 0308 	orr.w	r3, r3, #8
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b33      	ldr	r3, [pc, #204]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4930      	ldr	r1, [pc, #192]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af2:	4b2f      	ldr	r3, [pc, #188]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	492b      	ldr	r1, [pc, #172]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
 8003b06:	e01a      	b.n	8003b3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b08:	4b29      	ldr	r3, [pc, #164]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a28      	ldr	r2, [pc, #160]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b14:	f7fe fdbc 	bl	8002690 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fdb8 	bl	8002690 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e31a      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b2e:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1dc>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d073      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_OscConfig+0x21c>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d10e      	bne.n	8003b74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d10b      	bne.n	8003b74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	4b14      	ldr	r3, [pc, #80]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d063      	beq.n	8003c30 <HAL_RCC_OscConfig+0x2f0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d15f      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e2f7      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b7c:	d106      	bne.n	8003b8c <HAL_RCC_OscConfig+0x24c>
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e025      	b.n	8003bd8 <HAL_RCC_OscConfig+0x298>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b94:	d114      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x280>
 8003b96:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a05      	ldr	r2, [pc, #20]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b03      	ldr	r3, [pc, #12]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a02      	ldr	r2, [pc, #8]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e013      	b.n	8003bd8 <HAL_RCC_OscConfig+0x298>
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	080074d0 	.word	0x080074d0
 8003bb8:	20000004 	.word	0x20000004
 8003bbc:	20000008 	.word	0x20000008
 8003bc0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a9f      	ldr	r2, [pc, #636]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a9c      	ldr	r2, [pc, #624]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe fd56 	bl	8002690 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fe fd52 	bl	8002690 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	@ 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e2b4      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfa:	4b92      	ldr	r3, [pc, #584]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x2a8>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe fd42 	bl	8002690 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fe fd3e 	bl	8002690 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	@ 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e2a0      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c22:	4b88      	ldr	r3, [pc, #544]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2d0>
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d060      	beq.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_OscConfig+0x310>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d119      	bne.n	8003c7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d116      	bne.n	8003c7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c50:	4b7c      	ldr	r3, [pc, #496]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_OscConfig+0x328>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e27d      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	4b76      	ldr	r3, [pc, #472]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	4973      	ldr	r1, [pc, #460]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c7c:	e040      	b.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d023      	beq.n	8003cce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c86:	4b6f      	ldr	r3, [pc, #444]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fe fcfd 	bl	8002690 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fe fcf9 	bl	8002690 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e25b      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cac:	4b65      	ldr	r3, [pc, #404]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b62      	ldr	r3, [pc, #392]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	495f      	ldr	r1, [pc, #380]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
 8003ccc:	e018      	b.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cce:	4b5d      	ldr	r3, [pc, #372]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cda:	f7fe fcd9 	bl	8002690 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce2:	f7fe fcd5 	bl	8002690 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e237      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cf4:	4b53      	ldr	r3, [pc, #332]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d03c      	beq.n	8003d86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01c      	beq.n	8003d4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d14:	4b4b      	ldr	r3, [pc, #300]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fe fcb4 	bl	8002690 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7fe fcb0 	bl	8002690 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e212      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d3e:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ef      	beq.n	8003d2c <HAL_RCC_OscConfig+0x3ec>
 8003d4c:	e01b      	b.n	8003d86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d54:	4a3b      	ldr	r2, [pc, #236]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5e:	f7fe fc97 	bl	8002690 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d66:	f7fe fc93 	bl	8002690 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e1f5      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d78:	4b32      	ldr	r3, [pc, #200]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1ef      	bne.n	8003d66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80a6 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d94:	2300      	movs	r3, #0
 8003d96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d98:	4b2a      	ldr	r3, [pc, #168]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10d      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	4b27      	ldr	r3, [pc, #156]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da8:	4a26      	ldr	r2, [pc, #152]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	6593      	str	r3, [r2, #88]	@ 0x58
 8003db0:	4b24      	ldr	r3, [pc, #144]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc0:	4b21      	ldr	r3, [pc, #132]	@ (8003e48 <HAL_RCC_OscConfig+0x508>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d118      	bne.n	8003dfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e48 <HAL_RCC_OscConfig+0x508>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e48 <HAL_RCC_OscConfig+0x508>)
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd8:	f7fe fc5a 	bl	8002690 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de0:	f7fe fc56 	bl	8002690 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e1b8      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df2:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <HAL_RCC_OscConfig+0x508>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d108      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4d8>
 8003e06:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e16:	e029      	b.n	8003e6c <HAL_RCC_OscConfig+0x52c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d115      	bne.n	8003e4c <HAL_RCC_OscConfig+0x50c>
 8003e20:	4b08      	ldr	r3, [pc, #32]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e26:	4a07      	ldr	r2, [pc, #28]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e28:	f043 0304 	orr.w	r3, r3, #4
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e30:	4b04      	ldr	r3, [pc, #16]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	4a03      	ldr	r2, [pc, #12]	@ (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e40:	e014      	b.n	8003e6c <HAL_RCC_OscConfig+0x52c>
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	4b9d      	ldr	r3, [pc, #628]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	4a9c      	ldr	r2, [pc, #624]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e5c:	4b99      	ldr	r3, [pc, #612]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e62:	4a98      	ldr	r2, [pc, #608]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d016      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fe fc0c 	bl	8002690 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fe fc08 	bl	8002690 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e168      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e92:	4b8c      	ldr	r3, [pc, #560]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ed      	beq.n	8003e7c <HAL_RCC_OscConfig+0x53c>
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fe fbf5 	bl	8002690 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fe fbf1 	bl	8002690 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e151      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec0:	4b80      	ldr	r3, [pc, #512]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ed      	bne.n	8003eaa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ece:	7ffb      	ldrb	r3, [r7, #31]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed4:	4b7b      	ldr	r3, [pc, #492]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed8:	4a7a      	ldr	r2, [pc, #488]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003eda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ede:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d03c      	beq.n	8003f66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01c      	beq.n	8003f2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ef4:	4b73      	ldr	r3, [pc, #460]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003efa:	4a72      	ldr	r2, [pc, #456]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fe fbc4 	bl	8002690 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f0c:	f7fe fbc0 	bl	8002690 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e122      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f1e:	4b69      	ldr	r3, [pc, #420]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ef      	beq.n	8003f0c <HAL_RCC_OscConfig+0x5cc>
 8003f2c:	e01b      	b.n	8003f66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f2e:	4b65      	ldr	r3, [pc, #404]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f34:	4a63      	ldr	r2, [pc, #396]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3e:	f7fe fba7 	bl	8002690 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f46:	f7fe fba3 	bl	8002690 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e105      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f58:	4b5a      	ldr	r3, [pc, #360]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1ef      	bne.n	8003f46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80f9 	beq.w	8004162 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	f040 80cf 	bne.w	8004118 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f7a:	4b52      	ldr	r3, [pc, #328]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0203 	and.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d12c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d123      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003faa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d11b      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d113      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d109      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d071      	beq.n	80040cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b0c      	cmp	r3, #12
 8003fec:	d068      	beq.n	80040c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fee:	4b35      	ldr	r3, [pc, #212]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ffa:	4b32      	ldr	r3, [pc, #200]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0ac      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800400a:	4b2e      	ldr	r3, [pc, #184]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2d      	ldr	r2, [pc, #180]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8004010:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004014:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004016:	f7fe fb3b 	bl	8002690 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401e:	f7fe fb37 	bl	8002690 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e099      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004030:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800403c:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	4b21      	ldr	r3, [pc, #132]	@ (80040c8 <HAL_RCC_OscConfig+0x788>)
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800404c:	3a01      	subs	r2, #1
 800404e:	0112      	lsls	r2, r2, #4
 8004050:	4311      	orrs	r1, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004056:	0212      	lsls	r2, r2, #8
 8004058:	4311      	orrs	r1, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800405e:	0852      	lsrs	r2, r2, #1
 8004060:	3a01      	subs	r2, #1
 8004062:	0552      	lsls	r2, r2, #21
 8004064:	4311      	orrs	r1, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800406a:	0852      	lsrs	r2, r2, #1
 800406c:	3a01      	subs	r2, #1
 800406e:	0652      	lsls	r2, r2, #25
 8004070:	4311      	orrs	r1, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004076:	06d2      	lsls	r2, r2, #27
 8004078:	430a      	orrs	r2, r1
 800407a:	4912      	ldr	r1, [pc, #72]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 800407c:	4313      	orrs	r3, r2
 800407e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004080:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0f      	ldr	r2, [pc, #60]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8004086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800408a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800408c:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a0c      	ldr	r2, [pc, #48]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 8004092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004096:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004098:	f7fe fafa 	bl	8002690 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fe faf6 	bl	8002690 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e058      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b2:	4b04      	ldr	r3, [pc, #16]	@ (80040c4 <HAL_RCC_OscConfig+0x784>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040be:	e050      	b.n	8004162 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e04f      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
 80040c4:	40021000 	.word	0x40021000
 80040c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040cc:	4b27      	ldr	r3, [pc, #156]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d144      	bne.n	8004162 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040d8:	4b24      	ldr	r3, [pc, #144]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a23      	ldr	r2, [pc, #140]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 80040de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040e4:	4b21      	ldr	r3, [pc, #132]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a20      	ldr	r2, [pc, #128]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040f0:	f7fe face 	bl	8002690 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe faca 	bl	8002690 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e02c      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410a:	4b18      	ldr	r3, [pc, #96]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x7b8>
 8004116:	e024      	b.n	8004162 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b0c      	cmp	r3, #12
 800411c:	d01f      	beq.n	800415e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411e:	4b13      	ldr	r3, [pc, #76]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a12      	ldr	r2, [pc, #72]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 8004124:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fe fab1 	bl	8002690 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004132:	f7fe faad 	bl	8002690 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e00f      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004144:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004150:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	4905      	ldr	r1, [pc, #20]	@ (800416c <HAL_RCC_OscConfig+0x82c>)
 8004156:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <HAL_RCC_OscConfig+0x830>)
 8004158:	4013      	ands	r3, r2
 800415a:	60cb      	str	r3, [r1, #12]
 800415c:	e001      	b.n	8004162 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	feeefffc 	.word	0xfeeefffc

08004174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e11d      	b.n	80043c8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800418c:	4b90      	ldr	r3, [pc, #576]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d910      	bls.n	80041bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b8d      	ldr	r3, [pc, #564]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 020f 	bic.w	r2, r3, #15
 80041a2:	498b      	ldr	r1, [pc, #556]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b89      	ldr	r3, [pc, #548]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e105      	b.n	80043c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d010      	beq.n	80041ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	4b81      	ldr	r3, [pc, #516]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d908      	bls.n	80041ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b7e      	ldr	r3, [pc, #504]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	497b      	ldr	r1, [pc, #492]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d079      	beq.n	80042ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d11e      	bne.n	800423c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041fe:	4b75      	ldr	r3, [pc, #468]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0dc      	b.n	80043c8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800420e:	f000 fa09 	bl	8004624 <RCC_GetSysClockFreqFromPLLSource>
 8004212:	4603      	mov	r3, r0
 8004214:	4a70      	ldr	r2, [pc, #448]	@ (80043d8 <HAL_RCC_ClockConfig+0x264>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d946      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800421a:	4b6e      	ldr	r3, [pc, #440]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d140      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004226:	4b6b      	ldr	r3, [pc, #428]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800422e:	4a69      	ldr	r2, [pc, #420]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004234:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e035      	b.n	80042a8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d107      	bne.n	8004254 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004244:	4b63      	ldr	r3, [pc, #396]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d115      	bne.n	800427c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0b9      	b.n	80043c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d107      	bne.n	800426c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800425c:	4b5d      	ldr	r3, [pc, #372]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0ad      	b.n	80043c8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800426c:	4b59      	ldr	r3, [pc, #356]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0a5      	b.n	80043c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800427c:	f000 f8b4 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8004280:	4603      	mov	r3, r0
 8004282:	4a55      	ldr	r2, [pc, #340]	@ (80043d8 <HAL_RCC_ClockConfig+0x264>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d90f      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004288:	4b52      	ldr	r3, [pc, #328]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004294:	4b4f      	ldr	r3, [pc, #316]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800429c:	4a4d      	ldr	r2, [pc, #308]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 800429e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042a4:	2380      	movs	r3, #128	@ 0x80
 80042a6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042a8:	4b4a      	ldr	r3, [pc, #296]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f023 0203 	bic.w	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4947      	ldr	r1, [pc, #284]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ba:	f7fe f9e9 	bl	8002690 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c2:	f7fe f9e5 	bl	8002690 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e077      	b.n	80043c8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d8:	4b3e      	ldr	r3, [pc, #248]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 020c 	and.w	r2, r3, #12
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d1eb      	bne.n	80042c2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b80      	cmp	r3, #128	@ 0x80
 80042ee:	d105      	bne.n	80042fc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042f0:	4b38      	ldr	r3, [pc, #224]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4a37      	ldr	r2, [pc, #220]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80042f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042fa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	4b31      	ldr	r3, [pc, #196]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004314:	429a      	cmp	r2, r3
 8004316:	d208      	bcs.n	800432a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b2e      	ldr	r3, [pc, #184]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	492b      	ldr	r1, [pc, #172]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800432a:	4b29      	ldr	r3, [pc, #164]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d210      	bcs.n	800435a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004338:	4b25      	ldr	r3, [pc, #148]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 020f 	bic.w	r2, r3, #15
 8004340:	4923      	ldr	r1, [pc, #140]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	4313      	orrs	r3, r2
 8004346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004348:	4b21      	ldr	r3, [pc, #132]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d001      	beq.n	800435a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e036      	b.n	80043c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004366:	4b1b      	ldr	r3, [pc, #108]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4918      	ldr	r1, [pc, #96]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004374:	4313      	orrs	r3, r2
 8004376:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004384:	4b13      	ldr	r3, [pc, #76]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4910      	ldr	r1, [pc, #64]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004398:	f000 f826 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	490c      	ldr	r1, [pc, #48]	@ (80043dc <HAL_RCC_ClockConfig+0x268>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
 80043b4:	4a0a      	ldr	r2, [pc, #40]	@ (80043e0 <HAL_RCC_ClockConfig+0x26c>)
 80043b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043b8:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <HAL_RCC_ClockConfig+0x270>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe f917 	bl	80025f0 <HAL_InitTick>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40022000 	.word	0x40022000
 80043d4:	40021000 	.word	0x40021000
 80043d8:	04c4b400 	.word	0x04c4b400
 80043dc:	080074d0 	.word	0x080074d0
 80043e0:	20000004 	.word	0x20000004
 80043e4:	20000008 	.word	0x20000008

080043e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	@ 0x24
 80043ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f6:	4b3e      	ldr	r3, [pc, #248]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004400:	4b3b      	ldr	r3, [pc, #236]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x34>
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b0c      	cmp	r3, #12
 8004414:	d121      	bne.n	800445a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d11e      	bne.n	800445a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800441c:	4b34      	ldr	r3, [pc, #208]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d107      	bne.n	8004438 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004428:	4b31      	ldr	r3, [pc, #196]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800442a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e005      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004438:	4b2d      	ldr	r3, [pc, #180]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004444:	4a2b      	ldr	r2, [pc, #172]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004458:	e00a      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d102      	bne.n	8004466 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004460:	4b25      	ldr	r3, [pc, #148]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e004      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d101      	bne.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800446c:	4b23      	ldr	r3, [pc, #140]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x114>)
 800446e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b0c      	cmp	r3, #12
 8004474:	d134      	bne.n	80044e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004476:	4b1e      	ldr	r3, [pc, #120]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d003      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0xa6>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d003      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0xac>
 800448c:	e005      	b.n	800449a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800448e:	4b1a      	ldr	r3, [pc, #104]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004490:	617b      	str	r3, [r7, #20]
      break;
 8004492:	e005      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004494:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004496:	617b      	str	r3, [r7, #20]
      break;
 8004498:	e002      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	617b      	str	r3, [r7, #20]
      break;
 800449e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044a0:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	3301      	adds	r3, #1
 80044ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044ae:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	fb03 f202 	mul.w	r2, r3, r2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044c6:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	0e5b      	lsrs	r3, r3, #25
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	3301      	adds	r3, #1
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044e0:	69bb      	ldr	r3, [r7, #24]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3724      	adds	r7, #36	@ 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	080074e8 	.word	0x080074e8
 80044f8:	00f42400 	.word	0x00f42400
 80044fc:	007a1200 	.word	0x007a1200

08004500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004504:	4b03      	ldr	r3, [pc, #12]	@ (8004514 <HAL_RCC_GetHCLKFreq+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000004 	.word	0x20000004

08004518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800451c:	f7ff fff0 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4904      	ldr	r1, [pc, #16]	@ (8004540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000
 8004540:	080074e0 	.word	0x080074e0

08004544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004548:	f7ff ffda 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 800454c:	4602      	mov	r2, r0
 800454e:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	0adb      	lsrs	r3, r3, #11
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	4904      	ldr	r1, [pc, #16]	@ (800456c <HAL_RCC_GetPCLK2Freq+0x28>)
 800455a:	5ccb      	ldrb	r3, [r1, r3]
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	080074e0 	.word	0x080074e0

08004570 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800457c:	4b27      	ldr	r3, [pc, #156]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004588:	f7ff f916 	bl	80037b8 <HAL_PWREx_GetVoltageRange>
 800458c:	6178      	str	r0, [r7, #20]
 800458e:	e014      	b.n	80045ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004590:	4b22      	ldr	r3, [pc, #136]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	4a21      	ldr	r2, [pc, #132]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6593      	str	r3, [r2, #88]	@ 0x58
 800459c:	4b1f      	ldr	r3, [pc, #124]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045a8:	f7ff f906 	bl	80037b8 <HAL_PWREx_GetVoltageRange>
 80045ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045ae:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b2:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c0:	d10b      	bne.n	80045da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b80      	cmp	r3, #128	@ 0x80
 80045c6:	d913      	bls.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80045cc:	d902      	bls.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ce:	2302      	movs	r3, #2
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	e00d      	b.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d4:	2301      	movs	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	e00a      	b.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80045de:	d902      	bls.n	80045e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80045e0:	2302      	movs	r3, #2
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	e004      	b.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b70      	cmp	r3, #112	@ 0x70
 80045ea:	d101      	bne.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045ec:	2301      	movs	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 020f 	bic.w	r2, r3, #15
 80045f8:	4909      	ldr	r1, [pc, #36]	@ (8004620 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004600:	4b07      	ldr	r3, [pc, #28]	@ (8004620 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	40022000 	.word	0x40022000

08004624 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800462a:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d00b      	beq.n	8004652 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d825      	bhi.n	800468c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d008      	beq.n	8004658 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d11f      	bne.n	800468c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800464e:	613b      	str	r3, [r7, #16]
    break;
 8004650:	e01f      	b.n	8004692 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004652:	4b25      	ldr	r3, [pc, #148]	@ (80046e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004654:	613b      	str	r3, [r7, #16]
    break;
 8004656:	e01c      	b.n	8004692 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004658:	4b21      	ldr	r3, [pc, #132]	@ (80046e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004664:	4b1e      	ldr	r3, [pc, #120]	@ (80046e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e005      	b.n	8004680 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004674:	4b1a      	ldr	r3, [pc, #104]	@ (80046e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004680:	4a1a      	ldr	r2, [pc, #104]	@ (80046ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004688:	613b      	str	r3, [r7, #16]
    break;
 800468a:	e002      	b.n	8004692 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
    break;
 8004690:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004692:	4b13      	ldr	r3, [pc, #76]	@ (80046e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	3301      	adds	r3, #1
 800469e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046a0:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	fb03 f202 	mul.w	r2, r3, r2
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046b8:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0e5b      	lsrs	r3, r3, #25
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	3301      	adds	r3, #1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80046d2:	683b      	ldr	r3, [r7, #0]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40021000 	.word	0x40021000
 80046e4:	00f42400 	.word	0x00f42400
 80046e8:	007a1200 	.word	0x007a1200
 80046ec:	080074e8 	.word	0x080074e8

080046f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046f8:	2300      	movs	r3, #0
 80046fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046fc:	2300      	movs	r3, #0
 80046fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004708:	2b00      	cmp	r3, #0
 800470a:	d040      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004710:	2b80      	cmp	r3, #128	@ 0x80
 8004712:	d02a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004714:	2b80      	cmp	r3, #128	@ 0x80
 8004716:	d825      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004718:	2b60      	cmp	r3, #96	@ 0x60
 800471a:	d026      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800471c:	2b60      	cmp	r3, #96	@ 0x60
 800471e:	d821      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	d006      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	d81d      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d010      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004730:	e018      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004732:	4b89      	ldr	r3, [pc, #548]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4a88      	ldr	r2, [pc, #544]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800473e:	e015      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fb02 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004750:	e00c      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3320      	adds	r3, #32
 8004756:	2100      	movs	r1, #0
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fbed 	bl	8004f38 <RCCEx_PLLSAI2_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	74fb      	strb	r3, [r7, #19]
      break;
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800476a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004772:	4b79      	ldr	r3, [pc, #484]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004774:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004778:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004780:	4975      	ldr	r1, [pc, #468]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004788:	e001      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	7cfb      	ldrb	r3, [r7, #19]
 800478c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d047      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a2:	d030      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a8:	d82a      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ae:	d02a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047b4:	d824      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ba:	d008      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c0:	d81e      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ca:	d010      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80047cc:	e018      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047ce:	4b62      	ldr	r3, [pc, #392]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4a61      	ldr	r2, [pc, #388]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047da:	e015      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fab4 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047ec:	e00c      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3320      	adds	r3, #32
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fb9f 	bl	8004f38 <RCCEx_PLLSAI2_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047fe:	e003      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	74fb      	strb	r3, [r7, #19]
      break;
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800480e:	4b52      	ldr	r3, [pc, #328]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004810:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481c:	494e      	ldr	r1, [pc, #312]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004824:	e001      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	7cfb      	ldrb	r3, [r7, #19]
 8004828:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 809f 	beq.w	8004976 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004838:	2300      	movs	r3, #0
 800483a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800483c:	4b46      	ldr	r3, [pc, #280]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004852:	4b41      	ldr	r3, [pc, #260]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004856:	4a40      	ldr	r2, [pc, #256]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485c:	6593      	str	r3, [r2, #88]	@ 0x58
 800485e:	4b3e      	ldr	r3, [pc, #248]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486a:	2301      	movs	r3, #1
 800486c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800486e:	4b3b      	ldr	r3, [pc, #236]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a3a      	ldr	r2, [pc, #232]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004878:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800487a:	f7fd ff09 	bl	8002690 <HAL_GetTick>
 800487e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004880:	e009      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004882:	f7fd ff05 	bl	8002690 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d902      	bls.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	74fb      	strb	r3, [r7, #19]
        break;
 8004894:	e005      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004896:	4b31      	ldr	r3, [pc, #196]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ef      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d15b      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01f      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d019      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048c6:	4b24      	ldr	r3, [pc, #144]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048d2:	4b21      	ldr	r3, [pc, #132]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048f2:	4a19      	ldr	r2, [pc, #100]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d016      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd fec4 	bl	8002690 <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490a:	e00b      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490c:	f7fd fec0 	bl	8002690 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d902      	bls.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	74fb      	strb	r3, [r7, #19]
            break;
 8004922:	e006      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0ec      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10c      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004938:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004948:	4903      	ldr	r1, [pc, #12]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004950:	e008      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	74bb      	strb	r3, [r7, #18]
 8004956:	e005      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004958:	40021000 	.word	0x40021000
 800495c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004964:	7c7b      	ldrb	r3, [r7, #17]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496a:	4ba0      	ldr	r3, [pc, #640]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496e:	4a9f      	ldr	r2, [pc, #636]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004974:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004982:	4b9a      	ldr	r3, [pc, #616]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004988:	f023 0203 	bic.w	r2, r3, #3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004990:	4996      	ldr	r1, [pc, #600]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049a4:	4b91      	ldr	r3, [pc, #580]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049aa:	f023 020c 	bic.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	498e      	ldr	r1, [pc, #568]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049c6:	4b89      	ldr	r3, [pc, #548]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d4:	4985      	ldr	r1, [pc, #532]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049e8:	4b80      	ldr	r3, [pc, #512]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f6:	497d      	ldr	r1, [pc, #500]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a0a:	4b78      	ldr	r3, [pc, #480]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a18:	4974      	ldr	r1, [pc, #464]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3a:	496c      	ldr	r1, [pc, #432]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a4e:	4b67      	ldr	r3, [pc, #412]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a5c:	4963      	ldr	r1, [pc, #396]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a70:	4b5e      	ldr	r3, [pc, #376]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a7e:	495b      	ldr	r1, [pc, #364]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a92:	4b56      	ldr	r3, [pc, #344]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa0:	4952      	ldr	r1, [pc, #328]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac2:	494a      	ldr	r1, [pc, #296]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad6:	4b45      	ldr	r3, [pc, #276]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004adc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae4:	4941      	ldr	r1, [pc, #260]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004af8:	4b3c      	ldr	r3, [pc, #240]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004afe:	f023 0203 	bic.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b06:	4939      	ldr	r1, [pc, #228]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d028      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b1a:	4b34      	ldr	r3, [pc, #208]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b28:	4930      	ldr	r1, [pc, #192]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b38:	d106      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b44:	60d3      	str	r3, [r2, #12]
 8004b46:	e011      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	2101      	movs	r1, #1
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 f8f9 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b62:	7cfb      	ldrb	r3, [r7, #19]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004b68:	7cfb      	ldrb	r3, [r7, #19]
 8004b6a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d04d      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b80:	d108      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004b82:	4b1a      	ldr	r3, [pc, #104]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b88:	4a18      	ldr	r2, [pc, #96]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b8e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004b92:	e012      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004b94:	4b15      	ldr	r3, [pc, #84]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b9a:	4a14      	ldr	r2, [pc, #80]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ba0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004ba4:	4b11      	ldr	r3, [pc, #68]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004baa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bb2:	490e      	ldr	r1, [pc, #56]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc4:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a08      	ldr	r2, [pc, #32]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bce:	60d3      	str	r3, [r2, #12]
 8004bd0:	e020      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bda:	d109      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bdc:	4b03      	ldr	r3, [pc, #12]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a02      	ldr	r2, [pc, #8]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be6:	60d3      	str	r3, [r2, #12]
 8004be8:	e014      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 f8a5 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c0a:	7cfb      	ldrb	r3, [r7, #19]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004c10:	7cfb      	ldrb	r3, [r7, #19]
 8004c12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d028      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c20:	4b4a      	ldr	r3, [pc, #296]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c2e:	4947      	ldr	r1, [pc, #284]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c40:	4b42      	ldr	r3, [pc, #264]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a41      	ldr	r2, [pc, #260]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c4a:	60d3      	str	r3, [r2, #12]
 8004c4c:	e011      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c56:	d10c      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f876 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01e      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c7e:	4b33      	ldr	r3, [pc, #204]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c8e:	492f      	ldr	r1, [pc, #188]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f851 	bl	8004d50 <RCCEx_PLLSAI1_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cb2:	7cfb      	ldrb	r3, [r7, #19]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00b      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cc8:	4b20      	ldr	r3, [pc, #128]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cce:	f023 0204 	bic.w	r2, r3, #4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cd8:	491c      	ldr	r1, [pc, #112]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004cec:	4b17      	ldr	r3, [pc, #92]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cf2:	f023 0218 	bic.w	r2, r3, #24
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfc:	4913      	ldr	r1, [pc, #76]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d017      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d10:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d20:	490a      	ldr	r1, [pc, #40]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d32:	d105      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d34:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a04      	ldr	r2, [pc, #16]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d40:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000

08004d50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d5e:	4b72      	ldr	r3, [pc, #456]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00e      	beq.n	8004d88 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0203 	and.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d103      	bne.n	8004d82 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d142      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
 8004d86:	e03f      	b.n	8004e08 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d018      	beq.n	8004dc2 <RCCEx_PLLSAI1_Config+0x72>
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d825      	bhi.n	8004de0 <RCCEx_PLLSAI1_Config+0x90>
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d002      	beq.n	8004d9e <RCCEx_PLLSAI1_Config+0x4e>
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d009      	beq.n	8004db0 <RCCEx_PLLSAI1_Config+0x60>
 8004d9c:	e020      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d9e:	4b62      	ldr	r3, [pc, #392]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d11d      	bne.n	8004de6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dae:	e01a      	b.n	8004de6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004db0:	4b5d      	ldr	r3, [pc, #372]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d116      	bne.n	8004dea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc0:	e013      	b.n	8004dea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dc2:	4b59      	ldr	r3, [pc, #356]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10f      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dce:	4b56      	ldr	r3, [pc, #344]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dde:	e006      	b.n	8004dee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
      break;
 8004de4:	e004      	b.n	8004df0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004de6:	bf00      	nop
 8004de8:	e002      	b.n	8004df0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004dea:	bf00      	nop
 8004dec:	e000      	b.n	8004df0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004dee:	bf00      	nop
    }

    if(status == HAL_OK)
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004df6:	4b4c      	ldr	r3, [pc, #304]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f023 0203 	bic.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4949      	ldr	r1, [pc, #292]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 8086 	bne.w	8004f1c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e10:	4b45      	ldr	r3, [pc, #276]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a44      	ldr	r2, [pc, #272]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1c:	f7fd fc38 	bl	8002690 <HAL_GetTick>
 8004e20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e22:	e009      	b.n	8004e38 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e24:	f7fd fc34 	bl	8002690 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d902      	bls.n	8004e38 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	73fb      	strb	r3, [r7, #15]
        break;
 8004e36:	e005      	b.n	8004e44 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e38:	4b3b      	ldr	r3, [pc, #236]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ef      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d168      	bne.n	8004f1c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d113      	bne.n	8004e78 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e50:	4b35      	ldr	r3, [pc, #212]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	4b35      	ldr	r3, [pc, #212]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6892      	ldr	r2, [r2, #8]
 8004e5c:	0211      	lsls	r1, r2, #8
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	68d2      	ldr	r2, [r2, #12]
 8004e62:	06d2      	lsls	r2, r2, #27
 8004e64:	4311      	orrs	r1, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6852      	ldr	r2, [r2, #4]
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	492d      	ldr	r1, [pc, #180]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	610b      	str	r3, [r1, #16]
 8004e76:	e02d      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d115      	bne.n	8004eaa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	4b2b      	ldr	r3, [pc, #172]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6892      	ldr	r2, [r2, #8]
 8004e8a:	0211      	lsls	r1, r2, #8
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6912      	ldr	r2, [r2, #16]
 8004e90:	0852      	lsrs	r2, r2, #1
 8004e92:	3a01      	subs	r2, #1
 8004e94:	0552      	lsls	r2, r2, #21
 8004e96:	4311      	orrs	r1, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6852      	ldr	r2, [r2, #4]
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	0112      	lsls	r2, r2, #4
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	4921      	ldr	r1, [pc, #132]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	610b      	str	r3, [r1, #16]
 8004ea8:	e014      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	4b21      	ldr	r3, [pc, #132]	@ (8004f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6892      	ldr	r2, [r2, #8]
 8004eb6:	0211      	lsls	r1, r2, #8
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6952      	ldr	r2, [r2, #20]
 8004ebc:	0852      	lsrs	r2, r2, #1
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	0652      	lsls	r2, r2, #25
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6852      	ldr	r2, [r2, #4]
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	0112      	lsls	r2, r2, #4
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4916      	ldr	r1, [pc, #88]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ed4:	4b14      	ldr	r3, [pc, #80]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fd fbd6 	bl	8002690 <HAL_GetTick>
 8004ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ee6:	e009      	b.n	8004efc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ee8:	f7fd fbd2 	bl	8002690 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d902      	bls.n	8004efc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8004efa:	e005      	b.n	8004f08 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004efc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ef      	beq.n	8004ee8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	4904      	ldr	r1, [pc, #16]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	07ff800f 	.word	0x07ff800f
 8004f30:	ff9f800f 	.word	0xff9f800f
 8004f34:	f9ff800f 	.word	0xf9ff800f

08004f38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f46:	4b72      	ldr	r3, [pc, #456]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00e      	beq.n	8004f70 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f52:	4b6f      	ldr	r3, [pc, #444]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0203 	and.w	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d103      	bne.n	8004f6a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
       ||
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d142      	bne.n	8004ff0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e03f      	b.n	8004ff0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d018      	beq.n	8004faa <RCCEx_PLLSAI2_Config+0x72>
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d825      	bhi.n	8004fc8 <RCCEx_PLLSAI2_Config+0x90>
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d002      	beq.n	8004f86 <RCCEx_PLLSAI2_Config+0x4e>
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d009      	beq.n	8004f98 <RCCEx_PLLSAI2_Config+0x60>
 8004f84:	e020      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f86:	4b62      	ldr	r3, [pc, #392]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11d      	bne.n	8004fce <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f96:	e01a      	b.n	8004fce <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f98:	4b5d      	ldr	r3, [pc, #372]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d116      	bne.n	8004fd2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa8:	e013      	b.n	8004fd2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004faa:	4b59      	ldr	r3, [pc, #356]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fb6:	4b56      	ldr	r3, [pc, #344]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fc6:	e006      	b.n	8004fd6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
      break;
 8004fcc:	e004      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e002      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e000      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d108      	bne.n	8004ff0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004fde:	4b4c      	ldr	r3, [pc, #304]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4949      	ldr	r1, [pc, #292]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f040 8086 	bne.w	8005104 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ff8:	4b45      	ldr	r3, [pc, #276]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a44      	ldr	r2, [pc, #272]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005004:	f7fd fb44 	bl	8002690 <HAL_GetTick>
 8005008:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800500a:	e009      	b.n	8005020 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800500c:	f7fd fb40 	bl	8002690 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d902      	bls.n	8005020 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	73fb      	strb	r3, [r7, #15]
        break;
 800501e:	e005      	b.n	800502c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005020:	4b3b      	ldr	r3, [pc, #236]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1ef      	bne.n	800500c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d168      	bne.n	8005104 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d113      	bne.n	8005060 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005038:	4b35      	ldr	r3, [pc, #212]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	4b35      	ldr	r3, [pc, #212]	@ (8005114 <RCCEx_PLLSAI2_Config+0x1dc>)
 800503e:	4013      	ands	r3, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6892      	ldr	r2, [r2, #8]
 8005044:	0211      	lsls	r1, r2, #8
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68d2      	ldr	r2, [r2, #12]
 800504a:	06d2      	lsls	r2, r2, #27
 800504c:	4311      	orrs	r1, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6852      	ldr	r2, [r2, #4]
 8005052:	3a01      	subs	r2, #1
 8005054:	0112      	lsls	r2, r2, #4
 8005056:	430a      	orrs	r2, r1
 8005058:	492d      	ldr	r1, [pc, #180]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 800505a:	4313      	orrs	r3, r2
 800505c:	614b      	str	r3, [r1, #20]
 800505e:	e02d      	b.n	80050bc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d115      	bne.n	8005092 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005066:	4b2a      	ldr	r3, [pc, #168]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005068:	695a      	ldr	r2, [r3, #20]
 800506a:	4b2b      	ldr	r3, [pc, #172]	@ (8005118 <RCCEx_PLLSAI2_Config+0x1e0>)
 800506c:	4013      	ands	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6892      	ldr	r2, [r2, #8]
 8005072:	0211      	lsls	r1, r2, #8
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6912      	ldr	r2, [r2, #16]
 8005078:	0852      	lsrs	r2, r2, #1
 800507a:	3a01      	subs	r2, #1
 800507c:	0552      	lsls	r2, r2, #21
 800507e:	4311      	orrs	r1, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6852      	ldr	r2, [r2, #4]
 8005084:	3a01      	subs	r2, #1
 8005086:	0112      	lsls	r2, r2, #4
 8005088:	430a      	orrs	r2, r1
 800508a:	4921      	ldr	r1, [pc, #132]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 800508c:	4313      	orrs	r3, r2
 800508e:	614b      	str	r3, [r1, #20]
 8005090:	e014      	b.n	80050bc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005092:	4b1f      	ldr	r3, [pc, #124]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	4b21      	ldr	r3, [pc, #132]	@ (800511c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6892      	ldr	r2, [r2, #8]
 800509e:	0211      	lsls	r1, r2, #8
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6952      	ldr	r2, [r2, #20]
 80050a4:	0852      	lsrs	r2, r2, #1
 80050a6:	3a01      	subs	r2, #1
 80050a8:	0652      	lsls	r2, r2, #25
 80050aa:	4311      	orrs	r1, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6852      	ldr	r2, [r2, #4]
 80050b0:	3a01      	subs	r2, #1
 80050b2:	0112      	lsls	r2, r2, #4
 80050b4:	430a      	orrs	r2, r1
 80050b6:	4916      	ldr	r1, [pc, #88]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050bc:	4b14      	ldr	r3, [pc, #80]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a13      	ldr	r2, [pc, #76]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c8:	f7fd fae2 	bl	8002690 <HAL_GetTick>
 80050cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050ce:	e009      	b.n	80050e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050d0:	f7fd fade 	bl	8002690 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d902      	bls.n	80050e4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	73fb      	strb	r3, [r7, #15]
          break;
 80050e2:	e005      	b.n	80050f0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0ef      	beq.n	80050d0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050f6:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	4904      	ldr	r1, [pc, #16]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005100:	4313      	orrs	r3, r2
 8005102:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	07ff800f 	.word	0x07ff800f
 8005118:	ff9f800f 	.word	0xff9f800f
 800511c:	f9ff800f 	.word	0xf9ff800f

08005120 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e095      	b.n	800525e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d108      	bne.n	800514c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005142:	d009      	beq.n	8005158 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	61da      	str	r2, [r3, #28]
 800514a:	e005      	b.n	8005158 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fd f81e 	bl	80021b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800518e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005198:	d902      	bls.n	80051a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e002      	b.n	80051a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80051ae:	d007      	beq.n	80051c0 <HAL_SPI_Init+0xa0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051b8:	d002      	beq.n	80051c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005202:	ea42 0103 	orr.w	r1, r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	f003 0204 	and.w	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800523c:	ea42 0103 	orr.w	r1, r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b088      	sub	sp, #32
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_SPI_Transmit+0x22>
 8005284:	2302      	movs	r3, #2
 8005286:	e15f      	b.n	8005548 <HAL_SPI_Transmit+0x2e2>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005290:	f7fd f9fe 	bl	8002690 <HAL_GetTick>
 8005294:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
 80052a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052aa:	e148      	b.n	800553e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_SPI_Transmit+0x52>
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052bc:	e13f      	b.n	800553e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2203      	movs	r2, #3
 80052c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005308:	d10f      	bne.n	800532a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005318:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005328:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005334:	2b40      	cmp	r3, #64	@ 0x40
 8005336:	d007      	beq.n	8005348 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005346:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005350:	d94f      	bls.n	80053f2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_SPI_Transmit+0xfa>
 800535a:	8afb      	ldrh	r3, [r7, #22]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d142      	bne.n	80053e6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	881a      	ldrh	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005370:	1c9a      	adds	r2, r3, #2
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005384:	e02f      	b.n	80053e6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b02      	cmp	r3, #2
 8005392:	d112      	bne.n	80053ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	881a      	ldrh	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a4:	1c9a      	adds	r2, r3, #2
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053b8:	e015      	b.n	80053e6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ba:	f7fd f969 	bl	8002690 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d803      	bhi.n	80053d2 <HAL_SPI_Transmit+0x16c>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053d0:	d102      	bne.n	80053d8 <HAL_SPI_Transmit+0x172>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80053e4:	e0ab      	b.n	800553e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1ca      	bne.n	8005386 <HAL_SPI_Transmit+0x120>
 80053f0:	e080      	b.n	80054f4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_SPI_Transmit+0x19a>
 80053fa:	8afb      	ldrh	r3, [r7, #22]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d174      	bne.n	80054ea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	d912      	bls.n	8005430 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	881a      	ldrh	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	1c9a      	adds	r2, r3, #2
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b02      	subs	r3, #2
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800542e:	e05c      	b.n	80054ea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	7812      	ldrb	r2, [r2, #0]
 800543c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005456:	e048      	b.n	80054ea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b02      	cmp	r3, #2
 8005464:	d12b      	bne.n	80054be <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d912      	bls.n	8005496 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005474:	881a      	ldrh	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	1c9a      	adds	r2, r3, #2
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b02      	subs	r3, #2
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005494:	e029      	b.n	80054ea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054bc:	e015      	b.n	80054ea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054be:	f7fd f8e7 	bl	8002690 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d803      	bhi.n	80054d6 <HAL_SPI_Transmit+0x270>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054d4:	d102      	bne.n	80054dc <HAL_SPI_Transmit+0x276>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80054e8:	e029      	b.n	800553e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1b1      	bne.n	8005458 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f947 	bl	800578c <SPI_EndRxTxTransaction>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005512:	2300      	movs	r3, #0
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	e003      	b.n	800553e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005546:	7ffb      	ldrb	r3, [r7, #31]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005560:	f7fd f896 	bl	8002690 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	4413      	add	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005570:	f7fd f88e 	bl	8002690 <HAL_GetTick>
 8005574:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005576:	4b39      	ldr	r3, [pc, #228]	@ (800565c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	015b      	lsls	r3, r3, #5
 800557c:	0d1b      	lsrs	r3, r3, #20
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005586:	e054      	b.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800558e:	d050      	beq.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005590:	f7fd f87e 	bl	8002690 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	429a      	cmp	r2, r3
 800559e:	d902      	bls.n	80055a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d13d      	bne.n	8005622 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055be:	d111      	bne.n	80055e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c8:	d004      	beq.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055d2:	d107      	bne.n	80055e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ec:	d10f      	bne.n	800560e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800560c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e017      	b.n	8005652 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	3b01      	subs	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	429a      	cmp	r2, r3
 800564e:	d19b      	bne.n	8005588 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000004 	.word	0x20000004

08005660 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	@ 0x28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005672:	f7fd f80d 	bl	8002690 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	4413      	add	r3, r2
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005682:	f7fd f805 	bl	8002690 <HAL_GetTick>
 8005686:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005690:	4b3d      	ldr	r3, [pc, #244]	@ (8005788 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	00da      	lsls	r2, r3, #3
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	0d1b      	lsrs	r3, r3, #20
 80056a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80056a8:	e060      	b.n	800576c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056b0:	d107      	bne.n	80056c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c8:	d050      	beq.n	800576c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ca:	f7fc ffe1 	bl	8002690 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d902      	bls.n	80056e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d13d      	bne.n	800575c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056f8:	d111      	bne.n	800571e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005702:	d004      	beq.n	800570e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570c:	d107      	bne.n	800571e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800571c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005726:	d10f      	bne.n	8005748 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005746:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e010      	b.n	800577e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	3b01      	subs	r3, #1
 800576a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4013      	ands	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d196      	bne.n	80056aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3728      	adds	r7, #40	@ 0x28
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000004 	.word	0x20000004

0800578c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7ff ff5b 	bl	8005660 <SPI_WaitFifoStateUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b4:	f043 0220 	orr.w	r2, r3, #32
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e027      	b.n	8005810 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2200      	movs	r2, #0
 80057c8:	2180      	movs	r1, #128	@ 0x80
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff fec0 	bl	8005550 <SPI_WaitFlagStateUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e014      	b.n	8005810 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff ff34 	bl	8005660 <SPI_WaitFifoStateUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005802:	f043 0220 	orr.w	r2, r3, #32
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e000      	b.n	8005810 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e042      	b.n	80058b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7fc fd2f 	bl	80022a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2224      	movs	r2, #36	@ 0x24
 8005846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fb24 	bl	8005eb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f825 	bl	80058b8 <UART_SetConfig>
 800586e:	4603      	mov	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e01b      	b.n	80058b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fba3 	bl	8005ff4 <UART_CheckIdleState>
 80058ae:	4603      	mov	r3, r0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058bc:	b08c      	sub	sp, #48	@ 0x30
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	4313      	orrs	r3, r2
 80058de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4baa      	ldr	r3, [pc, #680]	@ (8005b90 <UART_SetConfig+0x2d8>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058f0:	430b      	orrs	r3, r1
 80058f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a9f      	ldr	r2, [pc, #636]	@ (8005b94 <UART_SetConfig+0x2dc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005920:	4313      	orrs	r3, r2
 8005922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800592e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005938:	430b      	orrs	r3, r1
 800593a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	f023 010f 	bic.w	r1, r3, #15
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a90      	ldr	r2, [pc, #576]	@ (8005b98 <UART_SetConfig+0x2e0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d125      	bne.n	80059a8 <UART_SetConfig+0xf0>
 800595c:	4b8f      	ldr	r3, [pc, #572]	@ (8005b9c <UART_SetConfig+0x2e4>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b03      	cmp	r3, #3
 8005968:	d81a      	bhi.n	80059a0 <UART_SetConfig+0xe8>
 800596a:	a201      	add	r2, pc, #4	@ (adr r2, 8005970 <UART_SetConfig+0xb8>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005981 	.word	0x08005981
 8005974:	08005991 	.word	0x08005991
 8005978:	08005989 	.word	0x08005989
 800597c:	08005999 	.word	0x08005999
 8005980:	2301      	movs	r3, #1
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005986:	e116      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005988:	2302      	movs	r3, #2
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598e:	e112      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005990:	2304      	movs	r3, #4
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005996:	e10e      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005998:	2308      	movs	r3, #8
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800599e:	e10a      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 80059a0:	2310      	movs	r3, #16
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a6:	e106      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a7c      	ldr	r2, [pc, #496]	@ (8005ba0 <UART_SetConfig+0x2e8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d138      	bne.n	8005a24 <UART_SetConfig+0x16c>
 80059b2:	4b7a      	ldr	r3, [pc, #488]	@ (8005b9c <UART_SetConfig+0x2e4>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b8:	f003 030c 	and.w	r3, r3, #12
 80059bc:	2b0c      	cmp	r3, #12
 80059be:	d82d      	bhi.n	8005a1c <UART_SetConfig+0x164>
 80059c0:	a201      	add	r2, pc, #4	@ (adr r2, 80059c8 <UART_SetConfig+0x110>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	080059fd 	.word	0x080059fd
 80059cc:	08005a1d 	.word	0x08005a1d
 80059d0:	08005a1d 	.word	0x08005a1d
 80059d4:	08005a1d 	.word	0x08005a1d
 80059d8:	08005a0d 	.word	0x08005a0d
 80059dc:	08005a1d 	.word	0x08005a1d
 80059e0:	08005a1d 	.word	0x08005a1d
 80059e4:	08005a1d 	.word	0x08005a1d
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	08005a1d 	.word	0x08005a1d
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a1d 	.word	0x08005a1d
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a02:	e0d8      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a04:	2302      	movs	r3, #2
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a0a:	e0d4      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a12:	e0d0      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a14:	2308      	movs	r3, #8
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a1a:	e0cc      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a22:	e0c8      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a5e      	ldr	r2, [pc, #376]	@ (8005ba4 <UART_SetConfig+0x2ec>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d125      	bne.n	8005a7a <UART_SetConfig+0x1c2>
 8005a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8005b9c <UART_SetConfig+0x2e4>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a38:	2b30      	cmp	r3, #48	@ 0x30
 8005a3a:	d016      	beq.n	8005a6a <UART_SetConfig+0x1b2>
 8005a3c:	2b30      	cmp	r3, #48	@ 0x30
 8005a3e:	d818      	bhi.n	8005a72 <UART_SetConfig+0x1ba>
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d00a      	beq.n	8005a5a <UART_SetConfig+0x1a2>
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d814      	bhi.n	8005a72 <UART_SetConfig+0x1ba>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <UART_SetConfig+0x19a>
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d008      	beq.n	8005a62 <UART_SetConfig+0x1aa>
 8005a50:	e00f      	b.n	8005a72 <UART_SetConfig+0x1ba>
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a58:	e0ad      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a60:	e0a9      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a62:	2304      	movs	r3, #4
 8005a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a68:	e0a5      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a70:	e0a1      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a72:	2310      	movs	r3, #16
 8005a74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a78:	e09d      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a4a      	ldr	r2, [pc, #296]	@ (8005ba8 <UART_SetConfig+0x2f0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d125      	bne.n	8005ad0 <UART_SetConfig+0x218>
 8005a84:	4b45      	ldr	r3, [pc, #276]	@ (8005b9c <UART_SetConfig+0x2e4>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a90:	d016      	beq.n	8005ac0 <UART_SetConfig+0x208>
 8005a92:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a94:	d818      	bhi.n	8005ac8 <UART_SetConfig+0x210>
 8005a96:	2b80      	cmp	r3, #128	@ 0x80
 8005a98:	d00a      	beq.n	8005ab0 <UART_SetConfig+0x1f8>
 8005a9a:	2b80      	cmp	r3, #128	@ 0x80
 8005a9c:	d814      	bhi.n	8005ac8 <UART_SetConfig+0x210>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <UART_SetConfig+0x1f0>
 8005aa2:	2b40      	cmp	r3, #64	@ 0x40
 8005aa4:	d008      	beq.n	8005ab8 <UART_SetConfig+0x200>
 8005aa6:	e00f      	b.n	8005ac8 <UART_SetConfig+0x210>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aae:	e082      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab6:	e07e      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005abe:	e07a      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac6:	e076      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ace:	e072      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a35      	ldr	r2, [pc, #212]	@ (8005bac <UART_SetConfig+0x2f4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d12a      	bne.n	8005b30 <UART_SetConfig+0x278>
 8005ada:	4b30      	ldr	r3, [pc, #192]	@ (8005b9c <UART_SetConfig+0x2e4>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae8:	d01a      	beq.n	8005b20 <UART_SetConfig+0x268>
 8005aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aee:	d81b      	bhi.n	8005b28 <UART_SetConfig+0x270>
 8005af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af4:	d00c      	beq.n	8005b10 <UART_SetConfig+0x258>
 8005af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005afa:	d815      	bhi.n	8005b28 <UART_SetConfig+0x270>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <UART_SetConfig+0x250>
 8005b00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b04:	d008      	beq.n	8005b18 <UART_SetConfig+0x260>
 8005b06:	e00f      	b.n	8005b28 <UART_SetConfig+0x270>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0e:	e052      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b10:	2302      	movs	r3, #2
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b16:	e04e      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1e:	e04a      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b20:	2308      	movs	r3, #8
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b26:	e046      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b2e:	e042      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a17      	ldr	r2, [pc, #92]	@ (8005b94 <UART_SetConfig+0x2dc>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d13a      	bne.n	8005bb0 <UART_SetConfig+0x2f8>
 8005b3a:	4b18      	ldr	r3, [pc, #96]	@ (8005b9c <UART_SetConfig+0x2e4>)
 8005b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b48:	d01a      	beq.n	8005b80 <UART_SetConfig+0x2c8>
 8005b4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b4e:	d81b      	bhi.n	8005b88 <UART_SetConfig+0x2d0>
 8005b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b54:	d00c      	beq.n	8005b70 <UART_SetConfig+0x2b8>
 8005b56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b5a:	d815      	bhi.n	8005b88 <UART_SetConfig+0x2d0>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <UART_SetConfig+0x2b0>
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b64:	d008      	beq.n	8005b78 <UART_SetConfig+0x2c0>
 8005b66:	e00f      	b.n	8005b88 <UART_SetConfig+0x2d0>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6e:	e022      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b70:	2302      	movs	r3, #2
 8005b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b76:	e01e      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7e:	e01a      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b80:	2308      	movs	r3, #8
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b86:	e016      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8e:	e012      	b.n	8005bb6 <UART_SetConfig+0x2fe>
 8005b90:	cfff69f3 	.word	0xcfff69f3
 8005b94:	40008000 	.word	0x40008000
 8005b98:	40013800 	.word	0x40013800
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	40004400 	.word	0x40004400
 8005ba4:	40004800 	.word	0x40004800
 8005ba8:	40004c00 	.word	0x40004c00
 8005bac:	40005000 	.word	0x40005000
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4aae      	ldr	r2, [pc, #696]	@ (8005e74 <UART_SetConfig+0x5bc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	f040 8097 	bne.w	8005cf0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d823      	bhi.n	8005c12 <UART_SetConfig+0x35a>
 8005bca:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd0 <UART_SetConfig+0x318>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005c13 	.word	0x08005c13
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c13 	.word	0x08005c13
 8005be0:	08005c03 	.word	0x08005c03
 8005be4:	08005c13 	.word	0x08005c13
 8005be8:	08005c13 	.word	0x08005c13
 8005bec:	08005c13 	.word	0x08005c13
 8005bf0:	08005c0b 	.word	0x08005c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fe fc90 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bfa:	e010      	b.n	8005c1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bfc:	4b9e      	ldr	r3, [pc, #632]	@ (8005e78 <UART_SetConfig+0x5c0>)
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c00:	e00d      	b.n	8005c1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c02:	f7fe fbf1 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005c06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c08:	e009      	b.n	8005c1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c10:	e005      	b.n	8005c1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8130 	beq.w	8005e86 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	4a94      	ldr	r2, [pc, #592]	@ (8005e7c <UART_SetConfig+0x5c4>)
 8005c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c30:	461a      	mov	r2, r3
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	4413      	add	r3, r2
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d305      	bcc.n	8005c56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d903      	bls.n	8005c5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c5c:	e113      	b.n	8005e86 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	2200      	movs	r2, #0
 8005c62:	60bb      	str	r3, [r7, #8]
 8005c64:	60fa      	str	r2, [r7, #12]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6a:	4a84      	ldr	r2, [pc, #528]	@ (8005e7c <UART_SetConfig+0x5c4>)
 8005c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2200      	movs	r2, #0
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c80:	f7fa fb0e 	bl	80002a0 <__aeabi_uldivmod>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	020b      	lsls	r3, r1, #8
 8005c96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c9a:	0202      	lsls	r2, r0, #8
 8005c9c:	6979      	ldr	r1, [r7, #20]
 8005c9e:	6849      	ldr	r1, [r1, #4]
 8005ca0:	0849      	lsrs	r1, r1, #1
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	eb12 0804 	adds.w	r8, r2, r4
 8005cac:	eb43 0905 	adc.w	r9, r3, r5
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	469a      	mov	sl, r3
 8005cb8:	4693      	mov	fp, r2
 8005cba:	4652      	mov	r2, sl
 8005cbc:	465b      	mov	r3, fp
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	f7fa faed 	bl	80002a0 <__aeabi_uldivmod>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4613      	mov	r3, r2
 8005ccc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cd4:	d308      	bcc.n	8005ce8 <UART_SetConfig+0x430>
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cdc:	d204      	bcs.n	8005ce8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a3a      	ldr	r2, [r7, #32]
 8005ce4:	60da      	str	r2, [r3, #12]
 8005ce6:	e0ce      	b.n	8005e86 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005cee:	e0ca      	b.n	8005e86 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf8:	d166      	bne.n	8005dc8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d827      	bhi.n	8005d52 <UART_SetConfig+0x49a>
 8005d02:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <UART_SetConfig+0x450>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d35 	.word	0x08005d35
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	08005d53 	.word	0x08005d53
 8005d18:	08005d43 	.word	0x08005d43
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d53 	.word	0x08005d53
 8005d24:	08005d53 	.word	0x08005d53
 8005d28:	08005d4b 	.word	0x08005d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7fe fbf4 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8005d30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d32:	e014      	b.n	8005d5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d34:	f7fe fc06 	bl	8004544 <HAL_RCC_GetPCLK2Freq>
 8005d38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d3a:	e010      	b.n	8005d5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8005e78 <UART_SetConfig+0x5c0>)
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d40:	e00d      	b.n	8005d5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d42:	f7fe fb51 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005d46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d48:	e009      	b.n	8005d5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d50:	e005      	b.n	8005d5e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8090 	beq.w	8005e86 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	4a44      	ldr	r2, [pc, #272]	@ (8005e7c <UART_SetConfig+0x5c4>)
 8005d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d78:	005a      	lsls	r2, r3, #1
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	441a      	add	r2, r3
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	2b0f      	cmp	r3, #15
 8005d90:	d916      	bls.n	8005dc0 <UART_SetConfig+0x508>
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d98:	d212      	bcs.n	8005dc0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f023 030f 	bic.w	r3, r3, #15
 8005da2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	8bfb      	ldrh	r3, [r7, #30]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	8bfa      	ldrh	r2, [r7, #30]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	e062      	b.n	8005e86 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005dc6:	e05e      	b.n	8005e86 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dc8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d828      	bhi.n	8005e22 <UART_SetConfig+0x56a>
 8005dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <UART_SetConfig+0x520>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005dfd 	.word	0x08005dfd
 8005ddc:	08005e05 	.word	0x08005e05
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	08005e23 	.word	0x08005e23
 8005de8:	08005e13 	.word	0x08005e13
 8005dec:	08005e23 	.word	0x08005e23
 8005df0:	08005e23 	.word	0x08005e23
 8005df4:	08005e23 	.word	0x08005e23
 8005df8:	08005e1b 	.word	0x08005e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dfc:	f7fe fb8c 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8005e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e02:	e014      	b.n	8005e2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e04:	f7fe fb9e 	bl	8004544 <HAL_RCC_GetPCLK2Freq>
 8005e08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e0a:	e010      	b.n	8005e2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005e78 <UART_SetConfig+0x5c0>)
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e10:	e00d      	b.n	8005e2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e12:	f7fe fae9 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005e16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e18:	e009      	b.n	8005e2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e20:	e005      	b.n	8005e2e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e2c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d028      	beq.n	8005e86 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	4a10      	ldr	r2, [pc, #64]	@ (8005e7c <UART_SetConfig+0x5c4>)
 8005e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	441a      	add	r2, r3
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e56:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2b0f      	cmp	r3, #15
 8005e5c:	d910      	bls.n	8005e80 <UART_SetConfig+0x5c8>
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e64:	d20c      	bcs.n	8005e80 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60da      	str	r2, [r3, #12]
 8005e70:	e009      	b.n	8005e86 <UART_SetConfig+0x5ce>
 8005e72:	bf00      	nop
 8005e74:	40008000 	.word	0x40008000
 8005e78:	00f42400 	.word	0x00f42400
 8005e7c:	08007518 	.word	0x08007518
      }
      else
      {
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005ea2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3730      	adds	r7, #48	@ 0x30
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00a      	beq.n	8005eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fae:	d10a      	bne.n	8005fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b098      	sub	sp, #96	@ 0x60
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006004:	f7fc fb44 	bl	8002690 <HAL_GetTick>
 8006008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b08      	cmp	r3, #8
 8006016:	d12f      	bne.n	8006078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006020:	2200      	movs	r2, #0
 8006022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f88e 	bl	8006148 <UART_WaitOnFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d022      	beq.n	8006078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006046:	653b      	str	r3, [r7, #80]	@ 0x50
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006050:	647b      	str	r3, [r7, #68]	@ 0x44
 8006052:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800605e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e6      	bne.n	8006032 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e063      	b.n	8006140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d149      	bne.n	800611a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006086:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800608e:	2200      	movs	r2, #0
 8006090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f857 	bl	8006148 <UART_WaitOnFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d03c      	beq.n	800611a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	623b      	str	r3, [r7, #32]
   return(result);
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060be:	633b      	str	r3, [r7, #48]	@ 0x30
 80060c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e6      	bne.n	80060a0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060f2:	61fa      	str	r2, [r7, #28]
 80060f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	69b9      	ldr	r1, [r7, #24]
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e012      	b.n	8006140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3758      	adds	r7, #88	@ 0x58
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006158:	e049      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006160:	d045      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006162:	f7fc fa95 	bl	8002690 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <UART_WaitOnFlagUntilTimeout+0x30>
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e048      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d031      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b08      	cmp	r3, #8
 8006196:	d110      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2208      	movs	r2, #8
 800619e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f838 	bl	8006216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2208      	movs	r2, #8
 80061aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e029      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c8:	d111      	bne.n	80061ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f81e 	bl	8006216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e00f      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4013      	ands	r3, r2
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	bf0c      	ite	eq
 80061fe:	2301      	moveq	r3, #1
 8006200:	2300      	movne	r3, #0
 8006202:	b2db      	uxtb	r3, r3
 8006204:	461a      	mov	r2, r3
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	429a      	cmp	r2, r3
 800620a:	d0a6      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006216:	b480      	push	{r7}
 8006218:	b095      	sub	sp, #84	@ 0x54
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623c:	643b      	str	r3, [r7, #64]	@ 0x40
 800623e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e6      	bne.n	800621e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006266:	f023 0301 	bic.w	r3, r3, #1
 800626a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006276:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800627a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e3      	bne.n	8006250 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d118      	bne.n	80062c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	60bb      	str	r3, [r7, #8]
   return(result);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f023 0310 	bic.w	r3, r3, #16
 80062a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ae:	61bb      	str	r3, [r7, #24]
 80062b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6979      	ldr	r1, [r7, #20]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	613b      	str	r3, [r7, #16]
   return(result);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e6      	bne.n	8006290 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062d6:	bf00      	nop
 80062d8:	3754      	adds	r7, #84	@ 0x54
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e027      	b.n	8006348 <HAL_UARTEx_DisableFifoMode+0x66>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2224      	movs	r2, #36	@ 0x24
 8006304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006326:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006368:	2302      	movs	r3, #2
 800636a:	e02d      	b.n	80063c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2224      	movs	r2, #36	@ 0x24
 8006378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0201 	bic.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f84f 	bl	800644c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e02d      	b.n	8006444 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2224      	movs	r2, #36	@ 0x24
 80063f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0201 	bic.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f811 	bl	800644c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006458:	2b00      	cmp	r3, #0
 800645a:	d108      	bne.n	800646e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800646c:	e031      	b.n	80064d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800646e:	2308      	movs	r3, #8
 8006470:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006472:	2308      	movs	r3, #8
 8006474:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	0e5b      	lsrs	r3, r3, #25
 800647e:	b2db      	uxtb	r3, r3
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	0f5b      	lsrs	r3, r3, #29
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	7b3a      	ldrb	r2, [r7, #12]
 800649a:	4911      	ldr	r1, [pc, #68]	@ (80064e0 <UARTEx_SetNbDataToProcess+0x94>)
 800649c:	5c8a      	ldrb	r2, [r1, r2]
 800649e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064a2:	7b3a      	ldrb	r2, [r7, #12]
 80064a4:	490f      	ldr	r1, [pc, #60]	@ (80064e4 <UARTEx_SetNbDataToProcess+0x98>)
 80064a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	7b7a      	ldrb	r2, [r7, #13]
 80064b8:	4909      	ldr	r1, [pc, #36]	@ (80064e0 <UARTEx_SetNbDataToProcess+0x94>)
 80064ba:	5c8a      	ldrb	r2, [r1, r2]
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064c0:	7b7a      	ldrb	r2, [r7, #13]
 80064c2:	4908      	ldr	r1, [pc, #32]	@ (80064e4 <UARTEx_SetNbDataToProcess+0x98>)
 80064c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	08007530 	.word	0x08007530
 80064e4:	08007538 	.word	0x08007538

080064e8 <siprintf>:
 80064e8:	b40e      	push	{r1, r2, r3}
 80064ea:	b500      	push	{lr}
 80064ec:	b09c      	sub	sp, #112	@ 0x70
 80064ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80064f0:	9002      	str	r0, [sp, #8]
 80064f2:	9006      	str	r0, [sp, #24]
 80064f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064f8:	4809      	ldr	r0, [pc, #36]	@ (8006520 <siprintf+0x38>)
 80064fa:	9107      	str	r1, [sp, #28]
 80064fc:	9104      	str	r1, [sp, #16]
 80064fe:	4909      	ldr	r1, [pc, #36]	@ (8006524 <siprintf+0x3c>)
 8006500:	f853 2b04 	ldr.w	r2, [r3], #4
 8006504:	9105      	str	r1, [sp, #20]
 8006506:	6800      	ldr	r0, [r0, #0]
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	a902      	add	r1, sp, #8
 800650c:	f000 f89c 	bl	8006648 <_svfiprintf_r>
 8006510:	9b02      	ldr	r3, [sp, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	b01c      	add	sp, #112	@ 0x70
 8006518:	f85d eb04 	ldr.w	lr, [sp], #4
 800651c:	b003      	add	sp, #12
 800651e:	4770      	bx	lr
 8006520:	20000010 	.word	0x20000010
 8006524:	ffff0208 	.word	0xffff0208

08006528 <memset>:
 8006528:	4402      	add	r2, r0
 800652a:	4603      	mov	r3, r0
 800652c:	4293      	cmp	r3, r2
 800652e:	d100      	bne.n	8006532 <memset+0xa>
 8006530:	4770      	bx	lr
 8006532:	f803 1b01 	strb.w	r1, [r3], #1
 8006536:	e7f9      	b.n	800652c <memset+0x4>

08006538 <__errno>:
 8006538:	4b01      	ldr	r3, [pc, #4]	@ (8006540 <__errno+0x8>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000010 	.word	0x20000010

08006544 <__libc_init_array>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	4d0d      	ldr	r5, [pc, #52]	@ (800657c <__libc_init_array+0x38>)
 8006548:	4c0d      	ldr	r4, [pc, #52]	@ (8006580 <__libc_init_array+0x3c>)
 800654a:	1b64      	subs	r4, r4, r5
 800654c:	10a4      	asrs	r4, r4, #2
 800654e:	2600      	movs	r6, #0
 8006550:	42a6      	cmp	r6, r4
 8006552:	d109      	bne.n	8006568 <__libc_init_array+0x24>
 8006554:	4d0b      	ldr	r5, [pc, #44]	@ (8006584 <__libc_init_array+0x40>)
 8006556:	4c0c      	ldr	r4, [pc, #48]	@ (8006588 <__libc_init_array+0x44>)
 8006558:	f000 fc66 	bl	8006e28 <_init>
 800655c:	1b64      	subs	r4, r4, r5
 800655e:	10a4      	asrs	r4, r4, #2
 8006560:	2600      	movs	r6, #0
 8006562:	42a6      	cmp	r6, r4
 8006564:	d105      	bne.n	8006572 <__libc_init_array+0x2e>
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	f855 3b04 	ldr.w	r3, [r5], #4
 800656c:	4798      	blx	r3
 800656e:	3601      	adds	r6, #1
 8006570:	e7ee      	b.n	8006550 <__libc_init_array+0xc>
 8006572:	f855 3b04 	ldr.w	r3, [r5], #4
 8006576:	4798      	blx	r3
 8006578:	3601      	adds	r6, #1
 800657a:	e7f2      	b.n	8006562 <__libc_init_array+0x1e>
 800657c:	0800757c 	.word	0x0800757c
 8006580:	0800757c 	.word	0x0800757c
 8006584:	0800757c 	.word	0x0800757c
 8006588:	08007580 	.word	0x08007580

0800658c <__retarget_lock_acquire_recursive>:
 800658c:	4770      	bx	lr

0800658e <__retarget_lock_release_recursive>:
 800658e:	4770      	bx	lr

08006590 <__ssputs_r>:
 8006590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006594:	688e      	ldr	r6, [r1, #8]
 8006596:	461f      	mov	r7, r3
 8006598:	42be      	cmp	r6, r7
 800659a:	680b      	ldr	r3, [r1, #0]
 800659c:	4682      	mov	sl, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	4690      	mov	r8, r2
 80065a2:	d82d      	bhi.n	8006600 <__ssputs_r+0x70>
 80065a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065ac:	d026      	beq.n	80065fc <__ssputs_r+0x6c>
 80065ae:	6965      	ldr	r5, [r4, #20]
 80065b0:	6909      	ldr	r1, [r1, #16]
 80065b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065b6:	eba3 0901 	sub.w	r9, r3, r1
 80065ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065be:	1c7b      	adds	r3, r7, #1
 80065c0:	444b      	add	r3, r9
 80065c2:	106d      	asrs	r5, r5, #1
 80065c4:	429d      	cmp	r5, r3
 80065c6:	bf38      	it	cc
 80065c8:	461d      	movcc	r5, r3
 80065ca:	0553      	lsls	r3, r2, #21
 80065cc:	d527      	bpl.n	800661e <__ssputs_r+0x8e>
 80065ce:	4629      	mov	r1, r5
 80065d0:	f000 f958 	bl	8006884 <_malloc_r>
 80065d4:	4606      	mov	r6, r0
 80065d6:	b360      	cbz	r0, 8006632 <__ssputs_r+0xa2>
 80065d8:	6921      	ldr	r1, [r4, #16]
 80065da:	464a      	mov	r2, r9
 80065dc:	f000 fbc4 	bl	8006d68 <memcpy>
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80065e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	6126      	str	r6, [r4, #16]
 80065ee:	6165      	str	r5, [r4, #20]
 80065f0:	444e      	add	r6, r9
 80065f2:	eba5 0509 	sub.w	r5, r5, r9
 80065f6:	6026      	str	r6, [r4, #0]
 80065f8:	60a5      	str	r5, [r4, #8]
 80065fa:	463e      	mov	r6, r7
 80065fc:	42be      	cmp	r6, r7
 80065fe:	d900      	bls.n	8006602 <__ssputs_r+0x72>
 8006600:	463e      	mov	r6, r7
 8006602:	6820      	ldr	r0, [r4, #0]
 8006604:	4632      	mov	r2, r6
 8006606:	4641      	mov	r1, r8
 8006608:	f000 fb84 	bl	8006d14 <memmove>
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	1b9b      	subs	r3, r3, r6
 8006610:	60a3      	str	r3, [r4, #8]
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	4433      	add	r3, r6
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	2000      	movs	r0, #0
 800661a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661e:	462a      	mov	r2, r5
 8006620:	f000 fb4a 	bl	8006cb8 <_realloc_r>
 8006624:	4606      	mov	r6, r0
 8006626:	2800      	cmp	r0, #0
 8006628:	d1e0      	bne.n	80065ec <__ssputs_r+0x5c>
 800662a:	6921      	ldr	r1, [r4, #16]
 800662c:	4650      	mov	r0, sl
 800662e:	f000 fba9 	bl	8006d84 <_free_r>
 8006632:	230c      	movs	r3, #12
 8006634:	f8ca 3000 	str.w	r3, [sl]
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006644:	e7e9      	b.n	800661a <__ssputs_r+0x8a>
	...

08006648 <_svfiprintf_r>:
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	4698      	mov	r8, r3
 800664e:	898b      	ldrh	r3, [r1, #12]
 8006650:	061b      	lsls	r3, r3, #24
 8006652:	b09d      	sub	sp, #116	@ 0x74
 8006654:	4607      	mov	r7, r0
 8006656:	460d      	mov	r5, r1
 8006658:	4614      	mov	r4, r2
 800665a:	d510      	bpl.n	800667e <_svfiprintf_r+0x36>
 800665c:	690b      	ldr	r3, [r1, #16]
 800665e:	b973      	cbnz	r3, 800667e <_svfiprintf_r+0x36>
 8006660:	2140      	movs	r1, #64	@ 0x40
 8006662:	f000 f90f 	bl	8006884 <_malloc_r>
 8006666:	6028      	str	r0, [r5, #0]
 8006668:	6128      	str	r0, [r5, #16]
 800666a:	b930      	cbnz	r0, 800667a <_svfiprintf_r+0x32>
 800666c:	230c      	movs	r3, #12
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006674:	b01d      	add	sp, #116	@ 0x74
 8006676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667a:	2340      	movs	r3, #64	@ 0x40
 800667c:	616b      	str	r3, [r5, #20]
 800667e:	2300      	movs	r3, #0
 8006680:	9309      	str	r3, [sp, #36]	@ 0x24
 8006682:	2320      	movs	r3, #32
 8006684:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006688:	f8cd 800c 	str.w	r8, [sp, #12]
 800668c:	2330      	movs	r3, #48	@ 0x30
 800668e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800682c <_svfiprintf_r+0x1e4>
 8006692:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006696:	f04f 0901 	mov.w	r9, #1
 800669a:	4623      	mov	r3, r4
 800669c:	469a      	mov	sl, r3
 800669e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066a2:	b10a      	cbz	r2, 80066a8 <_svfiprintf_r+0x60>
 80066a4:	2a25      	cmp	r2, #37	@ 0x25
 80066a6:	d1f9      	bne.n	800669c <_svfiprintf_r+0x54>
 80066a8:	ebba 0b04 	subs.w	fp, sl, r4
 80066ac:	d00b      	beq.n	80066c6 <_svfiprintf_r+0x7e>
 80066ae:	465b      	mov	r3, fp
 80066b0:	4622      	mov	r2, r4
 80066b2:	4629      	mov	r1, r5
 80066b4:	4638      	mov	r0, r7
 80066b6:	f7ff ff6b 	bl	8006590 <__ssputs_r>
 80066ba:	3001      	adds	r0, #1
 80066bc:	f000 80a7 	beq.w	800680e <_svfiprintf_r+0x1c6>
 80066c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c2:	445a      	add	r2, fp
 80066c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80066c6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 809f 	beq.w	800680e <_svfiprintf_r+0x1c6>
 80066d0:	2300      	movs	r3, #0
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066da:	f10a 0a01 	add.w	sl, sl, #1
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	9307      	str	r3, [sp, #28]
 80066e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80066e8:	4654      	mov	r4, sl
 80066ea:	2205      	movs	r2, #5
 80066ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f0:	484e      	ldr	r0, [pc, #312]	@ (800682c <_svfiprintf_r+0x1e4>)
 80066f2:	f7f9 fd85 	bl	8000200 <memchr>
 80066f6:	9a04      	ldr	r2, [sp, #16]
 80066f8:	b9d8      	cbnz	r0, 8006732 <_svfiprintf_r+0xea>
 80066fa:	06d0      	lsls	r0, r2, #27
 80066fc:	bf44      	itt	mi
 80066fe:	2320      	movmi	r3, #32
 8006700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006704:	0711      	lsls	r1, r2, #28
 8006706:	bf44      	itt	mi
 8006708:	232b      	movmi	r3, #43	@ 0x2b
 800670a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800670e:	f89a 3000 	ldrb.w	r3, [sl]
 8006712:	2b2a      	cmp	r3, #42	@ 0x2a
 8006714:	d015      	beq.n	8006742 <_svfiprintf_r+0xfa>
 8006716:	9a07      	ldr	r2, [sp, #28]
 8006718:	4654      	mov	r4, sl
 800671a:	2000      	movs	r0, #0
 800671c:	f04f 0c0a 	mov.w	ip, #10
 8006720:	4621      	mov	r1, r4
 8006722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006726:	3b30      	subs	r3, #48	@ 0x30
 8006728:	2b09      	cmp	r3, #9
 800672a:	d94b      	bls.n	80067c4 <_svfiprintf_r+0x17c>
 800672c:	b1b0      	cbz	r0, 800675c <_svfiprintf_r+0x114>
 800672e:	9207      	str	r2, [sp, #28]
 8006730:	e014      	b.n	800675c <_svfiprintf_r+0x114>
 8006732:	eba0 0308 	sub.w	r3, r0, r8
 8006736:	fa09 f303 	lsl.w	r3, r9, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	9304      	str	r3, [sp, #16]
 800673e:	46a2      	mov	sl, r4
 8006740:	e7d2      	b.n	80066e8 <_svfiprintf_r+0xa0>
 8006742:	9b03      	ldr	r3, [sp, #12]
 8006744:	1d19      	adds	r1, r3, #4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	9103      	str	r1, [sp, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	bfbb      	ittet	lt
 800674e:	425b      	neglt	r3, r3
 8006750:	f042 0202 	orrlt.w	r2, r2, #2
 8006754:	9307      	strge	r3, [sp, #28]
 8006756:	9307      	strlt	r3, [sp, #28]
 8006758:	bfb8      	it	lt
 800675a:	9204      	strlt	r2, [sp, #16]
 800675c:	7823      	ldrb	r3, [r4, #0]
 800675e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006760:	d10a      	bne.n	8006778 <_svfiprintf_r+0x130>
 8006762:	7863      	ldrb	r3, [r4, #1]
 8006764:	2b2a      	cmp	r3, #42	@ 0x2a
 8006766:	d132      	bne.n	80067ce <_svfiprintf_r+0x186>
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	1d1a      	adds	r2, r3, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	9203      	str	r2, [sp, #12]
 8006770:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006774:	3402      	adds	r4, #2
 8006776:	9305      	str	r3, [sp, #20]
 8006778:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800683c <_svfiprintf_r+0x1f4>
 800677c:	7821      	ldrb	r1, [r4, #0]
 800677e:	2203      	movs	r2, #3
 8006780:	4650      	mov	r0, sl
 8006782:	f7f9 fd3d 	bl	8000200 <memchr>
 8006786:	b138      	cbz	r0, 8006798 <_svfiprintf_r+0x150>
 8006788:	9b04      	ldr	r3, [sp, #16]
 800678a:	eba0 000a 	sub.w	r0, r0, sl
 800678e:	2240      	movs	r2, #64	@ 0x40
 8006790:	4082      	lsls	r2, r0
 8006792:	4313      	orrs	r3, r2
 8006794:	3401      	adds	r4, #1
 8006796:	9304      	str	r3, [sp, #16]
 8006798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679c:	4824      	ldr	r0, [pc, #144]	@ (8006830 <_svfiprintf_r+0x1e8>)
 800679e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067a2:	2206      	movs	r2, #6
 80067a4:	f7f9 fd2c 	bl	8000200 <memchr>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d036      	beq.n	800681a <_svfiprintf_r+0x1d2>
 80067ac:	4b21      	ldr	r3, [pc, #132]	@ (8006834 <_svfiprintf_r+0x1ec>)
 80067ae:	bb1b      	cbnz	r3, 80067f8 <_svfiprintf_r+0x1b0>
 80067b0:	9b03      	ldr	r3, [sp, #12]
 80067b2:	3307      	adds	r3, #7
 80067b4:	f023 0307 	bic.w	r3, r3, #7
 80067b8:	3308      	adds	r3, #8
 80067ba:	9303      	str	r3, [sp, #12]
 80067bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067be:	4433      	add	r3, r6
 80067c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80067c2:	e76a      	b.n	800669a <_svfiprintf_r+0x52>
 80067c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80067c8:	460c      	mov	r4, r1
 80067ca:	2001      	movs	r0, #1
 80067cc:	e7a8      	b.n	8006720 <_svfiprintf_r+0xd8>
 80067ce:	2300      	movs	r3, #0
 80067d0:	3401      	adds	r4, #1
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	4619      	mov	r1, r3
 80067d6:	f04f 0c0a 	mov.w	ip, #10
 80067da:	4620      	mov	r0, r4
 80067dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067e0:	3a30      	subs	r2, #48	@ 0x30
 80067e2:	2a09      	cmp	r2, #9
 80067e4:	d903      	bls.n	80067ee <_svfiprintf_r+0x1a6>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0c6      	beq.n	8006778 <_svfiprintf_r+0x130>
 80067ea:	9105      	str	r1, [sp, #20]
 80067ec:	e7c4      	b.n	8006778 <_svfiprintf_r+0x130>
 80067ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80067f2:	4604      	mov	r4, r0
 80067f4:	2301      	movs	r3, #1
 80067f6:	e7f0      	b.n	80067da <_svfiprintf_r+0x192>
 80067f8:	ab03      	add	r3, sp, #12
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	462a      	mov	r2, r5
 80067fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006838 <_svfiprintf_r+0x1f0>)
 8006800:	a904      	add	r1, sp, #16
 8006802:	4638      	mov	r0, r7
 8006804:	f3af 8000 	nop.w
 8006808:	1c42      	adds	r2, r0, #1
 800680a:	4606      	mov	r6, r0
 800680c:	d1d6      	bne.n	80067bc <_svfiprintf_r+0x174>
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	065b      	lsls	r3, r3, #25
 8006812:	f53f af2d 	bmi.w	8006670 <_svfiprintf_r+0x28>
 8006816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006818:	e72c      	b.n	8006674 <_svfiprintf_r+0x2c>
 800681a:	ab03      	add	r3, sp, #12
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	462a      	mov	r2, r5
 8006820:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <_svfiprintf_r+0x1f0>)
 8006822:	a904      	add	r1, sp, #16
 8006824:	4638      	mov	r0, r7
 8006826:	f000 f91b 	bl	8006a60 <_printf_i>
 800682a:	e7ed      	b.n	8006808 <_svfiprintf_r+0x1c0>
 800682c:	08007540 	.word	0x08007540
 8006830:	0800754a 	.word	0x0800754a
 8006834:	00000000 	.word	0x00000000
 8006838:	08006591 	.word	0x08006591
 800683c:	08007546 	.word	0x08007546

08006840 <sbrk_aligned>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	4e0f      	ldr	r6, [pc, #60]	@ (8006880 <sbrk_aligned+0x40>)
 8006844:	460c      	mov	r4, r1
 8006846:	6831      	ldr	r1, [r6, #0]
 8006848:	4605      	mov	r5, r0
 800684a:	b911      	cbnz	r1, 8006852 <sbrk_aligned+0x12>
 800684c:	f000 fa7c 	bl	8006d48 <_sbrk_r>
 8006850:	6030      	str	r0, [r6, #0]
 8006852:	4621      	mov	r1, r4
 8006854:	4628      	mov	r0, r5
 8006856:	f000 fa77 	bl	8006d48 <_sbrk_r>
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	d103      	bne.n	8006866 <sbrk_aligned+0x26>
 800685e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006862:	4620      	mov	r0, r4
 8006864:	bd70      	pop	{r4, r5, r6, pc}
 8006866:	1cc4      	adds	r4, r0, #3
 8006868:	f024 0403 	bic.w	r4, r4, #3
 800686c:	42a0      	cmp	r0, r4
 800686e:	d0f8      	beq.n	8006862 <sbrk_aligned+0x22>
 8006870:	1a21      	subs	r1, r4, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f000 fa68 	bl	8006d48 <_sbrk_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d1f2      	bne.n	8006862 <sbrk_aligned+0x22>
 800687c:	e7ef      	b.n	800685e <sbrk_aligned+0x1e>
 800687e:	bf00      	nop
 8006880:	20000680 	.word	0x20000680

08006884 <_malloc_r>:
 8006884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006888:	1ccd      	adds	r5, r1, #3
 800688a:	f025 0503 	bic.w	r5, r5, #3
 800688e:	3508      	adds	r5, #8
 8006890:	2d0c      	cmp	r5, #12
 8006892:	bf38      	it	cc
 8006894:	250c      	movcc	r5, #12
 8006896:	2d00      	cmp	r5, #0
 8006898:	4606      	mov	r6, r0
 800689a:	db01      	blt.n	80068a0 <_malloc_r+0x1c>
 800689c:	42a9      	cmp	r1, r5
 800689e:	d904      	bls.n	80068aa <_malloc_r+0x26>
 80068a0:	230c      	movs	r3, #12
 80068a2:	6033      	str	r3, [r6, #0]
 80068a4:	2000      	movs	r0, #0
 80068a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006980 <_malloc_r+0xfc>
 80068ae:	f000 f9f7 	bl	8006ca0 <__malloc_lock>
 80068b2:	f8d8 3000 	ldr.w	r3, [r8]
 80068b6:	461c      	mov	r4, r3
 80068b8:	bb44      	cbnz	r4, 800690c <_malloc_r+0x88>
 80068ba:	4629      	mov	r1, r5
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff ffbf 	bl	8006840 <sbrk_aligned>
 80068c2:	1c43      	adds	r3, r0, #1
 80068c4:	4604      	mov	r4, r0
 80068c6:	d158      	bne.n	800697a <_malloc_r+0xf6>
 80068c8:	f8d8 4000 	ldr.w	r4, [r8]
 80068cc:	4627      	mov	r7, r4
 80068ce:	2f00      	cmp	r7, #0
 80068d0:	d143      	bne.n	800695a <_malloc_r+0xd6>
 80068d2:	2c00      	cmp	r4, #0
 80068d4:	d04b      	beq.n	800696e <_malloc_r+0xea>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	4639      	mov	r1, r7
 80068da:	4630      	mov	r0, r6
 80068dc:	eb04 0903 	add.w	r9, r4, r3
 80068e0:	f000 fa32 	bl	8006d48 <_sbrk_r>
 80068e4:	4581      	cmp	r9, r0
 80068e6:	d142      	bne.n	800696e <_malloc_r+0xea>
 80068e8:	6821      	ldr	r1, [r4, #0]
 80068ea:	1a6d      	subs	r5, r5, r1
 80068ec:	4629      	mov	r1, r5
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7ff ffa6 	bl	8006840 <sbrk_aligned>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d03a      	beq.n	800696e <_malloc_r+0xea>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	442b      	add	r3, r5
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	bb62      	cbnz	r2, 8006960 <_malloc_r+0xdc>
 8006906:	f8c8 7000 	str.w	r7, [r8]
 800690a:	e00f      	b.n	800692c <_malloc_r+0xa8>
 800690c:	6822      	ldr	r2, [r4, #0]
 800690e:	1b52      	subs	r2, r2, r5
 8006910:	d420      	bmi.n	8006954 <_malloc_r+0xd0>
 8006912:	2a0b      	cmp	r2, #11
 8006914:	d917      	bls.n	8006946 <_malloc_r+0xc2>
 8006916:	1961      	adds	r1, r4, r5
 8006918:	42a3      	cmp	r3, r4
 800691a:	6025      	str	r5, [r4, #0]
 800691c:	bf18      	it	ne
 800691e:	6059      	strne	r1, [r3, #4]
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	bf08      	it	eq
 8006924:	f8c8 1000 	streq.w	r1, [r8]
 8006928:	5162      	str	r2, [r4, r5]
 800692a:	604b      	str	r3, [r1, #4]
 800692c:	4630      	mov	r0, r6
 800692e:	f000 f9bd 	bl	8006cac <__malloc_unlock>
 8006932:	f104 000b 	add.w	r0, r4, #11
 8006936:	1d23      	adds	r3, r4, #4
 8006938:	f020 0007 	bic.w	r0, r0, #7
 800693c:	1ac2      	subs	r2, r0, r3
 800693e:	bf1c      	itt	ne
 8006940:	1a1b      	subne	r3, r3, r0
 8006942:	50a3      	strne	r3, [r4, r2]
 8006944:	e7af      	b.n	80068a6 <_malloc_r+0x22>
 8006946:	6862      	ldr	r2, [r4, #4]
 8006948:	42a3      	cmp	r3, r4
 800694a:	bf0c      	ite	eq
 800694c:	f8c8 2000 	streq.w	r2, [r8]
 8006950:	605a      	strne	r2, [r3, #4]
 8006952:	e7eb      	b.n	800692c <_malloc_r+0xa8>
 8006954:	4623      	mov	r3, r4
 8006956:	6864      	ldr	r4, [r4, #4]
 8006958:	e7ae      	b.n	80068b8 <_malloc_r+0x34>
 800695a:	463c      	mov	r4, r7
 800695c:	687f      	ldr	r7, [r7, #4]
 800695e:	e7b6      	b.n	80068ce <_malloc_r+0x4a>
 8006960:	461a      	mov	r2, r3
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	42a3      	cmp	r3, r4
 8006966:	d1fb      	bne.n	8006960 <_malloc_r+0xdc>
 8006968:	2300      	movs	r3, #0
 800696a:	6053      	str	r3, [r2, #4]
 800696c:	e7de      	b.n	800692c <_malloc_r+0xa8>
 800696e:	230c      	movs	r3, #12
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	4630      	mov	r0, r6
 8006974:	f000 f99a 	bl	8006cac <__malloc_unlock>
 8006978:	e794      	b.n	80068a4 <_malloc_r+0x20>
 800697a:	6005      	str	r5, [r0, #0]
 800697c:	e7d6      	b.n	800692c <_malloc_r+0xa8>
 800697e:	bf00      	nop
 8006980:	20000684 	.word	0x20000684

08006984 <_printf_common>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	4616      	mov	r6, r2
 800698a:	4698      	mov	r8, r3
 800698c:	688a      	ldr	r2, [r1, #8]
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006994:	4293      	cmp	r3, r2
 8006996:	bfb8      	it	lt
 8006998:	4613      	movlt	r3, r2
 800699a:	6033      	str	r3, [r6, #0]
 800699c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069a0:	4607      	mov	r7, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	b10a      	cbz	r2, 80069aa <_printf_common+0x26>
 80069a6:	3301      	adds	r3, #1
 80069a8:	6033      	str	r3, [r6, #0]
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	0699      	lsls	r1, r3, #26
 80069ae:	bf42      	ittt	mi
 80069b0:	6833      	ldrmi	r3, [r6, #0]
 80069b2:	3302      	addmi	r3, #2
 80069b4:	6033      	strmi	r3, [r6, #0]
 80069b6:	6825      	ldr	r5, [r4, #0]
 80069b8:	f015 0506 	ands.w	r5, r5, #6
 80069bc:	d106      	bne.n	80069cc <_printf_common+0x48>
 80069be:	f104 0a19 	add.w	sl, r4, #25
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	6832      	ldr	r2, [r6, #0]
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dc26      	bgt.n	8006a1a <_printf_common+0x96>
 80069cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069d0:	6822      	ldr	r2, [r4, #0]
 80069d2:	3b00      	subs	r3, #0
 80069d4:	bf18      	it	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	0692      	lsls	r2, r2, #26
 80069da:	d42b      	bmi.n	8006a34 <_printf_common+0xb0>
 80069dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069e0:	4641      	mov	r1, r8
 80069e2:	4638      	mov	r0, r7
 80069e4:	47c8      	blx	r9
 80069e6:	3001      	adds	r0, #1
 80069e8:	d01e      	beq.n	8006a28 <_printf_common+0xa4>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	f003 0306 	and.w	r3, r3, #6
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	bf02      	ittt	eq
 80069f6:	68e5      	ldreq	r5, [r4, #12]
 80069f8:	6833      	ldreq	r3, [r6, #0]
 80069fa:	1aed      	subeq	r5, r5, r3
 80069fc:	68a3      	ldr	r3, [r4, #8]
 80069fe:	bf0c      	ite	eq
 8006a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a04:	2500      	movne	r5, #0
 8006a06:	4293      	cmp	r3, r2
 8006a08:	bfc4      	itt	gt
 8006a0a:	1a9b      	subgt	r3, r3, r2
 8006a0c:	18ed      	addgt	r5, r5, r3
 8006a0e:	2600      	movs	r6, #0
 8006a10:	341a      	adds	r4, #26
 8006a12:	42b5      	cmp	r5, r6
 8006a14:	d11a      	bne.n	8006a4c <_printf_common+0xc8>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e008      	b.n	8006a2c <_printf_common+0xa8>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4652      	mov	r2, sl
 8006a1e:	4641      	mov	r1, r8
 8006a20:	4638      	mov	r0, r7
 8006a22:	47c8      	blx	r9
 8006a24:	3001      	adds	r0, #1
 8006a26:	d103      	bne.n	8006a30 <_printf_common+0xac>
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a30:	3501      	adds	r5, #1
 8006a32:	e7c6      	b.n	80069c2 <_printf_common+0x3e>
 8006a34:	18e1      	adds	r1, r4, r3
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	2030      	movs	r0, #48	@ 0x30
 8006a3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a3e:	4422      	add	r2, r4
 8006a40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a48:	3302      	adds	r3, #2
 8006a4a:	e7c7      	b.n	80069dc <_printf_common+0x58>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4622      	mov	r2, r4
 8006a50:	4641      	mov	r1, r8
 8006a52:	4638      	mov	r0, r7
 8006a54:	47c8      	blx	r9
 8006a56:	3001      	adds	r0, #1
 8006a58:	d0e6      	beq.n	8006a28 <_printf_common+0xa4>
 8006a5a:	3601      	adds	r6, #1
 8006a5c:	e7d9      	b.n	8006a12 <_printf_common+0x8e>
	...

08006a60 <_printf_i>:
 8006a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	7e0f      	ldrb	r7, [r1, #24]
 8006a66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a68:	2f78      	cmp	r7, #120	@ 0x78
 8006a6a:	4691      	mov	r9, r2
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	469a      	mov	sl, r3
 8006a72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a76:	d807      	bhi.n	8006a88 <_printf_i+0x28>
 8006a78:	2f62      	cmp	r7, #98	@ 0x62
 8006a7a:	d80a      	bhi.n	8006a92 <_printf_i+0x32>
 8006a7c:	2f00      	cmp	r7, #0
 8006a7e:	f000 80d2 	beq.w	8006c26 <_printf_i+0x1c6>
 8006a82:	2f58      	cmp	r7, #88	@ 0x58
 8006a84:	f000 80b9 	beq.w	8006bfa <_printf_i+0x19a>
 8006a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a90:	e03a      	b.n	8006b08 <_printf_i+0xa8>
 8006a92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a96:	2b15      	cmp	r3, #21
 8006a98:	d8f6      	bhi.n	8006a88 <_printf_i+0x28>
 8006a9a:	a101      	add	r1, pc, #4	@ (adr r1, 8006aa0 <_printf_i+0x40>)
 8006a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa0:	08006af9 	.word	0x08006af9
 8006aa4:	08006b0d 	.word	0x08006b0d
 8006aa8:	08006a89 	.word	0x08006a89
 8006aac:	08006a89 	.word	0x08006a89
 8006ab0:	08006a89 	.word	0x08006a89
 8006ab4:	08006a89 	.word	0x08006a89
 8006ab8:	08006b0d 	.word	0x08006b0d
 8006abc:	08006a89 	.word	0x08006a89
 8006ac0:	08006a89 	.word	0x08006a89
 8006ac4:	08006a89 	.word	0x08006a89
 8006ac8:	08006a89 	.word	0x08006a89
 8006acc:	08006c0d 	.word	0x08006c0d
 8006ad0:	08006b37 	.word	0x08006b37
 8006ad4:	08006bc7 	.word	0x08006bc7
 8006ad8:	08006a89 	.word	0x08006a89
 8006adc:	08006a89 	.word	0x08006a89
 8006ae0:	08006c2f 	.word	0x08006c2f
 8006ae4:	08006a89 	.word	0x08006a89
 8006ae8:	08006b37 	.word	0x08006b37
 8006aec:	08006a89 	.word	0x08006a89
 8006af0:	08006a89 	.word	0x08006a89
 8006af4:	08006bcf 	.word	0x08006bcf
 8006af8:	6833      	ldr	r3, [r6, #0]
 8006afa:	1d1a      	adds	r2, r3, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6032      	str	r2, [r6, #0]
 8006b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e09d      	b.n	8006c48 <_printf_i+0x1e8>
 8006b0c:	6833      	ldr	r3, [r6, #0]
 8006b0e:	6820      	ldr	r0, [r4, #0]
 8006b10:	1d19      	adds	r1, r3, #4
 8006b12:	6031      	str	r1, [r6, #0]
 8006b14:	0606      	lsls	r6, r0, #24
 8006b16:	d501      	bpl.n	8006b1c <_printf_i+0xbc>
 8006b18:	681d      	ldr	r5, [r3, #0]
 8006b1a:	e003      	b.n	8006b24 <_printf_i+0xc4>
 8006b1c:	0645      	lsls	r5, r0, #25
 8006b1e:	d5fb      	bpl.n	8006b18 <_printf_i+0xb8>
 8006b20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b24:	2d00      	cmp	r5, #0
 8006b26:	da03      	bge.n	8006b30 <_printf_i+0xd0>
 8006b28:	232d      	movs	r3, #45	@ 0x2d
 8006b2a:	426d      	negs	r5, r5
 8006b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b30:	4859      	ldr	r0, [pc, #356]	@ (8006c98 <_printf_i+0x238>)
 8006b32:	230a      	movs	r3, #10
 8006b34:	e011      	b.n	8006b5a <_printf_i+0xfa>
 8006b36:	6821      	ldr	r1, [r4, #0]
 8006b38:	6833      	ldr	r3, [r6, #0]
 8006b3a:	0608      	lsls	r0, r1, #24
 8006b3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b40:	d402      	bmi.n	8006b48 <_printf_i+0xe8>
 8006b42:	0649      	lsls	r1, r1, #25
 8006b44:	bf48      	it	mi
 8006b46:	b2ad      	uxthmi	r5, r5
 8006b48:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b4a:	4853      	ldr	r0, [pc, #332]	@ (8006c98 <_printf_i+0x238>)
 8006b4c:	6033      	str	r3, [r6, #0]
 8006b4e:	bf14      	ite	ne
 8006b50:	230a      	movne	r3, #10
 8006b52:	2308      	moveq	r3, #8
 8006b54:	2100      	movs	r1, #0
 8006b56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b5a:	6866      	ldr	r6, [r4, #4]
 8006b5c:	60a6      	str	r6, [r4, #8]
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	bfa2      	ittt	ge
 8006b62:	6821      	ldrge	r1, [r4, #0]
 8006b64:	f021 0104 	bicge.w	r1, r1, #4
 8006b68:	6021      	strge	r1, [r4, #0]
 8006b6a:	b90d      	cbnz	r5, 8006b70 <_printf_i+0x110>
 8006b6c:	2e00      	cmp	r6, #0
 8006b6e:	d04b      	beq.n	8006c08 <_printf_i+0x1a8>
 8006b70:	4616      	mov	r6, r2
 8006b72:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b76:	fb03 5711 	mls	r7, r3, r1, r5
 8006b7a:	5dc7      	ldrb	r7, [r0, r7]
 8006b7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b80:	462f      	mov	r7, r5
 8006b82:	42bb      	cmp	r3, r7
 8006b84:	460d      	mov	r5, r1
 8006b86:	d9f4      	bls.n	8006b72 <_printf_i+0x112>
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d10b      	bne.n	8006ba4 <_printf_i+0x144>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	07df      	lsls	r7, r3, #31
 8006b90:	d508      	bpl.n	8006ba4 <_printf_i+0x144>
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	6861      	ldr	r1, [r4, #4]
 8006b96:	4299      	cmp	r1, r3
 8006b98:	bfde      	ittt	le
 8006b9a:	2330      	movle	r3, #48	@ 0x30
 8006b9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ba0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006ba4:	1b92      	subs	r2, r2, r6
 8006ba6:	6122      	str	r2, [r4, #16]
 8006ba8:	f8cd a000 	str.w	sl, [sp]
 8006bac:	464b      	mov	r3, r9
 8006bae:	aa03      	add	r2, sp, #12
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	f7ff fee6 	bl	8006984 <_printf_common>
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d14a      	bne.n	8006c52 <_printf_i+0x1f2>
 8006bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bc0:	b004      	add	sp, #16
 8006bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	f043 0320 	orr.w	r3, r3, #32
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	4833      	ldr	r0, [pc, #204]	@ (8006c9c <_printf_i+0x23c>)
 8006bd0:	2778      	movs	r7, #120	@ 0x78
 8006bd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	6831      	ldr	r1, [r6, #0]
 8006bda:	061f      	lsls	r7, r3, #24
 8006bdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006be0:	d402      	bmi.n	8006be8 <_printf_i+0x188>
 8006be2:	065f      	lsls	r7, r3, #25
 8006be4:	bf48      	it	mi
 8006be6:	b2ad      	uxthmi	r5, r5
 8006be8:	6031      	str	r1, [r6, #0]
 8006bea:	07d9      	lsls	r1, r3, #31
 8006bec:	bf44      	itt	mi
 8006bee:	f043 0320 	orrmi.w	r3, r3, #32
 8006bf2:	6023      	strmi	r3, [r4, #0]
 8006bf4:	b11d      	cbz	r5, 8006bfe <_printf_i+0x19e>
 8006bf6:	2310      	movs	r3, #16
 8006bf8:	e7ac      	b.n	8006b54 <_printf_i+0xf4>
 8006bfa:	4827      	ldr	r0, [pc, #156]	@ (8006c98 <_printf_i+0x238>)
 8006bfc:	e7e9      	b.n	8006bd2 <_printf_i+0x172>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	f023 0320 	bic.w	r3, r3, #32
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	e7f6      	b.n	8006bf6 <_printf_i+0x196>
 8006c08:	4616      	mov	r6, r2
 8006c0a:	e7bd      	b.n	8006b88 <_printf_i+0x128>
 8006c0c:	6833      	ldr	r3, [r6, #0]
 8006c0e:	6825      	ldr	r5, [r4, #0]
 8006c10:	6961      	ldr	r1, [r4, #20]
 8006c12:	1d18      	adds	r0, r3, #4
 8006c14:	6030      	str	r0, [r6, #0]
 8006c16:	062e      	lsls	r6, r5, #24
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	d501      	bpl.n	8006c20 <_printf_i+0x1c0>
 8006c1c:	6019      	str	r1, [r3, #0]
 8006c1e:	e002      	b.n	8006c26 <_printf_i+0x1c6>
 8006c20:	0668      	lsls	r0, r5, #25
 8006c22:	d5fb      	bpl.n	8006c1c <_printf_i+0x1bc>
 8006c24:	8019      	strh	r1, [r3, #0]
 8006c26:	2300      	movs	r3, #0
 8006c28:	6123      	str	r3, [r4, #16]
 8006c2a:	4616      	mov	r6, r2
 8006c2c:	e7bc      	b.n	8006ba8 <_printf_i+0x148>
 8006c2e:	6833      	ldr	r3, [r6, #0]
 8006c30:	1d1a      	adds	r2, r3, #4
 8006c32:	6032      	str	r2, [r6, #0]
 8006c34:	681e      	ldr	r6, [r3, #0]
 8006c36:	6862      	ldr	r2, [r4, #4]
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7f9 fae0 	bl	8000200 <memchr>
 8006c40:	b108      	cbz	r0, 8006c46 <_printf_i+0x1e6>
 8006c42:	1b80      	subs	r0, r0, r6
 8006c44:	6060      	str	r0, [r4, #4]
 8006c46:	6863      	ldr	r3, [r4, #4]
 8006c48:	6123      	str	r3, [r4, #16]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c50:	e7aa      	b.n	8006ba8 <_printf_i+0x148>
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	4632      	mov	r2, r6
 8006c56:	4649      	mov	r1, r9
 8006c58:	4640      	mov	r0, r8
 8006c5a:	47d0      	blx	sl
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d0ad      	beq.n	8006bbc <_printf_i+0x15c>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	079b      	lsls	r3, r3, #30
 8006c64:	d413      	bmi.n	8006c8e <_printf_i+0x22e>
 8006c66:	68e0      	ldr	r0, [r4, #12]
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	4298      	cmp	r0, r3
 8006c6c:	bfb8      	it	lt
 8006c6e:	4618      	movlt	r0, r3
 8006c70:	e7a6      	b.n	8006bc0 <_printf_i+0x160>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4632      	mov	r2, r6
 8006c76:	4649      	mov	r1, r9
 8006c78:	4640      	mov	r0, r8
 8006c7a:	47d0      	blx	sl
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d09d      	beq.n	8006bbc <_printf_i+0x15c>
 8006c80:	3501      	adds	r5, #1
 8006c82:	68e3      	ldr	r3, [r4, #12]
 8006c84:	9903      	ldr	r1, [sp, #12]
 8006c86:	1a5b      	subs	r3, r3, r1
 8006c88:	42ab      	cmp	r3, r5
 8006c8a:	dcf2      	bgt.n	8006c72 <_printf_i+0x212>
 8006c8c:	e7eb      	b.n	8006c66 <_printf_i+0x206>
 8006c8e:	2500      	movs	r5, #0
 8006c90:	f104 0619 	add.w	r6, r4, #25
 8006c94:	e7f5      	b.n	8006c82 <_printf_i+0x222>
 8006c96:	bf00      	nop
 8006c98:	08007551 	.word	0x08007551
 8006c9c:	08007562 	.word	0x08007562

08006ca0 <__malloc_lock>:
 8006ca0:	4801      	ldr	r0, [pc, #4]	@ (8006ca8 <__malloc_lock+0x8>)
 8006ca2:	f7ff bc73 	b.w	800658c <__retarget_lock_acquire_recursive>
 8006ca6:	bf00      	nop
 8006ca8:	2000067c 	.word	0x2000067c

08006cac <__malloc_unlock>:
 8006cac:	4801      	ldr	r0, [pc, #4]	@ (8006cb4 <__malloc_unlock+0x8>)
 8006cae:	f7ff bc6e 	b.w	800658e <__retarget_lock_release_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	2000067c 	.word	0x2000067c

08006cb8 <_realloc_r>:
 8006cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cbc:	4680      	mov	r8, r0
 8006cbe:	4615      	mov	r5, r2
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	b921      	cbnz	r1, 8006cce <_realloc_r+0x16>
 8006cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc8:	4611      	mov	r1, r2
 8006cca:	f7ff bddb 	b.w	8006884 <_malloc_r>
 8006cce:	b92a      	cbnz	r2, 8006cdc <_realloc_r+0x24>
 8006cd0:	f000 f858 	bl	8006d84 <_free_r>
 8006cd4:	2400      	movs	r4, #0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cdc:	f000 f89c 	bl	8006e18 <_malloc_usable_size_r>
 8006ce0:	4285      	cmp	r5, r0
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	d802      	bhi.n	8006cec <_realloc_r+0x34>
 8006ce6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006cea:	d8f4      	bhi.n	8006cd6 <_realloc_r+0x1e>
 8006cec:	4629      	mov	r1, r5
 8006cee:	4640      	mov	r0, r8
 8006cf0:	f7ff fdc8 	bl	8006884 <_malloc_r>
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d0ec      	beq.n	8006cd4 <_realloc_r+0x1c>
 8006cfa:	42b5      	cmp	r5, r6
 8006cfc:	462a      	mov	r2, r5
 8006cfe:	4621      	mov	r1, r4
 8006d00:	bf28      	it	cs
 8006d02:	4632      	movcs	r2, r6
 8006d04:	f000 f830 	bl	8006d68 <memcpy>
 8006d08:	4621      	mov	r1, r4
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	f000 f83a 	bl	8006d84 <_free_r>
 8006d10:	463c      	mov	r4, r7
 8006d12:	e7e0      	b.n	8006cd6 <_realloc_r+0x1e>

08006d14 <memmove>:
 8006d14:	4288      	cmp	r0, r1
 8006d16:	b510      	push	{r4, lr}
 8006d18:	eb01 0402 	add.w	r4, r1, r2
 8006d1c:	d902      	bls.n	8006d24 <memmove+0x10>
 8006d1e:	4284      	cmp	r4, r0
 8006d20:	4623      	mov	r3, r4
 8006d22:	d807      	bhi.n	8006d34 <memmove+0x20>
 8006d24:	1e43      	subs	r3, r0, #1
 8006d26:	42a1      	cmp	r1, r4
 8006d28:	d008      	beq.n	8006d3c <memmove+0x28>
 8006d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d32:	e7f8      	b.n	8006d26 <memmove+0x12>
 8006d34:	4402      	add	r2, r0
 8006d36:	4601      	mov	r1, r0
 8006d38:	428a      	cmp	r2, r1
 8006d3a:	d100      	bne.n	8006d3e <memmove+0x2a>
 8006d3c:	bd10      	pop	{r4, pc}
 8006d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d46:	e7f7      	b.n	8006d38 <memmove+0x24>

08006d48 <_sbrk_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d06      	ldr	r5, [pc, #24]	@ (8006d64 <_sbrk_r+0x1c>)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	f7fb fb98 	bl	8002488 <_sbrk>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_sbrk_r+0x1a>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_sbrk_r+0x1a>
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	20000688 	.word	0x20000688

08006d68 <memcpy>:
 8006d68:	440a      	add	r2, r1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006d70:	d100      	bne.n	8006d74 <memcpy+0xc>
 8006d72:	4770      	bx	lr
 8006d74:	b510      	push	{r4, lr}
 8006d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	d1f9      	bne.n	8006d76 <memcpy+0xe>
 8006d82:	bd10      	pop	{r4, pc}

08006d84 <_free_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4605      	mov	r5, r0
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	d041      	beq.n	8006e10 <_free_r+0x8c>
 8006d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d90:	1f0c      	subs	r4, r1, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bfb8      	it	lt
 8006d96:	18e4      	addlt	r4, r4, r3
 8006d98:	f7ff ff82 	bl	8006ca0 <__malloc_lock>
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e14 <_free_r+0x90>)
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	b933      	cbnz	r3, 8006db0 <_free_r+0x2c>
 8006da2:	6063      	str	r3, [r4, #4]
 8006da4:	6014      	str	r4, [r2, #0]
 8006da6:	4628      	mov	r0, r5
 8006da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dac:	f7ff bf7e 	b.w	8006cac <__malloc_unlock>
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d908      	bls.n	8006dc6 <_free_r+0x42>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	1821      	adds	r1, r4, r0
 8006db8:	428b      	cmp	r3, r1
 8006dba:	bf01      	itttt	eq
 8006dbc:	6819      	ldreq	r1, [r3, #0]
 8006dbe:	685b      	ldreq	r3, [r3, #4]
 8006dc0:	1809      	addeq	r1, r1, r0
 8006dc2:	6021      	streq	r1, [r4, #0]
 8006dc4:	e7ed      	b.n	8006da2 <_free_r+0x1e>
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	b10b      	cbz	r3, 8006dd0 <_free_r+0x4c>
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	d9fa      	bls.n	8006dc6 <_free_r+0x42>
 8006dd0:	6811      	ldr	r1, [r2, #0]
 8006dd2:	1850      	adds	r0, r2, r1
 8006dd4:	42a0      	cmp	r0, r4
 8006dd6:	d10b      	bne.n	8006df0 <_free_r+0x6c>
 8006dd8:	6820      	ldr	r0, [r4, #0]
 8006dda:	4401      	add	r1, r0
 8006ddc:	1850      	adds	r0, r2, r1
 8006dde:	4283      	cmp	r3, r0
 8006de0:	6011      	str	r1, [r2, #0]
 8006de2:	d1e0      	bne.n	8006da6 <_free_r+0x22>
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	6053      	str	r3, [r2, #4]
 8006dea:	4408      	add	r0, r1
 8006dec:	6010      	str	r0, [r2, #0]
 8006dee:	e7da      	b.n	8006da6 <_free_r+0x22>
 8006df0:	d902      	bls.n	8006df8 <_free_r+0x74>
 8006df2:	230c      	movs	r3, #12
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	e7d6      	b.n	8006da6 <_free_r+0x22>
 8006df8:	6820      	ldr	r0, [r4, #0]
 8006dfa:	1821      	adds	r1, r4, r0
 8006dfc:	428b      	cmp	r3, r1
 8006dfe:	bf04      	itt	eq
 8006e00:	6819      	ldreq	r1, [r3, #0]
 8006e02:	685b      	ldreq	r3, [r3, #4]
 8006e04:	6063      	str	r3, [r4, #4]
 8006e06:	bf04      	itt	eq
 8006e08:	1809      	addeq	r1, r1, r0
 8006e0a:	6021      	streq	r1, [r4, #0]
 8006e0c:	6054      	str	r4, [r2, #4]
 8006e0e:	e7ca      	b.n	8006da6 <_free_r+0x22>
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	bf00      	nop
 8006e14:	20000684 	.word	0x20000684

08006e18 <_malloc_usable_size_r>:
 8006e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e1c:	1f18      	subs	r0, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bfbc      	itt	lt
 8006e22:	580b      	ldrlt	r3, [r1, r0]
 8006e24:	18c0      	addlt	r0, r0, r3
 8006e26:	4770      	bx	lr

08006e28 <_init>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	bf00      	nop
 8006e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2e:	bc08      	pop	{r3}
 8006e30:	469e      	mov	lr, r3
 8006e32:	4770      	bx	lr

08006e34 <_fini>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	bf00      	nop
 8006e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3a:	bc08      	pop	{r3}
 8006e3c:	469e      	mov	lr, r3
 8006e3e:	4770      	bx	lr
