
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074cc  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  0800768c  0800768c  0000868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df8  08007df8  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007df8  08007df8  00008df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e00  08007e00  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e00  08007e00  00008e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e04  08007e04  00008e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007e08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  20000060  08007e68  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  08007e68  00009a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c8b  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd8  00000000  00000000  0001ed1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00021cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e17  00000000  00000000  00022f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c317  00000000  00000000  00023d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182dd  00000000  00000000  00050056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001041c7  00000000  00000000  00068333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c4fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000508c  00000000  00000000  0016c540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001715cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007674 	.word	0x08007674

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	08007674 	.word	0x08007674

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <addNewEntry>:
static pillEntry pillList [50];
static uint8_t next_time_pill_idx = 0;
static uint8_t last_taken_pill_idx = 0;


void addNewEntry(uint8_t dispenserNum, char * name, uint8_t dayofWeek, uint8_t hour, uint8_t min){
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6039      	str	r1, [r7, #0]
 8000598:	4611      	mov	r1, r2
 800059a:	461a      	mov	r2, r3
 800059c:	4603      	mov	r3, r0
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	460b      	mov	r3, r1
 80005a2:	71bb      	strb	r3, [r7, #6]
 80005a4:	4613      	mov	r3, r2
 80005a6:	717b      	strb	r3, [r7, #5]
	//uint8_t ID; uint8_t dispenserNum; char * name; uint8_t dayofWeek; uint8_t hour; uint8_t min; uint8_t taken;
	pillEntry wew = {numPills, dispenserNum, name, dayofWeek, hour, min, 1};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	221f      	movs	r2, #31
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f006 fc8d 	bl	8006ed0 <memset>
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <addNewEntry+0x94>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	723b      	strb	r3, [r7, #8]
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	727b      	strb	r3, [r7, #9]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	72bb      	strb	r3, [r7, #10]
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	72fb      	strb	r3, [r7, #11]
 80005ca:	797b      	ldrb	r3, [r7, #5]
 80005cc:	733b      	strb	r3, [r7, #12]
 80005ce:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80005d2:	737b      	strb	r3, [r7, #13]
 80005d4:	2301      	movs	r3, #1
 80005d6:	73bb      	strb	r3, [r7, #14]
	pillList[numPills] = wew;
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <addNewEntry+0x94>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <addNewEntry+0x98>)
 80005e0:	460b      	mov	r3, r1
 80005e2:	015b      	lsls	r3, r3, #5
 80005e4:	1a5b      	subs	r3, r3, r1
 80005e6:	4413      	add	r3, r2
 80005e8:	461d      	mov	r5, r3
 80005ea:	f107 0408 	add.w	r4, r7, #8
 80005ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f0:	6028      	str	r0, [r5, #0]
 80005f2:	6069      	str	r1, [r5, #4]
 80005f4:	60aa      	str	r2, [r5, #8]
 80005f6:	60eb      	str	r3, [r5, #12]
 80005f8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80005fa:	6128      	str	r0, [r5, #16]
 80005fc:	6169      	str	r1, [r5, #20]
 80005fe:	61aa      	str	r2, [r5, #24]
 8000600:	8823      	ldrh	r3, [r4, #0]
 8000602:	78a2      	ldrb	r2, [r4, #2]
 8000604:	83ab      	strh	r3, [r5, #28]
 8000606:	4613      	mov	r3, r2
 8000608:	77ab      	strb	r3, [r5, #30]
	numPills++;
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <addNewEntry+0x94>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <addNewEntry+0x94>)
 8000614:	701a      	strb	r2, [r3, #0]
	sortEntries();
 8000616:	f000 f809 	bl	800062c <sortEntries>
	//update_next_pill_idx(DS1307_GetDayOfWeek, DS1307_GetHour, DS1307_GetMinute);
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	@ 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bdb0      	pop	{r4, r5, r7, pc}
 8000622:	bf00      	nop
 8000624:	2000007c 	.word	0x2000007c
 8000628:	20000080 	.word	0x20000080

0800062c <sortEntries>:

void sortEntries(){
 800062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000630:	b096      	sub	sp, #88	@ 0x58
 8000632:	af0c      	add	r7, sp, #48	@ 0x30
	uint8_t i = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t j = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t minimum_idx = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	//WOOOO SELECTION SORT MY BELOVED!!!!
	for (i = 0; i < numPills; i++){
 8000646:	2300      	movs	r3, #0
 8000648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800064c:	e0b1      	b.n	80007b2 <sortEntries+0x186>
		minimum_idx = i;
 800064e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000652:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		for (j = i + 1; j < numPills; j++){
 8000656:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800065a:	3301      	adds	r3, #1
 800065c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000660:	e043      	b.n	80006ea <sortEntries+0xbe>
			if (compPillEntry(pillList[j], pillList[minimum_idx])){
 8000662:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000666:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800066a:	4858      	ldr	r0, [pc, #352]	@ (80007cc <sortEntries+0x1a0>)
 800066c:	460b      	mov	r3, r1
 800066e:	015b      	lsls	r3, r3, #5
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	18c6      	adds	r6, r0, r3
 8000674:	4955      	ldr	r1, [pc, #340]	@ (80007cc <sortEntries+0x1a0>)
 8000676:	4613      	mov	r3, r2
 8000678:	015b      	lsls	r3, r3, #5
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	440b      	add	r3, r1
 800067e:	ac04      	add	r4, sp, #16
 8000680:	461d      	mov	r5, r3
 8000682:	6828      	ldr	r0, [r5, #0]
 8000684:	6869      	ldr	r1, [r5, #4]
 8000686:	68aa      	ldr	r2, [r5, #8]
 8000688:	68eb      	ldr	r3, [r5, #12]
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	6928      	ldr	r0, [r5, #16]
 800068e:	6969      	ldr	r1, [r5, #20]
 8000690:	69aa      	ldr	r2, [r5, #24]
 8000692:	c407      	stmia	r4!, {r0, r1, r2}
 8000694:	8bab      	ldrh	r3, [r5, #28]
 8000696:	7faa      	ldrb	r2, [r5, #30]
 8000698:	8023      	strh	r3, [r4, #0]
 800069a:	4613      	mov	r3, r2
 800069c:	70a3      	strb	r3, [r4, #2]
 800069e:	6833      	ldr	r3, [r6, #0]
 80006a0:	4698      	mov	r8, r3
 80006a2:	6873      	ldr	r3, [r6, #4]
 80006a4:	469e      	mov	lr, r3
 80006a6:	68b3      	ldr	r3, [r6, #8]
 80006a8:	469c      	mov	ip, r3
 80006aa:	68f3      	ldr	r3, [r6, #12]
 80006ac:	461d      	mov	r5, r3
 80006ae:	466b      	mov	r3, sp
 80006b0:	f106 0410 	add.w	r4, r6, #16
 80006b4:	6820      	ldr	r0, [r4, #0]
 80006b6:	6861      	ldr	r1, [r4, #4]
 80006b8:	68a2      	ldr	r2, [r4, #8]
 80006ba:	c307      	stmia	r3!, {r0, r1, r2}
 80006bc:	89a2      	ldrh	r2, [r4, #12]
 80006be:	7ba1      	ldrb	r1, [r4, #14]
 80006c0:	801a      	strh	r2, [r3, #0]
 80006c2:	460a      	mov	r2, r1
 80006c4:	709a      	strb	r2, [r3, #2]
 80006c6:	4640      	mov	r0, r8
 80006c8:	4671      	mov	r1, lr
 80006ca:	4662      	mov	r2, ip
 80006cc:	462b      	mov	r3, r5
 80006ce:	f000 f881 	bl	80007d4 <compPillEntry>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <sortEntries+0xb4>
				minimum_idx = j;
 80006d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80006dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		for (j = i + 1; j < numPills; j++){
 80006e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80006e4:	3301      	adds	r3, #1
 80006e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80006ea:	4b39      	ldr	r3, [pc, #228]	@ (80007d0 <sortEntries+0x1a4>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3b5      	bcc.n	8000662 <sortEntries+0x36>
			}
		}
		pillEntry temp = pillList[i];
 80006f6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80006fa:	4934      	ldr	r1, [pc, #208]	@ (80007cc <sortEntries+0x1a0>)
 80006fc:	4613      	mov	r3, r2
 80006fe:	015b      	lsls	r3, r3, #5
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	440b      	add	r3, r1
 8000704:	1d3c      	adds	r4, r7, #4
 8000706:	461d      	mov	r5, r3
 8000708:	6828      	ldr	r0, [r5, #0]
 800070a:	6869      	ldr	r1, [r5, #4]
 800070c:	68aa      	ldr	r2, [r5, #8]
 800070e:	68eb      	ldr	r3, [r5, #12]
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	6928      	ldr	r0, [r5, #16]
 8000714:	6969      	ldr	r1, [r5, #20]
 8000716:	69aa      	ldr	r2, [r5, #24]
 8000718:	c407      	stmia	r4!, {r0, r1, r2}
 800071a:	8bab      	ldrh	r3, [r5, #28]
 800071c:	7faa      	ldrb	r2, [r5, #30]
 800071e:	8023      	strh	r3, [r4, #0]
 8000720:	4613      	mov	r3, r2
 8000722:	70a3      	strb	r3, [r4, #2]
		pillList[i] = pillList[minimum_idx];
 8000724:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000728:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800072c:	4827      	ldr	r0, [pc, #156]	@ (80007cc <sortEntries+0x1a0>)
 800072e:	460b      	mov	r3, r1
 8000730:	015b      	lsls	r3, r3, #5
 8000732:	1a5b      	subs	r3, r3, r1
 8000734:	4418      	add	r0, r3
 8000736:	4925      	ldr	r1, [pc, #148]	@ (80007cc <sortEntries+0x1a0>)
 8000738:	4613      	mov	r3, r2
 800073a:	015b      	lsls	r3, r3, #5
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	18ca      	adds	r2, r1, r3
 8000740:	4603      	mov	r3, r0
 8000742:	6814      	ldr	r4, [r2, #0]
 8000744:	6850      	ldr	r0, [r2, #4]
 8000746:	6891      	ldr	r1, [r2, #8]
 8000748:	68d5      	ldr	r5, [r2, #12]
 800074a:	601c      	str	r4, [r3, #0]
 800074c:	6058      	str	r0, [r3, #4]
 800074e:	6099      	str	r1, [r3, #8]
 8000750:	60dd      	str	r5, [r3, #12]
 8000752:	6914      	ldr	r4, [r2, #16]
 8000754:	6950      	ldr	r0, [r2, #20]
 8000756:	6991      	ldr	r1, [r2, #24]
 8000758:	611c      	str	r4, [r3, #16]
 800075a:	6158      	str	r0, [r3, #20]
 800075c:	6199      	str	r1, [r3, #24]
 800075e:	8b91      	ldrh	r1, [r2, #28]
 8000760:	7f92      	ldrb	r2, [r2, #30]
 8000762:	8399      	strh	r1, [r3, #28]
 8000764:	779a      	strb	r2, [r3, #30]
		pillList[minimum_idx] = temp;
 8000766:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800076a:	4918      	ldr	r1, [pc, #96]	@ (80007cc <sortEntries+0x1a0>)
 800076c:	4613      	mov	r3, r2
 800076e:	015b      	lsls	r3, r3, #5
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	440b      	add	r3, r1
 8000774:	461d      	mov	r5, r3
 8000776:	1d3c      	adds	r4, r7, #4
 8000778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077a:	6028      	str	r0, [r5, #0]
 800077c:	6069      	str	r1, [r5, #4]
 800077e:	60aa      	str	r2, [r5, #8]
 8000780:	60eb      	str	r3, [r5, #12]
 8000782:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000784:	6128      	str	r0, [r5, #16]
 8000786:	6169      	str	r1, [r5, #20]
 8000788:	61aa      	str	r2, [r5, #24]
 800078a:	8823      	ldrh	r3, [r4, #0]
 800078c:	78a2      	ldrb	r2, [r4, #2]
 800078e:	83ab      	strh	r3, [r5, #28]
 8000790:	4613      	mov	r3, r2
 8000792:	77ab      	strb	r3, [r5, #30]
		pillList[i].ID = i;
 8000794:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000798:	490c      	ldr	r1, [pc, #48]	@ (80007cc <sortEntries+0x1a0>)
 800079a:	4613      	mov	r3, r2
 800079c:	015b      	lsls	r3, r3, #5
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80007a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numPills; i++){
 80007a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007ac:	3301      	adds	r3, #1
 80007ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <sortEntries+0x1a4>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80007ba:	429a      	cmp	r2, r3
 80007bc:	f4ff af47 	bcc.w	800064e <sortEntries+0x22>

	}
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007cc:	20000080 	.word	0x20000080
 80007d0:	2000007c 	.word	0x2000007c

080007d4 <compPillEntry>:

//returns 1 if lhs is less than rhs
uint8_t compPillEntry(pillEntry lhs, pillEntry rhs){
 80007d4:	b084      	sub	sp, #16
 80007d6:	b490      	push	{r4, r7}
 80007d8:	af00      	add	r7, sp, #0
 80007da:	f107 0408 	add.w	r4, r7, #8
 80007de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (!(lhs.dayofWeek == rhs.dayofWeek)){
 80007e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80007e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d009      	beq.n	8000802 <compPillEntry+0x2e>
		return lhs.dayofWeek < rhs.dayofWeek;
 80007ee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80007f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80007f6:	429a      	cmp	r2, r3
 80007f8:	bf34      	ite	cc
 80007fa:	2301      	movcc	r3, #1
 80007fc:	2300      	movcs	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	e020      	b.n	8000844 <compPillEntry+0x70>
	}

	if (!(lhs.hour == rhs.hour)){
 8000802:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000806:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800080a:	429a      	cmp	r2, r3
 800080c:	d009      	beq.n	8000822 <compPillEntry+0x4e>
		return lhs.hour < rhs.hour;
 800080e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000812:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000816:	429a      	cmp	r2, r3
 8000818:	bf34      	ite	cc
 800081a:	2301      	movcc	r3, #1
 800081c:	2300      	movcs	r3, #0
 800081e:	b2db      	uxtb	r3, r3
 8000820:	e010      	b.n	8000844 <compPillEntry+0x70>
	}

	if (!(lhs.min == rhs.min)){
 8000822:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000826:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800082a:	429a      	cmp	r2, r3
 800082c:	d009      	beq.n	8000842 <compPillEntry+0x6e>
		return lhs.min < rhs.min;
 800082e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000832:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000836:	429a      	cmp	r2, r3
 8000838:	bf34      	ite	cc
 800083a:	2301      	movcc	r3, #1
 800083c:	2300      	movcs	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	e000      	b.n	8000844 <compPillEntry+0x70>
	}

	return 0;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bc90      	pop	{r4, r7}
 800084a:	b004      	add	sp, #16
 800084c:	4770      	bx	lr
	...

08000850 <update_next_pill_idx>:

uint8_t update_next_pill_idx(uint8_t dayofweek, uint8_t hour, uint8_t min){
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	460b      	mov	r3, r1
 800085c:	71bb      	strb	r3, [r7, #6]
 800085e:	4613      	mov	r3, r2
 8000860:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]
	//find closest next pill to the current time. Actual search algorithms be damned.
	for (i = 0; i < numPills; i++){
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e04d      	b.n	8000908 <update_next_pill_idx+0xb8>
		if (!(dayofweek == pillList[i].dayofWeek)){
 800086c:	7bfa      	ldrb	r2, [r7, #15]
 800086e:	492c      	ldr	r1, [pc, #176]	@ (8000920 <update_next_pill_idx+0xd0>)
 8000870:	4613      	mov	r3, r2
 8000872:	015b      	lsls	r3, r3, #5
 8000874:	1a9b      	subs	r3, r3, r2
 8000876:	440b      	add	r3, r1
 8000878:	331b      	adds	r3, #27
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	79fa      	ldrb	r2, [r7, #7]
 800087e:	429a      	cmp	r2, r3
 8000880:	d00d      	beq.n	800089e <update_next_pill_idx+0x4e>
			if (dayofweek < pillList[i].dayofWeek){
 8000882:	7bfa      	ldrb	r2, [r7, #15]
 8000884:	4926      	ldr	r1, [pc, #152]	@ (8000920 <update_next_pill_idx+0xd0>)
 8000886:	4613      	mov	r3, r2
 8000888:	015b      	lsls	r3, r3, #5
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	440b      	add	r3, r1
 800088e:	331b      	adds	r3, #27
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	79fa      	ldrb	r2, [r7, #7]
 8000894:	429a      	cmp	r2, r3
 8000896:	d202      	bcs.n	800089e <update_next_pill_idx+0x4e>
				next_time_pill_idx = i;
 8000898:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <update_next_pill_idx+0xd4>)
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	7013      	strb	r3, [r2, #0]
			}

		}

		if (!(hour == pillList[i].hour)){
 800089e:	7bfa      	ldrb	r2, [r7, #15]
 80008a0:	491f      	ldr	r1, [pc, #124]	@ (8000920 <update_next_pill_idx+0xd0>)
 80008a2:	4613      	mov	r3, r2
 80008a4:	015b      	lsls	r3, r3, #5
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	331c      	adds	r3, #28
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	79ba      	ldrb	r2, [r7, #6]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d00d      	beq.n	80008d0 <update_next_pill_idx+0x80>
			if (dayofweek < pillList[i].dayofWeek){
 80008b4:	7bfa      	ldrb	r2, [r7, #15]
 80008b6:	491a      	ldr	r1, [pc, #104]	@ (8000920 <update_next_pill_idx+0xd0>)
 80008b8:	4613      	mov	r3, r2
 80008ba:	015b      	lsls	r3, r3, #5
 80008bc:	1a9b      	subs	r3, r3, r2
 80008be:	440b      	add	r3, r1
 80008c0:	331b      	adds	r3, #27
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d202      	bcs.n	80008d0 <update_next_pill_idx+0x80>
				next_time_pill_idx = i;
 80008ca:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <update_next_pill_idx+0xd4>)
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	7013      	strb	r3, [r2, #0]
			}
		}

		if (!(min == pillList[i].min)){
 80008d0:	7bfa      	ldrb	r2, [r7, #15]
 80008d2:	4913      	ldr	r1, [pc, #76]	@ (8000920 <update_next_pill_idx+0xd0>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	015b      	lsls	r3, r3, #5
 80008d8:	1a9b      	subs	r3, r3, r2
 80008da:	440b      	add	r3, r1
 80008dc:	331d      	adds	r3, #29
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	797a      	ldrb	r2, [r7, #5]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d00d      	beq.n	8000902 <update_next_pill_idx+0xb2>
			if (dayofweek < pillList[i].dayofWeek){
 80008e6:	7bfa      	ldrb	r2, [r7, #15]
 80008e8:	490d      	ldr	r1, [pc, #52]	@ (8000920 <update_next_pill_idx+0xd0>)
 80008ea:	4613      	mov	r3, r2
 80008ec:	015b      	lsls	r3, r3, #5
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	331b      	adds	r3, #27
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d202      	bcs.n	8000902 <update_next_pill_idx+0xb2>
				next_time_pill_idx = i;
 80008fc:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <update_next_pill_idx+0xd4>)
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < numPills; i++){
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	3301      	adds	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <update_next_pill_idx+0xd8>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	7bfa      	ldrb	r2, [r7, #15]
 800090e:	429a      	cmp	r2, r3
 8000910:	d3ac      	bcc.n	800086c <update_next_pill_idx+0x1c>
			}
		}
	}

}
 8000912:	bf00      	nop
 8000914:	4618      	mov	r0, r3
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	20000080 	.word	0x20000080
 8000924:	2000068e 	.word	0x2000068e
 8000928:	2000007c 	.word	0x2000007c

0800092c <get_next_pill_idx>:

uint8_t get_next_pill_idx(){
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	return next_time_pill_idx;
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <get_next_pill_idx+0x14>)
 8000932:	781b      	ldrb	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	2000068e 	.word	0x2000068e

08000944 <getPillInfo>:
		last_taken_pill_idx = next_time_pill_idx - 1;
	}

}

pillEntry getPillInfo(uint8_t idx){
 8000944:	b4b0      	push	{r4, r5, r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
	return pillList[idx];
 8000950:	78fa      	ldrb	r2, [r7, #3]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	490e      	ldr	r1, [pc, #56]	@ (8000990 <getPillInfo+0x4c>)
 8000956:	4613      	mov	r3, r2
 8000958:	015b      	lsls	r3, r3, #5
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	18ca      	adds	r2, r1, r3
 800095e:	4603      	mov	r3, r0
 8000960:	6814      	ldr	r4, [r2, #0]
 8000962:	6850      	ldr	r0, [r2, #4]
 8000964:	6891      	ldr	r1, [r2, #8]
 8000966:	68d5      	ldr	r5, [r2, #12]
 8000968:	601c      	str	r4, [r3, #0]
 800096a:	6058      	str	r0, [r3, #4]
 800096c:	6099      	str	r1, [r3, #8]
 800096e:	60dd      	str	r5, [r3, #12]
 8000970:	6914      	ldr	r4, [r2, #16]
 8000972:	6950      	ldr	r0, [r2, #20]
 8000974:	6991      	ldr	r1, [r2, #24]
 8000976:	611c      	str	r4, [r3, #16]
 8000978:	6158      	str	r0, [r3, #20]
 800097a:	6199      	str	r1, [r3, #24]
 800097c:	8b91      	ldrh	r1, [r2, #28]
 800097e:	7f92      	ldrb	r2, [r2, #30]
 8000980:	8399      	strh	r1, [r3, #28]
 8000982:	779a      	strb	r2, [r3, #30]
}
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bcb0      	pop	{r4, r5, r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000080 	.word	0x20000080

08000994 <getNumPills>:

uint8_t getNumPills(){
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	return numPills;
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <getNumPills+0x14>)
 800099a:	781b      	ldrb	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	2000007c 	.word	0x2000007c

080009ac <clearPillList>:

void clearPillList(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < numPills; i++){
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	e00c      	b.n	80009d6 <clearPillList+0x2a>
		free(pillList[i].name); //free the dynamically allocated strings.
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	4613      	mov	r3, r2
 80009c0:	015b      	lsls	r3, r3, #5
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <clearPillList+0x44>)
 80009c6:	4413      	add	r3, r2
 80009c8:	3302      	adds	r3, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f006 f9aa 	bl	8006d24 <free>
	for (i = 0; i < numPills; i++){
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	3301      	adds	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <clearPillList+0x48>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d3ed      	bcc.n	80009bc <clearPillList+0x10>
	}
	numPills = 0;
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <clearPillList+0x48>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000080 	.word	0x20000080
 80009f4:	2000007c 	.word	0x2000007c

080009f8 <loadNewPillEntry>:

//explicitly ONLY for when we are loading in a pre-sorted list of entries.
void loadNewPillEntry(uint8_t dispenserNum, char * name, uint8_t dayofWeek, uint8_t hour, uint8_t min){
 80009f8:	b4b0      	push	{r4, r5, r7}
 80009fa:	b08b      	sub	sp, #44	@ 0x2c
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6039      	str	r1, [r7, #0]
 8000a00:	4611      	mov	r1, r2
 8000a02:	461a      	mov	r2, r3
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	71bb      	strb	r3, [r7, #6]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	717b      	strb	r3, [r7, #5]
	//uint8_t ID; uint8_t dispenserNum; char * name; uint8_t dayofWeek; uint8_t hour; uint8_t min; uint8_t taken;
	//lmao don't know how to do this a better way but it might work ig
	pillEntry wew = {numPills, dispenserNum, " ", dayofWeek, hour, min, 1};
 8000a10:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <loadNewPillEntry+0xc0>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	723b      	strb	r3, [r7, #8]
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	727b      	strb	r3, [r7, #9]
 8000a1a:	4b28      	ldr	r3, [pc, #160]	@ (8000abc <loadNewPillEntry+0xc4>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	817b      	strh	r3, [r7, #10]
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
 8000a30:	f8c3 2013 	str.w	r2, [r3, #19]
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000a3a:	797b      	ldrb	r3, [r7, #5]
 8000a3c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000a40:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000a44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000a48:	2301      	movs	r3, #1
 8000a4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	memcpy(wew.name, name, 25);
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	f107 030a 	add.w	r3, r7, #10
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6851      	ldr	r1, [r2, #4]
 8000a58:	6895      	ldr	r5, [r2, #8]
 8000a5a:	68d4      	ldr	r4, [r2, #12]
 8000a5c:	6018      	str	r0, [r3, #0]
 8000a5e:	6059      	str	r1, [r3, #4]
 8000a60:	609d      	str	r5, [r3, #8]
 8000a62:	60dc      	str	r4, [r3, #12]
 8000a64:	6910      	ldr	r0, [r2, #16]
 8000a66:	6951      	ldr	r1, [r2, #20]
 8000a68:	6118      	str	r0, [r3, #16]
 8000a6a:	6159      	str	r1, [r3, #20]
 8000a6c:	7e12      	ldrb	r2, [r2, #24]
 8000a6e:	761a      	strb	r2, [r3, #24]
	pillList[numPills] = wew;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <loadNewPillEntry+0xc0>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <loadNewPillEntry+0xc8>)
 8000a78:	460b      	mov	r3, r1
 8000a7a:	015b      	lsls	r3, r3, #5
 8000a7c:	1a5b      	subs	r3, r3, r1
 8000a7e:	4413      	add	r3, r2
 8000a80:	461d      	mov	r5, r3
 8000a82:	f107 0408 	add.w	r4, r7, #8
 8000a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a88:	6028      	str	r0, [r5, #0]
 8000a8a:	6069      	str	r1, [r5, #4]
 8000a8c:	60aa      	str	r2, [r5, #8]
 8000a8e:	60eb      	str	r3, [r5, #12]
 8000a90:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000a92:	6128      	str	r0, [r5, #16]
 8000a94:	6169      	str	r1, [r5, #20]
 8000a96:	61aa      	str	r2, [r5, #24]
 8000a98:	8823      	ldrh	r3, [r4, #0]
 8000a9a:	78a2      	ldrb	r2, [r4, #2]
 8000a9c:	83ab      	strh	r3, [r5, #28]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	77ab      	strb	r3, [r5, #30]
	numPills++;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <loadNewPillEntry+0xc0>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <loadNewPillEntry+0xc0>)
 8000aac:	701a      	strb	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	372c      	adds	r7, #44	@ 0x2c
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bcb0      	pop	{r4, r5, r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	2000007c 	.word	0x2000007c
 8000abc:	0800768c 	.word	0x0800768c
 8000ac0:	20000080 	.word	0x20000080

08000ac4 <LockScreen>:
	char weee[50];
	sprintf(weee, "X = %i, Y = %i", touchX, touchY);
	ILI9488_printText(weee, 10,10,ILI9488_BLACK, ILI9488_WHITE, 1);

}
void LockScreen(){
 8000ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac6:	b0d3      	sub	sp, #332	@ 0x14c
 8000ac8:	af06      	add	r7, sp, #24
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 8000aca:	4bc4      	ldr	r3, [pc, #784]	@ (8000ddc <LockScreen+0x318>)
 8000acc:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8000ad0:	461d      	mov	r5, r3
 8000ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const char *MONTHS_OF_YEAR[12] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
 8000ade:	4bc0      	ldr	r3, [pc, #768]	@ (8000de0 <LockScreen+0x31c>)
 8000ae0:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 8000ae4:	461d      	mov	r5, r3
 8000ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000af2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	uint8_t date = DS1307_GetDate();
 8000af6:	f000 fa57 	bl	8000fa8 <DS1307_GetDate>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
	uint8_t month = DS1307_GetMonth();
 8000b00:	f000 fa5e 	bl	8000fc0 <DS1307_GetMonth>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
	uint16_t year = DS1307_GetYear();
 8000b0a:	f000 fa65 	bl	8000fd8 <DS1307_GetYear>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
	uint8_t dow = DS1307_GetDayOfWeek();
 8000b14:	f000 fa3c 	bl	8000f90 <DS1307_GetDayOfWeek>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	uint8_t hour = DS1307_GetHour();
 8000b1e:	f000 fa7c 	bl	800101a <DS1307_GetHour>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
	uint8_t minute = DS1307_GetMinute();
 8000b28:	f000 fa86 	bl	8001038 <DS1307_GetMinute>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
	uint8_t second = DS1307_GetSecond();
 8000b32:	f000 fa8d 	bl	8001050 <DS1307_GetSecond>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
	char buffer[100] = { 0 };
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b40:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000b44:	2260      	movs	r2, #96	@ 0x60
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 f9c1 	bl	8006ed0 <memset>
	char ampm[4] = "AM";
 8000b4e:	f644 5341 	movw	r3, #19777	@ 0x4d41
 8000b52:	673b      	str	r3, [r7, #112]	@ 0x70
	char formattedMinute[4];
	if (minute < 10){
 8000b54:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8000b58:	2b09      	cmp	r3, #9
 8000b5a:	d808      	bhi.n	8000b6e <LockScreen+0xaa>
		sprintf(formattedMinute, "0%i", minute);
 8000b5c:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8000b60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b64:	499f      	ldr	r1, [pc, #636]	@ (8000de4 <LockScreen+0x320>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f006 f992 	bl	8006e90 <siprintf>
 8000b6c:	e007      	b.n	8000b7e <LockScreen+0xba>
	}
	else{
		sprintf(formattedMinute, "%i", minute);
 8000b6e:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8000b72:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b76:	499c      	ldr	r1, [pc, #624]	@ (8000de8 <LockScreen+0x324>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f006 f989 	bl	8006e90 <siprintf>
	}
 	//convert to 12hr time
	if (hour == 0){
 8000b7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d103      	bne.n	8000b8e <LockScreen+0xca>
		hour = 12;
 8000b86:	230c      	movs	r3, #12
 8000b88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 8000b8c:	e00f      	b.n	8000bae <LockScreen+0xea>
	}
	else if (hour > 12){
 8000b8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8000b92:	2b0c      	cmp	r3, #12
 8000b94:	d90b      	bls.n	8000bae <LockScreen+0xea>
		hour = hour - 12;
 8000b96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8000b9a:	3b0c      	subs	r3, #12
 8000b9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
		sprintf(ampm, "%s", "PM");
 8000ba0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ba4:	4a91      	ldr	r2, [pc, #580]	@ (8000dec <LockScreen+0x328>)
 8000ba6:	4992      	ldr	r1, [pc, #584]	@ (8000df0 <LockScreen+0x32c>)
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f006 f971 	bl	8006e90 <siprintf>
	}
	/* May show warning below. Ignore and proceed. */
	sprintf(buffer, "Now: %s, %s %i %i, %i:%s:%i %s",
 8000bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000bb8:	f107 0208 	add.w	r2, r7, #8
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f853 6c28 	ldr.w	r6, [r3, #-40]
	DAYS_OF_WEEK[dow], MONTHS_OF_YEAR[month - 1], date, year, hour, formattedMinute, second, ampm);
 8000bc2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8000bc6:	3b01      	subs	r3, #1
	sprintf(buffer, "Now: %s, %s %i %i, %i:%s:%i %s",
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000bce:	f107 0208 	add.w	r2, r7, #8
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8000bde:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8000be2:	f897 112f 	ldrb.w	r1, [r7, #303]	@ 0x12f
 8000be6:	f897 0125 	ldrb.w	r0, [r7, #293]	@ 0x125
 8000bea:	f107 0574 	add.w	r5, r7, #116	@ 0x74
 8000bee:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000bf2:	9405      	str	r4, [sp, #20]
 8000bf4:	9004      	str	r0, [sp, #16]
 8000bf6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8000bfa:	9003      	str	r0, [sp, #12]
 8000bfc:	9102      	str	r1, [sp, #8]
 8000bfe:	9201      	str	r2, [sp, #4]
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4632      	mov	r2, r6
 8000c06:	497b      	ldr	r1, [pc, #492]	@ (8000df4 <LockScreen+0x330>)
 8000c08:	4628      	mov	r0, r5
 8000c0a:	f006 f941 	bl	8006e90 <siprintf>
	ILI9488_printText(buffer, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 8000c0e:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8000c12:	2301      	movs	r3, #1
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	220a      	movs	r2, #10
 8000c20:	210a      	movs	r1, #10
 8000c22:	f001 f821 	bl	8001c68 <ILI9488_printText>
	HAL_Delay(50);
 8000c26:	2032      	movs	r0, #50	@ 0x32
 8000c28:	f002 f804 	bl	8002c34 <HAL_Delay>

	update_next_pill_idx(DS1307_GetDayOfWeek(), DS1307_GetHour(), DS1307_GetMinute());
 8000c2c:	f000 f9b0 	bl	8000f90 <DS1307_GetDayOfWeek>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461c      	mov	r4, r3
 8000c34:	f000 f9f1 	bl	800101a <DS1307_GetHour>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461d      	mov	r5, r3
 8000c3c:	f000 f9fc 	bl	8001038 <DS1307_GetMinute>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	4629      	mov	r1, r5
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fe02 	bl	8000850 <update_next_pill_idx>

	 uint8_t pil = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
	 uint8_t listSize = (getNumPills() <= 3) ? getNumPills() : 3;
 8000c52:	f7ff fe9f 	bl	8000994 <getNumPills>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d803      	bhi.n	8000c64 <LockScreen+0x1a0>
 8000c5c:	f7ff fe9a 	bl	8000994 <getNumPills>
 8000c60:	4603      	mov	r3, r0
 8000c62:	e000      	b.n	8000c66 <LockScreen+0x1a2>
 8000c64:	2303      	movs	r3, #3
 8000c66:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
	 for (pil = 0; pil < listSize; pil++){
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8000c70:	e100      	b.n	8000e74 <LockScreen+0x3b0>

		 //12 hour time for every pill
		 pillEntry temp = getPillInfo(pil);
 8000c72:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c76:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe61 	bl	8000944 <getPillInfo>
		 uint8_t tempHour = temp.hour;
 8000c82:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000c86:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
		 char tempampm[4] = "AM";
 8000c8a:	f644 5341 	movw	r3, #19777	@ 0x4d41
 8000c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
		 char pillTime [50];
		 char pillFormatMinute [5] = " ";
 8000c90:	2320      	movs	r3, #32
 8000c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44


		 if (temp.min < 10){
 8000c9a:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000c9e:	2b09      	cmp	r3, #9
 8000ca0:	d809      	bhi.n	8000cb6 <LockScreen+0x1f2>
				sprintf(pillFormatMinute, "0%i", temp.min);
 8000ca2:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cac:	494d      	ldr	r1, [pc, #308]	@ (8000de4 <LockScreen+0x320>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f006 f8ee 	bl	8006e90 <siprintf>
 8000cb4:	e008      	b.n	8000cc8 <LockScreen+0x204>
			}

		 else{
				sprintf(pillFormatMinute, "%i", temp.min);
 8000cb6:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000cba:	461a      	mov	r2, r3
 8000cbc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cc0:	4949      	ldr	r1, [pc, #292]	@ (8000de8 <LockScreen+0x324>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f006 f8e4 	bl	8006e90 <siprintf>
			}
		 if (tempHour == 0){
 8000cc8:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d103      	bne.n	8000cd8 <LockScreen+0x214>
			tempHour = 12;
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 8000cd6:	e00f      	b.n	8000cf8 <LockScreen+0x234>
		 }
		 else if (tempHour > 12){
 8000cd8:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8000cdc:	2b0c      	cmp	r3, #12
 8000cde:	d90b      	bls.n	8000cf8 <LockScreen+0x234>
			tempHour = tempHour - 12;
 8000ce0:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8000ce4:	3b0c      	subs	r3, #12
 8000ce6:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
			sprintf(tempampm, "%s", "PM");
 8000cea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cee:	4a3f      	ldr	r2, [pc, #252]	@ (8000dec <LockScreen+0x328>)
 8000cf0:	493f      	ldr	r1, [pc, #252]	@ (8000df0 <LockScreen+0x32c>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f006 f8cc 	bl	8006e90 <siprintf>
		 }

		sprintf(pillTime, "Pill Due at %s, %s %i @ %i:%s %s", DAYS_OF_WEEK[temp.dayofWeek], MONTHS_OF_YEAR[month - 1], date + (temp.dayofWeek - dow),tempHour,  pillFormatMinute, tempampm);
 8000cf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000d02:	f107 0208 	add.w	r2, r7, #8
 8000d06:	4413      	add	r3, r2
 8000d08:	f853 4c28 	ldr.w	r4, [r3, #-40]
 8000d0c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8000d10:	3b01      	subs	r3, #1
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	4413      	add	r3, r2
 8000d1e:	f853 5c58 	ldr.w	r5, [r3, #-88]
 8000d22:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 8000d26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	4413      	add	r3, r2
 8000d34:	f897 212d 	ldrb.w	r2, [r7, #301]	@ 0x12d
 8000d38:	f107 000c 	add.w	r0, r7, #12
 8000d3c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000d40:	9103      	str	r1, [sp, #12]
 8000d42:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000d46:	9102      	str	r1, [sp, #8]
 8000d48:	9201      	str	r2, [sp, #4]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	462b      	mov	r3, r5
 8000d4e:	4622      	mov	r2, r4
 8000d50:	4929      	ldr	r1, [pc, #164]	@ (8000df8 <LockScreen+0x334>)
 8000d52:	f006 f89d 	bl	8006e90 <siprintf>
		//overdue pills.
		if (pil < get_next_pill_idx()){
 8000d56:	f7ff fde9 	bl	800092c <get_next_pill_idx>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d24a      	bcs.n	8000dfc <LockScreen+0x338>
			ILI9488_printText(temp.name, 10, (pil + 1) * 50, ILI9488_RED, ILI9488_WHITE, 1);
 8000d66:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	0091      	lsls	r1, r2, #2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d88:	1c98      	adds	r0, r3, #2
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d98:	210a      	movs	r1, #10
 8000d9a:	f000 ff65 	bl	8001c68 <ILI9488_printText>
			ILI9488_printText(pillTime, 10, (pil + 1)*50 + 10, ILI9488_RED, ILI9488_WHITE, 1);
 8000d9e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	461a      	mov	r2, r3
 8000dae:	0091      	lsls	r1, r2, #2
 8000db0:	461a      	mov	r2, r3
 8000db2:	460b      	mov	r3, r1
 8000db4:	4413      	add	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	330a      	adds	r3, #10
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	f107 000c 	add.w	r0, r7, #12
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dd2:	210a      	movs	r1, #10
 8000dd4:	f000 ff48 	bl	8001c68 <ILI9488_printText>
 8000dd8:	e047      	b.n	8000e6a <LockScreen+0x3a6>
 8000dda:	bf00      	nop
 8000ddc:	08007778 	.word	0x08007778
 8000de0:	08007800 	.word	0x08007800
 8000de4:	080076e0 	.word	0x080076e0
 8000de8:	080076e4 	.word	0x080076e4
 8000dec:	080076e8 	.word	0x080076e8
 8000df0:	080076ec 	.word	0x080076ec
 8000df4:	080076f0 	.word	0x080076f0
 8000df8:	08007710 	.word	0x08007710
		}
		else {
			ILI9488_printText(temp.name, 10, (pil + 1) * 50, ILI9488_BLACK, ILI9488_WHITE, 1);
 8000dfc:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8000e00:	3301      	adds	r3, #1
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	0091      	lsls	r1, r2, #2
 8000e0e:	461a      	mov	r2, r3
 8000e10:	460b      	mov	r3, r1
 8000e12:	4413      	add	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e1e:	1c98      	adds	r0, r3, #2
 8000e20:	2301      	movs	r3, #1
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	210a      	movs	r1, #10
 8000e2e:	f000 ff1b 	bl	8001c68 <ILI9488_printText>
			ILI9488_printText(pillTime, 10, (pil + 1) * 50 + 10, ILI9488_BLACK, ILI9488_WHITE, 1);
 8000e32:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8000e36:	3301      	adds	r3, #1
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	0091      	lsls	r1, r2, #2
 8000e44:	461a      	mov	r2, r3
 8000e46:	460b      	mov	r3, r1
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	330a      	adds	r3, #10
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	f107 000c 	add.w	r0, r7, #12
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	210a      	movs	r1, #10
 8000e66:	f000 feff 	bl	8001c68 <ILI9488_printText>
	 for (pil = 0; pil < listSize; pil++){
 8000e6a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8000e6e:	3301      	adds	r3, #1
 8000e70:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8000e74:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 8000e78:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f4ff aef8 	bcc.w	8000c72 <LockScreen+0x1ae>
		}
	 }
	 HAL_Delay(1000);
 8000e82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e86:	f001 fed5 	bl	8002c34 <HAL_Delay>
}
 8000e8a:	bf00      	nop
 8000e8c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e94 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8000e9c:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <DS1307_Init+0x1c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f806 	bl	8000eb4 <DS1307_SetClockHalt>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000690 	.word	0x20000690

08000eb4 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <DS1307_SetClockHalt+0x14>
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	e000      	b.n	8000eca <DS1307_SetClockHalt+0x16>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 f83d 	bl	8000f4c <DS1307_GetRegByte>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 f811 	bl	8000f10 <DS1307_SetRegByte>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f826 	bl	8000f4c <DS1307_GetRegByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	11db      	asrs	r3, r3, #7
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	733b      	strb	r3, [r7, #12]
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <DS1307_SetRegByte+0x38>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	f107 020c 	add.w	r2, r7, #12
 8000f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2302      	movs	r3, #2
 8000f38:	21d0      	movs	r1, #208	@ 0xd0
 8000f3a:	f002 f9cb 	bl	80032d4 <HAL_I2C_Master_Transmit>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000690 	.word	0x20000690

08000f4c <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <DS1307_GetRegByte+0x40>)
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	21d0      	movs	r1, #208	@ 0xd0
 8000f66:	f002 f9b5 	bl	80032d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <DS1307_GetRegByte+0x40>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	f107 020f 	add.w	r2, r7, #15
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	21d0      	movs	r1, #208	@ 0xd0
 8000f7c:	f002 fac2 	bl	8003504 <HAL_I2C_Master_Receive>
	return val;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000690 	.word	0x20000690

08000f90 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8000f94:	2003      	movs	r0, #3
 8000f96:	f7ff ffd9 	bl	8000f4c <DS1307_GetRegByte>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f907 	bl	80011b0 <DS1307_DecodeBCD>
 8000fa2:	4603      	mov	r3, r0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8000fac:	2004      	movs	r0, #4
 8000fae:	f7ff ffcd 	bl	8000f4c <DS1307_GetRegByte>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f8fb 	bl	80011b0 <DS1307_DecodeBCD>
 8000fba:	4603      	mov	r3, r0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8000fc4:	2005      	movs	r0, #5
 8000fc6:	f7ff ffc1 	bl	8000f4c <DS1307_GetRegByte>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f8ef 	bl	80011b0 <DS1307_DecodeBCD>
 8000fd2:	4603      	mov	r3, r0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8000fde:	2010      	movs	r0, #16
 8000fe0:	f7ff ffb4 	bl	8000f4c <DS1307_GetRegByte>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	461a      	mov	r2, r3
 8000fee:	0091      	lsls	r1, r2, #2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8000ffa:	2006      	movs	r0, #6
 8000ffc:	f7ff ffa6 	bl	8000f4c <DS1307_GetRegByte>
 8001000:	4603      	mov	r3, r0
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f8d4 	bl	80011b0 <DS1307_DecodeBCD>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	4413      	add	r3, r2
 8001010:	b29b      	uxth	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 800101e:	2002      	movs	r0, #2
 8001020:	f7ff ff94 	bl	8000f4c <DS1307_GetRegByte>
 8001024:	4603      	mov	r3, r0
 8001026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f8bf 	bl	80011b0 <DS1307_DecodeBCD>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	bd80      	pop	{r7, pc}

08001038 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ff85 	bl	8000f4c <DS1307_GetRegByte>
 8001042:	4603      	mov	r3, r0
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f8b3 	bl	80011b0 <DS1307_DecodeBCD>
 800104a:	4603      	mov	r3, r0
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}

08001050 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ff79 	bl	8000f4c <DS1307_GetRegByte>
 800105a:	4603      	mov	r3, r0
 800105c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f8a4 	bl	80011b0 <DS1307_DecodeBCD>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}

0800106e <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f8b2 	bl	80011e4 <DS1307_EncodeBCD>
 8001080:	4603      	mov	r3, r0
 8001082:	4619      	mov	r1, r3
 8001084:	2003      	movs	r0, #3
 8001086:	f7ff ff43 	bl	8000f10 <DS1307_SetRegByte>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f8a0 	bl	80011e4 <DS1307_EncodeBCD>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4619      	mov	r1, r3
 80010a8:	2004      	movs	r0, #4
 80010aa:	f7ff ff31 	bl	8000f10 <DS1307_SetRegByte>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f88e 	bl	80011e4 <DS1307_EncodeBCD>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4619      	mov	r1, r3
 80010cc:	2005      	movs	r0, #5
 80010ce:	f7ff ff1f 	bl	8000f10 <DS1307_SetRegByte>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	4a10      	ldr	r2, [pc, #64]	@ (800112c <DS1307_SetYear+0x50>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4619      	mov	r1, r3
 80010f6:	2010      	movs	r0, #16
 80010f8:	f7ff ff0a 	bl	8000f10 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <DS1307_SetYear+0x50>)
 8001100:	fba2 1203 	umull	r1, r2, r2, r3
 8001104:	0952      	lsrs	r2, r2, #5
 8001106:	2164      	movs	r1, #100	@ 0x64
 8001108:	fb01 f202 	mul.w	r2, r1, r2
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	b29b      	uxth	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f866 	bl	80011e4 <DS1307_EncodeBCD>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	2006      	movs	r0, #6
 800111e:	f7ff fef7 	bl	8000f10 <DS1307_SetRegByte>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	51eb851f 	.word	0x51eb851f

08001130 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f84e 	bl	80011e4 <DS1307_EncodeBCD>
 8001148:	4603      	mov	r3, r0
 800114a:	4619      	mov	r1, r3
 800114c:	2002      	movs	r0, #2
 800114e:	f7ff fedf 	bl	8000f10 <DS1307_SetRegByte>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f83c 	bl	80011e4 <DS1307_EncodeBCD>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff fecd 	bl	8000f10 <DS1307_SetRegByte>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8001188:	f7ff feb5 	bl	8000ef6 <DS1307_GetClockHalt>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8001190:	79fa      	ldrb	r2, [r7, #7]
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4313      	orrs	r3, r2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f823 	bl	80011e4 <DS1307_EncodeBCD>
 800119e:	4603      	mov	r3, r0
 80011a0:	4619      	mov	r1, r3
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff feb4 	bl	8000f10 <DS1307_SetRegByte>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b2db      	uxtb	r3, r3
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <DS1307_EncodeBCD+0x40>)
 80011f2:	fba3 1302 	umull	r1, r3, r3, r2
 80011f6:	08d9      	lsrs	r1, r3, #3
 80011f8:	460b      	mov	r3, r1
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	b2da      	uxtb	r2, r3
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4907      	ldr	r1, [pc, #28]	@ (8001224 <DS1307_EncodeBCD+0x40>)
 8001208:	fba1 1303 	umull	r1, r3, r1, r3
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b2db      	uxtb	r3, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	cccccccd 	.word	0xcccccccd

08001228 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	480c      	ldr	r0, [pc, #48]	@ (800126c <ILI9488_SendCommand+0x44>)
 800123c:	f001 ff96 	bl	800316c <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8001240:	2200      	movs	r2, #0
 8001242:	2101      	movs	r1, #1
 8001244:	4809      	ldr	r0, [pc, #36]	@ (800126c <ILI9488_SendCommand+0x44>)
 8001246:	f001 ff91 	bl	800316c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800124a:	f107 010f 	add.w	r1, r7, #15
 800124e:	2301      	movs	r3, #1
 8001250:	2201      	movs	r2, #1
 8001252:	4807      	ldr	r0, [pc, #28]	@ (8001270 <ILI9488_SendCommand+0x48>)
 8001254:	f004 facd 	bl	80057f2 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8001258:	2201      	movs	r2, #1
 800125a:	2101      	movs	r1, #1
 800125c:	4803      	ldr	r0, [pc, #12]	@ (800126c <ILI9488_SendCommand+0x44>)
 800125e:	f001 ff85 	bl	800316c <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	48000c00 	.word	0x48000c00
 8001270:	20000700 	.word	0x20000700

08001274 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 8001282:	2201      	movs	r2, #1
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <ILI9488_SendData+0x44>)
 8001288:	f001 ff70 	bl	800316c <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 800128c:	2200      	movs	r2, #0
 800128e:	2101      	movs	r1, #1
 8001290:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <ILI9488_SendData+0x44>)
 8001292:	f001 ff6b 	bl	800316c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 8001296:	f107 010f 	add.w	r1, r7, #15
 800129a:	2301      	movs	r3, #1
 800129c:	2201      	movs	r2, #1
 800129e:	4807      	ldr	r0, [pc, #28]	@ (80012bc <ILI9488_SendData+0x48>)
 80012a0:	f004 faa7 	bl	80057f2 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 80012a4:	2201      	movs	r2, #1
 80012a6:	2101      	movs	r1, #1
 80012a8:	4803      	ldr	r0, [pc, #12]	@ (80012b8 <ILI9488_SendData+0x44>)
 80012aa:	f001 ff5f 	bl	800316c <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	48000c00 	.word	0x48000c00
 80012bc:	20000700 	.word	0x20000700

080012c0 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80012ca:	2201      	movs	r2, #1
 80012cc:	2140      	movs	r1, #64	@ 0x40
 80012ce:	4815      	ldr	r0, [pc, #84]	@ (8001324 <ILI9488_SendData_Multi+0x64>)
 80012d0:	f001 ff4c 	bl	800316c <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4812      	ldr	r0, [pc, #72]	@ (8001324 <ILI9488_SendData_Multi+0x64>)
 80012da:	f001 ff47 	bl	800316c <HAL_GPIO_WritePin>
	while (buff_size > 0){
 80012de:	e015      	b.n	800130c <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80012e6:	bf28      	it	cs
 80012e8:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80012ec:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80012ee:	89fa      	ldrh	r2, [r7, #14]
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	480c      	ldr	r0, [pc, #48]	@ (8001328 <ILI9488_SendData_Multi+0x68>)
 80012f8:	f004 fa7b 	bl	80057f2 <HAL_SPI_Transmit>
		buff += chunk_size;
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001304:	89fb      	ldrh	r3, [r7, #14]
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1e6      	bne.n	80012e0 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 8001312:	2201      	movs	r2, #1
 8001314:	2101      	movs	r1, #1
 8001316:	4803      	ldr	r0, [pc, #12]	@ (8001324 <ILI9488_SendData_Multi+0x64>)
 8001318:	f001 ff28 	bl	800316c <HAL_GPIO_WritePin>
}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	48000c00 	.word	0x48000c00
 8001328:	20000700 	.word	0x20000700

0800132c <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 8001330:	2201      	movs	r2, #1
 8001332:	2101      	movs	r1, #1
 8001334:	486c      	ldr	r0, [pc, #432]	@ (80014e8 <ILI9488_Init+0x1bc>)
 8001336:	f001 ff19 	bl	800316c <HAL_GPIO_WritePin>
	RST_A();
 800133a:	2200      	movs	r2, #0
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	486a      	ldr	r0, [pc, #424]	@ (80014e8 <ILI9488_Init+0x1bc>)
 8001340:	f001 ff14 	bl	800316c <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8001344:	200a      	movs	r0, #10
 8001346:	f001 fc75 	bl	8002c34 <HAL_Delay>
		 RST_D();
 800134a:	2201      	movs	r2, #1
 800134c:	2180      	movs	r1, #128	@ 0x80
 800134e:	4866      	ldr	r0, [pc, #408]	@ (80014e8 <ILI9488_Init+0x1bc>)
 8001350:	f001 ff0c 	bl	800316c <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 8001354:	4b65      	ldr	r3, [pc, #404]	@ (80014ec <ILI9488_Init+0x1c0>)
 8001356:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800135a:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 800135c:	4b64      	ldr	r3, [pc, #400]	@ (80014f0 <ILI9488_Init+0x1c4>)
 800135e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001362:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 8001364:	20e0      	movs	r0, #224	@ 0xe0
 8001366:	f7ff ff5f 	bl	8001228 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ff82 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 8001370:	2003      	movs	r0, #3
 8001372:	f7ff ff7f 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8001376:	2009      	movs	r0, #9
 8001378:	f7ff ff7c 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 800137c:	2008      	movs	r0, #8
 800137e:	f7ff ff79 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8001382:	2016      	movs	r0, #22
 8001384:	f7ff ff76 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8001388:	200a      	movs	r0, #10
 800138a:	f7ff ff73 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 800138e:	203f      	movs	r0, #63	@ 0x3f
 8001390:	f7ff ff70 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8001394:	2078      	movs	r0, #120	@ 0x78
 8001396:	f7ff ff6d 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 800139a:	204c      	movs	r0, #76	@ 0x4c
 800139c:	f7ff ff6a 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 80013a0:	2009      	movs	r0, #9
 80013a2:	f7ff ff67 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f7ff ff64 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 80013ac:	2008      	movs	r0, #8
 80013ae:	f7ff ff61 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 80013b2:	2016      	movs	r0, #22
 80013b4:	f7ff ff5e 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 80013b8:	201a      	movs	r0, #26
 80013ba:	f7ff ff5b 	bl	8001274 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 80013be:	200f      	movs	r0, #15
 80013c0:	f7ff ff58 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 80013c4:	20e1      	movs	r0, #225	@ 0xe1
 80013c6:	f7ff ff2f 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff ff52 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 80013d0:	2016      	movs	r0, #22
 80013d2:	f7ff ff4f 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 80013d6:	2019      	movs	r0, #25
 80013d8:	f7ff ff4c 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 80013dc:	2003      	movs	r0, #3
 80013de:	f7ff ff49 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f7ff ff46 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 80013e8:	2005      	movs	r0, #5
 80013ea:	f7ff ff43 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 80013ee:	2032      	movs	r0, #50	@ 0x32
 80013f0:	f7ff ff40 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 80013f4:	2045      	movs	r0, #69	@ 0x45
 80013f6:	f7ff ff3d 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 80013fa:	2046      	movs	r0, #70	@ 0x46
 80013fc:	f7ff ff3a 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 8001400:	2004      	movs	r0, #4
 8001402:	f7ff ff37 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 8001406:	200e      	movs	r0, #14
 8001408:	f7ff ff34 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 800140c:	200d      	movs	r0, #13
 800140e:	f7ff ff31 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 8001412:	2035      	movs	r0, #53	@ 0x35
 8001414:	f7ff ff2e 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 8001418:	2037      	movs	r0, #55	@ 0x37
 800141a:	f7ff ff2b 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 800141e:	200f      	movs	r0, #15
 8001420:	f7ff ff28 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 8001424:	20c0      	movs	r0, #192	@ 0xc0
 8001426:	f7ff feff 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 800142a:	2017      	movs	r0, #23
 800142c:	f7ff ff22 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 8001430:	2015      	movs	r0, #21
 8001432:	f7ff ff1f 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 8001436:	20c1      	movs	r0, #193	@ 0xc1
 8001438:	f7ff fef6 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 800143c:	2041      	movs	r0, #65	@ 0x41
 800143e:	f7ff ff19 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 8001442:	20c5      	movs	r0, #197	@ 0xc5
 8001444:	f7ff fef0 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff ff13 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 800144e:	2012      	movs	r0, #18
 8001450:	f7ff ff10 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 8001454:	2080      	movs	r0, #128	@ 0x80
 8001456:	f7ff ff0d 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 800145a:	2036      	movs	r0, #54	@ 0x36
 800145c:	f7ff fee4 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 8001460:	2048      	movs	r0, #72	@ 0x48
 8001462:	f7ff ff07 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 8001466:	203a      	movs	r0, #58	@ 0x3a
 8001468:	f7ff fede 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 800146c:	2066      	movs	r0, #102	@ 0x66
 800146e:	f7ff ff01 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 8001472:	20b0      	movs	r0, #176	@ 0xb0
 8001474:	f7ff fed8 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8001478:	2080      	movs	r0, #128	@ 0x80
 800147a:	f7ff fefb 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 800147e:	20b1      	movs	r0, #177	@ 0xb1
 8001480:	f7ff fed2 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 8001484:	20a0      	movs	r0, #160	@ 0xa0
 8001486:	f7ff fef5 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 800148a:	20b4      	movs	r0, #180	@ 0xb4
 800148c:	f7ff fecc 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8001490:	2002      	movs	r0, #2
 8001492:	f7ff feef 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8001496:	20b6      	movs	r0, #182	@ 0xb6
 8001498:	f7ff fec6 	bl	8001228 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 800149c:	2002      	movs	r0, #2
 800149e:	f7ff fee9 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 80014a2:	2002      	movs	r0, #2
 80014a4:	f7ff fee6 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 80014a8:	20e9      	movs	r0, #233	@ 0xe9
 80014aa:	f7ff febd 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fee0 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 80014b4:	20f7      	movs	r0, #247	@ 0xf7
 80014b6:	f7ff feb7 	bl	8001228 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 80014ba:	20a9      	movs	r0, #169	@ 0xa9
 80014bc:	f7ff feda 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 80014c0:	2051      	movs	r0, #81	@ 0x51
 80014c2:	f7ff fed7 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 80014c6:	202c      	movs	r0, #44	@ 0x2c
 80014c8:	f7ff fed4 	bl	8001274 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 80014cc:	2082      	movs	r0, #130	@ 0x82
 80014ce:	f7ff fed1 	bl	8001274 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 80014d2:	2011      	movs	r0, #17
 80014d4:	f7ff fea8 	bl	8001228 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 80014d8:	2078      	movs	r0, #120	@ 0x78
 80014da:	f001 fbab 	bl	8002c34 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 80014de:	2029      	movs	r0, #41	@ 0x29
 80014e0:	f7ff fea2 	bl	8001228 <ILI9488_SendCommand>

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	48000c00 	.word	0x48000c00
 80014ec:	200006a6 	.word	0x200006a6
 80014f0:	200006a8 	.word	0x200006a8

080014f4 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4604      	mov	r4, r0
 80014fc:	4608      	mov	r0, r1
 80014fe:	4611      	mov	r1, r2
 8001500:	461a      	mov	r2, r3
 8001502:	4623      	mov	r3, r4
 8001504:	80fb      	strh	r3, [r7, #6]
 8001506:	4603      	mov	r3, r0
 8001508:	80bb      	strh	r3, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	807b      	strh	r3, [r7, #2]
 800150e:	4613      	mov	r3, r2
 8001510:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 8001512:	202a      	movs	r0, #42	@ 0x2a
 8001514:	f7ff fe88 	bl	8001228 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b29b      	uxth	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	733b      	strb	r3, [r7, #12]
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	737b      	strb	r3, [r7, #13]
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	73bb      	strb	r3, [r7, #14]
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2104      	movs	r1, #4
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff febe 	bl	80012c0 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8001544:	202b      	movs	r0, #43	@ 0x2b
 8001546:	f7ff fe6f 	bl	8001228 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 800154a:	88bb      	ldrh	r3, [r7, #4]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	b29b      	uxth	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	723b      	strb	r3, [r7, #8]
 8001554:	88bb      	ldrh	r3, [r7, #4]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	727b      	strb	r3, [r7, #9]
 800155a:	883b      	ldrh	r3, [r7, #0]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	72bb      	strb	r3, [r7, #10]
 8001564:	883b      	ldrh	r3, [r7, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2104      	movs	r1, #4
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fea5 	bl	80012c0 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 8001576:	202c      	movs	r0, #44	@ 0x2c
 8001578:	f7ff fe56 	bl	8001228 <ILI9488_SendCommand>
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
 800158e:	460b      	mov	r3, r1
 8001590:	80bb      	strh	r3, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8001596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db36      	blt.n	800160c <drawPixel+0x88>
 800159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <drawPixel+0x90>)
 80015a4:	8812      	ldrh	r2, [r2, #0]
 80015a6:	4293      	cmp	r3, r2
 80015a8:	da30      	bge.n	800160c <drawPixel+0x88>
 80015aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db2c      	blt.n	800160c <drawPixel+0x88>
 80015b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015b6:	4a18      	ldr	r2, [pc, #96]	@ (8001618 <drawPixel+0x94>)
 80015b8:	8812      	ldrh	r2, [r2, #0]
 80015ba:	4293      	cmp	r3, r2
 80015bc:	da26      	bge.n	800160c <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 80015be:	88f8      	ldrh	r0, [r7, #6]
 80015c0:	88b9      	ldrh	r1, [r7, #4]
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f7ff ff91 	bl	80014f4 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <drawPixel+0x98>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <drawPixel+0x9c>)
 80015d8:	8811      	ldrh	r1, [r2, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 fdc5 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <drawPixel+0xa0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a10      	ldr	r2, [pc, #64]	@ (8001628 <drawPixel+0xa4>)
 80015e8:	8811      	ldrh	r1, [r2, #0]
 80015ea:	2200      	movs	r2, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 fdbd 	bl	800316c <HAL_GPIO_WritePin>

	write16BitColor(color);
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fb79 	bl	8001cec <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <drawPixel+0xa0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <drawPixel+0xa4>)
 8001600:	8811      	ldrh	r1, [r2, #0]
 8001602:	2201      	movs	r2, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fdb1 	bl	800316c <HAL_GPIO_WritePin>
 800160a:	e000      	b.n	800160e <drawPixel+0x8a>
		return;
 800160c:	bf00      	nop

}
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200006a6 	.word	0x200006a6
 8001618:	200006a8 	.word	0x200006a8
 800161c:	200006a0 	.word	0x200006a0
 8001620:	200006a4 	.word	0x200006a4
 8001624:	20000698 	.word	0x20000698
 8001628:	2000069c 	.word	0x2000069c

0800162c <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af02      	add	r7, sp, #8
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <fillScreen+0x2c>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <fillScreen+0x30>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b219      	sxth	r1, r3
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	460b      	mov	r3, r1
 8001648:	2100      	movs	r1, #0
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f808 	bl	8001660 <fillRect>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200006a6 	.word	0x200006a6
 800165c:	200006a8 	.word	0x200006a8

08001660 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001664:	b08a      	sub	sp, #40	@ 0x28
 8001666:	af00      	add	r7, sp, #0
 8001668:	4606      	mov	r6, r0
 800166a:	4608      	mov	r0, r1
 800166c:	4611      	mov	r1, r2
 800166e:	461a      	mov	r2, r3
 8001670:	4633      	mov	r3, r6
 8001672:	80fb      	strh	r3, [r7, #6]
 8001674:	4603      	mov	r3, r0
 8001676:	80bb      	strh	r3, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	803b      	strh	r3, [r7, #0]
 8001680:	466b      	mov	r3, sp
 8001682:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8001684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001688:	4a8f      	ldr	r2, [pc, #572]	@ (80018c8 <fillRect+0x268>)
 800168a:	8812      	ldrh	r2, [r2, #0]
 800168c:	4293      	cmp	r3, r2
 800168e:	da05      	bge.n	800169c <fillRect+0x3c>
 8001690:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001694:	4a8d      	ldr	r2, [pc, #564]	@ (80018cc <fillRect+0x26c>)
 8001696:	8812      	ldrh	r2, [r2, #0]
 8001698:	4293      	cmp	r3, r2
 800169a:	db01      	blt.n	80016a0 <fillRect+0x40>
		return;
 800169c:	46d5      	mov	sp, sl
 800169e:	e10f      	b.n	80018c0 <fillRect+0x260>
	if ((x + w - 1) >= width)
 80016a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a87      	ldr	r2, [pc, #540]	@ (80018c8 <fillRect+0x268>)
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	4293      	cmp	r3, r2
 80016b0:	dd05      	ble.n	80016be <fillRect+0x5e>
		w = width - x;
 80016b2:	4b85      	ldr	r3, [pc, #532]	@ (80018c8 <fillRect+0x268>)
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 80016be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a80      	ldr	r2, [pc, #512]	@ (80018cc <fillRect+0x26c>)
 80016ca:	8812      	ldrh	r2, [r2, #0]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	dd05      	ble.n	80016dc <fillRect+0x7c>
		h = height - y;
 80016d0:	4b7e      	ldr	r3, [pc, #504]	@ (80018cc <fillRect+0x26c>)
 80016d2:	881a      	ldrh	r2, [r3, #0]
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	b29b      	uxth	r3, r3
 80016da:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80016dc:	88f8      	ldrh	r0, [r7, #6]
 80016de:	88b9      	ldrh	r1, [r7, #4]
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	4413      	add	r3, r2
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29e      	uxth	r6, r3
 80016ec:	88ba      	ldrh	r2, [r7, #4]
 80016ee:	883b      	ldrh	r3, [r7, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4632      	mov	r2, r6
 80016fa:	f7ff fefb 	bl	80014f4 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 80016fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001702:	0adb      	lsrs	r3, r3, #11
 8001704:	b29b      	uxth	r3, r3
 8001706:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 8001708:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800170c:	115b      	asrs	r3, r3, #5
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001714:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 8001716:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 8001722:	7efa      	ldrb	r2, [r7, #27]
 8001724:	4613      	mov	r3, r2
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	4a69      	ldr	r2, [pc, #420]	@ (80018d0 <fillRect+0x270>)
 800172c:	fb82 1203 	smull	r1, r2, r2, r3
 8001730:	441a      	add	r2, r3
 8001732:	1112      	asrs	r2, r2, #4
 8001734:	17db      	asrs	r3, r3, #31
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 800173a:	7eba      	ldrb	r2, [r7, #26]
 800173c:	4613      	mov	r3, r2
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	4a64      	ldr	r2, [pc, #400]	@ (80018d4 <fillRect+0x274>)
 8001744:	fb82 1203 	smull	r1, r2, r2, r3
 8001748:	441a      	add	r2, r3
 800174a:	1152      	asrs	r2, r2, #5
 800174c:	17db      	asrs	r3, r3, #31
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8001752:	7e7a      	ldrb	r2, [r7, #25]
 8001754:	4613      	mov	r3, r2
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	4a5d      	ldr	r2, [pc, #372]	@ (80018d0 <fillRect+0x270>)
 800175c:	fb82 1203 	smull	r1, r2, r2, r3
 8001760:	441a      	add	r2, r3
 8001762:	1112      	asrs	r2, r2, #4
 8001764:	17db      	asrs	r3, r3, #31
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 800176a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800176e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001772:	fb03 f202 	mul.w	r2, r3, r2
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001784:	d204      	bcs.n	8001790 <fillRect+0x130>
		cnt = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	623b      	str	r3, [r7, #32]
		buf_size = n;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e02f      	b.n	80017f0 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	4a51      	ldr	r2, [pc, #324]	@ (80018d8 <fillRect+0x278>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 800179c:	2303      	movs	r3, #3
 800179e:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	4a4e      	ldr	r2, [pc, #312]	@ (80018dc <fillRect+0x27c>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	0bdb      	lsrs	r3, r3, #15
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 80017b0:	7cfb      	ldrb	r3, [r7, #19]
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b4:	e014      	b.n	80017e0 <fillRect+0x180>
			if(n%i == 0){
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80017be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017c0:	fb01 f202 	mul.w	r2, r1, r2
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d107      	bne.n	80017da <fillRect+0x17a>
				cnt = i;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017cc:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	61fb      	str	r3, [r7, #28]
				break;
 80017d8:	e00a      	b.n	80017f0 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	3301      	adds	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4a3d      	ldr	r2, [pc, #244]	@ (80018d8 <fillRect+0x278>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d3e2      	bcc.n	80017b6 <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 80017f0:	69f9      	ldr	r1, [r7, #28]
 80017f2:	460b      	mov	r3, r1
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	2300      	movs	r3, #0
 80017fa:	4688      	mov	r8, r1
 80017fc:	4699      	mov	r9, r3
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800180a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800180e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001812:	2300      	movs	r3, #0
 8001814:	460c      	mov	r4, r1
 8001816:	461d      	mov	r5, r3
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	00eb      	lsls	r3, r5, #3
 8001822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001826:	00e2      	lsls	r2, r4, #3
 8001828:	1dcb      	adds	r3, r1, #7
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	ebad 0d03 	sub.w	sp, sp, r3
 8001832:	466b      	mov	r3, sp
 8001834:	3300      	adds	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
 800183c:	e019      	b.n	8001872 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 800183e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	7ef9      	ldrb	r1, [r7, #27]
 800184a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 800184c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	3301      	adds	r3, #1
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	7eb9      	ldrb	r1, [r7, #26]
 800185a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 800185c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	3302      	adds	r3, #2
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	7e79      	ldrb	r1, [r7, #25]
 800186a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	3301      	adds	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4a18      	ldr	r2, [pc, #96]	@ (80018d8 <fillRect+0x278>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187e:	429a      	cmp	r2, r3
 8001880:	d3dd      	bcc.n	800183e <fillRect+0x1de>
	}
	DC_DATA();
 8001882:	2201      	movs	r2, #1
 8001884:	2140      	movs	r1, #64	@ 0x40
 8001886:	4816      	ldr	r0, [pc, #88]	@ (80018e0 <fillRect+0x280>)
 8001888:	f001 fc70 	bl	800316c <HAL_GPIO_WritePin>
	CS_A();
 800188c:	2200      	movs	r2, #0
 800188e:	2101      	movs	r1, #1
 8001890:	4813      	ldr	r0, [pc, #76]	@ (80018e0 <fillRect+0x280>)
 8001892:	f001 fc6b 	bl	800316c <HAL_GPIO_WritePin>
		while(cnt>0)
 8001896:	e00a      	b.n	80018ae <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	b29a      	uxth	r2, r3
 800189c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	4810      	ldr	r0, [pc, #64]	@ (80018e4 <fillRect+0x284>)
 80018a4:	f003 ffa5 	bl	80057f2 <HAL_SPI_Transmit>

			cnt -= 1;
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f1      	bne.n	8001898 <fillRect+0x238>
		}
		CS_D();
 80018b4:	2201      	movs	r2, #1
 80018b6:	2101      	movs	r1, #1
 80018b8:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <fillRect+0x280>)
 80018ba:	f001 fc57 	bl	800316c <HAL_GPIO_WritePin>
 80018be:	46d5      	mov	sp, sl

}
 80018c0:	3728      	adds	r7, #40	@ 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018c8:	200006a6 	.word	0x200006a6
 80018cc:	200006a8 	.word	0x200006a8
 80018d0:	84210843 	.word	0x84210843
 80018d4:	82082083 	.word	0x82082083
 80018d8:	aaaaaaab 	.word	0xaaaaaaab
 80018dc:	80008001 	.word	0x80008001
 80018e0:	48000c00 	.word	0x48000c00
 80018e4:	20000700 	.word	0x20000700

080018e8 <setRotation>:


void setRotation(uint8_t r)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 80018f2:	2036      	movs	r0, #54	@ 0x36
 80018f4:	f7ff fc98 	bl	8001228 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d83a      	bhi.n	800197c <setRotation+0x94>
 8001906:	a201      	add	r2, pc, #4	@ (adr r2, 800190c <setRotation+0x24>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	0800191d 	.word	0x0800191d
 8001910:	08001935 	.word	0x08001935
 8001914:	0800194d 	.word	0x0800194d
 8001918:	08001965 	.word	0x08001965
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 800191c:	2048      	movs	r0, #72	@ 0x48
 800191e:	f7ff fca9 	bl	8001274 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8001922:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <setRotation+0x9c>)
 8001924:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001928:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <setRotation+0xa0>)
 800192c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001930:	801a      	strh	r2, [r3, #0]
		break;
 8001932:	e023      	b.n	800197c <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8001934:	2028      	movs	r0, #40	@ 0x28
 8001936:	f7ff fc9d 	bl	8001274 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <setRotation+0x9c>)
 800193c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001940:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <setRotation+0xa0>)
 8001944:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001948:	801a      	strh	r2, [r3, #0]
		break;
 800194a:	e017      	b.n	800197c <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 800194c:	2088      	movs	r0, #136	@ 0x88
 800194e:	f7ff fc91 	bl	8001274 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <setRotation+0x9c>)
 8001954:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001958:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <setRotation+0xa0>)
 800195c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001960:	801a      	strh	r2, [r3, #0]
		break;
 8001962:	e00b      	b.n	800197c <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001964:	20e8      	movs	r0, #232	@ 0xe8
 8001966:	f7ff fc85 	bl	8001274 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <setRotation+0x9c>)
 800196c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001970:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <setRotation+0xa0>)
 8001974:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001978:	801a      	strh	r2, [r3, #0]
		break;
 800197a:	bf00      	nop
	}

}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200006a6 	.word	0x200006a6
 8001988:	200006a8 	.word	0x200006a8

0800198c <drawChar>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

//11. Text printing functions
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 800198c:	b5b0      	push	{r4, r5, r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
 8001992:	4604      	mov	r4, r0
 8001994:	4608      	mov	r0, r1
 8001996:	4611      	mov	r1, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4623      	mov	r3, r4
 800199c:	80fb      	strh	r3, [r7, #6]
 800199e:	4603      	mov	r3, r0
 80019a0:	80bb      	strh	r3, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	70fb      	strb	r3, [r7, #3]
 80019a6:	4613      	mov	r3, r2
 80019a8:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 80019aa:	4bac      	ldr	r3, [pc, #688]	@ (8001c5c <drawChar+0x2d0>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d003      	beq.n	80019ba <drawChar+0x2e>
 80019b2:	4baa      	ldr	r3, [pc, #680]	@ (8001c5c <drawChar+0x2d0>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d120      	bne.n	80019fc <drawChar+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 80019ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80019c2:	f280 8144 	bge.w	8001c4e <drawChar+0x2c2>
 80019c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019ca:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80019ce:	f280 813e 	bge.w	8001c4e <drawChar+0x2c2>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80019d2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80019d6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f340 8132 	ble.w	8001c4e <drawChar+0x2c2>
     ((y + 8 * size - 1) < 0))   // Clip top
 80019ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	dc22      	bgt.n	8001a40 <drawChar+0xb4>
    return;
 80019fa:	e128      	b.n	8001c4e <drawChar+0x2c2>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 80019fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a00:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a04:	f280 8125 	bge.w	8001c52 <drawChar+0x2c6>
 8001a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001a10:	f280 811f 	bge.w	8001c52 <drawChar+0x2c6>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8001a14:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a18:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f340 8113 	ble.w	8001c52 <drawChar+0x2c6>
     ((x + 8 * size - 1) < 0))   // Clip top
 8001a2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f340 810a 	ble.w	8001c52 <drawChar+0x2c6>
 8001a3e:	e000      	b.n	8001a42 <drawChar+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8001a40:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001a42:	4b87      	ldr	r3, [pc, #540]	@ (8001c60 <drawChar+0x2d4>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	f083 0301 	eor.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <drawChar+0xd0>
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	2baf      	cmp	r3, #175	@ 0xaf
 8001a54:	d902      	bls.n	8001a5c <drawChar+0xd0>
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e0ef      	b.n	8001c42 <drawChar+0x2b6>
    uint8_t line;
    if (i == 5)
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d102      	bne.n	8001a70 <drawChar+0xe4>
      line = 0x0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73bb      	strb	r3, [r7, #14]
 8001a6e:	e00b      	b.n	8001a88 <drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a78      	ldr	r2, [pc, #480]	@ (8001c64 <drawChar+0x2d8>)
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	737b      	strb	r3, [r7, #13]
 8001a8c:	e0ce      	b.n	8001c2c <drawChar+0x2a0>
      if (line & 0x1) {
 8001a8e:	7bbb      	ldrb	r3, [r7, #14]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d05e      	beq.n	8001b56 <drawChar+0x1ca>
        if (size == 1) // default size
 8001a98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d112      	bne.n	8001ac6 <drawChar+0x13a>
        	drawPixel(x+i, y+j, color);
 8001aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	883a      	ldrh	r2, [r7, #0]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff fd60 	bl	8001584 <drawPixel>
 8001ac4:	e0a9      	b.n	8001c1a <drawChar+0x28e>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	fb12 f303 	smulbb	r3, r2, r3
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4413      	add	r3, r2
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b218      	sxth	r0, r3
 8001ae0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	fb12 f303 	smulbb	r3, r2, r3
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b21c      	sxth	r4, r3
 8001afa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	4413      	add	r3, r2
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	b299      	uxth	r1, r3
 8001b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	fb11 f303 	smulbb	r3, r1, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b21d      	sxth	r5, r3
 8001b1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b2e:	b299      	uxth	r1, r3
 8001b30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	fb11 f303 	smulbb	r3, r1, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	883b      	ldrh	r3, [r7, #0]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	462a      	mov	r2, r5
 8001b4e:	4621      	mov	r1, r4
 8001b50:	f7ff fd86 	bl	8001660 <fillRect>
 8001b54:	e061      	b.n	8001c1a <drawChar+0x28e>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }
      } else if (bg != color) {
 8001b56:	8c3a      	ldrh	r2, [r7, #32]
 8001b58:	883b      	ldrh	r3, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d05d      	beq.n	8001c1a <drawChar+0x28e>
        if (size == 1) // default size
 8001b5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d112      	bne.n	8001b8c <drawChar+0x200>
        	drawPixel(x+i, y+j, bg);
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	b218      	sxth	r0, r3
 8001b74:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	88bb      	ldrh	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	8c3a      	ldrh	r2, [r7, #32]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff fcfd 	bl	8001584 <drawPixel>
 8001b8a:	e046      	b.n	8001c1a <drawChar+0x28e>
        else {  // big size
        	fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8001b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	fb12 f303 	smulbb	r3, r2, r3
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b218      	sxth	r0, r3
 8001ba6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	fb12 f303 	smulbb	r3, r2, r3
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	88bb      	ldrh	r3, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b21c      	sxth	r4, r3
 8001bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	fb11 f303 	smulbb	r3, r1, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	b21d      	sxth	r5, r3
 8001be4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001bf4:	b299      	uxth	r1, r3
 8001bf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	fb11 f303 	smulbb	r3, r1, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	8c3b      	ldrh	r3, [r7, #32]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	462a      	mov	r2, r5
 8001c14:	4621      	mov	r1, r4
 8001c16:	f7ff fd23 	bl	8001660 <fillRect>
        }
      }
      line >>= 1;
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001c20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	737b      	strb	r3, [r7, #13]
 8001c2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c30:	2b07      	cmp	r3, #7
 8001c32:	f77f af2c 	ble.w	8001a8e <drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	f77f af0b 	ble.w	8001a62 <drawChar+0xd6>
 8001c4c:	e002      	b.n	8001c54 <drawChar+0x2c8>
    return;
 8001c4e:	bf00      	nop
 8001c50:	e000      	b.n	8001c54 <drawChar+0x2c8>
    return;
 8001c52:	bf00      	nop
    }
  }
}
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000694 	.word	0x20000694
 8001c64:	08007854 	.word	0x08007854

08001c68 <ILI9488_printText>:
    }
  }
}

void ILI9488_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	4608      	mov	r0, r1
 8001c72:	4611      	mov	r1, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4603      	mov	r3, r0
 8001c78:	817b      	strh	r3, [r7, #10]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	813b      	strh	r3, [r7, #8]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001c82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	0052      	lsls	r2, r2, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	82fb      	strh	r3, [r7, #22]
 8001c98:	e01a      	b.n	8001cd0 <ILI9488_printText+0x68>
	{
		drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001c9a:	8abb      	ldrh	r3, [r7, #20]
 8001c9c:	8afa      	ldrh	r2, [r7, #22]
 8001c9e:	fb12 f303 	smulbb	r3, r2, r3
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	897b      	ldrh	r3, [r7, #10]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b218      	sxth	r0, r3
 8001cac:	8afb      	ldrh	r3, [r7, #22]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	88fc      	ldrh	r4, [r7, #6]
 8001cb6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001cba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	4623      	mov	r3, r4
 8001cc6:	f7ff fe61 	bl	800198c <drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001cca:	8afb      	ldrh	r3, [r7, #22]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	82fb      	strh	r3, [r7, #22]
 8001cd0:	8afb      	ldrh	r3, [r7, #22]
 8001cd2:	2b27      	cmp	r3, #39	@ 0x27
 8001cd4:	d805      	bhi.n	8001ce2 <ILI9488_printText+0x7a>
 8001cd6:	8afb      	ldrh	r3, [r7, #22]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1db      	bne.n	8001c9a <ILI9488_printText+0x32>
	}
}
 8001ce2:	bf00      	nop
 8001ce4:	371c      	adds	r7, #28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}
	...

08001cec <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	0adb      	lsrs	r3, r3, #11
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	115b      	asrs	r3, r3, #5
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d08:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	4613      	mov	r3, r2
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	4a17      	ldr	r2, [pc, #92]	@ (8001d7c <write16BitColor+0x90>)
 8001d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d22:	441a      	add	r2, r3
 8001d24:	1112      	asrs	r2, r2, #4
 8001d26:	17db      	asrs	r3, r3, #31
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8001d2c:	7bba      	ldrb	r2, [r7, #14]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	4a12      	ldr	r2, [pc, #72]	@ (8001d80 <write16BitColor+0x94>)
 8001d36:	fb82 1203 	smull	r1, r2, r2, r3
 8001d3a:	441a      	add	r2, r3
 8001d3c:	1152      	asrs	r2, r2, #5
 8001d3e:	17db      	asrs	r3, r3, #31
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8001d44:	7b7a      	ldrb	r2, [r7, #13]
 8001d46:	4613      	mov	r3, r2
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d7c <write16BitColor+0x90>)
 8001d4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d52:	441a      	add	r2, r3
 8001d54:	1112      	asrs	r2, r2, #4
 8001d56:	17db      	asrs	r3, r3, #31
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	723b      	strb	r3, [r7, #8]
 8001d60:	7bbb      	ldrb	r3, [r7, #14]
 8001d62:	727b      	strb	r3, [r7, #9]
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff faa6 	bl	80012c0 <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	84210843 	.word	0x84210843
 8001d80:	82082083 	.word	0x82082083

08001d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d8a:	f000 fede 	bl	8002b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8e:	f000 f86d 	bl	8001e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d92:	f000 fa11 	bl	80021b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001d96:	f000 f8fb 	bl	8001f90 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001d9a:	f000 f937 	bl	800200c <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001d9e:	f000 f973 	bl	8002088 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001da2:	f000 f9bd 	bl	8002120 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001da6:	f000 f8b3 	bl	8001f10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILI9488_Init();
 8001daa:	f7ff fabf 	bl	800132c <ILI9488_Init>
  XPT2046_Init();
 8001dae:	f000 fe79 	bl	8002aa4 <XPT2046_Init>

  HAL_Delay(250);
 8001db2:	20fa      	movs	r0, #250	@ 0xfa
 8001db4:	f000 ff3e 	bl	8002c34 <HAL_Delay>
  setRotation(1);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fd95 	bl	80018e8 <setRotation>
  fillScreen(ILI9488_WHITE);
 8001dbe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dc2:	f7ff fc33 	bl	800162c <fillScreen>
  DS1307_Init(&hi2c1);
 8001dc6:	4823      	ldr	r0, [pc, #140]	@ (8001e54 <main+0xd0>)
 8001dc8:	f7ff f864 	bl	8000e94 <DS1307_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	DS1307_Init(&hi2c1);
 8001dcc:	4821      	ldr	r0, [pc, #132]	@ (8001e54 <main+0xd0>)
 8001dce:	f7ff f861 	bl	8000e94 <DS1307_Init>
	xbee_init(&huart2);
 8001dd2:	4821      	ldr	r0, [pc, #132]	@ (8001e58 <main+0xd4>)
 8001dd4:	f000 fcd0 	bl	8002778 <xbee_init>
	/* To test leap year correction. */
	DS1307_SetDate(4);
 8001dd8:	2004      	movs	r0, #4
 8001dda:	f7ff f95a 	bl	8001092 <DS1307_SetDate>
	DS1307_SetMonth(3);
 8001dde:	2003      	movs	r0, #3
 8001de0:	f7ff f969 	bl	80010b6 <DS1307_SetMonth>
	DS1307_SetYear(2024);
 8001de4:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 8001de8:	f7ff f978 	bl	80010dc <DS1307_SetYear>
	DS1307_SetDayOfWeek(2);
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7ff f93e 	bl	800106e <DS1307_SetDayOfWeek>
	DS1307_SetHour(22);
 8001df2:	2016      	movs	r0, #22
 8001df4:	f7ff f99c 	bl	8001130 <DS1307_SetHour>
	DS1307_SetMinute(13);
 8001df8:	200d      	movs	r0, #13
 8001dfa:	f7ff f9ae 	bl	800115a <DS1307_SetMinute>
	DS1307_SetSecond(30);
 8001dfe:	201e      	movs	r0, #30
 8001e00:	f7ff f9bd 	bl	800117e <DS1307_SetSecond>

	HAL_Delay(1000);
 8001e04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e08:	f000 ff14 	bl	8002c34 <HAL_Delay>

	//Monday at 11:00.
	addNewEntry(0, "WEEWOO2", 1, 11, 00);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	230b      	movs	r3, #11
 8001e12:	2201      	movs	r2, #1
 8001e14:	4911      	ldr	r1, [pc, #68]	@ (8001e5c <main+0xd8>)
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7fe fbba 	bl	8000590 <addNewEntry>
	//Friday at 5:30.
	addNewEntry(0, "WEEWOO3", 6, 5, 30);
 8001e1c:	231e      	movs	r3, #30
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2305      	movs	r3, #5
 8001e22:	2206      	movs	r2, #6
 8001e24:	490e      	ldr	r1, [pc, #56]	@ (8001e60 <main+0xdc>)
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7fe fbb2 	bl	8000590 <addNewEntry>
	//Sunday at 12:00.
	addNewEntry(0, "WEEWOO1", 0, 12, 00);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	230c      	movs	r3, #12
 8001e32:	2200      	movs	r2, #0
 8001e34:	490b      	ldr	r1, [pc, #44]	@ (8001e64 <main+0xe0>)
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7fe fbaa 	bl	8000590 <addNewEntry>

	uint8_t tx_buff [10] = {0,1,2,3,4,5,6,7,8,9};
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <main+0xe4>)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e42:	c303      	stmia	r3!, {r0, r1}
 8001e44:	801a      	strh	r2, [r3, #0]
	systemInit();
 8001e46:	f000 fca7 	bl	8002798 <systemInit>
	xbeeDownloadPills();
 8001e4a:	f000 fd97 	bl	800297c <xbeeDownloadPills>
  while (1)
  {
	  LockScreen();
 8001e4e:	f7fe fe39 	bl	8000ac4 <LockScreen>
 8001e52:	e7fc      	b.n	8001e4e <main+0xca>
 8001e54:	200006ac 	.word	0x200006ac
 8001e58:	200007c8 	.word	0x200007c8
 8001e5c:	08007830 	.word	0x08007830
 8001e60:	08007838 	.word	0x08007838
 8001e64:	08007840 	.word	0x08007840
 8001e68:	08007848 	.word	0x08007848

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b096      	sub	sp, #88	@ 0x58
 8001e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	2244      	movs	r2, #68	@ 0x44
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f005 f828 	bl	8006ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e80:	463b      	mov	r3, r7
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f001 ff78 	bl	8003d84 <HAL_PWREx_ControlVoltageScaling>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001e9a:	f000 fa33 	bl	8002304 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001eaa:	2360      	movs	r3, #96	@ 0x60
 8001eac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001eba:	233c      	movs	r3, #60	@ 0x3c
 8001ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f001 fffc 	bl	8003ecc <HAL_RCC_OscConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001eda:	f000 fa13 	bl	8002304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ede:	230f      	movs	r3, #15
 8001ee0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fc02 	bl	8004700 <HAL_RCC_ClockConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f02:	f000 f9ff 	bl	8002304 <Error_Handler>
  }
}
 8001f06:	bf00      	nop
 8001f08:	3758      	adds	r7, #88	@ 0x58
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <MX_I2C1_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f8c <MX_I2C1_Init+0x7c>)
 8001f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f20:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f26:	4b17      	ldr	r3, [pc, #92]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f4a:	480e      	ldr	r0, [pc, #56]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f4c:	f001 f926 	bl	800319c <HAL_I2C_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f56:	f000 f9d5 	bl	8002304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4809      	ldr	r0, [pc, #36]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f5e:	f001 fe59 	bl	8003c14 <HAL_I2CEx_ConfigAnalogFilter>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f68:	f000 f9cc 	bl	8002304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <MX_I2C1_Init+0x74>)
 8001f70:	f001 fe9b 	bl	8003caa <HAL_I2CEx_ConfigDigitalFilter>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f7a:	f000 f9c3 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200006ac 	.word	0x200006ac
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	307075b1 	.word	0x307075b1

08001f90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001f96:	4a1c      	ldr	r2, [pc, #112]	@ (8002008 <MX_SPI2_Init+0x78>)
 8001f98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001f9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fa0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa2:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa8:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001faa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fde:	2207      	movs	r2, #7
 8001fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001fea:	2208      	movs	r2, #8
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <MX_SPI2_Init+0x74>)
 8001ff0:	f003 fb5c 	bl	80056ac <HAL_SPI_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ffa:	f000 f983 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000700 	.word	0x20000700
 8002008:	40003800 	.word	0x40003800

0800200c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002012:	4a1c      	ldr	r2, [pc, #112]	@ (8002084 <MX_SPI3_Init+0x78>)
 8002014:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002018:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800201c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800201e:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002024:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002026:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800202a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800202c:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <MX_SPI3_Init+0x74>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002032:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_SPI3_Init+0x74>)
 800203a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002042:	2218      	movs	r2, #24
 8002044:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <MX_SPI3_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_SPI3_Init+0x74>)
 800205a:	2207      	movs	r2, #7
 800205c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_SPI3_Init+0x74>)
 8002066:	2208      	movs	r2, #8
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <MX_SPI3_Init+0x74>)
 800206c:	f003 fb1e 	bl	80056ac <HAL_SPI_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002076:	f000 f945 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000764 	.word	0x20000764
 8002084:	40003c00 	.word	0x40003c00

08002088 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800208c:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 800208e:	4a23      	ldr	r2, [pc, #140]	@ (800211c <MX_USART2_UART_Init+0x94>)
 8002090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002092:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 8002094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020d0:	4811      	ldr	r0, [pc, #68]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020d2:	f003 fe67 	bl	8005da4 <HAL_UART_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020dc:	f000 f912 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e0:	2100      	movs	r1, #0
 80020e2:	480d      	ldr	r0, [pc, #52]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020e4:	f004 fd54 	bl	8006b90 <HAL_UARTEx_SetTxFifoThreshold>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020ee:	f000 f909 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020f2:	2100      	movs	r1, #0
 80020f4:	4808      	ldr	r0, [pc, #32]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 80020f6:	f004 fd89 	bl	8006c0c <HAL_UARTEx_SetRxFifoThreshold>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002100:	f000 f900 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002104:	4804      	ldr	r0, [pc, #16]	@ (8002118 <MX_USART2_UART_Init+0x90>)
 8002106:	f004 fd0a 	bl	8006b1e <HAL_UARTEx_DisableFifoMode>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002110:	f000 f8f8 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	200007c8 	.word	0x200007c8
 800211c:	40004400 	.word	0x40004400

08002120 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 8002126:	4a23      	ldr	r2, [pc, #140]	@ (80021b4 <MX_USART3_UART_Init+0x94>)
 8002128:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800212a:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 800212c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002130:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002132:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002144:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 8002146:	220c      	movs	r2, #12
 8002148:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214a:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002150:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002156:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800215c:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002162:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 8002164:	2200      	movs	r2, #0
 8002166:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002168:	4811      	ldr	r0, [pc, #68]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 800216a:	f003 fe1b 	bl	8005da4 <HAL_UART_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002174:	f000 f8c6 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002178:	2100      	movs	r1, #0
 800217a:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 800217c:	f004 fd08 	bl	8006b90 <HAL_UARTEx_SetTxFifoThreshold>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002186:	f000 f8bd 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800218a:	2100      	movs	r1, #0
 800218c:	4808      	ldr	r0, [pc, #32]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 800218e:	f004 fd3d 	bl	8006c0c <HAL_UARTEx_SetRxFifoThreshold>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002198:	f000 f8b4 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800219c:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <MX_USART3_UART_Init+0x90>)
 800219e:	f004 fcbe 	bl	8006b1e <HAL_UARTEx_DisableFifoMode>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021a8:	f000 f8ac 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000085c 	.word	0x2000085c
 80021b4:	40004800 	.word	0x40004800

080021b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ce:	4b48      	ldr	r3, [pc, #288]	@ (80022f0 <MX_GPIO_Init+0x138>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d2:	4a47      	ldr	r2, [pc, #284]	@ (80022f0 <MX_GPIO_Init+0x138>)
 80021d4:	f043 0320 	orr.w	r3, r3, #32
 80021d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021da:	4b45      	ldr	r3, [pc, #276]	@ (80022f0 <MX_GPIO_Init+0x138>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	4b42      	ldr	r3, [pc, #264]	@ (80022f0 <MX_GPIO_Init+0x138>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	4a41      	ldr	r2, [pc, #260]	@ (80022f0 <MX_GPIO_Init+0x138>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f2:	4b3f      	ldr	r3, [pc, #252]	@ (80022f0 <MX_GPIO_Init+0x138>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b3c      	ldr	r3, [pc, #240]	@ (80022f0 <MX_GPIO_Init+0x138>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a3b      	ldr	r2, [pc, #236]	@ (80022f0 <MX_GPIO_Init+0x138>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <MX_GPIO_Init+0x138>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	4b36      	ldr	r3, [pc, #216]	@ (80022f0 <MX_GPIO_Init+0x138>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4a35      	ldr	r2, [pc, #212]	@ (80022f0 <MX_GPIO_Init+0x138>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002222:	4b33      	ldr	r3, [pc, #204]	@ (80022f0 <MX_GPIO_Init+0x138>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800222e:	4b30      	ldr	r3, [pc, #192]	@ (80022f0 <MX_GPIO_Init+0x138>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	4a2f      	ldr	r2, [pc, #188]	@ (80022f0 <MX_GPIO_Init+0x138>)
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223a:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <MX_GPIO_Init+0x138>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Actuator1_IN1_Pin|Actuaor1_IN2_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	2128      	movs	r1, #40	@ 0x28
 800224a:	482a      	ldr	r0, [pc, #168]	@ (80022f4 <MX_GPIO_Init+0x13c>)
 800224c:	f000 ff8e 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f240 2103 	movw	r1, #515	@ 0x203
 8002256:	4828      	ldr	r0, [pc, #160]	@ (80022f8 <MX_GPIO_Init+0x140>)
 8002258:	f000 ff88 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800225c:	2201      	movs	r2, #1
 800225e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002262:	4826      	ldr	r0, [pc, #152]	@ (80022fc <MX_GPIO_Init+0x144>)
 8002264:	f000 ff82 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	21c1      	movs	r1, #193	@ 0xc1
 800226c:	4824      	ldr	r0, [pc, #144]	@ (8002300 <MX_GPIO_Init+0x148>)
 800226e:	f000 ff7d 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Actuator1_IN1_Pin Actuaor1_IN2_Pin */
  GPIO_InitStruct.Pin = Actuator1_IN1_Pin|Actuaor1_IN2_Pin;
 8002272:	2328      	movs	r3, #40	@ 0x28
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	481a      	ldr	r0, [pc, #104]	@ (80022f4 <MX_GPIO_Init+0x13c>)
 800228a:	f000 fddd 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper_Step_Pin Stepper_Dir_Pin Actuator_1_EN_Pin */
  GPIO_InitStruct.Pin = Stepper_Step_Pin|Stepper_Dir_Pin|Actuator_1_EN_Pin;
 800228e:	f240 2303 	movw	r3, #515	@ 0x203
 8002292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002294:	2301      	movs	r3, #1
 8002296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	4814      	ldr	r0, [pc, #80]	@ (80022f8 <MX_GPIO_Init+0x140>)
 80022a8:	f000 fdce 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80022ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	480d      	ldr	r0, [pc, #52]	@ (80022fc <MX_GPIO_Init+0x144>)
 80022c6:	f000 fdbf 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 80022ca:	23c1      	movs	r3, #193	@ 0xc1
 80022cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	4807      	ldr	r0, [pc, #28]	@ (8002300 <MX_GPIO_Init+0x148>)
 80022e2:	f000 fdb1 	bl	8002e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022e6:	bf00      	nop
 80022e8:	3728      	adds	r7, #40	@ 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	48001400 	.word	0x48001400
 80022f8:	48000800 	.word	0x48000800
 80022fc:	48000400 	.word	0x48000400
 8002300:	48000c00 	.word	0x48000c00

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <Error_Handler+0x8>

08002310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_MspInit+0x44>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231a:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <HAL_MspInit+0x44>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6613      	str	r3, [r2, #96]	@ 0x60
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <HAL_MspInit+0x44>)
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_MspInit+0x44>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	4a08      	ldr	r2, [pc, #32]	@ (8002354 <HAL_MspInit+0x44>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002338:	6593      	str	r3, [r2, #88]	@ 0x58
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_MspInit+0x44>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b0ae      	sub	sp, #184	@ 0xb8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	2294      	movs	r2, #148	@ 0x94
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f004 fda9 	bl	8006ed0 <memset>
  if(hi2c->Instance==I2C1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a21      	ldr	r2, [pc, #132]	@ (8002408 <HAL_I2C_MspInit+0xb0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d13b      	bne.n	8002400 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002388:	2340      	movs	r3, #64	@ 0x40
 800238a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800238c:	2300      	movs	r3, #0
 800238e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	4618      	mov	r0, r3
 8002396:	f002 fc71 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80023a0:	f7ff ffb0 	bl	8002304 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	4b19      	ldr	r3, [pc, #100]	@ (800240c <HAL_I2C_MspInit+0xb4>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a8:	4a18      	ldr	r2, [pc, #96]	@ (800240c <HAL_I2C_MspInit+0xb4>)
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b0:	4b16      	ldr	r3, [pc, #88]	@ (800240c <HAL_I2C_MspInit+0xb4>)
 80023b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c4:	2312      	movs	r3, #18
 80023c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023d6:	2304      	movs	r3, #4
 80023d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023e0:	4619      	mov	r1, r3
 80023e2:	480b      	ldr	r0, [pc, #44]	@ (8002410 <HAL_I2C_MspInit+0xb8>)
 80023e4:	f000 fd30 	bl	8002e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <HAL_I2C_MspInit+0xb4>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ec:	4a07      	ldr	r2, [pc, #28]	@ (800240c <HAL_I2C_MspInit+0xb4>)
 80023ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_I2C_MspInit+0xb4>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002400:	bf00      	nop
 8002402:	37b8      	adds	r7, #184	@ 0xb8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40005400 	.word	0x40005400
 800240c:	40021000 	.word	0x40021000
 8002410:	48000400 	.word	0x48000400

08002414 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	@ 0x30
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2e      	ldr	r2, [pc, #184]	@ (80024ec <HAL_SPI_MspInit+0xd8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d128      	bne.n	8002488 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002436:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243a:	4a2d      	ldr	r2, [pc, #180]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002440:	6593      	str	r3, [r2, #88]	@ 0x58
 8002442:	4b2b      	ldr	r3, [pc, #172]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244e:	4b28      	ldr	r3, [pc, #160]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	4a27      	ldr	r2, [pc, #156]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245a:	4b25      	ldr	r3, [pc, #148]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002466:	231a      	movs	r3, #26
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002476:	2305      	movs	r3, #5
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	481c      	ldr	r0, [pc, #112]	@ (80024f4 <HAL_SPI_MspInit+0xe0>)
 8002482:	f000 fce1 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002486:	e02c      	b.n	80024e2 <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI3)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1a      	ldr	r2, [pc, #104]	@ (80024f8 <HAL_SPI_MspInit+0xe4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d127      	bne.n	80024e2 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002492:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	4a16      	ldr	r2, [pc, #88]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 8002498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800249c:	6593      	str	r3, [r2, #88]	@ 0x58
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	4a10      	ldr	r2, [pc, #64]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b6:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <HAL_SPI_MspInit+0xdc>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024c2:	2338      	movs	r3, #56	@ 0x38
 80024c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024d2:	2306      	movs	r3, #6
 80024d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d6:	f107 031c 	add.w	r3, r7, #28
 80024da:	4619      	mov	r1, r3
 80024dc:	4807      	ldr	r0, [pc, #28]	@ (80024fc <HAL_SPI_MspInit+0xe8>)
 80024de:	f000 fcb3 	bl	8002e48 <HAL_GPIO_Init>
}
 80024e2:	bf00      	nop
 80024e4:	3730      	adds	r7, #48	@ 0x30
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40003800 	.word	0x40003800
 80024f0:	40021000 	.word	0x40021000
 80024f4:	48000c00 	.word	0x48000c00
 80024f8:	40003c00 	.word	0x40003c00
 80024fc:	48000400 	.word	0x48000400

08002500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0b2      	sub	sp, #200	@ 0xc8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002518:	f107 0320 	add.w	r3, r7, #32
 800251c:	2294      	movs	r2, #148	@ 0x94
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f004 fcd5 	bl	8006ed0 <memset>
  if(huart->Instance==USART2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a53      	ldr	r2, [pc, #332]	@ (8002678 <HAL_UART_MspInit+0x178>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d15d      	bne.n	80025ec <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002530:	2302      	movs	r3, #2
 8002532:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002534:	2300      	movs	r3, #0
 8002536:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002538:	f107 0320 	add.w	r3, r7, #32
 800253c:	4618      	mov	r0, r3
 800253e:	f002 fb9d 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002548:	f7ff fedc 	bl	8002304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800254c:	4b4b      	ldr	r3, [pc, #300]	@ (800267c <HAL_UART_MspInit+0x17c>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002550:	4a4a      	ldr	r2, [pc, #296]	@ (800267c <HAL_UART_MspInit+0x17c>)
 8002552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002556:	6593      	str	r3, [r2, #88]	@ 0x58
 8002558:	4b48      	ldr	r3, [pc, #288]	@ (800267c <HAL_UART_MspInit+0x17c>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	4b45      	ldr	r3, [pc, #276]	@ (800267c <HAL_UART_MspInit+0x17c>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002568:	4a44      	ldr	r2, [pc, #272]	@ (800267c <HAL_UART_MspInit+0x17c>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002570:	4b42      	ldr	r3, [pc, #264]	@ (800267c <HAL_UART_MspInit+0x17c>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800257c:	4b3f      	ldr	r3, [pc, #252]	@ (800267c <HAL_UART_MspInit+0x17c>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	4a3e      	ldr	r2, [pc, #248]	@ (800267c <HAL_UART_MspInit+0x17c>)
 8002582:	f043 0308 	orr.w	r3, r3, #8
 8002586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002588:	4b3c      	ldr	r3, [pc, #240]	@ (800267c <HAL_UART_MspInit+0x17c>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002594:	2308      	movs	r3, #8
 8002596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ac:	2307      	movs	r3, #7
 80025ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80025b6:	4619      	mov	r1, r3
 80025b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025bc:	f000 fc44 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025c0:	2320      	movs	r3, #32
 80025c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025d8:	2307      	movs	r3, #7
 80025da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025de:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4826      	ldr	r0, [pc, #152]	@ (8002680 <HAL_UART_MspInit+0x180>)
 80025e6:	f000 fc2f 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025ea:	e040      	b.n	800266e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a24      	ldr	r2, [pc, #144]	@ (8002684 <HAL_UART_MspInit+0x184>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d13b      	bne.n	800266e <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025f6:	2304      	movs	r3, #4
 80025f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025fa:	2300      	movs	r3, #0
 80025fc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fe:	f107 0320 	add.w	r3, r7, #32
 8002602:	4618      	mov	r0, r3
 8002604:	f002 fb3a 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_UART_MspInit+0x112>
      Error_Handler();
 800260e:	f7ff fe79 	bl	8002304 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002612:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <HAL_UART_MspInit+0x17c>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	4a19      	ldr	r2, [pc, #100]	@ (800267c <HAL_UART_MspInit+0x17c>)
 8002618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800261c:	6593      	str	r3, [r2, #88]	@ 0x58
 800261e:	4b17      	ldr	r3, [pc, #92]	@ (800267c <HAL_UART_MspInit+0x17c>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800262a:	4b14      	ldr	r3, [pc, #80]	@ (800267c <HAL_UART_MspInit+0x17c>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262e:	4a13      	ldr	r2, [pc, #76]	@ (800267c <HAL_UART_MspInit+0x17c>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002636:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_UART_MspInit+0x17c>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002642:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002646:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800265c:	2307      	movs	r3, #7
 800265e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002662:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	@ (8002680 <HAL_UART_MspInit+0x180>)
 800266a:	f000 fbed 	bl	8002e48 <HAL_GPIO_Init>
}
 800266e:	bf00      	nop
 8002670:	37c8      	adds	r7, #200	@ 0xc8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40004400 	.word	0x40004400
 800267c:	40021000 	.word	0x40021000
 8002680:	48000c00 	.word	0x48000c00
 8002684:	40004800 	.word	0x40004800

08002688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <NMI_Handler+0x4>

08002690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <HardFault_Handler+0x4>

08002698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <MemManage_Handler+0x4>

080026a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <BusFault_Handler+0x4>

080026a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <UsageFault_Handler+0x4>

080026b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026de:	f000 fa89 	bl	8002bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f0:	4a14      	ldr	r2, [pc, #80]	@ (8002744 <_sbrk+0x5c>)
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <_sbrk+0x60>)
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026fc:	4b13      	ldr	r3, [pc, #76]	@ (800274c <_sbrk+0x64>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <_sbrk+0x64>)
 8002706:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <_sbrk+0x68>)
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002718:	f004 fbf2 	bl	8006f00 <__errno>
 800271c:	4603      	mov	r3, r0
 800271e:	220c      	movs	r2, #12
 8002720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002726:	e009      	b.n	800273c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	4a05      	ldr	r2, [pc, #20]	@ (800274c <_sbrk+0x64>)
 8002738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200a0000 	.word	0x200a0000
 8002748:	00000400 	.word	0x00000400
 800274c:	200008f0 	.word	0x200008f0
 8002750:	20000a48 	.word	0x20000a48

08002754 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <SystemInit+0x20>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	4a05      	ldr	r2, [pc, #20]	@ (8002774 <SystemInit+0x20>)
 8002760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <xbee_init>:


UART_HandleTypeDef * xbee_uart;

//Sets UART Handle for our UART Stuff.
void xbee_init(UART_HandleTypeDef * uart_handle) {
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	xbee_uart = uart_handle;
 8002780:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <xbee_init+0x1c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	200008f4 	.word	0x200008f4

08002798 <systemInit>:

//Initial Setup w/ server. Sets correct time, receives existing pill data and configuration information from server.
void systemInit(){
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	 xbeeGetHour();
 800279c:	f000 f810 	bl	80027c0 <xbeeGetHour>
	 xbeeGetMin();
 80027a0:	f000 f832 	bl	8002808 <xbeeGetMin>
	 xbeeGetYear();
 80027a4:	f000 f84e 	bl	8002844 <xbeeGetYear>
	 xbeeGetDayOfWeek();
 80027a8:	f000 f870 	bl	800288c <xbeeGetDayOfWeek>
	 xbeeGetMonth();
 80027ac:	f000 f88c 	bl	80028c8 <xbeeGetMonth>
	 xbeeGetSec();
 80027b0:	f000 f8a8 	bl	8002904 <xbeeGetSec>
	 xbeeGetDate();
 80027b4:	f000 f8c4 	bl	8002940 <xbeeGetDate>
	 xbeeDownloadPills();
 80027b8:	f000 f8e0 	bl	800297c <xbeeDownloadPills>
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}

080027c0 <xbeeGetHour>:

	void xbeeGetHour(){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x01;
 80027c6:	23a1      	movs	r3, #161	@ 0xa1
 80027c8:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <xbeeGetHour+0x44>)
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	1d39      	adds	r1, r7, #4
 80027d0:	2364      	movs	r3, #100	@ 0x64
 80027d2:	2201      	movs	r2, #1
 80027d4:	f003 fb36 	bl	8005e44 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 80027d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <xbeeGetHour+0x44>)
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	4639      	mov	r1, r7
 80027de:	2364      	movs	r3, #100	@ 0x64
 80027e0:	2201      	movs	r2, #1
 80027e2:	f003 fbbd 	bl	8005f60 <HAL_UART_Receive>
		DS1307_SetHour(rx_buffer[0]);
 80027e6:	783b      	ldrb	r3, [r7, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fca1 	bl	8001130 <DS1307_SetHour>
		uint8_t test = DS1307_GetHour();
 80027ee:	f7fe fc14 	bl	800101a <DS1307_GetHour>
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(50);
 80027f6:	2032      	movs	r0, #50	@ 0x32
 80027f8:	f000 fa1c 	bl	8002c34 <HAL_Delay>

	}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200008f4 	.word	0x200008f4

08002808 <xbeeGetMin>:

	void xbeeGetMin(){
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x02;
 800280e:	23a2      	movs	r3, #162	@ 0xa2
 8002810:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8002812:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <xbeeGetMin+0x38>)
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	1d39      	adds	r1, r7, #4
 8002818:	2364      	movs	r3, #100	@ 0x64
 800281a:	2201      	movs	r2, #1
 800281c:	f003 fb12 	bl	8005e44 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8002820:	4b07      	ldr	r3, [pc, #28]	@ (8002840 <xbeeGetMin+0x38>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	4639      	mov	r1, r7
 8002826:	2364      	movs	r3, #100	@ 0x64
 8002828:	2201      	movs	r2, #1
 800282a:	f003 fb99 	bl	8005f60 <HAL_UART_Receive>
		DS1307_SetMinute(rx_buffer[0]);
 800282e:	783b      	ldrb	r3, [r7, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fc92 	bl	800115a <DS1307_SetMinute>
	}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200008f4 	.word	0x200008f4

08002844 <xbeeGetYear>:
	void xbeeGetYear(){
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x05;
 800284a:	23a5      	movs	r3, #165	@ 0xa5
 800284c:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [2];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 800284e:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <xbeeGetYear+0x44>)
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	1d39      	adds	r1, r7, #4
 8002854:	2364      	movs	r3, #100	@ 0x64
 8002856:	2201      	movs	r2, #1
 8002858:	f003 faf4 	bl	8005e44 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 2, 100);
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <xbeeGetYear+0x44>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	4639      	mov	r1, r7
 8002862:	2364      	movs	r3, #100	@ 0x64
 8002864:	2202      	movs	r2, #2
 8002866:	f003 fb7b 	bl	8005f60 <HAL_UART_Receive>
		DS1307_SetYear((rx_buffer[0] << 8) | rx_buffer[1]);
 800286a:	783b      	ldrb	r3, [r7, #0]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	b21a      	sxth	r2, r3
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	b21b      	sxth	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b21b      	sxth	r3, r3
 8002878:	b29b      	uxth	r3, r3
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fc2e 	bl	80010dc <DS1307_SetYear>
	}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200008f4 	.word	0x200008f4

0800288c <xbeeGetDayOfWeek>:
	void xbeeGetDayOfWeek(){
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x08;
 8002892:	23a8      	movs	r3, #168	@ 0xa8
 8002894:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 8002896:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <xbeeGetDayOfWeek+0x38>)
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	1d39      	adds	r1, r7, #4
 800289c:	2364      	movs	r3, #100	@ 0x64
 800289e:	2201      	movs	r2, #1
 80028a0:	f003 fad0 	bl	8005e44 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 80028a4:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <xbeeGetDayOfWeek+0x38>)
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	4639      	mov	r1, r7
 80028aa:	2364      	movs	r3, #100	@ 0x64
 80028ac:	2201      	movs	r2, #1
 80028ae:	f003 fb57 	bl	8005f60 <HAL_UART_Receive>
		DS1307_SetDayOfWeek(rx_buffer[0]);
 80028b2:	783b      	ldrb	r3, [r7, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fbda 	bl	800106e <DS1307_SetDayOfWeek>
	}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200008f4 	.word	0x200008f4

080028c8 <xbeeGetMonth>:
	void xbeeGetMonth(){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x06;
 80028ce:	23a6      	movs	r3, #166	@ 0xa6
 80028d0:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <xbeeGetMonth+0x38>)
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	1d39      	adds	r1, r7, #4
 80028d8:	2364      	movs	r3, #100	@ 0x64
 80028da:	2201      	movs	r2, #1
 80028dc:	f003 fab2 	bl	8005e44 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 80028e0:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <xbeeGetMonth+0x38>)
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	4639      	mov	r1, r7
 80028e6:	2364      	movs	r3, #100	@ 0x64
 80028e8:	2201      	movs	r2, #1
 80028ea:	f003 fb39 	bl	8005f60 <HAL_UART_Receive>
		DS1307_SetMonth(rx_buffer[0]);
 80028ee:	783b      	ldrb	r3, [r7, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fbe0 	bl	80010b6 <DS1307_SetMonth>
	}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200008f4 	.word	0x200008f4

08002904 <xbeeGetSec>:

	void xbeeGetSec(){
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x03;
 800290a:	23a3      	movs	r3, #163	@ 0xa3
 800290c:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 800290e:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <xbeeGetSec+0x38>)
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	1d39      	adds	r1, r7, #4
 8002914:	2364      	movs	r3, #100	@ 0x64
 8002916:	2201      	movs	r2, #1
 8002918:	f003 fa94 	bl	8005e44 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 800291c:	4b07      	ldr	r3, [pc, #28]	@ (800293c <xbeeGetSec+0x38>)
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	4639      	mov	r1, r7
 8002922:	2364      	movs	r3, #100	@ 0x64
 8002924:	2201      	movs	r2, #1
 8002926:	f003 fb1b 	bl	8005f60 <HAL_UART_Receive>
		DS1307_SetSecond(rx_buffer[0]);
 800292a:	783b      	ldrb	r3, [r7, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fc26 	bl	800117e <DS1307_SetSecond>
	}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200008f4 	.word	0x200008f4

08002940 <xbeeGetDate>:

	void xbeeGetDate(){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
		uint8_t tx_buffer [1];
		tx_buffer [0] = (0xA) << 4 | 0x09;
 8002946:	23a9      	movs	r3, #169	@ 0xa9
 8002948:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer [1];
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <xbeeGetDate+0x38>)
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	1d39      	adds	r1, r7, #4
 8002950:	2364      	movs	r3, #100	@ 0x64
 8002952:	2201      	movs	r2, #1
 8002954:	f003 fa76 	bl	8005e44 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100);
 8002958:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <xbeeGetDate+0x38>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	4639      	mov	r1, r7
 800295e:	2364      	movs	r3, #100	@ 0x64
 8002960:	2201      	movs	r2, #1
 8002962:	f003 fafd 	bl	8005f60 <HAL_UART_Receive>
		DS1307_SetSecond(rx_buffer[0]);
 8002966:	783b      	ldrb	r3, [r7, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fc08 	bl	800117e <DS1307_SetSecond>
	}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200008f4 	.word	0x200008f4

0800297c <xbeeDownloadPills>:
void xbeeUploadPills(){

	}


void xbeeDownloadPills(){
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b0a7      	sub	sp, #156	@ 0x9c
 8002980:	af02      	add	r7, sp, #8
	clearPillList();
 8002982:	f7fe f813 	bl	80009ac <clearPillList>
	uint8_t tx_buffer [1];
	uint8_t rx_buffer [100];
	tx_buffer[0] = 0xA7; //INITIATE PILL TRANSFER INFORMATION.
 8002986:	23a7      	movs	r3, #167	@ 0xa7
 8002988:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 800298c:	4b44      	ldr	r3, [pc, #272]	@ (8002aa0 <xbeeDownloadPills+0x124>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8002994:	2364      	movs	r3, #100	@ 0x64
 8002996:	2201      	movs	r2, #1
 8002998:	f003 fa54 	bl	8005e44 <HAL_UART_Transmit>
	HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100); //receive newNumpills
 800299c:	4b40      	ldr	r3, [pc, #256]	@ (8002aa0 <xbeeDownloadPills+0x124>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	f107 0120 	add.w	r1, r7, #32
 80029a4:	2364      	movs	r3, #100	@ 0x64
 80029a6:	2201      	movs	r2, #1
 80029a8:	f003 fada 	bl	8005f60 <HAL_UART_Receive>
	uint8_t numNewPills = rx_buffer[0];
 80029ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029b0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	uint8_t i;
	for(i = 0; i < numNewPills; i++){
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80029ba:	e064      	b.n	8002a86 <xbeeDownloadPills+0x10a>
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 80029bc:	4b38      	ldr	r3, [pc, #224]	@ (8002aa0 <xbeeDownloadPills+0x124>)
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 80029c4:	2364      	movs	r3, #100	@ 0x64
 80029c6:	2201      	movs	r2, #1
 80029c8:	f003 fa3c 	bl	8005e44 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, 1, 100); //receive Packet Size
 80029cc:	4b34      	ldr	r3, [pc, #208]	@ (8002aa0 <xbeeDownloadPills+0x124>)
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	f107 0120 	add.w	r1, r7, #32
 80029d4:	2364      	movs	r3, #100	@ 0x64
 80029d6:	2201      	movs	r2, #1
 80029d8:	f003 fac2 	bl	8005f60 <HAL_UART_Receive>
		uint8_t packet_size = rx_buffer[0];
 80029dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029e0:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
		uint8_t NameSize = packet_size - 4;
 80029e4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80029e8:	3b04      	subs	r3, #4
 80029ea:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
		HAL_UART_Transmit(xbee_uart, tx_buffer, 1, 100);
 80029ee:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa0 <xbeeDownloadPills+0x124>)
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 80029f6:	2364      	movs	r3, #100	@ 0x64
 80029f8:	2201      	movs	r2, #1
 80029fa:	f003 fa23 	bl	8005e44 <HAL_UART_Transmit>
		HAL_UART_Receive(xbee_uart, rx_buffer, packet_size, 100);
 80029fe:	4b28      	ldr	r3, [pc, #160]	@ (8002aa0 <xbeeDownloadPills+0x124>)
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	f107 0120 	add.w	r1, r7, #32
 8002a0c:	2364      	movs	r3, #100	@ 0x64
 8002a0e:	f003 faa7 	bl	8005f60 <HAL_UART_Receive>
		uint8_t dispenserNum = rx_buffer[0];
 8002a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a16:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		char pillName [25];
		memcpy(pillName, rx_buffer + 1, NameSize);
 8002a1a:	f107 0320 	add.w	r3, r7, #32
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8002a24:	1d38      	adds	r0, r7, #4
 8002a26:	4619      	mov	r1, r3
 8002a28:	f004 fa96 	bl	8006f58 <memcpy>
		uint8_t dayofWeek = rx_buffer[1 + (NameSize)];
 8002a2c:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002a30:	3301      	adds	r3, #1
 8002a32:	3390      	adds	r3, #144	@ 0x90
 8002a34:	443b      	add	r3, r7
 8002a36:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8002a3a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
		uint8_t hour = rx_buffer[2 + (NameSize)];
 8002a3e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002a42:	3302      	adds	r3, #2
 8002a44:	3390      	adds	r3, #144	@ 0x90
 8002a46:	443b      	add	r3, r7
 8002a48:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8002a4c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
		uint8_t min = rx_buffer[3 + (NameSize)];
 8002a50:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002a54:	3303      	adds	r3, #3
 8002a56:	3390      	adds	r3, #144	@ 0x90
 8002a58:	443b      	add	r3, r7
 8002a5a:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8002a5e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
		loadNewPillEntry(dispenserNum, pillName, dayofWeek, hour, min);
 8002a62:	f897 4089 	ldrb.w	r4, [r7, #137]	@ 0x89
 8002a66:	f897 208a 	ldrb.w	r2, [r7, #138]	@ 0x8a
 8002a6a:	1d39      	adds	r1, r7, #4
 8002a6c:	f897 008b 	ldrb.w	r0, [r7, #139]	@ 0x8b
 8002a70:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	4623      	mov	r3, r4
 8002a78:	f7fd ffbe 	bl	80009f8 <loadNewPillEntry>
	for(i = 0; i < numNewPills; i++){
 8002a7c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002a80:	3301      	adds	r3, #1
 8002a82:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002a86:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8002a8a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d394      	bcc.n	80029bc <xbeeDownloadPills+0x40>
	}
	sortEntries();
 8002a92:	f7fd fdcb 	bl	800062c <sortEntries>
}
 8002a96:	bf00      	nop
 8002a98:	3794      	adds	r7, #148	@ 0x94
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200008f4 	.word	0x200008f4

08002aa4 <XPT2046_Init>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void XPT2046_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002aae:	4810      	ldr	r0, [pc, #64]	@ (8002af0 <XPT2046_Init+0x4c>)
 8002ab0:	f000 fb5c 	bl	800316c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8002ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	480d      	ldr	r0, [pc, #52]	@ (8002af4 <XPT2046_Init+0x50>)
 8002abe:	f002 fe98 	bl	80057f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8002ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2100      	movs	r1, #0
 8002aca:	480a      	ldr	r0, [pc, #40]	@ (8002af4 <XPT2046_Init+0x50>)
 8002acc:	f002 fe91 	bl	80057f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
 8002ad0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4806      	ldr	r0, [pc, #24]	@ (8002af4 <XPT2046_Init+0x50>)
 8002ada:	f002 fe8a 	bl	80057f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ae4:	4802      	ldr	r0, [pc, #8]	@ (8002af0 <XPT2046_Init+0x4c>)
 8002ae6:	f000 fb41 	bl	800316c <HAL_GPIO_WritePin>
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	48000400 	.word	0x48000400
 8002af4:	20000764 	.word	0x20000764

08002af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002afc:	f7ff fe2a 	bl	8002754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b00:	480c      	ldr	r0, [pc, #48]	@ (8002b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b02:	490d      	ldr	r1, [pc, #52]	@ (8002b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b04:	4a0d      	ldr	r2, [pc, #52]	@ (8002b3c <LoopForever+0xe>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b08:	e002      	b.n	8002b10 <LoopCopyDataInit>

08002b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b0e:	3304      	adds	r3, #4

08002b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b14:	d3f9      	bcc.n	8002b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b16:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b18:	4c0a      	ldr	r4, [pc, #40]	@ (8002b44 <LoopForever+0x16>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b1c:	e001      	b.n	8002b22 <LoopFillZerobss>

08002b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b20:	3204      	adds	r2, #4

08002b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b24:	d3fb      	bcc.n	8002b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b26:	f004 f9f1 	bl	8006f0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b2a:	f7ff f92b 	bl	8001d84 <main>

08002b2e <LoopForever>:

LoopForever:
    b LoopForever
 8002b2e:	e7fe      	b.n	8002b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b30:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b38:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002b3c:	08007e08 	.word	0x08007e08
  ldr r2, =_sbss
 8002b40:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002b44:	20000a44 	.word	0x20000a44

08002b48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <ADC1_IRQHandler>

08002b4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b54:	2003      	movs	r0, #3
 8002b56:	f000 f943 	bl	8002de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b5a:	200f      	movs	r0, #15
 8002b5c:	f000 f80e 	bl	8002b7c <HAL_InitTick>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	71fb      	strb	r3, [r7, #7]
 8002b6a:	e001      	b.n	8002b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b6c:	f7ff fbd0 	bl	8002310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b70:	79fb      	ldrb	r3, [r7, #7]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b88:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <HAL_InitTick+0x6c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d023      	beq.n	8002bd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b90:	4b16      	ldr	r3, [pc, #88]	@ (8002bec <HAL_InitTick+0x70>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <HAL_InitTick+0x6c>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f941 	bl	8002e2e <HAL_SYSTICK_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d809      	bhi.n	8002bcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bc0:	f000 f919 	bl	8002df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <HAL_InitTick+0x74>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e007      	b.n	8002bdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e004      	b.n	8002bdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e001      	b.n	8002bdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000000c 	.word	0x2000000c
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_IncTick+0x20>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_IncTick+0x24>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <HAL_IncTick+0x24>)
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000000c 	.word	0x2000000c
 8002c18:	200008f8 	.word	0x200008f8

08002c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c20:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <HAL_GetTick+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	200008f8 	.word	0x200008f8

08002c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7ff ffee 	bl	8002c1c <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c4c:	d005      	beq.n	8002c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <HAL_Delay+0x44>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5a:	bf00      	nop
 8002c5c:	f7ff ffde 	bl	8002c1c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d8f7      	bhi.n	8002c5c <HAL_Delay+0x28>
  {
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cae:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60d3      	str	r3, [r2, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <__NVIC_GetPriorityGrouping+0x18>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 0307 	and.w	r3, r3, #7
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db0a      	blt.n	8002d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	490c      	ldr	r1, [pc, #48]	@ (8002d2c <__NVIC_SetPriority+0x4c>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	440b      	add	r3, r1
 8002d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d08:	e00a      	b.n	8002d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4908      	ldr	r1, [pc, #32]	@ (8002d30 <__NVIC_SetPriority+0x50>)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3b04      	subs	r3, #4
 8002d18:	0112      	lsls	r2, r2, #4
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	761a      	strb	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e100 	.word	0xe000e100
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	@ 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f1c3 0307 	rsb	r3, r3, #7
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	bf28      	it	cs
 8002d52:	2304      	movcs	r3, #4
 8002d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d902      	bls.n	8002d64 <NVIC_EncodePriority+0x30>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3b03      	subs	r3, #3
 8002d62:	e000      	b.n	8002d66 <NVIC_EncodePriority+0x32>
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	401a      	ands	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	43d9      	mvns	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	4313      	orrs	r3, r2
         );
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	@ 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dac:	d301      	bcc.n	8002db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00f      	b.n	8002dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <SysTick_Config+0x40>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dba:	210f      	movs	r1, #15
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dc0:	f7ff ff8e 	bl	8002ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc4:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <SysTick_Config+0x40>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dca:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <SysTick_Config+0x40>)
 8002dcc:	2207      	movs	r2, #7
 8002dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000e010 	.word	0xe000e010

08002de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff47 	bl	8002c7c <__NVIC_SetPriorityGrouping>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e08:	f7ff ff5c 	bl	8002cc4 <__NVIC_GetPriorityGrouping>
 8002e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff ff8e 	bl	8002d34 <NVIC_EncodePriority>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff5d 	bl	8002ce0 <__NVIC_SetPriority>
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ffb0 	bl	8002d9c <SysTick_Config>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e56:	e166      	b.n	8003126 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	4013      	ands	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8158 	beq.w	8003120 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d005      	beq.n	8002e88 <HAL_GPIO_Init+0x40>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d130      	bne.n	8002eea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f003 0201 	and.w	r2, r3, #1
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d017      	beq.n	8002f26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2203      	movs	r2, #3
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d123      	bne.n	8002f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3208      	adds	r2, #8
 8002f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	220f      	movs	r2, #15
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	08da      	lsrs	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3208      	adds	r2, #8
 8002f74:	6939      	ldr	r1, [r7, #16]
 8002f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2203      	movs	r2, #3
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0203 	and.w	r2, r3, #3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80b2 	beq.w	8003120 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbc:	4b61      	ldr	r3, [pc, #388]	@ (8003144 <HAL_GPIO_Init+0x2fc>)
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc0:	4a60      	ldr	r2, [pc, #384]	@ (8003144 <HAL_GPIO_Init+0x2fc>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8003144 <HAL_GPIO_Init+0x2fc>)
 8002fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fd4:	4a5c      	ldr	r2, [pc, #368]	@ (8003148 <HAL_GPIO_Init+0x300>)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	3302      	adds	r3, #2
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ffe:	d02b      	beq.n	8003058 <HAL_GPIO_Init+0x210>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a52      	ldr	r2, [pc, #328]	@ (800314c <HAL_GPIO_Init+0x304>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d025      	beq.n	8003054 <HAL_GPIO_Init+0x20c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a51      	ldr	r2, [pc, #324]	@ (8003150 <HAL_GPIO_Init+0x308>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d01f      	beq.n	8003050 <HAL_GPIO_Init+0x208>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a50      	ldr	r2, [pc, #320]	@ (8003154 <HAL_GPIO_Init+0x30c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d019      	beq.n	800304c <HAL_GPIO_Init+0x204>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a4f      	ldr	r2, [pc, #316]	@ (8003158 <HAL_GPIO_Init+0x310>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <HAL_GPIO_Init+0x200>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a4e      	ldr	r2, [pc, #312]	@ (800315c <HAL_GPIO_Init+0x314>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00d      	beq.n	8003044 <HAL_GPIO_Init+0x1fc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a4d      	ldr	r2, [pc, #308]	@ (8003160 <HAL_GPIO_Init+0x318>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d007      	beq.n	8003040 <HAL_GPIO_Init+0x1f8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a4c      	ldr	r2, [pc, #304]	@ (8003164 <HAL_GPIO_Init+0x31c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <HAL_GPIO_Init+0x1f4>
 8003038:	2307      	movs	r3, #7
 800303a:	e00e      	b.n	800305a <HAL_GPIO_Init+0x212>
 800303c:	2308      	movs	r3, #8
 800303e:	e00c      	b.n	800305a <HAL_GPIO_Init+0x212>
 8003040:	2306      	movs	r3, #6
 8003042:	e00a      	b.n	800305a <HAL_GPIO_Init+0x212>
 8003044:	2305      	movs	r3, #5
 8003046:	e008      	b.n	800305a <HAL_GPIO_Init+0x212>
 8003048:	2304      	movs	r3, #4
 800304a:	e006      	b.n	800305a <HAL_GPIO_Init+0x212>
 800304c:	2303      	movs	r3, #3
 800304e:	e004      	b.n	800305a <HAL_GPIO_Init+0x212>
 8003050:	2302      	movs	r3, #2
 8003052:	e002      	b.n	800305a <HAL_GPIO_Init+0x212>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_GPIO_Init+0x212>
 8003058:	2300      	movs	r3, #0
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	f002 0203 	and.w	r2, r2, #3
 8003060:	0092      	lsls	r2, r2, #2
 8003062:	4093      	lsls	r3, r2
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800306a:	4937      	ldr	r1, [pc, #220]	@ (8003148 <HAL_GPIO_Init+0x300>)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003078:	4b3b      	ldr	r3, [pc, #236]	@ (8003168 <HAL_GPIO_Init+0x320>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800309c:	4a32      	ldr	r2, [pc, #200]	@ (8003168 <HAL_GPIO_Init+0x320>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030a2:	4b31      	ldr	r3, [pc, #196]	@ (8003168 <HAL_GPIO_Init+0x320>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030c6:	4a28      	ldr	r2, [pc, #160]	@ (8003168 <HAL_GPIO_Init+0x320>)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030cc:	4b26      	ldr	r3, [pc, #152]	@ (8003168 <HAL_GPIO_Init+0x320>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <HAL_GPIO_Init+0x320>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <HAL_GPIO_Init+0x320>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800311a:	4a13      	ldr	r2, [pc, #76]	@ (8003168 <HAL_GPIO_Init+0x320>)
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3301      	adds	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	f47f ae91 	bne.w	8002e58 <HAL_GPIO_Init+0x10>
  }
}
 8003136:	bf00      	nop
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40021000 	.word	0x40021000
 8003148:	40010000 	.word	0x40010000
 800314c:	48000400 	.word	0x48000400
 8003150:	48000800 	.word	0x48000800
 8003154:	48000c00 	.word	0x48000c00
 8003158:	48001000 	.word	0x48001000
 800315c:	48001400 	.word	0x48001400
 8003160:	48001800 	.word	0x48001800
 8003164:	48001c00 	.word	0x48001c00
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003188:	e002      	b.n	8003190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e08d      	b.n	80032ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff f8c8 	bl	8002358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	@ 0x24
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d107      	bne.n	8003216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	e006      	b.n	8003224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d108      	bne.n	800323e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	e007      	b.n	800324e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800324c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800325c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	461a      	mov	r2, r3
 80032e0:	460b      	mov	r3, r1
 80032e2:	817b      	strh	r3, [r7, #10]
 80032e4:	4613      	mov	r3, r2
 80032e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	f040 80fd 	bne.w	80034f0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_I2C_Master_Transmit+0x30>
 8003300:	2302      	movs	r3, #2
 8003302:	e0f6      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800330c:	f7ff fc86 	bl	8002c1c <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	2319      	movs	r3, #25
 8003318:	2201      	movs	r2, #1
 800331a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fa0a 	bl	8003738 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0e1      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2221      	movs	r2, #33	@ 0x21
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2210      	movs	r2, #16
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	893a      	ldrh	r2, [r7, #8]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2bff      	cmp	r3, #255	@ 0xff
 800335e:	d906      	bls.n	800336e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	22ff      	movs	r2, #255	@ 0xff
 8003364:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e007      	b.n	800337e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003378:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800337c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003382:	2b00      	cmp	r3, #0
 8003384:	d024      	beq.n	80033d0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	8979      	ldrh	r1, [r7, #10]
 80033c2:	4b4e      	ldr	r3, [pc, #312]	@ (80034fc <HAL_I2C_Master_Transmit+0x228>)
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fbf1 	bl	8003bb0 <I2C_TransferConfig>
 80033ce:	e066      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	8979      	ldrh	r1, [r7, #10]
 80033d8:	4b48      	ldr	r3, [pc, #288]	@ (80034fc <HAL_I2C_Master_Transmit+0x228>)
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fbe6 	bl	8003bb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033e4:	e05b      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	6a39      	ldr	r1, [r7, #32]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f9f3 	bl	80037d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07b      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d034      	beq.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d130      	bne.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	2200      	movs	r2, #0
 8003444:	2180      	movs	r1, #128	@ 0x80
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f976 	bl	8003738 <I2C_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e04d      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	2bff      	cmp	r3, #255	@ 0xff
 800345e:	d90e      	bls.n	800347e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	22ff      	movs	r2, #255	@ 0xff
 8003464:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346a:	b2da      	uxtb	r2, r3
 800346c:	8979      	ldrh	r1, [r7, #10]
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fb9a 	bl	8003bb0 <I2C_TransferConfig>
 800347c:	e00f      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348c:	b2da      	uxtb	r2, r3
 800348e:	8979      	ldrh	r1, [r7, #10]
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fb89 	bl	8003bb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d19e      	bne.n	80033e6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	6a39      	ldr	r1, [r7, #32]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f9d9 	bl	8003864 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e01a      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2220      	movs	r2, #32
 80034c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <HAL_I2C_Master_Transmit+0x22c>)
 80034d0:	400b      	ands	r3, r1
 80034d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	80002000 	.word	0x80002000
 8003500:	fe00e800 	.word	0xfe00e800

08003504 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	461a      	mov	r2, r3
 8003510:	460b      	mov	r3, r1
 8003512:	817b      	strh	r3, [r7, #10]
 8003514:	4613      	mov	r3, r2
 8003516:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b20      	cmp	r3, #32
 8003522:	f040 80db 	bne.w	80036dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_I2C_Master_Receive+0x30>
 8003530:	2302      	movs	r3, #2
 8003532:	e0d4      	b.n	80036de <HAL_I2C_Master_Receive+0x1da>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800353c:	f7ff fb6e 	bl	8002c1c <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2319      	movs	r3, #25
 8003548:	2201      	movs	r2, #1
 800354a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f8f2 	bl	8003738 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0bf      	b.n	80036de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2222      	movs	r2, #34	@ 0x22
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2210      	movs	r2, #16
 800356a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	893a      	ldrh	r2, [r7, #8]
 800357e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	2bff      	cmp	r3, #255	@ 0xff
 800358e:	d90e      	bls.n	80035ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	22ff      	movs	r2, #255	@ 0xff
 8003594:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	b2da      	uxtb	r2, r3
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	4b52      	ldr	r3, [pc, #328]	@ (80036e8 <HAL_I2C_Master_Receive+0x1e4>)
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fb02 	bl	8003bb0 <I2C_TransferConfig>
 80035ac:	e06d      	b.n	800368a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	8979      	ldrh	r1, [r7, #10]
 80035c0:	4b49      	ldr	r3, [pc, #292]	@ (80036e8 <HAL_I2C_Master_Receive+0x1e4>)
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 faf1 	bl	8003bb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80035ce:	e05c      	b.n	800368a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	6a39      	ldr	r1, [r7, #32]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f989 	bl	80038ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e07c      	b.n	80036de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d034      	beq.n	800368a <HAL_I2C_Master_Receive+0x186>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	d130      	bne.n	800368a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	2200      	movs	r2, #0
 8003630:	2180      	movs	r1, #128	@ 0x80
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f880 	bl	8003738 <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e04d      	b.n	80036de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	2bff      	cmp	r3, #255	@ 0xff
 800364a:	d90e      	bls.n	800366a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	22ff      	movs	r2, #255	@ 0xff
 8003650:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003656:	b2da      	uxtb	r2, r3
 8003658:	8979      	ldrh	r1, [r7, #10]
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 faa4 	bl	8003bb0 <I2C_TransferConfig>
 8003668:	e00f      	b.n	800368a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	8979      	ldrh	r1, [r7, #10]
 800367c:	2300      	movs	r3, #0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fa93 	bl	8003bb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d19d      	bne.n	80035d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	6a39      	ldr	r1, [r7, #32]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f8e3 	bl	8003864 <I2C_WaitOnSTOPFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e01a      	b.n	80036de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2220      	movs	r2, #32
 80036ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6859      	ldr	r1, [r3, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <HAL_I2C_Master_Receive+0x1e8>)
 80036bc:	400b      	ands	r3, r1
 80036be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	e000      	b.n	80036de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80036dc:	2302      	movs	r3, #2
  }
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	80002400 	.word	0x80002400
 80036ec:	fe00e800 	.word	0xfe00e800

080036f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d103      	bne.n	800370e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d007      	beq.n	800372c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	619a      	str	r2, [r3, #24]
  }
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003748:	e031      	b.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003750:	d02d      	beq.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7ff fa63 	bl	8002c1c <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d122      	bne.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	429a      	cmp	r2, r3
 8003784:	d113      	bne.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e00f      	b.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699a      	ldr	r2, [r3, #24]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4013      	ands	r3, r2
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d0be      	beq.n	800374a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037e2:	e033      	b.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f901 	bl	80039f0 <I2C_IsErrorOccurred>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e031      	b.n	800385c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037fe:	d025      	beq.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003800:	f7ff fa0c 	bl	8002c1c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	429a      	cmp	r2, r3
 800380e:	d302      	bcc.n	8003816 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11a      	bne.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d013      	beq.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e007      	b.n	800385c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b02      	cmp	r3, #2
 8003858:	d1c4      	bne.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003870:	e02f      	b.n	80038d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f8ba 	bl	80039f0 <I2C_IsErrorOccurred>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e02d      	b.n	80038e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7ff f9c9 	bl	8002c1c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d11a      	bne.n	80038d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d013      	beq.n	80038d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e007      	b.n	80038e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d1c8      	bne.n	8003872 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038f8:	e06b      	b.n	80039d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f876 	bl	80039f0 <I2C_IsErrorOccurred>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e069      	b.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d138      	bne.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b04      	cmp	r3, #4
 8003928:	d105      	bne.n	8003936 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e055      	b.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b10      	cmp	r3, #16
 8003942:	d107      	bne.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2210      	movs	r2, #16
 800394a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2204      	movs	r2, #4
 8003950:	645a      	str	r2, [r3, #68]	@ 0x44
 8003952:	e002      	b.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2220      	movs	r2, #32
 8003960:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800396e:	400b      	ands	r3, r1
 8003970:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e029      	b.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7ff f945 	bl	8002c1c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d00f      	beq.n	80039d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	f043 0220 	orr.w	r2, r3, #32
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e007      	b.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d18c      	bne.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	fe00e800 	.word	0xfe00e800

080039f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	@ 0x28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d068      	beq.n	8003aee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2210      	movs	r2, #16
 8003a22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a24:	e049      	b.n	8003aba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a2c:	d045      	beq.n	8003aba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7ff f8f5 	bl	8002c1c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <I2C_IsErrorOccurred+0x54>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d13a      	bne.n	8003aba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a66:	d121      	bne.n	8003aac <I2C_IsErrorOccurred+0xbc>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a6e:	d01d      	beq.n	8003aac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d01a      	beq.n	8003aac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a86:	f7ff f8c9 	bl	8002c1c <HAL_GetTick>
 8003a8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a8c:	e00e      	b.n	8003aac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a8e:	f7ff f8c5 	bl	8002c1c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b19      	cmp	r3, #25
 8003a9a:	d907      	bls.n	8003aac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	f043 0320 	orr.w	r3, r3, #32
 8003aa2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003aaa:	e006      	b.n	8003aba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d1e9      	bne.n	8003a8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d003      	beq.n	8003ad0 <I2C_IsErrorOccurred+0xe0>
 8003ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0aa      	beq.n	8003a26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2220      	movs	r2, #32
 8003ade:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	f043 0304 	orr.w	r3, r3, #4
 8003ae6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	f043 0302 	orr.w	r3, r3, #2
 8003b4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01c      	beq.n	8003b9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7ff fdc3 	bl	80036f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <I2C_IsErrorOccurred+0x1bc>)
 8003b76:	400b      	ands	r3, r1
 8003b78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3728      	adds	r7, #40	@ 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	fe00e800 	.word	0xfe00e800

08003bb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	817b      	strh	r3, [r7, #10]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bc8:	7a7b      	ldrb	r3, [r7, #9]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	0d5b      	lsrs	r3, r3, #21
 8003bea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <I2C_TransferConfig+0x60>)
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	ea02 0103 	and.w	r1, r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	03ff63ff 	.word	0x03ff63ff

08003c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d138      	bne.n	8003c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e032      	b.n	8003c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	@ 0x24
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6819      	ldr	r1, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d139      	bne.n	8003d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e033      	b.n	8003d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2224      	movs	r2, #36	@ 0x24
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d48:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d54:	d102      	bne.n	8003d5c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d5a:	e00b      	b.n	8003d74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d5c:	4b08      	ldr	r3, [pc, #32]	@ (8003d80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d6a:	d102      	bne.n	8003d72 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d70:	e000      	b.n	8003d74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d72:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40007000 	.word	0x40007000

08003d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d141      	bne.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d92:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	d131      	bne.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da0:	4b47      	ldr	r3, [pc, #284]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da6:	4a46      	ldr	r2, [pc, #280]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db0:	4b43      	ldr	r3, [pc, #268]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003db8:	4a41      	ldr	r2, [pc, #260]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003dc0:	4b40      	ldr	r3, [pc, #256]	@ (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2232      	movs	r2, #50	@ 0x32
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	4a3f      	ldr	r2, [pc, #252]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	0c9b      	lsrs	r3, r3, #18
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd6:	e002      	b.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dde:	4b38      	ldr	r3, [pc, #224]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dea:	d102      	bne.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f2      	bne.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003df2:	4b33      	ldr	r3, [pc, #204]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfe:	d158      	bne.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e057      	b.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e04:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e14:	e04d      	b.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e1c:	d141      	bne.n	8003ea2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2a:	d131      	bne.n	8003e90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e2c:	4b24      	ldr	r3, [pc, #144]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e32:	4a23      	ldr	r2, [pc, #140]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e3c:	4b20      	ldr	r3, [pc, #128]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e44:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2232      	movs	r2, #50	@ 0x32
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	0c9b      	lsrs	r3, r3, #18
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e62:	e002      	b.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e76:	d102      	bne.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f2      	bne.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e8a:	d112      	bne.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e011      	b.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ea0:	e007      	b.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ea2:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003eaa:	4a05      	ldr	r2, [pc, #20]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003eb0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	20000004 	.word	0x20000004
 8003ec8:	431bde83 	.word	0x431bde83

08003ecc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f000 bc08 	b.w	80046f0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee0:	4b96      	ldr	r3, [pc, #600]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eea:	4b94      	ldr	r3, [pc, #592]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80e4 	beq.w	80040ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <HAL_RCC_OscConfig+0x4c>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	f040 808b 	bne.w	8004026 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	f040 8087 	bne.w	8004026 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f18:	4b88      	ldr	r3, [pc, #544]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_OscConfig+0x64>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e3df      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1a      	ldr	r2, [r3, #32]
 8003f34:	4b81      	ldr	r3, [pc, #516]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <HAL_RCC_OscConfig+0x7e>
 8003f40:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f48:	e005      	b.n	8003f56 <HAL_RCC_OscConfig+0x8a>
 8003f4a:	4b7c      	ldr	r3, [pc, #496]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d223      	bcs.n	8003fa2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fdcc 	bl	8004afc <RCC_SetFlashLatencyFromMSIRange>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e3c0      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f6e:	4b73      	ldr	r3, [pc, #460]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a72      	ldr	r2, [pc, #456]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f74:	f043 0308 	orr.w	r3, r3, #8
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b70      	ldr	r3, [pc, #448]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	496d      	ldr	r1, [pc, #436]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f8c:	4b6b      	ldr	r3, [pc, #428]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	4968      	ldr	r1, [pc, #416]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
 8003fa0:	e025      	b.n	8003fee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fa2:	4b66      	ldr	r3, [pc, #408]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a65      	ldr	r2, [pc, #404]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003fa8:	f043 0308 	orr.w	r3, r3, #8
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	4b63      	ldr	r3, [pc, #396]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4960      	ldr	r1, [pc, #384]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	495b      	ldr	r1, [pc, #364]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fd8c 	bl	8004afc <RCC_SetFlashLatencyFromMSIRange>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e380      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fee:	f000 fcc1 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b51      	ldr	r3, [pc, #324]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	4950      	ldr	r1, [pc, #320]	@ (8004140 <HAL_RCC_OscConfig+0x274>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	fa22 f303 	lsr.w	r3, r2, r3
 800400a:	4a4e      	ldr	r2, [pc, #312]	@ (8004144 <HAL_RCC_OscConfig+0x278>)
 800400c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800400e:	4b4e      	ldr	r3, [pc, #312]	@ (8004148 <HAL_RCC_OscConfig+0x27c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fdb2 	bl	8002b7c <HAL_InitTick>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d052      	beq.n	80040c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	e364      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d032      	beq.n	8004094 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800402e:	4b43      	ldr	r3, [pc, #268]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a42      	ldr	r2, [pc, #264]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800403a:	f7fe fdef 	bl	8002c1c <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004042:	f7fe fdeb 	bl	8002c1c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e34d      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004054:	4b39      	ldr	r3, [pc, #228]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004060:	4b36      	ldr	r3, [pc, #216]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a35      	ldr	r2, [pc, #212]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004066:	f043 0308 	orr.w	r3, r3, #8
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b33      	ldr	r3, [pc, #204]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4930      	ldr	r1, [pc, #192]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800407e:	4b2f      	ldr	r3, [pc, #188]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	492b      	ldr	r1, [pc, #172]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
 8004092:	e01a      	b.n	80040ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004094:	4b29      	ldr	r3, [pc, #164]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a28      	ldr	r2, [pc, #160]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040a0:	f7fe fdbc 	bl	8002c1c <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040a8:	f7fe fdb8 	bl	8002c1c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e31a      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040ba:	4b20      	ldr	r3, [pc, #128]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x1dc>
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d073      	beq.n	80041be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_OscConfig+0x21c>
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d10e      	bne.n	8004100 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d10b      	bne.n	8004100 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	4b14      	ldr	r3, [pc, #80]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d063      	beq.n	80041bc <HAL_RCC_OscConfig+0x2f0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d15f      	bne.n	80041bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e2f7      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x24c>
 800410a:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a0b      	ldr	r2, [pc, #44]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e025      	b.n	8004164 <HAL_RCC_OscConfig+0x298>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004120:	d114      	bne.n	800414c <HAL_RCC_OscConfig+0x280>
 8004122:	4b06      	ldr	r3, [pc, #24]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a05      	ldr	r2, [pc, #20]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b03      	ldr	r3, [pc, #12]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a02      	ldr	r2, [pc, #8]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e013      	b.n	8004164 <HAL_RCC_OscConfig+0x298>
 800413c:	40021000 	.word	0x40021000
 8004140:	08007d54 	.word	0x08007d54
 8004144:	20000004 	.word	0x20000004
 8004148:	20000008 	.word	0x20000008
 800414c:	4ba0      	ldr	r3, [pc, #640]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a9f      	ldr	r2, [pc, #636]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b9d      	ldr	r3, [pc, #628]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a9c      	ldr	r2, [pc, #624]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 800415e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d013      	beq.n	8004194 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fd56 	bl	8002c1c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004174:	f7fe fd52 	bl	8002c1c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	@ 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e2b4      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004186:	4b92      	ldr	r3, [pc, #584]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x2a8>
 8004192:	e014      	b.n	80041be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe fd42 	bl	8002c1c <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800419c:	f7fe fd3e 	bl	8002c1c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	@ 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e2a0      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ae:	4b88      	ldr	r3, [pc, #544]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x2d0>
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d060      	beq.n	800428c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_OscConfig+0x310>
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d119      	bne.n	800420a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d116      	bne.n	800420a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041dc:	4b7c      	ldr	r3, [pc, #496]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_OscConfig+0x328>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e27d      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f4:	4b76      	ldr	r3, [pc, #472]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	4973      	ldr	r1, [pc, #460]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004208:	e040      	b.n	800428c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d023      	beq.n	800425a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004212:	4b6f      	ldr	r3, [pc, #444]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a6e      	ldr	r2, [pc, #440]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421e:	f7fe fcfd 	bl	8002c1c <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004226:	f7fe fcf9 	bl	8002c1c <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e25b      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004238:	4b65      	ldr	r3, [pc, #404]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004244:	4b62      	ldr	r3, [pc, #392]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	495f      	ldr	r1, [pc, #380]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
 8004258:	e018      	b.n	800428c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800425a:	4b5d      	ldr	r3, [pc, #372]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a5c      	ldr	r2, [pc, #368]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fe fcd9 	bl	8002c1c <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426e:	f7fe fcd5 	bl	8002c1c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e237      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004280:	4b53      	ldr	r3, [pc, #332]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d03c      	beq.n	8004312 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01c      	beq.n	80042da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a0:	4b4b      	ldr	r3, [pc, #300]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a6:	4a4a      	ldr	r2, [pc, #296]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fe fcb4 	bl	8002c1c <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b8:	f7fe fcb0 	bl	8002c1c <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e212      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ca:	4b41      	ldr	r3, [pc, #260]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80042cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ef      	beq.n	80042b8 <HAL_RCC_OscConfig+0x3ec>
 80042d8:	e01b      	b.n	8004312 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042da:	4b3d      	ldr	r3, [pc, #244]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80042dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e0:	4a3b      	ldr	r2, [pc, #236]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fe fc97 	bl	8002c1c <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f2:	f7fe fc93 	bl	8002c1c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e1f5      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004304:	4b32      	ldr	r3, [pc, #200]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ef      	bne.n	80042f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80a6 	beq.w	800446c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004320:	2300      	movs	r3, #0
 8004322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004324:	4b2a      	ldr	r3, [pc, #168]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10d      	bne.n	800434c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004330:	4b27      	ldr	r3, [pc, #156]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	4a26      	ldr	r2, [pc, #152]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800433a:	6593      	str	r3, [r2, #88]	@ 0x58
 800433c:	4b24      	ldr	r3, [pc, #144]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004348:	2301      	movs	r3, #1
 800434a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434c:	4b21      	ldr	r3, [pc, #132]	@ (80043d4 <HAL_RCC_OscConfig+0x508>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d118      	bne.n	800438a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004358:	4b1e      	ldr	r3, [pc, #120]	@ (80043d4 <HAL_RCC_OscConfig+0x508>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <HAL_RCC_OscConfig+0x508>)
 800435e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004364:	f7fe fc5a 	bl	8002c1c <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436c:	f7fe fc56 	bl	8002c1c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e1b8      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800437e:	4b15      	ldr	r3, [pc, #84]	@ (80043d4 <HAL_RCC_OscConfig+0x508>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d108      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4d8>
 8004392:	4b0f      	ldr	r3, [pc, #60]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004398:	4a0d      	ldr	r2, [pc, #52]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043a2:	e029      	b.n	80043f8 <HAL_RCC_OscConfig+0x52c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d115      	bne.n	80043d8 <HAL_RCC_OscConfig+0x50c>
 80043ac:	4b08      	ldr	r3, [pc, #32]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b2:	4a07      	ldr	r2, [pc, #28]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043bc:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c2:	4a03      	ldr	r2, [pc, #12]	@ (80043d0 <HAL_RCC_OscConfig+0x504>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043cc:	e014      	b.n	80043f8 <HAL_RCC_OscConfig+0x52c>
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40007000 	.word	0x40007000
 80043d8:	4b9d      	ldr	r3, [pc, #628]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043de:	4a9c      	ldr	r2, [pc, #624]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043e8:	4b99      	ldr	r3, [pc, #612]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	4a98      	ldr	r2, [pc, #608]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d016      	beq.n	800442e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fe fc0c 	bl	8002c1c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004406:	e00a      	b.n	800441e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004408:	f7fe fc08 	bl	8002c1c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e168      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800441e:	4b8c      	ldr	r3, [pc, #560]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ed      	beq.n	8004408 <HAL_RCC_OscConfig+0x53c>
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442e:	f7fe fbf5 	bl	8002c1c <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004434:	e00a      	b.n	800444c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fe fbf1 	bl	8002c1c <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e151      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800444c:	4b80      	ldr	r3, [pc, #512]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1ed      	bne.n	8004436 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800445a:	7ffb      	ldrb	r3, [r7, #31]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d105      	bne.n	800446c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004460:	4b7b      	ldr	r3, [pc, #492]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004464:	4a7a      	ldr	r2, [pc, #488]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800446a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d03c      	beq.n	80044f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01c      	beq.n	80044ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004480:	4b73      	ldr	r3, [pc, #460]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004486:	4a72      	ldr	r2, [pc, #456]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fe fbc4 	bl	8002c1c <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004498:	f7fe fbc0 	bl	8002c1c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e122      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044aa:	4b69      	ldr	r3, [pc, #420]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80044ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ef      	beq.n	8004498 <HAL_RCC_OscConfig+0x5cc>
 80044b8:	e01b      	b.n	80044f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044ba:	4b65      	ldr	r3, [pc, #404]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80044bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044c0:	4a63      	ldr	r2, [pc, #396]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ca:	f7fe fba7 	bl	8002c1c <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d2:	f7fe fba3 	bl	8002c1c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e105      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80044e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1ef      	bne.n	80044d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80f9 	beq.w	80046ee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	2b02      	cmp	r3, #2
 8004502:	f040 80cf 	bne.w	80046a4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004506:	4b52      	ldr	r3, [pc, #328]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f003 0203 	and.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	429a      	cmp	r2, r3
 8004518:	d12c      	bne.n	8004574 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	3b01      	subs	r3, #1
 8004526:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d123      	bne.n	8004574 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004536:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d11b      	bne.n	8004574 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d113      	bne.n	8004574 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	3b01      	subs	r3, #1
 800455a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d109      	bne.n	8004574 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	3b01      	subs	r3, #1
 800456e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d071      	beq.n	8004658 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b0c      	cmp	r3, #12
 8004578:	d068      	beq.n	800464c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800457a:	4b35      	ldr	r3, [pc, #212]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d105      	bne.n	8004592 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004586:	4b32      	ldr	r3, [pc, #200]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0ac      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004596:	4b2e      	ldr	r3, [pc, #184]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2d      	ldr	r2, [pc, #180]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 800459c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045a2:	f7fe fb3b 	bl	8002c1c <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fe fb37 	bl	8002c1c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e099      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045bc:	4b24      	ldr	r3, [pc, #144]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c8:	4b21      	ldr	r3, [pc, #132]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	4b21      	ldr	r3, [pc, #132]	@ (8004654 <HAL_RCC_OscConfig+0x788>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045d8:	3a01      	subs	r2, #1
 80045da:	0112      	lsls	r2, r2, #4
 80045dc:	4311      	orrs	r1, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045e2:	0212      	lsls	r2, r2, #8
 80045e4:	4311      	orrs	r1, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80045ea:	0852      	lsrs	r2, r2, #1
 80045ec:	3a01      	subs	r2, #1
 80045ee:	0552      	lsls	r2, r2, #21
 80045f0:	4311      	orrs	r1, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80045f6:	0852      	lsrs	r2, r2, #1
 80045f8:	3a01      	subs	r2, #1
 80045fa:	0652      	lsls	r2, r2, #25
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004602:	06d2      	lsls	r2, r2, #27
 8004604:	430a      	orrs	r2, r1
 8004606:	4912      	ldr	r1, [pc, #72]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004608:	4313      	orrs	r3, r2
 800460a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800460c:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0f      	ldr	r2, [pc, #60]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004618:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a0c      	ldr	r2, [pc, #48]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 800461e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004624:	f7fe fafa 	bl	8002c1c <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462c:	f7fe faf6 	bl	8002c1c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e058      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463e:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <HAL_RCC_OscConfig+0x784>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800464a:	e050      	b.n	80046ee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e04f      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
 8004650:	40021000 	.word	0x40021000
 8004654:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004658:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d144      	bne.n	80046ee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004664:	4b24      	ldr	r3, [pc, #144]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a23      	ldr	r2, [pc, #140]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004670:	4b21      	ldr	r3, [pc, #132]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a20      	ldr	r2, [pc, #128]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 8004676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800467a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800467c:	f7fe face 	bl	8002c1c <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004684:	f7fe faca 	bl	8002c1c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e02c      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004696:	4b18      	ldr	r3, [pc, #96]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x7b8>
 80046a2:	e024      	b.n	80046ee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d01f      	beq.n	80046ea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046aa:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a12      	ldr	r2, [pc, #72]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 80046b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b6:	f7fe fab1 	bl	8002c1c <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046be:	f7fe faad 	bl	8002c1c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e00f      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d0:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f0      	bne.n	80046be <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046dc:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	4905      	ldr	r1, [pc, #20]	@ (80046f8 <HAL_RCC_OscConfig+0x82c>)
 80046e2:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <HAL_RCC_OscConfig+0x830>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	60cb      	str	r3, [r1, #12]
 80046e8:	e001      	b.n	80046ee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000
 80046fc:	feeefffc 	.word	0xfeeefffc

08004700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e11d      	b.n	8004954 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004718:	4b90      	ldr	r3, [pc, #576]	@ (800495c <HAL_RCC_ClockConfig+0x25c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d910      	bls.n	8004748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b8d      	ldr	r3, [pc, #564]	@ (800495c <HAL_RCC_ClockConfig+0x25c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 020f 	bic.w	r2, r3, #15
 800472e:	498b      	ldr	r1, [pc, #556]	@ (800495c <HAL_RCC_ClockConfig+0x25c>)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004736:	4b89      	ldr	r3, [pc, #548]	@ (800495c <HAL_RCC_ClockConfig+0x25c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e105      	b.n	8004954 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b81      	ldr	r3, [pc, #516]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004760:	429a      	cmp	r2, r3
 8004762:	d908      	bls.n	8004776 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b7e      	ldr	r3, [pc, #504]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	497b      	ldr	r1, [pc, #492]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d079      	beq.n	8004876 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d11e      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478a:	4b75      	ldr	r3, [pc, #468]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e0dc      	b.n	8004954 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800479a:	f000 fa09 	bl	8004bb0 <RCC_GetSysClockFreqFromPLLSource>
 800479e:	4603      	mov	r3, r0
 80047a0:	4a70      	ldr	r2, [pc, #448]	@ (8004964 <HAL_RCC_ClockConfig+0x264>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d946      	bls.n	8004834 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d140      	bne.n	8004834 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047b2:	4b6b      	ldr	r3, [pc, #428]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ba:	4a69      	ldr	r2, [pc, #420]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 80047bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e035      	b.n	8004834 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d0:	4b63      	ldr	r3, [pc, #396]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d115      	bne.n	8004808 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0b9      	b.n	8004954 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047e8:	4b5d      	ldr	r3, [pc, #372]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0ad      	b.n	8004954 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f8:	4b59      	ldr	r3, [pc, #356]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0a5      	b.n	8004954 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004808:	f000 f8b4 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 800480c:	4603      	mov	r3, r0
 800480e:	4a55      	ldr	r2, [pc, #340]	@ (8004964 <HAL_RCC_ClockConfig+0x264>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d90f      	bls.n	8004834 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004814:	4b52      	ldr	r3, [pc, #328]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004820:	4b4f      	ldr	r3, [pc, #316]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004828:	4a4d      	ldr	r2, [pc, #308]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 800482a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800482e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004830:	2380      	movs	r3, #128	@ 0x80
 8004832:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004834:	4b4a      	ldr	r3, [pc, #296]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 0203 	bic.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4947      	ldr	r1, [pc, #284]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004846:	f7fe f9e9 	bl	8002c1c <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484c:	e00a      	b.n	8004864 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484e:	f7fe f9e5 	bl	8002c1c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e077      	b.n	8004954 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004864:	4b3e      	ldr	r3, [pc, #248]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 020c 	and.w	r2, r3, #12
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	429a      	cmp	r2, r3
 8004874:	d1eb      	bne.n	800484e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b80      	cmp	r3, #128	@ 0x80
 800487a:	d105      	bne.n	8004888 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800487c:	4b38      	ldr	r3, [pc, #224]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a37      	ldr	r2, [pc, #220]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004886:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d010      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	4b31      	ldr	r3, [pc, #196]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d208      	bcs.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	492b      	ldr	r1, [pc, #172]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b6:	4b29      	ldr	r3, [pc, #164]	@ (800495c <HAL_RCC_ClockConfig+0x25c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d210      	bcs.n	80048e6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c4:	4b25      	ldr	r3, [pc, #148]	@ (800495c <HAL_RCC_ClockConfig+0x25c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 020f 	bic.w	r2, r3, #15
 80048cc:	4923      	ldr	r1, [pc, #140]	@ (800495c <HAL_RCC_ClockConfig+0x25c>)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d4:	4b21      	ldr	r3, [pc, #132]	@ (800495c <HAL_RCC_ClockConfig+0x25c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e036      	b.n	8004954 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4918      	ldr	r1, [pc, #96]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004910:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4910      	ldr	r1, [pc, #64]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004920:	4313      	orrs	r3, r2
 8004922:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004924:	f000 f826 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	4b0d      	ldr	r3, [pc, #52]	@ (8004960 <HAL_RCC_ClockConfig+0x260>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	091b      	lsrs	r3, r3, #4
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	490c      	ldr	r1, [pc, #48]	@ (8004968 <HAL_RCC_ClockConfig+0x268>)
 8004936:	5ccb      	ldrb	r3, [r1, r3]
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	4a0a      	ldr	r2, [pc, #40]	@ (800496c <HAL_RCC_ClockConfig+0x26c>)
 8004942:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004944:	4b0a      	ldr	r3, [pc, #40]	@ (8004970 <HAL_RCC_ClockConfig+0x270>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe f917 	bl	8002b7c <HAL_InitTick>
 800494e:	4603      	mov	r3, r0
 8004950:	73fb      	strb	r3, [r7, #15]

  return status;
 8004952:	7bfb      	ldrb	r3, [r7, #15]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40022000 	.word	0x40022000
 8004960:	40021000 	.word	0x40021000
 8004964:	04c4b400 	.word	0x04c4b400
 8004968:	08007d54 	.word	0x08007d54
 800496c:	20000004 	.word	0x20000004
 8004970:	20000008 	.word	0x20000008

08004974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	b480      	push	{r7}
 8004976:	b089      	sub	sp, #36	@ 0x24
 8004978:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004982:	4b3e      	ldr	r3, [pc, #248]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800498c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x34>
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	d121      	bne.n	80049e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d11e      	bne.n	80049e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049a8:	4b34      	ldr	r3, [pc, #208]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d107      	bne.n	80049c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049b4:	4b31      	ldr	r3, [pc, #196]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80049b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	e005      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049c4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10d      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049e4:	e00a      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d102      	bne.n	80049f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049ec:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x110>)
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e004      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049f8:	4b23      	ldr	r3, [pc, #140]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x114>)
 80049fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d134      	bne.n	8004a6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a02:	4b1e      	ldr	r3, [pc, #120]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_GetSysClockFreq+0xa6>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d003      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0xac>
 8004a18:	e005      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a1c:	617b      	str	r3, [r7, #20]
      break;
 8004a1e:	e005      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a20:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a22:	617b      	str	r3, [r7, #20]
      break;
 8004a24:	e002      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	617b      	str	r3, [r7, #20]
      break;
 8004a2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a2c:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	3301      	adds	r3, #1
 8004a38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a3a:	4b10      	ldr	r3, [pc, #64]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	fb03 f202 	mul.w	r2, r3, r2
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a52:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	0e5b      	lsrs	r3, r3, #25
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3724      	adds	r7, #36	@ 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	08007d6c 	.word	0x08007d6c
 8004a84:	00f42400 	.word	0x00f42400
 8004a88:	007a1200 	.word	0x007a1200

08004a8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a90:	4b03      	ldr	r3, [pc, #12]	@ (8004aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a92:	681b      	ldr	r3, [r3, #0]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000004 	.word	0x20000004

08004aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004aa8:	f7ff fff0 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4904      	ldr	r1, [pc, #16]	@ (8004acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	08007d64 	.word	0x08007d64

08004ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ad4:	f7ff ffda 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0adb      	lsrs	r3, r3, #11
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4904      	ldr	r1, [pc, #16]	@ (8004af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40021000 	.word	0x40021000
 8004af8:	08007d64 	.word	0x08007d64

08004afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b04:	2300      	movs	r3, #0
 8004b06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b08:	4b27      	ldr	r3, [pc, #156]	@ (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b14:	f7ff f916 	bl	8003d44 <HAL_PWREx_GetVoltageRange>
 8004b18:	6178      	str	r0, [r7, #20]
 8004b1a:	e014      	b.n	8004b46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b1c:	4b22      	ldr	r3, [pc, #136]	@ (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b20:	4a21      	ldr	r2, [pc, #132]	@ (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b28:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b34:	f7ff f906 	bl	8003d44 <HAL_PWREx_GetVoltageRange>
 8004b38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b4c:	d10b      	bne.n	8004b66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b80      	cmp	r3, #128	@ 0x80
 8004b52:	d913      	bls.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b58:	d902      	bls.n	8004b60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e00d      	b.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b60:	2301      	movs	r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	e00a      	b.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b6a:	d902      	bls.n	8004b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	e004      	b.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b70      	cmp	r3, #112	@ 0x70
 8004b76:	d101      	bne.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b78:	2301      	movs	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 020f 	bic.w	r2, r3, #15
 8004b84:	4909      	ldr	r1, [pc, #36]	@ (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b8c:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d001      	beq.n	8004b9e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40022000 	.word	0x40022000

08004bb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d00b      	beq.n	8004bde <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d825      	bhi.n	8004c18 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d008      	beq.n	8004be4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d11f      	bne.n	8004c18 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004bd8:	4b25      	ldr	r3, [pc, #148]	@ (8004c70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004bda:	613b      	str	r3, [r7, #16]
    break;
 8004bdc:	e01f      	b.n	8004c1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004bde:	4b25      	ldr	r3, [pc, #148]	@ (8004c74 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004be0:	613b      	str	r3, [r7, #16]
    break;
 8004be2:	e01c      	b.n	8004c1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004be4:	4b21      	ldr	r3, [pc, #132]	@ (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d107      	bne.n	8004c00 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	e005      	b.n	8004c0c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c00:	4b1a      	ldr	r3, [pc, #104]	@ (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004c78 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c14:	613b      	str	r3, [r7, #16]
    break;
 8004c16:	e002      	b.n	8004c1e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
    break;
 8004c1c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c1e:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	fb03 f202 	mul.w	r2, r3, r2
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c44:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	0e5b      	lsrs	r3, r3, #25
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004c5e:	683b      	ldr	r3, [r7, #0]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	007a1200 	.word	0x007a1200
 8004c78:	08007d6c 	.word	0x08007d6c

08004c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c84:	2300      	movs	r3, #0
 8004c86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c88:	2300      	movs	r3, #0
 8004c8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d040      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c9c:	2b80      	cmp	r3, #128	@ 0x80
 8004c9e:	d02a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ca0:	2b80      	cmp	r3, #128	@ 0x80
 8004ca2:	d825      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ca4:	2b60      	cmp	r3, #96	@ 0x60
 8004ca6:	d026      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ca8:	2b60      	cmp	r3, #96	@ 0x60
 8004caa:	d821      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cac:	2b40      	cmp	r3, #64	@ 0x40
 8004cae:	d006      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004cb0:	2b40      	cmp	r3, #64	@ 0x40
 8004cb2:	d81d      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d010      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cbe:	4b89      	ldr	r3, [pc, #548]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	4a88      	ldr	r2, [pc, #544]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cca:	e015      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fb02 	bl	80052dc <RCCEx_PLLSAI1_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cdc:	e00c      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3320      	adds	r3, #32
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fbed 	bl	80054c4 <RCCEx_PLLSAI2_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cee:	e003      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	74fb      	strb	r3, [r7, #19]
      break;
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cfe:	4b79      	ldr	r3, [pc, #484]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d04:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d0c:	4975      	ldr	r1, [pc, #468]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004d14:	e001      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d047      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d2e:	d030      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d34:	d82a      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d3a:	d02a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d40:	d824      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d46:	d008      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d4c:	d81e      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d56:	d010      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d58:	e018      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d5a:	4b62      	ldr	r3, [pc, #392]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	4a61      	ldr	r2, [pc, #388]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d66:	e015      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fab4 	bl	80052dc <RCCEx_PLLSAI1_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d78:	e00c      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3320      	adds	r3, #32
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fb9f 	bl	80054c4 <RCCEx_PLLSAI2_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d8a:	e003      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	74fb      	strb	r3, [r7, #19]
      break;
 8004d90:	e000      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d9a:	4b52      	ldr	r3, [pc, #328]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004da0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da8:	494e      	ldr	r1, [pc, #312]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004db0:	e001      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 809f 	beq.w	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dc8:	4b46      	ldr	r3, [pc, #280]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dde:	4b41      	ldr	r3, [pc, #260]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de2:	4a40      	ldr	r2, [pc, #256]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df6:	2301      	movs	r3, #1
 8004df8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e06:	f7fd ff09 	bl	8002c1c <HAL_GetTick>
 8004e0a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e0c:	e009      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0e:	f7fd ff05 	bl	8002c1c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d902      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	74fb      	strb	r3, [r7, #19]
        break;
 8004e20:	e005      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e22:	4b31      	ldr	r3, [pc, #196]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0ef      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d15b      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e3e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01f      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d019      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e52:	4b24      	ldr	r3, [pc, #144]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e5e:	4b21      	ldr	r3, [pc, #132]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e7e:	4a19      	ldr	r2, [pc, #100]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d016      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fd fec4 	bl	8002c1c <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e96:	e00b      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e98:	f7fd fec0 	bl	8002c1c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d902      	bls.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	74fb      	strb	r3, [r7, #19]
            break;
 8004eae:	e006      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0ec      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10c      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec4:	4b07      	ldr	r3, [pc, #28]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed4:	4903      	ldr	r1, [pc, #12]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004edc:	e008      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	74bb      	strb	r3, [r7, #18]
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef0:	7c7b      	ldrb	r3, [r7, #17]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d105      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef6:	4ba0      	ldr	r3, [pc, #640]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efa:	4a9f      	ldr	r2, [pc, #636]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f0e:	4b9a      	ldr	r3, [pc, #616]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f14:	f023 0203 	bic.w	r2, r3, #3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1c:	4996      	ldr	r1, [pc, #600]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f30:	4b91      	ldr	r3, [pc, #580]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f36:	f023 020c 	bic.w	r2, r3, #12
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	498e      	ldr	r1, [pc, #568]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f52:	4b89      	ldr	r3, [pc, #548]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f60:	4985      	ldr	r1, [pc, #532]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f74:	4b80      	ldr	r3, [pc, #512]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f82:	497d      	ldr	r1, [pc, #500]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f96:	4b78      	ldr	r3, [pc, #480]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa4:	4974      	ldr	r1, [pc, #464]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc6:	496c      	ldr	r1, [pc, #432]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fda:	4b67      	ldr	r3, [pc, #412]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fe8:	4963      	ldr	r1, [pc, #396]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ffc:	4b5e      	ldr	r3, [pc, #376]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500a:	495b      	ldr	r1, [pc, #364]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800501e:	4b56      	ldr	r3, [pc, #344]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005024:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502c:	4952      	ldr	r1, [pc, #328]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005040:	4b4d      	ldr	r3, [pc, #308]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005046:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504e:	494a      	ldr	r1, [pc, #296]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005062:	4b45      	ldr	r3, [pc, #276]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005068:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005070:	4941      	ldr	r1, [pc, #260]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005084:	4b3c      	ldr	r3, [pc, #240]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005086:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800508a:	f023 0203 	bic.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005092:	4939      	ldr	r1, [pc, #228]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d028      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050a6:	4b34      	ldr	r3, [pc, #208]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b4:	4930      	ldr	r1, [pc, #192]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050c4:	d106      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050d0:	60d3      	str	r3, [r2, #12]
 80050d2:	e011      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f8f9 	bl	80052dc <RCCEx_PLLSAI1_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d04d      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005108:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800510c:	d108      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800510e:	4b1a      	ldr	r3, [pc, #104]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005110:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005114:	4a18      	ldr	r2, [pc, #96]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800511a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800511e:	e012      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005120:	4b15      	ldr	r3, [pc, #84]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005122:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005126:	4a14      	ldr	r2, [pc, #80]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005128:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800512c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005130:	4b11      	ldr	r3, [pc, #68]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005136:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800513e:	490e      	ldr	r1, [pc, #56]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800514a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800514e:	d106      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005150:	4b09      	ldr	r3, [pc, #36]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a08      	ldr	r2, [pc, #32]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800515a:	60d3      	str	r3, [r2, #12]
 800515c:	e020      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005166:	d109      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005168:	4b03      	ldr	r3, [pc, #12]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a02      	ldr	r2, [pc, #8]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005172:	60d3      	str	r3, [r2, #12]
 8005174:	e014      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005176:	bf00      	nop
 8005178:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005184:	d10c      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3304      	adds	r3, #4
 800518a:	2101      	movs	r1, #1
 800518c:	4618      	mov	r0, r3
 800518e:	f000 f8a5 	bl	80052dc <RCCEx_PLLSAI1_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d028      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ac:	4b4a      	ldr	r3, [pc, #296]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ba:	4947      	ldr	r1, [pc, #284]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ca:	d106      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051cc:	4b42      	ldr	r3, [pc, #264]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a41      	ldr	r2, [pc, #260]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051d6:	60d3      	str	r3, [r2, #12]
 80051d8:	e011      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051e2:	d10c      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	2101      	movs	r1, #1
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 f876 	bl	80052dc <RCCEx_PLLSAI1_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80051fa:	7cfb      	ldrb	r3, [r7, #19]
 80051fc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01e      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800520a:	4b33      	ldr	r3, [pc, #204]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005210:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800521a:	492f      	ldr	r1, [pc, #188]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005228:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	2102      	movs	r1, #2
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f851 	bl	80052dc <RCCEx_PLLSAI1_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005244:	7cfb      	ldrb	r3, [r7, #19]
 8005246:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005254:	4b20      	ldr	r3, [pc, #128]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005256:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800525a:	f023 0204 	bic.w	r2, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005264:	491c      	ldr	r1, [pc, #112]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005278:	4b17      	ldr	r3, [pc, #92]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800527e:	f023 0218 	bic.w	r2, r3, #24
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005288:	4913      	ldr	r1, [pc, #76]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d017      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800529c:	4b0e      	ldr	r3, [pc, #56]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800529e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ac:	490a      	ldr	r1, [pc, #40]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052be:	d105      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c0:	4b05      	ldr	r3, [pc, #20]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a04      	ldr	r2, [pc, #16]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000

080052dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052ea:	4b72      	ldr	r3, [pc, #456]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00e      	beq.n	8005314 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052f6:	4b6f      	ldr	r3, [pc, #444]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0203 	and.w	r2, r3, #3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d103      	bne.n	800530e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
       ||
 800530a:	2b00      	cmp	r3, #0
 800530c:	d142      	bne.n	8005394 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	e03f      	b.n	8005394 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d018      	beq.n	800534e <RCCEx_PLLSAI1_Config+0x72>
 800531c:	2b03      	cmp	r3, #3
 800531e:	d825      	bhi.n	800536c <RCCEx_PLLSAI1_Config+0x90>
 8005320:	2b01      	cmp	r3, #1
 8005322:	d002      	beq.n	800532a <RCCEx_PLLSAI1_Config+0x4e>
 8005324:	2b02      	cmp	r3, #2
 8005326:	d009      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x60>
 8005328:	e020      	b.n	800536c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800532a:	4b62      	ldr	r3, [pc, #392]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d11d      	bne.n	8005372 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533a:	e01a      	b.n	8005372 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800533c:	4b5d      	ldr	r3, [pc, #372]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005344:	2b00      	cmp	r3, #0
 8005346:	d116      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800534c:	e013      	b.n	8005376 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800534e:	4b59      	ldr	r3, [pc, #356]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10f      	bne.n	800537a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800535a:	4b56      	ldr	r3, [pc, #344]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800536a:	e006      	b.n	800537a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
      break;
 8005370:	e004      	b.n	800537c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800537a:	bf00      	nop
    }

    if(status == HAL_OK)
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d108      	bne.n	8005394 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005382:	4b4c      	ldr	r3, [pc, #304]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4949      	ldr	r1, [pc, #292]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005390:	4313      	orrs	r3, r2
 8005392:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f040 8086 	bne.w	80054a8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800539c:	4b45      	ldr	r3, [pc, #276]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a44      	ldr	r2, [pc, #272]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a8:	f7fd fc38 	bl	8002c1c <HAL_GetTick>
 80053ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053ae:	e009      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053b0:	f7fd fc34 	bl	8002c1c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d902      	bls.n	80053c4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	73fb      	strb	r3, [r7, #15]
        break;
 80053c2:	e005      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c4:	4b3b      	ldr	r3, [pc, #236]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ef      	bne.n	80053b0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d168      	bne.n	80054a8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d113      	bne.n	8005404 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053dc:	4b35      	ldr	r3, [pc, #212]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	4b35      	ldr	r3, [pc, #212]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6892      	ldr	r2, [r2, #8]
 80053e8:	0211      	lsls	r1, r2, #8
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	68d2      	ldr	r2, [r2, #12]
 80053ee:	06d2      	lsls	r2, r2, #27
 80053f0:	4311      	orrs	r1, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6852      	ldr	r2, [r2, #4]
 80053f6:	3a01      	subs	r2, #1
 80053f8:	0112      	lsls	r2, r2, #4
 80053fa:	430a      	orrs	r2, r1
 80053fc:	492d      	ldr	r1, [pc, #180]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]
 8005402:	e02d      	b.n	8005460 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d115      	bne.n	8005436 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800540a:	4b2a      	ldr	r3, [pc, #168]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	4b2b      	ldr	r3, [pc, #172]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005410:	4013      	ands	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6892      	ldr	r2, [r2, #8]
 8005416:	0211      	lsls	r1, r2, #8
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6912      	ldr	r2, [r2, #16]
 800541c:	0852      	lsrs	r2, r2, #1
 800541e:	3a01      	subs	r2, #1
 8005420:	0552      	lsls	r2, r2, #21
 8005422:	4311      	orrs	r1, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6852      	ldr	r2, [r2, #4]
 8005428:	3a01      	subs	r2, #1
 800542a:	0112      	lsls	r2, r2, #4
 800542c:	430a      	orrs	r2, r1
 800542e:	4921      	ldr	r1, [pc, #132]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005430:	4313      	orrs	r3, r2
 8005432:	610b      	str	r3, [r1, #16]
 8005434:	e014      	b.n	8005460 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005436:	4b1f      	ldr	r3, [pc, #124]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	4b21      	ldr	r3, [pc, #132]	@ (80054c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543c:	4013      	ands	r3, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	0211      	lsls	r1, r2, #8
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6952      	ldr	r2, [r2, #20]
 8005448:	0852      	lsrs	r2, r2, #1
 800544a:	3a01      	subs	r2, #1
 800544c:	0652      	lsls	r2, r2, #25
 800544e:	4311      	orrs	r1, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6852      	ldr	r2, [r2, #4]
 8005454:	3a01      	subs	r2, #1
 8005456:	0112      	lsls	r2, r2, #4
 8005458:	430a      	orrs	r2, r1
 800545a:	4916      	ldr	r1, [pc, #88]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800545c:	4313      	orrs	r3, r2
 800545e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005460:	4b14      	ldr	r3, [pc, #80]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a13      	ldr	r2, [pc, #76]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005466:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800546a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546c:	f7fd fbd6 	bl	8002c1c <HAL_GetTick>
 8005470:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005472:	e009      	b.n	8005488 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005474:	f7fd fbd2 	bl	8002c1c <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d902      	bls.n	8005488 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	73fb      	strb	r3, [r7, #15]
          break;
 8005486:	e005      	b.n	8005494 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005488:	4b0a      	ldr	r3, [pc, #40]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0ef      	beq.n	8005474 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800549a:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	4904      	ldr	r1, [pc, #16]	@ (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40021000 	.word	0x40021000
 80054b8:	07ff800f 	.word	0x07ff800f
 80054bc:	ff9f800f 	.word	0xff9f800f
 80054c0:	f9ff800f 	.word	0xf9ff800f

080054c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054d2:	4b72      	ldr	r3, [pc, #456]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00e      	beq.n	80054fc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054de:	4b6f      	ldr	r3, [pc, #444]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0203 	and.w	r2, r3, #3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d103      	bne.n	80054f6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
       ||
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d142      	bne.n	800557c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	e03f      	b.n	800557c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b03      	cmp	r3, #3
 8005502:	d018      	beq.n	8005536 <RCCEx_PLLSAI2_Config+0x72>
 8005504:	2b03      	cmp	r3, #3
 8005506:	d825      	bhi.n	8005554 <RCCEx_PLLSAI2_Config+0x90>
 8005508:	2b01      	cmp	r3, #1
 800550a:	d002      	beq.n	8005512 <RCCEx_PLLSAI2_Config+0x4e>
 800550c:	2b02      	cmp	r3, #2
 800550e:	d009      	beq.n	8005524 <RCCEx_PLLSAI2_Config+0x60>
 8005510:	e020      	b.n	8005554 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005512:	4b62      	ldr	r3, [pc, #392]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d11d      	bne.n	800555a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005522:	e01a      	b.n	800555a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005524:	4b5d      	ldr	r3, [pc, #372]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800552c:	2b00      	cmp	r3, #0
 800552e:	d116      	bne.n	800555e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005534:	e013      	b.n	800555e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005536:	4b59      	ldr	r3, [pc, #356]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10f      	bne.n	8005562 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005542:	4b56      	ldr	r3, [pc, #344]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005552:	e006      	b.n	8005562 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
      break;
 8005558:	e004      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005562:	bf00      	nop
    }

    if(status == HAL_OK)
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d108      	bne.n	800557c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800556a:	4b4c      	ldr	r3, [pc, #304]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f023 0203 	bic.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4949      	ldr	r1, [pc, #292]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005578:	4313      	orrs	r3, r2
 800557a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f040 8086 	bne.w	8005690 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005584:	4b45      	ldr	r3, [pc, #276]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a44      	ldr	r2, [pc, #272]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800558e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005590:	f7fd fb44 	bl	8002c1c <HAL_GetTick>
 8005594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005596:	e009      	b.n	80055ac <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005598:	f7fd fb40 	bl	8002c1c <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d902      	bls.n	80055ac <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	73fb      	strb	r3, [r7, #15]
        break;
 80055aa:	e005      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ac:	4b3b      	ldr	r3, [pc, #236]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1ef      	bne.n	8005598 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d168      	bne.n	8005690 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d113      	bne.n	80055ec <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055c4:	4b35      	ldr	r3, [pc, #212]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055c6:	695a      	ldr	r2, [r3, #20]
 80055c8:	4b35      	ldr	r3, [pc, #212]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6892      	ldr	r2, [r2, #8]
 80055d0:	0211      	lsls	r1, r2, #8
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68d2      	ldr	r2, [r2, #12]
 80055d6:	06d2      	lsls	r2, r2, #27
 80055d8:	4311      	orrs	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6852      	ldr	r2, [r2, #4]
 80055de:	3a01      	subs	r2, #1
 80055e0:	0112      	lsls	r2, r2, #4
 80055e2:	430a      	orrs	r2, r1
 80055e4:	492d      	ldr	r1, [pc, #180]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	614b      	str	r3, [r1, #20]
 80055ea:	e02d      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d115      	bne.n	800561e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055f2:	4b2a      	ldr	r3, [pc, #168]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	4b2b      	ldr	r3, [pc, #172]	@ (80056a4 <RCCEx_PLLSAI2_Config+0x1e0>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6892      	ldr	r2, [r2, #8]
 80055fe:	0211      	lsls	r1, r2, #8
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6912      	ldr	r2, [r2, #16]
 8005604:	0852      	lsrs	r2, r2, #1
 8005606:	3a01      	subs	r2, #1
 8005608:	0552      	lsls	r2, r2, #21
 800560a:	4311      	orrs	r1, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6852      	ldr	r2, [r2, #4]
 8005610:	3a01      	subs	r2, #1
 8005612:	0112      	lsls	r2, r2, #4
 8005614:	430a      	orrs	r2, r1
 8005616:	4921      	ldr	r1, [pc, #132]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005618:	4313      	orrs	r3, r2
 800561a:	614b      	str	r3, [r1, #20]
 800561c:	e014      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800561e:	4b1f      	ldr	r3, [pc, #124]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	4b21      	ldr	r3, [pc, #132]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005624:	4013      	ands	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6892      	ldr	r2, [r2, #8]
 800562a:	0211      	lsls	r1, r2, #8
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6952      	ldr	r2, [r2, #20]
 8005630:	0852      	lsrs	r2, r2, #1
 8005632:	3a01      	subs	r2, #1
 8005634:	0652      	lsls	r2, r2, #25
 8005636:	4311      	orrs	r1, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6852      	ldr	r2, [r2, #4]
 800563c:	3a01      	subs	r2, #1
 800563e:	0112      	lsls	r2, r2, #4
 8005640:	430a      	orrs	r2, r1
 8005642:	4916      	ldr	r1, [pc, #88]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005644:	4313      	orrs	r3, r2
 8005646:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005648:	4b14      	ldr	r3, [pc, #80]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a13      	ldr	r2, [pc, #76]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800564e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fd fae2 	bl	8002c1c <HAL_GetTick>
 8005658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800565a:	e009      	b.n	8005670 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800565c:	f7fd fade 	bl	8002c1c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d902      	bls.n	8005670 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	73fb      	strb	r3, [r7, #15]
          break;
 800566e:	e005      	b.n	800567c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005670:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ef      	beq.n	800565c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005682:	4b06      	ldr	r3, [pc, #24]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	4904      	ldr	r1, [pc, #16]	@ (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800568c:	4313      	orrs	r3, r2
 800568e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005690:	7bfb      	ldrb	r3, [r7, #15]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000
 80056a0:	07ff800f 	.word	0x07ff800f
 80056a4:	ff9f800f 	.word	0xff9f800f
 80056a8:	f9ff800f 	.word	0xf9ff800f

080056ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e095      	b.n	80057ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d108      	bne.n	80056d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ce:	d009      	beq.n	80056e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	61da      	str	r2, [r3, #28]
 80056d6:	e005      	b.n	80056e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fc fe88 	bl	8002414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800571a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005724:	d902      	bls.n	800572c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e002      	b.n	8005732 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800572c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005730:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800573a:	d007      	beq.n	800574c <HAL_SPI_Init+0xa0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005744:	d002      	beq.n	800574c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578e:	ea42 0103 	orr.w	r1, r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	f003 0204 	and.w	r2, r3, #4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80057c8:	ea42 0103 	orr.w	r1, r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	603b      	str	r3, [r7, #0]
 80057fe:	4613      	mov	r3, r2
 8005800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_SPI_Transmit+0x22>
 8005810:	2302      	movs	r3, #2
 8005812:	e15f      	b.n	8005ad4 <HAL_SPI_Transmit+0x2e2>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800581c:	f7fd f9fe 	bl	8002c1c <HAL_GetTick>
 8005820:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	d002      	beq.n	8005838 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005832:	2302      	movs	r3, #2
 8005834:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005836:	e148      	b.n	8005aca <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_SPI_Transmit+0x52>
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005848:	e13f      	b.n	8005aca <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2203      	movs	r2, #3
 800584e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005894:	d10f      	bne.n	80058b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c0:	2b40      	cmp	r3, #64	@ 0x40
 80058c2:	d007      	beq.n	80058d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058dc:	d94f      	bls.n	800597e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_Transmit+0xfa>
 80058e6:	8afb      	ldrh	r3, [r7, #22]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d142      	bne.n	8005972 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	881a      	ldrh	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fc:	1c9a      	adds	r2, r3, #2
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005910:	e02f      	b.n	8005972 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d112      	bne.n	8005946 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005924:	881a      	ldrh	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	1c9a      	adds	r2, r3, #2
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005944:	e015      	b.n	8005972 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005946:	f7fd f969 	bl	8002c1c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d803      	bhi.n	800595e <HAL_SPI_Transmit+0x16c>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800595c:	d102      	bne.n	8005964 <HAL_SPI_Transmit+0x172>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005970:	e0ab      	b.n	8005aca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ca      	bne.n	8005912 <HAL_SPI_Transmit+0x120>
 800597c:	e080      	b.n	8005a80 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_SPI_Transmit+0x19a>
 8005986:	8afb      	ldrh	r3, [r7, #22]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d174      	bne.n	8005a76 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d912      	bls.n	80059bc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599a:	881a      	ldrh	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	1c9a      	adds	r2, r3, #2
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b02      	subs	r3, #2
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059ba:	e05c      	b.n	8005a76 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	7812      	ldrb	r2, [r2, #0]
 80059c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80059e2:	e048      	b.n	8005a76 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d12b      	bne.n	8005a4a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d912      	bls.n	8005a22 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0c:	1c9a      	adds	r2, r3, #2
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b02      	subs	r3, #2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a20:	e029      	b.n	8005a76 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a48:	e015      	b.n	8005a76 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4a:	f7fd f8e7 	bl	8002c1c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d803      	bhi.n	8005a62 <HAL_SPI_Transmit+0x270>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a60:	d102      	bne.n	8005a68 <HAL_SPI_Transmit+0x276>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005a74:	e029      	b.n	8005aca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1b1      	bne.n	80059e4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f947 	bl	8005d18 <SPI_EndRxTxTransaction>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e003      	b.n	8005aca <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005aec:	f7fd f896 	bl	8002c1c <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	4413      	add	r3, r2
 8005afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005afc:	f7fd f88e 	bl	8002c1c <HAL_GetTick>
 8005b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b02:	4b39      	ldr	r3, [pc, #228]	@ (8005be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	015b      	lsls	r3, r3, #5
 8005b08:	0d1b      	lsrs	r3, r3, #20
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b12:	e054      	b.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b1a:	d050      	beq.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b1c:	f7fd f87e 	bl	8002c1c <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d902      	bls.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d13d      	bne.n	8005bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b4a:	d111      	bne.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b54:	d004      	beq.n	8005b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b5e:	d107      	bne.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b78:	d10f      	bne.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e017      	b.n	8005bde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	bf0c      	ite	eq
 8005bce:	2301      	moveq	r3, #1
 8005bd0:	2300      	movne	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d19b      	bne.n	8005b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000004 	.word	0x20000004

08005bec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	@ 0x28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bfe:	f7fd f80d 	bl	8002c1c <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005c0e:	f7fd f805 	bl	8002c1c <HAL_GetTick>
 8005c12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	00da      	lsls	r2, r3, #3
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	0d1b      	lsrs	r3, r3, #20
 8005c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c34:	e060      	b.n	8005cf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c3c:	d107      	bne.n	8005c4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c54:	d050      	beq.n	8005cf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c56:	f7fc ffe1 	bl	8002c1c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d902      	bls.n	8005c6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d13d      	bne.n	8005ce8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c84:	d111      	bne.n	8005caa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c8e:	d004      	beq.n	8005c9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c98:	d107      	bne.n	8005caa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ca8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb2:	d10f      	bne.n	8005cd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e010      	b.n	8005d0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4013      	ands	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d196      	bne.n	8005c36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3728      	adds	r7, #40	@ 0x28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000004 	.word	0x20000004

08005d18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff ff5b 	bl	8005bec <SPI_WaitFifoStateUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e027      	b.n	8005d9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	2180      	movs	r1, #128	@ 0x80
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff fec0 	bl	8005adc <SPI_WaitFlagStateUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d66:	f043 0220 	orr.w	r2, r3, #32
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e014      	b.n	8005d9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff ff34 	bl	8005bec <SPI_WaitFifoStateUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e000      	b.n	8005d9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e042      	b.n	8005e3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fc fb99 	bl	8002500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2224      	movs	r2, #36	@ 0x24
 8005dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0201 	bic.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fc7c 	bl	80066ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f97d 	bl	80060f4 <UART_SetConfig>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e01b      	b.n	8005e3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fcfb 	bl	8006830 <UART_CheckIdleState>
 8005e3a:	4603      	mov	r3, r0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	@ 0x28
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d17b      	bne.n	8005f56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <HAL_UART_Transmit+0x26>
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e074      	b.n	8005f58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2221      	movs	r2, #33	@ 0x21
 8005e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e7e:	f7fc fecd 	bl	8002c1c <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	88fa      	ldrh	r2, [r7, #6]
 8005e90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e9c:	d108      	bne.n	8005eb0 <HAL_UART_Transmit+0x6c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d104      	bne.n	8005eb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e003      	b.n	8005eb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005eb8:	e030      	b.n	8005f1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2180      	movs	r1, #128	@ 0x80
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fd5d 	bl	8006984 <UART_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e03d      	b.n	8005f58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eee:	b292      	uxth	r2, r2
 8005ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	e007      	b.n	8005f0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	781a      	ldrb	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1c8      	bne.n	8005eba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2140      	movs	r1, #64	@ 0x40
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 fd26 	bl	8006984 <UART_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e006      	b.n	8005f58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e000      	b.n	8005f58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005f56:	2302      	movs	r3, #2
  }
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	@ 0x28
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	f040 80b6 	bne.w	80060e8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <HAL_UART_Receive+0x28>
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0ae      	b.n	80060ea <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2222      	movs	r2, #34	@ 0x22
 8005f98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fa2:	f7fc fe3b 	bl	8002c1c <HAL_GetTick>
 8005fa6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	88fa      	ldrh	r2, [r7, #6]
 8005fac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc0:	d10e      	bne.n	8005fe0 <HAL_UART_Receive+0x80>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d105      	bne.n	8005fd6 <HAL_UART_Receive+0x76>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005fd4:	e02d      	b.n	8006032 <HAL_UART_Receive+0xd2>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	22ff      	movs	r2, #255	@ 0xff
 8005fda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005fde:	e028      	b.n	8006032 <HAL_UART_Receive+0xd2>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10d      	bne.n	8006004 <HAL_UART_Receive+0xa4>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <HAL_UART_Receive+0x9a>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	22ff      	movs	r2, #255	@ 0xff
 8005ff4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ff8:	e01b      	b.n	8006032 <HAL_UART_Receive+0xd2>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	227f      	movs	r2, #127	@ 0x7f
 8005ffe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006002:	e016      	b.n	8006032 <HAL_UART_Receive+0xd2>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800600c:	d10d      	bne.n	800602a <HAL_UART_Receive+0xca>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <HAL_UART_Receive+0xc0>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	227f      	movs	r2, #127	@ 0x7f
 800601a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800601e:	e008      	b.n	8006032 <HAL_UART_Receive+0xd2>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	223f      	movs	r2, #63	@ 0x3f
 8006024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006028:	e003      	b.n	8006032 <HAL_UART_Receive+0xd2>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006038:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006042:	d108      	bne.n	8006056 <HAL_UART_Receive+0xf6>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800604c:	2300      	movs	r3, #0
 800604e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e003      	b.n	800605e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800605e:	e037      	b.n	80060d0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	2120      	movs	r1, #32
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 fc8a 	bl	8006984 <UART_WaitOnFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e033      	b.n	80060ea <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10c      	bne.n	80060a2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800608e:	b29a      	uxth	r2, r3
 8006090:	8a7b      	ldrh	r3, [r7, #18]
 8006092:	4013      	ands	r3, r2
 8006094:	b29a      	uxth	r2, r3
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	3302      	adds	r3, #2
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	e00d      	b.n	80060be <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	8a7b      	ldrh	r3, [r7, #18]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	4013      	ands	r3, r2
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3301      	adds	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1c1      	bne.n	8006060 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	e000      	b.n	80060ea <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80060e8:	2302      	movs	r3, #2
  }
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f8:	b08c      	sub	sp, #48	@ 0x30
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	431a      	orrs	r2, r3
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	431a      	orrs	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	4313      	orrs	r3, r2
 800611a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4baa      	ldr	r3, [pc, #680]	@ (80063cc <UART_SetConfig+0x2d8>)
 8006124:	4013      	ands	r3, r2
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800612c:	430b      	orrs	r3, r1
 800612e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a9f      	ldr	r2, [pc, #636]	@ (80063d0 <UART_SetConfig+0x2dc>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d004      	beq.n	8006160 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800615c:	4313      	orrs	r3, r2
 800615e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800616a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006174:	430b      	orrs	r3, r1
 8006176:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	f023 010f 	bic.w	r1, r3, #15
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a90      	ldr	r2, [pc, #576]	@ (80063d4 <UART_SetConfig+0x2e0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d125      	bne.n	80061e4 <UART_SetConfig+0xf0>
 8006198:	4b8f      	ldr	r3, [pc, #572]	@ (80063d8 <UART_SetConfig+0x2e4>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d81a      	bhi.n	80061dc <UART_SetConfig+0xe8>
 80061a6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <UART_SetConfig+0xb8>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061bd 	.word	0x080061bd
 80061b0:	080061cd 	.word	0x080061cd
 80061b4:	080061c5 	.word	0x080061c5
 80061b8:	080061d5 	.word	0x080061d5
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c2:	e116      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80061c4:	2302      	movs	r3, #2
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ca:	e112      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d2:	e10e      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061da:	e10a      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e106      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a7c      	ldr	r2, [pc, #496]	@ (80063dc <UART_SetConfig+0x2e8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d138      	bne.n	8006260 <UART_SetConfig+0x16c>
 80061ee:	4b7a      	ldr	r3, [pc, #488]	@ (80063d8 <UART_SetConfig+0x2e4>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f4:	f003 030c 	and.w	r3, r3, #12
 80061f8:	2b0c      	cmp	r3, #12
 80061fa:	d82d      	bhi.n	8006258 <UART_SetConfig+0x164>
 80061fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006204 <UART_SetConfig+0x110>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006239 	.word	0x08006239
 8006208:	08006259 	.word	0x08006259
 800620c:	08006259 	.word	0x08006259
 8006210:	08006259 	.word	0x08006259
 8006214:	08006249 	.word	0x08006249
 8006218:	08006259 	.word	0x08006259
 800621c:	08006259 	.word	0x08006259
 8006220:	08006259 	.word	0x08006259
 8006224:	08006241 	.word	0x08006241
 8006228:	08006259 	.word	0x08006259
 800622c:	08006259 	.word	0x08006259
 8006230:	08006259 	.word	0x08006259
 8006234:	08006251 	.word	0x08006251
 8006238:	2300      	movs	r3, #0
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623e:	e0d8      	b.n	80063f2 <UART_SetConfig+0x2fe>
 8006240:	2302      	movs	r3, #2
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006246:	e0d4      	b.n	80063f2 <UART_SetConfig+0x2fe>
 8006248:	2304      	movs	r3, #4
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624e:	e0d0      	b.n	80063f2 <UART_SetConfig+0x2fe>
 8006250:	2308      	movs	r3, #8
 8006252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006256:	e0cc      	b.n	80063f2 <UART_SetConfig+0x2fe>
 8006258:	2310      	movs	r3, #16
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625e:	e0c8      	b.n	80063f2 <UART_SetConfig+0x2fe>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5e      	ldr	r2, [pc, #376]	@ (80063e0 <UART_SetConfig+0x2ec>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d125      	bne.n	80062b6 <UART_SetConfig+0x1c2>
 800626a:	4b5b      	ldr	r3, [pc, #364]	@ (80063d8 <UART_SetConfig+0x2e4>)
 800626c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006270:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006274:	2b30      	cmp	r3, #48	@ 0x30
 8006276:	d016      	beq.n	80062a6 <UART_SetConfig+0x1b2>
 8006278:	2b30      	cmp	r3, #48	@ 0x30
 800627a:	d818      	bhi.n	80062ae <UART_SetConfig+0x1ba>
 800627c:	2b20      	cmp	r3, #32
 800627e:	d00a      	beq.n	8006296 <UART_SetConfig+0x1a2>
 8006280:	2b20      	cmp	r3, #32
 8006282:	d814      	bhi.n	80062ae <UART_SetConfig+0x1ba>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <UART_SetConfig+0x19a>
 8006288:	2b10      	cmp	r3, #16
 800628a:	d008      	beq.n	800629e <UART_SetConfig+0x1aa>
 800628c:	e00f      	b.n	80062ae <UART_SetConfig+0x1ba>
 800628e:	2300      	movs	r3, #0
 8006290:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006294:	e0ad      	b.n	80063f2 <UART_SetConfig+0x2fe>
 8006296:	2302      	movs	r3, #2
 8006298:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629c:	e0a9      	b.n	80063f2 <UART_SetConfig+0x2fe>
 800629e:	2304      	movs	r3, #4
 80062a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a4:	e0a5      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80062a6:	2308      	movs	r3, #8
 80062a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ac:	e0a1      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80062ae:	2310      	movs	r3, #16
 80062b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b4:	e09d      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a4a      	ldr	r2, [pc, #296]	@ (80063e4 <UART_SetConfig+0x2f0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d125      	bne.n	800630c <UART_SetConfig+0x218>
 80062c0:	4b45      	ldr	r3, [pc, #276]	@ (80063d8 <UART_SetConfig+0x2e4>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80062cc:	d016      	beq.n	80062fc <UART_SetConfig+0x208>
 80062ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80062d0:	d818      	bhi.n	8006304 <UART_SetConfig+0x210>
 80062d2:	2b80      	cmp	r3, #128	@ 0x80
 80062d4:	d00a      	beq.n	80062ec <UART_SetConfig+0x1f8>
 80062d6:	2b80      	cmp	r3, #128	@ 0x80
 80062d8:	d814      	bhi.n	8006304 <UART_SetConfig+0x210>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <UART_SetConfig+0x1f0>
 80062de:	2b40      	cmp	r3, #64	@ 0x40
 80062e0:	d008      	beq.n	80062f4 <UART_SetConfig+0x200>
 80062e2:	e00f      	b.n	8006304 <UART_SetConfig+0x210>
 80062e4:	2300      	movs	r3, #0
 80062e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ea:	e082      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80062ec:	2302      	movs	r3, #2
 80062ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f2:	e07e      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80062f4:	2304      	movs	r3, #4
 80062f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062fa:	e07a      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80062fc:	2308      	movs	r3, #8
 80062fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006302:	e076      	b.n	80063f2 <UART_SetConfig+0x2fe>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630a:	e072      	b.n	80063f2 <UART_SetConfig+0x2fe>
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a35      	ldr	r2, [pc, #212]	@ (80063e8 <UART_SetConfig+0x2f4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d12a      	bne.n	800636c <UART_SetConfig+0x278>
 8006316:	4b30      	ldr	r3, [pc, #192]	@ (80063d8 <UART_SetConfig+0x2e4>)
 8006318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006324:	d01a      	beq.n	800635c <UART_SetConfig+0x268>
 8006326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800632a:	d81b      	bhi.n	8006364 <UART_SetConfig+0x270>
 800632c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006330:	d00c      	beq.n	800634c <UART_SetConfig+0x258>
 8006332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006336:	d815      	bhi.n	8006364 <UART_SetConfig+0x270>
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <UART_SetConfig+0x250>
 800633c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006340:	d008      	beq.n	8006354 <UART_SetConfig+0x260>
 8006342:	e00f      	b.n	8006364 <UART_SetConfig+0x270>
 8006344:	2300      	movs	r3, #0
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800634a:	e052      	b.n	80063f2 <UART_SetConfig+0x2fe>
 800634c:	2302      	movs	r3, #2
 800634e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006352:	e04e      	b.n	80063f2 <UART_SetConfig+0x2fe>
 8006354:	2304      	movs	r3, #4
 8006356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800635a:	e04a      	b.n	80063f2 <UART_SetConfig+0x2fe>
 800635c:	2308      	movs	r3, #8
 800635e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006362:	e046      	b.n	80063f2 <UART_SetConfig+0x2fe>
 8006364:	2310      	movs	r3, #16
 8006366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636a:	e042      	b.n	80063f2 <UART_SetConfig+0x2fe>
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a17      	ldr	r2, [pc, #92]	@ (80063d0 <UART_SetConfig+0x2dc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d13a      	bne.n	80063ec <UART_SetConfig+0x2f8>
 8006376:	4b18      	ldr	r3, [pc, #96]	@ (80063d8 <UART_SetConfig+0x2e4>)
 8006378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006380:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006384:	d01a      	beq.n	80063bc <UART_SetConfig+0x2c8>
 8006386:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800638a:	d81b      	bhi.n	80063c4 <UART_SetConfig+0x2d0>
 800638c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006390:	d00c      	beq.n	80063ac <UART_SetConfig+0x2b8>
 8006392:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006396:	d815      	bhi.n	80063c4 <UART_SetConfig+0x2d0>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <UART_SetConfig+0x2b0>
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a0:	d008      	beq.n	80063b4 <UART_SetConfig+0x2c0>
 80063a2:	e00f      	b.n	80063c4 <UART_SetConfig+0x2d0>
 80063a4:	2300      	movs	r3, #0
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063aa:	e022      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80063ac:	2302      	movs	r3, #2
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b2:	e01e      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80063b4:	2304      	movs	r3, #4
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ba:	e01a      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80063bc:	2308      	movs	r3, #8
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c2:	e016      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80063c4:	2310      	movs	r3, #16
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ca:	e012      	b.n	80063f2 <UART_SetConfig+0x2fe>
 80063cc:	cfff69f3 	.word	0xcfff69f3
 80063d0:	40008000 	.word	0x40008000
 80063d4:	40013800 	.word	0x40013800
 80063d8:	40021000 	.word	0x40021000
 80063dc:	40004400 	.word	0x40004400
 80063e0:	40004800 	.word	0x40004800
 80063e4:	40004c00 	.word	0x40004c00
 80063e8:	40005000 	.word	0x40005000
 80063ec:	2310      	movs	r3, #16
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4aae      	ldr	r2, [pc, #696]	@ (80066b0 <UART_SetConfig+0x5bc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	f040 8097 	bne.w	800652c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006402:	2b08      	cmp	r3, #8
 8006404:	d823      	bhi.n	800644e <UART_SetConfig+0x35a>
 8006406:	a201      	add	r2, pc, #4	@ (adr r2, 800640c <UART_SetConfig+0x318>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	08006431 	.word	0x08006431
 8006410:	0800644f 	.word	0x0800644f
 8006414:	08006439 	.word	0x08006439
 8006418:	0800644f 	.word	0x0800644f
 800641c:	0800643f 	.word	0x0800643f
 8006420:	0800644f 	.word	0x0800644f
 8006424:	0800644f 	.word	0x0800644f
 8006428:	0800644f 	.word	0x0800644f
 800642c:	08006447 	.word	0x08006447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006430:	f7fe fb38 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8006434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006436:	e010      	b.n	800645a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006438:	4b9e      	ldr	r3, [pc, #632]	@ (80066b4 <UART_SetConfig+0x5c0>)
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800643c:	e00d      	b.n	800645a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800643e:	f7fe fa99 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8006442:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006444:	e009      	b.n	800645a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800644a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800644c:	e005      	b.n	800645a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006458:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8130 	beq.w	80066c2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	4a94      	ldr	r2, [pc, #592]	@ (80066b8 <UART_SetConfig+0x5c4>)
 8006468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800646c:	461a      	mov	r2, r3
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	fbb3 f3f2 	udiv	r3, r3, r2
 8006474:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	4413      	add	r3, r2
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	429a      	cmp	r2, r3
 8006484:	d305      	bcc.n	8006492 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	429a      	cmp	r2, r3
 8006490:	d903      	bls.n	800649a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006498:	e113      	b.n	80066c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	2200      	movs	r2, #0
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	60fa      	str	r2, [r7, #12]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	4a84      	ldr	r2, [pc, #528]	@ (80066b8 <UART_SetConfig+0x5c4>)
 80064a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2200      	movs	r2, #0
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064bc:	f7f9 fef0 	bl	80002a0 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	020b      	lsls	r3, r1, #8
 80064d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064d6:	0202      	lsls	r2, r0, #8
 80064d8:	6979      	ldr	r1, [r7, #20]
 80064da:	6849      	ldr	r1, [r1, #4]
 80064dc:	0849      	lsrs	r1, r1, #1
 80064de:	2000      	movs	r0, #0
 80064e0:	460c      	mov	r4, r1
 80064e2:	4605      	mov	r5, r0
 80064e4:	eb12 0804 	adds.w	r8, r2, r4
 80064e8:	eb43 0905 	adc.w	r9, r3, r5
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	469a      	mov	sl, r3
 80064f4:	4693      	mov	fp, r2
 80064f6:	4652      	mov	r2, sl
 80064f8:	465b      	mov	r3, fp
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7f9 fecf 	bl	80002a0 <__aeabi_uldivmod>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4613      	mov	r3, r2
 8006508:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006510:	d308      	bcc.n	8006524 <UART_SetConfig+0x430>
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006518:	d204      	bcs.n	8006524 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	60da      	str	r2, [r3, #12]
 8006522:	e0ce      	b.n	80066c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800652a:	e0ca      	b.n	80066c2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006534:	d166      	bne.n	8006604 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006536:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800653a:	2b08      	cmp	r3, #8
 800653c:	d827      	bhi.n	800658e <UART_SetConfig+0x49a>
 800653e:	a201      	add	r2, pc, #4	@ (adr r2, 8006544 <UART_SetConfig+0x450>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006569 	.word	0x08006569
 8006548:	08006571 	.word	0x08006571
 800654c:	08006579 	.word	0x08006579
 8006550:	0800658f 	.word	0x0800658f
 8006554:	0800657f 	.word	0x0800657f
 8006558:	0800658f 	.word	0x0800658f
 800655c:	0800658f 	.word	0x0800658f
 8006560:	0800658f 	.word	0x0800658f
 8006564:	08006587 	.word	0x08006587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006568:	f7fe fa9c 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 800656c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800656e:	e014      	b.n	800659a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006570:	f7fe faae 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 8006574:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006576:	e010      	b.n	800659a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006578:	4b4e      	ldr	r3, [pc, #312]	@ (80066b4 <UART_SetConfig+0x5c0>)
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800657c:	e00d      	b.n	800659a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800657e:	f7fe f9f9 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8006582:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006584:	e009      	b.n	800659a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800658c:	e005      	b.n	800659a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8090 	beq.w	80066c2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a6:	4a44      	ldr	r2, [pc, #272]	@ (80066b8 <UART_SetConfig+0x5c4>)
 80065a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065b4:	005a      	lsls	r2, r3, #1
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	085b      	lsrs	r3, r3, #1
 80065bc:	441a      	add	r2, r3
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	2b0f      	cmp	r3, #15
 80065cc:	d916      	bls.n	80065fc <UART_SetConfig+0x508>
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d4:	d212      	bcs.n	80065fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f023 030f 	bic.w	r3, r3, #15
 80065de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	8bfb      	ldrh	r3, [r7, #30]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	8bfa      	ldrh	r2, [r7, #30]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	e062      	b.n	80066c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006602:	e05e      	b.n	80066c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006604:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006608:	2b08      	cmp	r3, #8
 800660a:	d828      	bhi.n	800665e <UART_SetConfig+0x56a>
 800660c:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <UART_SetConfig+0x520>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006639 	.word	0x08006639
 8006618:	08006641 	.word	0x08006641
 800661c:	08006649 	.word	0x08006649
 8006620:	0800665f 	.word	0x0800665f
 8006624:	0800664f 	.word	0x0800664f
 8006628:	0800665f 	.word	0x0800665f
 800662c:	0800665f 	.word	0x0800665f
 8006630:	0800665f 	.word	0x0800665f
 8006634:	08006657 	.word	0x08006657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006638:	f7fe fa34 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 800663c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800663e:	e014      	b.n	800666a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006640:	f7fe fa46 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 8006644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006646:	e010      	b.n	800666a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006648:	4b1a      	ldr	r3, [pc, #104]	@ (80066b4 <UART_SetConfig+0x5c0>)
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800664c:	e00d      	b.n	800666a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664e:	f7fe f991 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8006652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006654:	e009      	b.n	800666a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800665c:	e005      	b.n	800666a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006668:	bf00      	nop
    }

    if (pclk != 0U)
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d028      	beq.n	80066c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	4a10      	ldr	r2, [pc, #64]	@ (80066b8 <UART_SetConfig+0x5c4>)
 8006676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800667a:	461a      	mov	r2, r3
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	441a      	add	r2, r3
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006692:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	d910      	bls.n	80066bc <UART_SetConfig+0x5c8>
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a0:	d20c      	bcs.n	80066bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60da      	str	r2, [r3, #12]
 80066ac:	e009      	b.n	80066c2 <UART_SetConfig+0x5ce>
 80066ae:	bf00      	nop
 80066b0:	40008000 	.word	0x40008000
 80066b4:	00f42400 	.word	0x00f42400
 80066b8:	08007d9c 	.word	0x08007d9c
      }
      else
      {
        ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2200      	movs	r2, #0
 80066d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2200      	movs	r2, #0
 80066dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80066de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3730      	adds	r7, #48	@ 0x30
 80066e6:	46bd      	mov	sp, r7
 80066e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080066ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01a      	beq.n	8006802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ea:	d10a      	bne.n	8006802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
  }
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b098      	sub	sp, #96	@ 0x60
 8006834:	af02      	add	r7, sp, #8
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006840:	f7fc f9ec 	bl	8002c1c <HAL_GetTick>
 8006844:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b08      	cmp	r3, #8
 8006852:	d12f      	bne.n	80068b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006854:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800685c:	2200      	movs	r2, #0
 800685e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f88e 	bl	8006984 <UART_WaitOnFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d022      	beq.n	80068b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006876:	e853 3f00 	ldrex	r3, [r3]
 800687a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800687c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006882:	653b      	str	r3, [r7, #80]	@ 0x50
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800688c:	647b      	str	r3, [r7, #68]	@ 0x44
 800688e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006890:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006892:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006894:	e841 2300 	strex	r3, r2, [r1]
 8006898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800689a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1e6      	bne.n	800686e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e063      	b.n	800697c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d149      	bne.n	8006956 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ca:	2200      	movs	r2, #0
 80068cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f857 	bl	8006984 <UART_WaitOnFlagUntilTimeout>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d03c      	beq.n	8006956 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	623b      	str	r3, [r7, #32]
   return(result);
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80068fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	60fb      	str	r3, [r7, #12]
   return(result);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800692e:	61fa      	str	r2, [r7, #28]
 8006930:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	69b9      	ldr	r1, [r7, #24]
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	617b      	str	r3, [r7, #20]
   return(result);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e012      	b.n	800697c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3758      	adds	r7, #88	@ 0x58
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	4613      	mov	r3, r2
 8006992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006994:	e049      	b.n	8006a2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800699c:	d045      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699e:	f7fc f93d 	bl	8002c1c <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d302      	bcc.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e048      	b.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d031      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d110      	bne.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2208      	movs	r2, #8
 80069da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f838 	bl	8006a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2208      	movs	r2, #8
 80069e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e029      	b.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a04:	d111      	bne.n	8006a2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f81e 	bl	8006a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e00f      	b.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4013      	ands	r3, r2
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	bf0c      	ite	eq
 8006a3a:	2301      	moveq	r3, #1
 8006a3c:	2300      	movne	r3, #0
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d0a6      	beq.n	8006996 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b095      	sub	sp, #84	@ 0x54
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e6      	bne.n	8006a5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3308      	adds	r3, #8
 8006aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab8:	e841 2300 	strex	r3, r2, [r1]
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e3      	bne.n	8006a8c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d118      	bne.n	8006afe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f023 0310 	bic.w	r3, r3, #16
 8006ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6979      	ldr	r1, [r7, #20]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	613b      	str	r3, [r7, #16]
   return(result);
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e6      	bne.n	8006acc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b12:	bf00      	nop
 8006b14:	3754      	adds	r7, #84	@ 0x54
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e027      	b.n	8006b84 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2224      	movs	r2, #36	@ 0x24
 8006b40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0201 	bic.w	r2, r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e02d      	b.n	8006c04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2224      	movs	r2, #36	@ 0x24
 8006bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0201 	bic.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f84f 	bl	8006c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e02d      	b.n	8006c80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2224      	movs	r2, #36	@ 0x24
 8006c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0201 	bic.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f811 	bl	8006c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d108      	bne.n	8006caa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ca8:	e031      	b.n	8006d0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006caa:	2308      	movs	r3, #8
 8006cac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cae:	2308      	movs	r3, #8
 8006cb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	0e5b      	lsrs	r3, r3, #25
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	f003 0307 	and.w	r3, r3, #7
 8006cc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	0f5b      	lsrs	r3, r3, #29
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	7b3a      	ldrb	r2, [r7, #12]
 8006cd6:	4911      	ldr	r1, [pc, #68]	@ (8006d1c <UARTEx_SetNbDataToProcess+0x94>)
 8006cd8:	5c8a      	ldrb	r2, [r1, r2]
 8006cda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cde:	7b3a      	ldrb	r2, [r7, #12]
 8006ce0:	490f      	ldr	r1, [pc, #60]	@ (8006d20 <UARTEx_SetNbDataToProcess+0x98>)
 8006ce2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ce4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	7b7a      	ldrb	r2, [r7, #13]
 8006cf4:	4909      	ldr	r1, [pc, #36]	@ (8006d1c <UARTEx_SetNbDataToProcess+0x94>)
 8006cf6:	5c8a      	ldrb	r2, [r1, r2]
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cfc:	7b7a      	ldrb	r2, [r7, #13]
 8006cfe:	4908      	ldr	r1, [pc, #32]	@ (8006d20 <UARTEx_SetNbDataToProcess+0x98>)
 8006d00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d02:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d0e:	bf00      	nop
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	08007db4 	.word	0x08007db4
 8006d20:	08007dbc 	.word	0x08007dbc

08006d24 <free>:
 8006d24:	4b02      	ldr	r3, [pc, #8]	@ (8006d30 <free+0xc>)
 8006d26:	4601      	mov	r1, r0
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	f000 b923 	b.w	8006f74 <_free_r>
 8006d2e:	bf00      	nop
 8006d30:	20000010 	.word	0x20000010

08006d34 <sbrk_aligned>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4e0f      	ldr	r6, [pc, #60]	@ (8006d74 <sbrk_aligned+0x40>)
 8006d38:	460c      	mov	r4, r1
 8006d3a:	6831      	ldr	r1, [r6, #0]
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	b911      	cbnz	r1, 8006d46 <sbrk_aligned+0x12>
 8006d40:	f000 f8ce 	bl	8006ee0 <_sbrk_r>
 8006d44:	6030      	str	r0, [r6, #0]
 8006d46:	4621      	mov	r1, r4
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f000 f8c9 	bl	8006ee0 <_sbrk_r>
 8006d4e:	1c43      	adds	r3, r0, #1
 8006d50:	d103      	bne.n	8006d5a <sbrk_aligned+0x26>
 8006d52:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006d56:	4620      	mov	r0, r4
 8006d58:	bd70      	pop	{r4, r5, r6, pc}
 8006d5a:	1cc4      	adds	r4, r0, #3
 8006d5c:	f024 0403 	bic.w	r4, r4, #3
 8006d60:	42a0      	cmp	r0, r4
 8006d62:	d0f8      	beq.n	8006d56 <sbrk_aligned+0x22>
 8006d64:	1a21      	subs	r1, r4, r0
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 f8ba 	bl	8006ee0 <_sbrk_r>
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d1f2      	bne.n	8006d56 <sbrk_aligned+0x22>
 8006d70:	e7ef      	b.n	8006d52 <sbrk_aligned+0x1e>
 8006d72:	bf00      	nop
 8006d74:	200008fc 	.word	0x200008fc

08006d78 <_malloc_r>:
 8006d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d7c:	1ccd      	adds	r5, r1, #3
 8006d7e:	f025 0503 	bic.w	r5, r5, #3
 8006d82:	3508      	adds	r5, #8
 8006d84:	2d0c      	cmp	r5, #12
 8006d86:	bf38      	it	cc
 8006d88:	250c      	movcc	r5, #12
 8006d8a:	2d00      	cmp	r5, #0
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	db01      	blt.n	8006d94 <_malloc_r+0x1c>
 8006d90:	42a9      	cmp	r1, r5
 8006d92:	d904      	bls.n	8006d9e <_malloc_r+0x26>
 8006d94:	230c      	movs	r3, #12
 8006d96:	6033      	str	r3, [r6, #0]
 8006d98:	2000      	movs	r0, #0
 8006d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e74 <_malloc_r+0xfc>
 8006da2:	f000 f869 	bl	8006e78 <__malloc_lock>
 8006da6:	f8d8 3000 	ldr.w	r3, [r8]
 8006daa:	461c      	mov	r4, r3
 8006dac:	bb44      	cbnz	r4, 8006e00 <_malloc_r+0x88>
 8006dae:	4629      	mov	r1, r5
 8006db0:	4630      	mov	r0, r6
 8006db2:	f7ff ffbf 	bl	8006d34 <sbrk_aligned>
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	4604      	mov	r4, r0
 8006dba:	d158      	bne.n	8006e6e <_malloc_r+0xf6>
 8006dbc:	f8d8 4000 	ldr.w	r4, [r8]
 8006dc0:	4627      	mov	r7, r4
 8006dc2:	2f00      	cmp	r7, #0
 8006dc4:	d143      	bne.n	8006e4e <_malloc_r+0xd6>
 8006dc6:	2c00      	cmp	r4, #0
 8006dc8:	d04b      	beq.n	8006e62 <_malloc_r+0xea>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	4639      	mov	r1, r7
 8006dce:	4630      	mov	r0, r6
 8006dd0:	eb04 0903 	add.w	r9, r4, r3
 8006dd4:	f000 f884 	bl	8006ee0 <_sbrk_r>
 8006dd8:	4581      	cmp	r9, r0
 8006dda:	d142      	bne.n	8006e62 <_malloc_r+0xea>
 8006ddc:	6821      	ldr	r1, [r4, #0]
 8006dde:	1a6d      	subs	r5, r5, r1
 8006de0:	4629      	mov	r1, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7ff ffa6 	bl	8006d34 <sbrk_aligned>
 8006de8:	3001      	adds	r0, #1
 8006dea:	d03a      	beq.n	8006e62 <_malloc_r+0xea>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	442b      	add	r3, r5
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	f8d8 3000 	ldr.w	r3, [r8]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	bb62      	cbnz	r2, 8006e54 <_malloc_r+0xdc>
 8006dfa:	f8c8 7000 	str.w	r7, [r8]
 8006dfe:	e00f      	b.n	8006e20 <_malloc_r+0xa8>
 8006e00:	6822      	ldr	r2, [r4, #0]
 8006e02:	1b52      	subs	r2, r2, r5
 8006e04:	d420      	bmi.n	8006e48 <_malloc_r+0xd0>
 8006e06:	2a0b      	cmp	r2, #11
 8006e08:	d917      	bls.n	8006e3a <_malloc_r+0xc2>
 8006e0a:	1961      	adds	r1, r4, r5
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	6025      	str	r5, [r4, #0]
 8006e10:	bf18      	it	ne
 8006e12:	6059      	strne	r1, [r3, #4]
 8006e14:	6863      	ldr	r3, [r4, #4]
 8006e16:	bf08      	it	eq
 8006e18:	f8c8 1000 	streq.w	r1, [r8]
 8006e1c:	5162      	str	r2, [r4, r5]
 8006e1e:	604b      	str	r3, [r1, #4]
 8006e20:	4630      	mov	r0, r6
 8006e22:	f000 f82f 	bl	8006e84 <__malloc_unlock>
 8006e26:	f104 000b 	add.w	r0, r4, #11
 8006e2a:	1d23      	adds	r3, r4, #4
 8006e2c:	f020 0007 	bic.w	r0, r0, #7
 8006e30:	1ac2      	subs	r2, r0, r3
 8006e32:	bf1c      	itt	ne
 8006e34:	1a1b      	subne	r3, r3, r0
 8006e36:	50a3      	strne	r3, [r4, r2]
 8006e38:	e7af      	b.n	8006d9a <_malloc_r+0x22>
 8006e3a:	6862      	ldr	r2, [r4, #4]
 8006e3c:	42a3      	cmp	r3, r4
 8006e3e:	bf0c      	ite	eq
 8006e40:	f8c8 2000 	streq.w	r2, [r8]
 8006e44:	605a      	strne	r2, [r3, #4]
 8006e46:	e7eb      	b.n	8006e20 <_malloc_r+0xa8>
 8006e48:	4623      	mov	r3, r4
 8006e4a:	6864      	ldr	r4, [r4, #4]
 8006e4c:	e7ae      	b.n	8006dac <_malloc_r+0x34>
 8006e4e:	463c      	mov	r4, r7
 8006e50:	687f      	ldr	r7, [r7, #4]
 8006e52:	e7b6      	b.n	8006dc2 <_malloc_r+0x4a>
 8006e54:	461a      	mov	r2, r3
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	d1fb      	bne.n	8006e54 <_malloc_r+0xdc>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	6053      	str	r3, [r2, #4]
 8006e60:	e7de      	b.n	8006e20 <_malloc_r+0xa8>
 8006e62:	230c      	movs	r3, #12
 8006e64:	6033      	str	r3, [r6, #0]
 8006e66:	4630      	mov	r0, r6
 8006e68:	f000 f80c 	bl	8006e84 <__malloc_unlock>
 8006e6c:	e794      	b.n	8006d98 <_malloc_r+0x20>
 8006e6e:	6005      	str	r5, [r0, #0]
 8006e70:	e7d6      	b.n	8006e20 <_malloc_r+0xa8>
 8006e72:	bf00      	nop
 8006e74:	20000900 	.word	0x20000900

08006e78 <__malloc_lock>:
 8006e78:	4801      	ldr	r0, [pc, #4]	@ (8006e80 <__malloc_lock+0x8>)
 8006e7a:	f000 b86b 	b.w	8006f54 <__retarget_lock_acquire_recursive>
 8006e7e:	bf00      	nop
 8006e80:	20000a3c 	.word	0x20000a3c

08006e84 <__malloc_unlock>:
 8006e84:	4801      	ldr	r0, [pc, #4]	@ (8006e8c <__malloc_unlock+0x8>)
 8006e86:	f000 b866 	b.w	8006f56 <__retarget_lock_release_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	20000a3c 	.word	0x20000a3c

08006e90 <siprintf>:
 8006e90:	b40e      	push	{r1, r2, r3}
 8006e92:	b500      	push	{lr}
 8006e94:	b09c      	sub	sp, #112	@ 0x70
 8006e96:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e98:	9002      	str	r0, [sp, #8]
 8006e9a:	9006      	str	r0, [sp, #24]
 8006e9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ea0:	4809      	ldr	r0, [pc, #36]	@ (8006ec8 <siprintf+0x38>)
 8006ea2:	9107      	str	r1, [sp, #28]
 8006ea4:	9104      	str	r1, [sp, #16]
 8006ea6:	4909      	ldr	r1, [pc, #36]	@ (8006ecc <siprintf+0x3c>)
 8006ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eac:	9105      	str	r1, [sp, #20]
 8006eae:	6800      	ldr	r0, [r0, #0]
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	a902      	add	r1, sp, #8
 8006eb4:	f000 f904 	bl	80070c0 <_svfiprintf_r>
 8006eb8:	9b02      	ldr	r3, [sp, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	b01c      	add	sp, #112	@ 0x70
 8006ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec4:	b003      	add	sp, #12
 8006ec6:	4770      	bx	lr
 8006ec8:	20000010 	.word	0x20000010
 8006ecc:	ffff0208 	.word	0xffff0208

08006ed0 <memset>:
 8006ed0:	4402      	add	r2, r0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d100      	bne.n	8006eda <memset+0xa>
 8006ed8:	4770      	bx	lr
 8006eda:	f803 1b01 	strb.w	r1, [r3], #1
 8006ede:	e7f9      	b.n	8006ed4 <memset+0x4>

08006ee0 <_sbrk_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d06      	ldr	r5, [pc, #24]	@ (8006efc <_sbrk_r+0x1c>)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	f7fb fbfc 	bl	80026e8 <_sbrk>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_sbrk_r+0x1a>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_sbrk_r+0x1a>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	20000a40 	.word	0x20000a40

08006f00 <__errno>:
 8006f00:	4b01      	ldr	r3, [pc, #4]	@ (8006f08 <__errno+0x8>)
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	20000010 	.word	0x20000010

08006f0c <__libc_init_array>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006f44 <__libc_init_array+0x38>)
 8006f10:	4c0d      	ldr	r4, [pc, #52]	@ (8006f48 <__libc_init_array+0x3c>)
 8006f12:	1b64      	subs	r4, r4, r5
 8006f14:	10a4      	asrs	r4, r4, #2
 8006f16:	2600      	movs	r6, #0
 8006f18:	42a6      	cmp	r6, r4
 8006f1a:	d109      	bne.n	8006f30 <__libc_init_array+0x24>
 8006f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f4c <__libc_init_array+0x40>)
 8006f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006f50 <__libc_init_array+0x44>)
 8006f20:	f000 fba8 	bl	8007674 <_init>
 8006f24:	1b64      	subs	r4, r4, r5
 8006f26:	10a4      	asrs	r4, r4, #2
 8006f28:	2600      	movs	r6, #0
 8006f2a:	42a6      	cmp	r6, r4
 8006f2c:	d105      	bne.n	8006f3a <__libc_init_array+0x2e>
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
 8006f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f34:	4798      	blx	r3
 8006f36:	3601      	adds	r6, #1
 8006f38:	e7ee      	b.n	8006f18 <__libc_init_array+0xc>
 8006f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3e:	4798      	blx	r3
 8006f40:	3601      	adds	r6, #1
 8006f42:	e7f2      	b.n	8006f2a <__libc_init_array+0x1e>
 8006f44:	08007e00 	.word	0x08007e00
 8006f48:	08007e00 	.word	0x08007e00
 8006f4c:	08007e00 	.word	0x08007e00
 8006f50:	08007e04 	.word	0x08007e04

08006f54 <__retarget_lock_acquire_recursive>:
 8006f54:	4770      	bx	lr

08006f56 <__retarget_lock_release_recursive>:
 8006f56:	4770      	bx	lr

08006f58 <memcpy>:
 8006f58:	440a      	add	r2, r1
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006f60:	d100      	bne.n	8006f64 <memcpy+0xc>
 8006f62:	4770      	bx	lr
 8006f64:	b510      	push	{r4, lr}
 8006f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	d1f9      	bne.n	8006f66 <memcpy+0xe>
 8006f72:	bd10      	pop	{r4, pc}

08006f74 <_free_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4605      	mov	r5, r0
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	d041      	beq.n	8007000 <_free_r+0x8c>
 8006f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f80:	1f0c      	subs	r4, r1, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bfb8      	it	lt
 8006f86:	18e4      	addlt	r4, r4, r3
 8006f88:	f7ff ff76 	bl	8006e78 <__malloc_lock>
 8006f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007004 <_free_r+0x90>)
 8006f8e:	6813      	ldr	r3, [r2, #0]
 8006f90:	b933      	cbnz	r3, 8006fa0 <_free_r+0x2c>
 8006f92:	6063      	str	r3, [r4, #4]
 8006f94:	6014      	str	r4, [r2, #0]
 8006f96:	4628      	mov	r0, r5
 8006f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f9c:	f7ff bf72 	b.w	8006e84 <__malloc_unlock>
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	d908      	bls.n	8006fb6 <_free_r+0x42>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	1821      	adds	r1, r4, r0
 8006fa8:	428b      	cmp	r3, r1
 8006faa:	bf01      	itttt	eq
 8006fac:	6819      	ldreq	r1, [r3, #0]
 8006fae:	685b      	ldreq	r3, [r3, #4]
 8006fb0:	1809      	addeq	r1, r1, r0
 8006fb2:	6021      	streq	r1, [r4, #0]
 8006fb4:	e7ed      	b.n	8006f92 <_free_r+0x1e>
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	b10b      	cbz	r3, 8006fc0 <_free_r+0x4c>
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	d9fa      	bls.n	8006fb6 <_free_r+0x42>
 8006fc0:	6811      	ldr	r1, [r2, #0]
 8006fc2:	1850      	adds	r0, r2, r1
 8006fc4:	42a0      	cmp	r0, r4
 8006fc6:	d10b      	bne.n	8006fe0 <_free_r+0x6c>
 8006fc8:	6820      	ldr	r0, [r4, #0]
 8006fca:	4401      	add	r1, r0
 8006fcc:	1850      	adds	r0, r2, r1
 8006fce:	4283      	cmp	r3, r0
 8006fd0:	6011      	str	r1, [r2, #0]
 8006fd2:	d1e0      	bne.n	8006f96 <_free_r+0x22>
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	6053      	str	r3, [r2, #4]
 8006fda:	4408      	add	r0, r1
 8006fdc:	6010      	str	r0, [r2, #0]
 8006fde:	e7da      	b.n	8006f96 <_free_r+0x22>
 8006fe0:	d902      	bls.n	8006fe8 <_free_r+0x74>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	e7d6      	b.n	8006f96 <_free_r+0x22>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	1821      	adds	r1, r4, r0
 8006fec:	428b      	cmp	r3, r1
 8006fee:	bf04      	itt	eq
 8006ff0:	6819      	ldreq	r1, [r3, #0]
 8006ff2:	685b      	ldreq	r3, [r3, #4]
 8006ff4:	6063      	str	r3, [r4, #4]
 8006ff6:	bf04      	itt	eq
 8006ff8:	1809      	addeq	r1, r1, r0
 8006ffa:	6021      	streq	r1, [r4, #0]
 8006ffc:	6054      	str	r4, [r2, #4]
 8006ffe:	e7ca      	b.n	8006f96 <_free_r+0x22>
 8007000:	bd38      	pop	{r3, r4, r5, pc}
 8007002:	bf00      	nop
 8007004:	20000900 	.word	0x20000900

08007008 <__ssputs_r>:
 8007008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	688e      	ldr	r6, [r1, #8]
 800700e:	461f      	mov	r7, r3
 8007010:	42be      	cmp	r6, r7
 8007012:	680b      	ldr	r3, [r1, #0]
 8007014:	4682      	mov	sl, r0
 8007016:	460c      	mov	r4, r1
 8007018:	4690      	mov	r8, r2
 800701a:	d82d      	bhi.n	8007078 <__ssputs_r+0x70>
 800701c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007020:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007024:	d026      	beq.n	8007074 <__ssputs_r+0x6c>
 8007026:	6965      	ldr	r5, [r4, #20]
 8007028:	6909      	ldr	r1, [r1, #16]
 800702a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800702e:	eba3 0901 	sub.w	r9, r3, r1
 8007032:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007036:	1c7b      	adds	r3, r7, #1
 8007038:	444b      	add	r3, r9
 800703a:	106d      	asrs	r5, r5, #1
 800703c:	429d      	cmp	r5, r3
 800703e:	bf38      	it	cc
 8007040:	461d      	movcc	r5, r3
 8007042:	0553      	lsls	r3, r2, #21
 8007044:	d527      	bpl.n	8007096 <__ssputs_r+0x8e>
 8007046:	4629      	mov	r1, r5
 8007048:	f7ff fe96 	bl	8006d78 <_malloc_r>
 800704c:	4606      	mov	r6, r0
 800704e:	b360      	cbz	r0, 80070aa <__ssputs_r+0xa2>
 8007050:	6921      	ldr	r1, [r4, #16]
 8007052:	464a      	mov	r2, r9
 8007054:	f7ff ff80 	bl	8006f58 <memcpy>
 8007058:	89a3      	ldrh	r3, [r4, #12]
 800705a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800705e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	6126      	str	r6, [r4, #16]
 8007066:	6165      	str	r5, [r4, #20]
 8007068:	444e      	add	r6, r9
 800706a:	eba5 0509 	sub.w	r5, r5, r9
 800706e:	6026      	str	r6, [r4, #0]
 8007070:	60a5      	str	r5, [r4, #8]
 8007072:	463e      	mov	r6, r7
 8007074:	42be      	cmp	r6, r7
 8007076:	d900      	bls.n	800707a <__ssputs_r+0x72>
 8007078:	463e      	mov	r6, r7
 800707a:	6820      	ldr	r0, [r4, #0]
 800707c:	4632      	mov	r2, r6
 800707e:	4641      	mov	r1, r8
 8007080:	f000 fad6 	bl	8007630 <memmove>
 8007084:	68a3      	ldr	r3, [r4, #8]
 8007086:	1b9b      	subs	r3, r3, r6
 8007088:	60a3      	str	r3, [r4, #8]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	4433      	add	r3, r6
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	2000      	movs	r0, #0
 8007092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007096:	462a      	mov	r2, r5
 8007098:	f000 fa9c 	bl	80075d4 <_realloc_r>
 800709c:	4606      	mov	r6, r0
 800709e:	2800      	cmp	r0, #0
 80070a0:	d1e0      	bne.n	8007064 <__ssputs_r+0x5c>
 80070a2:	6921      	ldr	r1, [r4, #16]
 80070a4:	4650      	mov	r0, sl
 80070a6:	f7ff ff65 	bl	8006f74 <_free_r>
 80070aa:	230c      	movs	r3, #12
 80070ac:	f8ca 3000 	str.w	r3, [sl]
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070b6:	81a3      	strh	r3, [r4, #12]
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070bc:	e7e9      	b.n	8007092 <__ssputs_r+0x8a>
	...

080070c0 <_svfiprintf_r>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	4698      	mov	r8, r3
 80070c6:	898b      	ldrh	r3, [r1, #12]
 80070c8:	061b      	lsls	r3, r3, #24
 80070ca:	b09d      	sub	sp, #116	@ 0x74
 80070cc:	4607      	mov	r7, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	4614      	mov	r4, r2
 80070d2:	d510      	bpl.n	80070f6 <_svfiprintf_r+0x36>
 80070d4:	690b      	ldr	r3, [r1, #16]
 80070d6:	b973      	cbnz	r3, 80070f6 <_svfiprintf_r+0x36>
 80070d8:	2140      	movs	r1, #64	@ 0x40
 80070da:	f7ff fe4d 	bl	8006d78 <_malloc_r>
 80070de:	6028      	str	r0, [r5, #0]
 80070e0:	6128      	str	r0, [r5, #16]
 80070e2:	b930      	cbnz	r0, 80070f2 <_svfiprintf_r+0x32>
 80070e4:	230c      	movs	r3, #12
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070ec:	b01d      	add	sp, #116	@ 0x74
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	2340      	movs	r3, #64	@ 0x40
 80070f4:	616b      	str	r3, [r5, #20]
 80070f6:	2300      	movs	r3, #0
 80070f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070fa:	2320      	movs	r3, #32
 80070fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007100:	f8cd 800c 	str.w	r8, [sp, #12]
 8007104:	2330      	movs	r3, #48	@ 0x30
 8007106:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80072a4 <_svfiprintf_r+0x1e4>
 800710a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800710e:	f04f 0901 	mov.w	r9, #1
 8007112:	4623      	mov	r3, r4
 8007114:	469a      	mov	sl, r3
 8007116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800711a:	b10a      	cbz	r2, 8007120 <_svfiprintf_r+0x60>
 800711c:	2a25      	cmp	r2, #37	@ 0x25
 800711e:	d1f9      	bne.n	8007114 <_svfiprintf_r+0x54>
 8007120:	ebba 0b04 	subs.w	fp, sl, r4
 8007124:	d00b      	beq.n	800713e <_svfiprintf_r+0x7e>
 8007126:	465b      	mov	r3, fp
 8007128:	4622      	mov	r2, r4
 800712a:	4629      	mov	r1, r5
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff ff6b 	bl	8007008 <__ssputs_r>
 8007132:	3001      	adds	r0, #1
 8007134:	f000 80a7 	beq.w	8007286 <_svfiprintf_r+0x1c6>
 8007138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800713a:	445a      	add	r2, fp
 800713c:	9209      	str	r2, [sp, #36]	@ 0x24
 800713e:	f89a 3000 	ldrb.w	r3, [sl]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 809f 	beq.w	8007286 <_svfiprintf_r+0x1c6>
 8007148:	2300      	movs	r3, #0
 800714a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800714e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007152:	f10a 0a01 	add.w	sl, sl, #1
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	9307      	str	r3, [sp, #28]
 800715a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800715e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007160:	4654      	mov	r4, sl
 8007162:	2205      	movs	r2, #5
 8007164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007168:	484e      	ldr	r0, [pc, #312]	@ (80072a4 <_svfiprintf_r+0x1e4>)
 800716a:	f7f9 f849 	bl	8000200 <memchr>
 800716e:	9a04      	ldr	r2, [sp, #16]
 8007170:	b9d8      	cbnz	r0, 80071aa <_svfiprintf_r+0xea>
 8007172:	06d0      	lsls	r0, r2, #27
 8007174:	bf44      	itt	mi
 8007176:	2320      	movmi	r3, #32
 8007178:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800717c:	0711      	lsls	r1, r2, #28
 800717e:	bf44      	itt	mi
 8007180:	232b      	movmi	r3, #43	@ 0x2b
 8007182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007186:	f89a 3000 	ldrb.w	r3, [sl]
 800718a:	2b2a      	cmp	r3, #42	@ 0x2a
 800718c:	d015      	beq.n	80071ba <_svfiprintf_r+0xfa>
 800718e:	9a07      	ldr	r2, [sp, #28]
 8007190:	4654      	mov	r4, sl
 8007192:	2000      	movs	r0, #0
 8007194:	f04f 0c0a 	mov.w	ip, #10
 8007198:	4621      	mov	r1, r4
 800719a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719e:	3b30      	subs	r3, #48	@ 0x30
 80071a0:	2b09      	cmp	r3, #9
 80071a2:	d94b      	bls.n	800723c <_svfiprintf_r+0x17c>
 80071a4:	b1b0      	cbz	r0, 80071d4 <_svfiprintf_r+0x114>
 80071a6:	9207      	str	r2, [sp, #28]
 80071a8:	e014      	b.n	80071d4 <_svfiprintf_r+0x114>
 80071aa:	eba0 0308 	sub.w	r3, r0, r8
 80071ae:	fa09 f303 	lsl.w	r3, r9, r3
 80071b2:	4313      	orrs	r3, r2
 80071b4:	9304      	str	r3, [sp, #16]
 80071b6:	46a2      	mov	sl, r4
 80071b8:	e7d2      	b.n	8007160 <_svfiprintf_r+0xa0>
 80071ba:	9b03      	ldr	r3, [sp, #12]
 80071bc:	1d19      	adds	r1, r3, #4
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	9103      	str	r1, [sp, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bfbb      	ittet	lt
 80071c6:	425b      	neglt	r3, r3
 80071c8:	f042 0202 	orrlt.w	r2, r2, #2
 80071cc:	9307      	strge	r3, [sp, #28]
 80071ce:	9307      	strlt	r3, [sp, #28]
 80071d0:	bfb8      	it	lt
 80071d2:	9204      	strlt	r2, [sp, #16]
 80071d4:	7823      	ldrb	r3, [r4, #0]
 80071d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80071d8:	d10a      	bne.n	80071f0 <_svfiprintf_r+0x130>
 80071da:	7863      	ldrb	r3, [r4, #1]
 80071dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80071de:	d132      	bne.n	8007246 <_svfiprintf_r+0x186>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	9203      	str	r2, [sp, #12]
 80071e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071ec:	3402      	adds	r4, #2
 80071ee:	9305      	str	r3, [sp, #20]
 80071f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80072b4 <_svfiprintf_r+0x1f4>
 80071f4:	7821      	ldrb	r1, [r4, #0]
 80071f6:	2203      	movs	r2, #3
 80071f8:	4650      	mov	r0, sl
 80071fa:	f7f9 f801 	bl	8000200 <memchr>
 80071fe:	b138      	cbz	r0, 8007210 <_svfiprintf_r+0x150>
 8007200:	9b04      	ldr	r3, [sp, #16]
 8007202:	eba0 000a 	sub.w	r0, r0, sl
 8007206:	2240      	movs	r2, #64	@ 0x40
 8007208:	4082      	lsls	r2, r0
 800720a:	4313      	orrs	r3, r2
 800720c:	3401      	adds	r4, #1
 800720e:	9304      	str	r3, [sp, #16]
 8007210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007214:	4824      	ldr	r0, [pc, #144]	@ (80072a8 <_svfiprintf_r+0x1e8>)
 8007216:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800721a:	2206      	movs	r2, #6
 800721c:	f7f8 fff0 	bl	8000200 <memchr>
 8007220:	2800      	cmp	r0, #0
 8007222:	d036      	beq.n	8007292 <_svfiprintf_r+0x1d2>
 8007224:	4b21      	ldr	r3, [pc, #132]	@ (80072ac <_svfiprintf_r+0x1ec>)
 8007226:	bb1b      	cbnz	r3, 8007270 <_svfiprintf_r+0x1b0>
 8007228:	9b03      	ldr	r3, [sp, #12]
 800722a:	3307      	adds	r3, #7
 800722c:	f023 0307 	bic.w	r3, r3, #7
 8007230:	3308      	adds	r3, #8
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007236:	4433      	add	r3, r6
 8007238:	9309      	str	r3, [sp, #36]	@ 0x24
 800723a:	e76a      	b.n	8007112 <_svfiprintf_r+0x52>
 800723c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007240:	460c      	mov	r4, r1
 8007242:	2001      	movs	r0, #1
 8007244:	e7a8      	b.n	8007198 <_svfiprintf_r+0xd8>
 8007246:	2300      	movs	r3, #0
 8007248:	3401      	adds	r4, #1
 800724a:	9305      	str	r3, [sp, #20]
 800724c:	4619      	mov	r1, r3
 800724e:	f04f 0c0a 	mov.w	ip, #10
 8007252:	4620      	mov	r0, r4
 8007254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007258:	3a30      	subs	r2, #48	@ 0x30
 800725a:	2a09      	cmp	r2, #9
 800725c:	d903      	bls.n	8007266 <_svfiprintf_r+0x1a6>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0c6      	beq.n	80071f0 <_svfiprintf_r+0x130>
 8007262:	9105      	str	r1, [sp, #20]
 8007264:	e7c4      	b.n	80071f0 <_svfiprintf_r+0x130>
 8007266:	fb0c 2101 	mla	r1, ip, r1, r2
 800726a:	4604      	mov	r4, r0
 800726c:	2301      	movs	r3, #1
 800726e:	e7f0      	b.n	8007252 <_svfiprintf_r+0x192>
 8007270:	ab03      	add	r3, sp, #12
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	462a      	mov	r2, r5
 8007276:	4b0e      	ldr	r3, [pc, #56]	@ (80072b0 <_svfiprintf_r+0x1f0>)
 8007278:	a904      	add	r1, sp, #16
 800727a:	4638      	mov	r0, r7
 800727c:	f3af 8000 	nop.w
 8007280:	1c42      	adds	r2, r0, #1
 8007282:	4606      	mov	r6, r0
 8007284:	d1d6      	bne.n	8007234 <_svfiprintf_r+0x174>
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	065b      	lsls	r3, r3, #25
 800728a:	f53f af2d 	bmi.w	80070e8 <_svfiprintf_r+0x28>
 800728e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007290:	e72c      	b.n	80070ec <_svfiprintf_r+0x2c>
 8007292:	ab03      	add	r3, sp, #12
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	462a      	mov	r2, r5
 8007298:	4b05      	ldr	r3, [pc, #20]	@ (80072b0 <_svfiprintf_r+0x1f0>)
 800729a:	a904      	add	r1, sp, #16
 800729c:	4638      	mov	r0, r7
 800729e:	f000 f879 	bl	8007394 <_printf_i>
 80072a2:	e7ed      	b.n	8007280 <_svfiprintf_r+0x1c0>
 80072a4:	08007dc4 	.word	0x08007dc4
 80072a8:	08007dce 	.word	0x08007dce
 80072ac:	00000000 	.word	0x00000000
 80072b0:	08007009 	.word	0x08007009
 80072b4:	08007dca 	.word	0x08007dca

080072b8 <_printf_common>:
 80072b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072bc:	4616      	mov	r6, r2
 80072be:	4698      	mov	r8, r3
 80072c0:	688a      	ldr	r2, [r1, #8]
 80072c2:	690b      	ldr	r3, [r1, #16]
 80072c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072c8:	4293      	cmp	r3, r2
 80072ca:	bfb8      	it	lt
 80072cc:	4613      	movlt	r3, r2
 80072ce:	6033      	str	r3, [r6, #0]
 80072d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072d4:	4607      	mov	r7, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	b10a      	cbz	r2, 80072de <_printf_common+0x26>
 80072da:	3301      	adds	r3, #1
 80072dc:	6033      	str	r3, [r6, #0]
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	0699      	lsls	r1, r3, #26
 80072e2:	bf42      	ittt	mi
 80072e4:	6833      	ldrmi	r3, [r6, #0]
 80072e6:	3302      	addmi	r3, #2
 80072e8:	6033      	strmi	r3, [r6, #0]
 80072ea:	6825      	ldr	r5, [r4, #0]
 80072ec:	f015 0506 	ands.w	r5, r5, #6
 80072f0:	d106      	bne.n	8007300 <_printf_common+0x48>
 80072f2:	f104 0a19 	add.w	sl, r4, #25
 80072f6:	68e3      	ldr	r3, [r4, #12]
 80072f8:	6832      	ldr	r2, [r6, #0]
 80072fa:	1a9b      	subs	r3, r3, r2
 80072fc:	42ab      	cmp	r3, r5
 80072fe:	dc26      	bgt.n	800734e <_printf_common+0x96>
 8007300:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	3b00      	subs	r3, #0
 8007308:	bf18      	it	ne
 800730a:	2301      	movne	r3, #1
 800730c:	0692      	lsls	r2, r2, #26
 800730e:	d42b      	bmi.n	8007368 <_printf_common+0xb0>
 8007310:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007314:	4641      	mov	r1, r8
 8007316:	4638      	mov	r0, r7
 8007318:	47c8      	blx	r9
 800731a:	3001      	adds	r0, #1
 800731c:	d01e      	beq.n	800735c <_printf_common+0xa4>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	6922      	ldr	r2, [r4, #16]
 8007322:	f003 0306 	and.w	r3, r3, #6
 8007326:	2b04      	cmp	r3, #4
 8007328:	bf02      	ittt	eq
 800732a:	68e5      	ldreq	r5, [r4, #12]
 800732c:	6833      	ldreq	r3, [r6, #0]
 800732e:	1aed      	subeq	r5, r5, r3
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	bf0c      	ite	eq
 8007334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007338:	2500      	movne	r5, #0
 800733a:	4293      	cmp	r3, r2
 800733c:	bfc4      	itt	gt
 800733e:	1a9b      	subgt	r3, r3, r2
 8007340:	18ed      	addgt	r5, r5, r3
 8007342:	2600      	movs	r6, #0
 8007344:	341a      	adds	r4, #26
 8007346:	42b5      	cmp	r5, r6
 8007348:	d11a      	bne.n	8007380 <_printf_common+0xc8>
 800734a:	2000      	movs	r0, #0
 800734c:	e008      	b.n	8007360 <_printf_common+0xa8>
 800734e:	2301      	movs	r3, #1
 8007350:	4652      	mov	r2, sl
 8007352:	4641      	mov	r1, r8
 8007354:	4638      	mov	r0, r7
 8007356:	47c8      	blx	r9
 8007358:	3001      	adds	r0, #1
 800735a:	d103      	bne.n	8007364 <_printf_common+0xac>
 800735c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007364:	3501      	adds	r5, #1
 8007366:	e7c6      	b.n	80072f6 <_printf_common+0x3e>
 8007368:	18e1      	adds	r1, r4, r3
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	2030      	movs	r0, #48	@ 0x30
 800736e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007372:	4422      	add	r2, r4
 8007374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800737c:	3302      	adds	r3, #2
 800737e:	e7c7      	b.n	8007310 <_printf_common+0x58>
 8007380:	2301      	movs	r3, #1
 8007382:	4622      	mov	r2, r4
 8007384:	4641      	mov	r1, r8
 8007386:	4638      	mov	r0, r7
 8007388:	47c8      	blx	r9
 800738a:	3001      	adds	r0, #1
 800738c:	d0e6      	beq.n	800735c <_printf_common+0xa4>
 800738e:	3601      	adds	r6, #1
 8007390:	e7d9      	b.n	8007346 <_printf_common+0x8e>
	...

08007394 <_printf_i>:
 8007394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	7e0f      	ldrb	r7, [r1, #24]
 800739a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800739c:	2f78      	cmp	r7, #120	@ 0x78
 800739e:	4691      	mov	r9, r2
 80073a0:	4680      	mov	r8, r0
 80073a2:	460c      	mov	r4, r1
 80073a4:	469a      	mov	sl, r3
 80073a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073aa:	d807      	bhi.n	80073bc <_printf_i+0x28>
 80073ac:	2f62      	cmp	r7, #98	@ 0x62
 80073ae:	d80a      	bhi.n	80073c6 <_printf_i+0x32>
 80073b0:	2f00      	cmp	r7, #0
 80073b2:	f000 80d2 	beq.w	800755a <_printf_i+0x1c6>
 80073b6:	2f58      	cmp	r7, #88	@ 0x58
 80073b8:	f000 80b9 	beq.w	800752e <_printf_i+0x19a>
 80073bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073c4:	e03a      	b.n	800743c <_printf_i+0xa8>
 80073c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073ca:	2b15      	cmp	r3, #21
 80073cc:	d8f6      	bhi.n	80073bc <_printf_i+0x28>
 80073ce:	a101      	add	r1, pc, #4	@ (adr r1, 80073d4 <_printf_i+0x40>)
 80073d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073d4:	0800742d 	.word	0x0800742d
 80073d8:	08007441 	.word	0x08007441
 80073dc:	080073bd 	.word	0x080073bd
 80073e0:	080073bd 	.word	0x080073bd
 80073e4:	080073bd 	.word	0x080073bd
 80073e8:	080073bd 	.word	0x080073bd
 80073ec:	08007441 	.word	0x08007441
 80073f0:	080073bd 	.word	0x080073bd
 80073f4:	080073bd 	.word	0x080073bd
 80073f8:	080073bd 	.word	0x080073bd
 80073fc:	080073bd 	.word	0x080073bd
 8007400:	08007541 	.word	0x08007541
 8007404:	0800746b 	.word	0x0800746b
 8007408:	080074fb 	.word	0x080074fb
 800740c:	080073bd 	.word	0x080073bd
 8007410:	080073bd 	.word	0x080073bd
 8007414:	08007563 	.word	0x08007563
 8007418:	080073bd 	.word	0x080073bd
 800741c:	0800746b 	.word	0x0800746b
 8007420:	080073bd 	.word	0x080073bd
 8007424:	080073bd 	.word	0x080073bd
 8007428:	08007503 	.word	0x08007503
 800742c:	6833      	ldr	r3, [r6, #0]
 800742e:	1d1a      	adds	r2, r3, #4
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6032      	str	r2, [r6, #0]
 8007434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800743c:	2301      	movs	r3, #1
 800743e:	e09d      	b.n	800757c <_printf_i+0x1e8>
 8007440:	6833      	ldr	r3, [r6, #0]
 8007442:	6820      	ldr	r0, [r4, #0]
 8007444:	1d19      	adds	r1, r3, #4
 8007446:	6031      	str	r1, [r6, #0]
 8007448:	0606      	lsls	r6, r0, #24
 800744a:	d501      	bpl.n	8007450 <_printf_i+0xbc>
 800744c:	681d      	ldr	r5, [r3, #0]
 800744e:	e003      	b.n	8007458 <_printf_i+0xc4>
 8007450:	0645      	lsls	r5, r0, #25
 8007452:	d5fb      	bpl.n	800744c <_printf_i+0xb8>
 8007454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007458:	2d00      	cmp	r5, #0
 800745a:	da03      	bge.n	8007464 <_printf_i+0xd0>
 800745c:	232d      	movs	r3, #45	@ 0x2d
 800745e:	426d      	negs	r5, r5
 8007460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007464:	4859      	ldr	r0, [pc, #356]	@ (80075cc <_printf_i+0x238>)
 8007466:	230a      	movs	r3, #10
 8007468:	e011      	b.n	800748e <_printf_i+0xfa>
 800746a:	6821      	ldr	r1, [r4, #0]
 800746c:	6833      	ldr	r3, [r6, #0]
 800746e:	0608      	lsls	r0, r1, #24
 8007470:	f853 5b04 	ldr.w	r5, [r3], #4
 8007474:	d402      	bmi.n	800747c <_printf_i+0xe8>
 8007476:	0649      	lsls	r1, r1, #25
 8007478:	bf48      	it	mi
 800747a:	b2ad      	uxthmi	r5, r5
 800747c:	2f6f      	cmp	r7, #111	@ 0x6f
 800747e:	4853      	ldr	r0, [pc, #332]	@ (80075cc <_printf_i+0x238>)
 8007480:	6033      	str	r3, [r6, #0]
 8007482:	bf14      	ite	ne
 8007484:	230a      	movne	r3, #10
 8007486:	2308      	moveq	r3, #8
 8007488:	2100      	movs	r1, #0
 800748a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800748e:	6866      	ldr	r6, [r4, #4]
 8007490:	60a6      	str	r6, [r4, #8]
 8007492:	2e00      	cmp	r6, #0
 8007494:	bfa2      	ittt	ge
 8007496:	6821      	ldrge	r1, [r4, #0]
 8007498:	f021 0104 	bicge.w	r1, r1, #4
 800749c:	6021      	strge	r1, [r4, #0]
 800749e:	b90d      	cbnz	r5, 80074a4 <_printf_i+0x110>
 80074a0:	2e00      	cmp	r6, #0
 80074a2:	d04b      	beq.n	800753c <_printf_i+0x1a8>
 80074a4:	4616      	mov	r6, r2
 80074a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80074aa:	fb03 5711 	mls	r7, r3, r1, r5
 80074ae:	5dc7      	ldrb	r7, [r0, r7]
 80074b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074b4:	462f      	mov	r7, r5
 80074b6:	42bb      	cmp	r3, r7
 80074b8:	460d      	mov	r5, r1
 80074ba:	d9f4      	bls.n	80074a6 <_printf_i+0x112>
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d10b      	bne.n	80074d8 <_printf_i+0x144>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	07df      	lsls	r7, r3, #31
 80074c4:	d508      	bpl.n	80074d8 <_printf_i+0x144>
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	6861      	ldr	r1, [r4, #4]
 80074ca:	4299      	cmp	r1, r3
 80074cc:	bfde      	ittt	le
 80074ce:	2330      	movle	r3, #48	@ 0x30
 80074d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80074d8:	1b92      	subs	r2, r2, r6
 80074da:	6122      	str	r2, [r4, #16]
 80074dc:	f8cd a000 	str.w	sl, [sp]
 80074e0:	464b      	mov	r3, r9
 80074e2:	aa03      	add	r2, sp, #12
 80074e4:	4621      	mov	r1, r4
 80074e6:	4640      	mov	r0, r8
 80074e8:	f7ff fee6 	bl	80072b8 <_printf_common>
 80074ec:	3001      	adds	r0, #1
 80074ee:	d14a      	bne.n	8007586 <_printf_i+0x1f2>
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074f4:	b004      	add	sp, #16
 80074f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	f043 0320 	orr.w	r3, r3, #32
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	4833      	ldr	r0, [pc, #204]	@ (80075d0 <_printf_i+0x23c>)
 8007504:	2778      	movs	r7, #120	@ 0x78
 8007506:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	6831      	ldr	r1, [r6, #0]
 800750e:	061f      	lsls	r7, r3, #24
 8007510:	f851 5b04 	ldr.w	r5, [r1], #4
 8007514:	d402      	bmi.n	800751c <_printf_i+0x188>
 8007516:	065f      	lsls	r7, r3, #25
 8007518:	bf48      	it	mi
 800751a:	b2ad      	uxthmi	r5, r5
 800751c:	6031      	str	r1, [r6, #0]
 800751e:	07d9      	lsls	r1, r3, #31
 8007520:	bf44      	itt	mi
 8007522:	f043 0320 	orrmi.w	r3, r3, #32
 8007526:	6023      	strmi	r3, [r4, #0]
 8007528:	b11d      	cbz	r5, 8007532 <_printf_i+0x19e>
 800752a:	2310      	movs	r3, #16
 800752c:	e7ac      	b.n	8007488 <_printf_i+0xf4>
 800752e:	4827      	ldr	r0, [pc, #156]	@ (80075cc <_printf_i+0x238>)
 8007530:	e7e9      	b.n	8007506 <_printf_i+0x172>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	f023 0320 	bic.w	r3, r3, #32
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	e7f6      	b.n	800752a <_printf_i+0x196>
 800753c:	4616      	mov	r6, r2
 800753e:	e7bd      	b.n	80074bc <_printf_i+0x128>
 8007540:	6833      	ldr	r3, [r6, #0]
 8007542:	6825      	ldr	r5, [r4, #0]
 8007544:	6961      	ldr	r1, [r4, #20]
 8007546:	1d18      	adds	r0, r3, #4
 8007548:	6030      	str	r0, [r6, #0]
 800754a:	062e      	lsls	r6, r5, #24
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	d501      	bpl.n	8007554 <_printf_i+0x1c0>
 8007550:	6019      	str	r1, [r3, #0]
 8007552:	e002      	b.n	800755a <_printf_i+0x1c6>
 8007554:	0668      	lsls	r0, r5, #25
 8007556:	d5fb      	bpl.n	8007550 <_printf_i+0x1bc>
 8007558:	8019      	strh	r1, [r3, #0]
 800755a:	2300      	movs	r3, #0
 800755c:	6123      	str	r3, [r4, #16]
 800755e:	4616      	mov	r6, r2
 8007560:	e7bc      	b.n	80074dc <_printf_i+0x148>
 8007562:	6833      	ldr	r3, [r6, #0]
 8007564:	1d1a      	adds	r2, r3, #4
 8007566:	6032      	str	r2, [r6, #0]
 8007568:	681e      	ldr	r6, [r3, #0]
 800756a:	6862      	ldr	r2, [r4, #4]
 800756c:	2100      	movs	r1, #0
 800756e:	4630      	mov	r0, r6
 8007570:	f7f8 fe46 	bl	8000200 <memchr>
 8007574:	b108      	cbz	r0, 800757a <_printf_i+0x1e6>
 8007576:	1b80      	subs	r0, r0, r6
 8007578:	6060      	str	r0, [r4, #4]
 800757a:	6863      	ldr	r3, [r4, #4]
 800757c:	6123      	str	r3, [r4, #16]
 800757e:	2300      	movs	r3, #0
 8007580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007584:	e7aa      	b.n	80074dc <_printf_i+0x148>
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	4632      	mov	r2, r6
 800758a:	4649      	mov	r1, r9
 800758c:	4640      	mov	r0, r8
 800758e:	47d0      	blx	sl
 8007590:	3001      	adds	r0, #1
 8007592:	d0ad      	beq.n	80074f0 <_printf_i+0x15c>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	079b      	lsls	r3, r3, #30
 8007598:	d413      	bmi.n	80075c2 <_printf_i+0x22e>
 800759a:	68e0      	ldr	r0, [r4, #12]
 800759c:	9b03      	ldr	r3, [sp, #12]
 800759e:	4298      	cmp	r0, r3
 80075a0:	bfb8      	it	lt
 80075a2:	4618      	movlt	r0, r3
 80075a4:	e7a6      	b.n	80074f4 <_printf_i+0x160>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4632      	mov	r2, r6
 80075aa:	4649      	mov	r1, r9
 80075ac:	4640      	mov	r0, r8
 80075ae:	47d0      	blx	sl
 80075b0:	3001      	adds	r0, #1
 80075b2:	d09d      	beq.n	80074f0 <_printf_i+0x15c>
 80075b4:	3501      	adds	r5, #1
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	9903      	ldr	r1, [sp, #12]
 80075ba:	1a5b      	subs	r3, r3, r1
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dcf2      	bgt.n	80075a6 <_printf_i+0x212>
 80075c0:	e7eb      	b.n	800759a <_printf_i+0x206>
 80075c2:	2500      	movs	r5, #0
 80075c4:	f104 0619 	add.w	r6, r4, #25
 80075c8:	e7f5      	b.n	80075b6 <_printf_i+0x222>
 80075ca:	bf00      	nop
 80075cc:	08007dd5 	.word	0x08007dd5
 80075d0:	08007de6 	.word	0x08007de6

080075d4 <_realloc_r>:
 80075d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d8:	4680      	mov	r8, r0
 80075da:	4615      	mov	r5, r2
 80075dc:	460c      	mov	r4, r1
 80075de:	b921      	cbnz	r1, 80075ea <_realloc_r+0x16>
 80075e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075e4:	4611      	mov	r1, r2
 80075e6:	f7ff bbc7 	b.w	8006d78 <_malloc_r>
 80075ea:	b92a      	cbnz	r2, 80075f8 <_realloc_r+0x24>
 80075ec:	f7ff fcc2 	bl	8006f74 <_free_r>
 80075f0:	2400      	movs	r4, #0
 80075f2:	4620      	mov	r0, r4
 80075f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f8:	f000 f834 	bl	8007664 <_malloc_usable_size_r>
 80075fc:	4285      	cmp	r5, r0
 80075fe:	4606      	mov	r6, r0
 8007600:	d802      	bhi.n	8007608 <_realloc_r+0x34>
 8007602:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007606:	d8f4      	bhi.n	80075f2 <_realloc_r+0x1e>
 8007608:	4629      	mov	r1, r5
 800760a:	4640      	mov	r0, r8
 800760c:	f7ff fbb4 	bl	8006d78 <_malloc_r>
 8007610:	4607      	mov	r7, r0
 8007612:	2800      	cmp	r0, #0
 8007614:	d0ec      	beq.n	80075f0 <_realloc_r+0x1c>
 8007616:	42b5      	cmp	r5, r6
 8007618:	462a      	mov	r2, r5
 800761a:	4621      	mov	r1, r4
 800761c:	bf28      	it	cs
 800761e:	4632      	movcs	r2, r6
 8007620:	f7ff fc9a 	bl	8006f58 <memcpy>
 8007624:	4621      	mov	r1, r4
 8007626:	4640      	mov	r0, r8
 8007628:	f7ff fca4 	bl	8006f74 <_free_r>
 800762c:	463c      	mov	r4, r7
 800762e:	e7e0      	b.n	80075f2 <_realloc_r+0x1e>

08007630 <memmove>:
 8007630:	4288      	cmp	r0, r1
 8007632:	b510      	push	{r4, lr}
 8007634:	eb01 0402 	add.w	r4, r1, r2
 8007638:	d902      	bls.n	8007640 <memmove+0x10>
 800763a:	4284      	cmp	r4, r0
 800763c:	4623      	mov	r3, r4
 800763e:	d807      	bhi.n	8007650 <memmove+0x20>
 8007640:	1e43      	subs	r3, r0, #1
 8007642:	42a1      	cmp	r1, r4
 8007644:	d008      	beq.n	8007658 <memmove+0x28>
 8007646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800764a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800764e:	e7f8      	b.n	8007642 <memmove+0x12>
 8007650:	4402      	add	r2, r0
 8007652:	4601      	mov	r1, r0
 8007654:	428a      	cmp	r2, r1
 8007656:	d100      	bne.n	800765a <memmove+0x2a>
 8007658:	bd10      	pop	{r4, pc}
 800765a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800765e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007662:	e7f7      	b.n	8007654 <memmove+0x24>

08007664 <_malloc_usable_size_r>:
 8007664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007668:	1f18      	subs	r0, r3, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	bfbc      	itt	lt
 800766e:	580b      	ldrlt	r3, [r1, r0]
 8007670:	18c0      	addlt	r0, r0, r3
 8007672:	4770      	bx	lr

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
