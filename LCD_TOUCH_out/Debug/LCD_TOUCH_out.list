
LCD_TOUCH_out.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08004870  08004870  00005870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00005e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004e18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000060  08004e78  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004e78  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f13  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a66  00000000  00000000  0000efa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00010a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d8  00000000  00000000  00011320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bb8  00000000  00000000  000119f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a866  00000000  00000000  0003b5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9ec2  00000000  00000000  00045e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fcd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ac  00000000  00000000  0013fd1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001425c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004858 	.word	0x08004858

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	08004858 	.word	0x08004858

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 80002ae:	2200      	movs	r2, #0
 80002b0:	2140      	movs	r1, #64	@ 0x40
 80002b2:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <ILI9488_SendCommand+0x44>)
 80002b4:	f002 f916 	bl	80024e4 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 80002b8:	2200      	movs	r2, #0
 80002ba:	2101      	movs	r1, #1
 80002bc:	4809      	ldr	r0, [pc, #36]	@ (80002e4 <ILI9488_SendCommand+0x44>)
 80002be:	f002 f911 	bl	80024e4 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 80002c2:	f107 010f 	add.w	r1, r7, #15
 80002c6:	2301      	movs	r3, #1
 80002c8:	2201      	movs	r2, #1
 80002ca:	4807      	ldr	r0, [pc, #28]	@ (80002e8 <ILI9488_SendCommand+0x48>)
 80002cc:	f003 f929 	bl	8003522 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 80002d0:	2201      	movs	r2, #1
 80002d2:	2101      	movs	r1, #1
 80002d4:	4803      	ldr	r0, [pc, #12]	@ (80002e4 <ILI9488_SendCommand+0x44>)
 80002d6:	f002 f905 	bl	80024e4 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	48000c00 	.word	0x48000c00
 80002e8:	20000094 	.word	0x20000094

080002ec <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 80002fa:	2201      	movs	r2, #1
 80002fc:	2140      	movs	r1, #64	@ 0x40
 80002fe:	480c      	ldr	r0, [pc, #48]	@ (8000330 <ILI9488_SendData+0x44>)
 8000300:	f002 f8f0 	bl	80024e4 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000304:	2200      	movs	r2, #0
 8000306:	2101      	movs	r1, #1
 8000308:	4809      	ldr	r0, [pc, #36]	@ (8000330 <ILI9488_SendData+0x44>)
 800030a:	f002 f8eb 	bl	80024e4 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800030e:	f107 010f 	add.w	r1, r7, #15
 8000312:	2301      	movs	r3, #1
 8000314:	2201      	movs	r2, #1
 8000316:	4807      	ldr	r0, [pc, #28]	@ (8000334 <ILI9488_SendData+0x48>)
 8000318:	f003 f903 	bl	8003522 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 800031c:	2201      	movs	r2, #1
 800031e:	2101      	movs	r1, #1
 8000320:	4803      	ldr	r0, [pc, #12]	@ (8000330 <ILI9488_SendData+0x44>)
 8000322:	f002 f8df 	bl	80024e4 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	48000c00 	.word	0x48000c00
 8000334:	20000094 	.word	0x20000094

08000338 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8000342:	2201      	movs	r2, #1
 8000344:	2140      	movs	r1, #64	@ 0x40
 8000346:	4815      	ldr	r0, [pc, #84]	@ (800039c <ILI9488_SendData_Multi+0x64>)
 8000348:	f002 f8cc 	bl	80024e4 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 800034c:	2200      	movs	r2, #0
 800034e:	2101      	movs	r1, #1
 8000350:	4812      	ldr	r0, [pc, #72]	@ (800039c <ILI9488_SendData_Multi+0x64>)
 8000352:	f002 f8c7 	bl	80024e4 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 8000356:	e015      	b.n	8000384 <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800035e:	bf28      	it	cs
 8000360:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000364:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 8000366:	89fa      	ldrh	r2, [r7, #14]
 8000368:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800036c:	6879      	ldr	r1, [r7, #4]
 800036e:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <ILI9488_SendData_Multi+0x68>)
 8000370:	f003 f8d7 	bl	8003522 <HAL_SPI_Transmit>
		buff += chunk_size;
 8000374:	89fb      	ldrh	r3, [r7, #14]
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	4413      	add	r3, r2
 800037a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800037c:	89fb      	ldrh	r3, [r7, #14]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d1e6      	bne.n	8000358 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 800038a:	2201      	movs	r2, #1
 800038c:	2101      	movs	r1, #1
 800038e:	4803      	ldr	r0, [pc, #12]	@ (800039c <ILI9488_SendData_Multi+0x64>)
 8000390:	f002 f8a8 	bl	80024e4 <HAL_GPIO_WritePin>
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	48000c00 	.word	0x48000c00
 80003a0:	20000094 	.word	0x20000094

080003a4 <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 80003a8:	2201      	movs	r2, #1
 80003aa:	2101      	movs	r1, #1
 80003ac:	486c      	ldr	r0, [pc, #432]	@ (8000560 <ILI9488_Init+0x1bc>)
 80003ae:	f002 f899 	bl	80024e4 <HAL_GPIO_WritePin>
	RST_A();
 80003b2:	2200      	movs	r2, #0
 80003b4:	2180      	movs	r1, #128	@ 0x80
 80003b6:	486a      	ldr	r0, [pc, #424]	@ (8000560 <ILI9488_Init+0x1bc>)
 80003b8:	f002 f894 	bl	80024e4 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 80003bc:	200a      	movs	r0, #10
 80003be:	f001 fdf5 	bl	8001fac <HAL_Delay>
		 RST_D();
 80003c2:	2201      	movs	r2, #1
 80003c4:	2180      	movs	r1, #128	@ 0x80
 80003c6:	4866      	ldr	r0, [pc, #408]	@ (8000560 <ILI9488_Init+0x1bc>)
 80003c8:	f002 f88c 	bl	80024e4 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 80003cc:	4b65      	ldr	r3, [pc, #404]	@ (8000564 <ILI9488_Init+0x1c0>)
 80003ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80003d2:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 80003d4:	4b64      	ldr	r3, [pc, #400]	@ (8000568 <ILI9488_Init+0x1c4>)
 80003d6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80003da:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 80003dc:	20e0      	movs	r0, #224	@ 0xe0
 80003de:	f7ff ff5f 	bl	80002a0 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 80003e2:	2000      	movs	r0, #0
 80003e4:	f7ff ff82 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 80003e8:	2003      	movs	r0, #3
 80003ea:	f7ff ff7f 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 80003ee:	2009      	movs	r0, #9
 80003f0:	f7ff ff7c 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 80003f4:	2008      	movs	r0, #8
 80003f6:	f7ff ff79 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 80003fa:	2016      	movs	r0, #22
 80003fc:	f7ff ff76 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000400:	200a      	movs	r0, #10
 8000402:	f7ff ff73 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 8000406:	203f      	movs	r0, #63	@ 0x3f
 8000408:	f7ff ff70 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 800040c:	2078      	movs	r0, #120	@ 0x78
 800040e:	f7ff ff6d 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 8000412:	204c      	movs	r0, #76	@ 0x4c
 8000414:	f7ff ff6a 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000418:	2009      	movs	r0, #9
 800041a:	f7ff ff67 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800041e:	200a      	movs	r0, #10
 8000420:	f7ff ff64 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000424:	2008      	movs	r0, #8
 8000426:	f7ff ff61 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800042a:	2016      	movs	r0, #22
 800042c:	f7ff ff5e 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8000430:	201a      	movs	r0, #26
 8000432:	f7ff ff5b 	bl	80002ec <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 8000436:	200f      	movs	r0, #15
 8000438:	f7ff ff58 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 800043c:	20e1      	movs	r0, #225	@ 0xe1
 800043e:	f7ff ff2f 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000442:	2000      	movs	r0, #0
 8000444:	f7ff ff52 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 8000448:	2016      	movs	r0, #22
 800044a:	f7ff ff4f 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 800044e:	2019      	movs	r0, #25
 8000450:	f7ff ff4c 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 8000454:	2003      	movs	r0, #3
 8000456:	f7ff ff49 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 800045a:	200f      	movs	r0, #15
 800045c:	f7ff ff46 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 8000460:	2005      	movs	r0, #5
 8000462:	f7ff ff43 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 8000466:	2032      	movs	r0, #50	@ 0x32
 8000468:	f7ff ff40 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 800046c:	2045      	movs	r0, #69	@ 0x45
 800046e:	f7ff ff3d 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 8000472:	2046      	movs	r0, #70	@ 0x46
 8000474:	f7ff ff3a 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 8000478:	2004      	movs	r0, #4
 800047a:	f7ff ff37 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 800047e:	200e      	movs	r0, #14
 8000480:	f7ff ff34 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 8000484:	200d      	movs	r0, #13
 8000486:	f7ff ff31 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 800048a:	2035      	movs	r0, #53	@ 0x35
 800048c:	f7ff ff2e 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 8000490:	2037      	movs	r0, #55	@ 0x37
 8000492:	f7ff ff2b 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 8000496:	200f      	movs	r0, #15
 8000498:	f7ff ff28 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 800049c:	20c0      	movs	r0, #192	@ 0xc0
 800049e:	f7ff feff 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 80004a2:	2017      	movs	r0, #23
 80004a4:	f7ff ff22 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 80004a8:	2015      	movs	r0, #21
 80004aa:	f7ff ff1f 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 80004ae:	20c1      	movs	r0, #193	@ 0xc1
 80004b0:	f7ff fef6 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 80004b4:	2041      	movs	r0, #65	@ 0x41
 80004b6:	f7ff ff19 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 80004ba:	20c5      	movs	r0, #197	@ 0xc5
 80004bc:	f7ff fef0 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff ff13 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 80004c6:	2012      	movs	r0, #18
 80004c8:	f7ff ff10 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 80004cc:	2080      	movs	r0, #128	@ 0x80
 80004ce:	f7ff ff0d 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 80004d2:	2036      	movs	r0, #54	@ 0x36
 80004d4:	f7ff fee4 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 80004d8:	2048      	movs	r0, #72	@ 0x48
 80004da:	f7ff ff07 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 80004de:	203a      	movs	r0, #58	@ 0x3a
 80004e0:	f7ff fede 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 80004e4:	2066      	movs	r0, #102	@ 0x66
 80004e6:	f7ff ff01 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 80004ea:	20b0      	movs	r0, #176	@ 0xb0
 80004ec:	f7ff fed8 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 80004f0:	2080      	movs	r0, #128	@ 0x80
 80004f2:	f7ff fefb 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 80004f6:	20b1      	movs	r0, #177	@ 0xb1
 80004f8:	f7ff fed2 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 80004fc:	20a0      	movs	r0, #160	@ 0xa0
 80004fe:	f7ff fef5 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 8000502:	20b4      	movs	r0, #180	@ 0xb4
 8000504:	f7ff fecc 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000508:	2002      	movs	r0, #2
 800050a:	f7ff feef 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 800050e:	20b6      	movs	r0, #182	@ 0xb6
 8000510:	f7ff fec6 	bl	80002a0 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000514:	2002      	movs	r0, #2
 8000516:	f7ff fee9 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 800051a:	2002      	movs	r0, #2
 800051c:	f7ff fee6 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8000520:	20e9      	movs	r0, #233	@ 0xe9
 8000522:	f7ff febd 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff fee0 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 800052c:	20f7      	movs	r0, #247	@ 0xf7
 800052e:	f7ff feb7 	bl	80002a0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 8000532:	20a9      	movs	r0, #169	@ 0xa9
 8000534:	f7ff feda 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 8000538:	2051      	movs	r0, #81	@ 0x51
 800053a:	f7ff fed7 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 800053e:	202c      	movs	r0, #44	@ 0x2c
 8000540:	f7ff fed4 	bl	80002ec <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 8000544:	2082      	movs	r0, #130	@ 0x82
 8000546:	f7ff fed1 	bl	80002ec <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 800054a:	2011      	movs	r0, #17
 800054c:	f7ff fea8 	bl	80002a0 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 8000550:	2078      	movs	r0, #120	@ 0x78
 8000552:	f001 fd2b 	bl	8001fac <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 8000556:	2029      	movs	r0, #41	@ 0x29
 8000558:	f7ff fea2 	bl	80002a0 <ILI9488_SendCommand>

}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	48000c00 	.word	0x48000c00
 8000564:	2000008e 	.word	0x2000008e
 8000568:	20000090 	.word	0x20000090

0800056c <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4604      	mov	r4, r0
 8000574:	4608      	mov	r0, r1
 8000576:	4611      	mov	r1, r2
 8000578:	461a      	mov	r2, r3
 800057a:	4623      	mov	r3, r4
 800057c:	80fb      	strh	r3, [r7, #6]
 800057e:	4603      	mov	r3, r0
 8000580:	80bb      	strh	r3, [r7, #4]
 8000582:	460b      	mov	r3, r1
 8000584:	807b      	strh	r3, [r7, #2]
 8000586:	4613      	mov	r3, r2
 8000588:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 800058a:	202a      	movs	r0, #42	@ 0x2a
 800058c:	f7ff fe88 	bl	80002a0 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	0a1b      	lsrs	r3, r3, #8
 8000594:	b29b      	uxth	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	733b      	strb	r3, [r7, #12]
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	737b      	strb	r3, [r7, #13]
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	73bb      	strb	r3, [r7, #14]
 80005aa:	887b      	ldrh	r3, [r7, #2]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2104      	movs	r1, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff febe 	bl	8000338 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 80005bc:	202b      	movs	r0, #43	@ 0x2b
 80005be:	f7ff fe6f 	bl	80002a0 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	723b      	strb	r3, [r7, #8]
 80005cc:	88bb      	ldrh	r3, [r7, #4]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	727b      	strb	r3, [r7, #9]
 80005d2:	883b      	ldrh	r3, [r7, #0]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	72bb      	strb	r3, [r7, #10]
 80005dc:	883b      	ldrh	r3, [r7, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2104      	movs	r1, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fea5 	bl	8000338 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 80005ee:	202c      	movs	r0, #44	@ 0x2c
 80005f0:	f7ff fe56 	bl	80002a0 <ILI9488_SendCommand>
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
 8000606:	460b      	mov	r3, r1
 8000608:	80bb      	strh	r3, [r7, #4]
 800060a:	4613      	mov	r3, r2
 800060c:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 800060e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000612:	2b00      	cmp	r3, #0
 8000614:	db36      	blt.n	8000684 <drawPixel+0x88>
 8000616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800061a:	4a1c      	ldr	r2, [pc, #112]	@ (800068c <drawPixel+0x90>)
 800061c:	8812      	ldrh	r2, [r2, #0]
 800061e:	4293      	cmp	r3, r2
 8000620:	da30      	bge.n	8000684 <drawPixel+0x88>
 8000622:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	db2c      	blt.n	8000684 <drawPixel+0x88>
 800062a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800062e:	4a18      	ldr	r2, [pc, #96]	@ (8000690 <drawPixel+0x94>)
 8000630:	8812      	ldrh	r2, [r2, #0]
 8000632:	4293      	cmp	r3, r2
 8000634:	da26      	bge.n	8000684 <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 8000636:	88f8      	ldrh	r0, [r7, #6]
 8000638:	88b9      	ldrh	r1, [r7, #4]
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	3301      	adds	r3, #1
 800063e:	b29a      	uxth	r2, r3
 8000640:	88bb      	ldrh	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	b29b      	uxth	r3, r3
 8000646:	f7ff ff91 	bl	800056c <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <drawPixel+0x98>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <drawPixel+0x9c>)
 8000650:	8811      	ldrh	r1, [r2, #0]
 8000652:	2201      	movs	r2, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f001 ff45 	bl	80024e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <drawPixel+0xa0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a10      	ldr	r2, [pc, #64]	@ (80006a0 <drawPixel+0xa4>)
 8000660:	8811      	ldrh	r1, [r2, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f001 ff3d 	bl	80024e4 <HAL_GPIO_WritePin>

	write16BitColor(color);
 800066a:	887b      	ldrh	r3, [r7, #2]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fd5d 	bl	800112c <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <drawPixel+0xa0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <drawPixel+0xa4>)
 8000678:	8811      	ldrh	r1, [r2, #0]
 800067a:	2201      	movs	r2, #1
 800067c:	4618      	mov	r0, r3
 800067e:	f001 ff31 	bl	80024e4 <HAL_GPIO_WritePin>
 8000682:	e000      	b.n	8000686 <drawPixel+0x8a>
		return;
 8000684:	bf00      	nop

}
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000008e 	.word	0x2000008e
 8000690:	20000090 	.word	0x20000090
 8000694:	20000088 	.word	0x20000088
 8000698:	2000008c 	.word	0x2000008c
 800069c:	20000080 	.word	0x20000080
 80006a0:	20000084 	.word	0x20000084

080006a4 <drawPixelSize>:

void drawPixelSize(int16_t x, int16_t y, uint16_t color, uint16_t size)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4604      	mov	r4, r0
 80006ac:	4608      	mov	r0, r1
 80006ae:	4611      	mov	r1, r2
 80006b0:	461a      	mov	r2, r3
 80006b2:	4623      	mov	r3, r4
 80006b4:	80fb      	strh	r3, [r7, #6]
 80006b6:	4603      	mov	r3, r0
 80006b8:	80bb      	strh	r3, [r7, #4]
 80006ba:	460b      	mov	r3, r1
 80006bc:	807b      	strh	r3, [r7, #2]
 80006be:	4613      	mov	r3, r2
 80006c0:	803b      	strh	r3, [r7, #0]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 80006c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	db39      	blt.n	800073e <drawPixelSize+0x9a>
 80006ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000748 <drawPixelSize+0xa4>)
 80006d0:	8812      	ldrh	r2, [r2, #0]
 80006d2:	4293      	cmp	r3, r2
 80006d4:	da33      	bge.n	800073e <drawPixelSize+0x9a>
 80006d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db2f      	blt.n	800073e <drawPixelSize+0x9a>
 80006de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006e2:	4a1a      	ldr	r2, [pc, #104]	@ (800074c <drawPixelSize+0xa8>)
 80006e4:	8812      	ldrh	r2, [r2, #0]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	da29      	bge.n	800073e <drawPixelSize+0x9a>
		return;

	setAddrWindow(x, y, x + size, y + size);
 80006ea:	88f8      	ldrh	r0, [r7, #6]
 80006ec:	88b9      	ldrh	r1, [r7, #4]
 80006ee:	88fa      	ldrh	r2, [r7, #6]
 80006f0:	883b      	ldrh	r3, [r7, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	b29c      	uxth	r4, r3
 80006f6:	88ba      	ldrh	r2, [r7, #4]
 80006f8:	883b      	ldrh	r3, [r7, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	4622      	mov	r2, r4
 8000700:	f7ff ff34 	bl	800056c <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <drawPixelSize+0xac>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <drawPixelSize+0xb0>)
 800070a:	8811      	ldrh	r1, [r2, #0]
 800070c:	2201      	movs	r2, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fee8 	bl	80024e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000714:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <drawPixelSize+0xb4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a10      	ldr	r2, [pc, #64]	@ (800075c <drawPixelSize+0xb8>)
 800071a:	8811      	ldrh	r1, [r2, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fee0 	bl	80024e4 <HAL_GPIO_WritePin>

	write16BitColor(color);
 8000724:	887b      	ldrh	r3, [r7, #2]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fd00 	bl	800112c <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <drawPixelSize+0xb4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <drawPixelSize+0xb8>)
 8000732:	8811      	ldrh	r1, [r2, #0]
 8000734:	2201      	movs	r2, #1
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fed4 	bl	80024e4 <HAL_GPIO_WritePin>
 800073c:	e000      	b.n	8000740 <drawPixelSize+0x9c>
		return;
 800073e:	bf00      	nop

}
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bd90      	pop	{r4, r7, pc}
 8000746:	bf00      	nop
 8000748:	2000008e 	.word	0x2000008e
 800074c:	20000090 	.word	0x20000090
 8000750:	20000088 	.word	0x20000088
 8000754:	2000008c 	.word	0x2000008c
 8000758:	20000080 	.word	0x20000080
 800075c:	20000084 	.word	0x20000084

08000760 <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af02      	add	r7, sp, #8
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <fillScreen+0x2c>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	b21a      	sxth	r2, r3
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <fillScreen+0x30>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b219      	sxth	r1, r3
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	460b      	mov	r3, r1
 800077c:	2100      	movs	r1, #0
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f808 	bl	8000794 <fillRect>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000008e 	.word	0x2000008e
 8000790:	20000090 	.word	0x20000090

08000794 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000798:	b08a      	sub	sp, #40	@ 0x28
 800079a:	af00      	add	r7, sp, #0
 800079c:	4606      	mov	r6, r0
 800079e:	4608      	mov	r0, r1
 80007a0:	4611      	mov	r1, r2
 80007a2:	461a      	mov	r2, r3
 80007a4:	4633      	mov	r3, r6
 80007a6:	80fb      	strh	r3, [r7, #6]
 80007a8:	4603      	mov	r3, r0
 80007aa:	80bb      	strh	r3, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]
 80007b0:	4613      	mov	r3, r2
 80007b2:	803b      	strh	r3, [r7, #0]
 80007b4:	466b      	mov	r3, sp
 80007b6:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 80007b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007bc:	4a8f      	ldr	r2, [pc, #572]	@ (80009fc <fillRect+0x268>)
 80007be:	8812      	ldrh	r2, [r2, #0]
 80007c0:	4293      	cmp	r3, r2
 80007c2:	da05      	bge.n	80007d0 <fillRect+0x3c>
 80007c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007c8:	4a8d      	ldr	r2, [pc, #564]	@ (8000a00 <fillRect+0x26c>)
 80007ca:	8812      	ldrh	r2, [r2, #0]
 80007cc:	4293      	cmp	r3, r2
 80007ce:	db01      	blt.n	80007d4 <fillRect+0x40>
		return;
 80007d0:	46d5      	mov	sp, sl
 80007d2:	e10f      	b.n	80009f4 <fillRect+0x260>
	if ((x + w - 1) >= width)
 80007d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007dc:	4413      	add	r3, r2
 80007de:	4a87      	ldr	r2, [pc, #540]	@ (80009fc <fillRect+0x268>)
 80007e0:	8812      	ldrh	r2, [r2, #0]
 80007e2:	4293      	cmp	r3, r2
 80007e4:	dd05      	ble.n	80007f2 <fillRect+0x5e>
		w = width - x;
 80007e6:	4b85      	ldr	r3, [pc, #532]	@ (80009fc <fillRect+0x268>)
 80007e8:	881a      	ldrh	r2, [r3, #0]
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 80007f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a80      	ldr	r2, [pc, #512]	@ (8000a00 <fillRect+0x26c>)
 80007fe:	8812      	ldrh	r2, [r2, #0]
 8000800:	4293      	cmp	r3, r2
 8000802:	dd05      	ble.n	8000810 <fillRect+0x7c>
		h = height - y;
 8000804:	4b7e      	ldr	r3, [pc, #504]	@ (8000a00 <fillRect+0x26c>)
 8000806:	881a      	ldrh	r2, [r3, #0]
 8000808:	88bb      	ldrh	r3, [r7, #4]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29b      	uxth	r3, r3
 800080e:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000810:	88f8      	ldrh	r0, [r7, #6]
 8000812:	88b9      	ldrh	r1, [r7, #4]
 8000814:	88fa      	ldrh	r2, [r7, #6]
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	4413      	add	r3, r2
 800081a:	b29b      	uxth	r3, r3
 800081c:	3b01      	subs	r3, #1
 800081e:	b29e      	uxth	r6, r3
 8000820:	88ba      	ldrh	r2, [r7, #4]
 8000822:	883b      	ldrh	r3, [r7, #0]
 8000824:	4413      	add	r3, r2
 8000826:	b29b      	uxth	r3, r3
 8000828:	3b01      	subs	r3, #1
 800082a:	b29b      	uxth	r3, r3
 800082c:	4632      	mov	r2, r6
 800082e:	f7ff fe9d 	bl	800056c <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 8000832:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000836:	0adb      	lsrs	r3, r3, #11
 8000838:	b29b      	uxth	r3, r3
 800083a:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 800083c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000840:	115b      	asrs	r3, r3, #5
 8000842:	b2db      	uxtb	r3, r3
 8000844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000848:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 800084a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800084e:	b2db      	uxtb	r3, r3
 8000850:	f003 031f 	and.w	r3, r3, #31
 8000854:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 8000856:	7efa      	ldrb	r2, [r7, #27]
 8000858:	4613      	mov	r3, r2
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	1a9b      	subs	r3, r3, r2
 800085e:	4a69      	ldr	r2, [pc, #420]	@ (8000a04 <fillRect+0x270>)
 8000860:	fb82 1203 	smull	r1, r2, r2, r3
 8000864:	441a      	add	r2, r3
 8000866:	1112      	asrs	r2, r2, #4
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 800086e:	7eba      	ldrb	r2, [r7, #26]
 8000870:	4613      	mov	r3, r2
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	1a9b      	subs	r3, r3, r2
 8000876:	4a64      	ldr	r2, [pc, #400]	@ (8000a08 <fillRect+0x274>)
 8000878:	fb82 1203 	smull	r1, r2, r2, r3
 800087c:	441a      	add	r2, r3
 800087e:	1152      	asrs	r2, r2, #5
 8000880:	17db      	asrs	r3, r3, #31
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8000886:	7e7a      	ldrb	r2, [r7, #25]
 8000888:	4613      	mov	r3, r2
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	4a5d      	ldr	r2, [pc, #372]	@ (8000a04 <fillRect+0x270>)
 8000890:	fb82 1203 	smull	r1, r2, r2, r3
 8000894:	441a      	add	r2, r3
 8000896:	1112      	asrs	r2, r2, #4
 8000898:	17db      	asrs	r3, r3, #31
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 800089e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80008a6:	fb03 f202 	mul.w	r2, r3, r2
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80008b8:	d204      	bcs.n	80008c4 <fillRect+0x130>
		cnt = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
		buf_size = n;
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	61fb      	str	r3, [r7, #28]
 80008c2:	e02f      	b.n	8000924 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	4a51      	ldr	r2, [pc, #324]	@ (8000a0c <fillRect+0x278>)
 80008c8:	fba2 2303 	umull	r2, r3, r2, r3
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 80008d0:	2303      	movs	r3, #3
 80008d2:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	4a4e      	ldr	r2, [pc, #312]	@ (8000a10 <fillRect+0x27c>)
 80008d8:	fba2 2303 	umull	r2, r3, r2, r3
 80008dc:	0bdb      	lsrs	r3, r3, #15
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	3301      	adds	r3, #1
 80008e2:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 80008e4:	7cfb      	ldrb	r3, [r7, #19]
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80008e8:	e014      	b.n	8000914 <fillRect+0x180>
			if(n%i == 0){
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80008f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80008f4:	fb01 f202 	mul.w	r2, r1, r2
 80008f8:	1a9b      	subs	r3, r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d107      	bne.n	800090e <fillRect+0x17a>
				cnt = i;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000900:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	61fb      	str	r3, [r7, #28]
				break;
 800090c:	e00a      	b.n	8000924 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 800090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000910:	3301      	adds	r3, #1
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	4a3d      	ldr	r2, [pc, #244]	@ (8000a0c <fillRect+0x278>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000920:	429a      	cmp	r2, r3
 8000922:	d3e2      	bcc.n	80008ea <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 8000924:	69f9      	ldr	r1, [r7, #28]
 8000926:	460b      	mov	r3, r1
 8000928:	3b01      	subs	r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	2300      	movs	r3, #0
 800092e:	4688      	mov	r8, r1
 8000930:	4699      	mov	r9, r3
 8000932:	f04f 0200 	mov.w	r2, #0
 8000936:	f04f 0300 	mov.w	r3, #0
 800093a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800093e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000946:	2300      	movs	r3, #0
 8000948:	460c      	mov	r4, r1
 800094a:	461d      	mov	r5, r3
 800094c:	f04f 0200 	mov.w	r2, #0
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	00eb      	lsls	r3, r5, #3
 8000956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800095a:	00e2      	lsls	r2, r4, #3
 800095c:	1dcb      	adds	r3, r1, #7
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	ebad 0d03 	sub.w	sp, sp, r3
 8000966:	466b      	mov	r3, sp
 8000968:	3300      	adds	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000970:	e019      	b.n	80009a6 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 8000972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	7ef9      	ldrb	r1, [r7, #27]
 800097e:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8000980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	3301      	adds	r3, #1
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	7eb9      	ldrb	r1, [r7, #26]
 800098e:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8000990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	3302      	adds	r3, #2
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	7e79      	ldrb	r1, [r7, #25]
 800099e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 80009a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a2:	3301      	adds	r3, #1
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	4a18      	ldr	r2, [pc, #96]	@ (8000a0c <fillRect+0x278>)
 80009aa:	fba2 2303 	umull	r2, r3, r2, r3
 80009ae:	085b      	lsrs	r3, r3, #1
 80009b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d3dd      	bcc.n	8000972 <fillRect+0x1de>
	}
	DC_DATA();
 80009b6:	2201      	movs	r2, #1
 80009b8:	2140      	movs	r1, #64	@ 0x40
 80009ba:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <fillRect+0x280>)
 80009bc:	f001 fd92 	bl	80024e4 <HAL_GPIO_WritePin>
	CS_A();
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <fillRect+0x280>)
 80009c6:	f001 fd8d 	bl	80024e4 <HAL_GPIO_WritePin>
		while(cnt>0)
 80009ca:	e00a      	b.n	80009e2 <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	4810      	ldr	r0, [pc, #64]	@ (8000a18 <fillRect+0x284>)
 80009d8:	f002 fda3 	bl	8003522 <HAL_SPI_Transmit>

			cnt -= 1;
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	3b01      	subs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 80009e2:	6a3b      	ldr	r3, [r7, #32]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f1      	bne.n	80009cc <fillRect+0x238>
		}
		CS_D();
 80009e8:	2201      	movs	r2, #1
 80009ea:	2101      	movs	r1, #1
 80009ec:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <fillRect+0x280>)
 80009ee:	f001 fd79 	bl	80024e4 <HAL_GPIO_WritePin>
 80009f2:	46d5      	mov	sp, sl

}
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fc:	2000008e 	.word	0x2000008e
 8000a00:	20000090 	.word	0x20000090
 8000a04:	84210843 	.word	0x84210843
 8000a08:	82082083 	.word	0x82082083
 8000a0c:	aaaaaaab 	.word	0xaaaaaaab
 8000a10:	80008001 	.word	0x80008001
 8000a14:	48000c00 	.word	0x48000c00
 8000a18:	20000094 	.word	0x20000094

08000a1c <setRotation>:


void setRotation(uint8_t r)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 8000a26:	2036      	movs	r0, #54	@ 0x36
 8000a28:	f7ff fc3a 	bl	80002a0 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d83a      	bhi.n	8000ab0 <setRotation+0x94>
 8000a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a40 <setRotation+0x24>)
 8000a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a40:	08000a51 	.word	0x08000a51
 8000a44:	08000a69 	.word	0x08000a69
 8000a48:	08000a81 	.word	0x08000a81
 8000a4c:	08000a99 	.word	0x08000a99
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 8000a50:	2048      	movs	r0, #72	@ 0x48
 8000a52:	f7ff fc4b 	bl	80002ec <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <setRotation+0x9c>)
 8000a58:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a5c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <setRotation+0xa0>)
 8000a60:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a64:	801a      	strh	r2, [r3, #0]
		break;
 8000a66:	e023      	b.n	8000ab0 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8000a68:	2028      	movs	r0, #40	@ 0x28
 8000a6a:	f7ff fc3f 	bl	80002ec <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <setRotation+0x9c>)
 8000a70:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a74:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <setRotation+0xa0>)
 8000a78:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a7c:	801a      	strh	r2, [r3, #0]
		break;
 8000a7e:	e017      	b.n	8000ab0 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 8000a80:	2088      	movs	r0, #136	@ 0x88
 8000a82:	f7ff fc33 	bl	80002ec <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <setRotation+0x9c>)
 8000a88:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a8c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <setRotation+0xa0>)
 8000a90:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a94:	801a      	strh	r2, [r3, #0]
		break;
 8000a96:	e00b      	b.n	8000ab0 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000a98:	20e8      	movs	r0, #232	@ 0xe8
 8000a9a:	f7ff fc27 	bl	80002ec <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <setRotation+0x9c>)
 8000aa0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000aa4:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <setRotation+0xa0>)
 8000aa8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000aac:	801a      	strh	r2, [r3, #0]
		break;
 8000aae:	bf00      	nop
	}

}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000008e 	.word	0x2000008e
 8000abc:	20000090 	.word	0x20000090

08000ac0 <drawChar>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

//11. Text printing functions
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	4608      	mov	r0, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4623      	mov	r3, r4
 8000ad0:	80fb      	strh	r3, [r7, #6]
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80bb      	strh	r3, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	70fb      	strb	r3, [r7, #3]
 8000ada:	4613      	mov	r3, r2
 8000adc:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000ade:	4bac      	ldr	r3, [pc, #688]	@ (8000d90 <drawChar+0x2d0>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d003      	beq.n	8000aee <drawChar+0x2e>
 8000ae6:	4baa      	ldr	r3, [pc, #680]	@ (8000d90 <drawChar+0x2d0>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d120      	bne.n	8000b30 <drawChar+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000af6:	f280 8144 	bge.w	8000d82 <drawChar+0x2c2>
 8000afa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000afe:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000b02:	f280 813e 	bge.w	8000d82 <drawChar+0x2c2>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000b06:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b0a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f340 8132 	ble.w	8000d82 <drawChar+0x2c2>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000b1e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	dc22      	bgt.n	8000b74 <drawChar+0xb4>
    return;
 8000b2e:	e128      	b.n	8000d82 <drawChar+0x2c2>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8000b30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b34:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b38:	f280 8125 	bge.w	8000d86 <drawChar+0x2c6>
 8000b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b40:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000b44:	f280 811f 	bge.w	8000d86 <drawChar+0x2c6>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000b48:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b4c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f340 8113 	ble.w	8000d86 <drawChar+0x2c6>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000b60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f340 810a 	ble.w	8000d86 <drawChar+0x2c6>
 8000b72:	e000      	b.n	8000b76 <drawChar+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000b74:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000b76:	4b87      	ldr	r3, [pc, #540]	@ (8000d94 <drawChar+0x2d4>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	f083 0301 	eor.w	r3, r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d005      	beq.n	8000b90 <drawChar+0xd0>
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2baf      	cmp	r3, #175	@ 0xaf
 8000b88:	d902      	bls.n	8000b90 <drawChar+0xd0>
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e0ef      	b.n	8000d76 <drawChar+0x2b6>
    uint8_t line;
    if (i == 5)
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	d102      	bne.n	8000ba4 <drawChar+0xe4>
      line = 0x0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	73bb      	strb	r3, [r7, #14]
 8000ba2:	e00b      	b.n	8000bbc <drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8000ba4:	78fa      	ldrb	r2, [r7, #3]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a78      	ldr	r2, [pc, #480]	@ (8000d98 <drawChar+0x2d8>)
 8000bb6:	4413      	add	r3, r2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	737b      	strb	r3, [r7, #13]
 8000bc0:	e0ce      	b.n	8000d60 <drawChar+0x2a0>
      if (line & 0x1) {
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d05e      	beq.n	8000c8a <drawChar+0x1ca>
        if (size == 1) // default size
 8000bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d112      	bne.n	8000bfa <drawChar+0x13a>
        	drawPixel(x+i, y+j, color);
 8000bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b218      	sxth	r0, r3
 8000be2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	883a      	ldrh	r2, [r7, #0]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f7ff fd02 	bl	80005fc <drawPixel>
 8000bf8:	e0a9      	b.n	8000d4e <drawChar+0x28e>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	fb12 f303 	smulbb	r3, r2, r3
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	4413      	add	r3, r2
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	b218      	sxth	r0, r3
 8000c14:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	fb12 f303 	smulbb	r3, r2, r3
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b21c      	sxth	r4, r3
 8000c2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4413      	add	r3, r2
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	b299      	uxth	r1, r3
 8000c40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	fb11 f303 	smulbb	r3, r1, r3
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b21d      	sxth	r5, r3
 8000c52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	88bb      	ldrh	r3, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c62:	b299      	uxth	r1, r3
 8000c64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	fb11 f303 	smulbb	r3, r1, r3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	3301      	adds	r3, #1
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	883b      	ldrh	r3, [r7, #0]
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	462a      	mov	r2, r5
 8000c82:	4621      	mov	r1, r4
 8000c84:	f7ff fd86 	bl	8000794 <fillRect>
 8000c88:	e061      	b.n	8000d4e <drawChar+0x28e>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }
      } else if (bg != color) {
 8000c8a:	8c3a      	ldrh	r2, [r7, #32]
 8000c8c:	883b      	ldrh	r3, [r7, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d05d      	beq.n	8000d4e <drawChar+0x28e>
        if (size == 1) // default size
 8000c92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d112      	bne.n	8000cc0 <drawChar+0x200>
        	drawPixel(x+i, y+j, bg);
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	b218      	sxth	r0, r3
 8000ca8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	8c3a      	ldrh	r2, [r7, #32]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f7ff fc9f 	bl	80005fc <drawPixel>
 8000cbe:	e046      	b.n	8000d4e <drawChar+0x28e>
        else {  // big size
        	fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	fb12 f303 	smulbb	r3, r2, r3
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b218      	sxth	r0, r3
 8000cda:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	fb12 f303 	smulbb	r3, r2, r3
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	b21c      	sxth	r4, r3
 8000cf4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d04:	b299      	uxth	r1, r3
 8000d06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	fb11 f303 	smulbb	r3, r1, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4413      	add	r3, r2
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	b21d      	sxth	r5, r3
 8000d18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d28:	b299      	uxth	r1, r3
 8000d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	fb11 f303 	smulbb	r3, r1, r3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	8c3b      	ldrh	r3, [r7, #32]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	4613      	mov	r3, r2
 8000d46:	462a      	mov	r2, r5
 8000d48:	4621      	mov	r1, r4
 8000d4a:	f7ff fd23 	bl	8000794 <fillRect>
        }
      }
      line >>= 1;
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
 8000d50:	085b      	lsrs	r3, r3, #1
 8000d52:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000d54:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	737b      	strb	r3, [r7, #13]
 8000d60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d64:	2b07      	cmp	r3, #7
 8000d66:	f77f af2c 	ble.w	8000bc2 <drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	3301      	adds	r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	f77f af0b 	ble.w	8000b96 <drawChar+0xd6>
 8000d80:	e002      	b.n	8000d88 <drawChar+0x2c8>
    return;
 8000d82:	bf00      	nop
 8000d84:	e000      	b.n	8000d88 <drawChar+0x2c8>
    return;
 8000d86:	bf00      	nop
    }
  }
}
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000000 	.word	0x20000000
 8000d94:	2000007c 	.word	0x2000007c
 8000d98:	08004894 	.word	0x08004894

08000d9c <drawCharTest>:


void drawCharTest(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	4611      	mov	r1, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	4623      	mov	r3, r4
 8000dac:	80fb      	strh	r3, [r7, #6]
 8000dae:	4603      	mov	r3, r0
 8000db0:	80bb      	strh	r3, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	70fb      	strb	r3, [r7, #3]
 8000db6:	4613      	mov	r3, r2
 8000db8:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000dba:	4bb7      	ldr	r3, [pc, #732]	@ (8001098 <drawCharTest+0x2fc>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d003      	beq.n	8000dca <drawCharTest+0x2e>
 8000dc2:	4bb5      	ldr	r3, [pc, #724]	@ (8001098 <drawCharTest+0x2fc>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d120      	bne.n	8000e0c <drawCharTest+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000dd2:	f280 815a 	bge.w	800108a <drawCharTest+0x2ee>
 8000dd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dda:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000dde:	f280 8154 	bge.w	800108a <drawCharTest+0x2ee>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000de2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000de6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f340 8148 	ble.w	800108a <drawCharTest+0x2ee>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000dfa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000dfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	dc22      	bgt.n	8000e50 <drawCharTest+0xb4>
    return;
 8000e0a:	e13e      	b.n	800108a <drawCharTest+0x2ee>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8000e0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e10:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e14:	f280 813b 	bge.w	800108e <drawCharTest+0x2f2>
 8000e18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e20:	f280 8135 	bge.w	800108e <drawCharTest+0x2f2>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000e24:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e28:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f340 8129 	ble.w	800108e <drawCharTest+0x2f2>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000e3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f340 8120 	ble.w	800108e <drawCharTest+0x2f2>
 8000e4e:	e000      	b.n	8000e52 <drawCharTest+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000e50:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000e52:	4b92      	ldr	r3, [pc, #584]	@ (800109c <drawCharTest+0x300>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	f083 0301 	eor.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <drawCharTest+0xd0>
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	2baf      	cmp	r3, #175	@ 0xaf
 8000e64:	d902      	bls.n	8000e6c <drawCharTest+0xd0>
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	e105      	b.n	800107e <drawCharTest+0x2e2>
    uint8_t line;
    if (i == 5)
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	d102      	bne.n	8000e80 <drawCharTest+0xe4>
      line = 0x0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73bb      	strb	r3, [r7, #14]
 8000e7e:	e00b      	b.n	8000e98 <drawCharTest+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8000e80:	78fa      	ldrb	r2, [r7, #3]
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a83      	ldr	r2, [pc, #524]	@ (80010a0 <drawCharTest+0x304>)
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	737b      	strb	r3, [r7, #13]
 8000e9c:	e0e4      	b.n	8001068 <drawCharTest+0x2cc>
      if (line & 0x1) {
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d073      	beq.n	8000f90 <drawCharTest+0x1f4>
        if (size == 1) // default size
 8000ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d112      	bne.n	8000ed6 <drawCharTest+0x13a>
        	drawPixel(x+i, y+j, color);
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b218      	sxth	r0, r3
 8000ebe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	883a      	ldrh	r2, [r7, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fb94 	bl	80005fc <drawPixel>
 8000ed4:	e047      	b.n	8000f66 <drawCharTest+0x1ca>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), (size + x+(i*size))/10, (size+1 + y+(j*size))/10, color);
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	fb12 f303 	smulbb	r3, r2, r3
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b218      	sxth	r0, r3
 8000ef0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	fb12 f303 	smulbb	r3, r2, r3
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b21c      	sxth	r4, r3
 8000f0a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f12:	441a      	add	r2, r3
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000f1c:	fb01 f303 	mul.w	r3, r1, r3
 8000f20:	4413      	add	r3, r2
 8000f22:	4a60      	ldr	r2, [pc, #384]	@ (80010a4 <drawCharTest+0x308>)
 8000f24:	fb82 1203 	smull	r1, r2, r2, r3
 8000f28:	1092      	asrs	r2, r2, #2
 8000f2a:	17db      	asrs	r3, r3, #31
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b21d      	sxth	r5, r3
 8000f30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f3a:	441a      	add	r2, r3
 8000f3c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f40:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000f44:	fb01 f303 	mul.w	r3, r1, r3
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a56      	ldr	r2, [pc, #344]	@ (80010a4 <drawCharTest+0x308>)
 8000f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f50:	1092      	asrs	r2, r2, #2
 8000f52:	17db      	asrs	r3, r3, #31
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	883b      	ldrh	r3, [r7, #0]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	462a      	mov	r2, r5
 8000f60:	4621      	mov	r1, r4
 8000f62:	f7ff fc17 	bl	8000794 <fillRect>
        	//fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
        }

        drawPixelSize(x + i, y + i, color, size);
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b218      	sxth	r0, r3
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	b219      	sxth	r1, r3
 8000f82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	883a      	ldrh	r2, [r7, #0]
 8000f8a:	f7ff fb8b 	bl	80006a4 <drawPixelSize>
 8000f8e:	e062      	b.n	8001056 <drawCharTest+0x2ba>
      } else if (bg != color) {
 8000f90:	8c3a      	ldrh	r2, [r7, #32]
 8000f92:	883b      	ldrh	r3, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d05e      	beq.n	8001056 <drawCharTest+0x2ba>
        if (size == 1) // default size
 8000f98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d112      	bne.n	8000fc6 <drawCharTest+0x22a>
        	drawPixel(x+i, y+j, bg);
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	4413      	add	r3, r2
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	b218      	sxth	r0, r3
 8000fae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	8c3a      	ldrh	r2, [r7, #32]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fb1c 	bl	80005fc <drawPixel>
 8000fc4:	e047      	b.n	8001056 <drawCharTest+0x2ba>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), (size + x+(i*size))/10, (size+1 + y+(j*size))/10, bg);
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	fb12 f303 	smulbb	r3, r2, r3
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4413      	add	r3, r2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b218      	sxth	r0, r3
 8000fe0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	fb12 f303 	smulbb	r3, r2, r3
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b21c      	sxth	r4, r3
 8000ffa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	441a      	add	r2, r3
 8001004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001008:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800100c:	fb01 f303 	mul.w	r3, r1, r3
 8001010:	4413      	add	r3, r2
 8001012:	4a24      	ldr	r2, [pc, #144]	@ (80010a4 <drawCharTest+0x308>)
 8001014:	fb82 1203 	smull	r1, r2, r2, r3
 8001018:	1092      	asrs	r2, r2, #2
 800101a:	17db      	asrs	r3, r3, #31
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b21d      	sxth	r5, r3
 8001020:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800102a:	441a      	add	r2, r3
 800102c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001030:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8001034:	fb01 f303 	mul.w	r3, r1, r3
 8001038:	4413      	add	r3, r2
 800103a:	4a1a      	ldr	r2, [pc, #104]	@ (80010a4 <drawCharTest+0x308>)
 800103c:	fb82 1203 	smull	r1, r2, r2, r3
 8001040:	1092      	asrs	r2, r2, #2
 8001042:	17db      	asrs	r3, r3, #31
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	b21a      	sxth	r2, r3
 8001048:	8c3b      	ldrh	r3, [r7, #32]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	462a      	mov	r2, r5
 8001050:	4621      	mov	r1, r4
 8001052:	f7ff fb9f 	bl	8000794 <fillRect>
        }
      }
      line >>= 1;
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 800105c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	3301      	adds	r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	737b      	strb	r3, [r7, #13]
 8001068:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800106c:	2b07      	cmp	r3, #7
 800106e:	f77f af16 	ble.w	8000e9e <drawCharTest+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	3301      	adds	r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	2b05      	cmp	r3, #5
 8001084:	f77f aef5 	ble.w	8000e72 <drawCharTest+0xd6>
 8001088:	e002      	b.n	8001090 <drawCharTest+0x2f4>
    return;
 800108a:	bf00      	nop
 800108c:	e000      	b.n	8001090 <drawCharTest+0x2f4>
    return;
 800108e:	bf00      	nop
    }
  }
}
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bdb0      	pop	{r4, r5, r7, pc}
 8001096:	bf00      	nop
 8001098:	20000000 	.word	0x20000000
 800109c:	2000007c 	.word	0x2000007c
 80010a0:	08004894 	.word	0x08004894
 80010a4:	66666667 	.word	0x66666667

080010a8 <ILI9488_printText>:

void ILI9488_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	817b      	strh	r3, [r7, #10]
 80010ba:	460b      	mov	r3, r1
 80010bc:	813b      	strh	r3, [r7, #8]
 80010be:	4613      	mov	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 80010c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	0052      	lsls	r2, r2, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	82fb      	strh	r3, [r7, #22]
 80010d8:	e01a      	b.n	8001110 <ILI9488_printText+0x68>
	{
		drawChar(x+(offset*i), y, text[i],color,bg,size);
 80010da:	8abb      	ldrh	r3, [r7, #20]
 80010dc:	8afa      	ldrh	r2, [r7, #22]
 80010de:	fb12 f303 	smulbb	r3, r2, r3
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	897b      	ldrh	r3, [r7, #10]
 80010e6:	4413      	add	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b218      	sxth	r0, r3
 80010ec:	8afb      	ldrh	r3, [r7, #22]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	781a      	ldrb	r2, [r3, #0]
 80010f4:	88fc      	ldrh	r4, [r7, #6]
 80010f6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80010fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4623      	mov	r3, r4
 8001106:	f7ff fcdb 	bl	8000ac0 <drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800110a:	8afb      	ldrh	r3, [r7, #22]
 800110c:	3301      	adds	r3, #1
 800110e:	82fb      	strh	r3, [r7, #22]
 8001110:	8afb      	ldrh	r3, [r7, #22]
 8001112:	2b27      	cmp	r3, #39	@ 0x27
 8001114:	d805      	bhi.n	8001122 <ILI9488_printText+0x7a>
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1db      	bne.n	80010da <ILI9488_printText+0x32>
	}
}
 8001122:	bf00      	nop
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
	...

0800112c <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	0adb      	lsrs	r3, r3, #11
 800113a:	b29b      	uxth	r3, r3
 800113c:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	115b      	asrs	r3, r3, #5
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001148:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 031f 	and.w	r3, r3, #31
 8001152:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	4613      	mov	r3, r2
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <write16BitColor+0x90>)
 800115e:	fb82 1203 	smull	r1, r2, r2, r3
 8001162:	441a      	add	r2, r3
 8001164:	1112      	asrs	r2, r2, #4
 8001166:	17db      	asrs	r3, r3, #31
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 800116c:	7bba      	ldrb	r2, [r7, #14]
 800116e:	4613      	mov	r3, r2
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	4a12      	ldr	r2, [pc, #72]	@ (80011c0 <write16BitColor+0x94>)
 8001176:	fb82 1203 	smull	r1, r2, r2, r3
 800117a:	441a      	add	r2, r3
 800117c:	1152      	asrs	r2, r2, #5
 800117e:	17db      	asrs	r3, r3, #31
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8001184:	7b7a      	ldrb	r2, [r7, #13]
 8001186:	4613      	mov	r3, r2
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	1a9b      	subs	r3, r3, r2
 800118c:	4a0b      	ldr	r2, [pc, #44]	@ (80011bc <write16BitColor+0x90>)
 800118e:	fb82 1203 	smull	r1, r2, r2, r3
 8001192:	441a      	add	r2, r3
 8001194:	1112      	asrs	r2, r2, #4
 8001196:	17db      	asrs	r3, r3, #31
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	723b      	strb	r3, [r7, #8]
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	727b      	strb	r3, [r7, #9]
 80011a4:	7b7b      	ldrb	r3, [r7, #13]
 80011a6:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2103      	movs	r1, #3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f8c2 	bl	8000338 <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	84210843 	.word	0x84210843
 80011c0:	82082083 	.word	0x82082083

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b09e      	sub	sp, #120	@ 0x78
 80011c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f000 fe7a 	bl	8001ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 fb17 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f000 fbe3 	bl	800199c <MX_GPIO_Init>
  MX_SPI2_Init();
 80011d6:	f000 fb65 	bl	80018a4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80011da:	f000 fba1 	bl	8001920 <MX_SPI3_Init>
				ILI9488_SendData(0x07FF<<3);//BLUE
			}
		}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET); //LCD CHIP SELECT
*/
  ILI9488_Init();
 80011de:	f7ff f8e1 	bl	80003a4 <ILI9488_Init>
HAL_Delay(1000);
 80011e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011e6:	f000 fee1 	bl	8001fac <HAL_Delay>
setRotation(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fc16 	bl	8000a1c <setRotation>
fillScreen(ILI9488_WHITE);
 80011f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80011f4:	f7ff fab4 	bl	8000760 <fillScreen>

   uint16_t touchX = 0, touchY = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80011fe:	2300      	movs	r3, #0
 8001200:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   //the keys:

   fillRect(100, 30,75,75, ILI9488_RED);
 8001204:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	234b      	movs	r3, #75	@ 0x4b
 800120c:	224b      	movs	r2, #75	@ 0x4b
 800120e:	211e      	movs	r1, #30
 8001210:	2064      	movs	r0, #100	@ 0x64
 8001212:	f7ff fabf 	bl	8000794 <fillRect>
   drawCharTest(130, 55, '1', ILI9488_BLACK,ILI9488_RED, 3);
 8001216:	2303      	movs	r3, #3
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	2231      	movs	r2, #49	@ 0x31
 8001224:	2137      	movs	r1, #55	@ 0x37
 8001226:	2082      	movs	r0, #130	@ 0x82
 8001228:	f7ff fdb8 	bl	8000d9c <drawCharTest>
   fillRect(200, 30,75,75, ILI9488_RED);
 800122c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	234b      	movs	r3, #75	@ 0x4b
 8001234:	224b      	movs	r2, #75	@ 0x4b
 8001236:	211e      	movs	r1, #30
 8001238:	20c8      	movs	r0, #200	@ 0xc8
 800123a:	f7ff faab 	bl	8000794 <fillRect>
   drawCharTest(230, 55, '2', ILI9488_BLACK,ILI9488_RED, 3);
 800123e:	2303      	movs	r3, #3
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	2232      	movs	r2, #50	@ 0x32
 800124c:	2137      	movs	r1, #55	@ 0x37
 800124e:	20e6      	movs	r0, #230	@ 0xe6
 8001250:	f7ff fda4 	bl	8000d9c <drawCharTest>
   fillRect(300, 30,75,75, ILI9488_RED);
 8001254:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	234b      	movs	r3, #75	@ 0x4b
 800125c:	224b      	movs	r2, #75	@ 0x4b
 800125e:	211e      	movs	r1, #30
 8001260:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001264:	f7ff fa96 	bl	8000794 <fillRect>
   drawCharTest(319, 55, '3', ILI9488_BLACK,ILI9488_RED, 3);
 8001268:	2303      	movs	r3, #3
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	2233      	movs	r2, #51	@ 0x33
 8001276:	2137      	movs	r1, #55	@ 0x37
 8001278:	f240 103f 	movw	r0, #319	@ 0x13f
 800127c:	f7ff fd8e 	bl	8000d9c <drawCharTest>
   fillRect(100, 130,75,75, ILI9488_RED);
 8001280:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	234b      	movs	r3, #75	@ 0x4b
 8001288:	224b      	movs	r2, #75	@ 0x4b
 800128a:	2182      	movs	r1, #130	@ 0x82
 800128c:	2064      	movs	r0, #100	@ 0x64
 800128e:	f7ff fa81 	bl	8000794 <fillRect>
   drawCharTest(130, 150, '4', ILI9488_BLACK,ILI9488_RED, 3);
 8001292:	2303      	movs	r3, #3
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2234      	movs	r2, #52	@ 0x34
 80012a0:	2196      	movs	r1, #150	@ 0x96
 80012a2:	2082      	movs	r0, #130	@ 0x82
 80012a4:	f7ff fd7a 	bl	8000d9c <drawCharTest>
   fillRect(200, 130,75,75, ILI9488_RED);
 80012a8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	234b      	movs	r3, #75	@ 0x4b
 80012b0:	224b      	movs	r2, #75	@ 0x4b
 80012b2:	2182      	movs	r1, #130	@ 0x82
 80012b4:	20c8      	movs	r0, #200	@ 0xc8
 80012b6:	f7ff fa6d 	bl	8000794 <fillRect>
   drawCharTest(230, 150, '5', ILI9488_BLACK,ILI9488_RED, 3);
 80012ba:	2303      	movs	r3, #3
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2300      	movs	r3, #0
 80012c6:	2235      	movs	r2, #53	@ 0x35
 80012c8:	2196      	movs	r1, #150	@ 0x96
 80012ca:	20e6      	movs	r0, #230	@ 0xe6
 80012cc:	f7ff fd66 	bl	8000d9c <drawCharTest>
   fillRect(300, 130,75,75, ILI9488_RED);
 80012d0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	234b      	movs	r3, #75	@ 0x4b
 80012d8:	224b      	movs	r2, #75	@ 0x4b
 80012da:	2182      	movs	r1, #130	@ 0x82
 80012dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012e0:	f7ff fa58 	bl	8000794 <fillRect>
   drawCharTest(319, 150, '6', ILI9488_BLACK,ILI9488_RED, 3);
 80012e4:	2303      	movs	r3, #3
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	2236      	movs	r2, #54	@ 0x36
 80012f2:	2196      	movs	r1, #150	@ 0x96
 80012f4:	f240 103f 	movw	r0, #319	@ 0x13f
 80012f8:	f7ff fd50 	bl	8000d9c <drawCharTest>
   fillRect(100, 230,75,75, ILI9488_RED);
 80012fc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	234b      	movs	r3, #75	@ 0x4b
 8001304:	224b      	movs	r2, #75	@ 0x4b
 8001306:	21e6      	movs	r1, #230	@ 0xe6
 8001308:	2064      	movs	r0, #100	@ 0x64
 800130a:	f7ff fa43 	bl	8000794 <fillRect>
   drawCharTest(130, 250, '7', ILI9488_BLACK,ILI9488_RED, 3);
 800130e:	2303      	movs	r3, #3
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	2237      	movs	r2, #55	@ 0x37
 800131c:	21fa      	movs	r1, #250	@ 0xfa
 800131e:	2082      	movs	r0, #130	@ 0x82
 8001320:	f7ff fd3c 	bl	8000d9c <drawCharTest>
   fillRect(200, 230,75,75, ILI9488_RED);
 8001324:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	234b      	movs	r3, #75	@ 0x4b
 800132c:	224b      	movs	r2, #75	@ 0x4b
 800132e:	21e6      	movs	r1, #230	@ 0xe6
 8001330:	20c8      	movs	r0, #200	@ 0xc8
 8001332:	f7ff fa2f 	bl	8000794 <fillRect>
   drawCharTest(230, 250, '8', ILI9488_BLACK,ILI9488_RED, 3);
 8001336:	2303      	movs	r3, #3
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	2238      	movs	r2, #56	@ 0x38
 8001344:	21fa      	movs	r1, #250	@ 0xfa
 8001346:	20e6      	movs	r0, #230	@ 0xe6
 8001348:	f7ff fd28 	bl	8000d9c <drawCharTest>
   fillRect(300, 230,75,75, ILI9488_RED);
 800134c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	234b      	movs	r3, #75	@ 0x4b
 8001354:	224b      	movs	r2, #75	@ 0x4b
 8001356:	21e6      	movs	r1, #230	@ 0xe6
 8001358:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800135c:	f7ff fa1a 	bl	8000794 <fillRect>
   drawCharTest(319, 250, '9', ILI9488_BLACK,ILI9488_RED, 3);
 8001360:	2303      	movs	r3, #3
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	2239      	movs	r2, #57	@ 0x39
 800136e:	21fa      	movs	r1, #250	@ 0xfa
 8001370:	f240 103f 	movw	r0, #319	@ 0x13f
 8001374:	f7ff fd12 	bl	8000d9c <drawCharTest>
   //drawChar(135, 61, '1', ILI9488_BLACK,ILI9488_RED, 1);


   uint16_t count = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  char buf[20];
	  char buf1[20];
	  char buf2[20];
	  char buf3[20];

	  	  ILI9488_printText(buf1, 25, 25, ILI9488_WHITE, ILI9488_WHITE, 1);
 800137e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001382:	2301      	movs	r3, #1
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001390:	2219      	movs	r2, #25
 8001392:	2119      	movs	r1, #25
 8001394:	f7ff fe88 	bl	80010a8 <ILI9488_printText>
	  	 ILI9488_printText(buf3, 150, 25, ILI9488_WHITE, ILI9488_WHITE, 1);
 8001398:	1d38      	adds	r0, r7, #4
 800139a:	2301      	movs	r3, #1
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013a8:	2219      	movs	r2, #25
 80013aa:	2196      	movs	r1, #150	@ 0x96
 80013ac:	f7ff fe7c 	bl	80010a8 <ILI9488_printText>
	  	  touchX = getX();
 80013b0:	f000 fd4a 	bl	8001e48 <getX>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	  	  touchY = getY();
 80013ba:	f000 fd4f 	bl	8001e5c <getY>
 80013be:	4603      	mov	r3, r0
 80013c0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	  	  sprintf(buf,"x=%3d y=%3d",touchX,touchY);
 80013c4:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80013c8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80013cc:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80013d0:	49c9      	ldr	r1, [pc, #804]	@ (80016f8 <main+0x534>)
 80013d2:	f002 fda1 	bl	8003f18 <siprintf>
	  	  sprintf(buf1,"x=%3d y=%3d",touchX,touchY);
 80013d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80013da:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80013de:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80013e2:	49c5      	ldr	r1, [pc, #788]	@ (80016f8 <main+0x534>)
 80013e4:	f002 fd98 	bl	8003f18 <siprintf>
	  	  sprintf(buf2,"count=%3d entered=%3d",count,entered[count]);
 80013e8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80013ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	3370      	adds	r3, #112	@ 0x70
 80013f4:	443b      	add	r3, r7
 80013f6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80013fa:	f107 0018 	add.w	r0, r7, #24
 80013fe:	49bf      	ldr	r1, [pc, #764]	@ (80016fc <main+0x538>)
 8001400:	f002 fd8a 	bl	8003f18 <siprintf>
	  	  sprintf(buf3,"count=%3d entered=%3d",count,entered[count]);
 8001404:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001408:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	3370      	adds	r3, #112	@ 0x70
 8001410:	443b      	add	r3, r7
 8001412:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001416:	1d38      	adds	r0, r7, #4
 8001418:	49b8      	ldr	r1, [pc, #736]	@ (80016fc <main+0x538>)
 800141a:	f002 fd7d 	bl	8003f18 <siprintf>

	  	  ILI9488_printText(buf1, 25, 25, ILI9488_BLACK, ILI9488_BLACK, 1);
 800141e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001422:	2301      	movs	r3, #1
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	2300      	movs	r3, #0
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	2219      	movs	r2, #25
 800142e:	2119      	movs	r1, #25
 8001430:	f7ff fe3a 	bl	80010a8 <ILI9488_printText>
	  	  ILI9488_printText(buf3, 150, 25, ILI9488_BLACK, ILI9488_BLACK, 1);
 8001434:	1d38      	adds	r0, r7, #4
 8001436:	2301      	movs	r3, #1
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	2219      	movs	r2, #25
 8001442:	2196      	movs	r1, #150	@ 0x96
 8001444:	f7ff fe30 	bl	80010a8 <ILI9488_printText>
			75, 67
			97, 55
			97, 67
	  	   */

	  	  if(count == 9)
 8001448:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800144c:	2b09      	cmp	r3, #9
 800144e:	f000 81be 	beq.w	80017ce <main+0x60a>
	  		  break;
	  	  if(touchX >= 75 && touchX < 97 && touchY >= 52 && touchY < 67){
 8001452:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001456:	2b4a      	cmp	r3, #74	@ 0x4a
 8001458:	d92a      	bls.n	80014b0 <main+0x2ec>
 800145a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800145e:	2b60      	cmp	r3, #96	@ 0x60
 8001460:	d826      	bhi.n	80014b0 <main+0x2ec>
 8001462:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001466:	2b33      	cmp	r3, #51	@ 0x33
 8001468:	d922      	bls.n	80014b0 <main+0x2ec>
 800146a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800146e:	2b42      	cmp	r3, #66	@ 0x42
 8001470:	d81e      	bhi.n	80014b0 <main+0x2ec>

	  		fillRect(100, 30,75,75, ILI9488_GREEN);
 8001472:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	234b      	movs	r3, #75	@ 0x4b
 800147a:	224b      	movs	r2, #75	@ 0x4b
 800147c:	211e      	movs	r1, #30
 800147e:	2064      	movs	r0, #100	@ 0x64
 8001480:	f7ff f988 	bl	8000794 <fillRect>
	  		HAL_Delay(1000);
 8001484:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001488:	f000 fd90 	bl	8001fac <HAL_Delay>
	  		entered[count] = 1;
 800148c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	3370      	adds	r3, #112	@ 0x70
 8001494:	443b      	add	r3, r7
 8001496:	2201      	movs	r2, #1
 8001498:	f823 2c1c 	strh.w	r2, [r3, #-28]
	  		count++;
 800149c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	  		if(count > 9)
 80014a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80014aa:	2b09      	cmp	r3, #9
 80014ac:	f200 8191 	bhi.w	80017d2 <main+0x60e>
			97, 52
			287, 52
			97, 67
			287, 67
	  	   */
	  	  if(touchX >= 100 && touchX < 287 && touchY >= 52 && touchY < 67){
 80014b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80014b4:	2b63      	cmp	r3, #99	@ 0x63
 80014b6:	d92b      	bls.n	8001510 <main+0x34c>
 80014b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80014bc:	f5b3 7f8f 	cmp.w	r3, #286	@ 0x11e
 80014c0:	d826      	bhi.n	8001510 <main+0x34c>
 80014c2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80014c6:	2b33      	cmp	r3, #51	@ 0x33
 80014c8:	d922      	bls.n	8001510 <main+0x34c>
 80014ca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80014ce:	2b42      	cmp	r3, #66	@ 0x42
 80014d0:	d81e      	bhi.n	8001510 <main+0x34c>

	  		fillRect(200, 30,75,75, ILI9488_GREEN);
 80014d2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	234b      	movs	r3, #75	@ 0x4b
 80014da:	224b      	movs	r2, #75	@ 0x4b
 80014dc:	211e      	movs	r1, #30
 80014de:	20c8      	movs	r0, #200	@ 0xc8
 80014e0:	f7ff f958 	bl	8000794 <fillRect>
	  		HAL_Delay(1000);
 80014e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014e8:	f000 fd60 	bl	8001fac <HAL_Delay>
	  		entered[count] = 2;
 80014ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	3370      	adds	r3, #112	@ 0x70
 80014f4:	443b      	add	r3, r7
 80014f6:	2202      	movs	r2, #2
 80014f8:	f823 2c1c 	strh.w	r2, [r3, #-28]
	  		count++;
 80014fc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001500:	3301      	adds	r3, #1
 8001502:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	  		if(count > 9)
 8001506:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800150a:	2b09      	cmp	r3, #9
 800150c:	f200 8163 	bhi.w	80017d6 <main+0x612>
	  	  /*3rd box:
			299, 52
			390, 52
			299, 67
			390, 167*/
	  	if(touchX >= 299 && touchX < 372 && touchY >= 52 && touchY < 160){
 8001510:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001514:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8001518:	d92c      	bls.n	8001574 <main+0x3b0>
 800151a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800151e:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 8001522:	d227      	bcs.n	8001574 <main+0x3b0>
 8001524:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001528:	2b33      	cmp	r3, #51	@ 0x33
 800152a:	d923      	bls.n	8001574 <main+0x3b0>
 800152c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001530:	2b9f      	cmp	r3, #159	@ 0x9f
 8001532:	d81f      	bhi.n	8001574 <main+0x3b0>
	  		fillRect(300, 30,75,75, ILI9488_GREEN);
 8001534:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	234b      	movs	r3, #75	@ 0x4b
 800153c:	224b      	movs	r2, #75	@ 0x4b
 800153e:	211e      	movs	r1, #30
 8001540:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001544:	f7ff f926 	bl	8000794 <fillRect>
	  		HAL_Delay(1000);
 8001548:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154c:	f000 fd2e 	bl	8001fac <HAL_Delay>
	  		entered[count] = 3;
 8001550:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	3370      	adds	r3, #112	@ 0x70
 8001558:	443b      	add	r3, r7
 800155a:	2203      	movs	r2, #3
 800155c:	f823 2c1c 	strh.w	r2, [r3, #-28]
	  		count++;
 8001560:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001564:	3301      	adds	r3, #1
 8001566:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	  		if(count > 9)
 800156a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800156e:	2b09      	cmp	r3, #9
 8001570:	f200 8133 	bhi.w	80017da <main+0x616>
	  	 * 97, 163
	  	 * 97, 219
	  	 *
	  	 *
	  	 */
	  	if(touchX >= 75 && touchX < 97 && touchY >= 163 && touchY < 219){
 8001574:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001578:	2b4a      	cmp	r3, #74	@ 0x4a
 800157a:	d92a      	bls.n	80015d2 <main+0x40e>
 800157c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001580:	2b60      	cmp	r3, #96	@ 0x60
 8001582:	d826      	bhi.n	80015d2 <main+0x40e>
 8001584:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001588:	2ba2      	cmp	r3, #162	@ 0xa2
 800158a:	d922      	bls.n	80015d2 <main+0x40e>
 800158c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001590:	2bda      	cmp	r3, #218	@ 0xda
 8001592:	d81e      	bhi.n	80015d2 <main+0x40e>
	  		fillRect(100, 130,75,75, ILI9488_GREEN);
 8001594:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	234b      	movs	r3, #75	@ 0x4b
 800159c:	224b      	movs	r2, #75	@ 0x4b
 800159e:	2182      	movs	r1, #130	@ 0x82
 80015a0:	2064      	movs	r0, #100	@ 0x64
 80015a2:	f7ff f8f7 	bl	8000794 <fillRect>
	  		HAL_Delay(1000);
 80015a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015aa:	f000 fcff 	bl	8001fac <HAL_Delay>
	  		entered[count] = 4;
 80015ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	3370      	adds	r3, #112	@ 0x70
 80015b6:	443b      	add	r3, r7
 80015b8:	2204      	movs	r2, #4
 80015ba:	f823 2c1c 	strh.w	r2, [r3, #-28]
	  			  		count++;
 80015be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80015c2:	3301      	adds	r3, #1
 80015c4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  		if(count > 9)
 80015c8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	f200 8106 	bhi.w	80017de <main+0x61a>
	  		  	 * 97, 165
	  		  	 * 262, 165
	  		  	 * 97, 207
	  		  	 * 262, 207
	  		  	 */
	  		  	if(touchX >= 100 && touchX < 262 && touchY >= 165 && touchY < 207){
 80015d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80015d6:	2b63      	cmp	r3, #99	@ 0x63
 80015d8:	d92b      	bls.n	8001632 <main+0x46e>
 80015da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80015de:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80015e2:	d226      	bcs.n	8001632 <main+0x46e>
 80015e4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80015e8:	2ba4      	cmp	r3, #164	@ 0xa4
 80015ea:	d922      	bls.n	8001632 <main+0x46e>
 80015ec:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80015f0:	2bce      	cmp	r3, #206	@ 0xce
 80015f2:	d81e      	bhi.n	8001632 <main+0x46e>
	  		  		fillRect(200, 130,75,75, ILI9488_GREEN);
 80015f4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	234b      	movs	r3, #75	@ 0x4b
 80015fc:	224b      	movs	r2, #75	@ 0x4b
 80015fe:	2182      	movs	r1, #130	@ 0x82
 8001600:	20c8      	movs	r0, #200	@ 0xc8
 8001602:	f7ff f8c7 	bl	8000794 <fillRect>
	  		  	HAL_Delay(1000);
 8001606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800160a:	f000 fccf 	bl	8001fac <HAL_Delay>
	  		  		entered[count] = 5;
 800160e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	3370      	adds	r3, #112	@ 0x70
 8001616:	443b      	add	r3, r7
 8001618:	2205      	movs	r2, #5
 800161a:	f823 2c1c 	strh.w	r2, [r3, #-28]
	  		  		  			  		count++;
 800161e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001622:	3301      	adds	r3, #1
 8001624:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  		  		  			  if(count > 9)
 8001628:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800162c:	2b09      	cmp	r3, #9
 800162e:	f200 80d8 	bhi.w	80017e2 <main+0x61e>
	  		  	  		  	 * 294, 166
	  		  	  		  	 * 381, 167
	  		  	  		  	 * 299, 207
	  		  	  		  	 * 372, 207
	  		  	  		  	 */
	  		  if(touchX >= 299 && touchX < 372 && touchY >= 167 && touchY < 207){
 8001632:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001636:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 800163a:	d92c      	bls.n	8001696 <main+0x4d2>
 800163c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001640:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 8001644:	d227      	bcs.n	8001696 <main+0x4d2>
 8001646:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800164a:	2ba6      	cmp	r3, #166	@ 0xa6
 800164c:	d923      	bls.n	8001696 <main+0x4d2>
 800164e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001652:	2bce      	cmp	r3, #206	@ 0xce
 8001654:	d81f      	bhi.n	8001696 <main+0x4d2>
	  			fillRect(300, 130,75,75, ILI9488_GREEN);
 8001656:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	234b      	movs	r3, #75	@ 0x4b
 800165e:	224b      	movs	r2, #75	@ 0x4b
 8001660:	2182      	movs	r1, #130	@ 0x82
 8001662:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001666:	f7ff f895 	bl	8000794 <fillRect>
	  			HAL_Delay(1000);
 800166a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800166e:	f000 fc9d 	bl	8001fac <HAL_Delay>
	  			entered[count] = 6;
 8001672:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	3370      	adds	r3, #112	@ 0x70
 800167a:	443b      	add	r3, r7
 800167c:	2206      	movs	r2, #6
 800167e:	f823 2c1c 	strh.w	r2, [r3, #-28]
	  				  			  		count++;
 8001682:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001686:	3301      	adds	r3, #1
 8001688:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  				  			  	if(count > 9)
 800168c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001690:	2b09      	cmp	r3, #9
 8001692:	f200 80a8 	bhi.w	80017e6 <main+0x622>
	  			  		  	  		  	 * 75, 242
	  			  		  	  		  	 * 97, 242
	  			  		  	  		  	 * 75, 309
	  			  		  	  		  	 * 97, 309
	  			  		  	  		  	 */
	  		if(touchX >= 75 && touchX < 97 && touchY >= 242 && touchY < 309){
 8001696:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800169a:	2b4a      	cmp	r3, #74	@ 0x4a
 800169c:	d930      	bls.n	8001700 <main+0x53c>
 800169e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80016a2:	2b60      	cmp	r3, #96	@ 0x60
 80016a4:	d82c      	bhi.n	8001700 <main+0x53c>
 80016a6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80016aa:	2bf1      	cmp	r3, #241	@ 0xf1
 80016ac:	d928      	bls.n	8001700 <main+0x53c>
 80016ae:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80016b2:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80016b6:	d823      	bhi.n	8001700 <main+0x53c>
	  			fillRect(100, 230,75,75, ILI9488_GREEN);
 80016b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	234b      	movs	r3, #75	@ 0x4b
 80016c0:	224b      	movs	r2, #75	@ 0x4b
 80016c2:	21e6      	movs	r1, #230	@ 0xe6
 80016c4:	2064      	movs	r0, #100	@ 0x64
 80016c6:	f7ff f865 	bl	8000794 <fillRect>
	  			HAL_Delay(1000);
 80016ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ce:	f000 fc6d 	bl	8001fac <HAL_Delay>
	  			entered[count] = 7;
 80016d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	3370      	adds	r3, #112	@ 0x70
 80016da:	443b      	add	r3, r7
 80016dc:	2207      	movs	r2, #7
 80016de:	f823 2c1c 	strh.w	r2, [r3, #-28]
	  				  			  		count++;
 80016e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80016e6:	3301      	adds	r3, #1
 80016e8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  				  			  	if(count > 9)
 80016ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d87a      	bhi.n	80017ea <main+0x626>
 80016f4:	e004      	b.n	8001700 <main+0x53c>
 80016f6:	bf00      	nop
 80016f8:	08004870 	.word	0x08004870
 80016fc:	0800487c 	.word	0x0800487c
	  			  			  		  	  		  	 * 97, 242
	  			  			  		  	  		  	 * 262, 242
	  			  			  		  	  		  	 * 97, 309
	  			  			  		  	  		  	 * 287, 306
	  			  			  		  	  		  	 */
	  		if(touchX >= 100 && touchX < 280 && touchY >= 242 && touchY < 309){
 8001700:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001704:	2b63      	cmp	r3, #99	@ 0x63
 8001706:	d92b      	bls.n	8001760 <main+0x59c>
 8001708:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800170c:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001710:	d226      	bcs.n	8001760 <main+0x59c>
 8001712:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001716:	2bf1      	cmp	r3, #241	@ 0xf1
 8001718:	d922      	bls.n	8001760 <main+0x59c>
 800171a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800171e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8001722:	d81d      	bhi.n	8001760 <main+0x59c>
	  			fillRect(200, 230,75,75, ILI9488_GREEN);
 8001724:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	234b      	movs	r3, #75	@ 0x4b
 800172c:	224b      	movs	r2, #75	@ 0x4b
 800172e:	21e6      	movs	r1, #230	@ 0xe6
 8001730:	20c8      	movs	r0, #200	@ 0xc8
 8001732:	f7ff f82f 	bl	8000794 <fillRect>
	  			HAL_Delay(1000);
 8001736:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800173a:	f000 fc37 	bl	8001fac <HAL_Delay>
	  			entered[count] = 8;
 800173e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	3370      	adds	r3, #112	@ 0x70
 8001746:	443b      	add	r3, r7
 8001748:	2208      	movs	r2, #8
 800174a:	f823 2c1c 	strh.w	r2, [r3, #-28]
	  				  			  		count++;
 800174e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001752:	3301      	adds	r3, #1
 8001754:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  				  			  	if(count > 9)
 8001758:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800175c:	2b09      	cmp	r3, #9
 800175e:	d846      	bhi.n	80017ee <main+0x62a>
	  		 * 299, 242
	  		 * 381, 242
	  		 * 299, 309
	  		 * 372, 309
	  		 */
	  		if(touchX >= 299 && touchX < 372 && touchY >= 242 && touchY < 309){
 8001760:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001764:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8001768:	f67f ae09 	bls.w	800137e <main+0x1ba>
 800176c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001770:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 8001774:	f4bf ae03 	bcs.w	800137e <main+0x1ba>
 8001778:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800177c:	2bf1      	cmp	r3, #241	@ 0xf1
 800177e:	f67f adfe 	bls.w	800137e <main+0x1ba>
 8001782:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001786:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800178a:	f63f adf8 	bhi.w	800137e <main+0x1ba>
	  			fillRect(300, 230,75,75, ILI9488_GREEN);
 800178e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	234b      	movs	r3, #75	@ 0x4b
 8001796:	224b      	movs	r2, #75	@ 0x4b
 8001798:	21e6      	movs	r1, #230	@ 0xe6
 800179a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800179e:	f7fe fff9 	bl	8000794 <fillRect>
	  			HAL_Delay(1000);
 80017a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017a6:	f000 fc01 	bl	8001fac <HAL_Delay>
	  			entered[count] = 9;
 80017aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	3370      	adds	r3, #112	@ 0x70
 80017b2:	443b      	add	r3, r7
 80017b4:	2209      	movs	r2, #9
 80017b6:	f823 2c1c 	strh.w	r2, [r3, #-28]
	  				  			  		count++;
 80017ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80017be:	3301      	adds	r3, #1
 80017c0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  				  			  	if(count > 9)
 80017c4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	d812      	bhi.n	80017f2 <main+0x62e>
  {
 80017cc:	e5d7      	b.n	800137e <main+0x1ba>
	  		  break;
 80017ce:	bf00      	nop
 80017d0:	e010      	b.n	80017f4 <main+0x630>
	  			  			break;
 80017d2:	bf00      	nop
 80017d4:	e00e      	b.n	80017f4 <main+0x630>
	  			  			break;
 80017d6:	bf00      	nop
 80017d8:	e00c      	b.n	80017f4 <main+0x630>
	  			  			break;
 80017da:	bf00      	nop
 80017dc:	e00a      	b.n	80017f4 <main+0x630>
	  			break;
 80017de:	bf00      	nop
 80017e0:	e008      	b.n	80017f4 <main+0x630>
	  		  		  			  	  			break;
 80017e2:	bf00      	nop
 80017e4:	e006      	b.n	80017f4 <main+0x630>
	  				  			  		  			break;
 80017e6:	bf00      	nop
 80017e8:	e004      	b.n	80017f4 <main+0x630>
	  				  			  		  			break;
 80017ea:	bf00      	nop
 80017ec:	e002      	b.n	80017f4 <main+0x630>
	  				  			  		  			break;
 80017ee:	bf00      	nop
 80017f0:	e000      	b.n	80017f4 <main+0x630>
	  				  			  		  			break;
 80017f2:	bf00      	nop
 80017f4:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3770      	adds	r7, #112	@ 0x70
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b096      	sub	sp, #88	@ 0x58
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	2244      	movs	r2, #68	@ 0x44
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fba2 	bl	8003f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	463b      	mov	r3, r7
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001822:	2000      	movs	r0, #0
 8001824:	f000 fe96 	bl	8002554 <HAL_PWREx_ControlVoltageScaling>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800182e:	f000 f90b 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001832:	2310      	movs	r3, #16
 8001834:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001836:	2301      	movs	r3, #1
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800183e:	2360      	movs	r3, #96	@ 0x60
 8001840:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001842:	2302      	movs	r3, #2
 8001844:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001846:	2301      	movs	r3, #1
 8001848:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800184a:	2301      	movs	r3, #1
 800184c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800184e:	233c      	movs	r3, #60	@ 0x3c
 8001850:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001852:	2302      	movs	r3, #2
 8001854:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001856:	2302      	movs	r3, #2
 8001858:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800185a:	2302      	movs	r3, #2
 800185c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4618      	mov	r0, r3
 8001864:	f000 ff1a 	bl	800269c <HAL_RCC_OscConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800186e:	f000 f8eb 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001872:	230f      	movs	r3, #15
 8001874:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001876:	2303      	movs	r3, #3
 8001878:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	2105      	movs	r1, #5
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fb20 	bl	8002ed0 <HAL_RCC_ClockConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001896:	f000 f8d7 	bl	8001a48 <Error_Handler>
  }
}
 800189a:	bf00      	nop
 800189c:	3758      	adds	r7, #88	@ 0x58
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018aa:	4a1c      	ldr	r2, [pc, #112]	@ (800191c <MX_SPI2_Init+0x78>)
 80018ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018b6:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018bc:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c4:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018f2:	2207      	movs	r2, #7
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <MX_SPI2_Init+0x74>)
 80018fe:	2208      	movs	r2, #8
 8001900:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_SPI2_Init+0x74>)
 8001904:	f001 fd6a 	bl	80033dc <HAL_SPI_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800190e:	f000 f89b 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000094 	.word	0x20000094
 800191c:	40003800 	.word	0x40003800

08001920 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001924:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <MX_SPI3_Init+0x74>)
 8001926:	4a1c      	ldr	r2, [pc, #112]	@ (8001998 <MX_SPI3_Init+0x78>)
 8001928:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800192a:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <MX_SPI3_Init+0x74>)
 800192c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001930:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <MX_SPI3_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001938:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <MX_SPI3_Init+0x74>)
 800193a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800193e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <MX_SPI3_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <MX_SPI3_Init+0x74>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_SPI3_Init+0x74>)
 800194e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001952:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001954:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <MX_SPI3_Init+0x74>)
 8001956:	2218      	movs	r2, #24
 8001958:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <MX_SPI3_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <MX_SPI3_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <MX_SPI3_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MX_SPI3_Init+0x74>)
 800196e:	2207      	movs	r2, #7
 8001970:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <MX_SPI3_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <MX_SPI3_Init+0x74>)
 800197a:	2208      	movs	r2, #8
 800197c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_SPI3_Init+0x74>)
 8001980:	f001 fd2c 	bl	80033dc <HAL_SPI_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800198a:	f000 f85d 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200000f8 	.word	0x200000f8
 8001998:	40003c00 	.word	0x40003c00

0800199c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <MX_GPIO_Init+0xa0>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <MX_GPIO_Init+0xa0>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019be:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <MX_GPIO_Init+0xa0>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <MX_GPIO_Init+0xa0>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	4a1b      	ldr	r2, [pc, #108]	@ (8001a3c <MX_GPIO_Init+0xa0>)
 80019d0:	f043 0308 	orr.w	r3, r3, #8
 80019d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <MX_GPIO_Init+0xa0>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019e8:	4815      	ldr	r0, [pc, #84]	@ (8001a40 <MX_GPIO_Init+0xa4>)
 80019ea:	f000 fd7b 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	21c1      	movs	r1, #193	@ 0xc1
 80019f2:	4814      	ldr	r0, [pc, #80]	@ (8001a44 <MX_GPIO_Init+0xa8>)
 80019f4:	f000 fd76 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80019f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480b      	ldr	r0, [pc, #44]	@ (8001a40 <MX_GPIO_Init+0xa4>)
 8001a12:	f000 fbd5 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 8001a16:	23c1      	movs	r3, #193	@ 0xc1
 8001a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <MX_GPIO_Init+0xa8>)
 8001a2e:	f000 fbc7 	bl	80021c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000c00 	.word	0x48000c00

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <Error_Handler+0x8>

08001a54 <HAL_MspInit>:
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	4a08      	ldr	r2, [pc, #32]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_SPI_MspInit>:
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	@ 0x30
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b74 <HAL_SPI_MspInit+0xd8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d128      	bne.n	8001b10 <HAL_SPI_MspInit+0x74>
 8001abe:	4b2e      	ldr	r3, [pc, #184]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aca:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae2:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	231a      	movs	r3, #26
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afa:	2303      	movs	r3, #3
 8001afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001afe:	2305      	movs	r3, #5
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	481c      	ldr	r0, [pc, #112]	@ (8001b7c <HAL_SPI_MspInit+0xe0>)
 8001b0a:	f000 fb59 	bl	80021c0 <HAL_GPIO_Init>
 8001b0e:	e02c      	b.n	8001b6a <HAL_SPI_MspInit+0xce>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1a      	ldr	r2, [pc, #104]	@ (8001b80 <HAL_SPI_MspInit+0xe4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d127      	bne.n	8001b6a <HAL_SPI_MspInit+0xce>
 8001b1a:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	4a16      	ldr	r2, [pc, #88]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001b20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b26:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	4a10      	ldr	r2, [pc, #64]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_SPI_MspInit+0xdc>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2338      	movs	r3, #56	@ 0x38
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	2302      	movs	r3, #2
 8001b50:	623b      	str	r3, [r7, #32]
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b56:	2303      	movs	r3, #3
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b5a:	2306      	movs	r3, #6
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <HAL_SPI_MspInit+0xe8>)
 8001b66:	f000 fb2b 	bl	80021c0 <HAL_GPIO_Init>
 8001b6a:	bf00      	nop
 8001b6c:	3730      	adds	r7, #48	@ 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40003800 	.word	0x40003800
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	48000c00 	.word	0x48000c00
 8001b80:	40003c00 	.word	0x40003c00
 8001b84:	48000400 	.word	0x48000400

08001b88 <NMI_Handler>:
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <NMI_Handler+0x4>

08001b90 <HardFault_Handler>:
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <MemManage_Handler+0x4>

08001ba0 <BusFault_Handler>:
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <UsageFault_Handler+0x4>

08001bb0 <SVC_Handler>:
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <DebugMon_Handler>:
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <PendSV_Handler>:
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <SysTick_Handler>:
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	f000 f9c5 	bl	8001f6c <HAL_IncTick>
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <_sbrk>:
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
 8001c18:	f002 f9a6 	bl	8003f68 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200a0000 	.word	0x200a0000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	2000015c 	.word	0x2000015c
 8001c50:	200002b0 	.word	0x200002b0

08001c54 <SystemInit>:
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <remap>:
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c82:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c86:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c8a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c8e:	ed87 2a01 	vstr	s4, [r7, #4]
 8001c92:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c9e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001caa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cae:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <getRaw>:
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ce4:	481c      	ldr	r0, [pc, #112]	@ (8001d58 <getRaw+0x84>)
 8001ce6:	f000 fbfd 	bl	80024e4 <HAL_GPIO_WritePin>
 8001cea:	2001      	movs	r0, #1
 8001cec:	f000 f95e 	bl	8001fac <HAL_Delay>
 8001cf0:	1df9      	adds	r1, r7, #7
 8001cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4818      	ldr	r0, [pc, #96]	@ (8001d5c <getRaw+0x88>)
 8001cfa:	f001 fc12 	bl	8003522 <HAL_SPI_Transmit>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	f107 020b 	add.w	r2, r7, #11
 8001d06:	1df9      	adds	r1, r7, #7
 8001d08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	4812      	ldr	r0, [pc, #72]	@ (8001d5c <getRaw+0x88>)
 8001d12:	f001 fd7b 	bl	800380c <HAL_SPI_TransmitReceive>
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	81fb      	strh	r3, [r7, #14]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	f107 020b 	add.w	r2, r7, #11
 8001d22:	1df9      	adds	r1, r7, #7
 8001d24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	480b      	ldr	r0, [pc, #44]	@ (8001d5c <getRaw+0x88>)
 8001d2e:	f001 fd6d 	bl	800380c <HAL_SPI_TransmitReceive>
 8001d32:	7afb      	ldrb	r3, [r7, #11]
 8001d34:	81bb      	strh	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d3c:	4806      	ldr	r0, [pc, #24]	@ (8001d58 <getRaw+0x84>)
 8001d3e:	f000 fbd1 	bl	80024e4 <HAL_GPIO_WritePin>
 8001d42:	89fb      	ldrh	r3, [r7, #14]
 8001d44:	021a      	lsls	r2, r3, #8
 8001d46:	89bb      	ldrh	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	10db      	asrs	r3, r3, #3
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	48000400 	.word	0x48000400
 8001d5c:	200000f8 	.word	0x200000f8

08001d60 <X>:
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	20d0      	movs	r0, #208	@ 0xd0
 8001d68:	f7ff ffb4 	bl	8001cd4 <getRaw>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d76:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8001dc4 <X+0x64>
 8001d7a:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8001dc8 <X+0x68>
 8001d7e:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001dcc <X+0x6c>
 8001d82:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001dd0 <X+0x70>
 8001d86:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8a:	f7ff ff75 	bl	8001c78 <remap>
 8001d8e:	eef0 7a40 	vmov.f32	s15, s0
 8001d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d96:	ee17 3a90 	vmov	r3, s15
 8001d9a:	80fb      	strh	r3, [r7, #6]
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001da2:	3301      	adds	r3, #1
 8001da4:	80fb      	strh	r3, [r7, #6]
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <X+0x58>
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001db2:	d801      	bhi.n	8001db8 <X+0x58>
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	e000      	b.n	8001dba <X+0x5a>
 8001db8:	2300      	movs	r3, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	439f8000 	.word	0x439f8000
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	456d8000 	.word	0x456d8000
 8001dd0:	43960000 	.word	0x43960000

08001dd4 <Y>:
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	2090      	movs	r0, #144	@ 0x90
 8001ddc:	f7ff ff7a 	bl	8001cd4 <getRaw>
 8001de0:	4603      	mov	r3, r0
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dea:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8001e38 <Y+0x64>
 8001dee:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8001e3c <Y+0x68>
 8001df2:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001e40 <Y+0x6c>
 8001df6:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001e44 <Y+0x70>
 8001dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfe:	f7ff ff3b 	bl	8001c78 <remap>
 8001e02:	eef0 7a40 	vmov.f32	s15, s0
 8001e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e0a:	ee17 3a90 	vmov	r3, s15
 8001e0e:	80fb      	strh	r3, [r7, #6]
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 8001e16:	3301      	adds	r3, #1
 8001e18:	80fb      	strh	r3, [r7, #6]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <Y+0x58>
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 8001e26:	d801      	bhi.n	8001e2c <Y+0x58>
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	e000      	b.n	8001e2e <Y+0x5a>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	43ef8000 	.word	0x43ef8000
 8001e3c:	00000000 	.word	0x00000000
 8001e40:	456a6000 	.word	0x456a6000
 8001e44:	43c80000 	.word	0x43c80000

08001e48 <getX>:
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	f7ff ffc1 	bl	8001dd4 <Y>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <getY>:
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	f7ff ff7d 	bl	8001d60 <X>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <Reset_Handler>:
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ea8 <LoopForever+0x2>
 8001e74:	f7ff feee 	bl	8001c54 <SystemInit>
 8001e78:	480c      	ldr	r0, [pc, #48]	@ (8001eac <LoopForever+0x6>)
 8001e7a:	490d      	ldr	r1, [pc, #52]	@ (8001eb0 <LoopForever+0xa>)
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb4 <LoopForever+0xe>)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e002      	b.n	8001e88 <LoopCopyDataInit>

08001e82 <CopyDataInit>:
 8001e82:	58d4      	ldr	r4, [r2, r3]
 8001e84:	50c4      	str	r4, [r0, r3]
 8001e86:	3304      	adds	r3, #4

08001e88 <LoopCopyDataInit>:
 8001e88:	18c4      	adds	r4, r0, r3
 8001e8a:	428c      	cmp	r4, r1
 8001e8c:	d3f9      	bcc.n	8001e82 <CopyDataInit>
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <LoopForever+0x12>)
 8001e90:	4c0a      	ldr	r4, [pc, #40]	@ (8001ebc <LoopForever+0x16>)
 8001e92:	2300      	movs	r3, #0
 8001e94:	e001      	b.n	8001e9a <LoopFillZerobss>

08001e96 <FillZerobss>:
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	3204      	adds	r2, #4

08001e9a <LoopFillZerobss>:
 8001e9a:	42a2      	cmp	r2, r4
 8001e9c:	d3fb      	bcc.n	8001e96 <FillZerobss>
 8001e9e:	f002 f869 	bl	8003f74 <__libc_init_array>
 8001ea2:	f7ff f98f 	bl	80011c4 <main>

08001ea6 <LoopForever>:
 8001ea6:	e7fe      	b.n	8001ea6 <LoopForever>
 8001ea8:	200a0000 	.word	0x200a0000
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20000060 	.word	0x20000060
 8001eb4:	08004e18 	.word	0x08004e18
 8001eb8:	20000060 	.word	0x20000060
 8001ebc:	200002ac 	.word	0x200002ac

08001ec0 <ADC1_IRQHandler>:
 8001ec0:	e7fe      	b.n	8001ec0 <ADC1_IRQHandler>

08001ec2 <HAL_Init>:
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	2300      	movs	r3, #0
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 f943 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f000 f80e 	bl	8001ef4 <HAL_InitTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_Init+0x22>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	e001      	b.n	8001ee8 <HAL_Init+0x26>
 8001ee4:	f7ff fdb6 	bl	8001a54 <HAL_MspInit>
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_InitTick>:
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <HAL_InitTick+0x6c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d023      	beq.n	8001f50 <HAL_InitTick+0x5c>
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <HAL_InitTick+0x70>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <HAL_InitTick+0x6c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f941 	bl	80021a6 <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10f      	bne.n	8001f4a <HAL_InitTick+0x56>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d809      	bhi.n	8001f44 <HAL_InitTick+0x50>
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f38:	f000 f919 	bl	800216e <HAL_NVIC_SetPriority>
 8001f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <HAL_InitTick+0x74>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e007      	b.n	8001f54 <HAL_InitTick+0x60>
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e004      	b.n	8001f54 <HAL_InitTick+0x60>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e001      	b.n	8001f54 <HAL_InitTick+0x60>
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000000c 	.word	0x2000000c
 8001f64:	20000004 	.word	0x20000004
 8001f68:	20000008 	.word	0x20000008

08001f6c <HAL_IncTick>:
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_IncTick+0x20>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	20000160 	.word	0x20000160

08001f94 <HAL_GetTick>:
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_GetTick+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000160 	.word	0x20000160

08001fac <HAL_Delay>:
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	f7ff ffee 	bl	8001f94 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fc4:	d005      	beq.n	8001fd2 <HAL_Delay+0x26>
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_Delay+0x44>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ffde 	bl	8001f94 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d8f7      	bhi.n	8001fd4 <HAL_Delay+0x28>
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000000c 	.word	0x2000000c

08001ff4 <__NVIC_SetPriorityGrouping>:
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_SetPriority>:
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	@ (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
 8002104:	4313      	orrs	r3, r2
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	2300      	movs	r3, #0
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff47 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	f7ff ff5c 	bl	800203c <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffb0 	bl	8002114 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_GPIO_Init>:
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e166      	b.n	800249e <HAL_GPIO_Init+0x2de>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8158 	beq.w	8002498 <HAL_GPIO_Init+0x2d8>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d005      	beq.n	8002200 <HAL_GPIO_Init+0x40>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d130      	bne.n	8002262 <HAL_GPIO_Init+0xa2>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	2201      	movs	r2, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 0201 	and.w	r2, r3, #1
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b03      	cmp	r3, #3
 800226c:	d017      	beq.n	800229e <HAL_GPIO_Init+0xde>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d123      	bne.n	80022f2 <HAL_GPIO_Init+0x132>
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	6939      	ldr	r1, [r7, #16]
 80022ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0203 	and.w	r2, r3, #3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80b2 	beq.w	8002498 <HAL_GPIO_Init+0x2d8>
 8002334:	4b61      	ldr	r3, [pc, #388]	@ (80024bc <HAL_GPIO_Init+0x2fc>)
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	4a60      	ldr	r2, [pc, #384]	@ (80024bc <HAL_GPIO_Init+0x2fc>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002340:	4b5e      	ldr	r3, [pc, #376]	@ (80024bc <HAL_GPIO_Init+0x2fc>)
 8002342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4a5c      	ldr	r2, [pc, #368]	@ (80024c0 <HAL_GPIO_Init+0x300>)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	220f      	movs	r2, #15
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002376:	d02b      	beq.n	80023d0 <HAL_GPIO_Init+0x210>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a52      	ldr	r2, [pc, #328]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d025      	beq.n	80023cc <HAL_GPIO_Init+0x20c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a51      	ldr	r2, [pc, #324]	@ (80024c8 <HAL_GPIO_Init+0x308>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d01f      	beq.n	80023c8 <HAL_GPIO_Init+0x208>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a50      	ldr	r2, [pc, #320]	@ (80024cc <HAL_GPIO_Init+0x30c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d019      	beq.n	80023c4 <HAL_GPIO_Init+0x204>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a4f      	ldr	r2, [pc, #316]	@ (80024d0 <HAL_GPIO_Init+0x310>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_GPIO_Init+0x200>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a4e      	ldr	r2, [pc, #312]	@ (80024d4 <HAL_GPIO_Init+0x314>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00d      	beq.n	80023bc <HAL_GPIO_Init+0x1fc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a4d      	ldr	r2, [pc, #308]	@ (80024d8 <HAL_GPIO_Init+0x318>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <HAL_GPIO_Init+0x1f8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a4c      	ldr	r2, [pc, #304]	@ (80024dc <HAL_GPIO_Init+0x31c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_GPIO_Init+0x1f4>
 80023b0:	2307      	movs	r3, #7
 80023b2:	e00e      	b.n	80023d2 <HAL_GPIO_Init+0x212>
 80023b4:	2308      	movs	r3, #8
 80023b6:	e00c      	b.n	80023d2 <HAL_GPIO_Init+0x212>
 80023b8:	2306      	movs	r3, #6
 80023ba:	e00a      	b.n	80023d2 <HAL_GPIO_Init+0x212>
 80023bc:	2305      	movs	r3, #5
 80023be:	e008      	b.n	80023d2 <HAL_GPIO_Init+0x212>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e006      	b.n	80023d2 <HAL_GPIO_Init+0x212>
 80023c4:	2303      	movs	r3, #3
 80023c6:	e004      	b.n	80023d2 <HAL_GPIO_Init+0x212>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x212>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <HAL_GPIO_Init+0x212>
 80023d0:	2300      	movs	r3, #0
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	f002 0203 	and.w	r2, r2, #3
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	4093      	lsls	r3, r2
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	4937      	ldr	r1, [pc, #220]	@ (80024c0 <HAL_GPIO_Init+0x300>)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80023f0:	4b3b      	ldr	r3, [pc, #236]	@ (80024e0 <HAL_GPIO_Init+0x320>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x254>
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	4a32      	ldr	r2, [pc, #200]	@ (80024e0 <HAL_GPIO_Init+0x320>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6093      	str	r3, [r2, #8]
 800241a:	4b31      	ldr	r3, [pc, #196]	@ (80024e0 <HAL_GPIO_Init+0x320>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x27e>
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4a28      	ldr	r2, [pc, #160]	@ (80024e0 <HAL_GPIO_Init+0x320>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	60d3      	str	r3, [r2, #12]
 8002444:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <HAL_GPIO_Init+0x320>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2a8>
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <HAL_GPIO_Init+0x320>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6053      	str	r3, [r2, #4]
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <HAL_GPIO_Init+0x320>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x2d2>
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <HAL_GPIO_Init+0x320>)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f47f ae91 	bne.w	80021d0 <HAL_GPIO_Init+0x10>
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000
 80024c4:	48000400 	.word	0x48000400
 80024c8:	48000800 	.word	0x48000800
 80024cc:	48000c00 	.word	0x48000c00
 80024d0:	48001000 	.word	0x48001000
 80024d4:	48001400 	.word	0x48001400
 80024d8:	48001800 	.word	0x48001800
 80024dc:	48001c00 	.word	0x48001c00
 80024e0:	40010400 	.word	0x40010400

080024e4 <HAL_GPIO_WritePin>:
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x1e>
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
 8002500:	e002      	b.n	8002508 <HAL_GPIO_WritePin+0x24>
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_PWREx_GetVoltageRange>:
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
 8002518:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <HAL_PWREx_GetVoltageRange+0x3c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002524:	d102      	bne.n	800252c <HAL_PWREx_GetVoltageRange+0x18>
 8002526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800252a:	e00b      	b.n	8002544 <HAL_PWREx_GetVoltageRange+0x30>
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_PWREx_GetVoltageRange+0x3c>)
 800252e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800253a:	d102      	bne.n	8002542 <HAL_PWREx_GetVoltageRange+0x2e>
 800253c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002540:	e000      	b.n	8002544 <HAL_PWREx_GetVoltageRange+0x30>
 8002542:	2300      	movs	r3, #0
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40007000 	.word	0x40007000

08002554 <HAL_PWREx_ControlVoltageScaling>:
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d141      	bne.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0x92>
 8002562:	4b4b      	ldr	r3, [pc, #300]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800256a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800256e:	d131      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x80>
 8002570:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002576:	4a46      	ldr	r2, [pc, #280]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800257c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002580:	4b43      	ldr	r3, [pc, #268]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002588:	4a41      	ldr	r2, [pc, #260]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b40      	ldr	r3, [pc, #256]	@ (8002694 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2232      	movs	r2, #50	@ 0x32
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	4a3f      	ldr	r2, [pc, #252]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e002      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x5a>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b38      	ldr	r3, [pc, #224]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ba:	d102      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f2      	bne.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0x54>
 80025c2:	4b33      	ldr	r3, [pc, #204]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ce:	d158      	bne.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
 80025d0:	2303      	movs	r3, #3
 80025d2:	e057      	b.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x130>
 80025d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025da:	4a2d      	ldr	r2, [pc, #180]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025e4:	e04d      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025ec:	d141      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x11e>
 80025ee:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025fa:	d131      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x10c>
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002602:	4a23      	ldr	r2, [pc, #140]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002608:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002614:	4a1e      	ldr	r2, [pc, #120]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2232      	movs	r2, #50	@ 0x32
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	4a1c      	ldr	r2, [pc, #112]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	0c9b      	lsrs	r3, r3, #18
 800262e:	3301      	adds	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	e002      	b.n	800263a <HAL_PWREx_ControlVoltageScaling+0xe6>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3b01      	subs	r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002646:	d102      	bne.n	800264e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f2      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0xe0>
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800265a:	d112      	bne.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
 800265c:	2303      	movs	r3, #3
 800265e:	e011      	b.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x130>
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002670:	e007      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
 8002672:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800267a:	4a05      	ldr	r2, [pc, #20]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	2300      	movs	r3, #0
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40007000 	.word	0x40007000
 8002694:	20000004 	.word	0x20000004
 8002698:	431bde83 	.word	0x431bde83

0800269c <HAL_RCC_OscConfig>:
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_OscConfig+0x14>
 80026aa:	2301      	movs	r3, #1
 80026ac:	f000 bc08 	b.w	8002ec0 <HAL_RCC_OscConfig+0x824>
 80026b0:	4b96      	ldr	r3, [pc, #600]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	4b94      	ldr	r3, [pc, #592]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80e4 	beq.w	800289a <HAL_RCC_OscConfig+0x1fe>
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4c>
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	f040 808b 	bne.w	80027f6 <HAL_RCC_OscConfig+0x15a>
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	f040 8087 	bne.w	80027f6 <HAL_RCC_OscConfig+0x15a>
 80026e8:	4b88      	ldr	r3, [pc, #544]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_OscConfig+0x64>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_OscConfig+0x64>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e3df      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	4b81      	ldr	r3, [pc, #516]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <HAL_RCC_OscConfig+0x7e>
 8002710:	4b7e      	ldr	r3, [pc, #504]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002718:	e005      	b.n	8002726 <HAL_RCC_OscConfig+0x8a>
 800271a:	4b7c      	ldr	r3, [pc, #496]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800271c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002726:	4293      	cmp	r3, r2
 8002728:	d223      	bcs.n	8002772 <HAL_RCC_OscConfig+0xd6>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fd94 	bl	800325c <RCC_SetFlashLatencyFromMSIRange>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0xa2>
 800273a:	2301      	movs	r3, #1
 800273c:	e3c0      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 800273e:	4b73      	ldr	r3, [pc, #460]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a72      	ldr	r2, [pc, #456]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b70      	ldr	r3, [pc, #448]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	496d      	ldr	r1, [pc, #436]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
 800275c:	4b6b      	ldr	r3, [pc, #428]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	4968      	ldr	r1, [pc, #416]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
 8002770:	e025      	b.n	80027be <HAL_RCC_OscConfig+0x122>
 8002772:	4b66      	ldr	r3, [pc, #408]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a65      	ldr	r2, [pc, #404]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b63      	ldr	r3, [pc, #396]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4960      	ldr	r1, [pc, #384]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
 8002790:	4b5e      	ldr	r3, [pc, #376]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	495b      	ldr	r1, [pc, #364]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_OscConfig+0x122>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fd54 	bl	800325c <RCC_SetFlashLatencyFromMSIRange>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x122>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e380      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 80027be:	f000 fcc1 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b51      	ldr	r3, [pc, #324]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	4950      	ldr	r1, [pc, #320]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a4e      	ldr	r2, [pc, #312]	@ (8002914 <HAL_RCC_OscConfig+0x278>)
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b4e      	ldr	r3, [pc, #312]	@ (8002918 <HAL_RCC_OscConfig+0x27c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fb86 	bl	8001ef4 <HAL_InitTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d052      	beq.n	8002898 <HAL_RCC_OscConfig+0x1fc>
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	e364      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d032      	beq.n	8002864 <HAL_RCC_OscConfig+0x1c8>
 80027fe:	4b43      	ldr	r3, [pc, #268]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a42      	ldr	r2, [pc, #264]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	f7ff fbc3 	bl	8001f94 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x188>
 8002812:	f7ff fbbf 	bl	8001f94 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x188>
 8002820:	2303      	movs	r3, #3
 8002822:	e34d      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002824:	4b39      	ldr	r3, [pc, #228]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x176>
 8002830:	4b36      	ldr	r3, [pc, #216]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a35      	ldr	r2, [pc, #212]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002836:	f043 0308 	orr.w	r3, r3, #8
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b33      	ldr	r3, [pc, #204]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4930      	ldr	r1, [pc, #192]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
 800284e:	4b2f      	ldr	r3, [pc, #188]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	492b      	ldr	r1, [pc, #172]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
 8002862:	e01a      	b.n	800289a <HAL_RCC_OscConfig+0x1fe>
 8002864:	4b29      	ldr	r3, [pc, #164]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a28      	ldr	r2, [pc, #160]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	f7ff fb90 	bl	8001f94 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1ee>
 8002878:	f7ff fb8c 	bl	8001f94 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1ee>
 8002886:	2303      	movs	r3, #3
 8002888:	e31a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x1dc>
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x1fe>
 8002898:	bf00      	nop
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d073      	beq.n	800298e <HAL_RCC_OscConfig+0x2f2>
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_OscConfig+0x21c>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d10e      	bne.n	80028d0 <HAL_RCC_OscConfig+0x234>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x234>
 80028b8:	4b14      	ldr	r3, [pc, #80]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d063      	beq.n	800298c <HAL_RCC_OscConfig+0x2f0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d15f      	bne.n	800298c <HAL_RCC_OscConfig+0x2f0>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e2f7      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x24c>
 80028da:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a0b      	ldr	r2, [pc, #44]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e025      	b.n	8002934 <HAL_RCC_OscConfig+0x298>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f0:	d114      	bne.n	800291c <HAL_RCC_OscConfig+0x280>
 80028f2:	4b06      	ldr	r3, [pc, #24]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a05      	ldr	r2, [pc, #20]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b03      	ldr	r3, [pc, #12]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a02      	ldr	r2, [pc, #8]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e013      	b.n	8002934 <HAL_RCC_OscConfig+0x298>
 800290c:	40021000 	.word	0x40021000
 8002910:	08004d94 	.word	0x08004d94
 8002914:	20000004 	.word	0x20000004
 8002918:	20000008 	.word	0x20000008
 800291c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a9f      	ldr	r2, [pc, #636]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b9d      	ldr	r3, [pc, #628]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 800292e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <HAL_RCC_OscConfig+0x2c8>
 800293c:	f7ff fb2a 	bl	8001f94 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x2ba>
 8002944:	f7ff fb26 	bl	8001f94 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	@ 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x2ba>
 8002952:	2303      	movs	r3, #3
 8002954:	e2b4      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002956:	4b92      	ldr	r3, [pc, #584]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x2a8>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x2f2>
 8002964:	f7ff fb16 	bl	8001f94 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x2e2>
 800296c:	f7ff fb12 	bl	8001f94 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	@ 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x2e2>
 800297a:	2303      	movs	r3, #3
 800297c:	e2a0      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 800297e:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x2d0>
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x2f2>
 800298c:	bf00      	nop
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d060      	beq.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d005      	beq.n	80029ac <HAL_RCC_OscConfig+0x310>
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d119      	bne.n	80029da <HAL_RCC_OscConfig+0x33e>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d116      	bne.n	80029da <HAL_RCC_OscConfig+0x33e>
 80029ac:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_OscConfig+0x328>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_OscConfig+0x328>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e27d      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 80029c4:	4b76      	ldr	r3, [pc, #472]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	4973      	ldr	r1, [pc, #460]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
 80029d8:	e040      	b.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d023      	beq.n	8002a2a <HAL_RCC_OscConfig+0x38e>
 80029e2:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	f7ff fad1 	bl	8001f94 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x36c>
 80029f6:	f7ff facd 	bl	8001f94 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x36c>
 8002a04:	2303      	movs	r3, #3
 8002a06:	e25b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002a08:	4b65      	ldr	r3, [pc, #404]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x35a>
 8002a14:	4b62      	ldr	r3, [pc, #392]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	495f      	ldr	r1, [pc, #380]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
 8002a28:	e018      	b.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
 8002a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	f7ff faad 	bl	8001f94 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x3b4>
 8002a3e:	f7ff faa9 	bl	8001f94 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x3b4>
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e237      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002a50:	4b53      	ldr	r3, [pc, #332]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f0      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3a2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03c      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x446>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01c      	beq.n	8002aaa <HAL_RCC_OscConfig+0x40e>
 8002a70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a76:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002a80:	f7ff fa88 	bl	8001f94 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x3fe>
 8002a88:	f7ff fa84 	bl	8001f94 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3fe>
 8002a96:	2303      	movs	r3, #3
 8002a98:	e212      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002a9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ef      	beq.n	8002a88 <HAL_RCC_OscConfig+0x3ec>
 8002aa8:	e01b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x446>
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002aba:	f7ff fa6b 	bl	8001f94 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x438>
 8002ac2:	f7ff fa67 	bl	8001f94 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x438>
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1f5      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002ad4:	4b32      	ldr	r3, [pc, #200]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ef      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x426>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80a6 	beq.w	8002c3c <HAL_RCC_OscConfig+0x5a0>
 8002af0:	2300      	movs	r3, #0
 8002af2:	77fb      	strb	r3, [r7, #31]
 8002af4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCC_OscConfig+0x480>
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b04:	4a26      	ldr	r2, [pc, #152]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0c:	4b24      	ldr	r3, [pc, #144]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2301      	movs	r3, #1
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <HAL_RCC_OscConfig+0x508>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d118      	bne.n	8002b5a <HAL_RCC_OscConfig+0x4be>
 8002b28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <HAL_RCC_OscConfig+0x508>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba4 <HAL_RCC_OscConfig+0x508>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	f7ff fa2e 	bl	8001f94 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x4b2>
 8002b3c:	f7ff fa2a 	bl	8001f94 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x4b2>
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1b8      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002b4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ba4 <HAL_RCC_OscConfig+0x508>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4a0>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d108      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4d8>
 8002b62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b72:	e029      	b.n	8002bc8 <HAL_RCC_OscConfig+0x52c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	d115      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x50c>
 8002b7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b82:	4a07      	ldr	r2, [pc, #28]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b92:	4a03      	ldr	r2, [pc, #12]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b9c:	e014      	b.n	8002bc8 <HAL_RCC_OscConfig+0x52c>
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	4b9d      	ldr	r3, [pc, #628]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bae:	4a9c      	ldr	r2, [pc, #624]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bb8:	4b99      	ldr	r3, [pc, #612]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbe:	4a98      	ldr	r2, [pc, #608]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d016      	beq.n	8002bfe <HAL_RCC_OscConfig+0x562>
 8002bd0:	f7ff f9e0 	bl	8001f94 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x552>
 8002bd8:	f7ff f9dc 	bl	8001f94 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x552>
 8002bea:	2303      	movs	r3, #3
 8002bec:	e168      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002bee:	4b8c      	ldr	r3, [pc, #560]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ed      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x53c>
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0x58e>
 8002bfe:	f7ff f9c9 	bl	8001f94 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x580>
 8002c06:	f7ff f9c5 	bl	8001f94 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x580>
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e151      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002c1c:	4b80      	ldr	r3, [pc, #512]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ed      	bne.n	8002c06 <HAL_RCC_OscConfig+0x56a>
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5a0>
 8002c30:	4b7b      	ldr	r3, [pc, #492]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	4a7a      	ldr	r2, [pc, #488]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d03c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x626>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01c      	beq.n	8002c8a <HAL_RCC_OscConfig+0x5ee>
 8002c50:	4b73      	ldr	r3, [pc, #460]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c56:	4a72      	ldr	r2, [pc, #456]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002c60:	f7ff f998 	bl	8001f94 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x5de>
 8002c68:	f7ff f994 	bl	8001f94 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x5de>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e122      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002c7a:	4b69      	ldr	r3, [pc, #420]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ef      	beq.n	8002c68 <HAL_RCC_OscConfig+0x5cc>
 8002c88:	e01b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x626>
 8002c8a:	4b65      	ldr	r3, [pc, #404]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c90:	4a63      	ldr	r2, [pc, #396]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002c9a:	f7ff f97b 	bl	8001f94 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x618>
 8002ca2:	f7ff f977 	bl	8001f94 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x618>
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e105      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ef      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x606>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80f9 	beq.w	8002ebe <HAL_RCC_OscConfig+0x822>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	f040 80cf 	bne.w	8002e74 <HAL_RCC_OscConfig+0x7d8>
 8002cd6:	4b52      	ldr	r3, [pc, #328]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f003 0203 	and.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d12c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x6a8>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d123      	bne.n	8002d44 <HAL_RCC_OscConfig+0x6a8>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d11b      	bne.n	8002d44 <HAL_RCC_OscConfig+0x6a8>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d16:	06db      	lsls	r3, r3, #27
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d113      	bne.n	8002d44 <HAL_RCC_OscConfig+0x6a8>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	055b      	lsls	r3, r3, #21
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d109      	bne.n	8002d44 <HAL_RCC_OscConfig+0x6a8>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	065b      	lsls	r3, r3, #25
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d071      	beq.n	8002e28 <HAL_RCC_OscConfig+0x78c>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d068      	beq.n	8002e1c <HAL_RCC_OscConfig+0x780>
 8002d4a:	4b35      	ldr	r3, [pc, #212]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <HAL_RCC_OscConfig+0x6c6>
 8002d56:	4b32      	ldr	r3, [pc, #200]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x6ca>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0ac      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002d66:	4b2e      	ldr	r3, [pc, #184]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002d6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	f7ff f90f 	bl	8001f94 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x6f0>
 8002d7a:	f7ff f90b 	bl	8001f94 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x6f0>
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e099      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002d8c:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x6de>
 8002d98:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	4b21      	ldr	r3, [pc, #132]	@ (8002e24 <HAL_RCC_OscConfig+0x788>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002da8:	3a01      	subs	r2, #1
 8002daa:	0112      	lsls	r2, r2, #4
 8002dac:	4311      	orrs	r1, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002db2:	0212      	lsls	r2, r2, #8
 8002db4:	4311      	orrs	r1, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002dba:	0852      	lsrs	r2, r2, #1
 8002dbc:	3a01      	subs	r2, #1
 8002dbe:	0552      	lsls	r2, r2, #21
 8002dc0:	4311      	orrs	r1, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dc6:	0852      	lsrs	r2, r2, #1
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	0652      	lsls	r2, r2, #25
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dd2:	06d2      	lsls	r2, r2, #27
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	4912      	ldr	r1, [pc, #72]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60cb      	str	r3, [r1, #12]
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0f      	ldr	r2, [pc, #60]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002de2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a0c      	ldr	r2, [pc, #48]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	60d3      	str	r3, [r2, #12]
 8002df4:	f7ff f8ce 	bl	8001f94 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x772>
 8002dfc:	f7ff f8ca 	bl	8001f94 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x772>
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e058      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002e0e:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <HAL_RCC_OscConfig+0x784>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x760>
 8002e1a:	e050      	b.n	8002ebe <HAL_RCC_OscConfig+0x822>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e04f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002e20:	40021000 	.word	0x40021000
 8002e24:	019d800c 	.word	0x019d800c
 8002e28:	4b27      	ldr	r3, [pc, #156]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d144      	bne.n	8002ebe <HAL_RCC_OscConfig+0x822>
 8002e34:	4b24      	ldr	r3, [pc, #144]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a23      	ldr	r2, [pc, #140]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b21      	ldr	r3, [pc, #132]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a20      	ldr	r2, [pc, #128]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	60d3      	str	r3, [r2, #12]
 8002e4c:	f7ff f8a2 	bl	8001f94 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x7ca>
 8002e54:	f7ff f89e 	bl	8001f94 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x7ca>
 8002e62:	2303      	movs	r3, #3
 8002e64:	e02c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002e66:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x7b8>
 8002e72:	e024      	b.n	8002ebe <HAL_RCC_OscConfig+0x822>
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d01f      	beq.n	8002eba <HAL_RCC_OscConfig+0x81e>
 8002e7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a12      	ldr	r2, [pc, #72]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002e80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	f7ff f885 	bl	8001f94 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x804>
 8002e8e:	f7ff f881 	bl	8001f94 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x804>
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e00f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002ea0:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x7f2>
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4905      	ldr	r1, [pc, #20]	@ (8002ec8 <HAL_RCC_OscConfig+0x82c>)
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <HAL_RCC_OscConfig+0x830>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
 8002eb8:	e001      	b.n	8002ebe <HAL_RCC_OscConfig+0x822>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCC_OscConfig+0x824>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	feeefffc 	.word	0xfeeefffc

08002ed0 <HAL_RCC_ClockConfig>:
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x18>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e11d      	b.n	8003124 <HAL_RCC_ClockConfig+0x254>
 8002ee8:	4b90      	ldr	r3, [pc, #576]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d910      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x48>
 8002ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 020f 	bic.w	r2, r3, #15
 8002efe:	498b      	ldr	r1, [pc, #556]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
 8002f06:	4b89      	ldr	r3, [pc, #548]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x48>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e105      	b.n	8003124 <HAL_RCC_ClockConfig+0x254>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d010      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x76>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	4b81      	ldr	r3, [pc, #516]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d908      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x76>
 8002f34:	4b7e      	ldr	r3, [pc, #504]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	497b      	ldr	r1, [pc, #492]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d079      	beq.n	8003046 <HAL_RCC_ClockConfig+0x176>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d11e      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xc8>
 8002f5a:	4b75      	ldr	r3, [pc, #468]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x9a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0dc      	b.n	8003124 <HAL_RCC_ClockConfig+0x254>
 8002f6a:	f000 f9d1 	bl	8003310 <RCC_GetSysClockFreqFromPLLSource>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a70      	ldr	r2, [pc, #448]	@ (8003134 <HAL_RCC_ClockConfig+0x264>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d946      	bls.n	8003004 <HAL_RCC_ClockConfig+0x134>
 8002f76:	4b6e      	ldr	r3, [pc, #440]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d140      	bne.n	8003004 <HAL_RCC_ClockConfig+0x134>
 8002f82:	4b6b      	ldr	r3, [pc, #428]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f8a:	4a69      	ldr	r2, [pc, #420]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f90:	6093      	str	r3, [r2, #8]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e035      	b.n	8003004 <HAL_RCC_ClockConfig+0x134>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xe0>
 8002fa0:	4b63      	ldr	r3, [pc, #396]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d115      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x108>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0b9      	b.n	8003124 <HAL_RCC_ClockConfig+0x254>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
 8002fb8:	4b5d      	ldr	r3, [pc, #372]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x108>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0ad      	b.n	8003124 <HAL_RCC_ClockConfig+0x254>
 8002fc8:	4b59      	ldr	r3, [pc, #356]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x108>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0a5      	b.n	8003124 <HAL_RCC_ClockConfig+0x254>
 8002fd8:	f000 f8b4 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4a55      	ldr	r2, [pc, #340]	@ (8003134 <HAL_RCC_ClockConfig+0x264>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d90f      	bls.n	8003004 <HAL_RCC_ClockConfig+0x134>
 8002fe4:	4b52      	ldr	r3, [pc, #328]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_RCC_ClockConfig+0x134>
 8002ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	2380      	movs	r3, #128	@ 0x80
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	4b4a      	ldr	r3, [pc, #296]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 0203 	bic.w	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4947      	ldr	r1, [pc, #284]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
 8003016:	f7fe ffbd 	bl	8001f94 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]
 800301c:	e00a      	b.n	8003034 <HAL_RCC_ClockConfig+0x164>
 800301e:	f7fe ffb9 	bl	8001f94 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_ClockConfig+0x164>
 8003030:	2303      	movs	r3, #3
 8003032:	e077      	b.n	8003124 <HAL_RCC_ClockConfig+0x254>
 8003034:	4b3e      	ldr	r3, [pc, #248]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 020c 	and.w	r2, r3, #12
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	429a      	cmp	r2, r3
 8003044:	d1eb      	bne.n	800301e <HAL_RCC_ClockConfig+0x14e>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b80      	cmp	r3, #128	@ 0x80
 800304a:	d105      	bne.n	8003058 <HAL_RCC_ClockConfig+0x188>
 800304c:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4a37      	ldr	r2, [pc, #220]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8003052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003056:	6093      	str	r3, [r2, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d010      	beq.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	4b31      	ldr	r3, [pc, #196]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003070:	429a      	cmp	r2, r3
 8003072:	d208      	bcs.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
 8003074:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	492b      	ldr	r1, [pc, #172]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
 8003086:	4b29      	ldr	r3, [pc, #164]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d210      	bcs.n	80030b6 <HAL_RCC_ClockConfig+0x1e6>
 8003094:	4b25      	ldr	r3, [pc, #148]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 020f 	bic.w	r2, r3, #15
 800309c:	4923      	ldr	r1, [pc, #140]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
 80030a4:	4b21      	ldr	r3, [pc, #132]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x1e6>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e036      	b.n	8003124 <HAL_RCC_ClockConfig+0x254>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x204>
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4918      	ldr	r1, [pc, #96]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x224>
 80030e0:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4910      	ldr	r1, [pc, #64]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]
 80030f4:	f000 f826 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	490c      	ldr	r1, [pc, #48]	@ (8003138 <HAL_RCC_ClockConfig+0x268>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
 8003110:	4a0a      	ldr	r2, [pc, #40]	@ (800313c <HAL_RCC_ClockConfig+0x26c>)
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <HAL_RCC_ClockConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe feeb 	bl	8001ef4 <HAL_InitTick>
 800311e:	4603      	mov	r3, r0
 8003120:	73fb      	strb	r3, [r7, #15]
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40022000 	.word	0x40022000
 8003130:	40021000 	.word	0x40021000
 8003134:	04c4b400 	.word	0x04c4b400
 8003138:	08004d94 	.word	0x08004d94
 800313c:	20000004 	.word	0x20000004
 8003140:	20000008 	.word	0x20000008

08003144 <HAL_RCC_GetSysClockFreq>:
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	@ 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	4b3e      	ldr	r3, [pc, #248]	@ (800324c <HAL_RCC_GetSysClockFreq+0x108>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	4b3b      	ldr	r3, [pc, #236]	@ (800324c <HAL_RCC_GetSysClockFreq+0x108>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x34>
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d121      	bne.n	80031b6 <HAL_RCC_GetSysClockFreq+0x72>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d11e      	bne.n	80031b6 <HAL_RCC_GetSysClockFreq+0x72>
 8003178:	4b34      	ldr	r3, [pc, #208]	@ (800324c <HAL_RCC_GetSysClockFreq+0x108>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <HAL_RCC_GetSysClockFreq+0x50>
 8003184:	4b31      	ldr	r3, [pc, #196]	@ (800324c <HAL_RCC_GetSysClockFreq+0x108>)
 8003186:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	e005      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x5c>
 8003194:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <HAL_RCC_GetSysClockFreq+0x108>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10d      	bne.n	80031cc <HAL_RCC_GetSysClockFreq+0x88>
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x88>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d102      	bne.n	80031c2 <HAL_RCC_GetSysClockFreq+0x7e>
 80031bc:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x110>)
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	e004      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x88>
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_GetSysClockFreq+0x88>
 80031c8:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x114>)
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d134      	bne.n	800323c <HAL_RCC_GetSysClockFreq+0xf8>
 80031d2:	4b1e      	ldr	r3, [pc, #120]	@ (800324c <HAL_RCC_GetSysClockFreq+0x108>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0xa6>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d003      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0xac>
 80031e8:	e005      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0xb2>
 80031ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x110>)
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e005      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0xb8>
 80031f0:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x114>)
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e002      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0xb8>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	bf00      	nop
 80031fc:	4b13      	ldr	r3, [pc, #76]	@ (800324c <HAL_RCC_GetSysClockFreq+0x108>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3301      	adds	r3, #1
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <HAL_RCC_GetSysClockFreq+0x108>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	fb03 f202 	mul.w	r2, r3, r2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	4b0a      	ldr	r3, [pc, #40]	@ (800324c <HAL_RCC_GetSysClockFreq+0x108>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	0e5b      	lsrs	r3, r3, #25
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	3301      	adds	r3, #1
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	@ 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	08004da4 	.word	0x08004da4
 8003254:	00f42400 	.word	0x00f42400
 8003258:	007a1200 	.word	0x007a1200

0800325c <RCC_SetFlashLatencyFromMSIRange>:
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x20>
 8003274:	f7ff f94e 	bl	8002514 <HAL_PWREx_GetVoltageRange>
 8003278:	6178      	str	r0, [r7, #20]
 800327a:	e014      	b.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 800327c:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	4a21      	ldr	r2, [pc, #132]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003286:	6593      	str	r3, [r2, #88]	@ 0x58
 8003288:	4b1f      	ldr	r3, [pc, #124]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f7ff f93e 	bl	8002514 <HAL_PWREx_GetVoltageRange>
 8003298:	6178      	str	r0, [r7, #20]
 800329a:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329e:	4a1a      	ldr	r2, [pc, #104]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ac:	d10b      	bne.n	80032c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b80      	cmp	r3, #128	@ 0x80
 80032b2:	d913      	bls.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80032b8:	d902      	bls.n	80032c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
 80032ba:	2302      	movs	r3, #2
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	e00d      	b.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x80>
 80032c0:	2301      	movs	r3, #1
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	e00a      	b.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x80>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80032ca:	d902      	bls.n	80032d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
 80032cc:	2302      	movs	r3, #2
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	e004      	b.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x80>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b70      	cmp	r3, #112	@ 0x70
 80032d6:	d101      	bne.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x80>
 80032d8:	2301      	movs	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 020f 	bic.w	r2, r3, #15
 80032e4:	4909      	ldr	r1, [pc, #36]	@ (800330c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
 80032ec:	4b07      	ldr	r3, [pc, #28]	@ (800330c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d001      	beq.n	80032fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0xa4>
 80032fe:	2300      	movs	r3, #0
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	40022000 	.word	0x40022000

08003310 <RCC_GetSysClockFreqFromPLLSource>:
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	4b2d      	ldr	r3, [pc, #180]	@ (80033cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d00b      	beq.n	800333e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d825      	bhi.n	8003378 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d008      	beq.n	8003344 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d11f      	bne.n	8003378 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003338:	4b25      	ldr	r3, [pc, #148]	@ (80033d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	e01f      	b.n	800337e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 800333e:	4b25      	ldr	r3, [pc, #148]	@ (80033d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	e01c      	b.n	800337e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003344:	4b21      	ldr	r3, [pc, #132]	@ (80033cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003350:	4b1e      	ldr	r3, [pc, #120]	@ (80033cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e005      	b.n	800336c <RCC_GetSysClockFreqFromPLLSource+0x5c>
 8003360:	4b1a      	ldr	r3, [pc, #104]	@ (80033cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	4a1a      	ldr	r2, [pc, #104]	@ (80033d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	e002      	b.n	800337e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	bf00      	nop
 800337e:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	3301      	adds	r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	fb03 f202 	mul.w	r2, r3, r2
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	0e5b      	lsrs	r3, r3, #25
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	3301      	adds	r3, #1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40021000 	.word	0x40021000
 80033d0:	00f42400 	.word	0x00f42400
 80033d4:	007a1200 	.word	0x007a1200
 80033d8:	08004da4 	.word	0x08004da4

080033dc <HAL_SPI_Init>:
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_SPI_Init+0x12>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e095      	b.n	800351a <HAL_SPI_Init+0x13e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <HAL_SPI_Init+0x2c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033fe:	d009      	beq.n	8003414 <HAL_SPI_Init+0x38>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
 8003406:	e005      	b.n	8003414 <HAL_SPI_Init+0x38>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	611a      	str	r2, [r3, #16]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	615a      	str	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	629a      	str	r2, [r3, #40]	@ 0x28
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_SPI_Init+0x58>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fb34 	bl	8001a9c <HAL_SPI_MspInit>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003454:	d902      	bls.n	800345c <HAL_SPI_Init+0x80>
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e002      	b.n	8003462 <HAL_SPI_Init+0x86>
 800345c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800346a:	d007      	beq.n	800347c <HAL_SPI_Init+0xa0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003474:	d002      	beq.n	800347c <HAL_SPI_Init+0xa0>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	629a      	str	r2, [r3, #40]	@ 0x28
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034be:	ea42 0103 	orr.w	r1, r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	f003 0204 	and.w	r2, r3, #4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80034f8:	ea42 0103 	orr.w	r1, r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003518:	2300      	movs	r3, #0
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SPI_Transmit>:
 8003522:	b580      	push	{r7, lr}
 8003524:	b088      	sub	sp, #32
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
 8003532:	2300      	movs	r3, #0
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_SPI_Transmit+0x22>
 8003540:	2302      	movs	r3, #2
 8003542:	e15f      	b.n	8003804 <HAL_SPI_Transmit+0x2e2>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800354c:	f7fe fd22 	bl	8001f94 <HAL_GetTick>
 8003550:	61b8      	str	r0, [r7, #24]
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	82fb      	strh	r3, [r7, #22]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d002      	beq.n	8003568 <HAL_SPI_Transmit+0x46>
 8003562:	2302      	movs	r3, #2
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e148      	b.n	80037fa <HAL_SPI_Transmit+0x2d8>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SPI_Transmit+0x52>
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_SPI_Transmit+0x58>
 8003574:	2301      	movs	r3, #1
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e13f      	b.n	80037fa <HAL_SPI_Transmit+0x2d8>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2203      	movs	r2, #3
 800357e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	661a      	str	r2, [r3, #96]	@ 0x60
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	639a      	str	r2, [r3, #56]	@ 0x38
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	64da      	str	r2, [r3, #76]	@ 0x4c
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c4:	d10f      	bne.n	80035e6 <HAL_SPI_Transmit+0xc4>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b40      	cmp	r3, #64	@ 0x40
 80035f2:	d007      	beq.n	8003604 <HAL_SPI_Transmit+0xe2>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800360c:	d94f      	bls.n	80036ae <HAL_SPI_Transmit+0x18c>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_SPI_Transmit+0xfa>
 8003616:	8afb      	ldrh	r3, [r7, #22]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d142      	bne.n	80036a2 <HAL_SPI_Transmit+0x180>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	639a      	str	r2, [r3, #56]	@ 0x38
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003640:	e02f      	b.n	80036a2 <HAL_SPI_Transmit+0x180>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b02      	cmp	r3, #2
 800364e:	d112      	bne.n	8003676 <HAL_SPI_Transmit+0x154>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003654:	881a      	ldrh	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60da      	str	r2, [r3, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	1c9a      	adds	r2, r3, #2
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	@ 0x38
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003674:	e015      	b.n	80036a2 <HAL_SPI_Transmit+0x180>
 8003676:	f7fe fc8d 	bl	8001f94 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d803      	bhi.n	800368e <HAL_SPI_Transmit+0x16c>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800368c:	d102      	bne.n	8003694 <HAL_SPI_Transmit+0x172>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <HAL_SPI_Transmit+0x180>
 8003694:	2303      	movs	r3, #3
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80036a0:	e0ab      	b.n	80037fa <HAL_SPI_Transmit+0x2d8>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ca      	bne.n	8003642 <HAL_SPI_Transmit+0x120>
 80036ac:	e080      	b.n	80037b0 <HAL_SPI_Transmit+0x28e>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_SPI_Transmit+0x19a>
 80036b6:	8afb      	ldrh	r3, [r7, #22]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d174      	bne.n	80037a6 <HAL_SPI_Transmit+0x284>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d912      	bls.n	80036ec <HAL_SPI_Transmit+0x1ca>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d6:	1c9a      	adds	r2, r3, #2
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	639a      	str	r2, [r3, #56]	@ 0x38
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b02      	subs	r3, #2
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036ea:	e05c      	b.n	80037a6 <HAL_SPI_Transmit+0x284>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	7812      	ldrb	r2, [r2, #0]
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	639a      	str	r2, [r3, #56]	@ 0x38
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003712:	e048      	b.n	80037a6 <HAL_SPI_Transmit+0x284>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d12b      	bne.n	800377a <HAL_SPI_Transmit+0x258>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d912      	bls.n	8003752 <HAL_SPI_Transmit+0x230>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	1c9a      	adds	r2, r3, #2
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b02      	subs	r3, #2
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003750:	e029      	b.n	80037a6 <HAL_SPI_Transmit+0x284>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	639a      	str	r2, [r3, #56]	@ 0x38
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003778:	e015      	b.n	80037a6 <HAL_SPI_Transmit+0x284>
 800377a:	f7fe fc0b 	bl	8001f94 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d803      	bhi.n	8003792 <HAL_SPI_Transmit+0x270>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003790:	d102      	bne.n	8003798 <HAL_SPI_Transmit+0x276>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <HAL_SPI_Transmit+0x284>
 8003798:	2303      	movs	r3, #3
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80037a4:	e029      	b.n	80037fa <HAL_SPI_Transmit+0x2d8>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1b1      	bne.n	8003714 <HAL_SPI_Transmit+0x1f2>
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	6839      	ldr	r1, [r7, #0]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fb69 	bl	8003e8c <SPI_EndRxTxTransaction>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_SPI_Transmit+0x2a4>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_SPI_Transmit+0x2c2>
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_SPI_Transmit+0x2d0>
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e003      	b.n	80037fa <HAL_SPI_Transmit+0x2d8>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	4618      	mov	r0, r3
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_SPI_TransmitReceive>:
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	807b      	strh	r3, [r7, #2]
 800381a:	2301      	movs	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
 800381e:	2300      	movs	r3, #0
 8003820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x26>
 800382e:	2302      	movs	r3, #2
 8003830:	e20a      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x43c>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800383a:	f7fe fbab 	bl	8001f94 <HAL_GetTick>
 800383e:	61f8      	str	r0, [r7, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003846:	76fb      	strb	r3, [r7, #27]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	827b      	strh	r3, [r7, #18]
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	823b      	strh	r3, [r7, #16]
 8003856:	7efb      	ldrb	r3, [r7, #27]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d00e      	beq.n	800387a <HAL_SPI_TransmitReceive+0x6e>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003862:	d106      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x66>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x66>
 800386c:	7efb      	ldrb	r3, [r7, #27]
 800386e:	2b04      	cmp	r3, #4
 8003870:	d003      	beq.n	800387a <HAL_SPI_TransmitReceive+0x6e>
 8003872:	2302      	movs	r3, #2
 8003874:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003878:	e1e0      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x430>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_SPI_TransmitReceive+0x80>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_SPI_TransmitReceive+0x80>
 8003886:	887b      	ldrh	r3, [r7, #2]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d103      	bne.n	8003894 <HAL_SPI_TransmitReceive+0x88>
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003892:	e1d3      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x430>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b04      	cmp	r3, #4
 800389e:	d003      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x9c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2205      	movs	r2, #5
 80038a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038ea:	d802      	bhi.n	80038f2 <HAL_SPI_TransmitReceive+0xe6>
 80038ec:	8a3b      	ldrh	r3, [r7, #16]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d908      	bls.n	8003904 <HAL_SPI_TransmitReceive+0xf8>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	e007      	b.n	8003914 <HAL_SPI_TransmitReceive+0x108>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391e:	2b40      	cmp	r3, #64	@ 0x40
 8003920:	d007      	beq.n	8003932 <HAL_SPI_TransmitReceive+0x126>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800393a:	f240 8081 	bls.w	8003a40 <HAL_SPI_TransmitReceive+0x234>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_SPI_TransmitReceive+0x140>
 8003946:	8a7b      	ldrh	r3, [r7, #18]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d16d      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x21c>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003950:	881a      	ldrh	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	1c9a      	adds	r2, r3, #2
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	639a      	str	r2, [r3, #56]	@ 0x38
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003970:	e05a      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x21c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b02      	cmp	r3, #2
 800397e:	d11b      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x1ac>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d016      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x1ac>
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	2b01      	cmp	r3, #1
 800398e:	d113      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x1ac>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	1c9a      	adds	r2, r3, #2
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d11c      	bne.n	8003a00 <HAL_SPI_TransmitReceive+0x1f4>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_SPI_TransmitReceive+0x1f4>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	b292      	uxth	r2, r2
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	1c9a      	adds	r2, r3, #2
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80039fc:	2301      	movs	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a00:	f7fe fac8 	bl	8001f94 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d80b      	bhi.n	8003a28 <HAL_SPI_TransmitReceive+0x21c>
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a16:	d007      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x21c>
 8003a18:	2303      	movs	r3, #3
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003a26:	e109      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x430>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d19f      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x166>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d199      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x166>
 8003a3e:	e0e3      	b.n	8003c08 <HAL_SPI_TransmitReceive+0x3fc>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x244>
 8003a48:	8a7b      	ldrh	r3, [r7, #18]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f040 80cf 	bne.w	8003bee <HAL_SPI_TransmitReceive+0x3e2>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d912      	bls.n	8003a80 <HAL_SPI_TransmitReceive+0x274>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	1c9a      	adds	r2, r3, #2
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b02      	subs	r3, #2
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a7e:	e0b6      	b.n	8003bee <HAL_SPI_TransmitReceive+0x3e2>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003aa6:	e0a2      	b.n	8003bee <HAL_SPI_TransmitReceive+0x3e2>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d134      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x314>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02f      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x314>
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d12c      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x314>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d912      	bls.n	8003af6 <HAL_SPI_TransmitReceive+0x2ea>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad4:	881a      	ldrh	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60da      	str	r2, [r3, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b02      	subs	r3, #2
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003af4:	e012      	b.n	8003b1c <HAL_SPI_TransmitReceive+0x310>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	7812      	ldrb	r2, [r2, #0]
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d148      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x3b4>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d042      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x3b4>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d923      	bls.n	8003b8e <HAL_SPI_TransmitReceive+0x382>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	b292      	uxth	r2, r2
 8003b52:	801a      	strh	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b02      	subs	r3, #2
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d81f      	bhi.n	8003bbc <HAL_SPI_TransmitReceive+0x3b0>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	e016      	b.n	8003bbc <HAL_SPI_TransmitReceive+0x3b0>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f103 020c 	add.w	r2, r3, #12
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc0:	f7fe f9e8 	bl	8001f94 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d803      	bhi.n	8003bd8 <HAL_SPI_TransmitReceive+0x3cc>
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bd6:	d102      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x3d2>
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x3e2>
 8003bde:	2303      	movs	r3, #3
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003bec:	e026      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x430>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f af57 	bne.w	8003aa8 <HAL_SPI_TransmitReceive+0x29c>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f47f af50 	bne.w	8003aa8 <HAL_SPI_TransmitReceive+0x29c>
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f93d 	bl	8003e8c <SPI_EndRxTxTransaction>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0x418>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	661a      	str	r2, [r3, #96]	@ 0x60
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x428>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c32:	e003      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x430>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003c44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3728      	adds	r7, #40	@ 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <SPI_WaitFlagStateUntilTimeout>:
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71fb      	strb	r3, [r7, #7]
 8003c60:	f7fe f998 	bl	8001f94 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	f7fe f990 	bl	8001f94 <HAL_GetTick>
 8003c74:	61b8      	str	r0, [r7, #24]
 8003c76:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	015b      	lsls	r3, r3, #5
 8003c7c:	0d1b      	lsrs	r3, r3, #20
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e054      	b.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c8e:	d050      	beq.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003c90:	f7fe f980 	bl	8001f94 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d902      	bls.n	8003ca6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d13d      	bne.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cbe:	d111      	bne.n	8003ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc8:	d004      	beq.n	8003cd4 <SPI_WaitFlagStateUntilTimeout+0x84>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd2:	d107      	bne.n	8003ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cec:	d10f      	bne.n	8003d0e <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e017      	b.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0x102>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d19b      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x38>
 8003d50:	2300      	movs	r3, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000004 	.word	0x20000004

08003d60 <SPI_WaitFifoStateUntilTimeout>:
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	@ 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]
 8003d72:	f7fe f90f 	bl	8001f94 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	4413      	add	r3, r2
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d82:	f7fe f907 	bl	8001f94 <HAL_GetTick>
 8003d86:	6238      	str	r0, [r7, #32]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	4b3d      	ldr	r3, [pc, #244]	@ (8003e88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00da      	lsls	r2, r3, #3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	0d1b      	lsrs	r3, r3, #20
 8003da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e060      	b.n	8003e6c <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003db0:	d107      	bne.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	75fb      	strb	r3, [r7, #23]
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dc8:	d050      	beq.n	8003e6c <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003dca:	f7fe f8e3 	bl	8001f94 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d902      	bls.n	8003de0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d13d      	bne.n	8003e5c <SPI_WaitFifoStateUntilTimeout+0xfc>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003df8:	d111      	bne.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e02:	d004      	beq.n	8003e0e <SPI_WaitFifoStateUntilTimeout+0xae>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0c:	d107      	bne.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e26:	d10f      	bne.n	8003e48 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e010      	b.n	8003e7e <SPI_WaitFifoStateUntilTimeout+0x11e>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0x106>
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4013      	ands	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d196      	bne.n	8003daa <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3728      	adds	r7, #40	@ 0x28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000004 	.word	0x20000004

08003e8c <SPI_EndRxTxTransaction>:
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff ff5b 	bl	8003d60 <SPI_WaitFifoStateUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <SPI_EndRxTxTransaction+0x34>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e027      	b.n	8003f10 <SPI_EndRxTxTransaction+0x84>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2180      	movs	r1, #128	@ 0x80
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff fec0 	bl	8003c50 <SPI_WaitFlagStateUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <SPI_EndRxTxTransaction+0x5a>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e014      	b.n	8003f10 <SPI_EndRxTxTransaction+0x84>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff ff34 	bl	8003d60 <SPI_WaitFifoStateUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <SPI_EndRxTxTransaction+0x82>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e000      	b.n	8003f10 <SPI_EndRxTxTransaction+0x84>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <siprintf>:
 8003f18:	b40e      	push	{r1, r2, r3}
 8003f1a:	b500      	push	{lr}
 8003f1c:	b09c      	sub	sp, #112	@ 0x70
 8003f1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f20:	9002      	str	r0, [sp, #8]
 8003f22:	9006      	str	r0, [sp, #24]
 8003f24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f28:	4809      	ldr	r0, [pc, #36]	@ (8003f50 <siprintf+0x38>)
 8003f2a:	9107      	str	r1, [sp, #28]
 8003f2c:	9104      	str	r1, [sp, #16]
 8003f2e:	4909      	ldr	r1, [pc, #36]	@ (8003f54 <siprintf+0x3c>)
 8003f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f34:	9105      	str	r1, [sp, #20]
 8003f36:	6800      	ldr	r0, [r0, #0]
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	a902      	add	r1, sp, #8
 8003f3c:	f000 f89c 	bl	8004078 <_svfiprintf_r>
 8003f40:	9b02      	ldr	r3, [sp, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	b01c      	add	sp, #112	@ 0x70
 8003f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f4c:	b003      	add	sp, #12
 8003f4e:	4770      	bx	lr
 8003f50:	20000010 	.word	0x20000010
 8003f54:	ffff0208 	.word	0xffff0208

08003f58 <memset>:
 8003f58:	4402      	add	r2, r0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d100      	bne.n	8003f62 <memset+0xa>
 8003f60:	4770      	bx	lr
 8003f62:	f803 1b01 	strb.w	r1, [r3], #1
 8003f66:	e7f9      	b.n	8003f5c <memset+0x4>

08003f68 <__errno>:
 8003f68:	4b01      	ldr	r3, [pc, #4]	@ (8003f70 <__errno+0x8>)
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000010 	.word	0x20000010

08003f74 <__libc_init_array>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	4d0d      	ldr	r5, [pc, #52]	@ (8003fac <__libc_init_array+0x38>)
 8003f78:	4c0d      	ldr	r4, [pc, #52]	@ (8003fb0 <__libc_init_array+0x3c>)
 8003f7a:	1b64      	subs	r4, r4, r5
 8003f7c:	10a4      	asrs	r4, r4, #2
 8003f7e:	2600      	movs	r6, #0
 8003f80:	42a6      	cmp	r6, r4
 8003f82:	d109      	bne.n	8003f98 <__libc_init_array+0x24>
 8003f84:	4d0b      	ldr	r5, [pc, #44]	@ (8003fb4 <__libc_init_array+0x40>)
 8003f86:	4c0c      	ldr	r4, [pc, #48]	@ (8003fb8 <__libc_init_array+0x44>)
 8003f88:	f000 fc66 	bl	8004858 <_init>
 8003f8c:	1b64      	subs	r4, r4, r5
 8003f8e:	10a4      	asrs	r4, r4, #2
 8003f90:	2600      	movs	r6, #0
 8003f92:	42a6      	cmp	r6, r4
 8003f94:	d105      	bne.n	8003fa2 <__libc_init_array+0x2e>
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
 8003f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9c:	4798      	blx	r3
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7ee      	b.n	8003f80 <__libc_init_array+0xc>
 8003fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa6:	4798      	blx	r3
 8003fa8:	3601      	adds	r6, #1
 8003faa:	e7f2      	b.n	8003f92 <__libc_init_array+0x1e>
 8003fac:	08004e10 	.word	0x08004e10
 8003fb0:	08004e10 	.word	0x08004e10
 8003fb4:	08004e10 	.word	0x08004e10
 8003fb8:	08004e14 	.word	0x08004e14

08003fbc <__retarget_lock_acquire_recursive>:
 8003fbc:	4770      	bx	lr

08003fbe <__retarget_lock_release_recursive>:
 8003fbe:	4770      	bx	lr

08003fc0 <__ssputs_r>:
 8003fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc4:	688e      	ldr	r6, [r1, #8]
 8003fc6:	461f      	mov	r7, r3
 8003fc8:	42be      	cmp	r6, r7
 8003fca:	680b      	ldr	r3, [r1, #0]
 8003fcc:	4682      	mov	sl, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	4690      	mov	r8, r2
 8003fd2:	d82d      	bhi.n	8004030 <__ssputs_r+0x70>
 8003fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003fdc:	d026      	beq.n	800402c <__ssputs_r+0x6c>
 8003fde:	6965      	ldr	r5, [r4, #20]
 8003fe0:	6909      	ldr	r1, [r1, #16]
 8003fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fe6:	eba3 0901 	sub.w	r9, r3, r1
 8003fea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fee:	1c7b      	adds	r3, r7, #1
 8003ff0:	444b      	add	r3, r9
 8003ff2:	106d      	asrs	r5, r5, #1
 8003ff4:	429d      	cmp	r5, r3
 8003ff6:	bf38      	it	cc
 8003ff8:	461d      	movcc	r5, r3
 8003ffa:	0553      	lsls	r3, r2, #21
 8003ffc:	d527      	bpl.n	800404e <__ssputs_r+0x8e>
 8003ffe:	4629      	mov	r1, r5
 8004000:	f000 f958 	bl	80042b4 <_malloc_r>
 8004004:	4606      	mov	r6, r0
 8004006:	b360      	cbz	r0, 8004062 <__ssputs_r+0xa2>
 8004008:	6921      	ldr	r1, [r4, #16]
 800400a:	464a      	mov	r2, r9
 800400c:	f000 fbc4 	bl	8004798 <memcpy>
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	6126      	str	r6, [r4, #16]
 800401e:	6165      	str	r5, [r4, #20]
 8004020:	444e      	add	r6, r9
 8004022:	eba5 0509 	sub.w	r5, r5, r9
 8004026:	6026      	str	r6, [r4, #0]
 8004028:	60a5      	str	r5, [r4, #8]
 800402a:	463e      	mov	r6, r7
 800402c:	42be      	cmp	r6, r7
 800402e:	d900      	bls.n	8004032 <__ssputs_r+0x72>
 8004030:	463e      	mov	r6, r7
 8004032:	6820      	ldr	r0, [r4, #0]
 8004034:	4632      	mov	r2, r6
 8004036:	4641      	mov	r1, r8
 8004038:	f000 fb84 	bl	8004744 <memmove>
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	1b9b      	subs	r3, r3, r6
 8004040:	60a3      	str	r3, [r4, #8]
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	4433      	add	r3, r6
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	2000      	movs	r0, #0
 800404a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404e:	462a      	mov	r2, r5
 8004050:	f000 fb4a 	bl	80046e8 <_realloc_r>
 8004054:	4606      	mov	r6, r0
 8004056:	2800      	cmp	r0, #0
 8004058:	d1e0      	bne.n	800401c <__ssputs_r+0x5c>
 800405a:	6921      	ldr	r1, [r4, #16]
 800405c:	4650      	mov	r0, sl
 800405e:	f000 fba9 	bl	80047b4 <_free_r>
 8004062:	230c      	movs	r3, #12
 8004064:	f8ca 3000 	str.w	r3, [sl]
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004074:	e7e9      	b.n	800404a <__ssputs_r+0x8a>
	...

08004078 <_svfiprintf_r>:
 8004078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	4698      	mov	r8, r3
 800407e:	898b      	ldrh	r3, [r1, #12]
 8004080:	061b      	lsls	r3, r3, #24
 8004082:	b09d      	sub	sp, #116	@ 0x74
 8004084:	4607      	mov	r7, r0
 8004086:	460d      	mov	r5, r1
 8004088:	4614      	mov	r4, r2
 800408a:	d510      	bpl.n	80040ae <_svfiprintf_r+0x36>
 800408c:	690b      	ldr	r3, [r1, #16]
 800408e:	b973      	cbnz	r3, 80040ae <_svfiprintf_r+0x36>
 8004090:	2140      	movs	r1, #64	@ 0x40
 8004092:	f000 f90f 	bl	80042b4 <_malloc_r>
 8004096:	6028      	str	r0, [r5, #0]
 8004098:	6128      	str	r0, [r5, #16]
 800409a:	b930      	cbnz	r0, 80040aa <_svfiprintf_r+0x32>
 800409c:	230c      	movs	r3, #12
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040a4:	b01d      	add	sp, #116	@ 0x74
 80040a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040aa:	2340      	movs	r3, #64	@ 0x40
 80040ac:	616b      	str	r3, [r5, #20]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80040b2:	2320      	movs	r3, #32
 80040b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80040bc:	2330      	movs	r3, #48	@ 0x30
 80040be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800425c <_svfiprintf_r+0x1e4>
 80040c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040c6:	f04f 0901 	mov.w	r9, #1
 80040ca:	4623      	mov	r3, r4
 80040cc:	469a      	mov	sl, r3
 80040ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040d2:	b10a      	cbz	r2, 80040d8 <_svfiprintf_r+0x60>
 80040d4:	2a25      	cmp	r2, #37	@ 0x25
 80040d6:	d1f9      	bne.n	80040cc <_svfiprintf_r+0x54>
 80040d8:	ebba 0b04 	subs.w	fp, sl, r4
 80040dc:	d00b      	beq.n	80040f6 <_svfiprintf_r+0x7e>
 80040de:	465b      	mov	r3, fp
 80040e0:	4622      	mov	r2, r4
 80040e2:	4629      	mov	r1, r5
 80040e4:	4638      	mov	r0, r7
 80040e6:	f7ff ff6b 	bl	8003fc0 <__ssputs_r>
 80040ea:	3001      	adds	r0, #1
 80040ec:	f000 80a7 	beq.w	800423e <_svfiprintf_r+0x1c6>
 80040f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040f2:	445a      	add	r2, fp
 80040f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80040f6:	f89a 3000 	ldrb.w	r3, [sl]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 809f 	beq.w	800423e <_svfiprintf_r+0x1c6>
 8004100:	2300      	movs	r3, #0
 8004102:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800410a:	f10a 0a01 	add.w	sl, sl, #1
 800410e:	9304      	str	r3, [sp, #16]
 8004110:	9307      	str	r3, [sp, #28]
 8004112:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004116:	931a      	str	r3, [sp, #104]	@ 0x68
 8004118:	4654      	mov	r4, sl
 800411a:	2205      	movs	r2, #5
 800411c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004120:	484e      	ldr	r0, [pc, #312]	@ (800425c <_svfiprintf_r+0x1e4>)
 8004122:	f7fc f86d 	bl	8000200 <memchr>
 8004126:	9a04      	ldr	r2, [sp, #16]
 8004128:	b9d8      	cbnz	r0, 8004162 <_svfiprintf_r+0xea>
 800412a:	06d0      	lsls	r0, r2, #27
 800412c:	bf44      	itt	mi
 800412e:	2320      	movmi	r3, #32
 8004130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004134:	0711      	lsls	r1, r2, #28
 8004136:	bf44      	itt	mi
 8004138:	232b      	movmi	r3, #43	@ 0x2b
 800413a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800413e:	f89a 3000 	ldrb.w	r3, [sl]
 8004142:	2b2a      	cmp	r3, #42	@ 0x2a
 8004144:	d015      	beq.n	8004172 <_svfiprintf_r+0xfa>
 8004146:	9a07      	ldr	r2, [sp, #28]
 8004148:	4654      	mov	r4, sl
 800414a:	2000      	movs	r0, #0
 800414c:	f04f 0c0a 	mov.w	ip, #10
 8004150:	4621      	mov	r1, r4
 8004152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004156:	3b30      	subs	r3, #48	@ 0x30
 8004158:	2b09      	cmp	r3, #9
 800415a:	d94b      	bls.n	80041f4 <_svfiprintf_r+0x17c>
 800415c:	b1b0      	cbz	r0, 800418c <_svfiprintf_r+0x114>
 800415e:	9207      	str	r2, [sp, #28]
 8004160:	e014      	b.n	800418c <_svfiprintf_r+0x114>
 8004162:	eba0 0308 	sub.w	r3, r0, r8
 8004166:	fa09 f303 	lsl.w	r3, r9, r3
 800416a:	4313      	orrs	r3, r2
 800416c:	9304      	str	r3, [sp, #16]
 800416e:	46a2      	mov	sl, r4
 8004170:	e7d2      	b.n	8004118 <_svfiprintf_r+0xa0>
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	1d19      	adds	r1, r3, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	9103      	str	r1, [sp, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	bfbb      	ittet	lt
 800417e:	425b      	neglt	r3, r3
 8004180:	f042 0202 	orrlt.w	r2, r2, #2
 8004184:	9307      	strge	r3, [sp, #28]
 8004186:	9307      	strlt	r3, [sp, #28]
 8004188:	bfb8      	it	lt
 800418a:	9204      	strlt	r2, [sp, #16]
 800418c:	7823      	ldrb	r3, [r4, #0]
 800418e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004190:	d10a      	bne.n	80041a8 <_svfiprintf_r+0x130>
 8004192:	7863      	ldrb	r3, [r4, #1]
 8004194:	2b2a      	cmp	r3, #42	@ 0x2a
 8004196:	d132      	bne.n	80041fe <_svfiprintf_r+0x186>
 8004198:	9b03      	ldr	r3, [sp, #12]
 800419a:	1d1a      	adds	r2, r3, #4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	9203      	str	r2, [sp, #12]
 80041a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041a4:	3402      	adds	r4, #2
 80041a6:	9305      	str	r3, [sp, #20]
 80041a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800426c <_svfiprintf_r+0x1f4>
 80041ac:	7821      	ldrb	r1, [r4, #0]
 80041ae:	2203      	movs	r2, #3
 80041b0:	4650      	mov	r0, sl
 80041b2:	f7fc f825 	bl	8000200 <memchr>
 80041b6:	b138      	cbz	r0, 80041c8 <_svfiprintf_r+0x150>
 80041b8:	9b04      	ldr	r3, [sp, #16]
 80041ba:	eba0 000a 	sub.w	r0, r0, sl
 80041be:	2240      	movs	r2, #64	@ 0x40
 80041c0:	4082      	lsls	r2, r0
 80041c2:	4313      	orrs	r3, r2
 80041c4:	3401      	adds	r4, #1
 80041c6:	9304      	str	r3, [sp, #16]
 80041c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041cc:	4824      	ldr	r0, [pc, #144]	@ (8004260 <_svfiprintf_r+0x1e8>)
 80041ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041d2:	2206      	movs	r2, #6
 80041d4:	f7fc f814 	bl	8000200 <memchr>
 80041d8:	2800      	cmp	r0, #0
 80041da:	d036      	beq.n	800424a <_svfiprintf_r+0x1d2>
 80041dc:	4b21      	ldr	r3, [pc, #132]	@ (8004264 <_svfiprintf_r+0x1ec>)
 80041de:	bb1b      	cbnz	r3, 8004228 <_svfiprintf_r+0x1b0>
 80041e0:	9b03      	ldr	r3, [sp, #12]
 80041e2:	3307      	adds	r3, #7
 80041e4:	f023 0307 	bic.w	r3, r3, #7
 80041e8:	3308      	adds	r3, #8
 80041ea:	9303      	str	r3, [sp, #12]
 80041ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ee:	4433      	add	r3, r6
 80041f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80041f2:	e76a      	b.n	80040ca <_svfiprintf_r+0x52>
 80041f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80041f8:	460c      	mov	r4, r1
 80041fa:	2001      	movs	r0, #1
 80041fc:	e7a8      	b.n	8004150 <_svfiprintf_r+0xd8>
 80041fe:	2300      	movs	r3, #0
 8004200:	3401      	adds	r4, #1
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	4619      	mov	r1, r3
 8004206:	f04f 0c0a 	mov.w	ip, #10
 800420a:	4620      	mov	r0, r4
 800420c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004210:	3a30      	subs	r2, #48	@ 0x30
 8004212:	2a09      	cmp	r2, #9
 8004214:	d903      	bls.n	800421e <_svfiprintf_r+0x1a6>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0c6      	beq.n	80041a8 <_svfiprintf_r+0x130>
 800421a:	9105      	str	r1, [sp, #20]
 800421c:	e7c4      	b.n	80041a8 <_svfiprintf_r+0x130>
 800421e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004222:	4604      	mov	r4, r0
 8004224:	2301      	movs	r3, #1
 8004226:	e7f0      	b.n	800420a <_svfiprintf_r+0x192>
 8004228:	ab03      	add	r3, sp, #12
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	462a      	mov	r2, r5
 800422e:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <_svfiprintf_r+0x1f0>)
 8004230:	a904      	add	r1, sp, #16
 8004232:	4638      	mov	r0, r7
 8004234:	f3af 8000 	nop.w
 8004238:	1c42      	adds	r2, r0, #1
 800423a:	4606      	mov	r6, r0
 800423c:	d1d6      	bne.n	80041ec <_svfiprintf_r+0x174>
 800423e:	89ab      	ldrh	r3, [r5, #12]
 8004240:	065b      	lsls	r3, r3, #25
 8004242:	f53f af2d 	bmi.w	80040a0 <_svfiprintf_r+0x28>
 8004246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004248:	e72c      	b.n	80040a4 <_svfiprintf_r+0x2c>
 800424a:	ab03      	add	r3, sp, #12
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	462a      	mov	r2, r5
 8004250:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <_svfiprintf_r+0x1f0>)
 8004252:	a904      	add	r1, sp, #16
 8004254:	4638      	mov	r0, r7
 8004256:	f000 f91b 	bl	8004490 <_printf_i>
 800425a:	e7ed      	b.n	8004238 <_svfiprintf_r+0x1c0>
 800425c:	08004dd4 	.word	0x08004dd4
 8004260:	08004dde 	.word	0x08004dde
 8004264:	00000000 	.word	0x00000000
 8004268:	08003fc1 	.word	0x08003fc1
 800426c:	08004dda 	.word	0x08004dda

08004270 <sbrk_aligned>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4e0f      	ldr	r6, [pc, #60]	@ (80042b0 <sbrk_aligned+0x40>)
 8004274:	460c      	mov	r4, r1
 8004276:	6831      	ldr	r1, [r6, #0]
 8004278:	4605      	mov	r5, r0
 800427a:	b911      	cbnz	r1, 8004282 <sbrk_aligned+0x12>
 800427c:	f000 fa7c 	bl	8004778 <_sbrk_r>
 8004280:	6030      	str	r0, [r6, #0]
 8004282:	4621      	mov	r1, r4
 8004284:	4628      	mov	r0, r5
 8004286:	f000 fa77 	bl	8004778 <_sbrk_r>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	d103      	bne.n	8004296 <sbrk_aligned+0x26>
 800428e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004292:	4620      	mov	r0, r4
 8004294:	bd70      	pop	{r4, r5, r6, pc}
 8004296:	1cc4      	adds	r4, r0, #3
 8004298:	f024 0403 	bic.w	r4, r4, #3
 800429c:	42a0      	cmp	r0, r4
 800429e:	d0f8      	beq.n	8004292 <sbrk_aligned+0x22>
 80042a0:	1a21      	subs	r1, r4, r0
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 fa68 	bl	8004778 <_sbrk_r>
 80042a8:	3001      	adds	r0, #1
 80042aa:	d1f2      	bne.n	8004292 <sbrk_aligned+0x22>
 80042ac:	e7ef      	b.n	800428e <sbrk_aligned+0x1e>
 80042ae:	bf00      	nop
 80042b0:	200002a0 	.word	0x200002a0

080042b4 <_malloc_r>:
 80042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b8:	1ccd      	adds	r5, r1, #3
 80042ba:	f025 0503 	bic.w	r5, r5, #3
 80042be:	3508      	adds	r5, #8
 80042c0:	2d0c      	cmp	r5, #12
 80042c2:	bf38      	it	cc
 80042c4:	250c      	movcc	r5, #12
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	4606      	mov	r6, r0
 80042ca:	db01      	blt.n	80042d0 <_malloc_r+0x1c>
 80042cc:	42a9      	cmp	r1, r5
 80042ce:	d904      	bls.n	80042da <_malloc_r+0x26>
 80042d0:	230c      	movs	r3, #12
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	2000      	movs	r0, #0
 80042d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043b0 <_malloc_r+0xfc>
 80042de:	f000 f9f7 	bl	80046d0 <__malloc_lock>
 80042e2:	f8d8 3000 	ldr.w	r3, [r8]
 80042e6:	461c      	mov	r4, r3
 80042e8:	bb44      	cbnz	r4, 800433c <_malloc_r+0x88>
 80042ea:	4629      	mov	r1, r5
 80042ec:	4630      	mov	r0, r6
 80042ee:	f7ff ffbf 	bl	8004270 <sbrk_aligned>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	4604      	mov	r4, r0
 80042f6:	d158      	bne.n	80043aa <_malloc_r+0xf6>
 80042f8:	f8d8 4000 	ldr.w	r4, [r8]
 80042fc:	4627      	mov	r7, r4
 80042fe:	2f00      	cmp	r7, #0
 8004300:	d143      	bne.n	800438a <_malloc_r+0xd6>
 8004302:	2c00      	cmp	r4, #0
 8004304:	d04b      	beq.n	800439e <_malloc_r+0xea>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	4639      	mov	r1, r7
 800430a:	4630      	mov	r0, r6
 800430c:	eb04 0903 	add.w	r9, r4, r3
 8004310:	f000 fa32 	bl	8004778 <_sbrk_r>
 8004314:	4581      	cmp	r9, r0
 8004316:	d142      	bne.n	800439e <_malloc_r+0xea>
 8004318:	6821      	ldr	r1, [r4, #0]
 800431a:	1a6d      	subs	r5, r5, r1
 800431c:	4629      	mov	r1, r5
 800431e:	4630      	mov	r0, r6
 8004320:	f7ff ffa6 	bl	8004270 <sbrk_aligned>
 8004324:	3001      	adds	r0, #1
 8004326:	d03a      	beq.n	800439e <_malloc_r+0xea>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	442b      	add	r3, r5
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	f8d8 3000 	ldr.w	r3, [r8]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	bb62      	cbnz	r2, 8004390 <_malloc_r+0xdc>
 8004336:	f8c8 7000 	str.w	r7, [r8]
 800433a:	e00f      	b.n	800435c <_malloc_r+0xa8>
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	1b52      	subs	r2, r2, r5
 8004340:	d420      	bmi.n	8004384 <_malloc_r+0xd0>
 8004342:	2a0b      	cmp	r2, #11
 8004344:	d917      	bls.n	8004376 <_malloc_r+0xc2>
 8004346:	1961      	adds	r1, r4, r5
 8004348:	42a3      	cmp	r3, r4
 800434a:	6025      	str	r5, [r4, #0]
 800434c:	bf18      	it	ne
 800434e:	6059      	strne	r1, [r3, #4]
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	bf08      	it	eq
 8004354:	f8c8 1000 	streq.w	r1, [r8]
 8004358:	5162      	str	r2, [r4, r5]
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	4630      	mov	r0, r6
 800435e:	f000 f9bd 	bl	80046dc <__malloc_unlock>
 8004362:	f104 000b 	add.w	r0, r4, #11
 8004366:	1d23      	adds	r3, r4, #4
 8004368:	f020 0007 	bic.w	r0, r0, #7
 800436c:	1ac2      	subs	r2, r0, r3
 800436e:	bf1c      	itt	ne
 8004370:	1a1b      	subne	r3, r3, r0
 8004372:	50a3      	strne	r3, [r4, r2]
 8004374:	e7af      	b.n	80042d6 <_malloc_r+0x22>
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	42a3      	cmp	r3, r4
 800437a:	bf0c      	ite	eq
 800437c:	f8c8 2000 	streq.w	r2, [r8]
 8004380:	605a      	strne	r2, [r3, #4]
 8004382:	e7eb      	b.n	800435c <_malloc_r+0xa8>
 8004384:	4623      	mov	r3, r4
 8004386:	6864      	ldr	r4, [r4, #4]
 8004388:	e7ae      	b.n	80042e8 <_malloc_r+0x34>
 800438a:	463c      	mov	r4, r7
 800438c:	687f      	ldr	r7, [r7, #4]
 800438e:	e7b6      	b.n	80042fe <_malloc_r+0x4a>
 8004390:	461a      	mov	r2, r3
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	42a3      	cmp	r3, r4
 8004396:	d1fb      	bne.n	8004390 <_malloc_r+0xdc>
 8004398:	2300      	movs	r3, #0
 800439a:	6053      	str	r3, [r2, #4]
 800439c:	e7de      	b.n	800435c <_malloc_r+0xa8>
 800439e:	230c      	movs	r3, #12
 80043a0:	6033      	str	r3, [r6, #0]
 80043a2:	4630      	mov	r0, r6
 80043a4:	f000 f99a 	bl	80046dc <__malloc_unlock>
 80043a8:	e794      	b.n	80042d4 <_malloc_r+0x20>
 80043aa:	6005      	str	r5, [r0, #0]
 80043ac:	e7d6      	b.n	800435c <_malloc_r+0xa8>
 80043ae:	bf00      	nop
 80043b0:	200002a4 	.word	0x200002a4

080043b4 <_printf_common>:
 80043b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	4616      	mov	r6, r2
 80043ba:	4698      	mov	r8, r3
 80043bc:	688a      	ldr	r2, [r1, #8]
 80043be:	690b      	ldr	r3, [r1, #16]
 80043c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bfb8      	it	lt
 80043c8:	4613      	movlt	r3, r2
 80043ca:	6033      	str	r3, [r6, #0]
 80043cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043d0:	4607      	mov	r7, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	b10a      	cbz	r2, 80043da <_printf_common+0x26>
 80043d6:	3301      	adds	r3, #1
 80043d8:	6033      	str	r3, [r6, #0]
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	0699      	lsls	r1, r3, #26
 80043de:	bf42      	ittt	mi
 80043e0:	6833      	ldrmi	r3, [r6, #0]
 80043e2:	3302      	addmi	r3, #2
 80043e4:	6033      	strmi	r3, [r6, #0]
 80043e6:	6825      	ldr	r5, [r4, #0]
 80043e8:	f015 0506 	ands.w	r5, r5, #6
 80043ec:	d106      	bne.n	80043fc <_printf_common+0x48>
 80043ee:	f104 0a19 	add.w	sl, r4, #25
 80043f2:	68e3      	ldr	r3, [r4, #12]
 80043f4:	6832      	ldr	r2, [r6, #0]
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	dc26      	bgt.n	800444a <_printf_common+0x96>
 80043fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	3b00      	subs	r3, #0
 8004404:	bf18      	it	ne
 8004406:	2301      	movne	r3, #1
 8004408:	0692      	lsls	r2, r2, #26
 800440a:	d42b      	bmi.n	8004464 <_printf_common+0xb0>
 800440c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004410:	4641      	mov	r1, r8
 8004412:	4638      	mov	r0, r7
 8004414:	47c8      	blx	r9
 8004416:	3001      	adds	r0, #1
 8004418:	d01e      	beq.n	8004458 <_printf_common+0xa4>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	6922      	ldr	r2, [r4, #16]
 800441e:	f003 0306 	and.w	r3, r3, #6
 8004422:	2b04      	cmp	r3, #4
 8004424:	bf02      	ittt	eq
 8004426:	68e5      	ldreq	r5, [r4, #12]
 8004428:	6833      	ldreq	r3, [r6, #0]
 800442a:	1aed      	subeq	r5, r5, r3
 800442c:	68a3      	ldr	r3, [r4, #8]
 800442e:	bf0c      	ite	eq
 8004430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004434:	2500      	movne	r5, #0
 8004436:	4293      	cmp	r3, r2
 8004438:	bfc4      	itt	gt
 800443a:	1a9b      	subgt	r3, r3, r2
 800443c:	18ed      	addgt	r5, r5, r3
 800443e:	2600      	movs	r6, #0
 8004440:	341a      	adds	r4, #26
 8004442:	42b5      	cmp	r5, r6
 8004444:	d11a      	bne.n	800447c <_printf_common+0xc8>
 8004446:	2000      	movs	r0, #0
 8004448:	e008      	b.n	800445c <_printf_common+0xa8>
 800444a:	2301      	movs	r3, #1
 800444c:	4652      	mov	r2, sl
 800444e:	4641      	mov	r1, r8
 8004450:	4638      	mov	r0, r7
 8004452:	47c8      	blx	r9
 8004454:	3001      	adds	r0, #1
 8004456:	d103      	bne.n	8004460 <_printf_common+0xac>
 8004458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800445c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004460:	3501      	adds	r5, #1
 8004462:	e7c6      	b.n	80043f2 <_printf_common+0x3e>
 8004464:	18e1      	adds	r1, r4, r3
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	2030      	movs	r0, #48	@ 0x30
 800446a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800446e:	4422      	add	r2, r4
 8004470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004478:	3302      	adds	r3, #2
 800447a:	e7c7      	b.n	800440c <_printf_common+0x58>
 800447c:	2301      	movs	r3, #1
 800447e:	4622      	mov	r2, r4
 8004480:	4641      	mov	r1, r8
 8004482:	4638      	mov	r0, r7
 8004484:	47c8      	blx	r9
 8004486:	3001      	adds	r0, #1
 8004488:	d0e6      	beq.n	8004458 <_printf_common+0xa4>
 800448a:	3601      	adds	r6, #1
 800448c:	e7d9      	b.n	8004442 <_printf_common+0x8e>
	...

08004490 <_printf_i>:
 8004490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004494:	7e0f      	ldrb	r7, [r1, #24]
 8004496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004498:	2f78      	cmp	r7, #120	@ 0x78
 800449a:	4691      	mov	r9, r2
 800449c:	4680      	mov	r8, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	469a      	mov	sl, r3
 80044a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044a6:	d807      	bhi.n	80044b8 <_printf_i+0x28>
 80044a8:	2f62      	cmp	r7, #98	@ 0x62
 80044aa:	d80a      	bhi.n	80044c2 <_printf_i+0x32>
 80044ac:	2f00      	cmp	r7, #0
 80044ae:	f000 80d2 	beq.w	8004656 <_printf_i+0x1c6>
 80044b2:	2f58      	cmp	r7, #88	@ 0x58
 80044b4:	f000 80b9 	beq.w	800462a <_printf_i+0x19a>
 80044b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044c0:	e03a      	b.n	8004538 <_printf_i+0xa8>
 80044c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044c6:	2b15      	cmp	r3, #21
 80044c8:	d8f6      	bhi.n	80044b8 <_printf_i+0x28>
 80044ca:	a101      	add	r1, pc, #4	@ (adr r1, 80044d0 <_printf_i+0x40>)
 80044cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044d0:	08004529 	.word	0x08004529
 80044d4:	0800453d 	.word	0x0800453d
 80044d8:	080044b9 	.word	0x080044b9
 80044dc:	080044b9 	.word	0x080044b9
 80044e0:	080044b9 	.word	0x080044b9
 80044e4:	080044b9 	.word	0x080044b9
 80044e8:	0800453d 	.word	0x0800453d
 80044ec:	080044b9 	.word	0x080044b9
 80044f0:	080044b9 	.word	0x080044b9
 80044f4:	080044b9 	.word	0x080044b9
 80044f8:	080044b9 	.word	0x080044b9
 80044fc:	0800463d 	.word	0x0800463d
 8004500:	08004567 	.word	0x08004567
 8004504:	080045f7 	.word	0x080045f7
 8004508:	080044b9 	.word	0x080044b9
 800450c:	080044b9 	.word	0x080044b9
 8004510:	0800465f 	.word	0x0800465f
 8004514:	080044b9 	.word	0x080044b9
 8004518:	08004567 	.word	0x08004567
 800451c:	080044b9 	.word	0x080044b9
 8004520:	080044b9 	.word	0x080044b9
 8004524:	080045ff 	.word	0x080045ff
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	1d1a      	adds	r2, r3, #4
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6032      	str	r2, [r6, #0]
 8004530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004538:	2301      	movs	r3, #1
 800453a:	e09d      	b.n	8004678 <_printf_i+0x1e8>
 800453c:	6833      	ldr	r3, [r6, #0]
 800453e:	6820      	ldr	r0, [r4, #0]
 8004540:	1d19      	adds	r1, r3, #4
 8004542:	6031      	str	r1, [r6, #0]
 8004544:	0606      	lsls	r6, r0, #24
 8004546:	d501      	bpl.n	800454c <_printf_i+0xbc>
 8004548:	681d      	ldr	r5, [r3, #0]
 800454a:	e003      	b.n	8004554 <_printf_i+0xc4>
 800454c:	0645      	lsls	r5, r0, #25
 800454e:	d5fb      	bpl.n	8004548 <_printf_i+0xb8>
 8004550:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004554:	2d00      	cmp	r5, #0
 8004556:	da03      	bge.n	8004560 <_printf_i+0xd0>
 8004558:	232d      	movs	r3, #45	@ 0x2d
 800455a:	426d      	negs	r5, r5
 800455c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004560:	4859      	ldr	r0, [pc, #356]	@ (80046c8 <_printf_i+0x238>)
 8004562:	230a      	movs	r3, #10
 8004564:	e011      	b.n	800458a <_printf_i+0xfa>
 8004566:	6821      	ldr	r1, [r4, #0]
 8004568:	6833      	ldr	r3, [r6, #0]
 800456a:	0608      	lsls	r0, r1, #24
 800456c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004570:	d402      	bmi.n	8004578 <_printf_i+0xe8>
 8004572:	0649      	lsls	r1, r1, #25
 8004574:	bf48      	it	mi
 8004576:	b2ad      	uxthmi	r5, r5
 8004578:	2f6f      	cmp	r7, #111	@ 0x6f
 800457a:	4853      	ldr	r0, [pc, #332]	@ (80046c8 <_printf_i+0x238>)
 800457c:	6033      	str	r3, [r6, #0]
 800457e:	bf14      	ite	ne
 8004580:	230a      	movne	r3, #10
 8004582:	2308      	moveq	r3, #8
 8004584:	2100      	movs	r1, #0
 8004586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800458a:	6866      	ldr	r6, [r4, #4]
 800458c:	60a6      	str	r6, [r4, #8]
 800458e:	2e00      	cmp	r6, #0
 8004590:	bfa2      	ittt	ge
 8004592:	6821      	ldrge	r1, [r4, #0]
 8004594:	f021 0104 	bicge.w	r1, r1, #4
 8004598:	6021      	strge	r1, [r4, #0]
 800459a:	b90d      	cbnz	r5, 80045a0 <_printf_i+0x110>
 800459c:	2e00      	cmp	r6, #0
 800459e:	d04b      	beq.n	8004638 <_printf_i+0x1a8>
 80045a0:	4616      	mov	r6, r2
 80045a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80045a6:	fb03 5711 	mls	r7, r3, r1, r5
 80045aa:	5dc7      	ldrb	r7, [r0, r7]
 80045ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045b0:	462f      	mov	r7, r5
 80045b2:	42bb      	cmp	r3, r7
 80045b4:	460d      	mov	r5, r1
 80045b6:	d9f4      	bls.n	80045a2 <_printf_i+0x112>
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d10b      	bne.n	80045d4 <_printf_i+0x144>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	07df      	lsls	r7, r3, #31
 80045c0:	d508      	bpl.n	80045d4 <_printf_i+0x144>
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	6861      	ldr	r1, [r4, #4]
 80045c6:	4299      	cmp	r1, r3
 80045c8:	bfde      	ittt	le
 80045ca:	2330      	movle	r3, #48	@ 0x30
 80045cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80045d4:	1b92      	subs	r2, r2, r6
 80045d6:	6122      	str	r2, [r4, #16]
 80045d8:	f8cd a000 	str.w	sl, [sp]
 80045dc:	464b      	mov	r3, r9
 80045de:	aa03      	add	r2, sp, #12
 80045e0:	4621      	mov	r1, r4
 80045e2:	4640      	mov	r0, r8
 80045e4:	f7ff fee6 	bl	80043b4 <_printf_common>
 80045e8:	3001      	adds	r0, #1
 80045ea:	d14a      	bne.n	8004682 <_printf_i+0x1f2>
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045f0:	b004      	add	sp, #16
 80045f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	f043 0320 	orr.w	r3, r3, #32
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	4833      	ldr	r0, [pc, #204]	@ (80046cc <_printf_i+0x23c>)
 8004600:	2778      	movs	r7, #120	@ 0x78
 8004602:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	6831      	ldr	r1, [r6, #0]
 800460a:	061f      	lsls	r7, r3, #24
 800460c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004610:	d402      	bmi.n	8004618 <_printf_i+0x188>
 8004612:	065f      	lsls	r7, r3, #25
 8004614:	bf48      	it	mi
 8004616:	b2ad      	uxthmi	r5, r5
 8004618:	6031      	str	r1, [r6, #0]
 800461a:	07d9      	lsls	r1, r3, #31
 800461c:	bf44      	itt	mi
 800461e:	f043 0320 	orrmi.w	r3, r3, #32
 8004622:	6023      	strmi	r3, [r4, #0]
 8004624:	b11d      	cbz	r5, 800462e <_printf_i+0x19e>
 8004626:	2310      	movs	r3, #16
 8004628:	e7ac      	b.n	8004584 <_printf_i+0xf4>
 800462a:	4827      	ldr	r0, [pc, #156]	@ (80046c8 <_printf_i+0x238>)
 800462c:	e7e9      	b.n	8004602 <_printf_i+0x172>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f023 0320 	bic.w	r3, r3, #32
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	e7f6      	b.n	8004626 <_printf_i+0x196>
 8004638:	4616      	mov	r6, r2
 800463a:	e7bd      	b.n	80045b8 <_printf_i+0x128>
 800463c:	6833      	ldr	r3, [r6, #0]
 800463e:	6825      	ldr	r5, [r4, #0]
 8004640:	6961      	ldr	r1, [r4, #20]
 8004642:	1d18      	adds	r0, r3, #4
 8004644:	6030      	str	r0, [r6, #0]
 8004646:	062e      	lsls	r6, r5, #24
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	d501      	bpl.n	8004650 <_printf_i+0x1c0>
 800464c:	6019      	str	r1, [r3, #0]
 800464e:	e002      	b.n	8004656 <_printf_i+0x1c6>
 8004650:	0668      	lsls	r0, r5, #25
 8004652:	d5fb      	bpl.n	800464c <_printf_i+0x1bc>
 8004654:	8019      	strh	r1, [r3, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	6123      	str	r3, [r4, #16]
 800465a:	4616      	mov	r6, r2
 800465c:	e7bc      	b.n	80045d8 <_printf_i+0x148>
 800465e:	6833      	ldr	r3, [r6, #0]
 8004660:	1d1a      	adds	r2, r3, #4
 8004662:	6032      	str	r2, [r6, #0]
 8004664:	681e      	ldr	r6, [r3, #0]
 8004666:	6862      	ldr	r2, [r4, #4]
 8004668:	2100      	movs	r1, #0
 800466a:	4630      	mov	r0, r6
 800466c:	f7fb fdc8 	bl	8000200 <memchr>
 8004670:	b108      	cbz	r0, 8004676 <_printf_i+0x1e6>
 8004672:	1b80      	subs	r0, r0, r6
 8004674:	6060      	str	r0, [r4, #4]
 8004676:	6863      	ldr	r3, [r4, #4]
 8004678:	6123      	str	r3, [r4, #16]
 800467a:	2300      	movs	r3, #0
 800467c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004680:	e7aa      	b.n	80045d8 <_printf_i+0x148>
 8004682:	6923      	ldr	r3, [r4, #16]
 8004684:	4632      	mov	r2, r6
 8004686:	4649      	mov	r1, r9
 8004688:	4640      	mov	r0, r8
 800468a:	47d0      	blx	sl
 800468c:	3001      	adds	r0, #1
 800468e:	d0ad      	beq.n	80045ec <_printf_i+0x15c>
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	079b      	lsls	r3, r3, #30
 8004694:	d413      	bmi.n	80046be <_printf_i+0x22e>
 8004696:	68e0      	ldr	r0, [r4, #12]
 8004698:	9b03      	ldr	r3, [sp, #12]
 800469a:	4298      	cmp	r0, r3
 800469c:	bfb8      	it	lt
 800469e:	4618      	movlt	r0, r3
 80046a0:	e7a6      	b.n	80045f0 <_printf_i+0x160>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4632      	mov	r2, r6
 80046a6:	4649      	mov	r1, r9
 80046a8:	4640      	mov	r0, r8
 80046aa:	47d0      	blx	sl
 80046ac:	3001      	adds	r0, #1
 80046ae:	d09d      	beq.n	80045ec <_printf_i+0x15c>
 80046b0:	3501      	adds	r5, #1
 80046b2:	68e3      	ldr	r3, [r4, #12]
 80046b4:	9903      	ldr	r1, [sp, #12]
 80046b6:	1a5b      	subs	r3, r3, r1
 80046b8:	42ab      	cmp	r3, r5
 80046ba:	dcf2      	bgt.n	80046a2 <_printf_i+0x212>
 80046bc:	e7eb      	b.n	8004696 <_printf_i+0x206>
 80046be:	2500      	movs	r5, #0
 80046c0:	f104 0619 	add.w	r6, r4, #25
 80046c4:	e7f5      	b.n	80046b2 <_printf_i+0x222>
 80046c6:	bf00      	nop
 80046c8:	08004de5 	.word	0x08004de5
 80046cc:	08004df6 	.word	0x08004df6

080046d0 <__malloc_lock>:
 80046d0:	4801      	ldr	r0, [pc, #4]	@ (80046d8 <__malloc_lock+0x8>)
 80046d2:	f7ff bc73 	b.w	8003fbc <__retarget_lock_acquire_recursive>
 80046d6:	bf00      	nop
 80046d8:	2000029c 	.word	0x2000029c

080046dc <__malloc_unlock>:
 80046dc:	4801      	ldr	r0, [pc, #4]	@ (80046e4 <__malloc_unlock+0x8>)
 80046de:	f7ff bc6e 	b.w	8003fbe <__retarget_lock_release_recursive>
 80046e2:	bf00      	nop
 80046e4:	2000029c 	.word	0x2000029c

080046e8 <_realloc_r>:
 80046e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ec:	4680      	mov	r8, r0
 80046ee:	4615      	mov	r5, r2
 80046f0:	460c      	mov	r4, r1
 80046f2:	b921      	cbnz	r1, 80046fe <_realloc_r+0x16>
 80046f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f8:	4611      	mov	r1, r2
 80046fa:	f7ff bddb 	b.w	80042b4 <_malloc_r>
 80046fe:	b92a      	cbnz	r2, 800470c <_realloc_r+0x24>
 8004700:	f000 f858 	bl	80047b4 <_free_r>
 8004704:	2400      	movs	r4, #0
 8004706:	4620      	mov	r0, r4
 8004708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800470c:	f000 f89c 	bl	8004848 <_malloc_usable_size_r>
 8004710:	4285      	cmp	r5, r0
 8004712:	4606      	mov	r6, r0
 8004714:	d802      	bhi.n	800471c <_realloc_r+0x34>
 8004716:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800471a:	d8f4      	bhi.n	8004706 <_realloc_r+0x1e>
 800471c:	4629      	mov	r1, r5
 800471e:	4640      	mov	r0, r8
 8004720:	f7ff fdc8 	bl	80042b4 <_malloc_r>
 8004724:	4607      	mov	r7, r0
 8004726:	2800      	cmp	r0, #0
 8004728:	d0ec      	beq.n	8004704 <_realloc_r+0x1c>
 800472a:	42b5      	cmp	r5, r6
 800472c:	462a      	mov	r2, r5
 800472e:	4621      	mov	r1, r4
 8004730:	bf28      	it	cs
 8004732:	4632      	movcs	r2, r6
 8004734:	f000 f830 	bl	8004798 <memcpy>
 8004738:	4621      	mov	r1, r4
 800473a:	4640      	mov	r0, r8
 800473c:	f000 f83a 	bl	80047b4 <_free_r>
 8004740:	463c      	mov	r4, r7
 8004742:	e7e0      	b.n	8004706 <_realloc_r+0x1e>

08004744 <memmove>:
 8004744:	4288      	cmp	r0, r1
 8004746:	b510      	push	{r4, lr}
 8004748:	eb01 0402 	add.w	r4, r1, r2
 800474c:	d902      	bls.n	8004754 <memmove+0x10>
 800474e:	4284      	cmp	r4, r0
 8004750:	4623      	mov	r3, r4
 8004752:	d807      	bhi.n	8004764 <memmove+0x20>
 8004754:	1e43      	subs	r3, r0, #1
 8004756:	42a1      	cmp	r1, r4
 8004758:	d008      	beq.n	800476c <memmove+0x28>
 800475a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800475e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004762:	e7f8      	b.n	8004756 <memmove+0x12>
 8004764:	4402      	add	r2, r0
 8004766:	4601      	mov	r1, r0
 8004768:	428a      	cmp	r2, r1
 800476a:	d100      	bne.n	800476e <memmove+0x2a>
 800476c:	bd10      	pop	{r4, pc}
 800476e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004776:	e7f7      	b.n	8004768 <memmove+0x24>

08004778 <_sbrk_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4d06      	ldr	r5, [pc, #24]	@ (8004794 <_sbrk_r+0x1c>)
 800477c:	2300      	movs	r3, #0
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	f7fd fa30 	bl	8001be8 <_sbrk>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_sbrk_r+0x1a>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_sbrk_r+0x1a>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	200002a8 	.word	0x200002a8

08004798 <memcpy>:
 8004798:	440a      	add	r2, r1
 800479a:	4291      	cmp	r1, r2
 800479c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80047a0:	d100      	bne.n	80047a4 <memcpy+0xc>
 80047a2:	4770      	bx	lr
 80047a4:	b510      	push	{r4, lr}
 80047a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047ae:	4291      	cmp	r1, r2
 80047b0:	d1f9      	bne.n	80047a6 <memcpy+0xe>
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <_free_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4605      	mov	r5, r0
 80047b8:	2900      	cmp	r1, #0
 80047ba:	d041      	beq.n	8004840 <_free_r+0x8c>
 80047bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c0:	1f0c      	subs	r4, r1, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bfb8      	it	lt
 80047c6:	18e4      	addlt	r4, r4, r3
 80047c8:	f7ff ff82 	bl	80046d0 <__malloc_lock>
 80047cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004844 <_free_r+0x90>)
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	b933      	cbnz	r3, 80047e0 <_free_r+0x2c>
 80047d2:	6063      	str	r3, [r4, #4]
 80047d4:	6014      	str	r4, [r2, #0]
 80047d6:	4628      	mov	r0, r5
 80047d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047dc:	f7ff bf7e 	b.w	80046dc <__malloc_unlock>
 80047e0:	42a3      	cmp	r3, r4
 80047e2:	d908      	bls.n	80047f6 <_free_r+0x42>
 80047e4:	6820      	ldr	r0, [r4, #0]
 80047e6:	1821      	adds	r1, r4, r0
 80047e8:	428b      	cmp	r3, r1
 80047ea:	bf01      	itttt	eq
 80047ec:	6819      	ldreq	r1, [r3, #0]
 80047ee:	685b      	ldreq	r3, [r3, #4]
 80047f0:	1809      	addeq	r1, r1, r0
 80047f2:	6021      	streq	r1, [r4, #0]
 80047f4:	e7ed      	b.n	80047d2 <_free_r+0x1e>
 80047f6:	461a      	mov	r2, r3
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	b10b      	cbz	r3, 8004800 <_free_r+0x4c>
 80047fc:	42a3      	cmp	r3, r4
 80047fe:	d9fa      	bls.n	80047f6 <_free_r+0x42>
 8004800:	6811      	ldr	r1, [r2, #0]
 8004802:	1850      	adds	r0, r2, r1
 8004804:	42a0      	cmp	r0, r4
 8004806:	d10b      	bne.n	8004820 <_free_r+0x6c>
 8004808:	6820      	ldr	r0, [r4, #0]
 800480a:	4401      	add	r1, r0
 800480c:	1850      	adds	r0, r2, r1
 800480e:	4283      	cmp	r3, r0
 8004810:	6011      	str	r1, [r2, #0]
 8004812:	d1e0      	bne.n	80047d6 <_free_r+0x22>
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	6053      	str	r3, [r2, #4]
 800481a:	4408      	add	r0, r1
 800481c:	6010      	str	r0, [r2, #0]
 800481e:	e7da      	b.n	80047d6 <_free_r+0x22>
 8004820:	d902      	bls.n	8004828 <_free_r+0x74>
 8004822:	230c      	movs	r3, #12
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	e7d6      	b.n	80047d6 <_free_r+0x22>
 8004828:	6820      	ldr	r0, [r4, #0]
 800482a:	1821      	adds	r1, r4, r0
 800482c:	428b      	cmp	r3, r1
 800482e:	bf04      	itt	eq
 8004830:	6819      	ldreq	r1, [r3, #0]
 8004832:	685b      	ldreq	r3, [r3, #4]
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	bf04      	itt	eq
 8004838:	1809      	addeq	r1, r1, r0
 800483a:	6021      	streq	r1, [r4, #0]
 800483c:	6054      	str	r4, [r2, #4]
 800483e:	e7ca      	b.n	80047d6 <_free_r+0x22>
 8004840:	bd38      	pop	{r3, r4, r5, pc}
 8004842:	bf00      	nop
 8004844:	200002a4 	.word	0x200002a4

08004848 <_malloc_usable_size_r>:
 8004848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800484c:	1f18      	subs	r0, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	bfbc      	itt	lt
 8004852:	580b      	ldrlt	r3, [r1, r0]
 8004854:	18c0      	addlt	r0, r0, r3
 8004856:	4770      	bx	lr

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
