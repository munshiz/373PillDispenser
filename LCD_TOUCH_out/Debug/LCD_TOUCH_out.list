
LCD_TOUCH_out.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b48  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  08003d08  08003d08  00004d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f0  080046f0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080046f0  080046f0  000056f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046f8  080046f8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f8  080046f8  000056f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004700  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  0800475c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  0800475c  00006294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009890  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a58  00000000  00000000  0000f91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  00011378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006de  00000000  00000000  00011ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c72  00000000  00000000  0001237e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa19  00000000  00000000  0003bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa5c7  00000000  00000000  00046a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140fd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  00141014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00143934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08003cf0 	.word	0x08003cf0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08003cf0 	.word	0x08003cf0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 80002be:	2200      	movs	r2, #0
 80002c0:	2140      	movs	r1, #64	@ 0x40
 80002c2:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <ILI9488_SendCommand+0x44>)
 80002c4:	f001 fb5a 	bl	800197c <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 80002c8:	2200      	movs	r2, #0
 80002ca:	2101      	movs	r1, #1
 80002cc:	4809      	ldr	r0, [pc, #36]	@ (80002f4 <ILI9488_SendCommand+0x44>)
 80002ce:	f001 fb55 	bl	800197c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 80002d2:	f107 010f 	add.w	r1, r7, #15
 80002d6:	2301      	movs	r3, #1
 80002d8:	2201      	movs	r2, #1
 80002da:	4807      	ldr	r0, [pc, #28]	@ (80002f8 <ILI9488_SendCommand+0x48>)
 80002dc:	f002 fb6d 	bl	80029ba <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 80002e0:	2201      	movs	r2, #1
 80002e2:	2101      	movs	r1, #1
 80002e4:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <ILI9488_SendCommand+0x44>)
 80002e6:	f001 fb49 	bl	800197c <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	48000c00 	.word	0x48000c00
 80002f8:	2000007c 	.word	0x2000007c

080002fc <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 800030a:	2201      	movs	r2, #1
 800030c:	2140      	movs	r1, #64	@ 0x40
 800030e:	480c      	ldr	r0, [pc, #48]	@ (8000340 <ILI9488_SendData+0x44>)
 8000310:	f001 fb34 	bl	800197c <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000314:	2200      	movs	r2, #0
 8000316:	2101      	movs	r1, #1
 8000318:	4809      	ldr	r0, [pc, #36]	@ (8000340 <ILI9488_SendData+0x44>)
 800031a:	f001 fb2f 	bl	800197c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800031e:	f107 010f 	add.w	r1, r7, #15
 8000322:	2301      	movs	r3, #1
 8000324:	2201      	movs	r2, #1
 8000326:	4807      	ldr	r0, [pc, #28]	@ (8000344 <ILI9488_SendData+0x48>)
 8000328:	f002 fb47 	bl	80029ba <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 800032c:	2201      	movs	r2, #1
 800032e:	2101      	movs	r1, #1
 8000330:	4803      	ldr	r0, [pc, #12]	@ (8000340 <ILI9488_SendData+0x44>)
 8000332:	f001 fb23 	bl	800197c <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	48000c00 	.word	0x48000c00
 8000344:	2000007c 	.word	0x2000007c

08000348 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8000352:	2201      	movs	r2, #1
 8000354:	2140      	movs	r1, #64	@ 0x40
 8000356:	4815      	ldr	r0, [pc, #84]	@ (80003ac <ILI9488_SendData_Multi+0x64>)
 8000358:	f001 fb10 	bl	800197c <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 800035c:	2200      	movs	r2, #0
 800035e:	2101      	movs	r1, #1
 8000360:	4812      	ldr	r0, [pc, #72]	@ (80003ac <ILI9488_SendData_Multi+0x64>)
 8000362:	f001 fb0b 	bl	800197c <HAL_GPIO_WritePin>
	while (buff_size > 0){
 8000366:	e015      	b.n	8000394 <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800036e:	bf28      	it	cs
 8000370:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000374:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 8000376:	89fa      	ldrh	r2, [r7, #14]
 8000378:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800037c:	6879      	ldr	r1, [r7, #4]
 800037e:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <ILI9488_SendData_Multi+0x68>)
 8000380:	f002 fb1b 	bl	80029ba <HAL_SPI_Transmit>
		buff += chunk_size;
 8000384:	89fb      	ldrh	r3, [r7, #14]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800038c:	89fb      	ldrh	r3, [r7, #14]
 800038e:	683a      	ldr	r2, [r7, #0]
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1e6      	bne.n	8000368 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 800039a:	2201      	movs	r2, #1
 800039c:	2101      	movs	r1, #1
 800039e:	4803      	ldr	r0, [pc, #12]	@ (80003ac <ILI9488_SendData_Multi+0x64>)
 80003a0:	f001 faec 	bl	800197c <HAL_GPIO_WritePin>
}
 80003a4:	bf00      	nop
 80003a6:	3710      	adds	r7, #16
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	48000c00 	.word	0x48000c00
 80003b0:	2000007c 	.word	0x2000007c

080003b4 <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 80003b8:	2201      	movs	r2, #1
 80003ba:	2101      	movs	r1, #1
 80003bc:	486c      	ldr	r0, [pc, #432]	@ (8000570 <ILI9488_Init+0x1bc>)
 80003be:	f001 fadd 	bl	800197c <HAL_GPIO_WritePin>
	RST_A();
 80003c2:	2200      	movs	r2, #0
 80003c4:	2180      	movs	r1, #128	@ 0x80
 80003c6:	486a      	ldr	r0, [pc, #424]	@ (8000570 <ILI9488_Init+0x1bc>)
 80003c8:	f001 fad8 	bl	800197c <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 80003cc:	200a      	movs	r0, #10
 80003ce:	f001 f839 	bl	8001444 <HAL_Delay>
		 RST_D();
 80003d2:	2201      	movs	r2, #1
 80003d4:	2180      	movs	r1, #128	@ 0x80
 80003d6:	4866      	ldr	r0, [pc, #408]	@ (8000570 <ILI9488_Init+0x1bc>)
 80003d8:	f001 fad0 	bl	800197c <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 80003dc:	4b65      	ldr	r3, [pc, #404]	@ (8000574 <ILI9488_Init+0x1c0>)
 80003de:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80003e2:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 80003e4:	4b64      	ldr	r3, [pc, #400]	@ (8000578 <ILI9488_Init+0x1c4>)
 80003e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80003ea:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 80003ec:	20e0      	movs	r0, #224	@ 0xe0
 80003ee:	f7ff ff5f 	bl	80002b0 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff ff82 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 80003f8:	2003      	movs	r0, #3
 80003fa:	f7ff ff7f 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 80003fe:	2009      	movs	r0, #9
 8000400:	f7ff ff7c 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000404:	2008      	movs	r0, #8
 8000406:	f7ff ff79 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800040a:	2016      	movs	r0, #22
 800040c:	f7ff ff76 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000410:	200a      	movs	r0, #10
 8000412:	f7ff ff73 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 8000416:	203f      	movs	r0, #63	@ 0x3f
 8000418:	f7ff ff70 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 800041c:	2078      	movs	r0, #120	@ 0x78
 800041e:	f7ff ff6d 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 8000422:	204c      	movs	r0, #76	@ 0x4c
 8000424:	f7ff ff6a 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000428:	2009      	movs	r0, #9
 800042a:	f7ff ff67 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800042e:	200a      	movs	r0, #10
 8000430:	f7ff ff64 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000434:	2008      	movs	r0, #8
 8000436:	f7ff ff61 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800043a:	2016      	movs	r0, #22
 800043c:	f7ff ff5e 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8000440:	201a      	movs	r0, #26
 8000442:	f7ff ff5b 	bl	80002fc <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 8000446:	200f      	movs	r0, #15
 8000448:	f7ff ff58 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 800044c:	20e1      	movs	r0, #225	@ 0xe1
 800044e:	f7ff ff2f 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000452:	2000      	movs	r0, #0
 8000454:	f7ff ff52 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 8000458:	2016      	movs	r0, #22
 800045a:	f7ff ff4f 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 800045e:	2019      	movs	r0, #25
 8000460:	f7ff ff4c 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 8000464:	2003      	movs	r0, #3
 8000466:	f7ff ff49 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 800046a:	200f      	movs	r0, #15
 800046c:	f7ff ff46 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 8000470:	2005      	movs	r0, #5
 8000472:	f7ff ff43 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 8000476:	2032      	movs	r0, #50	@ 0x32
 8000478:	f7ff ff40 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 800047c:	2045      	movs	r0, #69	@ 0x45
 800047e:	f7ff ff3d 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 8000482:	2046      	movs	r0, #70	@ 0x46
 8000484:	f7ff ff3a 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 8000488:	2004      	movs	r0, #4
 800048a:	f7ff ff37 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 800048e:	200e      	movs	r0, #14
 8000490:	f7ff ff34 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 8000494:	200d      	movs	r0, #13
 8000496:	f7ff ff31 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 800049a:	2035      	movs	r0, #53	@ 0x35
 800049c:	f7ff ff2e 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 80004a0:	2037      	movs	r0, #55	@ 0x37
 80004a2:	f7ff ff2b 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80004a6:	200f      	movs	r0, #15
 80004a8:	f7ff ff28 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 80004ac:	20c0      	movs	r0, #192	@ 0xc0
 80004ae:	f7ff feff 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 80004b2:	2017      	movs	r0, #23
 80004b4:	f7ff ff22 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 80004b8:	2015      	movs	r0, #21
 80004ba:	f7ff ff1f 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 80004be:	20c1      	movs	r0, #193	@ 0xc1
 80004c0:	f7ff fef6 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 80004c4:	2041      	movs	r0, #65	@ 0x41
 80004c6:	f7ff ff19 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 80004ca:	20c5      	movs	r0, #197	@ 0xc5
 80004cc:	f7ff fef0 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f7ff ff13 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 80004d6:	2012      	movs	r0, #18
 80004d8:	f7ff ff10 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 80004dc:	2080      	movs	r0, #128	@ 0x80
 80004de:	f7ff ff0d 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 80004e2:	2036      	movs	r0, #54	@ 0x36
 80004e4:	f7ff fee4 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 80004e8:	2048      	movs	r0, #72	@ 0x48
 80004ea:	f7ff ff07 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 80004ee:	203a      	movs	r0, #58	@ 0x3a
 80004f0:	f7ff fede 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 80004f4:	2066      	movs	r0, #102	@ 0x66
 80004f6:	f7ff ff01 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 80004fa:	20b0      	movs	r0, #176	@ 0xb0
 80004fc:	f7ff fed8 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8000500:	2080      	movs	r0, #128	@ 0x80
 8000502:	f7ff fefb 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 8000506:	20b1      	movs	r0, #177	@ 0xb1
 8000508:	f7ff fed2 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 800050c:	20a0      	movs	r0, #160	@ 0xa0
 800050e:	f7ff fef5 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 8000512:	20b4      	movs	r0, #180	@ 0xb4
 8000514:	f7ff fecc 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000518:	2002      	movs	r0, #2
 800051a:	f7ff feef 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 800051e:	20b6      	movs	r0, #182	@ 0xb6
 8000520:	f7ff fec6 	bl	80002b0 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000524:	2002      	movs	r0, #2
 8000526:	f7ff fee9 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff fee6 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8000530:	20e9      	movs	r0, #233	@ 0xe9
 8000532:	f7ff febd 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff fee0 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 800053c:	20f7      	movs	r0, #247	@ 0xf7
 800053e:	f7ff feb7 	bl	80002b0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 8000542:	20a9      	movs	r0, #169	@ 0xa9
 8000544:	f7ff feda 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 8000548:	2051      	movs	r0, #81	@ 0x51
 800054a:	f7ff fed7 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 800054e:	202c      	movs	r0, #44	@ 0x2c
 8000550:	f7ff fed4 	bl	80002fc <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 8000554:	2082      	movs	r0, #130	@ 0x82
 8000556:	f7ff fed1 	bl	80002fc <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 800055a:	2011      	movs	r0, #17
 800055c:	f7ff fea8 	bl	80002b0 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 8000560:	2078      	movs	r0, #120	@ 0x78
 8000562:	f000 ff6f 	bl	8001444 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 8000566:	2029      	movs	r0, #41	@ 0x29
 8000568:	f7ff fea2 	bl	80002b0 <ILI9488_SendCommand>

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	48000c00 	.word	0x48000c00
 8000574:	20000078 	.word	0x20000078
 8000578:	2000007a 	.word	0x2000007a

0800057c <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	4604      	mov	r4, r0
 8000584:	4608      	mov	r0, r1
 8000586:	4611      	mov	r1, r2
 8000588:	461a      	mov	r2, r3
 800058a:	4623      	mov	r3, r4
 800058c:	80fb      	strh	r3, [r7, #6]
 800058e:	4603      	mov	r3, r0
 8000590:	80bb      	strh	r3, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	807b      	strh	r3, [r7, #2]
 8000596:	4613      	mov	r3, r2
 8000598:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 800059a:	202a      	movs	r0, #42	@ 0x2a
 800059c:	f7ff fe88 	bl	80002b0 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	733b      	strb	r3, [r7, #12]
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	737b      	strb	r3, [r7, #13]
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	0a1b      	lsrs	r3, r3, #8
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff febe 	bl	8000348 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 80005cc:	202b      	movs	r0, #43	@ 0x2b
 80005ce:	f7ff fe6f 	bl	80002b0 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	723b      	strb	r3, [r7, #8]
 80005dc:	88bb      	ldrh	r3, [r7, #4]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	727b      	strb	r3, [r7, #9]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	72bb      	strb	r3, [r7, #10]
 80005ec:	883b      	ldrh	r3, [r7, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2104      	movs	r1, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fea5 	bl	8000348 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f7ff fe56 	bl	80002b0 <ILI9488_SendCommand>
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <fillScreen+0x2c>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	b21a      	sxth	r2, r3
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <fillScreen+0x30>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	b219      	sxth	r1, r3
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	460b      	mov	r3, r1
 8000628:	2100      	movs	r1, #0
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f808 	bl	8000640 <fillRect>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000078 	.word	0x20000078
 800063c:	2000007a 	.word	0x2000007a

08000640 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000644:	b08a      	sub	sp, #40	@ 0x28
 8000646:	af00      	add	r7, sp, #0
 8000648:	4606      	mov	r6, r0
 800064a:	4608      	mov	r0, r1
 800064c:	4611      	mov	r1, r2
 800064e:	461a      	mov	r2, r3
 8000650:	4633      	mov	r3, r6
 8000652:	80fb      	strh	r3, [r7, #6]
 8000654:	4603      	mov	r3, r0
 8000656:	80bb      	strh	r3, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	807b      	strh	r3, [r7, #2]
 800065c:	4613      	mov	r3, r2
 800065e:	803b      	strh	r3, [r7, #0]
 8000660:	466b      	mov	r3, sp
 8000662:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000668:	4a8f      	ldr	r2, [pc, #572]	@ (80008a8 <fillRect+0x268>)
 800066a:	8812      	ldrh	r2, [r2, #0]
 800066c:	4293      	cmp	r3, r2
 800066e:	da05      	bge.n	800067c <fillRect+0x3c>
 8000670:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000674:	4a8d      	ldr	r2, [pc, #564]	@ (80008ac <fillRect+0x26c>)
 8000676:	8812      	ldrh	r2, [r2, #0]
 8000678:	4293      	cmp	r3, r2
 800067a:	db01      	blt.n	8000680 <fillRect+0x40>
		return;
 800067c:	46d5      	mov	sp, sl
 800067e:	e10f      	b.n	80008a0 <fillRect+0x260>
	if ((x + w - 1) >= width)
 8000680:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000688:	4413      	add	r3, r2
 800068a:	4a87      	ldr	r2, [pc, #540]	@ (80008a8 <fillRect+0x268>)
 800068c:	8812      	ldrh	r2, [r2, #0]
 800068e:	4293      	cmp	r3, r2
 8000690:	dd05      	ble.n	800069e <fillRect+0x5e>
		w = width - x;
 8000692:	4b85      	ldr	r3, [pc, #532]	@ (80008a8 <fillRect+0x268>)
 8000694:	881a      	ldrh	r2, [r3, #0]
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	b29b      	uxth	r3, r3
 800069c:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 800069e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a80      	ldr	r2, [pc, #512]	@ (80008ac <fillRect+0x26c>)
 80006aa:	8812      	ldrh	r2, [r2, #0]
 80006ac:	4293      	cmp	r3, r2
 80006ae:	dd05      	ble.n	80006bc <fillRect+0x7c>
		h = height - y;
 80006b0:	4b7e      	ldr	r3, [pc, #504]	@ (80008ac <fillRect+0x26c>)
 80006b2:	881a      	ldrh	r2, [r3, #0]
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80006bc:	88f8      	ldrh	r0, [r7, #6]
 80006be:	88b9      	ldrh	r1, [r7, #4]
 80006c0:	88fa      	ldrh	r2, [r7, #6]
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b29e      	uxth	r6, r3
 80006cc:	88ba      	ldrh	r2, [r7, #4]
 80006ce:	883b      	ldrh	r3, [r7, #0]
 80006d0:	4413      	add	r3, r2
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4632      	mov	r2, r6
 80006da:	f7ff ff4f 	bl	800057c <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 80006de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80006e2:	0adb      	lsrs	r3, r3, #11
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 80006e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80006ec:	115b      	asrs	r3, r3, #5
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006f4:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 80006f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f003 031f 	and.w	r3, r3, #31
 8000700:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 8000702:	7efa      	ldrb	r2, [r7, #27]
 8000704:	4613      	mov	r3, r2
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	4a69      	ldr	r2, [pc, #420]	@ (80008b0 <fillRect+0x270>)
 800070c:	fb82 1203 	smull	r1, r2, r2, r3
 8000710:	441a      	add	r2, r3
 8000712:	1112      	asrs	r2, r2, #4
 8000714:	17db      	asrs	r3, r3, #31
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 800071a:	7eba      	ldrb	r2, [r7, #26]
 800071c:	4613      	mov	r3, r2
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	4a64      	ldr	r2, [pc, #400]	@ (80008b4 <fillRect+0x274>)
 8000724:	fb82 1203 	smull	r1, r2, r2, r3
 8000728:	441a      	add	r2, r3
 800072a:	1152      	asrs	r2, r2, #5
 800072c:	17db      	asrs	r3, r3, #31
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8000732:	7e7a      	ldrb	r2, [r7, #25]
 8000734:	4613      	mov	r3, r2
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	1a9b      	subs	r3, r3, r2
 800073a:	4a5d      	ldr	r2, [pc, #372]	@ (80008b0 <fillRect+0x270>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	441a      	add	r2, r3
 8000742:	1112      	asrs	r2, r2, #4
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 800074a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800074e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000752:	fb03 f202 	mul.w	r2, r3, r2
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000764:	d204      	bcs.n	8000770 <fillRect+0x130>
		cnt = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	623b      	str	r3, [r7, #32]
		buf_size = n;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	e02f      	b.n	80007d0 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4a51      	ldr	r2, [pc, #324]	@ (80008b8 <fillRect+0x278>)
 8000774:	fba2 2303 	umull	r2, r3, r2, r3
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 800077c:	2303      	movs	r3, #3
 800077e:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	4a4e      	ldr	r2, [pc, #312]	@ (80008bc <fillRect+0x27c>)
 8000784:	fba2 2303 	umull	r2, r3, r2, r3
 8000788:	0bdb      	lsrs	r3, r3, #15
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3301      	adds	r3, #1
 800078e:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8000790:	7cfb      	ldrb	r3, [r7, #19]
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
 8000794:	e014      	b.n	80007c0 <fillRect+0x180>
			if(n%i == 0){
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079a:	fbb3 f2f2 	udiv	r2, r3, r2
 800079e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007a0:	fb01 f202 	mul.w	r2, r1, r2
 80007a4:	1a9b      	subs	r3, r3, r2
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d107      	bne.n	80007ba <fillRect+0x17a>
				cnt = i;
 80007aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ac:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	61fb      	str	r3, [r7, #28]
				break;
 80007b8:	e00a      	b.n	80007d0 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 80007ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007bc:	3301      	adds	r3, #1
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	4a3d      	ldr	r2, [pc, #244]	@ (80008b8 <fillRect+0x278>)
 80007c4:	fba2 2303 	umull	r2, r3, r2, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d3e2      	bcc.n	8000796 <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 80007d0:	69f9      	ldr	r1, [r7, #28]
 80007d2:	460b      	mov	r3, r1
 80007d4:	3b01      	subs	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	2300      	movs	r3, #0
 80007da:	4688      	mov	r8, r1
 80007dc:	4699      	mov	r9, r3
 80007de:	f04f 0200 	mov.w	r2, #0
 80007e2:	f04f 0300 	mov.w	r3, #0
 80007e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007f2:	2300      	movs	r3, #0
 80007f4:	460c      	mov	r4, r1
 80007f6:	461d      	mov	r5, r3
 80007f8:	f04f 0200 	mov.w	r2, #0
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	00eb      	lsls	r3, r5, #3
 8000802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000806:	00e2      	lsls	r2, r4, #3
 8000808:	1dcb      	adds	r3, r1, #7
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	ebad 0d03 	sub.w	sp, sp, r3
 8000812:	466b      	mov	r3, sp
 8000814:	3300      	adds	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
 800081c:	e019      	b.n	8000852 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 800081e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000820:	4613      	mov	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	7ef9      	ldrb	r1, [r7, #27]
 800082a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 800082c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	3301      	adds	r3, #1
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	7eb9      	ldrb	r1, [r7, #26]
 800083a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 800083c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	3302      	adds	r3, #2
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	7e79      	ldrb	r1, [r7, #25]
 800084a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 800084c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084e:	3301      	adds	r3, #1
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	4a18      	ldr	r2, [pc, #96]	@ (80008b8 <fillRect+0x278>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	085b      	lsrs	r3, r3, #1
 800085c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800085e:	429a      	cmp	r2, r3
 8000860:	d3dd      	bcc.n	800081e <fillRect+0x1de>
	}
	DC_DATA();
 8000862:	2201      	movs	r2, #1
 8000864:	2140      	movs	r1, #64	@ 0x40
 8000866:	4816      	ldr	r0, [pc, #88]	@ (80008c0 <fillRect+0x280>)
 8000868:	f001 f888 	bl	800197c <HAL_GPIO_WritePin>
	CS_A();
 800086c:	2200      	movs	r2, #0
 800086e:	2101      	movs	r1, #1
 8000870:	4813      	ldr	r0, [pc, #76]	@ (80008c0 <fillRect+0x280>)
 8000872:	f001 f883 	bl	800197c <HAL_GPIO_WritePin>
		while(cnt>0)
 8000876:	e00a      	b.n	800088e <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	b29a      	uxth	r2, r3
 800087c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	4810      	ldr	r0, [pc, #64]	@ (80008c4 <fillRect+0x284>)
 8000884:	f002 f899 	bl	80029ba <HAL_SPI_Transmit>

			cnt -= 1;
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	3b01      	subs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 800088e:	6a3b      	ldr	r3, [r7, #32]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f1      	bne.n	8000878 <fillRect+0x238>
		}
		CS_D();
 8000894:	2201      	movs	r2, #1
 8000896:	2101      	movs	r1, #1
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <fillRect+0x280>)
 800089a:	f001 f86f 	bl	800197c <HAL_GPIO_WritePin>
 800089e:	46d5      	mov	sp, sl

}
 80008a0:	3728      	adds	r7, #40	@ 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a8:	20000078 	.word	0x20000078
 80008ac:	2000007a 	.word	0x2000007a
 80008b0:	84210843 	.word	0x84210843
 80008b4:	82082083 	.word	0x82082083
 80008b8:	aaaaaaab 	.word	0xaaaaaaab
 80008bc:	80008001 	.word	0x80008001
 80008c0:	48000c00 	.word	0x48000c00
 80008c4:	2000007c 	.word	0x2000007c

080008c8 <setRotation>:


void setRotation(uint8_t r)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 80008d2:	2036      	movs	r0, #54	@ 0x36
 80008d4:	f7ff fcec 	bl	80002b0 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d83a      	bhi.n	800095c <setRotation+0x94>
 80008e6:	a201      	add	r2, pc, #4	@ (adr r2, 80008ec <setRotation+0x24>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	080008fd 	.word	0x080008fd
 80008f0:	08000915 	.word	0x08000915
 80008f4:	0800092d 	.word	0x0800092d
 80008f8:	08000945 	.word	0x08000945
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 80008fc:	2048      	movs	r0, #72	@ 0x48
 80008fe:	f7ff fcfd 	bl	80002fc <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <setRotation+0x9c>)
 8000904:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000908:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <setRotation+0xa0>)
 800090c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000910:	801a      	strh	r2, [r3, #0]
		break;
 8000912:	e023      	b.n	800095c <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8000914:	2028      	movs	r0, #40	@ 0x28
 8000916:	f7ff fcf1 	bl	80002fc <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <setRotation+0x9c>)
 800091c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000920:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <setRotation+0xa0>)
 8000924:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000928:	801a      	strh	r2, [r3, #0]
		break;
 800092a:	e017      	b.n	800095c <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 800092c:	2088      	movs	r0, #136	@ 0x88
 800092e:	f7ff fce5 	bl	80002fc <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <setRotation+0x9c>)
 8000934:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000938:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <setRotation+0xa0>)
 800093c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000940:	801a      	strh	r2, [r3, #0]
		break;
 8000942:	e00b      	b.n	800095c <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000944:	20e8      	movs	r0, #232	@ 0xe8
 8000946:	f7ff fcd9 	bl	80002fc <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <setRotation+0x9c>)
 800094c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000950:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000952:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <setRotation+0xa0>)
 8000954:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000958:	801a      	strh	r2, [r3, #0]
		break;
 800095a:	bf00      	nop
	}

}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000078 	.word	0x20000078
 8000968:	2000007a 	.word	0x2000007a

0800096c <LCD_Char>:
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}

void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font,
              uint8_t size, uint32_t color24) {
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b08b      	sub	sp, #44	@ 0x2c
 8000970:	af02      	add	r7, sp, #8
 8000972:	60ba      	str	r2, [r7, #8]
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4603      	mov	r3, r0
 8000978:	81fb      	strh	r3, [r7, #14]
 800097a:	460b      	mov	r3, r1
 800097c:	81bb      	strh	r3, [r7, #12]
  uint8_t *bitmap = font->bitmap;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	617b      	str	r3, [r7, #20]
  uint16_t bo = glyph->bitmapOffset;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	83fb      	strh	r3, [r7, #30]
  uint8_t bits = 0, bit = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	777b      	strb	r3, [r7, #29]
 800098e:	2300      	movs	r3, #0
 8000990:	773b      	strb	r3, [r7, #28]
  uint16_t set_pixels = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	837b      	strh	r3, [r7, #26]
  uint8_t cur_x, cur_y;
  for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 8000996:	2300      	movs	r3, #0
 8000998:	763b      	strb	r3, [r7, #24]
 800099a:	e09b      	b.n	8000ad4 <LCD_Char+0x168>
    for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 800099c:	2300      	movs	r3, #0
 800099e:	767b      	strb	r3, [r7, #25]
 80009a0:	e056      	b.n	8000a50 <LCD_Char+0xe4>
      if (bit == 0) {
 80009a2:	7f3b      	ldrb	r3, [r7, #28]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <LCD_Char+0x50>
        bits = (*(const unsigned char *)(&bitmap[bo++]));
 80009a8:	8bfb      	ldrh	r3, [r7, #30]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	83fa      	strh	r2, [r7, #30]
 80009ae:	461a      	mov	r2, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	4413      	add	r3, r2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	777b      	strb	r3, [r7, #29]
        bit = 0x80;
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	773b      	strb	r3, [r7, #28]
      }
      if (bits & bit)
 80009bc:	7f7a      	ldrb	r2, [r7, #29]
 80009be:	7f3b      	ldrb	r3, [r7, #28]
 80009c0:	4013      	ands	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <LCD_Char+0x64>
        set_pixels++;
 80009c8:	8b7b      	ldrh	r3, [r7, #26]
 80009ca:	3301      	adds	r3, #1
 80009cc:	837b      	strh	r3, [r7, #26]
 80009ce:	e039      	b.n	8000a44 <LCD_Char+0xd8>
      else if (set_pixels > 0) {
 80009d0:	8b7b      	ldrh	r3, [r7, #26]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d036      	beq.n	8000a44 <LCD_Char+0xd8>
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80009dc:	461a      	mov	r2, r3
 80009de:	7e7b      	ldrb	r3, [r7, #25]
 80009e0:	441a      	add	r2, r3
 80009e2:	8b7b      	ldrh	r3, [r7, #26]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	fb12 f303 	smulbb	r3, r2, r3
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	89fb      	ldrh	r3, [r7, #14]
 80009f6:	4413      	add	r3, r2
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	b218      	sxth	r0, r3
                 y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000a02:	461a      	mov	r2, r3
 8000a04:	7e3b      	ldrb	r3, [r7, #24]
 8000a06:	4413      	add	r3, r2
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	fb12 f303 	smulbb	r3, r2, r3
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	89bb      	ldrh	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	b29b      	uxth	r3, r3
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000a1c:	b219      	sxth	r1, r3
                 y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8000a1e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	8b7a      	ldrh	r2, [r7, #26]
 8000a26:	fb12 f303 	smulbb	r3, r2, r3
 8000a2a:	b29b      	uxth	r3, r3
        fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a32:	b21c      	sxth	r4, r3
 8000a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	f7ff fe00 	bl	8000640 <fillRect>
                 color24);
        set_pixels = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	837b      	strh	r3, [r7, #26]
      }
      bit >>= 1;
 8000a44:	7f3b      	ldrb	r3, [r7, #28]
 8000a46:	085b      	lsrs	r3, r3, #1
 8000a48:	773b      	strb	r3, [r7, #28]
    for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 8000a4a:	7e7b      	ldrb	r3, [r7, #25]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	767b      	strb	r3, [r7, #25]
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	7e7a      	ldrb	r2, [r7, #25]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3a3      	bcc.n	80009a2 <LCD_Char+0x36>
    }
    if (set_pixels > 0) {
 8000a5a:	8b7b      	ldrh	r3, [r7, #26]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d036      	beq.n	8000ace <LCD_Char+0x162>
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000a66:	461a      	mov	r2, r3
 8000a68:	7e7b      	ldrb	r3, [r7, #25]
 8000a6a:	441a      	add	r2, r3
 8000a6c:	8b7b      	ldrh	r3, [r7, #26]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	fb12 f303 	smulbb	r3, r2, r3
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	4413      	add	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b218      	sxth	r0, r3
               y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	7e3b      	ldrb	r3, [r7, #24]
 8000a90:	4413      	add	r3, r2
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	fb12 f303 	smulbb	r3, r2, r3
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	89bb      	ldrh	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b29b      	uxth	r3, r3
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000aa6:	b219      	sxth	r1, r3
               y + (glyph->yOffset + cur_y) * size, size * set_pixels, size,
 8000aa8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	8b7a      	ldrh	r2, [r7, #26]
 8000ab0:	fb12 f303 	smulbb	r3, r2, r3
 8000ab4:	b29b      	uxth	r3, r3
      fillRect(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000abc:	b21c      	sxth	r4, r3
 8000abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	4623      	mov	r3, r4
 8000ac6:	f7ff fdbb 	bl	8000640 <fillRect>
               color24);
      set_pixels = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	837b      	strh	r3, [r7, #26]
  for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 8000ace:	7e3b      	ldrb	r3, [r7, #24]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	763b      	strb	r3, [r7, #24]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	78db      	ldrb	r3, [r3, #3]
 8000ad8:	7e3a      	ldrb	r2, [r7, #24]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	f4ff af5e 	bcc.w	800099c <LCD_Char+0x30>
    }
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}

08000aea <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font,
              uint8_t size, uint32_t color24) {
 8000aea:	b590      	push	{r4, r7, lr}
 8000aec:	b08f      	sub	sp, #60	@ 0x3c
 8000aee:	af02      	add	r7, sp, #8
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4603      	mov	r3, r0
 8000af6:	81fb      	strh	r3, [r7, #14]
 8000af8:	460b      	mov	r3, r1
 8000afa:	81bb      	strh	r3, [r7, #12]
  int16_t cursor_x = x;
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  int16_t cursor_y = y;
 8000b00:	89bb      	ldrh	r3, [r7, #12]
 8000b02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  GFXfont font;
  memcpy(&font, p_font, sizeof(GFXfont));
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	220c      	movs	r2, #12
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fca3 	bl	8003458 <memcpy>
  for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000b16:	e056      	b.n	8000bc6 <LCD_Font+0xdc>
    char c = text[text_pos];
 8000b18:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if (c == '\n') {
 8000b24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000b28:	2b0a      	cmp	r3, #10
 8000b2a:	d10f      	bne.n	8000b4c <LCD_Font+0x62>
      cursor_x = x;
 8000b2c:	89fb      	ldrh	r3, [r7, #14]
 8000b2e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      cursor_y += font.yAdvance * size;
 8000b30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b34:	461a      	mov	r2, r3
 8000b36:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	fb12 f303 	smulbb	r3, r2, r3
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b44:	4413      	add	r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000b4a:	e039      	b.n	8000bc0 <LCD_Font+0xd6>
    } else if (c >= font.first && c <= font.last && c != '\r') {
 8000b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b50:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d333      	bcc.n	8000bc0 <LCD_Font+0xd6>
 8000b58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000b5c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d82d      	bhi.n	8000bc0 <LCD_Font+0xd6>
 8000b64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000b68:	2b0d      	cmp	r3, #13
 8000b6a:	d029      	beq.n	8000bc0 <LCD_Font+0xd6>
      GFXglyph glyph;
      memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8000b6c:	6a3a      	ldr	r2, [r7, #32]
 8000b6e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000b72:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000b76:	1a5b      	subs	r3, r3, r1
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	18d1      	adds	r1, r2, r3
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2208      	movs	r2, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fc68 	bl	8003458 <memcpy>
      LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8000b88:	f107 041c 	add.w	r4, r7, #28
 8000b8c:	f107 0214 	add.w	r2, r7, #20
 8000b90:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8000b94:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8000b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4623      	mov	r3, r4
 8000ba4:	f7ff fee2 	bl	800096c <LCD_Char>
      cursor_x += glyph.xAdvance * size;
 8000ba8:	7e3b      	ldrb	r3, [r7, #24]
 8000baa:	461a      	mov	r2, r3
 8000bac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	fb12 f303 	smulbb	r3, r2, r3
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8000bc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000bc6:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8000bc8:	68b8      	ldr	r0, [r7, #8]
 8000bca:	f7ff fb19 	bl	8000200 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	d3a1      	bcc.n	8000b18 <LCD_Font+0x2e>
    }
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3734      	adds	r7, #52	@ 0x34
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd90      	pop	{r4, r7, pc}
	...

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b09c      	sub	sp, #112	@ 0x70
 8000be4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 fbb8 	bl	800135a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f855 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f000 f921 	bl	8000e34 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000bf2:	f000 f8a3 	bl	8000d3c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000bf6:	f000 f8df 	bl	8000db8 <MX_SPI3_Init>
				ILI9488_SendData(0x07FF<<3);//BLUE
			}
		}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET); //LCD CHIP SELECT
*/
  ILI9488_Init();
 8000bfa:	f7ff fbdb 	bl	80003b4 <ILI9488_Init>
HAL_Delay(1000);
 8000bfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c02:	f000 fc1f 	bl	8001444 <HAL_Delay>
setRotation(1);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fe5e 	bl	80008c8 <setRotation>
fillScreen(ILI9488_WHITE);
 8000c0c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c10:	f7ff fcfc 	bl	800060c <fillScreen>

   uint16_t touchX = 0, touchY = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
   fillRect(300, 230,75,75, ILI9488_RED);
   drawCharTest(319, 250, '9', ILI9488_BLACK,ILI9488_RED, 3);*/
   //drawChar(135, 61, '1', ILI9488_BLACK,ILI9488_RED, 1);


   uint16_t count = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
   uint16_t entered[10];
   char greetings[] = "Sunday, April 14 2024, 22: 13: 39";
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <main+0xac>)
 8000c28:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000c2c:	461d      	mov	r5, r3
 8000c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	682b      	ldr	r3, [r5, #0]
 8000c38:	8023      	strh	r3, [r4, #0]
  // ILI9488_printTextTest(greetings, 25, 25, ILI9488_BLACK, ILI9488_WHITE, 3);
   LCD_Font(25, 25, greetings, _Open_Sans_Bold_20, 1, ILI9488_BLACK);
 8000c3a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <main+0xb0>)
 8000c48:	2119      	movs	r1, #25
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f7ff ff4d 	bl	8000aea <LCD_Font>
	  //char buf2[20];
	  //char buf3[20];

	  	  //ILI9488_printTextTest(buf1, 250 , 25, ILI9488_BLACK, ILI9488_WHITE, 2);
	  	 //ILI9488_printText(buf3, 150, 25, ILI9488_WHITE, ILI9488_WHITE, 1);
	  	  touchX = getX();
 8000c50:	f000 fb46 	bl	80012e0 <getX>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	  	  touchY = getY();
 8000c5a:	f000 fb4b 	bl	80012f4 <getY>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	  	  sprintf(buf,"x=%3d y=%3d",touchX,touchY);
 8000c64:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8000c68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000c6c:	f107 0014 	add.w	r0, r7, #20
 8000c70:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <main+0xb4>)
 8000c72:	f002 fb9d 	bl	80033b0 <siprintf>
	  	  sprintf(buf1,"x=%3d y=%3d",touchX,touchY);
 8000c76:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8000c7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4904      	ldr	r1, [pc, #16]	@ (8000c94 <main+0xb4>)
 8000c82:	f002 fb95 	bl	80033b0 <siprintf>
  {
 8000c86:	bf00      	nop
 8000c88:	e7e2      	b.n	8000c50 <main+0x70>
 8000c8a:	bf00      	nop
 8000c8c:	08003d14 	.word	0x08003d14
 8000c90:	08004670 	.word	0x08004670
 8000c94:	08003d08 	.word	0x08003d08

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b096      	sub	sp, #88	@ 0x58
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2244      	movs	r2, #68	@ 0x44
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fba2 	bl	80033f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 fe96 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000cc6:	f000 f90b 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cd6:	2360      	movs	r3, #96	@ 0x60
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ce6:	233c      	movs	r3, #60	@ 0x3c
 8000ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 ff1a 	bl	8001b34 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d06:	f000 f8eb 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2105      	movs	r1, #5
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fb20 	bl	8002368 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d2e:	f000 f8d7 	bl	8000ee0 <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3758      	adds	r7, #88	@ 0x58
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <MX_SPI2_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d56:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d5a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d6e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d96:	2208      	movs	r2, #8
 8000d98:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_SPI2_Init+0x74>)
 8000d9c:	f001 fd6a 	bl	8002874 <HAL_SPI_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000da6:	f000 f89b 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000007c 	.word	0x2000007c
 8000db4:	40003800 	.word	0x40003800

08000db8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000e30 <MX_SPI3_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dc8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dd2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000dd6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dee:	2218      	movs	r2, #24
 8000df0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e04:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e06:	2207      	movs	r2, #7
 8000e08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e12:	2208      	movs	r2, #8
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e18:	f001 fd2c 	bl	8002874 <HAL_SPI_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f000 f85d 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000e0 	.word	0x200000e0
 8000e30:	40003c00 	.word	0x40003c00

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	4a21      	ldr	r2, [pc, #132]	@ (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e80:	4815      	ldr	r0, [pc, #84]	@ (8000ed8 <MX_GPIO_Init+0xa4>)
 8000e82:	f000 fd7b 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	21c1      	movs	r1, #193	@ 0xc1
 8000e8a:	4814      	ldr	r0, [pc, #80]	@ (8000edc <MX_GPIO_Init+0xa8>)
 8000e8c:	f000 fd76 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <MX_GPIO_Init+0xa4>)
 8000eaa:	f000 fbd5 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin;
 8000eae:	23c1      	movs	r3, #193	@ 0xc1
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_GPIO_Init+0xa8>)
 8000ec6:	f000 fbc7 	bl	8001658 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eca:	bf00      	nop
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	48000c00 	.word	0x48000c00

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <Error_Handler+0x8>

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	@ 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a2e      	ldr	r2, [pc, #184]	@ (800100c <HAL_SPI_MspInit+0xd8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d128      	bne.n	8000fa8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f56:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f62:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a27      	ldr	r2, [pc, #156]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000f86:	231a      	movs	r3, #26
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f96:	2305      	movs	r3, #5
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481c      	ldr	r0, [pc, #112]	@ (8001014 <HAL_SPI_MspInit+0xe0>)
 8000fa2:	f000 fb59 	bl	8001658 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fa6:	e02c      	b.n	8001002 <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI3)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1a      	ldr	r2, [pc, #104]	@ (8001018 <HAL_SPI_MspInit+0xe4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d127      	bne.n	8001002 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb6:	4a16      	ldr	r2, [pc, #88]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	4a10      	ldr	r2, [pc, #64]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_SPI_MspInit+0xdc>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fe2:	2338      	movs	r3, #56	@ 0x38
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	@ (800101c <HAL_SPI_MspInit+0xe8>)
 8000ffe:	f000 fb2b 	bl	8001658 <HAL_GPIO_Init>
}
 8001002:	bf00      	nop
 8001004:	3730      	adds	r7, #48	@ 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40003800 	.word	0x40003800
 8001010:	40021000 	.word	0x40021000
 8001014:	48000c00 	.word	0x48000c00
 8001018:	40003c00 	.word	0x40003c00
 800101c:	48000400 	.word	0x48000400

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <NMI_Handler+0x4>

08001028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <MemManage_Handler+0x4>

08001038 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <UsageFault_Handler+0x4>

08001048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001076:	f000 f9c5 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <_sbrk>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
 80010b0:	f002 f9a6 	bl	8003400 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200a0000 	.word	0x200a0000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	20000144 	.word	0x20000144
 80010e8:	20000298 	.word	0x20000298

080010ec <SystemInit>:
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <remap>:


extern SPI_HandleTypeDef hspi3;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	ed87 0a05 	vstr	s0, [r7, #20]
 800111a:	edc7 0a04 	vstr	s1, [r7, #16]
 800111e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001122:	edc7 1a02 	vstr	s3, [r7, #8]
 8001126:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800112a:	ed97 7a05 	vldr	s14, [r7, #20]
 800112e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001132:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001136:	edd7 6a01 	vldr	s13, [r7, #4]
 800113a:	edd7 7a02 	vldr	s15, [r7, #8]
 800113e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001142:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001146:	ed97 7a03 	vldr	s14, [r7, #12]
 800114a:	edd7 7a04 	vldr	s15, [r7, #16]
 800114e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001156:	edd7 7a02 	vldr	s15, [r7, #8]
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <getRaw>:
	HAL_SPI_Transmit(&hspi3, 0x00, 1, 1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
}

uint16_t getRaw(uint8_t address)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af02      	add	r7, sp, #8
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800117c:	481c      	ldr	r0, [pc, #112]	@ (80011f0 <getRaw+0x84>)
 800117e:	f000 fbfd 	bl	800197c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f000 f95e 	bl	8001444 <HAL_Delay>
	HAL_SPI_Transmit(&hspi3, &address, 1, 1000);
 8001188:	1df9      	adds	r1, r7, #7
 800118a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118e:	2201      	movs	r2, #1
 8001190:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <getRaw+0x88>)
 8001192:	f001 fc12 	bl	80029ba <HAL_SPI_Transmit>
	address = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 800119a:	f107 020b 	add.w	r2, r7, #11
 800119e:	1df9      	adds	r1, r7, #7
 80011a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	4812      	ldr	r0, [pc, #72]	@ (80011f4 <getRaw+0x88>)
 80011aa:	f001 fd7b 	bl	8002ca4 <HAL_SPI_TransmitReceive>
	MSB = data;   
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi3, &address, &data, sizeof(data), 1000);
 80011b6:	f107 020b 	add.w	r2, r7, #11
 80011ba:	1df9      	adds	r1, r7, #7
 80011bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <getRaw+0x88>)
 80011c6:	f001 fd6d 	bl	8002ca4 <HAL_SPI_TransmitReceive>
	LSB = data;
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d4:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <getRaw+0x84>)
 80011d6:	f000 fbd1 	bl	800197c <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	021a      	lsls	r2, r3, #8
 80011de:	89bb      	ldrh	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	10db      	asrs	r3, r3, #3
 80011e4:	b29b      	uxth	r3, r3
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	48000400 	.word	0x48000400
 80011f4:	200000e0 	.word	0x200000e0

080011f8 <X>:

inline static uint16_t X(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80011fe:	20d0      	movs	r0, #208	@ 0xd0
 8001200:	f7ff ffb4 	bl	800116c <getRaw>
 8001204:	4603      	mov	r3, r0
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120e:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 800125c <X+0x64>
 8001212:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8001260 <X+0x68>
 8001216:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001264 <X+0x6c>
 800121a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001268 <X+0x70>
 800121e:	eeb0 0a67 	vmov.f32	s0, s15
 8001222:	f7ff ff75 	bl	8001110 <remap>
 8001226:	eef0 7a40 	vmov.f32	s15, s0
 800122a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122e:	ee17 3a90 	vmov	r3, s15
 8001232:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800123a:	3301      	adds	r3, #1
 800123c:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <X+0x58>
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800124a:	d801      	bhi.n	8001250 <X+0x58>
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	e000      	b.n	8001252 <X+0x5a>
	else return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	439f8000 	.word	0x439f8000
 8001260:	00000000 	.word	0x00000000
 8001264:	456d8000 	.word	0x456d8000
 8001268:	43960000 	.word	0x43960000

0800126c <Y>:

inline static uint16_t Y(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8001272:	2090      	movs	r0, #144	@ 0x90
 8001274:	f7ff ff7a 	bl	800116c <getRaw>
 8001278:	4603      	mov	r3, r0
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001282:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 80012d0 <Y+0x64>
 8001286:	eddf 1a13 	vldr	s3, [pc, #76]	@ 80012d4 <Y+0x68>
 800128a:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 80012d8 <Y+0x6c>
 800128e:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80012dc <Y+0x70>
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	f7ff ff3b 	bl	8001110 <remap>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	ee17 3a90 	vmov	r3, s15
 80012a6:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 80012ae:	3301      	adds	r3, #1
 80012b0:	80fb      	strh	r3, [r7, #6]
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <Y+0x58>
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 80012be:	d801      	bhi.n	80012c4 <Y+0x58>
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	e000      	b.n	80012c6 <Y+0x5a>
	else return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	43ef8000 	.word	0x43ef8000
 80012d4:	00000000 	.word	0x00000000
 80012d8:	456a6000 	.word	0x456a6000
 80012dc:	43c80000 	.word	0x43c80000

080012e0 <getX>:

uint16_t getX(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
 80012e6:	f7ff ffc1 	bl	800126c <Y>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <getY>:

uint16_t getY(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
 80012fa:	f7ff ff7d 	bl	80011f8 <X>
 80012fe:	4603      	mov	r3, r0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <Reset_Handler>:
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001340 <LoopForever+0x2>
 800130c:	f7ff feee 	bl	80010ec <SystemInit>
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <LoopForever+0x6>)
 8001312:	490d      	ldr	r1, [pc, #52]	@ (8001348 <LoopForever+0xa>)
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <LoopForever+0xe>)
 8001316:	2300      	movs	r3, #0
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:
 800131a:	58d4      	ldr	r4, [r2, r3]
 800131c:	50c4      	str	r4, [r0, r3]
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:
 8001320:	18c4      	adds	r4, r0, r3
 8001322:	428c      	cmp	r4, r1
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <LoopForever+0x12>)
 8001328:	4c0a      	ldr	r4, [pc, #40]	@ (8001354 <LoopForever+0x16>)
 800132a:	2300      	movs	r3, #0
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:
 8001332:	42a2      	cmp	r2, r4
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>
 8001336:	f002 f869 	bl	800340c <__libc_init_array>
 800133a:	f7ff fc51 	bl	8000be0 <main>

0800133e <LoopForever>:
 800133e:	e7fe      	b.n	800133e <LoopForever>
 8001340:	200a0000 	.word	0x200a0000
 8001344:	20000000 	.word	0x20000000
 8001348:	2000005c 	.word	0x2000005c
 800134c:	08004700 	.word	0x08004700
 8001350:	2000005c 	.word	0x2000005c
 8001354:	20000294 	.word	0x20000294

08001358 <ADC1_IRQHandler>:
 8001358:	e7fe      	b.n	8001358 <ADC1_IRQHandler>

0800135a <HAL_Init>:
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	2300      	movs	r3, #0
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f943 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>
 800136a:	200f      	movs	r0, #15
 800136c:	f000 f80e 	bl	800138c <HAL_InitTick>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <HAL_Init+0x22>
 8001376:	2301      	movs	r3, #1
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e001      	b.n	8001380 <HAL_Init+0x26>
 800137c:	f7ff fdb6 	bl	8000eec <HAL_MspInit>
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_InitTick>:
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <HAL_InitTick+0x6c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d023      	beq.n	80013e8 <HAL_InitTick+0x5c>
 80013a0:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_InitTick+0x70>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <HAL_InitTick+0x6c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f941 	bl	800163e <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_InitTick+0x56>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d809      	bhi.n	80013dc <HAL_InitTick+0x50>
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013d0:	f000 f919 	bl	8001606 <HAL_NVIC_SetPriority>
 80013d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <HAL_InitTick+0x74>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e007      	b.n	80013ec <HAL_InitTick+0x60>
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e004      	b.n	80013ec <HAL_InitTick+0x60>
 80013e2:	2301      	movs	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e001      	b.n	80013ec <HAL_InitTick+0x60>
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_IncTick>:
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	20000148 	.word	0x20000148

0800142c <HAL_GetTick>:
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
 8001430:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000148 	.word	0x20000148

08001444 <HAL_Delay>:
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	f7ff ffee 	bl	800142c <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_Delay+0x44>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	bf00      	nop
 800146c:	f7ff ffde 	bl	800142c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008

0800148c <__NVIC_SetPriorityGrouping>:
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_SetPriority>:
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	@ (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	@ (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
 800158c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
 800159c:	4313      	orrs	r3, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	@ 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <SysTick_Config>:
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015d0:	f7ff ff8e 	bl	80014f0 <__NVIC_SetPriority>
 80015d4:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff47 	bl	800148c <__NVIC_SetPriorityGrouping>
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	f7ff ff5c 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff8e 	bl	8001544 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5d 	bl	80014f0 <__NVIC_SetPriority>
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_SYSTICK_Config>:
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffb0 	bl	80015ac <SysTick_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_GPIO_Init>:
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e166      	b.n	8001936 <HAL_GPIO_Init+0x2de>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8158 	beq.w	8001930 <HAL_GPIO_Init+0x2d8>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d005      	beq.n	8001698 <HAL_GPIO_Init+0x40>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d130      	bne.n	80016fa <HAL_GPIO_Init+0xa2>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	2201      	movs	r2, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 0201 	and.w	r2, r3, #1
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b03      	cmp	r3, #3
 8001704:	d017      	beq.n	8001736 <HAL_GPIO_Init+0xde>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d123      	bne.n	800178a <HAL_GPIO_Init+0x132>
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3208      	adds	r2, #8
 800174a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	220f      	movs	r2, #15
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	691a      	ldr	r2, [r3, #16]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	6939      	ldr	r1, [r7, #16]
 8001786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0203 	and.w	r2, r3, #3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80b2 	beq.w	8001930 <HAL_GPIO_Init+0x2d8>
 80017cc:	4b61      	ldr	r3, [pc, #388]	@ (8001954 <HAL_GPIO_Init+0x2fc>)
 80017ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d0:	4a60      	ldr	r2, [pc, #384]	@ (8001954 <HAL_GPIO_Init+0x2fc>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80017d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <HAL_GPIO_Init+0x2fc>)
 80017da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4a5c      	ldr	r2, [pc, #368]	@ (8001958 <HAL_GPIO_Init+0x300>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800180e:	d02b      	beq.n	8001868 <HAL_GPIO_Init+0x210>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a52      	ldr	r2, [pc, #328]	@ (800195c <HAL_GPIO_Init+0x304>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d025      	beq.n	8001864 <HAL_GPIO_Init+0x20c>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a51      	ldr	r2, [pc, #324]	@ (8001960 <HAL_GPIO_Init+0x308>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d01f      	beq.n	8001860 <HAL_GPIO_Init+0x208>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a50      	ldr	r2, [pc, #320]	@ (8001964 <HAL_GPIO_Init+0x30c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d019      	beq.n	800185c <HAL_GPIO_Init+0x204>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a4f      	ldr	r2, [pc, #316]	@ (8001968 <HAL_GPIO_Init+0x310>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_GPIO_Init+0x200>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a4e      	ldr	r2, [pc, #312]	@ (800196c <HAL_GPIO_Init+0x314>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00d      	beq.n	8001854 <HAL_GPIO_Init+0x1fc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a4d      	ldr	r2, [pc, #308]	@ (8001970 <HAL_GPIO_Init+0x318>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x1f8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a4c      	ldr	r2, [pc, #304]	@ (8001974 <HAL_GPIO_Init+0x31c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_GPIO_Init+0x1f4>
 8001848:	2307      	movs	r3, #7
 800184a:	e00e      	b.n	800186a <HAL_GPIO_Init+0x212>
 800184c:	2308      	movs	r3, #8
 800184e:	e00c      	b.n	800186a <HAL_GPIO_Init+0x212>
 8001850:	2306      	movs	r3, #6
 8001852:	e00a      	b.n	800186a <HAL_GPIO_Init+0x212>
 8001854:	2305      	movs	r3, #5
 8001856:	e008      	b.n	800186a <HAL_GPIO_Init+0x212>
 8001858:	2304      	movs	r3, #4
 800185a:	e006      	b.n	800186a <HAL_GPIO_Init+0x212>
 800185c:	2303      	movs	r3, #3
 800185e:	e004      	b.n	800186a <HAL_GPIO_Init+0x212>
 8001860:	2302      	movs	r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x212>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_GPIO_Init+0x212>
 8001868:	2300      	movs	r3, #0
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	f002 0203 	and.w	r2, r2, #3
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	4093      	lsls	r3, r2
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4937      	ldr	r1, [pc, #220]	@ (8001958 <HAL_GPIO_Init+0x300>)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001888:	4b3b      	ldr	r3, [pc, #236]	@ (8001978 <HAL_GPIO_Init+0x320>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x254>
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	4a32      	ldr	r2, [pc, #200]	@ (8001978 <HAL_GPIO_Init+0x320>)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	6093      	str	r3, [r2, #8]
 80018b2:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <HAL_GPIO_Init+0x320>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x27e>
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4a28      	ldr	r2, [pc, #160]	@ (8001978 <HAL_GPIO_Init+0x320>)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	60d3      	str	r3, [r2, #12]
 80018dc:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_GPIO_Init+0x320>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2a8>
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	4a1d      	ldr	r2, [pc, #116]	@ (8001978 <HAL_GPIO_Init+0x320>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6053      	str	r3, [r2, #4]
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <HAL_GPIO_Init+0x320>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x2d2>
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4a13      	ldr	r2, [pc, #76]	@ (8001978 <HAL_GPIO_Init+0x320>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	f47f ae91 	bne.w	8001668 <HAL_GPIO_Init+0x10>
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000
 800195c:	48000400 	.word	0x48000400
 8001960:	48000800 	.word	0x48000800
 8001964:	48000c00 	.word	0x48000c00
 8001968:	48001000 	.word	0x48001000
 800196c:	48001400 	.word	0x48001400
 8001970:	48001800 	.word	0x48001800
 8001974:	48001c00 	.word	0x48001c00
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_WritePin+0x24>
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_PWREx_GetVoltageRange>:
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019bc:	d102      	bne.n	80019c4 <HAL_PWREx_GetVoltageRange+0x18>
 80019be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019c2:	e00b      	b.n	80019dc <HAL_PWREx_GetVoltageRange+0x30>
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80019c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019d2:	d102      	bne.n	80019da <HAL_PWREx_GetVoltageRange+0x2e>
 80019d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019d8:	e000      	b.n	80019dc <HAL_PWREx_GetVoltageRange+0x30>
 80019da:	2300      	movs	r3, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_PWREx_ControlVoltageScaling>:
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d141      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x92>
 80019fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a06:	d131      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x80>
 8001a08:	4b47      	ldr	r3, [pc, #284]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a0e:	4a46      	ldr	r2, [pc, #280]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a18:	4b43      	ldr	r3, [pc, #268]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a20:	4a41      	ldr	r2, [pc, #260]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2232      	movs	r2, #50	@ 0x32
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	4a3f      	ldr	r2, [pc, #252]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	0c9b      	lsrs	r3, r3, #18
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e002      	b.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x5a>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a52:	d102      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f2      	bne.n	8001a40 <HAL_PWREx_ControlVoltageScaling+0x54>
 8001a5a:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a66:	d158      	bne.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e057      	b.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x130>
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a72:	4a2d      	ldr	r2, [pc, #180]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a7c:	e04d      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a84:	d141      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x11e>
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a92:	d131      	bne.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x10c>
 8001a94:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a9a:	4a23      	ldr	r2, [pc, #140]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aac:	4a1e      	ldr	r2, [pc, #120]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2232      	movs	r2, #50	@ 0x32
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9b      	lsrs	r3, r3, #18
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e002      	b.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0xe6>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ade:	d102      	bne.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f2      	bne.n	8001acc <HAL_PWREx_ControlVoltageScaling+0xe0>
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001af2:	d112      	bne.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8001af4:	2303      	movs	r3, #3
 8001af6:	e011      	b.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x130>
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b08:	e007      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b12:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	431bde83 	.word	0x431bde83

08001b34 <HAL_RCC_OscConfig>:
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_OscConfig+0x14>
 8001b42:	2301      	movs	r3, #1
 8001b44:	f000 bc08 	b.w	8002358 <HAL_RCC_OscConfig+0x824>
 8001b48:	4b96      	ldr	r3, [pc, #600]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	4b94      	ldr	r3, [pc, #592]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80e4 	beq.w	8001d32 <HAL_RCC_OscConfig+0x1fe>
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4c>
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	f040 808b 	bne.w	8001c8e <HAL_RCC_OscConfig+0x15a>
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	f040 8087 	bne.w	8001c8e <HAL_RCC_OscConfig+0x15a>
 8001b80:	4b88      	ldr	r3, [pc, #544]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_OscConfig+0x64>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_OscConfig+0x64>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e3df      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	4b81      	ldr	r3, [pc, #516]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x7e>
 8001ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb0:	e005      	b.n	8001bbe <HAL_RCC_OscConfig+0x8a>
 8001bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d223      	bcs.n	8001c0a <HAL_RCC_OscConfig+0xd6>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fd94 	bl	80026f4 <RCC_SetFlashLatencyFromMSIRange>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0xa2>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e3c0      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001bd6:	4b73      	ldr	r3, [pc, #460]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a72      	ldr	r2, [pc, #456]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b70      	ldr	r3, [pc, #448]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	496d      	ldr	r1, [pc, #436]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	4968      	ldr	r1, [pc, #416]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
 8001c08:	e025      	b.n	8001c56 <HAL_RCC_OscConfig+0x122>
 8001c0a:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a65      	ldr	r2, [pc, #404]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b63      	ldr	r3, [pc, #396]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4960      	ldr	r1, [pc, #384]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	4b5e      	ldr	r3, [pc, #376]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	495b      	ldr	r1, [pc, #364]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_OscConfig+0x122>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fd54 	bl	80026f4 <RCC_SetFlashLatencyFromMSIRange>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x122>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e380      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001c56:	f000 fcc1 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b51      	ldr	r3, [pc, #324]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	4950      	ldr	r1, [pc, #320]	@ (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	4a4e      	ldr	r2, [pc, #312]	@ (8001dac <HAL_RCC_OscConfig+0x278>)
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b4e      	ldr	r3, [pc, #312]	@ (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fb86 	bl	800138c <HAL_InitTick>
 8001c80:	4603      	mov	r3, r0
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d052      	beq.n	8001d30 <HAL_RCC_OscConfig+0x1fc>
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	e364      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d032      	beq.n	8001cfc <HAL_RCC_OscConfig+0x1c8>
 8001c96:	4b43      	ldr	r3, [pc, #268]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a42      	ldr	r2, [pc, #264]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	f7ff fbc3 	bl	800142c <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x188>
 8001caa:	f7ff fbbf 	bl	800142c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x188>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e34d      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001cbc:	4b39      	ldr	r3, [pc, #228]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
 8001cc8:	4b36      	ldr	r3, [pc, #216]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a35      	ldr	r2, [pc, #212]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b33      	ldr	r3, [pc, #204]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4930      	ldr	r1, [pc, #192]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	492b      	ldr	r1, [pc, #172]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
 8001cfa:	e01a      	b.n	8001d32 <HAL_RCC_OscConfig+0x1fe>
 8001cfc:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a28      	ldr	r2, [pc, #160]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	f7ff fb90 	bl	800142c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1ee>
 8001d10:	f7ff fb8c 	bl	800142c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1ee>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e31a      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1dc>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x1fe>
 8001d30:	bf00      	nop
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d073      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x21c>
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d10e      	bne.n	8001d68 <HAL_RCC_OscConfig+0x234>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d10b      	bne.n	8001d68 <HAL_RCC_OscConfig+0x234>
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d063      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d15f      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e2f7      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d70:	d106      	bne.n	8001d80 <HAL_RCC_OscConfig+0x24c>
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a0b      	ldr	r2, [pc, #44]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e025      	b.n	8001dcc <HAL_RCC_OscConfig+0x298>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d88:	d114      	bne.n	8001db4 <HAL_RCC_OscConfig+0x280>
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a02      	ldr	r2, [pc, #8]	@ (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e013      	b.n	8001dcc <HAL_RCC_OscConfig+0x298>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	0800467c 	.word	0x0800467c
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000004 	.word	0x20000004
 8001db4:	4ba0      	ldr	r3, [pc, #640]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a9f      	ldr	r2, [pc, #636]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b9d      	ldr	r3, [pc, #628]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a9c      	ldr	r2, [pc, #624]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0x2c8>
 8001dd4:	f7ff fb2a 	bl	800142c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x2ba>
 8001ddc:	f7ff fb26 	bl	800142c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	@ 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x2ba>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e2b4      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001dee:	4b92      	ldr	r3, [pc, #584]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x2a8>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
 8001dfc:	f7ff fb16 	bl	800142c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x2e2>
 8001e04:	f7ff fb12 	bl	800142c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	@ 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x2e2>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e2a0      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001e16:	4b88      	ldr	r3, [pc, #544]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2d0>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
 8001e24:	bf00      	nop
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d060      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_OscConfig+0x310>
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d119      	bne.n	8001e72 <HAL_RCC_OscConfig+0x33e>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d116      	bne.n	8001e72 <HAL_RCC_OscConfig+0x33e>
 8001e44:	4b7c      	ldr	r3, [pc, #496]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_OscConfig+0x328>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0x328>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e27d      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001e5c:	4b76      	ldr	r3, [pc, #472]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	4973      	ldr	r1, [pc, #460]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e040      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d023      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x38e>
 8001e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	f7ff fad1 	bl	800142c <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x36c>
 8001e8e:	f7ff facd 	bl	800142c <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x36c>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e25b      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001ea0:	4b65      	ldr	r3, [pc, #404]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x35a>
 8001eac:	4b62      	ldr	r3, [pc, #392]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	495f      	ldr	r1, [pc, #380]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
 8001ec0:	e018      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5c      	ldr	r2, [pc, #368]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	f7ff faad 	bl	800142c <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3b4>
 8001ed6:	f7ff faa9 	bl	800142c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x3b4>
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e237      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001ee8:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3a2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d03c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x446>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x40e>
 8001f08:	4b4b      	ldr	r3, [pc, #300]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0e:	4a4a      	ldr	r2, [pc, #296]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001f18:	f7ff fa88 	bl	800142c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x3fe>
 8001f20:	f7ff fa84 	bl	800142c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x3fe>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e212      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001f32:	4b41      	ldr	r3, [pc, #260]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ef      	beq.n	8001f20 <HAL_RCC_OscConfig+0x3ec>
 8001f40:	e01b      	b.n	8001f7a <HAL_RCC_OscConfig+0x446>
 8001f42:	4b3d      	ldr	r3, [pc, #244]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f48:	4a3b      	ldr	r2, [pc, #236]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001f52:	f7ff fa6b 	bl	800142c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x438>
 8001f5a:	f7ff fa67 	bl	800142c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x438>
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1f5      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001f6c:	4b32      	ldr	r3, [pc, #200]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ef      	bne.n	8001f5a <HAL_RCC_OscConfig+0x426>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80a6 	beq.w	80020d4 <HAL_RCC_OscConfig+0x5a0>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	77fb      	strb	r3, [r7, #31]
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x480>
 8001f98:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	4a26      	ldr	r2, [pc, #152]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa4:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	77fb      	strb	r3, [r7, #31]
 8001fb4:	4b21      	ldr	r3, [pc, #132]	@ (800203c <HAL_RCC_OscConfig+0x508>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d118      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x4be>
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <HAL_RCC_OscConfig+0x508>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800203c <HAL_RCC_OscConfig+0x508>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	f7ff fa2e 	bl	800142c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4b2>
 8001fd4:	f7ff fa2a 	bl	800142c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4b2>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1b8      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_RCC_OscConfig+0x508>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <HAL_RCC_OscConfig+0x4d8>
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002000:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800200a:	e029      	b.n	8002060 <HAL_RCC_OscConfig+0x52c>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b05      	cmp	r3, #5
 8002012:	d115      	bne.n	8002040 <HAL_RCC_OscConfig+0x50c>
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002024:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	4a03      	ldr	r2, [pc, #12]	@ (8002038 <HAL_RCC_OscConfig+0x504>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002034:	e014      	b.n	8002060 <HAL_RCC_OscConfig+0x52c>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
 8002040:	4b9d      	ldr	r3, [pc, #628]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002046:	4a9c      	ldr	r2, [pc, #624]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002050:	4b99      	ldr	r3, [pc, #612]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a98      	ldr	r2, [pc, #608]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d016      	beq.n	8002096 <HAL_RCC_OscConfig+0x562>
 8002068:	f7ff f9e0 	bl	800142c <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x552>
 8002070:	f7ff f9dc 	bl	800142c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x552>
 8002082:	2303      	movs	r3, #3
 8002084:	e168      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8002086:	4b8c      	ldr	r3, [pc, #560]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ed      	beq.n	8002070 <HAL_RCC_OscConfig+0x53c>
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x58e>
 8002096:	f7ff f9c9 	bl	800142c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x580>
 800209e:	f7ff f9c5 	bl	800142c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x580>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e151      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 80020b4:	4b80      	ldr	r3, [pc, #512]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1ed      	bne.n	800209e <HAL_RCC_OscConfig+0x56a>
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_RCC_OscConfig+0x5a0>
 80020c8:	4b7b      	ldr	r3, [pc, #492]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	4a7a      	ldr	r2, [pc, #488]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 80020ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03c      	beq.n	800215a <HAL_RCC_OscConfig+0x626>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01c      	beq.n	8002122 <HAL_RCC_OscConfig+0x5ee>
 80020e8:	4b73      	ldr	r3, [pc, #460]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 80020ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ee:	4a72      	ldr	r2, [pc, #456]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 80020f8:	f7ff f998 	bl	800142c <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x5de>
 8002100:	f7ff f994 	bl	800142c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x5de>
 800210e:	2303      	movs	r3, #3
 8002110:	e122      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8002112:	4b69      	ldr	r3, [pc, #420]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ef      	beq.n	8002100 <HAL_RCC_OscConfig+0x5cc>
 8002120:	e01b      	b.n	800215a <HAL_RCC_OscConfig+0x626>
 8002122:	4b65      	ldr	r3, [pc, #404]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002128:	4a63      	ldr	r2, [pc, #396]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002132:	f7ff f97b 	bl	800142c <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x618>
 800213a:	f7ff f977 	bl	800142c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x618>
 8002148:	2303      	movs	r3, #3
 800214a:	e105      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 800214c:	4b5a      	ldr	r3, [pc, #360]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 800214e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ef      	bne.n	800213a <HAL_RCC_OscConfig+0x606>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80f9 	beq.w	8002356 <HAL_RCC_OscConfig+0x822>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	2b02      	cmp	r3, #2
 800216a:	f040 80cf 	bne.w	800230c <HAL_RCC_OscConfig+0x7d8>
 800216e:	4b52      	ldr	r3, [pc, #328]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0203 	and.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	429a      	cmp	r2, r3
 8002180:	d12c      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	3b01      	subs	r3, #1
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	429a      	cmp	r2, r3
 8002192:	d123      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d11b      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	06db      	lsls	r3, r3, #27
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d113      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	055b      	lsls	r3, r3, #21
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d109      	bne.n	80021dc <HAL_RCC_OscConfig+0x6a8>
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	065b      	lsls	r3, r3, #25
 80021d8:	429a      	cmp	r2, r3
 80021da:	d071      	beq.n	80022c0 <HAL_RCC_OscConfig+0x78c>
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d068      	beq.n	80022b4 <HAL_RCC_OscConfig+0x780>
 80021e2:	4b35      	ldr	r3, [pc, #212]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <HAL_RCC_OscConfig+0x6c6>
 80021ee:	4b32      	ldr	r3, [pc, #200]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x6ca>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0ac      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 80021fe:	4b2e      	ldr	r3, [pc, #184]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2d      	ldr	r2, [pc, #180]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002204:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	f7ff f90f 	bl	800142c <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x6f0>
 8002212:	f7ff f90b 	bl	800142c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x6f0>
 8002220:	2303      	movs	r3, #3
 8002222:	e099      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8002224:	4b24      	ldr	r3, [pc, #144]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x6de>
 8002230:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	4b21      	ldr	r3, [pc, #132]	@ (80022bc <HAL_RCC_OscConfig+0x788>)
 8002236:	4013      	ands	r3, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002240:	3a01      	subs	r2, #1
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800224a:	0212      	lsls	r2, r2, #8
 800224c:	4311      	orrs	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002252:	0852      	lsrs	r2, r2, #1
 8002254:	3a01      	subs	r2, #1
 8002256:	0552      	lsls	r2, r2, #21
 8002258:	4311      	orrs	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800225e:	0852      	lsrs	r2, r2, #1
 8002260:	3a01      	subs	r2, #1
 8002262:	0652      	lsls	r2, r2, #25
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800226a:	06d2      	lsls	r2, r2, #27
 800226c:	430a      	orrs	r2, r1
 800226e:	4912      	ldr	r1, [pc, #72]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002270:	4313      	orrs	r3, r2
 8002272:	60cb      	str	r3, [r1, #12]
 8002274:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0f      	ldr	r2, [pc, #60]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a0c      	ldr	r2, [pc, #48]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800228a:	60d3      	str	r3, [r2, #12]
 800228c:	f7ff f8ce 	bl	800142c <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x772>
 8002294:	f7ff f8ca 	bl	800142c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x772>
 80022a2:	2303      	movs	r3, #3
 80022a4:	e058      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 80022a6:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <HAL_RCC_OscConfig+0x784>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x760>
 80022b2:	e050      	b.n	8002356 <HAL_RCC_OscConfig+0x822>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e04f      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	019d800c 	.word	0x019d800c
 80022c0:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d144      	bne.n	8002356 <HAL_RCC_OscConfig+0x822>
 80022cc:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a23      	ldr	r2, [pc, #140]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b21      	ldr	r3, [pc, #132]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a20      	ldr	r2, [pc, #128]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e2:	60d3      	str	r3, [r2, #12]
 80022e4:	f7ff f8a2 	bl	800142c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x7ca>
 80022ec:	f7ff f89e 	bl	800142c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x7ca>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e02c      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x7b8>
 800230a:	e024      	b.n	8002356 <HAL_RCC_OscConfig+0x822>
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d01f      	beq.n	8002352 <HAL_RCC_OscConfig+0x81e>
 8002312:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 8002318:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	f7ff f885 	bl	800142c <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x804>
 8002326:	f7ff f881 	bl	800142c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x804>
 8002334:	2303      	movs	r3, #3
 8002336:	e00f      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f0      	bne.n	8002326 <HAL_RCC_OscConfig+0x7f2>
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	4905      	ldr	r1, [pc, #20]	@ (8002360 <HAL_RCC_OscConfig+0x82c>)
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_RCC_OscConfig+0x830>)
 800234c:	4013      	ands	r3, r2
 800234e:	60cb      	str	r3, [r1, #12]
 8002350:	e001      	b.n	8002356 <HAL_RCC_OscConfig+0x822>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x824>
 8002356:	2300      	movs	r3, #0
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	feeefffc 	.word	0xfeeefffc

08002368 <HAL_RCC_ClockConfig>:
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x18>
 800237c:	2301      	movs	r3, #1
 800237e:	e11d      	b.n	80025bc <HAL_RCC_ClockConfig+0x254>
 8002380:	4b90      	ldr	r3, [pc, #576]	@ (80025c4 <HAL_RCC_ClockConfig+0x25c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d910      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x48>
 800238e:	4b8d      	ldr	r3, [pc, #564]	@ (80025c4 <HAL_RCC_ClockConfig+0x25c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 020f 	bic.w	r2, r3, #15
 8002396:	498b      	ldr	r1, [pc, #556]	@ (80025c4 <HAL_RCC_ClockConfig+0x25c>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
 800239e:	4b89      	ldr	r3, [pc, #548]	@ (80025c4 <HAL_RCC_ClockConfig+0x25c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x48>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e105      	b.n	80025bc <HAL_RCC_ClockConfig+0x254>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d010      	beq.n	80023de <HAL_RCC_ClockConfig+0x76>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	4b81      	ldr	r3, [pc, #516]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d908      	bls.n	80023de <HAL_RCC_ClockConfig+0x76>
 80023cc:	4b7e      	ldr	r3, [pc, #504]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	497b      	ldr	r1, [pc, #492]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d079      	beq.n	80024de <HAL_RCC_ClockConfig+0x176>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d11e      	bne.n	8002430 <HAL_RCC_ClockConfig+0xc8>
 80023f2:	4b75      	ldr	r3, [pc, #468]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0x9a>
 80023fe:	2301      	movs	r3, #1
 8002400:	e0dc      	b.n	80025bc <HAL_RCC_ClockConfig+0x254>
 8002402:	f000 f9d1 	bl	80027a8 <RCC_GetSysClockFreqFromPLLSource>
 8002406:	4603      	mov	r3, r0
 8002408:	4a70      	ldr	r2, [pc, #448]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d946      	bls.n	800249c <HAL_RCC_ClockConfig+0x134>
 800240e:	4b6e      	ldr	r3, [pc, #440]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d140      	bne.n	800249c <HAL_RCC_ClockConfig+0x134>
 800241a:	4b6b      	ldr	r3, [pc, #428]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002422:	4a69      	ldr	r2, [pc, #420]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002428:	6093      	str	r3, [r2, #8]
 800242a:	2380      	movs	r3, #128	@ 0x80
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e035      	b.n	800249c <HAL_RCC_ClockConfig+0x134>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0xe0>
 8002438:	4b63      	ldr	r3, [pc, #396]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d115      	bne.n	8002470 <HAL_RCC_ClockConfig+0x108>
 8002444:	2301      	movs	r3, #1
 8002446:	e0b9      	b.n	80025bc <HAL_RCC_ClockConfig+0x254>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf8>
 8002450:	4b5d      	ldr	r3, [pc, #372]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_RCC_ClockConfig+0x108>
 800245c:	2301      	movs	r3, #1
 800245e:	e0ad      	b.n	80025bc <HAL_RCC_ClockConfig+0x254>
 8002460:	4b59      	ldr	r3, [pc, #356]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x108>
 800246c:	2301      	movs	r3, #1
 800246e:	e0a5      	b.n	80025bc <HAL_RCC_ClockConfig+0x254>
 8002470:	f000 f8b4 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8002474:	4603      	mov	r3, r0
 8002476:	4a55      	ldr	r2, [pc, #340]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d90f      	bls.n	800249c <HAL_RCC_ClockConfig+0x134>
 800247c:	4b52      	ldr	r3, [pc, #328]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_RCC_ClockConfig+0x134>
 8002488:	4b4f      	ldr	r3, [pc, #316]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002490:	4a4d      	ldr	r2, [pc, #308]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002496:	6093      	str	r3, [r2, #8]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	4b4a      	ldr	r3, [pc, #296]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 0203 	bic.w	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4947      	ldr	r1, [pc, #284]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
 80024ae:	f7fe ffbd 	bl	800142c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_ClockConfig+0x164>
 80024b6:	f7fe ffb9 	bl	800142c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_ClockConfig+0x164>
 80024c8:	2303      	movs	r3, #3
 80024ca:	e077      	b.n	80025bc <HAL_RCC_ClockConfig+0x254>
 80024cc:	4b3e      	ldr	r3, [pc, #248]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 020c 	and.w	r2, r3, #12
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	429a      	cmp	r2, r3
 80024dc:	d1eb      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x14e>
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b80      	cmp	r3, #128	@ 0x80
 80024e2:	d105      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x188>
 80024e4:	4b38      	ldr	r3, [pc, #224]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a37      	ldr	r2, [pc, #220]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80024ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024ee:	6093      	str	r3, [r2, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x1b6>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002508:	429a      	cmp	r2, r3
 800250a:	d208      	bcs.n	800251e <HAL_RCC_ClockConfig+0x1b6>
 800250c:	4b2e      	ldr	r3, [pc, #184]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	492b      	ldr	r1, [pc, #172]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
 800251e:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <HAL_RCC_ClockConfig+0x25c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d210      	bcs.n	800254e <HAL_RCC_ClockConfig+0x1e6>
 800252c:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <HAL_RCC_ClockConfig+0x25c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 020f 	bic.w	r2, r3, #15
 8002534:	4923      	ldr	r1, [pc, #140]	@ (80025c4 <HAL_RCC_ClockConfig+0x25c>)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <HAL_RCC_ClockConfig+0x25c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_ClockConfig+0x1e6>
 800254a:	2301      	movs	r3, #1
 800254c:	e036      	b.n	80025bc <HAL_RCC_ClockConfig+0x254>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCC_ClockConfig+0x204>
 800255a:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	4918      	ldr	r1, [pc, #96]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <HAL_RCC_ClockConfig+0x224>
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4910      	ldr	r1, [pc, #64]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
 800258c:	f000 f826 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	490c      	ldr	r1, [pc, #48]	@ (80025d0 <HAL_RCC_ClockConfig+0x268>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_RCC_ClockConfig+0x26c>)
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_RCC_ClockConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe feeb 	bl	800138c <HAL_InitTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40022000 	.word	0x40022000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	04c4b400 	.word	0x04c4b400
 80025d0:	0800467c 	.word	0x0800467c
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_RCC_GetSysClockFreq>:
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	@ 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	4b3e      	ldr	r3, [pc, #248]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	4b3b      	ldr	r3, [pc, #236]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x34>
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d121      	bne.n	800264e <HAL_RCC_GetSysClockFreq+0x72>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d11e      	bne.n	800264e <HAL_RCC_GetSysClockFreq+0x72>
 8002610:	4b34      	ldr	r3, [pc, #208]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_RCC_GetSysClockFreq+0x50>
 800261c:	4b31      	ldr	r3, [pc, #196]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e005      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x5c>
 800262c:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	4a2b      	ldr	r2, [pc, #172]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10d      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0x88>
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	e00a      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x88>
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d102      	bne.n	800265a <HAL_RCC_GetSysClockFreq+0x7e>
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e004      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x88>
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d101      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0x88>
 8002660:	4b23      	ldr	r3, [pc, #140]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d134      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0xf8>
 800266a:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d003      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0xa6>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d003      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0xac>
 8002680:	e005      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xb2>
 8002682:	4b1a      	ldr	r3, [pc, #104]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e005      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xb8>
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e002      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xb8>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	bf00      	nop
 8002694:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	3301      	adds	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	fb03 f202 	mul.w	r2, r3, r2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	0e5b      	lsrs	r3, r3, #25
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	3301      	adds	r3, #1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	@ 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	0800468c 	.word	0x0800468c
 80026ec:	00f42400 	.word	0x00f42400
 80026f0:	007a1200 	.word	0x007a1200

080026f4 <RCC_SetFlashLatencyFromMSIRange>:
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x20>
 800270c:	f7ff f94e 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002710:	6178      	str	r0, [r7, #20]
 8002712:	e014      	b.n	800273e <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8002714:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002718:	4a21      	ldr	r2, [pc, #132]	@ (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002720:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f7ff f93e 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002730:	6178      	str	r0, [r7, #20]
 8002732:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	4a1a      	ldr	r2, [pc, #104]	@ (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800273c:	6593      	str	r3, [r2, #88]	@ 0x58
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002744:	d10b      	bne.n	800275e <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b80      	cmp	r3, #128	@ 0x80
 800274a:	d913      	bls.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x80>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002750:	d902      	bls.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x64>
 8002752:	2302      	movs	r3, #2
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	e00d      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8002758:	2301      	movs	r3, #1
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	e00a      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x80>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b7f      	cmp	r3, #127	@ 0x7f
 8002762:	d902      	bls.n	800276a <RCC_SetFlashLatencyFromMSIRange+0x76>
 8002764:	2302      	movs	r3, #2
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	e004      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x80>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b70      	cmp	r3, #112	@ 0x70
 800276e:	d101      	bne.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8002770:	2301      	movs	r3, #1
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 020f 	bic.w	r2, r3, #15
 800277c:	4909      	ldr	r1, [pc, #36]	@ (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
 8002784:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	429a      	cmp	r2, r3
 8002790:	d001      	beq.n	8002796 <RCC_SetFlashLatencyFromMSIRange+0xa2>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0xa4>
 8002796:	2300      	movs	r3, #0
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40022000 	.word	0x40022000

080027a8 <RCC_GetSysClockFreqFromPLLSource>:
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d00b      	beq.n	80027d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d825      	bhi.n	8002810 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d008      	beq.n	80027dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d11f      	bne.n	8002810 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80027d0:	4b25      	ldr	r3, [pc, #148]	@ (8002868 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e01f      	b.n	8002816 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80027d6:	4b25      	ldr	r3, [pc, #148]	@ (800286c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e01c      	b.n	8002816 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80027dc:	4b21      	ldr	r3, [pc, #132]	@ (8002864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80027e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e005      	b.n	8002804 <RCC_GetSysClockFreqFromPLLSource+0x5c>
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	4a1a      	ldr	r2, [pc, #104]	@ (8002870 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	e002      	b.n	8002816 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	bf00      	nop
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	3301      	adds	r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	fb03 f202 	mul.w	r2, r3, r2
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0e5b      	lsrs	r3, r3, #25
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	3301      	adds	r3, #1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40021000 	.word	0x40021000
 8002868:	00f42400 	.word	0x00f42400
 800286c:	007a1200 	.word	0x007a1200
 8002870:	0800468c 	.word	0x0800468c

08002874 <HAL_SPI_Init>:
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_SPI_Init+0x12>
 8002882:	2301      	movs	r3, #1
 8002884:	e095      	b.n	80029b2 <HAL_SPI_Init+0x13e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <HAL_SPI_Init+0x2c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002896:	d009      	beq.n	80028ac <HAL_SPI_Init+0x38>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
 800289e:	e005      	b.n	80028ac <HAL_SPI_Init+0x38>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_SPI_Init+0x58>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fb34 	bl	8000f34 <HAL_SPI_MspInit>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028ec:	d902      	bls.n	80028f4 <HAL_SPI_Init+0x80>
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e002      	b.n	80028fa <HAL_SPI_Init+0x86>
 80028f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002902:	d007      	beq.n	8002914 <HAL_SPI_Init+0xa0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800290c:	d002      	beq.n	8002914 <HAL_SPI_Init+0xa0>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	629a      	str	r2, [r3, #40]	@ 0x28
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002956:	ea42 0103 	orr.w	r1, r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	f003 0204 	and.w	r2, r3, #4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002990:	ea42 0103 	orr.w	r1, r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	661a      	str	r2, [r3, #96]	@ 0x60
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80029b0:	2300      	movs	r3, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_SPI_Transmit>:
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b088      	sub	sp, #32
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
 80029ca:	2300      	movs	r3, #0
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_SPI_Transmit+0x22>
 80029d8:	2302      	movs	r3, #2
 80029da:	e15f      	b.n	8002c9c <HAL_SPI_Transmit+0x2e2>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80029e4:	f7fe fd22 	bl	800142c <HAL_GetTick>
 80029e8:	61b8      	str	r0, [r7, #24]
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	82fb      	strh	r3, [r7, #22]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d002      	beq.n	8002a00 <HAL_SPI_Transmit+0x46>
 80029fa:	2302      	movs	r3, #2
 80029fc:	77fb      	strb	r3, [r7, #31]
 80029fe:	e148      	b.n	8002c92 <HAL_SPI_Transmit+0x2d8>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_SPI_Transmit+0x52>
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <HAL_SPI_Transmit+0x58>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	e13f      	b.n	8002c92 <HAL_SPI_Transmit+0x2d8>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2203      	movs	r2, #3
 8002a16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a5c:	d10f      	bne.n	8002a7e <HAL_SPI_Transmit+0xc4>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a88:	2b40      	cmp	r3, #64	@ 0x40
 8002a8a:	d007      	beq.n	8002a9c <HAL_SPI_Transmit+0xe2>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002aa4:	d94f      	bls.n	8002b46 <HAL_SPI_Transmit+0x18c>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_SPI_Transmit+0xfa>
 8002aae:	8afb      	ldrh	r3, [r7, #22]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d142      	bne.n	8002b3a <HAL_SPI_Transmit+0x180>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab8:	881a      	ldrh	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	1c9a      	adds	r2, r3, #2
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ad8:	e02f      	b.n	8002b3a <HAL_SPI_Transmit+0x180>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d112      	bne.n	8002b0e <HAL_SPI_Transmit+0x154>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aec:	881a      	ldrh	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60da      	str	r2, [r3, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af8:	1c9a      	adds	r2, r3, #2
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	639a      	str	r2, [r3, #56]	@ 0x38
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b0c:	e015      	b.n	8002b3a <HAL_SPI_Transmit+0x180>
 8002b0e:	f7fe fc8d 	bl	800142c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d803      	bhi.n	8002b26 <HAL_SPI_Transmit+0x16c>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b24:	d102      	bne.n	8002b2c <HAL_SPI_Transmit+0x172>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d106      	bne.n	8002b3a <HAL_SPI_Transmit+0x180>
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	77fb      	strb	r3, [r7, #31]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8002b38:	e0ab      	b.n	8002c92 <HAL_SPI_Transmit+0x2d8>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ca      	bne.n	8002ada <HAL_SPI_Transmit+0x120>
 8002b44:	e080      	b.n	8002c48 <HAL_SPI_Transmit+0x28e>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_SPI_Transmit+0x19a>
 8002b4e:	8afb      	ldrh	r3, [r7, #22]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d174      	bne.n	8002c3e <HAL_SPI_Transmit+0x284>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d912      	bls.n	8002b84 <HAL_SPI_Transmit+0x1ca>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b62:	881a      	ldrh	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	1c9a      	adds	r2, r3, #2
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b02      	subs	r3, #2
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b82:	e05c      	b.n	8002c3e <HAL_SPI_Transmit+0x284>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	7812      	ldrb	r2, [r2, #0]
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002baa:	e048      	b.n	8002c3e <HAL_SPI_Transmit+0x284>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d12b      	bne.n	8002c12 <HAL_SPI_Transmit+0x258>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d912      	bls.n	8002bea <HAL_SPI_Transmit+0x230>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	881a      	ldrh	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	1c9a      	adds	r2, r3, #2
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b02      	subs	r3, #2
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002be8:	e029      	b.n	8002c3e <HAL_SPI_Transmit+0x284>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c10:	e015      	b.n	8002c3e <HAL_SPI_Transmit+0x284>
 8002c12:	f7fe fc0b 	bl	800142c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d803      	bhi.n	8002c2a <HAL_SPI_Transmit+0x270>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c28:	d102      	bne.n	8002c30 <HAL_SPI_Transmit+0x276>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <HAL_SPI_Transmit+0x284>
 8002c30:	2303      	movs	r3, #3
 8002c32:	77fb      	strb	r3, [r7, #31]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8002c3c:	e029      	b.n	8002c92 <HAL_SPI_Transmit+0x2d8>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1b1      	bne.n	8002bac <HAL_SPI_Transmit+0x1f2>
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	6839      	ldr	r1, [r7, #0]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fb69 	bl	8003324 <SPI_EndRxTxTransaction>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_SPI_Transmit+0x2a4>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <HAL_SPI_Transmit+0x2c2>
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_SPI_Transmit+0x2d0>
 8002c84:	2301      	movs	r3, #1
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e003      	b.n	8002c92 <HAL_SPI_Transmit+0x2d8>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_SPI_TransmitReceive>:
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	@ 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	807b      	strh	r3, [r7, #2]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_SPI_TransmitReceive+0x26>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e20a      	b.n	80030e0 <HAL_SPI_TransmitReceive+0x43c>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002cd2:	f7fe fbab 	bl	800142c <HAL_GetTick>
 8002cd6:	61f8      	str	r0, [r7, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002cde:	76fb      	strb	r3, [r7, #27]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	887b      	ldrh	r3, [r7, #2]
 8002ce8:	827b      	strh	r3, [r7, #18]
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	823b      	strh	r3, [r7, #16]
 8002cee:	7efb      	ldrb	r3, [r7, #27]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d00e      	beq.n	8002d12 <HAL_SPI_TransmitReceive+0x6e>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cfa:	d106      	bne.n	8002d0a <HAL_SPI_TransmitReceive+0x66>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_SPI_TransmitReceive+0x66>
 8002d04:	7efb      	ldrb	r3, [r7, #27]
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d003      	beq.n	8002d12 <HAL_SPI_TransmitReceive+0x6e>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d10:	e1e0      	b.n	80030d4 <HAL_SPI_TransmitReceive+0x430>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_SPI_TransmitReceive+0x80>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_SPI_TransmitReceive+0x80>
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d103      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x88>
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d2a:	e1d3      	b.n	80030d4 <HAL_SPI_TransmitReceive+0x430>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d003      	beq.n	8002d40 <HAL_SPI_TransmitReceive+0x9c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	887a      	ldrh	r2, [r7, #2]
 8002d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d82:	d802      	bhi.n	8002d8a <HAL_SPI_TransmitReceive+0xe6>
 8002d84:	8a3b      	ldrh	r3, [r7, #16]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d908      	bls.n	8002d9c <HAL_SPI_TransmitReceive+0xf8>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	e007      	b.n	8002dac <HAL_SPI_TransmitReceive+0x108>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db6:	2b40      	cmp	r3, #64	@ 0x40
 8002db8:	d007      	beq.n	8002dca <HAL_SPI_TransmitReceive+0x126>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dd2:	f240 8081 	bls.w	8002ed8 <HAL_SPI_TransmitReceive+0x234>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x140>
 8002dde:	8a7b      	ldrh	r3, [r7, #18]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d16d      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x21c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de8:	881a      	ldrh	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df4:	1c9a      	adds	r2, r3, #2
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e08:	e05a      	b.n	8002ec0 <HAL_SPI_TransmitReceive+0x21c>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d11b      	bne.n	8002e50 <HAL_SPI_TransmitReceive+0x1ac>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <HAL_SPI_TransmitReceive+0x1ac>
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d113      	bne.n	8002e50 <HAL_SPI_TransmitReceive+0x1ac>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2c:	881a      	ldrh	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60da      	str	r2, [r3, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e38:	1c9a      	adds	r2, r3, #2
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d11c      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x1f4>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x1f4>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	b292      	uxth	r2, r2
 8002e76:	801a      	strh	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	1c9a      	adds	r2, r3, #2
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002e94:	2301      	movs	r3, #1
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e98:	f7fe fac8 	bl	800142c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d80b      	bhi.n	8002ec0 <HAL_SPI_TransmitReceive+0x21c>
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eae:	d007      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x21c>
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8002ebe:	e109      	b.n	80030d4 <HAL_SPI_TransmitReceive+0x430>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d19f      	bne.n	8002e0a <HAL_SPI_TransmitReceive+0x166>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d199      	bne.n	8002e0a <HAL_SPI_TransmitReceive+0x166>
 8002ed6:	e0e3      	b.n	80030a0 <HAL_SPI_TransmitReceive+0x3fc>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x244>
 8002ee0:	8a7b      	ldrh	r3, [r7, #18]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	f040 80cf 	bne.w	8003086 <HAL_SPI_TransmitReceive+0x3e2>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d912      	bls.n	8002f18 <HAL_SPI_TransmitReceive+0x274>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f02:	1c9a      	adds	r2, r3, #2
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b02      	subs	r3, #2
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f16:	e0b6      	b.n	8003086 <HAL_SPI_TransmitReceive+0x3e2>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	7812      	ldrb	r2, [r2, #0]
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f3e:	e0a2      	b.n	8003086 <HAL_SPI_TransmitReceive+0x3e2>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d134      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x314>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d02f      	beq.n	8002fb8 <HAL_SPI_TransmitReceive+0x314>
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d12c      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x314>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d912      	bls.n	8002f8e <HAL_SPI_TransmitReceive+0x2ea>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f78:	1c9a      	adds	r2, r3, #2
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b02      	subs	r3, #2
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f8c:	e012      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x310>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d148      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x3b4>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d042      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x3b4>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d923      	bls.n	8003026 <HAL_SPI_TransmitReceive+0x382>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	1c9a      	adds	r2, r3, #2
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b02      	subs	r3, #2
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d81f      	bhi.n	8003054 <HAL_SPI_TransmitReceive+0x3b0>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	e016      	b.n	8003054 <HAL_SPI_TransmitReceive+0x3b0>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f103 020c 	add.w	r2, r3, #12
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	7812      	ldrb	r2, [r2, #0]
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	f7fe f9e8 	bl	800142c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003064:	429a      	cmp	r2, r3
 8003066:	d803      	bhi.n	8003070 <HAL_SPI_TransmitReceive+0x3cc>
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800306e:	d102      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x3d2>
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <HAL_SPI_TransmitReceive+0x3e2>
 8003076:	2303      	movs	r3, #3
 8003078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003084:	e026      	b.n	80030d4 <HAL_SPI_TransmitReceive+0x430>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	f47f af57 	bne.w	8002f40 <HAL_SPI_TransmitReceive+0x29c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	f47f af50 	bne.w	8002f40 <HAL_SPI_TransmitReceive+0x29c>
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f93d 	bl	8003324 <SPI_EndRxTxTransaction>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x418>
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_SPI_TransmitReceive+0x428>
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ca:	e003      	b.n	80030d4 <HAL_SPI_TransmitReceive+0x430>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80030dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030e0:	4618      	mov	r0, r3
 80030e2:	3728      	adds	r7, #40	@ 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <SPI_WaitFlagStateUntilTimeout>:
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	71fb      	strb	r3, [r7, #7]
 80030f8:	f7fe f998 	bl	800142c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	f7fe f990 	bl	800142c <HAL_GetTick>
 800310c:	61b8      	str	r0, [r7, #24]
 800310e:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	015b      	lsls	r3, r3, #5
 8003114:	0d1b      	lsrs	r3, r3, #20
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e054      	b.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003126:	d050      	beq.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003128:	f7fe f980 	bl	800142c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	d902      	bls.n	800313e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d13d      	bne.n	80031ba <SPI_WaitFlagStateUntilTimeout+0xd2>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003156:	d111      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003160:	d004      	beq.n	800316c <SPI_WaitFlagStateUntilTimeout+0x84>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316a:	d107      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0x94>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003184:	d10f      	bne.n	80031a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80031b6:	2303      	movs	r3, #3
 80031b8:	e017      	b.n	80031ea <SPI_WaitFlagStateUntilTimeout+0x102>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d19b      	bne.n	8003120 <SPI_WaitFlagStateUntilTimeout+0x38>
 80031e8:	2300      	movs	r3, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000000 	.word	0x20000000

080031f8 <SPI_WaitFifoStateUntilTimeout>:
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]
 800320a:	f7fe f90f 	bl	800142c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	4413      	add	r3, r2
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
 800321a:	f7fe f907 	bl	800142c <HAL_GetTick>
 800321e:	6238      	str	r0, [r7, #32]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	4b3d      	ldr	r3, [pc, #244]	@ (8003320 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00da      	lsls	r2, r3, #3
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	0d1b      	lsrs	r3, r3, #20
 8003238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	e060      	b.n	8003304 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003248:	d107      	bne.n	800325a <SPI_WaitFifoStateUntilTimeout+0x62>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	75fb      	strb	r3, [r7, #23]
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003260:	d050      	beq.n	8003304 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003262:	f7fe f8e3 	bl	800142c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326e:	429a      	cmp	r2, r3
 8003270:	d902      	bls.n	8003278 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d13d      	bne.n	80032f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003290:	d111      	bne.n	80032b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800329a:	d004      	beq.n	80032a6 <SPI_WaitFifoStateUntilTimeout+0xae>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a4:	d107      	bne.n	80032b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032be:	d10f      	bne.n	80032e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80032f0:	2303      	movs	r3, #3
 80032f2:	e010      	b.n	8003316 <SPI_WaitFifoStateUntilTimeout+0x11e>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <SPI_WaitFifoStateUntilTimeout+0x106>
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	3b01      	subs	r3, #1
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d196      	bne.n	8003242 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003314:	2300      	movs	r3, #0
 8003316:	4618      	mov	r0, r3
 8003318:	3728      	adds	r7, #40	@ 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000000 	.word	0x20000000

08003324 <SPI_EndRxTxTransaction>:
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff ff5b 	bl	80031f8 <SPI_WaitFifoStateUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <SPI_EndRxTxTransaction+0x34>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	661a      	str	r2, [r3, #96]	@ 0x60
 8003354:	2303      	movs	r3, #3
 8003356:	e027      	b.n	80033a8 <SPI_EndRxTxTransaction+0x84>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2200      	movs	r2, #0
 8003360:	2180      	movs	r1, #128	@ 0x80
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff fec0 	bl	80030e8 <SPI_WaitFlagStateUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <SPI_EndRxTxTransaction+0x5a>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	661a      	str	r2, [r3, #96]	@ 0x60
 800337a:	2303      	movs	r3, #3
 800337c:	e014      	b.n	80033a8 <SPI_EndRxTxTransaction+0x84>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2200      	movs	r2, #0
 8003386:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f7ff ff34 	bl	80031f8 <SPI_WaitFifoStateUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <SPI_EndRxTxTransaction+0x82>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339a:	f043 0220 	orr.w	r2, r3, #32
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80033a2:	2303      	movs	r3, #3
 80033a4:	e000      	b.n	80033a8 <SPI_EndRxTxTransaction+0x84>
 80033a6:	2300      	movs	r3, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <siprintf>:
 80033b0:	b40e      	push	{r1, r2, r3}
 80033b2:	b500      	push	{lr}
 80033b4:	b09c      	sub	sp, #112	@ 0x70
 80033b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80033b8:	9002      	str	r0, [sp, #8]
 80033ba:	9006      	str	r0, [sp, #24]
 80033bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80033c0:	4809      	ldr	r0, [pc, #36]	@ (80033e8 <siprintf+0x38>)
 80033c2:	9107      	str	r1, [sp, #28]
 80033c4:	9104      	str	r1, [sp, #16]
 80033c6:	4909      	ldr	r1, [pc, #36]	@ (80033ec <siprintf+0x3c>)
 80033c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80033cc:	9105      	str	r1, [sp, #20]
 80033ce:	6800      	ldr	r0, [r0, #0]
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	a902      	add	r1, sp, #8
 80033d4:	f000 f8aa 	bl	800352c <_svfiprintf_r>
 80033d8:	9b02      	ldr	r3, [sp, #8]
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	b01c      	add	sp, #112	@ 0x70
 80033e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033e4:	b003      	add	sp, #12
 80033e6:	4770      	bx	lr
 80033e8:	2000000c 	.word	0x2000000c
 80033ec:	ffff0208 	.word	0xffff0208

080033f0 <memset>:
 80033f0:	4402      	add	r2, r0
 80033f2:	4603      	mov	r3, r0
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d100      	bne.n	80033fa <memset+0xa>
 80033f8:	4770      	bx	lr
 80033fa:	f803 1b01 	strb.w	r1, [r3], #1
 80033fe:	e7f9      	b.n	80033f4 <memset+0x4>

08003400 <__errno>:
 8003400:	4b01      	ldr	r3, [pc, #4]	@ (8003408 <__errno+0x8>)
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	2000000c 	.word	0x2000000c

0800340c <__libc_init_array>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4d0d      	ldr	r5, [pc, #52]	@ (8003444 <__libc_init_array+0x38>)
 8003410:	4c0d      	ldr	r4, [pc, #52]	@ (8003448 <__libc_init_array+0x3c>)
 8003412:	1b64      	subs	r4, r4, r5
 8003414:	10a4      	asrs	r4, r4, #2
 8003416:	2600      	movs	r6, #0
 8003418:	42a6      	cmp	r6, r4
 800341a:	d109      	bne.n	8003430 <__libc_init_array+0x24>
 800341c:	4d0b      	ldr	r5, [pc, #44]	@ (800344c <__libc_init_array+0x40>)
 800341e:	4c0c      	ldr	r4, [pc, #48]	@ (8003450 <__libc_init_array+0x44>)
 8003420:	f000 fc66 	bl	8003cf0 <_init>
 8003424:	1b64      	subs	r4, r4, r5
 8003426:	10a4      	asrs	r4, r4, #2
 8003428:	2600      	movs	r6, #0
 800342a:	42a6      	cmp	r6, r4
 800342c:	d105      	bne.n	800343a <__libc_init_array+0x2e>
 800342e:	bd70      	pop	{r4, r5, r6, pc}
 8003430:	f855 3b04 	ldr.w	r3, [r5], #4
 8003434:	4798      	blx	r3
 8003436:	3601      	adds	r6, #1
 8003438:	e7ee      	b.n	8003418 <__libc_init_array+0xc>
 800343a:	f855 3b04 	ldr.w	r3, [r5], #4
 800343e:	4798      	blx	r3
 8003440:	3601      	adds	r6, #1
 8003442:	e7f2      	b.n	800342a <__libc_init_array+0x1e>
 8003444:	080046f8 	.word	0x080046f8
 8003448:	080046f8 	.word	0x080046f8
 800344c:	080046f8 	.word	0x080046f8
 8003450:	080046fc 	.word	0x080046fc

08003454 <__retarget_lock_acquire_recursive>:
 8003454:	4770      	bx	lr

08003456 <__retarget_lock_release_recursive>:
 8003456:	4770      	bx	lr

08003458 <memcpy>:
 8003458:	440a      	add	r2, r1
 800345a:	4291      	cmp	r1, r2
 800345c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003460:	d100      	bne.n	8003464 <memcpy+0xc>
 8003462:	4770      	bx	lr
 8003464:	b510      	push	{r4, lr}
 8003466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800346a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800346e:	4291      	cmp	r1, r2
 8003470:	d1f9      	bne.n	8003466 <memcpy+0xe>
 8003472:	bd10      	pop	{r4, pc}

08003474 <__ssputs_r>:
 8003474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	688e      	ldr	r6, [r1, #8]
 800347a:	461f      	mov	r7, r3
 800347c:	42be      	cmp	r6, r7
 800347e:	680b      	ldr	r3, [r1, #0]
 8003480:	4682      	mov	sl, r0
 8003482:	460c      	mov	r4, r1
 8003484:	4690      	mov	r8, r2
 8003486:	d82d      	bhi.n	80034e4 <__ssputs_r+0x70>
 8003488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800348c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003490:	d026      	beq.n	80034e0 <__ssputs_r+0x6c>
 8003492:	6965      	ldr	r5, [r4, #20]
 8003494:	6909      	ldr	r1, [r1, #16]
 8003496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800349a:	eba3 0901 	sub.w	r9, r3, r1
 800349e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034a2:	1c7b      	adds	r3, r7, #1
 80034a4:	444b      	add	r3, r9
 80034a6:	106d      	asrs	r5, r5, #1
 80034a8:	429d      	cmp	r5, r3
 80034aa:	bf38      	it	cc
 80034ac:	461d      	movcc	r5, r3
 80034ae:	0553      	lsls	r3, r2, #21
 80034b0:	d527      	bpl.n	8003502 <__ssputs_r+0x8e>
 80034b2:	4629      	mov	r1, r5
 80034b4:	f000 f958 	bl	8003768 <_malloc_r>
 80034b8:	4606      	mov	r6, r0
 80034ba:	b360      	cbz	r0, 8003516 <__ssputs_r+0xa2>
 80034bc:	6921      	ldr	r1, [r4, #16]
 80034be:	464a      	mov	r2, r9
 80034c0:	f7ff ffca 	bl	8003458 <memcpy>
 80034c4:	89a3      	ldrh	r3, [r4, #12]
 80034c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80034ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ce:	81a3      	strh	r3, [r4, #12]
 80034d0:	6126      	str	r6, [r4, #16]
 80034d2:	6165      	str	r5, [r4, #20]
 80034d4:	444e      	add	r6, r9
 80034d6:	eba5 0509 	sub.w	r5, r5, r9
 80034da:	6026      	str	r6, [r4, #0]
 80034dc:	60a5      	str	r5, [r4, #8]
 80034de:	463e      	mov	r6, r7
 80034e0:	42be      	cmp	r6, r7
 80034e2:	d900      	bls.n	80034e6 <__ssputs_r+0x72>
 80034e4:	463e      	mov	r6, r7
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	4632      	mov	r2, r6
 80034ea:	4641      	mov	r1, r8
 80034ec:	f000 fb84 	bl	8003bf8 <memmove>
 80034f0:	68a3      	ldr	r3, [r4, #8]
 80034f2:	1b9b      	subs	r3, r3, r6
 80034f4:	60a3      	str	r3, [r4, #8]
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	4433      	add	r3, r6
 80034fa:	6023      	str	r3, [r4, #0]
 80034fc:	2000      	movs	r0, #0
 80034fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003502:	462a      	mov	r2, r5
 8003504:	f000 fb4a 	bl	8003b9c <_realloc_r>
 8003508:	4606      	mov	r6, r0
 800350a:	2800      	cmp	r0, #0
 800350c:	d1e0      	bne.n	80034d0 <__ssputs_r+0x5c>
 800350e:	6921      	ldr	r1, [r4, #16]
 8003510:	4650      	mov	r0, sl
 8003512:	f000 fb9b 	bl	8003c4c <_free_r>
 8003516:	230c      	movs	r3, #12
 8003518:	f8ca 3000 	str.w	r3, [sl]
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003522:	81a3      	strh	r3, [r4, #12]
 8003524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003528:	e7e9      	b.n	80034fe <__ssputs_r+0x8a>
	...

0800352c <_svfiprintf_r>:
 800352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003530:	4698      	mov	r8, r3
 8003532:	898b      	ldrh	r3, [r1, #12]
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	b09d      	sub	sp, #116	@ 0x74
 8003538:	4607      	mov	r7, r0
 800353a:	460d      	mov	r5, r1
 800353c:	4614      	mov	r4, r2
 800353e:	d510      	bpl.n	8003562 <_svfiprintf_r+0x36>
 8003540:	690b      	ldr	r3, [r1, #16]
 8003542:	b973      	cbnz	r3, 8003562 <_svfiprintf_r+0x36>
 8003544:	2140      	movs	r1, #64	@ 0x40
 8003546:	f000 f90f 	bl	8003768 <_malloc_r>
 800354a:	6028      	str	r0, [r5, #0]
 800354c:	6128      	str	r0, [r5, #16]
 800354e:	b930      	cbnz	r0, 800355e <_svfiprintf_r+0x32>
 8003550:	230c      	movs	r3, #12
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003558:	b01d      	add	sp, #116	@ 0x74
 800355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355e:	2340      	movs	r3, #64	@ 0x40
 8003560:	616b      	str	r3, [r5, #20]
 8003562:	2300      	movs	r3, #0
 8003564:	9309      	str	r3, [sp, #36]	@ 0x24
 8003566:	2320      	movs	r3, #32
 8003568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800356c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003570:	2330      	movs	r3, #48	@ 0x30
 8003572:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003710 <_svfiprintf_r+0x1e4>
 8003576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800357a:	f04f 0901 	mov.w	r9, #1
 800357e:	4623      	mov	r3, r4
 8003580:	469a      	mov	sl, r3
 8003582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003586:	b10a      	cbz	r2, 800358c <_svfiprintf_r+0x60>
 8003588:	2a25      	cmp	r2, #37	@ 0x25
 800358a:	d1f9      	bne.n	8003580 <_svfiprintf_r+0x54>
 800358c:	ebba 0b04 	subs.w	fp, sl, r4
 8003590:	d00b      	beq.n	80035aa <_svfiprintf_r+0x7e>
 8003592:	465b      	mov	r3, fp
 8003594:	4622      	mov	r2, r4
 8003596:	4629      	mov	r1, r5
 8003598:	4638      	mov	r0, r7
 800359a:	f7ff ff6b 	bl	8003474 <__ssputs_r>
 800359e:	3001      	adds	r0, #1
 80035a0:	f000 80a7 	beq.w	80036f2 <_svfiprintf_r+0x1c6>
 80035a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035a6:	445a      	add	r2, fp
 80035a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80035aa:	f89a 3000 	ldrb.w	r3, [sl]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 809f 	beq.w	80036f2 <_svfiprintf_r+0x1c6>
 80035b4:	2300      	movs	r3, #0
 80035b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035be:	f10a 0a01 	add.w	sl, sl, #1
 80035c2:	9304      	str	r3, [sp, #16]
 80035c4:	9307      	str	r3, [sp, #28]
 80035c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80035ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80035cc:	4654      	mov	r4, sl
 80035ce:	2205      	movs	r2, #5
 80035d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d4:	484e      	ldr	r0, [pc, #312]	@ (8003710 <_svfiprintf_r+0x1e4>)
 80035d6:	f7fc fe1b 	bl	8000210 <memchr>
 80035da:	9a04      	ldr	r2, [sp, #16]
 80035dc:	b9d8      	cbnz	r0, 8003616 <_svfiprintf_r+0xea>
 80035de:	06d0      	lsls	r0, r2, #27
 80035e0:	bf44      	itt	mi
 80035e2:	2320      	movmi	r3, #32
 80035e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035e8:	0711      	lsls	r1, r2, #28
 80035ea:	bf44      	itt	mi
 80035ec:	232b      	movmi	r3, #43	@ 0x2b
 80035ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035f2:	f89a 3000 	ldrb.w	r3, [sl]
 80035f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80035f8:	d015      	beq.n	8003626 <_svfiprintf_r+0xfa>
 80035fa:	9a07      	ldr	r2, [sp, #28]
 80035fc:	4654      	mov	r4, sl
 80035fe:	2000      	movs	r0, #0
 8003600:	f04f 0c0a 	mov.w	ip, #10
 8003604:	4621      	mov	r1, r4
 8003606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800360a:	3b30      	subs	r3, #48	@ 0x30
 800360c:	2b09      	cmp	r3, #9
 800360e:	d94b      	bls.n	80036a8 <_svfiprintf_r+0x17c>
 8003610:	b1b0      	cbz	r0, 8003640 <_svfiprintf_r+0x114>
 8003612:	9207      	str	r2, [sp, #28]
 8003614:	e014      	b.n	8003640 <_svfiprintf_r+0x114>
 8003616:	eba0 0308 	sub.w	r3, r0, r8
 800361a:	fa09 f303 	lsl.w	r3, r9, r3
 800361e:	4313      	orrs	r3, r2
 8003620:	9304      	str	r3, [sp, #16]
 8003622:	46a2      	mov	sl, r4
 8003624:	e7d2      	b.n	80035cc <_svfiprintf_r+0xa0>
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	1d19      	adds	r1, r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	9103      	str	r1, [sp, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	bfbb      	ittet	lt
 8003632:	425b      	neglt	r3, r3
 8003634:	f042 0202 	orrlt.w	r2, r2, #2
 8003638:	9307      	strge	r3, [sp, #28]
 800363a:	9307      	strlt	r3, [sp, #28]
 800363c:	bfb8      	it	lt
 800363e:	9204      	strlt	r2, [sp, #16]
 8003640:	7823      	ldrb	r3, [r4, #0]
 8003642:	2b2e      	cmp	r3, #46	@ 0x2e
 8003644:	d10a      	bne.n	800365c <_svfiprintf_r+0x130>
 8003646:	7863      	ldrb	r3, [r4, #1]
 8003648:	2b2a      	cmp	r3, #42	@ 0x2a
 800364a:	d132      	bne.n	80036b2 <_svfiprintf_r+0x186>
 800364c:	9b03      	ldr	r3, [sp, #12]
 800364e:	1d1a      	adds	r2, r3, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	9203      	str	r2, [sp, #12]
 8003654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003658:	3402      	adds	r4, #2
 800365a:	9305      	str	r3, [sp, #20]
 800365c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003720 <_svfiprintf_r+0x1f4>
 8003660:	7821      	ldrb	r1, [r4, #0]
 8003662:	2203      	movs	r2, #3
 8003664:	4650      	mov	r0, sl
 8003666:	f7fc fdd3 	bl	8000210 <memchr>
 800366a:	b138      	cbz	r0, 800367c <_svfiprintf_r+0x150>
 800366c:	9b04      	ldr	r3, [sp, #16]
 800366e:	eba0 000a 	sub.w	r0, r0, sl
 8003672:	2240      	movs	r2, #64	@ 0x40
 8003674:	4082      	lsls	r2, r0
 8003676:	4313      	orrs	r3, r2
 8003678:	3401      	adds	r4, #1
 800367a:	9304      	str	r3, [sp, #16]
 800367c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003680:	4824      	ldr	r0, [pc, #144]	@ (8003714 <_svfiprintf_r+0x1e8>)
 8003682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003686:	2206      	movs	r2, #6
 8003688:	f7fc fdc2 	bl	8000210 <memchr>
 800368c:	2800      	cmp	r0, #0
 800368e:	d036      	beq.n	80036fe <_svfiprintf_r+0x1d2>
 8003690:	4b21      	ldr	r3, [pc, #132]	@ (8003718 <_svfiprintf_r+0x1ec>)
 8003692:	bb1b      	cbnz	r3, 80036dc <_svfiprintf_r+0x1b0>
 8003694:	9b03      	ldr	r3, [sp, #12]
 8003696:	3307      	adds	r3, #7
 8003698:	f023 0307 	bic.w	r3, r3, #7
 800369c:	3308      	adds	r3, #8
 800369e:	9303      	str	r3, [sp, #12]
 80036a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036a2:	4433      	add	r3, r6
 80036a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80036a6:	e76a      	b.n	800357e <_svfiprintf_r+0x52>
 80036a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80036ac:	460c      	mov	r4, r1
 80036ae:	2001      	movs	r0, #1
 80036b0:	e7a8      	b.n	8003604 <_svfiprintf_r+0xd8>
 80036b2:	2300      	movs	r3, #0
 80036b4:	3401      	adds	r4, #1
 80036b6:	9305      	str	r3, [sp, #20]
 80036b8:	4619      	mov	r1, r3
 80036ba:	f04f 0c0a 	mov.w	ip, #10
 80036be:	4620      	mov	r0, r4
 80036c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036c4:	3a30      	subs	r2, #48	@ 0x30
 80036c6:	2a09      	cmp	r2, #9
 80036c8:	d903      	bls.n	80036d2 <_svfiprintf_r+0x1a6>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0c6      	beq.n	800365c <_svfiprintf_r+0x130>
 80036ce:	9105      	str	r1, [sp, #20]
 80036d0:	e7c4      	b.n	800365c <_svfiprintf_r+0x130>
 80036d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80036d6:	4604      	mov	r4, r0
 80036d8:	2301      	movs	r3, #1
 80036da:	e7f0      	b.n	80036be <_svfiprintf_r+0x192>
 80036dc:	ab03      	add	r3, sp, #12
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	462a      	mov	r2, r5
 80036e2:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <_svfiprintf_r+0x1f0>)
 80036e4:	a904      	add	r1, sp, #16
 80036e6:	4638      	mov	r0, r7
 80036e8:	f3af 8000 	nop.w
 80036ec:	1c42      	adds	r2, r0, #1
 80036ee:	4606      	mov	r6, r0
 80036f0:	d1d6      	bne.n	80036a0 <_svfiprintf_r+0x174>
 80036f2:	89ab      	ldrh	r3, [r5, #12]
 80036f4:	065b      	lsls	r3, r3, #25
 80036f6:	f53f af2d 	bmi.w	8003554 <_svfiprintf_r+0x28>
 80036fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036fc:	e72c      	b.n	8003558 <_svfiprintf_r+0x2c>
 80036fe:	ab03      	add	r3, sp, #12
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	462a      	mov	r2, r5
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <_svfiprintf_r+0x1f0>)
 8003706:	a904      	add	r1, sp, #16
 8003708:	4638      	mov	r0, r7
 800370a:	f000 f91b 	bl	8003944 <_printf_i>
 800370e:	e7ed      	b.n	80036ec <_svfiprintf_r+0x1c0>
 8003710:	080046bc 	.word	0x080046bc
 8003714:	080046c6 	.word	0x080046c6
 8003718:	00000000 	.word	0x00000000
 800371c:	08003475 	.word	0x08003475
 8003720:	080046c2 	.word	0x080046c2

08003724 <sbrk_aligned>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4e0f      	ldr	r6, [pc, #60]	@ (8003764 <sbrk_aligned+0x40>)
 8003728:	460c      	mov	r4, r1
 800372a:	6831      	ldr	r1, [r6, #0]
 800372c:	4605      	mov	r5, r0
 800372e:	b911      	cbnz	r1, 8003736 <sbrk_aligned+0x12>
 8003730:	f000 fa7c 	bl	8003c2c <_sbrk_r>
 8003734:	6030      	str	r0, [r6, #0]
 8003736:	4621      	mov	r1, r4
 8003738:	4628      	mov	r0, r5
 800373a:	f000 fa77 	bl	8003c2c <_sbrk_r>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	d103      	bne.n	800374a <sbrk_aligned+0x26>
 8003742:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003746:	4620      	mov	r0, r4
 8003748:	bd70      	pop	{r4, r5, r6, pc}
 800374a:	1cc4      	adds	r4, r0, #3
 800374c:	f024 0403 	bic.w	r4, r4, #3
 8003750:	42a0      	cmp	r0, r4
 8003752:	d0f8      	beq.n	8003746 <sbrk_aligned+0x22>
 8003754:	1a21      	subs	r1, r4, r0
 8003756:	4628      	mov	r0, r5
 8003758:	f000 fa68 	bl	8003c2c <_sbrk_r>
 800375c:	3001      	adds	r0, #1
 800375e:	d1f2      	bne.n	8003746 <sbrk_aligned+0x22>
 8003760:	e7ef      	b.n	8003742 <sbrk_aligned+0x1e>
 8003762:	bf00      	nop
 8003764:	20000288 	.word	0x20000288

08003768 <_malloc_r>:
 8003768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800376c:	1ccd      	adds	r5, r1, #3
 800376e:	f025 0503 	bic.w	r5, r5, #3
 8003772:	3508      	adds	r5, #8
 8003774:	2d0c      	cmp	r5, #12
 8003776:	bf38      	it	cc
 8003778:	250c      	movcc	r5, #12
 800377a:	2d00      	cmp	r5, #0
 800377c:	4606      	mov	r6, r0
 800377e:	db01      	blt.n	8003784 <_malloc_r+0x1c>
 8003780:	42a9      	cmp	r1, r5
 8003782:	d904      	bls.n	800378e <_malloc_r+0x26>
 8003784:	230c      	movs	r3, #12
 8003786:	6033      	str	r3, [r6, #0]
 8003788:	2000      	movs	r0, #0
 800378a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800378e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003864 <_malloc_r+0xfc>
 8003792:	f000 f9f7 	bl	8003b84 <__malloc_lock>
 8003796:	f8d8 3000 	ldr.w	r3, [r8]
 800379a:	461c      	mov	r4, r3
 800379c:	bb44      	cbnz	r4, 80037f0 <_malloc_r+0x88>
 800379e:	4629      	mov	r1, r5
 80037a0:	4630      	mov	r0, r6
 80037a2:	f7ff ffbf 	bl	8003724 <sbrk_aligned>
 80037a6:	1c43      	adds	r3, r0, #1
 80037a8:	4604      	mov	r4, r0
 80037aa:	d158      	bne.n	800385e <_malloc_r+0xf6>
 80037ac:	f8d8 4000 	ldr.w	r4, [r8]
 80037b0:	4627      	mov	r7, r4
 80037b2:	2f00      	cmp	r7, #0
 80037b4:	d143      	bne.n	800383e <_malloc_r+0xd6>
 80037b6:	2c00      	cmp	r4, #0
 80037b8:	d04b      	beq.n	8003852 <_malloc_r+0xea>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	4639      	mov	r1, r7
 80037be:	4630      	mov	r0, r6
 80037c0:	eb04 0903 	add.w	r9, r4, r3
 80037c4:	f000 fa32 	bl	8003c2c <_sbrk_r>
 80037c8:	4581      	cmp	r9, r0
 80037ca:	d142      	bne.n	8003852 <_malloc_r+0xea>
 80037cc:	6821      	ldr	r1, [r4, #0]
 80037ce:	1a6d      	subs	r5, r5, r1
 80037d0:	4629      	mov	r1, r5
 80037d2:	4630      	mov	r0, r6
 80037d4:	f7ff ffa6 	bl	8003724 <sbrk_aligned>
 80037d8:	3001      	adds	r0, #1
 80037da:	d03a      	beq.n	8003852 <_malloc_r+0xea>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	442b      	add	r3, r5
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	f8d8 3000 	ldr.w	r3, [r8]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	bb62      	cbnz	r2, 8003844 <_malloc_r+0xdc>
 80037ea:	f8c8 7000 	str.w	r7, [r8]
 80037ee:	e00f      	b.n	8003810 <_malloc_r+0xa8>
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	1b52      	subs	r2, r2, r5
 80037f4:	d420      	bmi.n	8003838 <_malloc_r+0xd0>
 80037f6:	2a0b      	cmp	r2, #11
 80037f8:	d917      	bls.n	800382a <_malloc_r+0xc2>
 80037fa:	1961      	adds	r1, r4, r5
 80037fc:	42a3      	cmp	r3, r4
 80037fe:	6025      	str	r5, [r4, #0]
 8003800:	bf18      	it	ne
 8003802:	6059      	strne	r1, [r3, #4]
 8003804:	6863      	ldr	r3, [r4, #4]
 8003806:	bf08      	it	eq
 8003808:	f8c8 1000 	streq.w	r1, [r8]
 800380c:	5162      	str	r2, [r4, r5]
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	4630      	mov	r0, r6
 8003812:	f000 f9bd 	bl	8003b90 <__malloc_unlock>
 8003816:	f104 000b 	add.w	r0, r4, #11
 800381a:	1d23      	adds	r3, r4, #4
 800381c:	f020 0007 	bic.w	r0, r0, #7
 8003820:	1ac2      	subs	r2, r0, r3
 8003822:	bf1c      	itt	ne
 8003824:	1a1b      	subne	r3, r3, r0
 8003826:	50a3      	strne	r3, [r4, r2]
 8003828:	e7af      	b.n	800378a <_malloc_r+0x22>
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	42a3      	cmp	r3, r4
 800382e:	bf0c      	ite	eq
 8003830:	f8c8 2000 	streq.w	r2, [r8]
 8003834:	605a      	strne	r2, [r3, #4]
 8003836:	e7eb      	b.n	8003810 <_malloc_r+0xa8>
 8003838:	4623      	mov	r3, r4
 800383a:	6864      	ldr	r4, [r4, #4]
 800383c:	e7ae      	b.n	800379c <_malloc_r+0x34>
 800383e:	463c      	mov	r4, r7
 8003840:	687f      	ldr	r7, [r7, #4]
 8003842:	e7b6      	b.n	80037b2 <_malloc_r+0x4a>
 8003844:	461a      	mov	r2, r3
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	42a3      	cmp	r3, r4
 800384a:	d1fb      	bne.n	8003844 <_malloc_r+0xdc>
 800384c:	2300      	movs	r3, #0
 800384e:	6053      	str	r3, [r2, #4]
 8003850:	e7de      	b.n	8003810 <_malloc_r+0xa8>
 8003852:	230c      	movs	r3, #12
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	4630      	mov	r0, r6
 8003858:	f000 f99a 	bl	8003b90 <__malloc_unlock>
 800385c:	e794      	b.n	8003788 <_malloc_r+0x20>
 800385e:	6005      	str	r5, [r0, #0]
 8003860:	e7d6      	b.n	8003810 <_malloc_r+0xa8>
 8003862:	bf00      	nop
 8003864:	2000028c 	.word	0x2000028c

08003868 <_printf_common>:
 8003868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	4616      	mov	r6, r2
 800386e:	4698      	mov	r8, r3
 8003870:	688a      	ldr	r2, [r1, #8]
 8003872:	690b      	ldr	r3, [r1, #16]
 8003874:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003878:	4293      	cmp	r3, r2
 800387a:	bfb8      	it	lt
 800387c:	4613      	movlt	r3, r2
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003884:	4607      	mov	r7, r0
 8003886:	460c      	mov	r4, r1
 8003888:	b10a      	cbz	r2, 800388e <_printf_common+0x26>
 800388a:	3301      	adds	r3, #1
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	0699      	lsls	r1, r3, #26
 8003892:	bf42      	ittt	mi
 8003894:	6833      	ldrmi	r3, [r6, #0]
 8003896:	3302      	addmi	r3, #2
 8003898:	6033      	strmi	r3, [r6, #0]
 800389a:	6825      	ldr	r5, [r4, #0]
 800389c:	f015 0506 	ands.w	r5, r5, #6
 80038a0:	d106      	bne.n	80038b0 <_printf_common+0x48>
 80038a2:	f104 0a19 	add.w	sl, r4, #25
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	6832      	ldr	r2, [r6, #0]
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	42ab      	cmp	r3, r5
 80038ae:	dc26      	bgt.n	80038fe <_printf_common+0x96>
 80038b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038b4:	6822      	ldr	r2, [r4, #0]
 80038b6:	3b00      	subs	r3, #0
 80038b8:	bf18      	it	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	0692      	lsls	r2, r2, #26
 80038be:	d42b      	bmi.n	8003918 <_printf_common+0xb0>
 80038c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038c4:	4641      	mov	r1, r8
 80038c6:	4638      	mov	r0, r7
 80038c8:	47c8      	blx	r9
 80038ca:	3001      	adds	r0, #1
 80038cc:	d01e      	beq.n	800390c <_printf_common+0xa4>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	6922      	ldr	r2, [r4, #16]
 80038d2:	f003 0306 	and.w	r3, r3, #6
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	bf02      	ittt	eq
 80038da:	68e5      	ldreq	r5, [r4, #12]
 80038dc:	6833      	ldreq	r3, [r6, #0]
 80038de:	1aed      	subeq	r5, r5, r3
 80038e0:	68a3      	ldr	r3, [r4, #8]
 80038e2:	bf0c      	ite	eq
 80038e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e8:	2500      	movne	r5, #0
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bfc4      	itt	gt
 80038ee:	1a9b      	subgt	r3, r3, r2
 80038f0:	18ed      	addgt	r5, r5, r3
 80038f2:	2600      	movs	r6, #0
 80038f4:	341a      	adds	r4, #26
 80038f6:	42b5      	cmp	r5, r6
 80038f8:	d11a      	bne.n	8003930 <_printf_common+0xc8>
 80038fa:	2000      	movs	r0, #0
 80038fc:	e008      	b.n	8003910 <_printf_common+0xa8>
 80038fe:	2301      	movs	r3, #1
 8003900:	4652      	mov	r2, sl
 8003902:	4641      	mov	r1, r8
 8003904:	4638      	mov	r0, r7
 8003906:	47c8      	blx	r9
 8003908:	3001      	adds	r0, #1
 800390a:	d103      	bne.n	8003914 <_printf_common+0xac>
 800390c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003914:	3501      	adds	r5, #1
 8003916:	e7c6      	b.n	80038a6 <_printf_common+0x3e>
 8003918:	18e1      	adds	r1, r4, r3
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	2030      	movs	r0, #48	@ 0x30
 800391e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003922:	4422      	add	r2, r4
 8003924:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003928:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800392c:	3302      	adds	r3, #2
 800392e:	e7c7      	b.n	80038c0 <_printf_common+0x58>
 8003930:	2301      	movs	r3, #1
 8003932:	4622      	mov	r2, r4
 8003934:	4641      	mov	r1, r8
 8003936:	4638      	mov	r0, r7
 8003938:	47c8      	blx	r9
 800393a:	3001      	adds	r0, #1
 800393c:	d0e6      	beq.n	800390c <_printf_common+0xa4>
 800393e:	3601      	adds	r6, #1
 8003940:	e7d9      	b.n	80038f6 <_printf_common+0x8e>
	...

08003944 <_printf_i>:
 8003944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	7e0f      	ldrb	r7, [r1, #24]
 800394a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800394c:	2f78      	cmp	r7, #120	@ 0x78
 800394e:	4691      	mov	r9, r2
 8003950:	4680      	mov	r8, r0
 8003952:	460c      	mov	r4, r1
 8003954:	469a      	mov	sl, r3
 8003956:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800395a:	d807      	bhi.n	800396c <_printf_i+0x28>
 800395c:	2f62      	cmp	r7, #98	@ 0x62
 800395e:	d80a      	bhi.n	8003976 <_printf_i+0x32>
 8003960:	2f00      	cmp	r7, #0
 8003962:	f000 80d2 	beq.w	8003b0a <_printf_i+0x1c6>
 8003966:	2f58      	cmp	r7, #88	@ 0x58
 8003968:	f000 80b9 	beq.w	8003ade <_printf_i+0x19a>
 800396c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003970:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003974:	e03a      	b.n	80039ec <_printf_i+0xa8>
 8003976:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800397a:	2b15      	cmp	r3, #21
 800397c:	d8f6      	bhi.n	800396c <_printf_i+0x28>
 800397e:	a101      	add	r1, pc, #4	@ (adr r1, 8003984 <_printf_i+0x40>)
 8003980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003984:	080039dd 	.word	0x080039dd
 8003988:	080039f1 	.word	0x080039f1
 800398c:	0800396d 	.word	0x0800396d
 8003990:	0800396d 	.word	0x0800396d
 8003994:	0800396d 	.word	0x0800396d
 8003998:	0800396d 	.word	0x0800396d
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	0800396d 	.word	0x0800396d
 80039a4:	0800396d 	.word	0x0800396d
 80039a8:	0800396d 	.word	0x0800396d
 80039ac:	0800396d 	.word	0x0800396d
 80039b0:	08003af1 	.word	0x08003af1
 80039b4:	08003a1b 	.word	0x08003a1b
 80039b8:	08003aab 	.word	0x08003aab
 80039bc:	0800396d 	.word	0x0800396d
 80039c0:	0800396d 	.word	0x0800396d
 80039c4:	08003b13 	.word	0x08003b13
 80039c8:	0800396d 	.word	0x0800396d
 80039cc:	08003a1b 	.word	0x08003a1b
 80039d0:	0800396d 	.word	0x0800396d
 80039d4:	0800396d 	.word	0x0800396d
 80039d8:	08003ab3 	.word	0x08003ab3
 80039dc:	6833      	ldr	r3, [r6, #0]
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6032      	str	r2, [r6, #0]
 80039e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039ec:	2301      	movs	r3, #1
 80039ee:	e09d      	b.n	8003b2c <_printf_i+0x1e8>
 80039f0:	6833      	ldr	r3, [r6, #0]
 80039f2:	6820      	ldr	r0, [r4, #0]
 80039f4:	1d19      	adds	r1, r3, #4
 80039f6:	6031      	str	r1, [r6, #0]
 80039f8:	0606      	lsls	r6, r0, #24
 80039fa:	d501      	bpl.n	8003a00 <_printf_i+0xbc>
 80039fc:	681d      	ldr	r5, [r3, #0]
 80039fe:	e003      	b.n	8003a08 <_printf_i+0xc4>
 8003a00:	0645      	lsls	r5, r0, #25
 8003a02:	d5fb      	bpl.n	80039fc <_printf_i+0xb8>
 8003a04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a08:	2d00      	cmp	r5, #0
 8003a0a:	da03      	bge.n	8003a14 <_printf_i+0xd0>
 8003a0c:	232d      	movs	r3, #45	@ 0x2d
 8003a0e:	426d      	negs	r5, r5
 8003a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a14:	4859      	ldr	r0, [pc, #356]	@ (8003b7c <_printf_i+0x238>)
 8003a16:	230a      	movs	r3, #10
 8003a18:	e011      	b.n	8003a3e <_printf_i+0xfa>
 8003a1a:	6821      	ldr	r1, [r4, #0]
 8003a1c:	6833      	ldr	r3, [r6, #0]
 8003a1e:	0608      	lsls	r0, r1, #24
 8003a20:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a24:	d402      	bmi.n	8003a2c <_printf_i+0xe8>
 8003a26:	0649      	lsls	r1, r1, #25
 8003a28:	bf48      	it	mi
 8003a2a:	b2ad      	uxthmi	r5, r5
 8003a2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a2e:	4853      	ldr	r0, [pc, #332]	@ (8003b7c <_printf_i+0x238>)
 8003a30:	6033      	str	r3, [r6, #0]
 8003a32:	bf14      	ite	ne
 8003a34:	230a      	movne	r3, #10
 8003a36:	2308      	moveq	r3, #8
 8003a38:	2100      	movs	r1, #0
 8003a3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a3e:	6866      	ldr	r6, [r4, #4]
 8003a40:	60a6      	str	r6, [r4, #8]
 8003a42:	2e00      	cmp	r6, #0
 8003a44:	bfa2      	ittt	ge
 8003a46:	6821      	ldrge	r1, [r4, #0]
 8003a48:	f021 0104 	bicge.w	r1, r1, #4
 8003a4c:	6021      	strge	r1, [r4, #0]
 8003a4e:	b90d      	cbnz	r5, 8003a54 <_printf_i+0x110>
 8003a50:	2e00      	cmp	r6, #0
 8003a52:	d04b      	beq.n	8003aec <_printf_i+0x1a8>
 8003a54:	4616      	mov	r6, r2
 8003a56:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a5a:	fb03 5711 	mls	r7, r3, r1, r5
 8003a5e:	5dc7      	ldrb	r7, [r0, r7]
 8003a60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a64:	462f      	mov	r7, r5
 8003a66:	42bb      	cmp	r3, r7
 8003a68:	460d      	mov	r5, r1
 8003a6a:	d9f4      	bls.n	8003a56 <_printf_i+0x112>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d10b      	bne.n	8003a88 <_printf_i+0x144>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	07df      	lsls	r7, r3, #31
 8003a74:	d508      	bpl.n	8003a88 <_printf_i+0x144>
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	6861      	ldr	r1, [r4, #4]
 8003a7a:	4299      	cmp	r1, r3
 8003a7c:	bfde      	ittt	le
 8003a7e:	2330      	movle	r3, #48	@ 0x30
 8003a80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a84:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003a88:	1b92      	subs	r2, r2, r6
 8003a8a:	6122      	str	r2, [r4, #16]
 8003a8c:	f8cd a000 	str.w	sl, [sp]
 8003a90:	464b      	mov	r3, r9
 8003a92:	aa03      	add	r2, sp, #12
 8003a94:	4621      	mov	r1, r4
 8003a96:	4640      	mov	r0, r8
 8003a98:	f7ff fee6 	bl	8003868 <_printf_common>
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d14a      	bne.n	8003b36 <_printf_i+0x1f2>
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003aa4:	b004      	add	sp, #16
 8003aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f043 0320 	orr.w	r3, r3, #32
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	4833      	ldr	r0, [pc, #204]	@ (8003b80 <_printf_i+0x23c>)
 8003ab4:	2778      	movs	r7, #120	@ 0x78
 8003ab6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	6831      	ldr	r1, [r6, #0]
 8003abe:	061f      	lsls	r7, r3, #24
 8003ac0:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ac4:	d402      	bmi.n	8003acc <_printf_i+0x188>
 8003ac6:	065f      	lsls	r7, r3, #25
 8003ac8:	bf48      	it	mi
 8003aca:	b2ad      	uxthmi	r5, r5
 8003acc:	6031      	str	r1, [r6, #0]
 8003ace:	07d9      	lsls	r1, r3, #31
 8003ad0:	bf44      	itt	mi
 8003ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ad6:	6023      	strmi	r3, [r4, #0]
 8003ad8:	b11d      	cbz	r5, 8003ae2 <_printf_i+0x19e>
 8003ada:	2310      	movs	r3, #16
 8003adc:	e7ac      	b.n	8003a38 <_printf_i+0xf4>
 8003ade:	4827      	ldr	r0, [pc, #156]	@ (8003b7c <_printf_i+0x238>)
 8003ae0:	e7e9      	b.n	8003ab6 <_printf_i+0x172>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	f023 0320 	bic.w	r3, r3, #32
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	e7f6      	b.n	8003ada <_printf_i+0x196>
 8003aec:	4616      	mov	r6, r2
 8003aee:	e7bd      	b.n	8003a6c <_printf_i+0x128>
 8003af0:	6833      	ldr	r3, [r6, #0]
 8003af2:	6825      	ldr	r5, [r4, #0]
 8003af4:	6961      	ldr	r1, [r4, #20]
 8003af6:	1d18      	adds	r0, r3, #4
 8003af8:	6030      	str	r0, [r6, #0]
 8003afa:	062e      	lsls	r6, r5, #24
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	d501      	bpl.n	8003b04 <_printf_i+0x1c0>
 8003b00:	6019      	str	r1, [r3, #0]
 8003b02:	e002      	b.n	8003b0a <_printf_i+0x1c6>
 8003b04:	0668      	lsls	r0, r5, #25
 8003b06:	d5fb      	bpl.n	8003b00 <_printf_i+0x1bc>
 8003b08:	8019      	strh	r1, [r3, #0]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	6123      	str	r3, [r4, #16]
 8003b0e:	4616      	mov	r6, r2
 8003b10:	e7bc      	b.n	8003a8c <_printf_i+0x148>
 8003b12:	6833      	ldr	r3, [r6, #0]
 8003b14:	1d1a      	adds	r2, r3, #4
 8003b16:	6032      	str	r2, [r6, #0]
 8003b18:	681e      	ldr	r6, [r3, #0]
 8003b1a:	6862      	ldr	r2, [r4, #4]
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f7fc fb76 	bl	8000210 <memchr>
 8003b24:	b108      	cbz	r0, 8003b2a <_printf_i+0x1e6>
 8003b26:	1b80      	subs	r0, r0, r6
 8003b28:	6060      	str	r0, [r4, #4]
 8003b2a:	6863      	ldr	r3, [r4, #4]
 8003b2c:	6123      	str	r3, [r4, #16]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b34:	e7aa      	b.n	8003a8c <_printf_i+0x148>
 8003b36:	6923      	ldr	r3, [r4, #16]
 8003b38:	4632      	mov	r2, r6
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	47d0      	blx	sl
 8003b40:	3001      	adds	r0, #1
 8003b42:	d0ad      	beq.n	8003aa0 <_printf_i+0x15c>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	079b      	lsls	r3, r3, #30
 8003b48:	d413      	bmi.n	8003b72 <_printf_i+0x22e>
 8003b4a:	68e0      	ldr	r0, [r4, #12]
 8003b4c:	9b03      	ldr	r3, [sp, #12]
 8003b4e:	4298      	cmp	r0, r3
 8003b50:	bfb8      	it	lt
 8003b52:	4618      	movlt	r0, r3
 8003b54:	e7a6      	b.n	8003aa4 <_printf_i+0x160>
 8003b56:	2301      	movs	r3, #1
 8003b58:	4632      	mov	r2, r6
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	47d0      	blx	sl
 8003b60:	3001      	adds	r0, #1
 8003b62:	d09d      	beq.n	8003aa0 <_printf_i+0x15c>
 8003b64:	3501      	adds	r5, #1
 8003b66:	68e3      	ldr	r3, [r4, #12]
 8003b68:	9903      	ldr	r1, [sp, #12]
 8003b6a:	1a5b      	subs	r3, r3, r1
 8003b6c:	42ab      	cmp	r3, r5
 8003b6e:	dcf2      	bgt.n	8003b56 <_printf_i+0x212>
 8003b70:	e7eb      	b.n	8003b4a <_printf_i+0x206>
 8003b72:	2500      	movs	r5, #0
 8003b74:	f104 0619 	add.w	r6, r4, #25
 8003b78:	e7f5      	b.n	8003b66 <_printf_i+0x222>
 8003b7a:	bf00      	nop
 8003b7c:	080046cd 	.word	0x080046cd
 8003b80:	080046de 	.word	0x080046de

08003b84 <__malloc_lock>:
 8003b84:	4801      	ldr	r0, [pc, #4]	@ (8003b8c <__malloc_lock+0x8>)
 8003b86:	f7ff bc65 	b.w	8003454 <__retarget_lock_acquire_recursive>
 8003b8a:	bf00      	nop
 8003b8c:	20000284 	.word	0x20000284

08003b90 <__malloc_unlock>:
 8003b90:	4801      	ldr	r0, [pc, #4]	@ (8003b98 <__malloc_unlock+0x8>)
 8003b92:	f7ff bc60 	b.w	8003456 <__retarget_lock_release_recursive>
 8003b96:	bf00      	nop
 8003b98:	20000284 	.word	0x20000284

08003b9c <_realloc_r>:
 8003b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	4615      	mov	r5, r2
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	b921      	cbnz	r1, 8003bb2 <_realloc_r+0x16>
 8003ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bac:	4611      	mov	r1, r2
 8003bae:	f7ff bddb 	b.w	8003768 <_malloc_r>
 8003bb2:	b92a      	cbnz	r2, 8003bc0 <_realloc_r+0x24>
 8003bb4:	f000 f84a 	bl	8003c4c <_free_r>
 8003bb8:	2400      	movs	r4, #0
 8003bba:	4620      	mov	r0, r4
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc0:	f000 f88e 	bl	8003ce0 <_malloc_usable_size_r>
 8003bc4:	4285      	cmp	r5, r0
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	d802      	bhi.n	8003bd0 <_realloc_r+0x34>
 8003bca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003bce:	d8f4      	bhi.n	8003bba <_realloc_r+0x1e>
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	f7ff fdc8 	bl	8003768 <_malloc_r>
 8003bd8:	4607      	mov	r7, r0
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d0ec      	beq.n	8003bb8 <_realloc_r+0x1c>
 8003bde:	42b5      	cmp	r5, r6
 8003be0:	462a      	mov	r2, r5
 8003be2:	4621      	mov	r1, r4
 8003be4:	bf28      	it	cs
 8003be6:	4632      	movcs	r2, r6
 8003be8:	f7ff fc36 	bl	8003458 <memcpy>
 8003bec:	4621      	mov	r1, r4
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f000 f82c 	bl	8003c4c <_free_r>
 8003bf4:	463c      	mov	r4, r7
 8003bf6:	e7e0      	b.n	8003bba <_realloc_r+0x1e>

08003bf8 <memmove>:
 8003bf8:	4288      	cmp	r0, r1
 8003bfa:	b510      	push	{r4, lr}
 8003bfc:	eb01 0402 	add.w	r4, r1, r2
 8003c00:	d902      	bls.n	8003c08 <memmove+0x10>
 8003c02:	4284      	cmp	r4, r0
 8003c04:	4623      	mov	r3, r4
 8003c06:	d807      	bhi.n	8003c18 <memmove+0x20>
 8003c08:	1e43      	subs	r3, r0, #1
 8003c0a:	42a1      	cmp	r1, r4
 8003c0c:	d008      	beq.n	8003c20 <memmove+0x28>
 8003c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c16:	e7f8      	b.n	8003c0a <memmove+0x12>
 8003c18:	4402      	add	r2, r0
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	428a      	cmp	r2, r1
 8003c1e:	d100      	bne.n	8003c22 <memmove+0x2a>
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c2a:	e7f7      	b.n	8003c1c <memmove+0x24>

08003c2c <_sbrk_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4d06      	ldr	r5, [pc, #24]	@ (8003c48 <_sbrk_r+0x1c>)
 8003c30:	2300      	movs	r3, #0
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	f7fd fa22 	bl	8001080 <_sbrk>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d102      	bne.n	8003c46 <_sbrk_r+0x1a>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b103      	cbz	r3, 8003c46 <_sbrk_r+0x1a>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	20000290 	.word	0x20000290

08003c4c <_free_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4605      	mov	r5, r0
 8003c50:	2900      	cmp	r1, #0
 8003c52:	d041      	beq.n	8003cd8 <_free_r+0x8c>
 8003c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c58:	1f0c      	subs	r4, r1, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfb8      	it	lt
 8003c5e:	18e4      	addlt	r4, r4, r3
 8003c60:	f7ff ff90 	bl	8003b84 <__malloc_lock>
 8003c64:	4a1d      	ldr	r2, [pc, #116]	@ (8003cdc <_free_r+0x90>)
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	b933      	cbnz	r3, 8003c78 <_free_r+0x2c>
 8003c6a:	6063      	str	r3, [r4, #4]
 8003c6c:	6014      	str	r4, [r2, #0]
 8003c6e:	4628      	mov	r0, r5
 8003c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c74:	f7ff bf8c 	b.w	8003b90 <__malloc_unlock>
 8003c78:	42a3      	cmp	r3, r4
 8003c7a:	d908      	bls.n	8003c8e <_free_r+0x42>
 8003c7c:	6820      	ldr	r0, [r4, #0]
 8003c7e:	1821      	adds	r1, r4, r0
 8003c80:	428b      	cmp	r3, r1
 8003c82:	bf01      	itttt	eq
 8003c84:	6819      	ldreq	r1, [r3, #0]
 8003c86:	685b      	ldreq	r3, [r3, #4]
 8003c88:	1809      	addeq	r1, r1, r0
 8003c8a:	6021      	streq	r1, [r4, #0]
 8003c8c:	e7ed      	b.n	8003c6a <_free_r+0x1e>
 8003c8e:	461a      	mov	r2, r3
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b10b      	cbz	r3, 8003c98 <_free_r+0x4c>
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d9fa      	bls.n	8003c8e <_free_r+0x42>
 8003c98:	6811      	ldr	r1, [r2, #0]
 8003c9a:	1850      	adds	r0, r2, r1
 8003c9c:	42a0      	cmp	r0, r4
 8003c9e:	d10b      	bne.n	8003cb8 <_free_r+0x6c>
 8003ca0:	6820      	ldr	r0, [r4, #0]
 8003ca2:	4401      	add	r1, r0
 8003ca4:	1850      	adds	r0, r2, r1
 8003ca6:	4283      	cmp	r3, r0
 8003ca8:	6011      	str	r1, [r2, #0]
 8003caa:	d1e0      	bne.n	8003c6e <_free_r+0x22>
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6053      	str	r3, [r2, #4]
 8003cb2:	4408      	add	r0, r1
 8003cb4:	6010      	str	r0, [r2, #0]
 8003cb6:	e7da      	b.n	8003c6e <_free_r+0x22>
 8003cb8:	d902      	bls.n	8003cc0 <_free_r+0x74>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	602b      	str	r3, [r5, #0]
 8003cbe:	e7d6      	b.n	8003c6e <_free_r+0x22>
 8003cc0:	6820      	ldr	r0, [r4, #0]
 8003cc2:	1821      	adds	r1, r4, r0
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	bf04      	itt	eq
 8003cc8:	6819      	ldreq	r1, [r3, #0]
 8003cca:	685b      	ldreq	r3, [r3, #4]
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	bf04      	itt	eq
 8003cd0:	1809      	addeq	r1, r1, r0
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	6054      	str	r4, [r2, #4]
 8003cd6:	e7ca      	b.n	8003c6e <_free_r+0x22>
 8003cd8:	bd38      	pop	{r3, r4, r5, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000028c 	.word	0x2000028c

08003ce0 <_malloc_usable_size_r>:
 8003ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce4:	1f18      	subs	r0, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bfbc      	itt	lt
 8003cea:	580b      	ldrlt	r3, [r1, r0]
 8003cec:	18c0      	addlt	r0, r0, r3
 8003cee:	4770      	bx	lr

08003cf0 <_init>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr

08003cfc <_fini>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	bf00      	nop
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr
