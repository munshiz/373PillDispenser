
LCD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002928  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ae4  08002ae4  00003ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b24  08002b24  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b24  08002b24  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b24  08002b24  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b24  08002b24  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b28  08002b28  00003b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b2c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002b38  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002b38  00004094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008188  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e6  00000000  00000000  0000c1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0000d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000669  00000000  00000000  0000e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293d9  00000000  00000000  0000e7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000972f  00000000  00000000  00037b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f971f  00000000  00000000  000412a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a9c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021c0  00000000  00000000  0013aa0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0013cbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002acc 	.word	0x08002acc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08002acc 	.word	0x08002acc

080001fc <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 800020a:	2200      	movs	r2, #0
 800020c:	2140      	movs	r1, #64	@ 0x40
 800020e:	480c      	ldr	r0, [pc, #48]	@ (8000240 <ILI9488_SendCommand+0x44>)
 8000210:	f001 f938 	bl	8001484 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000214:	2200      	movs	r2, #0
 8000216:	2101      	movs	r1, #1
 8000218:	4809      	ldr	r0, [pc, #36]	@ (8000240 <ILI9488_SendCommand+0x44>)
 800021a:	f001 f933 	bl	8001484 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800021e:	f107 010f 	add.w	r1, r7, #15
 8000222:	2301      	movs	r3, #1
 8000224:	2201      	movs	r2, #1
 8000226:	4807      	ldr	r0, [pc, #28]	@ (8000244 <ILI9488_SendCommand+0x48>)
 8000228:	f002 f94b 	bl	80024c2 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 800022c:	2201      	movs	r2, #1
 800022e:	2101      	movs	r1, #1
 8000230:	4803      	ldr	r0, [pc, #12]	@ (8000240 <ILI9488_SendCommand+0x44>)
 8000232:	f001 f927 	bl	8001484 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	48000c00 	.word	0x48000c00
 8000244:	2000002c 	.word	0x2000002c

08000248 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 8000256:	2201      	movs	r2, #1
 8000258:	2140      	movs	r1, #64	@ 0x40
 800025a:	480c      	ldr	r0, [pc, #48]	@ (800028c <ILI9488_SendData+0x44>)
 800025c:	f001 f912 	bl	8001484 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000260:	2200      	movs	r2, #0
 8000262:	2101      	movs	r1, #1
 8000264:	4809      	ldr	r0, [pc, #36]	@ (800028c <ILI9488_SendData+0x44>)
 8000266:	f001 f90d 	bl	8001484 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800026a:	f107 010f 	add.w	r1, r7, #15
 800026e:	2301      	movs	r3, #1
 8000270:	2201      	movs	r2, #1
 8000272:	4807      	ldr	r0, [pc, #28]	@ (8000290 <ILI9488_SendData+0x48>)
 8000274:	f002 f925 	bl	80024c2 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000278:	2201      	movs	r2, #1
 800027a:	2101      	movs	r1, #1
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <ILI9488_SendData+0x44>)
 800027e:	f001 f901 	bl	8001484 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	48000c00 	.word	0x48000c00
 8000290:	2000002c 	.word	0x2000002c

08000294 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
	DC_DATA();
 800029e:	2201      	movs	r2, #1
 80002a0:	2140      	movs	r1, #64	@ 0x40
 80002a2:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <ILI9488_SendData_Multi+0x64>)
 80002a4:	f001 f8ee 	bl	8001484 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 80002a8:	2200      	movs	r2, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	4812      	ldr	r0, [pc, #72]	@ (80002f8 <ILI9488_SendData_Multi+0x64>)
 80002ae:	f001 f8e9 	bl	8001484 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 80002b2:	e015      	b.n	80002e0 <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80002ba:	bf28      	it	cs
 80002bc:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80002c0:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80002c2:	89fa      	ldrh	r2, [r7, #14]
 80002c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002c8:	6879      	ldr	r1, [r7, #4]
 80002ca:	480c      	ldr	r0, [pc, #48]	@ (80002fc <ILI9488_SendData_Multi+0x68>)
 80002cc:	f002 f8f9 	bl	80024c2 <HAL_SPI_Transmit>
		buff += chunk_size;
 80002d0:	89fb      	ldrh	r3, [r7, #14]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80002d8:	89fb      	ldrh	r3, [r7, #14]
 80002da:	683a      	ldr	r2, [r7, #0]
 80002dc:	1ad3      	subs	r3, r2, r3
 80002de:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1e6      	bne.n	80002b4 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 80002e6:	2201      	movs	r2, #1
 80002e8:	2101      	movs	r1, #1
 80002ea:	4803      	ldr	r0, [pc, #12]	@ (80002f8 <ILI9488_SendData_Multi+0x64>)
 80002ec:	f001 f8ca 	bl	8001484 <HAL_GPIO_WritePin>
}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	48000c00 	.word	0x48000c00
 80002fc:	2000002c 	.word	0x2000002c

08000300 <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 8000304:	2201      	movs	r2, #1
 8000306:	2101      	movs	r1, #1
 8000308:	486c      	ldr	r0, [pc, #432]	@ (80004bc <ILI9488_Init+0x1bc>)
 800030a:	f001 f8bb 	bl	8001484 <HAL_GPIO_WritePin>
	RST_A();
 800030e:	2200      	movs	r2, #0
 8000310:	2180      	movs	r1, #128	@ 0x80
 8000312:	486a      	ldr	r0, [pc, #424]	@ (80004bc <ILI9488_Init+0x1bc>)
 8000314:	f001 f8b6 	bl	8001484 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8000318:	200a      	movs	r0, #10
 800031a:	f000 fe17 	bl	8000f4c <HAL_Delay>
		 RST_D();
 800031e:	2201      	movs	r2, #1
 8000320:	2180      	movs	r1, #128	@ 0x80
 8000322:	4866      	ldr	r0, [pc, #408]	@ (80004bc <ILI9488_Init+0x1bc>)
 8000324:	f001 f8ae 	bl	8001484 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 8000328:	4b65      	ldr	r3, [pc, #404]	@ (80004c0 <ILI9488_Init+0x1c0>)
 800032a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800032e:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 8000330:	4b64      	ldr	r3, [pc, #400]	@ (80004c4 <ILI9488_Init+0x1c4>)
 8000332:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000336:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 8000338:	20e0      	movs	r0, #224	@ 0xe0
 800033a:	f7ff ff5f 	bl	80001fc <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 800033e:	2000      	movs	r0, #0
 8000340:	f7ff ff82 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 8000344:	2003      	movs	r0, #3
 8000346:	f7ff ff7f 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 800034a:	2009      	movs	r0, #9
 800034c:	f7ff ff7c 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000350:	2008      	movs	r0, #8
 8000352:	f7ff ff79 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000356:	2016      	movs	r0, #22
 8000358:	f7ff ff76 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800035c:	200a      	movs	r0, #10
 800035e:	f7ff ff73 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 8000362:	203f      	movs	r0, #63	@ 0x3f
 8000364:	f7ff ff70 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8000368:	2078      	movs	r0, #120	@ 0x78
 800036a:	f7ff ff6d 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 800036e:	204c      	movs	r0, #76	@ 0x4c
 8000370:	f7ff ff6a 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000374:	2009      	movs	r0, #9
 8000376:	f7ff ff67 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800037a:	200a      	movs	r0, #10
 800037c:	f7ff ff64 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000380:	2008      	movs	r0, #8
 8000382:	f7ff ff61 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000386:	2016      	movs	r0, #22
 8000388:	f7ff ff5e 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 800038c:	201a      	movs	r0, #26
 800038e:	f7ff ff5b 	bl	8000248 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 8000392:	200f      	movs	r0, #15
 8000394:	f7ff ff58 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 8000398:	20e1      	movs	r0, #225	@ 0xe1
 800039a:	f7ff ff2f 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 800039e:	2000      	movs	r0, #0
 80003a0:	f7ff ff52 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 80003a4:	2016      	movs	r0, #22
 80003a6:	f7ff ff4f 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 80003aa:	2019      	movs	r0, #25
 80003ac:	f7ff ff4c 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 80003b0:	2003      	movs	r0, #3
 80003b2:	f7ff ff49 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80003b6:	200f      	movs	r0, #15
 80003b8:	f7ff ff46 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 80003bc:	2005      	movs	r0, #5
 80003be:	f7ff ff43 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 80003c2:	2032      	movs	r0, #50	@ 0x32
 80003c4:	f7ff ff40 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 80003c8:	2045      	movs	r0, #69	@ 0x45
 80003ca:	f7ff ff3d 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 80003ce:	2046      	movs	r0, #70	@ 0x46
 80003d0:	f7ff ff3a 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 80003d4:	2004      	movs	r0, #4
 80003d6:	f7ff ff37 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 80003da:	200e      	movs	r0, #14
 80003dc:	f7ff ff34 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 80003e0:	200d      	movs	r0, #13
 80003e2:	f7ff ff31 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 80003e6:	2035      	movs	r0, #53	@ 0x35
 80003e8:	f7ff ff2e 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 80003ec:	2037      	movs	r0, #55	@ 0x37
 80003ee:	f7ff ff2b 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80003f2:	200f      	movs	r0, #15
 80003f4:	f7ff ff28 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 80003f8:	20c0      	movs	r0, #192	@ 0xc0
 80003fa:	f7ff feff 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 80003fe:	2017      	movs	r0, #23
 8000400:	f7ff ff22 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 8000404:	2015      	movs	r0, #21
 8000406:	f7ff ff1f 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 800040a:	20c1      	movs	r0, #193	@ 0xc1
 800040c:	f7ff fef6 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 8000410:	2041      	movs	r0, #65	@ 0x41
 8000412:	f7ff ff19 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 8000416:	20c5      	movs	r0, #197	@ 0xc5
 8000418:	f7ff fef0 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff ff13 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 8000422:	2012      	movs	r0, #18
 8000424:	f7ff ff10 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 8000428:	2080      	movs	r0, #128	@ 0x80
 800042a:	f7ff ff0d 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 800042e:	2036      	movs	r0, #54	@ 0x36
 8000430:	f7ff fee4 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 8000434:	2048      	movs	r0, #72	@ 0x48
 8000436:	f7ff ff07 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 800043a:	203a      	movs	r0, #58	@ 0x3a
 800043c:	f7ff fede 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 8000440:	2066      	movs	r0, #102	@ 0x66
 8000442:	f7ff ff01 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 8000446:	20b0      	movs	r0, #176	@ 0xb0
 8000448:	f7ff fed8 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 800044c:	2080      	movs	r0, #128	@ 0x80
 800044e:	f7ff fefb 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 8000452:	20b1      	movs	r0, #177	@ 0xb1
 8000454:	f7ff fed2 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 8000458:	20a0      	movs	r0, #160	@ 0xa0
 800045a:	f7ff fef5 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 800045e:	20b4      	movs	r0, #180	@ 0xb4
 8000460:	f7ff fecc 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff feef 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 800046a:	20b6      	movs	r0, #182	@ 0xb6
 800046c:	f7ff fec6 	bl	80001fc <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000470:	2002      	movs	r0, #2
 8000472:	f7ff fee9 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 8000476:	2002      	movs	r0, #2
 8000478:	f7ff fee6 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 800047c:	20e9      	movs	r0, #233	@ 0xe9
 800047e:	f7ff febd 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 8000482:	2000      	movs	r0, #0
 8000484:	f7ff fee0 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 8000488:	20f7      	movs	r0, #247	@ 0xf7
 800048a:	f7ff feb7 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 800048e:	20a9      	movs	r0, #169	@ 0xa9
 8000490:	f7ff feda 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 8000494:	2051      	movs	r0, #81	@ 0x51
 8000496:	f7ff fed7 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 800049a:	202c      	movs	r0, #44	@ 0x2c
 800049c:	f7ff fed4 	bl	8000248 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 80004a0:	2082      	movs	r0, #130	@ 0x82
 80004a2:	f7ff fed1 	bl	8000248 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 80004a6:	2011      	movs	r0, #17
 80004a8:	f7ff fea8 	bl	80001fc <ILI9488_SendCommand>

	 	HAL_Delay(120);
 80004ac:	2078      	movs	r0, #120	@ 0x78
 80004ae:	f000 fd4d 	bl	8000f4c <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 80004b2:	2029      	movs	r0, #41	@ 0x29
 80004b4:	f7ff fea2 	bl	80001fc <ILI9488_SendCommand>

}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	48000c00 	.word	0x48000c00
 80004c0:	20000028 	.word	0x20000028
 80004c4:	2000002a 	.word	0x2000002a

080004c8 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4604      	mov	r4, r0
 80004d0:	4608      	mov	r0, r1
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	4623      	mov	r3, r4
 80004d8:	80fb      	strh	r3, [r7, #6]
 80004da:	4603      	mov	r3, r0
 80004dc:	80bb      	strh	r3, [r7, #4]
 80004de:	460b      	mov	r3, r1
 80004e0:	807b      	strh	r3, [r7, #2]
 80004e2:	4613      	mov	r3, r2
 80004e4:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 80004e6:	202a      	movs	r0, #42	@ 0x2a
 80004e8:	f7ff fe88 	bl	80001fc <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	0a1b      	lsrs	r3, r3, #8
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	733b      	strb	r3, [r7, #12]
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	737b      	strb	r3, [r7, #13]
 80004fc:	887b      	ldrh	r3, [r7, #2]
 80004fe:	0a1b      	lsrs	r3, r3, #8
 8000500:	b29b      	uxth	r3, r3
 8000502:	b2db      	uxtb	r3, r3
 8000504:	73bb      	strb	r3, [r7, #14]
 8000506:	887b      	ldrh	r3, [r7, #2]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2104      	movs	r1, #4
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff febe 	bl	8000294 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8000518:	202b      	movs	r0, #43	@ 0x2b
 800051a:	f7ff fe6f 	bl	80001fc <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 800051e:	88bb      	ldrh	r3, [r7, #4]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	723b      	strb	r3, [r7, #8]
 8000528:	88bb      	ldrh	r3, [r7, #4]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	727b      	strb	r3, [r7, #9]
 800052e:	883b      	ldrh	r3, [r7, #0]
 8000530:	0a1b      	lsrs	r3, r3, #8
 8000532:	b29b      	uxth	r3, r3
 8000534:	b2db      	uxtb	r3, r3
 8000536:	72bb      	strb	r3, [r7, #10]
 8000538:	883b      	ldrh	r3, [r7, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 800053e:	f107 0308 	add.w	r3, r7, #8
 8000542:	2104      	movs	r1, #4
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff fea5 	bl	8000294 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 800054a:	202c      	movs	r0, #44	@ 0x2c
 800054c:	f7ff fe56 	bl	80001fc <ILI9488_SendCommand>
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bd90      	pop	{r4, r7, pc}

08000558 <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <fillScreen+0x2c>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	b21a      	sxth	r2, r3
 8000568:	4b07      	ldr	r3, [pc, #28]	@ (8000588 <fillScreen+0x30>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b219      	sxth	r1, r3
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	460b      	mov	r3, r1
 8000574:	2100      	movs	r1, #0
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f808 	bl	800058c <fillRect>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000028 	.word	0x20000028
 8000588:	2000002a 	.word	0x2000002a

0800058c <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800058c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000590:	b08a      	sub	sp, #40	@ 0x28
 8000592:	af00      	add	r7, sp, #0
 8000594:	4606      	mov	r6, r0
 8000596:	4608      	mov	r0, r1
 8000598:	4611      	mov	r1, r2
 800059a:	461a      	mov	r2, r3
 800059c:	4633      	mov	r3, r6
 800059e:	80fb      	strh	r3, [r7, #6]
 80005a0:	4603      	mov	r3, r0
 80005a2:	80bb      	strh	r3, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	807b      	strh	r3, [r7, #2]
 80005a8:	4613      	mov	r3, r2
 80005aa:	803b      	strh	r3, [r7, #0]
 80005ac:	466b      	mov	r3, sp
 80005ae:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 80005b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005b4:	4a8f      	ldr	r2, [pc, #572]	@ (80007f4 <fillRect+0x268>)
 80005b6:	8812      	ldrh	r2, [r2, #0]
 80005b8:	4293      	cmp	r3, r2
 80005ba:	da05      	bge.n	80005c8 <fillRect+0x3c>
 80005bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005c0:	4a8d      	ldr	r2, [pc, #564]	@ (80007f8 <fillRect+0x26c>)
 80005c2:	8812      	ldrh	r2, [r2, #0]
 80005c4:	4293      	cmp	r3, r2
 80005c6:	db01      	blt.n	80005cc <fillRect+0x40>
		return;
 80005c8:	46d5      	mov	sp, sl
 80005ca:	e10f      	b.n	80007ec <fillRect+0x260>
	if ((x + w - 1) >= width)
 80005cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005d4:	4413      	add	r3, r2
 80005d6:	4a87      	ldr	r2, [pc, #540]	@ (80007f4 <fillRect+0x268>)
 80005d8:	8812      	ldrh	r2, [r2, #0]
 80005da:	4293      	cmp	r3, r2
 80005dc:	dd05      	ble.n	80005ea <fillRect+0x5e>
		w = width - x;
 80005de:	4b85      	ldr	r3, [pc, #532]	@ (80007f4 <fillRect+0x268>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 80005ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a80      	ldr	r2, [pc, #512]	@ (80007f8 <fillRect+0x26c>)
 80005f6:	8812      	ldrh	r2, [r2, #0]
 80005f8:	4293      	cmp	r3, r2
 80005fa:	dd05      	ble.n	8000608 <fillRect+0x7c>
		h = height - y;
 80005fc:	4b7e      	ldr	r3, [pc, #504]	@ (80007f8 <fillRect+0x26c>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	b29b      	uxth	r3, r3
 8000606:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000608:	88f8      	ldrh	r0, [r7, #6]
 800060a:	88b9      	ldrh	r1, [r7, #4]
 800060c:	88fa      	ldrh	r2, [r7, #6]
 800060e:	887b      	ldrh	r3, [r7, #2]
 8000610:	4413      	add	r3, r2
 8000612:	b29b      	uxth	r3, r3
 8000614:	3b01      	subs	r3, #1
 8000616:	b29e      	uxth	r6, r3
 8000618:	88ba      	ldrh	r2, [r7, #4]
 800061a:	883b      	ldrh	r3, [r7, #0]
 800061c:	4413      	add	r3, r2
 800061e:	b29b      	uxth	r3, r3
 8000620:	3b01      	subs	r3, #1
 8000622:	b29b      	uxth	r3, r3
 8000624:	4632      	mov	r2, r6
 8000626:	f7ff ff4f 	bl	80004c8 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 800062a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800062e:	0adb      	lsrs	r3, r3, #11
 8000630:	b29b      	uxth	r3, r3
 8000632:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 8000634:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000638:	115b      	asrs	r3, r3, #5
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000640:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 8000642:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f003 031f 	and.w	r3, r3, #31
 800064c:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 800064e:	7efa      	ldrb	r2, [r7, #27]
 8000650:	4613      	mov	r3, r2
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	4a69      	ldr	r2, [pc, #420]	@ (80007fc <fillRect+0x270>)
 8000658:	fb82 1203 	smull	r1, r2, r2, r3
 800065c:	441a      	add	r2, r3
 800065e:	1112      	asrs	r2, r2, #4
 8000660:	17db      	asrs	r3, r3, #31
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 8000666:	7eba      	ldrb	r2, [r7, #26]
 8000668:	4613      	mov	r3, r2
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	4a64      	ldr	r2, [pc, #400]	@ (8000800 <fillRect+0x274>)
 8000670:	fb82 1203 	smull	r1, r2, r2, r3
 8000674:	441a      	add	r2, r3
 8000676:	1152      	asrs	r2, r2, #5
 8000678:	17db      	asrs	r3, r3, #31
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 800067e:	7e7a      	ldrb	r2, [r7, #25]
 8000680:	4613      	mov	r3, r2
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	4a5d      	ldr	r2, [pc, #372]	@ (80007fc <fillRect+0x270>)
 8000688:	fb82 1203 	smull	r1, r2, r2, r3
 800068c:	441a      	add	r2, r3
 800068e:	1112      	asrs	r2, r2, #4
 8000690:	17db      	asrs	r3, r3, #31
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 8000696:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800069a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800069e:	fb03 f202 	mul.w	r2, r3, r2
 80006a2:	4613      	mov	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	4413      	add	r3, r2
 80006a8:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80006b0:	d204      	bcs.n	80006bc <fillRect+0x130>
		cnt = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	623b      	str	r3, [r7, #32]
		buf_size = n;
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	e02f      	b.n	800071c <fillRect+0x190>
	}
	else {
		cnt = n/3;
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	4a51      	ldr	r2, [pc, #324]	@ (8000804 <fillRect+0x278>)
 80006c0:	fba2 2303 	umull	r2, r3, r2, r3
 80006c4:	085b      	lsrs	r3, r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 80006c8:	2303      	movs	r3, #3
 80006ca:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	4a4e      	ldr	r2, [pc, #312]	@ (8000808 <fillRect+0x27c>)
 80006d0:	fba2 2303 	umull	r2, r3, r2, r3
 80006d4:	0bdb      	lsrs	r3, r3, #15
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	3301      	adds	r3, #1
 80006da:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 80006dc:	7cfb      	ldrb	r3, [r7, #19]
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
 80006e0:	e014      	b.n	800070c <fillRect+0x180>
			if(n%i == 0){
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80006ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006ec:	fb01 f202 	mul.w	r2, r1, r2
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d107      	bne.n	8000706 <fillRect+0x17a>
				cnt = i;
 80006f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f8:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 80006fa:	697a      	ldr	r2, [r7, #20]
 80006fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	61fb      	str	r3, [r7, #28]
				break;
 8000704:	e00a      	b.n	800071c <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 8000706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000708:	3301      	adds	r3, #1
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4a3d      	ldr	r2, [pc, #244]	@ (8000804 <fillRect+0x278>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	085b      	lsrs	r3, r3, #1
 8000716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000718:	429a      	cmp	r2, r3
 800071a:	d3e2      	bcc.n	80006e2 <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 800071c:	69f9      	ldr	r1, [r7, #28]
 800071e:	460b      	mov	r3, r1
 8000720:	3b01      	subs	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	2300      	movs	r3, #0
 8000726:	4688      	mov	r8, r1
 8000728:	4699      	mov	r9, r3
 800072a:	f04f 0200 	mov.w	r2, #0
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800073a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800073e:	2300      	movs	r3, #0
 8000740:	460c      	mov	r4, r1
 8000742:	461d      	mov	r5, r3
 8000744:	f04f 0200 	mov.w	r2, #0
 8000748:	f04f 0300 	mov.w	r3, #0
 800074c:	00eb      	lsls	r3, r5, #3
 800074e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000752:	00e2      	lsls	r2, r4, #3
 8000754:	1dcb      	adds	r3, r1, #7
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	ebad 0d03 	sub.w	sp, sp, r3
 800075e:	466b      	mov	r3, sp
 8000760:	3300      	adds	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
 8000768:	e019      	b.n	800079e <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 800076a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	7ef9      	ldrb	r1, [r7, #27]
 8000776:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8000778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800077a:	4613      	mov	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	3301      	adds	r3, #1
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	7eb9      	ldrb	r1, [r7, #26]
 8000786:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8000788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	3302      	adds	r3, #2
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	7e79      	ldrb	r1, [r7, #25]
 8000796:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8000798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079a:	3301      	adds	r3, #1
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4a18      	ldr	r2, [pc, #96]	@ (8000804 <fillRect+0x278>)
 80007a2:	fba2 2303 	umull	r2, r3, r2, r3
 80007a6:	085b      	lsrs	r3, r3, #1
 80007a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d3dd      	bcc.n	800076a <fillRect+0x1de>
	}
	DC_DATA();
 80007ae:	2201      	movs	r2, #1
 80007b0:	2140      	movs	r1, #64	@ 0x40
 80007b2:	4816      	ldr	r0, [pc, #88]	@ (800080c <fillRect+0x280>)
 80007b4:	f000 fe66 	bl	8001484 <HAL_GPIO_WritePin>
	CS_A();
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	4813      	ldr	r0, [pc, #76]	@ (800080c <fillRect+0x280>)
 80007be:	f000 fe61 	bl	8001484 <HAL_GPIO_WritePin>
		while(cnt>0)
 80007c2:	e00a      	b.n	80007da <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	4810      	ldr	r0, [pc, #64]	@ (8000810 <fillRect+0x284>)
 80007d0:	f001 fe77 	bl	80024c2 <HAL_SPI_Transmit>

			cnt -= 1;
 80007d4:	6a3b      	ldr	r3, [r7, #32]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 80007da:	6a3b      	ldr	r3, [r7, #32]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f1      	bne.n	80007c4 <fillRect+0x238>
		}
		CS_D();
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4809      	ldr	r0, [pc, #36]	@ (800080c <fillRect+0x280>)
 80007e6:	f000 fe4d 	bl	8001484 <HAL_GPIO_WritePin>
 80007ea:	46d5      	mov	sp, sl

}
 80007ec:	3728      	adds	r7, #40	@ 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f4:	20000028 	.word	0x20000028
 80007f8:	2000002a 	.word	0x2000002a
 80007fc:	84210843 	.word	0x84210843
 8000800:	82082083 	.word	0x82082083
 8000804:	aaaaaaab 	.word	0xaaaaaaab
 8000808:	80008001 	.word	0x80008001
 800080c:	48000c00 	.word	0x48000c00
 8000810:	2000002c 	.word	0x2000002c

08000814 <setRotation>:


void setRotation(uint8_t r)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 800081e:	2036      	movs	r0, #54	@ 0x36
 8000820:	f7ff fcec 	bl	80001fc <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 0303 	and.w	r3, r3, #3
 800082a:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d83a      	bhi.n	80008a8 <setRotation+0x94>
 8000832:	a201      	add	r2, pc, #4	@ (adr r2, 8000838 <setRotation+0x24>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	08000849 	.word	0x08000849
 800083c:	08000861 	.word	0x08000861
 8000840:	08000879 	.word	0x08000879
 8000844:	08000891 	.word	0x08000891
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 8000848:	2048      	movs	r0, #72	@ 0x48
 800084a:	f7ff fcfd 	bl	8000248 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <setRotation+0x9c>)
 8000850:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000854:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <setRotation+0xa0>)
 8000858:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800085c:	801a      	strh	r2, [r3, #0]
		break;
 800085e:	e023      	b.n	80008a8 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8000860:	2028      	movs	r0, #40	@ 0x28
 8000862:	f7ff fcf1 	bl	8000248 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <setRotation+0x9c>)
 8000868:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800086c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <setRotation+0xa0>)
 8000870:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000874:	801a      	strh	r2, [r3, #0]
		break;
 8000876:	e017      	b.n	80008a8 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 8000878:	2088      	movs	r0, #136	@ 0x88
 800087a:	f7ff fce5 	bl	8000248 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <setRotation+0x9c>)
 8000880:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000884:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <setRotation+0xa0>)
 8000888:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800088c:	801a      	strh	r2, [r3, #0]
		break;
 800088e:	e00b      	b.n	80008a8 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000890:	20e8      	movs	r0, #232	@ 0xe8
 8000892:	f7ff fcd9 	bl	8000248 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <setRotation+0x9c>)
 8000898:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800089c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 800089e:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <setRotation+0xa0>)
 80008a0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80008a4:	801a      	strh	r2, [r3, #0]
		break;
 80008a6:	bf00      	nop
	}

}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000028 	.word	0x20000028
 80008b4:	2000002a 	.word	0x2000002a

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fad0 	bl	8000e62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f936 	bl	8000b32 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f000 f9c3 	bl	8000c50 <MX_GPIO_Init>
  MX_SPI2_Init();
 80008ca:	f000 f983 	bl	8000bd4 <MX_SPI2_Init>
				ILI9488_SendData(0x07FF<<3);//BLUE
			}
		}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET); //LCD CHIP SELECT
*/
  ILI9488_Init();
 80008ce:	f7ff fd17 	bl	8000300 <ILI9488_Init>
HAL_Delay(1000);
 80008d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d6:	f000 fb39 	bl	8000f4c <HAL_Delay>
setRotation(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff ff9a 	bl	8000814 <setRotation>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//
	  fillScreen(ILI9488_NAVY);
 80008e0:	200f      	movs	r0, #15
 80008e2:	f7ff fe39 	bl	8000558 <fillScreen>
	  HAL_Delay(300);
 80008e6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008ea:	f000 fb2f 	bl	8000f4c <HAL_Delay>
	   	    	    fillScreen(ILI9488_BLUE);
 80008ee:	201f      	movs	r0, #31
 80008f0:	f7ff fe32 	bl	8000558 <fillScreen>
	   	   	  HAL_Delay(300);
 80008f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008f8:	f000 fb28 	bl	8000f4c <HAL_Delay>
	   	    	    fillScreen(ILI9488_DARKGREEN);
 80008fc:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 8000900:	f7ff fe2a 	bl	8000558 <fillScreen>
	   	   	  HAL_Delay(300);
 8000904:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000908:	f000 fb20 	bl	8000f4c <HAL_Delay>
	   	    	    fillScreen(ILI9488_MAROON);
 800090c:	f44f 40f0 	mov.w	r0, #30720	@ 0x7800
 8000910:	f7ff fe22 	bl	8000558 <fillScreen>
	   	   	  HAL_Delay(300);
 8000914:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000918:	f000 fb18 	bl	8000f4c <HAL_Delay>
	   	    	    fillScreen(ILI9488_PURPLE);
 800091c:	f647 000f 	movw	r0, #30735	@ 0x780f
 8000920:	f7ff fe1a 	bl	8000558 <fillScreen>
	   	   	  HAL_Delay(300);
 8000924:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000928:	f000 fb10 	bl	8000f4c <HAL_Delay>
	   	    	    fillScreen(ILI9488_OLIVE);
 800092c:	f647 30e0 	movw	r0, #31712	@ 0x7be0
 8000930:	f7ff fe12 	bl	8000558 <fillScreen>
	   	   	  HAL_Delay(300);
 8000934:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000938:	f000 fb08 	bl	8000f4c <HAL_Delay>
	   	    	    fillScreen(ILI9488_LIGHTGREY);
 800093c:	f24c 6018 	movw	r0, #50712	@ 0xc618
 8000940:	f7ff fe0a 	bl	8000558 <fillScreen>
	   	   	  HAL_Delay(300);
 8000944:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000948:	f000 fb00 	bl	8000f4c <HAL_Delay>
	   	    	    fillScreen(ILI9488_GREEN);
 800094c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000950:	f7ff fe02 	bl	8000558 <fillScreen>
	   	   	  HAL_Delay(300);
 8000954:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000958:	f000 faf8 	bl	8000f4c <HAL_Delay>
	   	    	  fillScreen(ILI9488_NAVY);
 800095c:	200f      	movs	r0, #15
 800095e:	f7ff fdfb 	bl	8000558 <fillScreen>
	   	 	  HAL_Delay(300);
 8000962:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000966:	f000 faf1 	bl	8000f4c <HAL_Delay>
	   	    	    	    fillScreen(ILI9488_BLUE);
 800096a:	201f      	movs	r0, #31
 800096c:	f7ff fdf4 	bl	8000558 <fillScreen>
	   	    	   	  HAL_Delay(300);
 8000970:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000974:	f000 faea 	bl	8000f4c <HAL_Delay>
	   	    	    	    fillScreen(ILI9488_DARKGREEN);
 8000978:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 800097c:	f7ff fdec 	bl	8000558 <fillScreen>
	   	    	   	  HAL_Delay(300);
 8000980:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000984:	f000 fae2 	bl	8000f4c <HAL_Delay>
	   	    	    	    fillScreen(ILI9488_MAROON);
 8000988:	f44f 40f0 	mov.w	r0, #30720	@ 0x7800
 800098c:	f7ff fde4 	bl	8000558 <fillScreen>
	   	    	   	  HAL_Delay(300);
 8000990:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000994:	f000 fada 	bl	8000f4c <HAL_Delay>
	   	    	    	    fillScreen(ILI9488_PURPLE);
 8000998:	f647 000f 	movw	r0, #30735	@ 0x780f
 800099c:	f7ff fddc 	bl	8000558 <fillScreen>
	   	    	   	  HAL_Delay(300);
 80009a0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009a4:	f000 fad2 	bl	8000f4c <HAL_Delay>
	   	    	    	    fillScreen(ILI9488_OLIVE);
 80009a8:	f647 30e0 	movw	r0, #31712	@ 0x7be0
 80009ac:	f7ff fdd4 	bl	8000558 <fillScreen>
	   	    	   	  HAL_Delay(300);
 80009b0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009b4:	f000 faca 	bl	8000f4c <HAL_Delay>
	   	    	    	    fillScreen(ILI9488_LIGHTGREY);
 80009b8:	f24c 6018 	movw	r0, #50712	@ 0xc618
 80009bc:	f7ff fdcc 	bl	8000558 <fillScreen>
	   	    	   	  HAL_Delay(300);
 80009c0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009c4:	f000 fac2 	bl	8000f4c <HAL_Delay>
	   	    	    	    fillScreen(ILI9488_GREEN);
 80009c8:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80009cc:	f7ff fdc4 	bl	8000558 <fillScreen>
	   	    	   	  HAL_Delay(300);
 80009d0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009d4:	f000 faba 	bl	8000f4c <HAL_Delay>
	   	    	    	  fillScreen(ILI9488_NAVY);
 80009d8:	200f      	movs	r0, #15
 80009da:	f7ff fdbd 	bl	8000558 <fillScreen>
	   	    	 	  HAL_Delay(300);
 80009de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009e2:	f000 fab3 	bl	8000f4c <HAL_Delay>
	   	    	    	    	    fillScreen(ILI9488_BLUE);
 80009e6:	201f      	movs	r0, #31
 80009e8:	f7ff fdb6 	bl	8000558 <fillScreen>
	   	    	    	   	  HAL_Delay(300);
 80009ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009f0:	f000 faac 	bl	8000f4c <HAL_Delay>
	   	    	    	    	    fillScreen(ILI9488_DARKGREEN);
 80009f4:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 80009f8:	f7ff fdae 	bl	8000558 <fillScreen>
	   	    	    	   	  HAL_Delay(300);
 80009fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a00:	f000 faa4 	bl	8000f4c <HAL_Delay>
	   	    	    	    	    fillScreen(ILI9488_MAROON);
 8000a04:	f44f 40f0 	mov.w	r0, #30720	@ 0x7800
 8000a08:	f7ff fda6 	bl	8000558 <fillScreen>
	   	    	    	   	  HAL_Delay(300);
 8000a0c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a10:	f000 fa9c 	bl	8000f4c <HAL_Delay>
	   	    	    	    	    fillScreen(ILI9488_PURPLE);
 8000a14:	f647 000f 	movw	r0, #30735	@ 0x780f
 8000a18:	f7ff fd9e 	bl	8000558 <fillScreen>
	   	    	    	   	  HAL_Delay(300);
 8000a1c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a20:	f000 fa94 	bl	8000f4c <HAL_Delay>
	   	    	    	    	    fillScreen(ILI9488_OLIVE);
 8000a24:	f647 30e0 	movw	r0, #31712	@ 0x7be0
 8000a28:	f7ff fd96 	bl	8000558 <fillScreen>
	   	    	    	   	  HAL_Delay(300);
 8000a2c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a30:	f000 fa8c 	bl	8000f4c <HAL_Delay>
	   	    	    	    	    fillScreen(ILI9488_LIGHTGREY);
 8000a34:	f24c 6018 	movw	r0, #50712	@ 0xc618
 8000a38:	f7ff fd8e 	bl	8000558 <fillScreen>
	   	    	    	   	  HAL_Delay(300);
 8000a3c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a40:	f000 fa84 	bl	8000f4c <HAL_Delay>
	   	    	    	    	    fillScreen(ILI9488_GREEN);
 8000a44:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000a48:	f7ff fd86 	bl	8000558 <fillScreen>
	   	    	    	   	  HAL_Delay(300);
 8000a4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a50:	f000 fa7c 	bl	8000f4c <HAL_Delay>
	   	    	    fillRect(0, 10, 480, 10, ILI9488_BLUE);
 8000a54:	231f      	movs	r3, #31
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	230a      	movs	r3, #10
 8000a5a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a5e:	210a      	movs	r1, #10
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fd93 	bl	800058c <fillRect>
	   	   	  HAL_Delay(300);
 8000a66:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a6a:	f000 fa6f 	bl	8000f4c <HAL_Delay>
	   	    	    fillRect(0, 40, 480, 10, ILI9488_DARKGREEN);
 8000a6e:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	230a      	movs	r3, #10
 8000a76:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a7a:	2128      	movs	r1, #40	@ 0x28
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fd85 	bl	800058c <fillRect>
	   	   	  HAL_Delay(300);
 8000a82:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a86:	f000 fa61 	bl	8000f4c <HAL_Delay>
	   	    	    fillRect(0, 60, 480, 10, ILI9488_MAROON);
 8000a8a:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	230a      	movs	r3, #10
 8000a92:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a96:	213c      	movs	r1, #60	@ 0x3c
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fd77 	bl	800058c <fillRect>
	   	   	  HAL_Delay(300);
 8000a9e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000aa2:	f000 fa53 	bl	8000f4c <HAL_Delay>
	   	    	    fillRect(0, 80, 480, 10, ILI9488_PURPLE);
 8000aa6:	f647 030f 	movw	r3, #30735	@ 0x780f
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	230a      	movs	r3, #10
 8000aae:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000ab2:	2150      	movs	r1, #80	@ 0x50
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fd69 	bl	800058c <fillRect>
	   	   	  HAL_Delay(300);
 8000aba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000abe:	f000 fa45 	bl	8000f4c <HAL_Delay>
	   	    	    fillRect(0, 100, 480, 10, ILI9488_OLIVE);
 8000ac2:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	230a      	movs	r3, #10
 8000aca:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000ace:	2164      	movs	r1, #100	@ 0x64
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fd5b 	bl	800058c <fillRect>
	   	   	  HAL_Delay(300);
 8000ad6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ada:	f000 fa37 	bl	8000f4c <HAL_Delay>
	   	    	    fillRect(0, 120, 480, 10, ILI9488_LIGHTGREY);
 8000ade:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000aea:	2178      	movs	r1, #120	@ 0x78
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff fd4d 	bl	800058c <fillRect>
	   	   	  HAL_Delay(300);
 8000af2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000af6:	f000 fa29 	bl	8000f4c <HAL_Delay>
	   	    	    fillRect(0, 140, 480, 10, ILI9488_BLUE);
 8000afa:	231f      	movs	r3, #31
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	230a      	movs	r3, #10
 8000b00:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000b04:	218c      	movs	r1, #140	@ 0x8c
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff fd40 	bl	800058c <fillRect>
	   	   	  HAL_Delay(300);
 8000b0c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b10:	f000 fa1c 	bl	8000f4c <HAL_Delay>
	   	    	    fillRect(460, 220, 20, 100, ILI9488_BLUE);
 8000b14:	231f      	movs	r3, #31
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2364      	movs	r3, #100	@ 0x64
 8000b1a:	2214      	movs	r2, #20
 8000b1c:	21dc      	movs	r1, #220	@ 0xdc
 8000b1e:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000b22:	f7ff fd33 	bl	800058c <fillRect>
	   	   	  HAL_Delay(300);
 8000b26:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b2a:	f000 fa0f 	bl	8000f4c <HAL_Delay>
	  fillScreen(ILI9488_NAVY);
 8000b2e:	bf00      	nop
 8000b30:	e6d6      	b.n	80008e0 <main+0x28>

08000b32 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b096      	sub	sp, #88	@ 0x58
 8000b36:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2244      	movs	r2, #68	@ 0x44
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 ff97 	bl	8002a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 fccd 	bl	80014f4 <HAL_PWREx_ControlVoltageScaling>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b60:	f000 f8a6 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b64:	2310      	movs	r3, #16
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b70:	2360      	movs	r3, #96	@ 0x60
 8000b72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b80:	233c      	movs	r3, #60	@ 0x3c
 8000b82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fd51 	bl	800163c <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ba0:	f000 f886 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2105      	movs	r1, #5
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 f957 	bl	8001e70 <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bc8:	f000 f872 	bl	8000cb0 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3758      	adds	r7, #88	@ 0x58
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	@ (8000c4c <MX_SPI2_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000be4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000bee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bf2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000c22:	2207      	movs	r2, #7
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_SPI2_Init+0x74>)
 8000c34:	f001 fba2 	bl	800237c <HAL_SPI_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f000 f837 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000002c 	.word	0x2000002c
 8000c4c:	40003800 	.word	0x40003800

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <MX_GPIO_Init+0x58>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca8 <MX_GPIO_Init+0x58>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <MX_GPIO_Init+0x58>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	21c1      	movs	r1, #193	@ 0xc1
 8000c80:	480a      	ldr	r0, [pc, #40]	@ (8000cac <MX_GPIO_Init+0x5c>)
 8000c82:	f000 fbff 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD0 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23c1      	movs	r3, #193	@ 0xc1
 8000c88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_GPIO_Init+0x5c>)
 8000c9c:	f000 fa60 	bl	8001160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	48000c00 	.word	0x48000c00

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <Error_Handler+0x8>

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_SPI_MspInit+0x7c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d127      	bne.n	8000d76 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2a:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000d56:	231a      	movs	r3, #26
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d66:	2305      	movs	r3, #5
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <HAL_SPI_MspInit+0x84>)
 8000d72:	f000 f9f5 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	@ 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40003800 	.word	0x40003800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000c00 	.word	0x48000c00

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <NMI_Handler+0x4>

08000d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <MemManage_Handler+0x4>

08000da4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f000 f893 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff ffea 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	@ (8000e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <LoopForever+0xe>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	@ (8000e5c <LoopForever+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f001 fe21 	bl	8002a84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e42:	f7ff fd39 	bl	80008b8 <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e48:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e54:	08002b2c 	.word	0x08002b2c
  ldr r2, =_sbss
 8000e58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e5c:	20000094 	.word	0x20000094

08000e60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_IRQHandler>

08000e62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f943 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f80e 	bl	8000e94 <HAL_InitTick>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	e001      	b.n	8000e88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e84:	f7ff ff1a 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e88:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <HAL_InitTick+0x6c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d023      	beq.n	8000ef0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <HAL_InitTick+0x70>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <HAL_InitTick+0x6c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f941 	bl	8001146 <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10f      	bne.n	8000eea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d809      	bhi.n	8000ee4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ed8:	f000 f919 	bl	800110e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000edc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <HAL_InitTick+0x74>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e007      	b.n	8000ef4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e004      	b.n	8000ef4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e001      	b.n	8000ef4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000090 	.word	0x20000090

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000090 	.word	0x20000090

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffde 	bl	8000f34 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	@ (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	@ (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	@ 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff47 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff5c 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff8e 	bl	800104c <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5d 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffb0 	bl	80010b4 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	e166      	b.n	800143e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8158 	beq.w	8001438 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d005      	beq.n	80011a0 <HAL_GPIO_Init+0x40>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d130      	bne.n	8001202 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d6:	2201      	movs	r2, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	f003 0201 	and.w	r2, r3, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b03      	cmp	r3, #3
 800120c:	d017      	beq.n	800123e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d123      	bne.n	8001292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	6939      	ldr	r1, [r7, #16]
 800128e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0203 	and.w	r2, r3, #3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80b2 	beq.w	8001438 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d4:	4b61      	ldr	r3, [pc, #388]	@ (800145c <HAL_GPIO_Init+0x2fc>)
 80012d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d8:	4a60      	ldr	r2, [pc, #384]	@ (800145c <HAL_GPIO_Init+0x2fc>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e0:	4b5e      	ldr	r3, [pc, #376]	@ (800145c <HAL_GPIO_Init+0x2fc>)
 80012e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001460 <HAL_GPIO_Init+0x300>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001316:	d02b      	beq.n	8001370 <HAL_GPIO_Init+0x210>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a52      	ldr	r2, [pc, #328]	@ (8001464 <HAL_GPIO_Init+0x304>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d025      	beq.n	800136c <HAL_GPIO_Init+0x20c>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a51      	ldr	r2, [pc, #324]	@ (8001468 <HAL_GPIO_Init+0x308>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d01f      	beq.n	8001368 <HAL_GPIO_Init+0x208>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a50      	ldr	r2, [pc, #320]	@ (800146c <HAL_GPIO_Init+0x30c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d019      	beq.n	8001364 <HAL_GPIO_Init+0x204>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a4f      	ldr	r2, [pc, #316]	@ (8001470 <HAL_GPIO_Init+0x310>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d013      	beq.n	8001360 <HAL_GPIO_Init+0x200>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a4e      	ldr	r2, [pc, #312]	@ (8001474 <HAL_GPIO_Init+0x314>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d00d      	beq.n	800135c <HAL_GPIO_Init+0x1fc>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a4d      	ldr	r2, [pc, #308]	@ (8001478 <HAL_GPIO_Init+0x318>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d007      	beq.n	8001358 <HAL_GPIO_Init+0x1f8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <HAL_GPIO_Init+0x31c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_GPIO_Init+0x1f4>
 8001350:	2307      	movs	r3, #7
 8001352:	e00e      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001354:	2308      	movs	r3, #8
 8001356:	e00c      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001358:	2306      	movs	r3, #6
 800135a:	e00a      	b.n	8001372 <HAL_GPIO_Init+0x212>
 800135c:	2305      	movs	r3, #5
 800135e:	e008      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001360:	2304      	movs	r3, #4
 8001362:	e006      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001364:	2303      	movs	r3, #3
 8001366:	e004      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001368:	2302      	movs	r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x212>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001370:	2300      	movs	r3, #0
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	f002 0203 	and.w	r2, r2, #3
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	4093      	lsls	r3, r2
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001382:	4937      	ldr	r1, [pc, #220]	@ (8001460 <HAL_GPIO_Init+0x300>)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001390:	4b3b      	ldr	r3, [pc, #236]	@ (8001480 <HAL_GPIO_Init+0x320>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b4:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <HAL_GPIO_Init+0x320>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ba:	4b31      	ldr	r3, [pc, #196]	@ (8001480 <HAL_GPIO_Init+0x320>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013de:	4a28      	ldr	r2, [pc, #160]	@ (8001480 <HAL_GPIO_Init+0x320>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013e4:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <HAL_GPIO_Init+0x320>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001408:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <HAL_GPIO_Init+0x320>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <HAL_GPIO_Init+0x320>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001432:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <HAL_GPIO_Init+0x320>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	f47f ae91 	bne.w	8001170 <HAL_GPIO_Init+0x10>
  }
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000
 8001464:	48000400 	.word	0x48000400
 8001468:	48000800 	.word	0x48000800
 800146c:	48000c00 	.word	0x48000c00
 8001470:	48001000 	.word	0x48001000
 8001474:	48001400 	.word	0x48001400
 8001478:	48001800 	.word	0x48001800
 800147c:	48001c00 	.word	0x48001c00
 8001480:	40010400 	.word	0x40010400

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b8:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c4:	d102      	bne.n	80014cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80014c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ca:	e00b      	b.n	80014e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80014ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014da:	d102      	bne.n	80014e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80014dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014e0:	e000      	b.n	80014e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80014e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40007000 	.word	0x40007000

080014f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d141      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001502:	4b4b      	ldr	r3, [pc, #300]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800150a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150e:	d131      	bne.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001510:	4b47      	ldr	r3, [pc, #284]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001516:	4a46      	ldr	r2, [pc, #280]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800151c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001520:	4b43      	ldr	r3, [pc, #268]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001528:	4a41      	ldr	r2, [pc, #260]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800152e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001530:	4b40      	ldr	r3, [pc, #256]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2232      	movs	r2, #50	@ 0x32
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	4a3f      	ldr	r2, [pc, #252]	@ (8001638 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	0c9b      	lsrs	r3, r3, #18
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001546:	e002      	b.n	800154e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3b01      	subs	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800154e:	4b38      	ldr	r3, [pc, #224]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800155a:	d102      	bne.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f2      	bne.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001562:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800156e:	d158      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e057      	b.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001574:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800157a:	4a2d      	ldr	r2, [pc, #180]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001580:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001584:	e04d      	b.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800158c:	d141      	bne.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800158e:	4b28      	ldr	r3, [pc, #160]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159a:	d131      	bne.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800159c:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015a2:	4a23      	ldr	r2, [pc, #140]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2232      	movs	r2, #50	@ 0x32
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	0c9b      	lsrs	r3, r3, #18
 80015ce:	3301      	adds	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d2:	e002      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015e6:	d102      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f2      	bne.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015fa:	d112      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e011      	b.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001610:	e007      	b.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001620:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40007000 	.word	0x40007000
 8001634:	20000000 	.word	0x20000000
 8001638:	431bde83 	.word	0x431bde83

0800163c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f000 bc08 	b.w	8001e60 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001650:	4b96      	ldr	r3, [pc, #600]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165a:	4b94      	ldr	r3, [pc, #592]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80e4 	beq.w	800183a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <HAL_RCC_OscConfig+0x4c>
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	f040 808b 	bne.w	8001796 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b01      	cmp	r3, #1
 8001684:	f040 8087 	bne.w	8001796 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001688:	4b88      	ldr	r3, [pc, #544]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x64>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e3df      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1a      	ldr	r2, [r3, #32]
 80016a4:	4b81      	ldr	r3, [pc, #516]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_RCC_OscConfig+0x7e>
 80016b0:	4b7e      	ldr	r3, [pc, #504]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016b8:	e005      	b.n	80016c6 <HAL_RCC_OscConfig+0x8a>
 80016ba:	4b7c      	ldr	r3, [pc, #496]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d223      	bcs.n	8001712 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fd94 	bl	80021fc <RCC_SetFlashLatencyFromMSIRange>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e3c0      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016de:	4b73      	ldr	r3, [pc, #460]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a72      	ldr	r2, [pc, #456]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b70      	ldr	r3, [pc, #448]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	496d      	ldr	r1, [pc, #436]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fc:	4b6b      	ldr	r3, [pc, #428]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	4968      	ldr	r1, [pc, #416]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e025      	b.n	800175e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001712:	4b66      	ldr	r3, [pc, #408]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a65      	ldr	r2, [pc, #404]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b63      	ldr	r3, [pc, #396]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4960      	ldr	r1, [pc, #384]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001730:	4b5e      	ldr	r3, [pc, #376]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	495b      	ldr	r1, [pc, #364]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fd54 	bl	80021fc <RCC_SetFlashLatencyFromMSIRange>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e380      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800175e:	f000 fcc1 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8001762:	4602      	mov	r2, r0
 8001764:	4b51      	ldr	r3, [pc, #324]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	4950      	ldr	r1, [pc, #320]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001770:	5ccb      	ldrb	r3, [r1, r3]
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	4a4e      	ldr	r2, [pc, #312]	@ (80018b4 <HAL_RCC_OscConfig+0x278>)
 800177c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800177e:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <HAL_RCC_OscConfig+0x27c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb86 	bl	8000e94 <HAL_InitTick>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d052      	beq.n	8001838 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	e364      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d032      	beq.n	8001804 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800179e:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a42      	ldr	r2, [pc, #264]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fbc3 	bl	8000f34 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b2:	f7ff fbbf 	bl	8000f34 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e34d      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c4:	4b39      	ldr	r3, [pc, #228]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d0:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a35      	ldr	r2, [pc, #212]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4930      	ldr	r1, [pc, #192]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ee:	4b2f      	ldr	r3, [pc, #188]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	492b      	ldr	r1, [pc, #172]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
 8001802:	e01a      	b.n	800183a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001804:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a28      	ldr	r2, [pc, #160]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001810:	f7ff fb90 	bl	8000f34 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001818:	f7ff fb8c 	bl	8000f34 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e31a      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x1dc>
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001838:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d073      	beq.n	800192e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b08      	cmp	r3, #8
 800184a:	d005      	beq.n	8001858 <HAL_RCC_OscConfig+0x21c>
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d10e      	bne.n	8001870 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d10b      	bne.n	8001870 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d063      	beq.n	800192c <HAL_RCC_OscConfig+0x2f0>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d15f      	bne.n	800192c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e2f7      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x24c>
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e025      	b.n	80018d4 <HAL_RCC_OscConfig+0x298>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001890:	d114      	bne.n	80018bc <HAL_RCC_OscConfig+0x280>
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a02      	ldr	r2, [pc, #8]	@ (80018ac <HAL_RCC_OscConfig+0x270>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e013      	b.n	80018d4 <HAL_RCC_OscConfig+0x298>
 80018ac:	40021000 	.word	0x40021000
 80018b0:	08002ae4 	.word	0x08002ae4
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004
 80018bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb2a 	bl	8000f34 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb26 	bl	8000f34 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	@ 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e2b4      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f6:	4b92      	ldr	r3, [pc, #584]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x2a8>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fb16 	bl	8000f34 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fb12 	bl	8000f34 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	@ 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e2a0      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191e:	4b88      	ldr	r3, [pc, #544]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x2d0>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d060      	beq.n	80019fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b04      	cmp	r3, #4
 800193e:	d005      	beq.n	800194c <HAL_RCC_OscConfig+0x310>
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d119      	bne.n	800197a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d116      	bne.n	800197a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_OscConfig+0x328>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e27d      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b76      	ldr	r3, [pc, #472]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	4973      	ldr	r1, [pc, #460]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001978:	e040      	b.n	80019fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d023      	beq.n	80019ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001982:	4b6f      	ldr	r3, [pc, #444]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6e      	ldr	r2, [pc, #440]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff fad1 	bl	8000f34 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff facd 	bl	8000f34 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e25b      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a8:	4b65      	ldr	r3, [pc, #404]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b62      	ldr	r3, [pc, #392]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	495f      	ldr	r1, [pc, #380]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
 80019c8:	e018      	b.n	80019fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80019d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff faad 	bl	8000f34 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff faa9 	bl	8000f34 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e237      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f0:	4b53      	ldr	r3, [pc, #332]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d03c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a10:	4b4b      	ldr	r3, [pc, #300]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a16:	4a4a      	ldr	r2, [pc, #296]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff fa88 	bl	8000f34 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fa84 	bl	8000f34 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e212      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3a:	4b41      	ldr	r3, [pc, #260]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ef      	beq.n	8001a28 <HAL_RCC_OscConfig+0x3ec>
 8001a48:	e01b      	b.n	8001a82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a50:	4a3b      	ldr	r2, [pc, #236]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fa6b 	bl	8000f34 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff fa67 	bl	8000f34 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1f5      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a74:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ef      	bne.n	8001a62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80a6 	beq.w	8001bdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a94:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10d      	bne.n	8001abc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa0:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa4:	4a26      	ldr	r2, [pc, #152]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aac:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abc:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <HAL_RCC_OscConfig+0x508>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d118      	bne.n	8001afa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <HAL_RCC_OscConfig+0x508>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b44 <HAL_RCC_OscConfig+0x508>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fa2e 	bl	8000f34 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001adc:	f7ff fa2a 	bl	8000f34 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1b8      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_RCC_OscConfig+0x508>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4d8>
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b08:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b12:	e029      	b.n	8001b68 <HAL_RCC_OscConfig+0x52c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d115      	bne.n	8001b48 <HAL_RCC_OscConfig+0x50c>
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b22:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b2c:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b32:	4a03      	ldr	r2, [pc, #12]	@ (8001b40 <HAL_RCC_OscConfig+0x504>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b3c:	e014      	b.n	8001b68 <HAL_RCC_OscConfig+0x52c>
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40007000 	.word	0x40007000
 8001b48:	4b9d      	ldr	r3, [pc, #628]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4e:	4a9c      	ldr	r2, [pc, #624]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b58:	4b99      	ldr	r3, [pc, #612]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b5e:	4a98      	ldr	r2, [pc, #608]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d016      	beq.n	8001b9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f9e0 	bl	8000f34 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f7ff f9dc 	bl	8000f34 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e168      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8e:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ed      	beq.n	8001b78 <HAL_RCC_OscConfig+0x53c>
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f9c9 	bl	8000f34 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff f9c5 	bl	8000f34 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e151      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bbc:	4b80      	ldr	r3, [pc, #512]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ed      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bca:	7ffb      	ldrb	r3, [r7, #31]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	4a7a      	ldr	r2, [pc, #488]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d03c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bf0:	4b73      	ldr	r3, [pc, #460]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bf6:	4a72      	ldr	r2, [pc, #456]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f998 	bl	8000f34 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c08:	f7ff f994 	bl	8000f34 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e122      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c1a:	4b69      	ldr	r3, [pc, #420]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ef      	beq.n	8001c08 <HAL_RCC_OscConfig+0x5cc>
 8001c28:	e01b      	b.n	8001c62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c2a:	4b65      	ldr	r3, [pc, #404]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c30:	4a63      	ldr	r2, [pc, #396]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f97b 	bl	8000f34 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c42:	f7ff f977 	bl	8000f34 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e105      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c54:	4b5a      	ldr	r3, [pc, #360]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ef      	bne.n	8001c42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80f9 	beq.w	8001e5e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	f040 80cf 	bne.w	8001e14 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c76:	4b52      	ldr	r3, [pc, #328]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0203 	and.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d12c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	3b01      	subs	r3, #1
 8001c96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d123      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d11b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d113      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d109      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d071      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d068      	beq.n	8001dbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cea:	4b35      	ldr	r3, [pc, #212]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cf6:	4b32      	ldr	r3, [pc, #200]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0ac      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d06:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001d0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d12:	f7ff f90f 	bl	8000f34 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7ff f90b 	bl	8000f34 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e099      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2c:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d38:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <HAL_RCC_OscConfig+0x788>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d52:	0212      	lsls	r2, r2, #8
 8001d54:	4311      	orrs	r1, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d5a:	0852      	lsrs	r2, r2, #1
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	0552      	lsls	r2, r2, #21
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d66:	0852      	lsrs	r2, r2, #1
 8001d68:	3a01      	subs	r2, #1
 8001d6a:	0652      	lsls	r2, r2, #25
 8001d6c:	4311      	orrs	r1, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d72:	06d2      	lsls	r2, r2, #27
 8001d74:	430a      	orrs	r2, r1
 8001d76:	4912      	ldr	r1, [pc, #72]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d88:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d94:	f7ff f8ce 	bl	8000f34 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f8ca 	bl	8000f34 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e058      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <HAL_RCC_OscConfig+0x784>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dba:	e050      	b.n	8001e5e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e04f      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc8:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d144      	bne.n	8001e5e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4a20      	ldr	r2, [pc, #128]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dec:	f7ff f8a2 	bl	8000f34 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff f89e 	bl	8000f34 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e02c      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x7b8>
 8001e12:	e024      	b.n	8001e5e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d01f      	beq.n	8001e5a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001e20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff f885 	bl	8000f34 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff f881 	bl	8000f34 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e00f      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4905      	ldr	r1, [pc, #20]	@ (8001e68 <HAL_RCC_OscConfig+0x82c>)
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_OscConfig+0x830>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
 8001e58:	e001      	b.n	8001e5e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	feeefffc 	.word	0xfeeefffc

08001e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e11d      	b.n	80020c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e88:	4b90      	ldr	r3, [pc, #576]	@ (80020cc <HAL_RCC_ClockConfig+0x25c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d910      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b8d      	ldr	r3, [pc, #564]	@ (80020cc <HAL_RCC_ClockConfig+0x25c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 020f 	bic.w	r2, r3, #15
 8001e9e:	498b      	ldr	r1, [pc, #556]	@ (80020cc <HAL_RCC_ClockConfig+0x25c>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b89      	ldr	r3, [pc, #548]	@ (80020cc <HAL_RCC_ClockConfig+0x25c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e105      	b.n	80020c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b81      	ldr	r3, [pc, #516]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d908      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	497b      	ldr	r1, [pc, #492]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d079      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d11e      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efa:	4b75      	ldr	r3, [pc, #468]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0dc      	b.n	80020c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001f0a:	f000 f9d1 	bl	80022b0 <RCC_GetSysClockFreqFromPLLSource>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a70      	ldr	r2, [pc, #448]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d946      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f16:	4b6e      	ldr	r3, [pc, #440]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d140      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f22:	4b6b      	ldr	r3, [pc, #428]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f2a:	4a69      	ldr	r2, [pc, #420]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e035      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f40:	4b63      	ldr	r3, [pc, #396]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d115      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b9      	b.n	80020c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f58:	4b5d      	ldr	r3, [pc, #372]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0ad      	b.n	80020c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f68:	4b59      	ldr	r3, [pc, #356]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0a5      	b.n	80020c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f78:	f000 f8b4 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4a55      	ldr	r2, [pc, #340]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d90f      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f84:	4b52      	ldr	r3, [pc, #328]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f90:	4b4f      	ldr	r3, [pc, #316]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f98:	4a4d      	ldr	r2, [pc, #308]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 0203 	bic.w	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4947      	ldr	r1, [pc, #284]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb6:	f7fe ffbd 	bl	8000f34 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbe:	f7fe ffb9 	bl	8000f34 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e077      	b.n	80020c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 020c 	and.w	r2, r3, #12
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d1eb      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b80      	cmp	r3, #128	@ 0x80
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fec:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a37      	ldr	r2, [pc, #220]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001ff2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ff6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d010      	beq.n	8002026 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4b31      	ldr	r3, [pc, #196]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002010:	429a      	cmp	r2, r3
 8002012:	d208      	bcs.n	8002026 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	492b      	ldr	r1, [pc, #172]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002026:	4b29      	ldr	r3, [pc, #164]	@ (80020cc <HAL_RCC_ClockConfig+0x25c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d210      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002034:	4b25      	ldr	r3, [pc, #148]	@ (80020cc <HAL_RCC_ClockConfig+0x25c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 020f 	bic.w	r2, r3, #15
 800203c:	4923      	ldr	r1, [pc, #140]	@ (80020cc <HAL_RCC_ClockConfig+0x25c>)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002044:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <HAL_RCC_ClockConfig+0x25c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e036      	b.n	80020c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002062:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	4918      	ldr	r1, [pc, #96]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4910      	ldr	r1, [pc, #64]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002094:	f000 f826 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8002098:	4602      	mov	r2, r0
 800209a:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	490c      	ldr	r1, [pc, #48]	@ (80020d8 <HAL_RCC_ClockConfig+0x268>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
 80020b0:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <HAL_RCC_ClockConfig+0x26c>)
 80020b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_RCC_ClockConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe feeb 	bl	8000e94 <HAL_InitTick>
 80020be:	4603      	mov	r3, r0
 80020c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	04c4b400 	.word	0x04c4b400
 80020d8:	08002ae4 	.word	0x08002ae4
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000004 	.word	0x20000004

080020e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	4b3e      	ldr	r3, [pc, #248]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fc:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x34>
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d121      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d11e      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002118:	4b34      	ldr	r3, [pc, #208]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002124:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e005      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002134:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002140:	4a2b      	ldr	r2, [pc, #172]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10d      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002154:	e00a      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d102      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800215c:	4b25      	ldr	r3, [pc, #148]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	e004      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d101      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002168:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800216a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d134      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002172:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0xa6>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d003      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0xac>
 8002188:	e005      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800218a:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800218c:	617b      	str	r3, [r7, #20]
      break;
 800218e:	e005      	b.n	800219c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002192:	617b      	str	r3, [r7, #20]
      break;
 8002194:	e002      	b.n	800219c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	617b      	str	r3, [r7, #20]
      break;
 800219a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3301      	adds	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c2:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	0e5b      	lsrs	r3, r3, #25
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	3301      	adds	r3, #1
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021dc:	69bb      	ldr	r3, [r7, #24]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08002af4 	.word	0x08002af4
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	007a1200 	.word	0x007a1200

080021fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002208:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002214:	f7ff f94e 	bl	80014b4 <HAL_PWREx_GetVoltageRange>
 8002218:	6178      	str	r0, [r7, #20]
 800221a:	e014      	b.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002220:	4a21      	ldr	r2, [pc, #132]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002226:	6593      	str	r3, [r2, #88]	@ 0x58
 8002228:	4b1f      	ldr	r3, [pc, #124]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002234:	f7ff f93e 	bl	80014b4 <HAL_PWREx_GetVoltageRange>
 8002238:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	4a1a      	ldr	r2, [pc, #104]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002244:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800224c:	d10b      	bne.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b80      	cmp	r3, #128	@ 0x80
 8002252:	d913      	bls.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2ba0      	cmp	r3, #160	@ 0xa0
 8002258:	d902      	bls.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800225a:	2302      	movs	r3, #2
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	e00d      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002260:	2301      	movs	r3, #1
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e00a      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b7f      	cmp	r3, #127	@ 0x7f
 800226a:	d902      	bls.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800226c:	2302      	movs	r3, #2
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e004      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b70      	cmp	r3, #112	@ 0x70
 8002276:	d101      	bne.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 020f 	bic.w	r2, r3, #15
 8002284:	4909      	ldr	r1, [pc, #36]	@ (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800228c:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40022000 	.word	0x40022000

080022b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b6:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d00b      	beq.n	80022de <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d825      	bhi.n	8002318 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d008      	beq.n	80022e4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d11f      	bne.n	8002318 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022da:	613b      	str	r3, [r7, #16]
    break;
 80022dc:	e01f      	b.n	800231e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80022de:	4b25      	ldr	r3, [pc, #148]	@ (8002374 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80022e0:	613b      	str	r3, [r7, #16]
    break;
 80022e2:	e01c      	b.n	800231e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022e4:	4b21      	ldr	r3, [pc, #132]	@ (800236c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022f0:	4b1e      	ldr	r3, [pc, #120]	@ (800236c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e005      	b.n	800230c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002300:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800230c:	4a1a      	ldr	r2, [pc, #104]	@ (8002378 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	613b      	str	r3, [r7, #16]
    break;
 8002316:	e002      	b.n	800231e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
    break;
 800231c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800231e:	4b13      	ldr	r3, [pc, #76]	@ (800236c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	3301      	adds	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800232c:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	fb03 f202 	mul.w	r2, r3, r2
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0e5b      	lsrs	r3, r3, #25
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	3301      	adds	r3, #1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800235e:	683b      	ldr	r3, [r7, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	371c      	adds	r7, #28
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40021000 	.word	0x40021000
 8002370:	00f42400 	.word	0x00f42400
 8002374:	007a1200 	.word	0x007a1200
 8002378:	08002af4 	.word	0x08002af4

0800237c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e095      	b.n	80024ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d108      	bne.n	80023a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800239e:	d009      	beq.n	80023b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
 80023a6:	e005      	b.n	80023b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fc98 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023f4:	d902      	bls.n	80023fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	e002      	b.n	8002402 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002400:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800240a:	d007      	beq.n	800241c <HAL_SPI_Init+0xa0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002414:	d002      	beq.n	800241c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245e:	ea42 0103 	orr.w	r1, r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002466:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	f003 0204 	and.w	r2, r3, #4
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002498:	ea42 0103 	orr.w	r1, r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b088      	sub	sp, #32
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_SPI_Transmit+0x22>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e15f      	b.n	80027a4 <HAL_SPI_Transmit+0x2e2>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ec:	f7fe fd22 	bl	8000f34 <HAL_GetTick>
 80024f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d002      	beq.n	8002508 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002506:	e148      	b.n	800279a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_SPI_Transmit+0x52>
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002518:	e13f      	b.n	800279a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2203      	movs	r2, #3
 800251e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002564:	d10f      	bne.n	8002586 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002574:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002584:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d007      	beq.n	80025a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025ac:	d94f      	bls.n	800264e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_SPI_Transmit+0xfa>
 80025b6:	8afb      	ldrh	r3, [r7, #22]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d142      	bne.n	8002642 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025cc:	1c9a      	adds	r2, r3, #2
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025e0:	e02f      	b.n	8002642 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d112      	bne.n	8002616 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002614:	e015      	b.n	8002642 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002616:	f7fe fc8d 	bl	8000f34 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d803      	bhi.n	800262e <HAL_SPI_Transmit+0x16c>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800262c:	d102      	bne.n	8002634 <HAL_SPI_Transmit+0x172>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002640:	e0ab      	b.n	800279a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ca      	bne.n	80025e2 <HAL_SPI_Transmit+0x120>
 800264c:	e080      	b.n	8002750 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_SPI_Transmit+0x19a>
 8002656:	8afb      	ldrh	r3, [r7, #22]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d174      	bne.n	8002746 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d912      	bls.n	800268c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266a:	881a      	ldrh	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002676:	1c9a      	adds	r2, r3, #2
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b02      	subs	r3, #2
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800268a:	e05c      	b.n	8002746 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	330c      	adds	r3, #12
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80026b2:	e048      	b.n	8002746 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d12b      	bne.n	800271a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d912      	bls.n	80026f2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026dc:	1c9a      	adds	r2, r3, #2
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b02      	subs	r3, #2
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026f0:	e029      	b.n	8002746 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002718:	e015      	b.n	8002746 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800271a:	f7fe fc0b 	bl	8000f34 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d803      	bhi.n	8002732 <HAL_SPI_Transmit+0x270>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002730:	d102      	bne.n	8002738 <HAL_SPI_Transmit+0x276>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002744:	e029      	b.n	800279a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1b1      	bne.n	80026b4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	6839      	ldr	r1, [r7, #0]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f947 	bl	80029e8 <SPI_EndRxTxTransaction>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	77fb      	strb	r3, [r7, #31]
 8002790:	e003      	b.n	800279a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80027a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027bc:	f7fe fbba 	bl	8000f34 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	4413      	add	r3, r2
 80027ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027cc:	f7fe fbb2 	bl	8000f34 <HAL_GetTick>
 80027d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027d2:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	015b      	lsls	r3, r3, #5
 80027d8:	0d1b      	lsrs	r3, r3, #20
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027e2:	e054      	b.n	800288e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027ea:	d050      	beq.n	800288e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027ec:	f7fe fba2 	bl	8000f34 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d902      	bls.n	8002802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d13d      	bne.n	800287e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800281a:	d111      	bne.n	8002840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002824:	d004      	beq.n	8002830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282e:	d107      	bne.n	8002840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800283e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002848:	d10f      	bne.n	800286a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e017      	b.n	80028ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3b01      	subs	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d19b      	bne.n	80027e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000000 	.word	0x20000000

080028bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	@ 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80028ce:	f7fe fb31 	bl	8000f34 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80028de:	f7fe fb29 	bl	8000f34 <HAL_GetTick>
 80028e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028ec:	4b3d      	ldr	r3, [pc, #244]	@ (80029e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00da      	lsls	r2, r3, #3
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	0d1b      	lsrs	r3, r3, #20
 80028fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002904:	e060      	b.n	80029c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800290c:	d107      	bne.n	800291e <SPI_WaitFifoStateUntilTimeout+0x62>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800291c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002924:	d050      	beq.n	80029c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002926:	f7fe fb05 	bl	8000f34 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002932:	429a      	cmp	r2, r3
 8002934:	d902      	bls.n	800293c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	2b00      	cmp	r3, #0
 800293a:	d13d      	bne.n	80029b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800294a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002954:	d111      	bne.n	800297a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800295e:	d004      	beq.n	800296a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002968:	d107      	bne.n	800297a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002978:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002982:	d10f      	bne.n	80029a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e010      	b.n	80029da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d196      	bne.n	8002906 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3728      	adds	r7, #40	@ 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000

080029e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff ff5b 	bl	80028bc <SPI_WaitFifoStateUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e027      	b.n	8002a6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	2180      	movs	r1, #128	@ 0x80
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff fec0 	bl	80027ac <SPI_WaitFlagStateUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e014      	b.n	8002a6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7ff ff34 	bl	80028bc <SPI_WaitFifoStateUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5e:	f043 0220 	orr.w	r2, r3, #32
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e000      	b.n	8002a6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <memset>:
 8002a74:	4402      	add	r2, r0
 8002a76:	4603      	mov	r3, r0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <memset+0xa>
 8002a7c:	4770      	bx	lr
 8002a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a82:	e7f9      	b.n	8002a78 <memset+0x4>

08002a84 <__libc_init_array>:
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	4d0d      	ldr	r5, [pc, #52]	@ (8002abc <__libc_init_array+0x38>)
 8002a88:	4c0d      	ldr	r4, [pc, #52]	@ (8002ac0 <__libc_init_array+0x3c>)
 8002a8a:	1b64      	subs	r4, r4, r5
 8002a8c:	10a4      	asrs	r4, r4, #2
 8002a8e:	2600      	movs	r6, #0
 8002a90:	42a6      	cmp	r6, r4
 8002a92:	d109      	bne.n	8002aa8 <__libc_init_array+0x24>
 8002a94:	4d0b      	ldr	r5, [pc, #44]	@ (8002ac4 <__libc_init_array+0x40>)
 8002a96:	4c0c      	ldr	r4, [pc, #48]	@ (8002ac8 <__libc_init_array+0x44>)
 8002a98:	f000 f818 	bl	8002acc <_init>
 8002a9c:	1b64      	subs	r4, r4, r5
 8002a9e:	10a4      	asrs	r4, r4, #2
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	42a6      	cmp	r6, r4
 8002aa4:	d105      	bne.n	8002ab2 <__libc_init_array+0x2e>
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
 8002aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aac:	4798      	blx	r3
 8002aae:	3601      	adds	r6, #1
 8002ab0:	e7ee      	b.n	8002a90 <__libc_init_array+0xc>
 8002ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab6:	4798      	blx	r3
 8002ab8:	3601      	adds	r6, #1
 8002aba:	e7f2      	b.n	8002aa2 <__libc_init_array+0x1e>
 8002abc:	08002b24 	.word	0x08002b24
 8002ac0:	08002b24 	.word	0x08002b24
 8002ac4:	08002b24 	.word	0x08002b24
 8002ac8:	08002b28 	.word	0x08002b28

08002acc <_init>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr

08002ad8 <_fini>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	bf00      	nop
 8002adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ade:	bc08      	pop	{r3}
 8002ae0:	469e      	mov	lr, r3
 8002ae2:	4770      	bx	lr
