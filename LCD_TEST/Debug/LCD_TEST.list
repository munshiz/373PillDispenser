
LCD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a94  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c0  080051c0  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080051c0  080051c0  000061c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051c8  080051c8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c8  080051c8  000061c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051cc  080051cc  000061cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000010  080051e0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080051e0  00007140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7e6  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe2  00000000  00000000  00016826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00018808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ca  00000000  00000000  000194a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1ce  00000000  00000000  00019e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fabc  00000000  00000000  00044040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100369  00000000  00000000  00053afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153e65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003440  00000000  00000000  00153ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001572e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004c38 	.word	0x08004c38

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08004c38 	.word	0x08004c38

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 80004fa:	2200      	movs	r2, #0
 80004fc:	2140      	movs	r1, #64	@ 0x40
 80004fe:	480c      	ldr	r0, [pc, #48]	@ (8000530 <ILI9488_SendCommand+0x44>)
 8000500:	f001 fb66 	bl	8001bd0 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000504:	2200      	movs	r2, #0
 8000506:	2101      	movs	r1, #1
 8000508:	4809      	ldr	r0, [pc, #36]	@ (8000530 <ILI9488_SendCommand+0x44>)
 800050a:	f001 fb61 	bl	8001bd0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800050e:	f107 010f 	add.w	r1, r7, #15
 8000512:	2301      	movs	r3, #1
 8000514:	2201      	movs	r2, #1
 8000516:	4807      	ldr	r0, [pc, #28]	@ (8000534 <ILI9488_SendCommand+0x48>)
 8000518:	f003 f8c9 	bl	80036ae <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 800051c:	2201      	movs	r2, #1
 800051e:	2101      	movs	r1, #1
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <ILI9488_SendCommand+0x44>)
 8000522:	f001 fb55 	bl	8001bd0 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	48000c00 	.word	0x48000c00
 8000534:	20000044 	.word	0x20000044

08000538 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 8000546:	2201      	movs	r2, #1
 8000548:	2140      	movs	r1, #64	@ 0x40
 800054a:	480c      	ldr	r0, [pc, #48]	@ (800057c <ILI9488_SendData+0x44>)
 800054c:	f001 fb40 	bl	8001bd0 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000550:	2200      	movs	r2, #0
 8000552:	2101      	movs	r1, #1
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <ILI9488_SendData+0x44>)
 8000556:	f001 fb3b 	bl	8001bd0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi2, &tmpCmd, 1, 1);
 800055a:	f107 010f 	add.w	r1, r7, #15
 800055e:	2301      	movs	r3, #1
 8000560:	2201      	movs	r2, #1
 8000562:	4807      	ldr	r0, [pc, #28]	@ (8000580 <ILI9488_SendData+0x48>)
 8000564:	f003 f8a3 	bl	80036ae <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000568:	2201      	movs	r2, #1
 800056a:	2101      	movs	r1, #1
 800056c:	4803      	ldr	r0, [pc, #12]	@ (800057c <ILI9488_SendData+0x44>)
 800056e:	f001 fb2f 	bl	8001bd0 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	48000c00 	.word	0x48000c00
 8000580:	20000044 	.word	0x20000044

08000584 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	DC_DATA();
 800058e:	2201      	movs	r2, #1
 8000590:	2140      	movs	r1, #64	@ 0x40
 8000592:	4815      	ldr	r0, [pc, #84]	@ (80005e8 <ILI9488_SendData_Multi+0x64>)
 8000594:	f001 fb1c 	bl	8001bd0 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4812      	ldr	r0, [pc, #72]	@ (80005e8 <ILI9488_SendData_Multi+0x64>)
 800059e:	f001 fb17 	bl	8001bd0 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 80005a2:	e015      	b.n	80005d0 <ILI9488_SendData_Multi+0x4c>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005aa:	bf28      	it	cs
 80005ac:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80005b0:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80005b2:	89fa      	ldrh	r2, [r7, #14]
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	480c      	ldr	r0, [pc, #48]	@ (80005ec <ILI9488_SendData_Multi+0x68>)
 80005bc:	f003 f877 	bl	80036ae <HAL_SPI_Transmit>
		buff += chunk_size;
 80005c0:	89fb      	ldrh	r3, [r7, #14]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80005c8:	89fb      	ldrh	r3, [r7, #14]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1e6      	bne.n	80005a4 <ILI9488_SendData_Multi+0x20>
	}
	CS_D();
 80005d6:	2201      	movs	r2, #1
 80005d8:	2101      	movs	r1, #1
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <ILI9488_SendData_Multi+0x64>)
 80005dc:	f001 faf8 	bl	8001bd0 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	48000c00 	.word	0x48000c00
 80005ec:	20000044 	.word	0x20000044

080005f0 <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 80005f4:	2201      	movs	r2, #1
 80005f6:	2101      	movs	r1, #1
 80005f8:	486c      	ldr	r0, [pc, #432]	@ (80007ac <ILI9488_Init+0x1bc>)
 80005fa:	f001 fae9 	bl	8001bd0 <HAL_GPIO_WritePin>
	RST_A();
 80005fe:	2200      	movs	r2, #0
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	486a      	ldr	r0, [pc, #424]	@ (80007ac <ILI9488_Init+0x1bc>)
 8000604:	f001 fae4 	bl	8001bd0 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8000608:	200a      	movs	r0, #10
 800060a:	f001 f845 	bl	8001698 <HAL_Delay>
		 RST_D();
 800060e:	2201      	movs	r2, #1
 8000610:	2180      	movs	r1, #128	@ 0x80
 8000612:	4866      	ldr	r0, [pc, #408]	@ (80007ac <ILI9488_Init+0x1bc>)
 8000614:	f001 fadc 	bl	8001bd0 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 8000618:	4b65      	ldr	r3, [pc, #404]	@ (80007b0 <ILI9488_Init+0x1c0>)
 800061a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800061e:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 8000620:	4b64      	ldr	r3, [pc, #400]	@ (80007b4 <ILI9488_Init+0x1c4>)
 8000622:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000626:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 8000628:	20e0      	movs	r0, #224	@ 0xe0
 800062a:	f7ff ff5f 	bl	80004ec <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ff82 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 8000634:	2003      	movs	r0, #3
 8000636:	f7ff ff7f 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 800063a:	2009      	movs	r0, #9
 800063c:	f7ff ff7c 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000640:	2008      	movs	r0, #8
 8000642:	f7ff ff79 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000646:	2016      	movs	r0, #22
 8000648:	f7ff ff76 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800064c:	200a      	movs	r0, #10
 800064e:	f7ff ff73 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 8000652:	203f      	movs	r0, #63	@ 0x3f
 8000654:	f7ff ff70 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8000658:	2078      	movs	r0, #120	@ 0x78
 800065a:	f7ff ff6d 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 800065e:	204c      	movs	r0, #76	@ 0x4c
 8000660:	f7ff ff6a 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000664:	2009      	movs	r0, #9
 8000666:	f7ff ff67 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800066a:	200a      	movs	r0, #10
 800066c:	f7ff ff64 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000670:	2008      	movs	r0, #8
 8000672:	f7ff ff61 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000676:	2016      	movs	r0, #22
 8000678:	f7ff ff5e 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 800067c:	201a      	movs	r0, #26
 800067e:	f7ff ff5b 	bl	8000538 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 8000682:	200f      	movs	r0, #15
 8000684:	f7ff ff58 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 8000688:	20e1      	movs	r0, #225	@ 0xe1
 800068a:	f7ff ff2f 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff ff52 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 8000694:	2016      	movs	r0, #22
 8000696:	f7ff ff4f 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 800069a:	2019      	movs	r0, #25
 800069c:	f7ff ff4c 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f7ff ff49 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f7ff ff46 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 80006ac:	2005      	movs	r0, #5
 80006ae:	f7ff ff43 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 80006b2:	2032      	movs	r0, #50	@ 0x32
 80006b4:	f7ff ff40 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 80006b8:	2045      	movs	r0, #69	@ 0x45
 80006ba:	f7ff ff3d 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 80006be:	2046      	movs	r0, #70	@ 0x46
 80006c0:	f7ff ff3a 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 80006c4:	2004      	movs	r0, #4
 80006c6:	f7ff ff37 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 80006ca:	200e      	movs	r0, #14
 80006cc:	f7ff ff34 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 80006d0:	200d      	movs	r0, #13
 80006d2:	f7ff ff31 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 80006d6:	2035      	movs	r0, #53	@ 0x35
 80006d8:	f7ff ff2e 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 80006dc:	2037      	movs	r0, #55	@ 0x37
 80006de:	f7ff ff2b 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80006e2:	200f      	movs	r0, #15
 80006e4:	f7ff ff28 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 80006e8:	20c0      	movs	r0, #192	@ 0xc0
 80006ea:	f7ff feff 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 80006ee:	2017      	movs	r0, #23
 80006f0:	f7ff ff22 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 80006f4:	2015      	movs	r0, #21
 80006f6:	f7ff ff1f 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 80006fa:	20c1      	movs	r0, #193	@ 0xc1
 80006fc:	f7ff fef6 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 8000700:	2041      	movs	r0, #65	@ 0x41
 8000702:	f7ff ff19 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 8000706:	20c5      	movs	r0, #197	@ 0xc5
 8000708:	f7ff fef0 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ff13 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 8000712:	2012      	movs	r0, #18
 8000714:	f7ff ff10 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 8000718:	2080      	movs	r0, #128	@ 0x80
 800071a:	f7ff ff0d 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 800071e:	2036      	movs	r0, #54	@ 0x36
 8000720:	f7ff fee4 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 8000724:	2048      	movs	r0, #72	@ 0x48
 8000726:	f7ff ff07 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 800072a:	203a      	movs	r0, #58	@ 0x3a
 800072c:	f7ff fede 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 8000730:	2066      	movs	r0, #102	@ 0x66
 8000732:	f7ff ff01 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 8000736:	20b0      	movs	r0, #176	@ 0xb0
 8000738:	f7ff fed8 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 800073c:	2080      	movs	r0, #128	@ 0x80
 800073e:	f7ff fefb 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 8000742:	20b1      	movs	r0, #177	@ 0xb1
 8000744:	f7ff fed2 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 8000748:	20a0      	movs	r0, #160	@ 0xa0
 800074a:	f7ff fef5 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 800074e:	20b4      	movs	r0, #180	@ 0xb4
 8000750:	f7ff fecc 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000754:	2002      	movs	r0, #2
 8000756:	f7ff feef 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 800075a:	20b6      	movs	r0, #182	@ 0xb6
 800075c:	f7ff fec6 	bl	80004ec <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000760:	2002      	movs	r0, #2
 8000762:	f7ff fee9 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 8000766:	2002      	movs	r0, #2
 8000768:	f7ff fee6 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 800076c:	20e9      	movs	r0, #233	@ 0xe9
 800076e:	f7ff febd 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fee0 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 8000778:	20f7      	movs	r0, #247	@ 0xf7
 800077a:	f7ff feb7 	bl	80004ec <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 800077e:	20a9      	movs	r0, #169	@ 0xa9
 8000780:	f7ff feda 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 8000784:	2051      	movs	r0, #81	@ 0x51
 8000786:	f7ff fed7 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 800078a:	202c      	movs	r0, #44	@ 0x2c
 800078c:	f7ff fed4 	bl	8000538 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 8000790:	2082      	movs	r0, #130	@ 0x82
 8000792:	f7ff fed1 	bl	8000538 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 8000796:	2011      	movs	r0, #17
 8000798:	f7ff fea8 	bl	80004ec <ILI9488_SendCommand>

	 	HAL_Delay(120);
 800079c:	2078      	movs	r0, #120	@ 0x78
 800079e:	f000 ff7b 	bl	8001698 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 80007a2:	2029      	movs	r0, #41	@ 0x29
 80007a4:	f7ff fea2 	bl	80004ec <ILI9488_SendCommand>

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	48000c00 	.word	0x48000c00
 80007b0:	2000003e 	.word	0x2000003e
 80007b4:	20000040 	.word	0x20000040

080007b8 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4604      	mov	r4, r0
 80007c0:	4608      	mov	r0, r1
 80007c2:	4611      	mov	r1, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	4623      	mov	r3, r4
 80007c8:	80fb      	strh	r3, [r7, #6]
 80007ca:	4603      	mov	r3, r0
 80007cc:	80bb      	strh	r3, [r7, #4]
 80007ce:	460b      	mov	r3, r1
 80007d0:	807b      	strh	r3, [r7, #2]
 80007d2:	4613      	mov	r3, r2
 80007d4:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 80007d6:	202a      	movs	r0, #42	@ 0x2a
 80007d8:	f7ff fe88 	bl	80004ec <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	0a1b      	lsrs	r3, r3, #8
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	733b      	strb	r3, [r7, #12]
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	737b      	strb	r3, [r7, #13]
 80007ec:	887b      	ldrh	r3, [r7, #2]
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	73bb      	strb	r3, [r7, #14]
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2104      	movs	r1, #4
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff febe 	bl	8000584 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8000808:	202b      	movs	r0, #43	@ 0x2b
 800080a:	f7ff fe6f 	bl	80004ec <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	723b      	strb	r3, [r7, #8]
 8000818:	88bb      	ldrh	r3, [r7, #4]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	727b      	strb	r3, [r7, #9]
 800081e:	883b      	ldrh	r3, [r7, #0]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	b2db      	uxtb	r3, r3
 8000826:	72bb      	strb	r3, [r7, #10]
 8000828:	883b      	ldrh	r3, [r7, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	2104      	movs	r1, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fea5 	bl	8000584 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 800083a:	202c      	movs	r0, #44	@ 0x2c
 800083c:	f7ff fe56 	bl	80004ec <ILI9488_SendCommand>
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bd90      	pop	{r4, r7, pc}

08000848 <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
 8000852:	460b      	mov	r3, r1
 8000854:	80bb      	strh	r3, [r7, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 800085a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db36      	blt.n	80008d0 <drawPixel+0x88>
 8000862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000866:	4a1c      	ldr	r2, [pc, #112]	@ (80008d8 <drawPixel+0x90>)
 8000868:	8812      	ldrh	r2, [r2, #0]
 800086a:	4293      	cmp	r3, r2
 800086c:	da30      	bge.n	80008d0 <drawPixel+0x88>
 800086e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db2c      	blt.n	80008d0 <drawPixel+0x88>
 8000876:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800087a:	4a18      	ldr	r2, [pc, #96]	@ (80008dc <drawPixel+0x94>)
 800087c:	8812      	ldrh	r2, [r2, #0]
 800087e:	4293      	cmp	r3, r2
 8000880:	da26      	bge.n	80008d0 <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 8000882:	88f8      	ldrh	r0, [r7, #6]
 8000884:	88b9      	ldrh	r1, [r7, #4]
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	3301      	adds	r3, #1
 800088a:	b29a      	uxth	r2, r3
 800088c:	88bb      	ldrh	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	b29b      	uxth	r3, r3
 8000892:	f7ff ff91 	bl	80007b8 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <drawPixel+0x98>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <drawPixel+0x9c>)
 800089c:	8811      	ldrh	r1, [r2, #0]
 800089e:	2201      	movs	r2, #1
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 f995 	bl	8001bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <drawPixel+0xa0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <drawPixel+0xa4>)
 80008ac:	8811      	ldrh	r1, [r2, #0]
 80008ae:	2200      	movs	r2, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 f98d 	bl	8001bd0 <HAL_GPIO_WritePin>

	write16BitColor(color);
 80008b6:	887b      	ldrh	r3, [r7, #2]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fb79 	bl	8000fb0 <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <drawPixel+0xa0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <drawPixel+0xa4>)
 80008c4:	8811      	ldrh	r1, [r2, #0]
 80008c6:	2201      	movs	r2, #1
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 f981 	bl	8001bd0 <HAL_GPIO_WritePin>
 80008ce:	e000      	b.n	80008d2 <drawPixel+0x8a>
		return;
 80008d0:	bf00      	nop

}
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000003e 	.word	0x2000003e
 80008dc:	20000040 	.word	0x20000040
 80008e0:	20000038 	.word	0x20000038
 80008e4:	2000003c 	.word	0x2000003c
 80008e8:	20000030 	.word	0x20000030
 80008ec:	20000034 	.word	0x20000034

080008f0 <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <fillScreen+0x2c>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b21a      	sxth	r2, r3
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <fillScreen+0x30>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	b219      	sxth	r1, r3
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	460b      	mov	r3, r1
 800090c:	2100      	movs	r1, #0
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f808 	bl	8000924 <fillRect>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000003e 	.word	0x2000003e
 8000920:	20000040 	.word	0x20000040

08000924 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000928:	b08a      	sub	sp, #40	@ 0x28
 800092a:	af00      	add	r7, sp, #0
 800092c:	4606      	mov	r6, r0
 800092e:	4608      	mov	r0, r1
 8000930:	4611      	mov	r1, r2
 8000932:	461a      	mov	r2, r3
 8000934:	4633      	mov	r3, r6
 8000936:	80fb      	strh	r3, [r7, #6]
 8000938:	4603      	mov	r3, r0
 800093a:	80bb      	strh	r3, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	807b      	strh	r3, [r7, #2]
 8000940:	4613      	mov	r3, r2
 8000942:	803b      	strh	r3, [r7, #0]
 8000944:	466b      	mov	r3, sp
 8000946:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094c:	4a8f      	ldr	r2, [pc, #572]	@ (8000b8c <fillRect+0x268>)
 800094e:	8812      	ldrh	r2, [r2, #0]
 8000950:	4293      	cmp	r3, r2
 8000952:	da05      	bge.n	8000960 <fillRect+0x3c>
 8000954:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000958:	4a8d      	ldr	r2, [pc, #564]	@ (8000b90 <fillRect+0x26c>)
 800095a:	8812      	ldrh	r2, [r2, #0]
 800095c:	4293      	cmp	r3, r2
 800095e:	db01      	blt.n	8000964 <fillRect+0x40>
		return;
 8000960:	46d5      	mov	sp, sl
 8000962:	e10f      	b.n	8000b84 <fillRect+0x260>
	if ((x + w - 1) >= width)
 8000964:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000968:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800096c:	4413      	add	r3, r2
 800096e:	4a87      	ldr	r2, [pc, #540]	@ (8000b8c <fillRect+0x268>)
 8000970:	8812      	ldrh	r2, [r2, #0]
 8000972:	4293      	cmp	r3, r2
 8000974:	dd05      	ble.n	8000982 <fillRect+0x5e>
		w = width - x;
 8000976:	4b85      	ldr	r3, [pc, #532]	@ (8000b8c <fillRect+0x268>)
 8000978:	881a      	ldrh	r2, [r3, #0]
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b29b      	uxth	r3, r3
 8000980:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 8000982:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000986:	f9b7 3000 	ldrsh.w	r3, [r7]
 800098a:	4413      	add	r3, r2
 800098c:	4a80      	ldr	r2, [pc, #512]	@ (8000b90 <fillRect+0x26c>)
 800098e:	8812      	ldrh	r2, [r2, #0]
 8000990:	4293      	cmp	r3, r2
 8000992:	dd05      	ble.n	80009a0 <fillRect+0x7c>
		h = height - y;
 8000994:	4b7e      	ldr	r3, [pc, #504]	@ (8000b90 <fillRect+0x26c>)
 8000996:	881a      	ldrh	r2, [r3, #0]
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	b29b      	uxth	r3, r3
 800099e:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80009a0:	88f8      	ldrh	r0, [r7, #6]
 80009a2:	88b9      	ldrh	r1, [r7, #4]
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	887b      	ldrh	r3, [r7, #2]
 80009a8:	4413      	add	r3, r2
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	3b01      	subs	r3, #1
 80009ae:	b29e      	uxth	r6, r3
 80009b0:	88ba      	ldrh	r2, [r7, #4]
 80009b2:	883b      	ldrh	r3, [r7, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	4632      	mov	r2, r6
 80009be:	f7ff fefb 	bl	80007b8 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 80009c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80009c6:	0adb      	lsrs	r3, r3, #11
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 80009cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80009d0:	115b      	asrs	r3, r3, #5
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009d8:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 80009da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	f003 031f 	and.w	r3, r3, #31
 80009e4:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 80009e6:	7efa      	ldrb	r2, [r7, #27]
 80009e8:	4613      	mov	r3, r2
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	1a9b      	subs	r3, r3, r2
 80009ee:	4a69      	ldr	r2, [pc, #420]	@ (8000b94 <fillRect+0x270>)
 80009f0:	fb82 1203 	smull	r1, r2, r2, r3
 80009f4:	441a      	add	r2, r3
 80009f6:	1112      	asrs	r2, r2, #4
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 80009fe:	7eba      	ldrb	r2, [r7, #26]
 8000a00:	4613      	mov	r3, r2
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	4a64      	ldr	r2, [pc, #400]	@ (8000b98 <fillRect+0x274>)
 8000a08:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0c:	441a      	add	r2, r3
 8000a0e:	1152      	asrs	r2, r2, #5
 8000a10:	17db      	asrs	r3, r3, #31
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8000a16:	7e7a      	ldrb	r2, [r7, #25]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	4a5d      	ldr	r2, [pc, #372]	@ (8000b94 <fillRect+0x270>)
 8000a20:	fb82 1203 	smull	r1, r2, r2, r3
 8000a24:	441a      	add	r2, r3
 8000a26:	1112      	asrs	r2, r2, #4
 8000a28:	17db      	asrs	r3, r3, #31
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 8000a2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a32:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a36:	fb03 f202 	mul.w	r2, r3, r2
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a48:	d204      	bcs.n	8000a54 <fillRect+0x130>
		cnt = 1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
		buf_size = n;
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	61fb      	str	r3, [r7, #28]
 8000a52:	e02f      	b.n	8000ab4 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	4a51      	ldr	r2, [pc, #324]	@ (8000b9c <fillRect+0x278>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	085b      	lsrs	r3, r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 8000a60:	2303      	movs	r3, #3
 8000a62:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	4a4e      	ldr	r2, [pc, #312]	@ (8000ba0 <fillRect+0x27c>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	0bdb      	lsrs	r3, r3, #15
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	3301      	adds	r3, #1
 8000a72:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8000a74:	7cfb      	ldrb	r3, [r7, #19]
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a78:	e014      	b.n	8000aa4 <fillRect+0x180>
			if(n%i == 0){
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a84:	fb01 f202 	mul.w	r2, r1, r2
 8000a88:	1a9b      	subs	r3, r3, r2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d107      	bne.n	8000a9e <fillRect+0x17a>
				cnt = i;
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a90:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	61fb      	str	r3, [r7, #28]
				break;
 8000a9c:	e00a      	b.n	8000ab4 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8000b9c <fillRect+0x278>)
 8000aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d3e2      	bcc.n	8000a7a <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 8000ab4:	69f9      	ldr	r1, [r7, #28]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	2300      	movs	r3, #0
 8000abe:	4688      	mov	r8, r1
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	460c      	mov	r4, r1
 8000ada:	461d      	mov	r5, r3
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	00eb      	lsls	r3, r5, #3
 8000ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000aea:	00e2      	lsls	r2, r4, #3
 8000aec:	1dcb      	adds	r3, r1, #7
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	ebad 0d03 	sub.w	sp, sp, r3
 8000af6:	466b      	mov	r3, sp
 8000af8:	3300      	adds	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b00:	e019      	b.n	8000b36 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 8000b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	7ef9      	ldrb	r1, [r7, #27]
 8000b0e:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8000b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	3301      	adds	r3, #1
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	7eb9      	ldrb	r1, [r7, #26]
 8000b1e:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8000b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	3302      	adds	r3, #2
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	7e79      	ldrb	r1, [r7, #25]
 8000b2e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8000b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b32:	3301      	adds	r3, #1
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	4a18      	ldr	r2, [pc, #96]	@ (8000b9c <fillRect+0x278>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	085b      	lsrs	r3, r3, #1
 8000b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3dd      	bcc.n	8000b02 <fillRect+0x1de>
	}
	DC_DATA();
 8000b46:	2201      	movs	r2, #1
 8000b48:	2140      	movs	r1, #64	@ 0x40
 8000b4a:	4816      	ldr	r0, [pc, #88]	@ (8000ba4 <fillRect+0x280>)
 8000b4c:	f001 f840 	bl	8001bd0 <HAL_GPIO_WritePin>
	CS_A();
 8000b50:	2200      	movs	r2, #0
 8000b52:	2101      	movs	r1, #1
 8000b54:	4813      	ldr	r0, [pc, #76]	@ (8000ba4 <fillRect+0x280>)
 8000b56:	f001 f83b 	bl	8001bd0 <HAL_GPIO_WritePin>
		while(cnt>0)
 8000b5a:	e00a      	b.n	8000b72 <fillRect+0x24e>
		{
			HAL_SPI_Transmit(&hspi2, frm_buf, buf_size, HAL_MAX_DELAY);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	4810      	ldr	r0, [pc, #64]	@ (8000ba8 <fillRect+0x284>)
 8000b68:	f002 fda1 	bl	80036ae <HAL_SPI_Transmit>

			cnt -= 1;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1f1      	bne.n	8000b5c <fillRect+0x238>
		}
		CS_D();
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <fillRect+0x280>)
 8000b7e:	f001 f827 	bl	8001bd0 <HAL_GPIO_WritePin>
 8000b82:	46d5      	mov	sp, sl

}
 8000b84:	3728      	adds	r7, #40	@ 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8c:	2000003e 	.word	0x2000003e
 8000b90:	20000040 	.word	0x20000040
 8000b94:	84210843 	.word	0x84210843
 8000b98:	82082083 	.word	0x82082083
 8000b9c:	aaaaaaab 	.word	0xaaaaaaab
 8000ba0:	80008001 	.word	0x80008001
 8000ba4:	48000c00 	.word	0x48000c00
 8000ba8:	20000044 	.word	0x20000044

08000bac <setRotation>:


void setRotation(uint8_t r)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 8000bb6:	2036      	movs	r0, #54	@ 0x36
 8000bb8:	f7ff fc98 	bl	80004ec <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d83a      	bhi.n	8000c40 <setRotation+0x94>
 8000bca:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd0 <setRotation+0x24>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000be1 	.word	0x08000be1
 8000bd4:	08000bf9 	.word	0x08000bf9
 8000bd8:	08000c11 	.word	0x08000c11
 8000bdc:	08000c29 	.word	0x08000c29
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 8000be0:	2048      	movs	r0, #72	@ 0x48
 8000be2:	f7ff fca9 	bl	8000538 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <setRotation+0x9c>)
 8000be8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bec:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <setRotation+0xa0>)
 8000bf0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000bf4:	801a      	strh	r2, [r3, #0]
		break;
 8000bf6:	e023      	b.n	8000c40 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8000bf8:	2028      	movs	r0, #40	@ 0x28
 8000bfa:	f7ff fc9d 	bl	8000538 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <setRotation+0x9c>)
 8000c00:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000c04:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <setRotation+0xa0>)
 8000c08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c0c:	801a      	strh	r2, [r3, #0]
		break;
 8000c0e:	e017      	b.n	8000c40 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 8000c10:	2088      	movs	r0, #136	@ 0x88
 8000c12:	f7ff fc91 	bl	8000538 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <setRotation+0x9c>)
 8000c18:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c1c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <setRotation+0xa0>)
 8000c20:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000c24:	801a      	strh	r2, [r3, #0]
		break;
 8000c26:	e00b      	b.n	8000c40 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000c28:	20e8      	movs	r0, #232	@ 0xe8
 8000c2a:	f7ff fc85 	bl	8000538 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <setRotation+0x9c>)
 8000c30:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000c34:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <setRotation+0xa0>)
 8000c38:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c3c:	801a      	strh	r2, [r3, #0]
		break;
 8000c3e:	bf00      	nop
	}

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000003e 	.word	0x2000003e
 8000c4c:	20000040 	.word	0x20000040

08000c50 <drawChar>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

//11. Text printing functions
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4604      	mov	r4, r0
 8000c58:	4608      	mov	r0, r1
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4623      	mov	r3, r4
 8000c60:	80fb      	strh	r3, [r7, #6]
 8000c62:	4603      	mov	r3, r0
 8000c64:	80bb      	strh	r3, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	70fb      	strb	r3, [r7, #3]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000c6e:	4bac      	ldr	r3, [pc, #688]	@ (8000f20 <drawChar+0x2d0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d003      	beq.n	8000c7e <drawChar+0x2e>
 8000c76:	4baa      	ldr	r3, [pc, #680]	@ (8000f20 <drawChar+0x2d0>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d120      	bne.n	8000cc0 <drawChar+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c82:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000c86:	f280 8144 	bge.w	8000f12 <drawChar+0x2c2>
 8000c8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c8e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000c92:	f280 813e 	bge.w	8000f12 <drawChar+0x2c2>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000c96:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c9a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f340 8132 	ble.w	8000f12 <drawChar+0x2c2>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000cae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	dc22      	bgt.n	8000d04 <drawChar+0xb4>
    return;
 8000cbe:	e128      	b.n	8000f12 <drawChar+0x2c2>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8000cc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cc4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000cc8:	f280 8125 	bge.w	8000f16 <drawChar+0x2c6>
 8000ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000cd4:	f280 811f 	bge.w	8000f16 <drawChar+0x2c6>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000cd8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cdc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f340 8113 	ble.w	8000f16 <drawChar+0x2c6>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000cf0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cf4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f340 810a 	ble.w	8000f16 <drawChar+0x2c6>
 8000d02:	e000      	b.n	8000d06 <drawChar+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000d04:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000d06:	4b87      	ldr	r3, [pc, #540]	@ (8000f24 <drawChar+0x2d4>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <drawChar+0xd0>
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2baf      	cmp	r3, #175	@ 0xaf
 8000d18:	d902      	bls.n	8000d20 <drawChar+0xd0>
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e0ef      	b.n	8000f06 <drawChar+0x2b6>
    uint8_t line;
    if (i == 5)
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d102      	bne.n	8000d34 <drawChar+0xe4>
      line = 0x0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73bb      	strb	r3, [r7, #14]
 8000d32:	e00b      	b.n	8000d4c <drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a78      	ldr	r2, [pc, #480]	@ (8000f28 <drawChar+0x2d8>)
 8000d46:	4413      	add	r3, r2
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	737b      	strb	r3, [r7, #13]
 8000d50:	e0ce      	b.n	8000ef0 <drawChar+0x2a0>
      if (line & 0x1) {
 8000d52:	7bbb      	ldrb	r3, [r7, #14]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d05e      	beq.n	8000e1a <drawChar+0x1ca>
        if (size == 1) // default size
 8000d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d112      	bne.n	8000d8a <drawChar+0x13a>
        	drawPixel(x+i, y+j, color);
 8000d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b218      	sxth	r0, r3
 8000d72:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	883a      	ldrh	r2, [r7, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	f7ff fd60 	bl	8000848 <drawPixel>
 8000d88:	e0a9      	b.n	8000ede <drawChar+0x28e>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	fb12 f303 	smulbb	r3, r2, r3
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	4413      	add	r3, r2
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	b218      	sxth	r0, r3
 8000da4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	fb12 f303 	smulbb	r3, r2, r3
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	88bb      	ldrh	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	b21c      	sxth	r4, r3
 8000dbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	b299      	uxth	r1, r3
 8000dd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	fb11 f303 	smulbb	r3, r1, r3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4413      	add	r3, r2
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	b21d      	sxth	r5, r3
 8000de2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	88bb      	ldrh	r3, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000df2:	b299      	uxth	r1, r3
 8000df4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	fb11 f303 	smulbb	r3, r1, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3301      	adds	r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	883b      	ldrh	r3, [r7, #0]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	462a      	mov	r2, r5
 8000e12:	4621      	mov	r1, r4
 8000e14:	f7ff fd86 	bl	8000924 <fillRect>
 8000e18:	e061      	b.n	8000ede <drawChar+0x28e>
        }
      } else if (bg != color) {
 8000e1a:	8c3a      	ldrh	r2, [r7, #32]
 8000e1c:	883b      	ldrh	r3, [r7, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d05d      	beq.n	8000ede <drawChar+0x28e>
        if (size == 1) // default size
 8000e22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d112      	bne.n	8000e50 <drawChar+0x200>
        	drawPixel(x+i, y+j, bg);
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	4413      	add	r3, r2
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b218      	sxth	r0, r3
 8000e38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	8c3a      	ldrh	r2, [r7, #32]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fcfd 	bl	8000848 <drawPixel>
 8000e4e:	e046      	b.n	8000ede <drawChar+0x28e>
        else {  // big size
        	fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	fb12 f303 	smulbb	r3, r2, r3
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b218      	sxth	r0, r3
 8000e6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	fb12 f303 	smulbb	r3, r2, r3
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	88bb      	ldrh	r3, [r7, #4]
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	b21c      	sxth	r4, r3
 8000e84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e94:	b299      	uxth	r1, r3
 8000e96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	fb11 f303 	smulbb	r3, r1, r3
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b21d      	sxth	r5, r3
 8000ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	fb11 f303 	smulbb	r3, r1, r3
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	8c3b      	ldrh	r3, [r7, #32]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	462a      	mov	r2, r5
 8000ed8:	4621      	mov	r1, r4
 8000eda:	f7ff fd23 	bl	8000924 <fillRect>
        }
      }
      line >>= 1;
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	085b      	lsrs	r3, r3, #1
 8000ee2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000ee4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	737b      	strb	r3, [r7, #13]
 8000ef0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef4:	2b07      	cmp	r3, #7
 8000ef6:	f77f af2c 	ble.w	8000d52 <drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	2b05      	cmp	r3, #5
 8000f0c:	f77f af0b 	ble.w	8000d26 <drawChar+0xd6>
 8000f10:	e002      	b.n	8000f18 <drawChar+0x2c8>
    return;
 8000f12:	bf00      	nop
 8000f14:	e000      	b.n	8000f18 <drawChar+0x2c8>
    return;
 8000f16:	bf00      	nop
    }
  }
}
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000
 8000f24:	2000002c 	.word	0x2000002c
 8000f28:	08004c50 	.word	0x08004c50

08000f2c <ILI9488_printText>:
void ILI9488_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	4608      	mov	r0, r1
 8000f36:	4611      	mov	r1, r2
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	817b      	strh	r3, [r7, #10]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	813b      	strh	r3, [r7, #8]
 8000f42:	4613      	mov	r3, r2
 8000f44:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000f46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	0052      	lsls	r2, r2, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	82fb      	strh	r3, [r7, #22]
 8000f5c:	e01a      	b.n	8000f94 <ILI9488_printText+0x68>
	{
		drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000f5e:	8abb      	ldrh	r3, [r7, #20]
 8000f60:	8afa      	ldrh	r2, [r7, #22]
 8000f62:	fb12 f303 	smulbb	r3, r2, r3
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	897b      	ldrh	r3, [r7, #10]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	b218      	sxth	r0, r3
 8000f70:	8afb      	ldrh	r3, [r7, #22]
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4413      	add	r3, r2
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	88fc      	ldrh	r4, [r7, #6]
 8000f7a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000f7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	4623      	mov	r3, r4
 8000f8a:	f7ff fe61 	bl	8000c50 <drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000f8e:	8afb      	ldrh	r3, [r7, #22]
 8000f90:	3301      	adds	r3, #1
 8000f92:	82fb      	strh	r3, [r7, #22]
 8000f94:	8afb      	ldrh	r3, [r7, #22]
 8000f96:	2b27      	cmp	r3, #39	@ 0x27
 8000f98:	d805      	bhi.n	8000fa6 <ILI9488_printText+0x7a>
 8000f9a:	8afb      	ldrh	r3, [r7, #22]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1db      	bne.n	8000f5e <ILI9488_printText+0x32>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}
	...

08000fb0 <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	0adb      	lsrs	r3, r3, #11
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	115b      	asrs	r3, r3, #5
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fcc:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <write16BitColor+0x90>)
 8000fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe6:	441a      	add	r2, r3
 8000fe8:	1112      	asrs	r2, r2, #4
 8000fea:	17db      	asrs	r3, r3, #31
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8000ff0:	7bba      	ldrb	r2, [r7, #14]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <write16BitColor+0x94>)
 8000ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffe:	441a      	add	r2, r3
 8001000:	1152      	asrs	r2, r2, #5
 8001002:	17db      	asrs	r3, r3, #31
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8001008:	7b7a      	ldrb	r2, [r7, #13]
 800100a:	4613      	mov	r3, r2
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <write16BitColor+0x90>)
 8001012:	fb82 1203 	smull	r1, r2, r2, r3
 8001016:	441a      	add	r2, r3
 8001018:	1112      	asrs	r2, r2, #4
 800101a:	17db      	asrs	r3, r3, #31
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	723b      	strb	r3, [r7, #8]
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	727b      	strb	r3, [r7, #9]
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	2103      	movs	r1, #3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff faa6 	bl	8000584 <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&b, 1, 10);

}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	84210843 	.word	0x84210843
 8001044:	82082083 	.word	0x82082083

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 faae 	bl	80015ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f839 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f000 f913 	bl	8001280 <MX_GPIO_Init>
  MX_SPI2_Init();
 800105a:	f000 f887 	bl	800116c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800105e:	f000 f8c3 	bl	80011e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

ILI9488_Init();
 8001062:	f7ff fac5 	bl	80005f0 <ILI9488_Init>
HAL_Delay(1000);
 8001066:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800106a:	f000 fb15 	bl	8001698 <HAL_Delay>
setRotation(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fd9c 	bl	8000bac <setRotation>

char timereq [2] = {0x10, 0x01};
 8001074:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001078:	82bb      	strh	r3, [r7, #20]
char buffer [20];



  /* USER CODE END 2 */
fillScreen(ILI9488_WHITE);
 800107a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800107e:	f7ff fc37 	bl	80008f0 <fillScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//
	  HAL_UART_Transmit(&huart2, timereq, 2, 100);
 8001082:	f107 0114 	add.w	r1, r7, #20
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	2202      	movs	r2, #2
 800108a:	480e      	ldr	r0, [pc, #56]	@ (80010c4 <main+0x7c>)
 800108c:	f002 fe38 	bl	8003d00 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart2, buffer, 19, 100);
 8001090:	4639      	mov	r1, r7
 8001092:	2364      	movs	r3, #100	@ 0x64
 8001094:	2213      	movs	r2, #19
 8001096:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <main+0x7c>)
 8001098:	f002 fec0 	bl	8003e1c <HAL_UART_Receive>
	  buffer[19] = '\0';
 800109c:	2300      	movs	r3, #0
 800109e:	74fb      	strb	r3, [r7, #19]
	  ILI9488_printText(buffer, 10, 10, ILI9488_BLACK, ILI9488_WHITE, 2);
 80010a0:	4638      	mov	r0, r7
 80010a2:	2302      	movs	r3, #2
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	220a      	movs	r2, #10
 80010b0:	210a      	movs	r1, #10
 80010b2:	f7ff ff3b 	bl	8000f2c <ILI9488_printText>

	  HAL_Delay(30000);
 80010b6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80010ba:	f000 faed 	bl	8001698 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, timereq, 2, 100);
 80010be:	bf00      	nop
 80010c0:	e7df      	b.n	8001082 <main+0x3a>
 80010c2:	bf00      	nop
 80010c4:	200000a8 	.word	0x200000a8

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b096      	sub	sp, #88	@ 0x58
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	2244      	movs	r2, #68	@ 0x44
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fd82 	bl	8004be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 fda8 	bl	8001c40 <HAL_PWREx_ControlVoltageScaling>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010f6:	f000 f901 	bl	80012fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010fa:	2310      	movs	r3, #16
 80010fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010fe:	2301      	movs	r3, #1
 8001100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001106:	2360      	movs	r3, #96	@ 0x60
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800110e:	2301      	movs	r3, #1
 8001110:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001116:	233c      	movs	r3, #60	@ 0x3c
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800111e:	2302      	movs	r3, #2
 8001120:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fe2c 	bl	8001d88 <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001136:	f000 f8e1 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	230f      	movs	r3, #15
 800113c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113e:	2303      	movs	r3, #3
 8001140:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	2105      	movs	r1, #5
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fa32 	bl	80025bc <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800115e:	f000 f8cd 	bl	80012fc <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	3758      	adds	r7, #88	@ 0x58
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_SPI2_Init+0x74>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <MX_SPI2_Init+0x78>)
 8001174:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_SPI2_Init+0x74>)
 8001178:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800117c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_SPI2_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_SPI2_Init+0x74>)
 8001186:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800118a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_SPI2_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <MX_SPI2_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_SPI2_Init+0x74>)
 800119a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800119e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_SPI2_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_SPI2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_SPI2_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_SPI2_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_SPI2_Init+0x74>)
 80011ba:	2207      	movs	r2, #7
 80011bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_SPI2_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_SPI2_Init+0x74>)
 80011c6:	2208      	movs	r2, #8
 80011c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_SPI2_Init+0x74>)
 80011cc:	f002 f9cc 	bl	8003568 <HAL_SPI_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 f891 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000044 	.word	0x20000044
 80011e4:	40003800 	.word	0x40003800

080011e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 80011ee:	4a23      	ldr	r2, [pc, #140]	@ (800127c <MX_USART2_UART_Init+0x94>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001230:	4811      	ldr	r0, [pc, #68]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 8001232:	f002 fd15 	bl	8003c60 <HAL_UART_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800123c:	f000 f85e 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001240:	2100      	movs	r1, #0
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 8001244:	f003 fc02 	bl	8004a4c <HAL_UARTEx_SetTxFifoThreshold>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800124e:	f000 f855 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4808      	ldr	r0, [pc, #32]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 8001256:	f003 fc37 	bl	8004ac8 <HAL_UARTEx_SetRxFifoThreshold>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001260:	f000 f84c 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	@ (8001278 <MX_USART2_UART_Init+0x90>)
 8001266:	f003 fbb8 	bl	80049da <HAL_UARTEx_DisableFifoMode>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001270:	f000 f844 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200000a8 	.word	0x200000a8
 800127c:	40004400 	.word	0x40004400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_GPIO_Init+0x74>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <MX_GPIO_Init+0x74>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_GPIO_Init+0x74>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_GPIO_Init+0x74>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <MX_GPIO_Init+0x74>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <MX_GPIO_Init+0x74>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	21c1      	movs	r1, #193	@ 0xc1
 80012ca:	480b      	ldr	r0, [pc, #44]	@ (80012f8 <MX_GPIO_Init+0x78>)
 80012cc:	f000 fc80 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD0 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80012d0:	23c1      	movs	r3, #193	@ 0xc1
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	4804      	ldr	r0, [pc, #16]	@ (80012f8 <MX_GPIO_Init+0x78>)
 80012e8:	f000 fae0 	bl	80018ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000c00 	.word	0x48000c00

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6613      	str	r3, [r2, #96]	@ 0x60
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x44>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x44>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	6593      	str	r3, [r2, #88]	@ 0x58
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x44>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_SPI_MspInit+0x7c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d127      	bne.n	80013c2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	4a16      	ldr	r2, [pc, #88]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137c:	6593      	str	r3, [r2, #88]	@ 0x58
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	4a10      	ldr	r2, [pc, #64]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80013a2:	231a      	movs	r3, #26
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013b2:	2305      	movs	r3, #5
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <HAL_SPI_MspInit+0x84>)
 80013be:	f000 fa75 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	@ 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40003800 	.word	0x40003800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000c00 	.word	0x48000c00

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0b0      	sub	sp, #192	@ 0xc0
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	2294      	movs	r2, #148	@ 0x94
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fbf1 	bl	8004be0 <memset>
  if(huart->Instance==USART2)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a32      	ldr	r2, [pc, #200]	@ (80014cc <HAL_UART_MspInit+0xf4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d15c      	bne.n	80014c2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4618      	mov	r0, r3
 8001416:	f001 fb8f 	bl	8002b38 <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001420:	f7ff ff6c 	bl	80012fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001424:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <HAL_UART_MspInit+0xf8>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	4a29      	ldr	r2, [pc, #164]	@ (80014d0 <HAL_UART_MspInit+0xf8>)
 800142a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001430:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <HAL_UART_MspInit+0xf8>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <HAL_UART_MspInit+0xf8>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	4a23      	ldr	r2, [pc, #140]	@ (80014d0 <HAL_UART_MspInit+0xf8>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001448:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <HAL_UART_MspInit+0xf8>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001454:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <HAL_UART_MspInit+0xf8>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <HAL_UART_MspInit+0xf8>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_UART_MspInit+0xf8>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800146c:	2308      	movs	r3, #8
 800146e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001484:	2307      	movs	r3, #7
 8001486:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001494:	f000 fa0a 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001498:	2320      	movs	r3, #32
 800149a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b0:	2307      	movs	r3, #7
 80014b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <HAL_UART_MspInit+0xfc>)
 80014be:	f000 f9f5 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	37c0      	adds	r7, #192	@ 0xc0
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40004400 	.word	0x40004400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	48000c00 	.word	0x48000c00

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <NMI_Handler+0x4>

080014e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <MemManage_Handler+0x4>

080014f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <UsageFault_Handler+0x4>

08001500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f893 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001594 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001560:	f7ff ffea 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	@ (8001598 <LoopForever+0x6>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	@ (800159c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <LoopForever+0xe>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	@ (80015a8 <LoopForever+0x16>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f003 fb31 	bl	8004bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800158e:	f7ff fd5b 	bl	8001048 <main>

08001592 <LoopForever>:

LoopForever:
    b LoopForever
 8001592:	e7fe      	b.n	8001592 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001594:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015a0:	080051d0 	.word	0x080051d0
  ldr r2, =_sbss
 80015a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015a8:	20000140 	.word	0x20000140

080015ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_IRQHandler>

080015ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f943 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f80e 	bl	80015e0 <HAL_InitTick>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	e001      	b.n	80015d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015d0:	f7ff fe9a 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <HAL_InitTick+0x6c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d023      	beq.n	800163c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <HAL_InitTick+0x70>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <HAL_InitTick+0x6c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f941 	bl	8001892 <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10f      	bne.n	8001636 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d809      	bhi.n	8001630 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001624:	f000 f919 	bl	800185a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001628:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_InitTick+0x74>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e007      	b.n	8001640 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e004      	b.n	8001640 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e001      	b.n	8001640 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000000c 	.word	0x2000000c
 8001650:	20000004 	.word	0x20000004
 8001654:	20000008 	.word	0x20000008

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2000000c 	.word	0x2000000c
 800167c:	2000013c 	.word	0x2000013c

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	2000013c 	.word	0x2000013c

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	@ (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	@ (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff47 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff5c 	bl	8001728 <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffb0 	bl	8001800 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	e166      	b.n	8001b8a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8158 	beq.w	8001b84 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d005      	beq.n	80018ec <HAL_GPIO_Init+0x40>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d130      	bne.n	800194e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001922:	2201      	movs	r2, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	f003 0201 	and.w	r2, r3, #1
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b03      	cmp	r3, #3
 8001958:	d017      	beq.n	800198a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d123      	bne.n	80019de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	6939      	ldr	r1, [r7, #16]
 80019da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0203 	and.w	r2, r3, #3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80b2 	beq.w	8001b84 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a20:	4b61      	ldr	r3, [pc, #388]	@ (8001ba8 <HAL_GPIO_Init+0x2fc>)
 8001a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a24:	4a60      	ldr	r2, [pc, #384]	@ (8001ba8 <HAL_GPIO_Init+0x2fc>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba8 <HAL_GPIO_Init+0x2fc>)
 8001a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a38:	4a5c      	ldr	r2, [pc, #368]	@ (8001bac <HAL_GPIO_Init+0x300>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	220f      	movs	r2, #15
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a62:	d02b      	beq.n	8001abc <HAL_GPIO_Init+0x210>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a52      	ldr	r2, [pc, #328]	@ (8001bb0 <HAL_GPIO_Init+0x304>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d025      	beq.n	8001ab8 <HAL_GPIO_Init+0x20c>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a51      	ldr	r2, [pc, #324]	@ (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d01f      	beq.n	8001ab4 <HAL_GPIO_Init+0x208>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a50      	ldr	r2, [pc, #320]	@ (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d019      	beq.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a4f      	ldr	r2, [pc, #316]	@ (8001bbc <HAL_GPIO_Init+0x310>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <HAL_GPIO_Init+0x200>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a4e      	ldr	r2, [pc, #312]	@ (8001bc0 <HAL_GPIO_Init+0x314>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_GPIO_Init+0x1fc>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a4d      	ldr	r2, [pc, #308]	@ (8001bc4 <HAL_GPIO_Init+0x318>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x1f8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a4c      	ldr	r2, [pc, #304]	@ (8001bc8 <HAL_GPIO_Init+0x31c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_GPIO_Init+0x1f4>
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	e00e      	b.n	8001abe <HAL_GPIO_Init+0x212>
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	e00c      	b.n	8001abe <HAL_GPIO_Init+0x212>
 8001aa4:	2306      	movs	r3, #6
 8001aa6:	e00a      	b.n	8001abe <HAL_GPIO_Init+0x212>
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	e008      	b.n	8001abe <HAL_GPIO_Init+0x212>
 8001aac:	2304      	movs	r3, #4
 8001aae:	e006      	b.n	8001abe <HAL_GPIO_Init+0x212>
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e004      	b.n	8001abe <HAL_GPIO_Init+0x212>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e002      	b.n	8001abe <HAL_GPIO_Init+0x212>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_GPIO_Init+0x212>
 8001abc:	2300      	movs	r3, #0
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	f002 0203 	and.w	r2, r2, #3
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	4093      	lsls	r3, r2
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ace:	4937      	ldr	r1, [pc, #220]	@ (8001bac <HAL_GPIO_Init+0x300>)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001adc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <HAL_GPIO_Init+0x320>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b00:	4a32      	ldr	r2, [pc, #200]	@ (8001bcc <HAL_GPIO_Init+0x320>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b06:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <HAL_GPIO_Init+0x320>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b2a:	4a28      	ldr	r2, [pc, #160]	@ (8001bcc <HAL_GPIO_Init+0x320>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b30:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <HAL_GPIO_Init+0x320>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b54:	4a1d      	ldr	r2, [pc, #116]	@ (8001bcc <HAL_GPIO_Init+0x320>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <HAL_GPIO_Init+0x320>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b7e:	4a13      	ldr	r2, [pc, #76]	@ (8001bcc <HAL_GPIO_Init+0x320>)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f47f ae91 	bne.w	80018bc <HAL_GPIO_Init+0x10>
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	48000c00 	.word	0x48000c00
 8001bbc:	48001000 	.word	0x48001000
 8001bc0:	48001400 	.word	0x48001400
 8001bc4:	48001800 	.word	0x48001800
 8001bc8:	48001c00 	.word	0x48001c00
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c04:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c10:	d102      	bne.n	8001c18 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c16:	e00b      	b.n	8001c30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c26:	d102      	bne.n	8001c2e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001c28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c2c:	e000      	b.n	8001c30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001c2e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40007000 	.word	0x40007000

08001c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d141      	bne.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5a:	d131      	bne.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b47      	ldr	r3, [pc, #284]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c62:	4a46      	ldr	r2, [pc, #280]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c6c:	4b43      	ldr	r3, [pc, #268]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c74:	4a41      	ldr	r2, [pc, #260]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c7c:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2232      	movs	r2, #50	@ 0x32
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4a3f      	ldr	r2, [pc, #252]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	0c9b      	lsrs	r3, r3, #18
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c92:	e002      	b.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9a:	4b38      	ldr	r3, [pc, #224]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca6:	d102      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f2      	bne.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cae:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cba:	d158      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e057      	b.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cd0:	e04d      	b.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cd8:	d141      	bne.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cda:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce6:	d131      	bne.n	8001d4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce8:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cee:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf8:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d00:	4a1e      	ldr	r2, [pc, #120]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2232      	movs	r2, #50	@ 0x32
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	4a1c      	ldr	r2, [pc, #112]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	0c9b      	lsrs	r3, r3, #18
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d1e:	e002      	b.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d32:	d102      	bne.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f2      	bne.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d46:	d112      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e011      	b.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d5c:	e007      	b.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d5e:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d66:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	20000004 	.word	0x20000004
 8001d84:	431bde83 	.word	0x431bde83

08001d88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f000 bc08 	b.w	80025ac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9c:	4b96      	ldr	r3, [pc, #600]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da6:	4b94      	ldr	r3, [pc, #592]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80e4 	beq.w	8001f86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4c>
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	f040 808b 	bne.w	8001ee2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f040 8087 	bne.w	8001ee2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd4:	4b88      	ldr	r3, [pc, #544]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x64>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e3df      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	4b81      	ldr	r3, [pc, #516]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_RCC_OscConfig+0x7e>
 8001dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e04:	e005      	b.n	8001e12 <HAL_RCC_OscConfig+0x8a>
 8001e06:	4b7c      	ldr	r3, [pc, #496]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d223      	bcs.n	8001e5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fdcc 	bl	80029b8 <RCC_SetFlashLatencyFromMSIRange>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e3c0      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e2a:	4b73      	ldr	r3, [pc, #460]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a72      	ldr	r2, [pc, #456]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b70      	ldr	r3, [pc, #448]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	496d      	ldr	r1, [pc, #436]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e48:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4968      	ldr	r1, [pc, #416]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e025      	b.n	8001eaa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5e:	4b66      	ldr	r3, [pc, #408]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a65      	ldr	r2, [pc, #404]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4960      	ldr	r1, [pc, #384]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	495b      	ldr	r1, [pc, #364]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fd8c 	bl	80029b8 <RCC_SetFlashLatencyFromMSIRange>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e380      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eaa:	f000 fcc1 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b51      	ldr	r3, [pc, #324]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4950      	ldr	r1, [pc, #320]	@ (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ebc:	5ccb      	ldrb	r3, [r1, r3]
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8002000 <HAL_RCC_OscConfig+0x278>)
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001eca:	4b4e      	ldr	r3, [pc, #312]	@ (8002004 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fb86 	bl	80015e0 <HAL_InitTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d052      	beq.n	8001f84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	e364      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d032      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a42      	ldr	r2, [pc, #264]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fbc3 	bl	8001680 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efe:	f7ff fbbf 	bl	8001680 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e34d      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f10:	4b39      	ldr	r3, [pc, #228]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f1c:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a35      	ldr	r2, [pc, #212]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4930      	ldr	r1, [pc, #192]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	492b      	ldr	r1, [pc, #172]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
 8001f4e:	e01a      	b.n	8001f86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f50:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a28      	ldr	r2, [pc, #160]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fb90 	bl	8001680 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f64:	f7ff fb8c 	bl	8001680 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e31a      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x1dc>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d073      	beq.n	800207a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x21c>
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d10e      	bne.n	8001fbc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d063      	beq.n	8002078 <HAL_RCC_OscConfig+0x2f0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d15f      	bne.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e2f7      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x24c>
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e025      	b.n	8002020 <HAL_RCC_OscConfig+0x298>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fdc:	d114      	bne.n	8002008 <HAL_RCC_OscConfig+0x280>
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a02      	ldr	r2, [pc, #8]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0x298>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08005150 	.word	0x08005150
 8002000:	20000004 	.word	0x20000004
 8002004:	20000008 	.word	0x20000008
 8002008:	4ba0      	ldr	r3, [pc, #640]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a9f      	ldr	r2, [pc, #636]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b9d      	ldr	r3, [pc, #628]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a9c      	ldr	r2, [pc, #624]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800201e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fb2a 	bl	8001680 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff fb26 	bl	8001680 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	@ 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e2b4      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002042:	4b92      	ldr	r3, [pc, #584]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x2a8>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff fb16 	bl	8001680 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fb12 	bl	8001680 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	@ 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e2a0      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800206a:	4b88      	ldr	r3, [pc, #544]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x2d0>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d060      	beq.n	8002148 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d005      	beq.n	8002098 <HAL_RCC_OscConfig+0x310>
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d119      	bne.n	80020c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d116      	bne.n	80020c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002098:	4b7c      	ldr	r3, [pc, #496]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_OscConfig+0x328>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e27d      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b76      	ldr	r3, [pc, #472]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	4973      	ldr	r1, [pc, #460]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c4:	e040      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d023      	beq.n	8002116 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ce:	4b6f      	ldr	r3, [pc, #444]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6e      	ldr	r2, [pc, #440]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff fad1 	bl	8001680 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7ff facd 	bl	8001680 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e25b      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	4b65      	ldr	r3, [pc, #404]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b62      	ldr	r3, [pc, #392]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	495f      	ldr	r1, [pc, #380]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e018      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b5d      	ldr	r3, [pc, #372]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a5c      	ldr	r2, [pc, #368]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800211c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff faad 	bl	8001680 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7ff faa9 	bl	8001680 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e237      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213c:	4b53      	ldr	r3, [pc, #332]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d03c      	beq.n	80021ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01c      	beq.n	8002196 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215c:	4b4b      	ldr	r3, [pc, #300]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002162:	4a4a      	ldr	r2, [pc, #296]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fa88 	bl	8001680 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff fa84 	bl	8001680 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e212      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002186:	4b41      	ldr	r3, [pc, #260]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCC_OscConfig+0x3ec>
 8002194:	e01b      	b.n	80021ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002196:	4b3d      	ldr	r3, [pc, #244]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800219c:	4a3b      	ldr	r2, [pc, #236]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff fa6b 	bl	8001680 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ae:	f7ff fa67 	bl	8001680 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1f5      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c0:	4b32      	ldr	r3, [pc, #200]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80a6 	beq.w	8002328 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021e0:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10d      	bne.n	8002208 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b27      	ldr	r3, [pc, #156]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	4a26      	ldr	r2, [pc, #152]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f8:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002204:	2301      	movs	r3, #1
 8002206:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002208:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d118      	bne.n	8002246 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002220:	f7ff fa2e 	bl	8001680 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002228:	f7ff fa2a 	bl	8001680 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1b8      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_RCC_OscConfig+0x4d8>
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800225e:	e029      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d115      	bne.n	8002294 <HAL_RCC_OscConfig+0x50c>
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	4a07      	ldr	r2, [pc, #28]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227e:	4a03      	ldr	r2, [pc, #12]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	4b9d      	ldr	r3, [pc, #628]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229a:	4a9c      	ldr	r2, [pc, #624]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022a4:	4b99      	ldr	r3, [pc, #612]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022aa:	4a98      	ldr	r2, [pc, #608]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d016      	beq.n	80022ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff f9e0 	bl	8001680 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7ff f9dc 	bl	8001680 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e168      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022da:	4b8c      	ldr	r3, [pc, #560]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ed      	beq.n	80022c4 <HAL_RCC_OscConfig+0x53c>
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7ff f9c9 	bl	8001680 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7ff f9c5 	bl	8001680 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e151      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002308:	4b80      	ldr	r3, [pc, #512]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ed      	bne.n	80022f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b7b      	ldr	r3, [pc, #492]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	4a7a      	ldr	r2, [pc, #488]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002326:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03c      	beq.n	80023ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01c      	beq.n	8002376 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800233c:	4b73      	ldr	r3, [pc, #460]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 800233e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002342:	4a72      	ldr	r2, [pc, #456]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff f998 	bl	8001680 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002354:	f7ff f994 	bl	8001680 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e122      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002366:	4b69      	ldr	r3, [pc, #420]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002368:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ef      	beq.n	8002354 <HAL_RCC_OscConfig+0x5cc>
 8002374:	e01b      	b.n	80023ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002376:	4b65      	ldr	r3, [pc, #404]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800237c:	4a63      	ldr	r2, [pc, #396]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7ff f97b 	bl	8001680 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238e:	f7ff f977 	bl	8001680 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e105      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023a0:	4b5a      	ldr	r3, [pc, #360]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80023a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ef      	bne.n	800238e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80f9 	beq.w	80025aa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	2b02      	cmp	r3, #2
 80023be:	f040 80cf 	bne.w	8002560 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023c2:	4b52      	ldr	r3, [pc, #328]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0203 	and.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d12c      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	3b01      	subs	r3, #1
 80023e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d123      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d11b      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d113      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	3b01      	subs	r3, #1
 8002416:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d109      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	3b01      	subs	r3, #1
 800242a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d071      	beq.n	8002514 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d068      	beq.n	8002508 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002436:	4b35      	ldr	r3, [pc, #212]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002442:	4b32      	ldr	r3, [pc, #200]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0ac      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002452:	4b2e      	ldr	r3, [pc, #184]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2d      	ldr	r2, [pc, #180]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002458:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800245e:	f7ff f90f 	bl	8001680 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7ff f90b 	bl	8001680 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e099      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002484:	4b21      	ldr	r3, [pc, #132]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <HAL_RCC_OscConfig+0x788>)
 800248a:	4013      	ands	r3, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002494:	3a01      	subs	r2, #1
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	4311      	orrs	r1, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800249e:	0212      	lsls	r2, r2, #8
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024a6:	0852      	lsrs	r2, r2, #1
 80024a8:	3a01      	subs	r2, #1
 80024aa:	0552      	lsls	r2, r2, #21
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024b2:	0852      	lsrs	r2, r2, #1
 80024b4:	3a01      	subs	r2, #1
 80024b6:	0652      	lsls	r2, r2, #25
 80024b8:	4311      	orrs	r1, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024be:	06d2      	lsls	r2, r2, #27
 80024c0:	430a      	orrs	r2, r1
 80024c2:	4912      	ldr	r1, [pc, #72]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0f      	ldr	r2, [pc, #60]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80024da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e0:	f7ff f8ce 	bl	8001680 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff f8ca 	bl	8001680 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e058      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	4b04      	ldr	r3, [pc, #16]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002506:	e050      	b.n	80025aa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e04f      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
 800250c:	40021000 	.word	0x40021000
 8002510:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002514:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d144      	bne.n	80025aa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002520:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a23      	ldr	r2, [pc, #140]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800252c:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a20      	ldr	r2, [pc, #128]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002536:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002538:	f7ff f8a2 	bl	8001680 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff f89e 	bl	8001680 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e02c      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x7b8>
 800255e:	e024      	b.n	80025aa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d01f      	beq.n	80025a6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800256c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7ff f885 	bl	8001680 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7ff f881 	bl	8001680 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e00f      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258c:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002598:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4905      	ldr	r1, [pc, #20]	@ (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_RCC_OscConfig+0x830>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
 80025a4:	e001      	b.n	80025aa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	feeefffc 	.word	0xfeeefffc

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e11d      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b90      	ldr	r3, [pc, #576]	@ (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	498b      	ldr	r1, [pc, #556]	@ (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b89      	ldr	r3, [pc, #548]	@ (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e105      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d010      	beq.n	8002632 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4b81      	ldr	r3, [pc, #516]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800261c:	429a      	cmp	r2, r3
 800261e:	d908      	bls.n	8002632 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b7e      	ldr	r3, [pc, #504]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	497b      	ldr	r1, [pc, #492]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d079      	beq.n	8002732 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d11e      	bne.n	8002684 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002646:	4b75      	ldr	r3, [pc, #468]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0dc      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002656:	f000 fa09 	bl	8002a6c <RCC_GetSysClockFreqFromPLLSource>
 800265a:	4603      	mov	r3, r0
 800265c:	4a70      	ldr	r2, [pc, #448]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d946      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002662:	4b6e      	ldr	r3, [pc, #440]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d140      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800266e:	4b6b      	ldr	r3, [pc, #428]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002676:	4a69      	ldr	r2, [pc, #420]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e035      	b.n	80026f0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268c:	4b63      	ldr	r3, [pc, #396]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d115      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b9      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a4:	4b5d      	ldr	r3, [pc, #372]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0ad      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b59      	ldr	r3, [pc, #356]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0a5      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80026c4:	f000 f8b4 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4a55      	ldr	r2, [pc, #340]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d90f      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026d0:	4b52      	ldr	r3, [pc, #328]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026dc:	4b4f      	ldr	r3, [pc, #316]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026e4:	4a4d      	ldr	r2, [pc, #308]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80026e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026f0:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 0203 	bic.w	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4947      	ldr	r1, [pc, #284]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002702:	f7fe ffbd 	bl	8001680 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002708:	e00a      	b.n	8002720 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270a:	f7fe ffb9 	bl	8001680 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e077      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002720:	4b3e      	ldr	r3, [pc, #248]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 020c 	and.w	r2, r3, #12
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	429a      	cmp	r2, r3
 8002730:	d1eb      	bne.n	800270a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b80      	cmp	r3, #128	@ 0x80
 8002736:	d105      	bne.n	8002744 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002738:	4b38      	ldr	r3, [pc, #224]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a37      	ldr	r2, [pc, #220]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 800273e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002742:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b31      	ldr	r3, [pc, #196]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800275c:	429a      	cmp	r2, r3
 800275e:	d208      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b2e      	ldr	r3, [pc, #184]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	492b      	ldr	r1, [pc, #172]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002772:	4b29      	ldr	r3, [pc, #164]	@ (8002818 <HAL_RCC_ClockConfig+0x25c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d210      	bcs.n	80027a2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002780:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <HAL_RCC_ClockConfig+0x25c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 020f 	bic.w	r2, r3, #15
 8002788:	4923      	ldr	r1, [pc, #140]	@ (8002818 <HAL_RCC_ClockConfig+0x25c>)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002790:	4b21      	ldr	r3, [pc, #132]	@ (8002818 <HAL_RCC_ClockConfig+0x25c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e036      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ae:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4918      	ldr	r1, [pc, #96]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027cc:	4b13      	ldr	r3, [pc, #76]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4910      	ldr	r1, [pc, #64]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027e0:	f000 f826 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	490c      	ldr	r1, [pc, #48]	@ (8002824 <HAL_RCC_ClockConfig+0x268>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <HAL_RCC_ClockConfig+0x26c>)
 80027fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002800:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <HAL_RCC_ClockConfig+0x270>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe feeb 	bl	80015e0 <HAL_InitTick>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]

  return status;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40022000 	.word	0x40022000
 800281c:	40021000 	.word	0x40021000
 8002820:	04c4b400 	.word	0x04c4b400
 8002824:	08005150 	.word	0x08005150
 8002828:	20000004 	.word	0x20000004
 800282c:	20000008 	.word	0x20000008

08002830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	@ 0x24
 8002834:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283e:	4b3e      	ldr	r3, [pc, #248]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002848:	4b3b      	ldr	r3, [pc, #236]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x34>
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d121      	bne.n	80028a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d11e      	bne.n	80028a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002864:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002870:	4b31      	ldr	r3, [pc, #196]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e005      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002880:	4b2d      	ldr	r3, [pc, #180]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800288c:	4a2b      	ldr	r2, [pc, #172]	@ (800293c <HAL_RCC_GetSysClockFreq+0x10c>)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002894:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10d      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028a8:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x110>)
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	e004      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028b4:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x114>)
 80028b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d134      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028be:	4b1e      	ldr	r3, [pc, #120]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d003      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0xac>
 80028d4:	e005      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x110>)
 80028d8:	617b      	str	r3, [r7, #20]
      break;
 80028da:	e005      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x114>)
 80028de:	617b      	str	r3, [r7, #20]
      break;
 80028e0:	e002      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	617b      	str	r3, [r7, #20]
      break;
 80028e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e8:	4b13      	ldr	r3, [pc, #76]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3301      	adds	r3, #1
 80028f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028f6:	4b10      	ldr	r3, [pc, #64]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	fb03 f202 	mul.w	r2, r3, r2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	fbb2 f3f3 	udiv	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	0e5b      	lsrs	r3, r3, #25
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	3301      	adds	r3, #1
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002928:	69bb      	ldr	r3, [r7, #24]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	@ 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	08005168 	.word	0x08005168
 8002940:	00f42400 	.word	0x00f42400
 8002944:	007a1200 	.word	0x007a1200

08002948 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800294c:	4b03      	ldr	r3, [pc, #12]	@ (800295c <HAL_RCC_GetHCLKFreq+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000004 	.word	0x20000004

08002960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002964:	f7ff fff0 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4904      	ldr	r1, [pc, #16]	@ (8002988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	08005160 	.word	0x08005160

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002990:	f7ff ffda 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0adb      	lsrs	r3, r3, #11
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4904      	ldr	r1, [pc, #16]	@ (80029b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08005160 	.word	0x08005160

080029b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029c4:	4b27      	ldr	r3, [pc, #156]	@ (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029d0:	f7ff f916 	bl	8001c00 <HAL_PWREx_GetVoltageRange>
 80029d4:	6178      	str	r0, [r7, #20]
 80029d6:	e014      	b.n	8002a02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	4b22      	ldr	r3, [pc, #136]	@ (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	4a21      	ldr	r2, [pc, #132]	@ (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029f0:	f7ff f906 	bl	8001c00 <HAL_PWREx_GetVoltageRange>
 80029f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a08:	d10b      	bne.n	8002a22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b80      	cmp	r3, #128	@ 0x80
 8002a0e:	d913      	bls.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a14:	d902      	bls.n	8002a1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a16:	2302      	movs	r3, #2
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e00d      	b.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	e00a      	b.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a26:	d902      	bls.n	8002a2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002a28:	2302      	movs	r3, #2
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	e004      	b.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b70      	cmp	r3, #112	@ 0x70
 8002a32:	d101      	bne.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a34:	2301      	movs	r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 020f 	bic.w	r2, r3, #15
 8002a40:	4909      	ldr	r1, [pc, #36]	@ (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a48:	4b07      	ldr	r3, [pc, #28]	@ (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40022000 	.word	0x40022000

08002a6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a72:	4b2d      	ldr	r3, [pc, #180]	@ (8002b28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d00b      	beq.n	8002a9a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d825      	bhi.n	8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d008      	beq.n	8002aa0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d11f      	bne.n	8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a96:	613b      	str	r3, [r7, #16]
    break;
 8002a98:	e01f      	b.n	8002ada <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002a9a:	4b25      	ldr	r3, [pc, #148]	@ (8002b30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002a9c:	613b      	str	r3, [r7, #16]
    break;
 8002a9e:	e01c      	b.n	8002ada <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002aa0:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002aac:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e005      	b.n	8002ac8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad0:	613b      	str	r3, [r7, #16]
    break;
 8002ad2:	e002      	b.n	8002ada <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
    break;
 8002ad8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ada:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	fb03 f202 	mul.w	r2, r3, r2
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b00:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0e5b      	lsrs	r3, r3, #25
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002b1a:	683b      	ldr	r3, [r7, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	007a1200 	.word	0x007a1200
 8002b34:	08005168 	.word	0x08005168

08002b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b40:	2300      	movs	r3, #0
 8002b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b44:	2300      	movs	r3, #0
 8002b46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d040      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b58:	2b80      	cmp	r3, #128	@ 0x80
 8002b5a:	d02a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b5c:	2b80      	cmp	r3, #128	@ 0x80
 8002b5e:	d825      	bhi.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b60:	2b60      	cmp	r3, #96	@ 0x60
 8002b62:	d026      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b64:	2b60      	cmp	r3, #96	@ 0x60
 8002b66:	d821      	bhi.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b68:	2b40      	cmp	r3, #64	@ 0x40
 8002b6a:	d006      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002b6c:	2b40      	cmp	r3, #64	@ 0x40
 8002b6e:	d81d      	bhi.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d010      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002b78:	e018      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b7a:	4b89      	ldr	r3, [pc, #548]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4a88      	ldr	r2, [pc, #544]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b84:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b86:	e015      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fb02 	bl	8003198 <RCCEx_PLLSAI1_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b98:	e00c      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3320      	adds	r3, #32
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fbed 	bl	8003380 <RCCEx_PLLSAI2_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002baa:	e003      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	74fb      	strb	r3, [r7, #19]
      break;
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bba:	4b79      	ldr	r3, [pc, #484]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bc0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc8:	4975      	ldr	r1, [pc, #468]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002bd0:	e001      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d047      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bea:	d030      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf0:	d82a      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bf6:	d02a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002bf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bfc:	d824      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c02:	d008      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c08:	d81e      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c12:	d010      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c14:	e018      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c16:	4b62      	ldr	r3, [pc, #392]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	4a61      	ldr	r2, [pc, #388]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c20:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c22:	e015      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fab4 	bl	8003198 <RCCEx_PLLSAI1_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c34:	e00c      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3320      	adds	r3, #32
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fb9f 	bl	8003380 <RCCEx_PLLSAI2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c46:	e003      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	74fb      	strb	r3, [r7, #19]
      break;
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c56:	4b52      	ldr	r3, [pc, #328]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c64:	494e      	ldr	r1, [pc, #312]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002c6c:	e001      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 809f 	beq.w	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c84:	4b46      	ldr	r3, [pc, #280]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002c94:	2300      	movs	r3, #0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b41      	ldr	r3, [pc, #260]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9e:	4a40      	ldr	r2, [pc, #256]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a3a      	ldr	r2, [pc, #232]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cc2:	f7fe fcdd 	bl	8001680 <HAL_GetTick>
 8002cc6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cc8:	e009      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7fe fcd9 	bl	8001680 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d902      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	74fb      	strb	r3, [r7, #19]
        break;
 8002cdc:	e005      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cde:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0ef      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d15b      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01f      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d019      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d0e:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d1a:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d20:	4a1f      	ldr	r2, [pc, #124]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	4a1b      	ldr	r2, [pc, #108]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d3a:	4a19      	ldr	r2, [pc, #100]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d016      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fc98 	bl	8001680 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d52:	e00b      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7fe fc94 	bl	8001680 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d902      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	74fb      	strb	r3, [r7, #19]
            break;
 8002d6a:	e006      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ec      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d80:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d90:	4903      	ldr	r1, [pc, #12]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d98:	e008      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	74bb      	strb	r3, [r7, #18]
 8002d9e:	e005      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dac:	7c7b      	ldrb	r3, [r7, #17]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db2:	4ba0      	ldr	r3, [pc, #640]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	4a9f      	ldr	r2, [pc, #636]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dca:	4b9a      	ldr	r3, [pc, #616]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd0:	f023 0203 	bic.w	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd8:	4996      	ldr	r1, [pc, #600]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dec:	4b91      	ldr	r3, [pc, #580]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df2:	f023 020c 	bic.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	498e      	ldr	r1, [pc, #568]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e0e:	4b89      	ldr	r3, [pc, #548]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	4985      	ldr	r1, [pc, #532]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e30:	4b80      	ldr	r3, [pc, #512]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3e:	497d      	ldr	r1, [pc, #500]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e52:	4b78      	ldr	r3, [pc, #480]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e60:	4974      	ldr	r1, [pc, #464]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e74:	4b6f      	ldr	r3, [pc, #444]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e82:	496c      	ldr	r1, [pc, #432]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e96:	4b67      	ldr	r3, [pc, #412]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ea4:	4963      	ldr	r1, [pc, #396]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ec6:	495b      	ldr	r1, [pc, #364]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eda:	4b56      	ldr	r3, [pc, #344]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	4952      	ldr	r1, [pc, #328]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002efc:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f02:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	494a      	ldr	r1, [pc, #296]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f1e:	4b45      	ldr	r3, [pc, #276]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2c:	4941      	ldr	r1, [pc, #260]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f40:	4b3c      	ldr	r3, [pc, #240]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4e:	4939      	ldr	r1, [pc, #228]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f62:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f70:	4930      	ldr	r1, [pc, #192]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f80:	d106      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f82:	4b2c      	ldr	r3, [pc, #176]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4a2b      	ldr	r2, [pc, #172]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f8c:	60d3      	str	r3, [r2, #12]
 8002f8e:	e011      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f8f9 	bl	8003198 <RCCEx_PLLSAI1_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d04d      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fc8:	d108      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002fca:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fd0:	4a18      	ldr	r2, [pc, #96]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fd6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002fda:	e012      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002fdc:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fe2:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fe4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fe8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002fec:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ffa:	490e      	ldr	r1, [pc, #56]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800300a:	d106      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800300c:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a08      	ldr	r2, [pc, #32]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003016:	60d3      	str	r3, [r2, #12]
 8003018:	e020      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800301e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003022:	d109      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003024:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a02      	ldr	r2, [pc, #8]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302e:	60d3      	str	r3, [r2, #12]
 8003030:	e014      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800303c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003040:	d10c      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f8a5 	bl	8003198 <RCCEx_PLLSAI1_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d028      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003068:	4b4a      	ldr	r3, [pc, #296]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003076:	4947      	ldr	r1, [pc, #284]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003086:	d106      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003088:	4b42      	ldr	r3, [pc, #264]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a41      	ldr	r2, [pc, #260]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003092:	60d3      	str	r3, [r2, #12]
 8003094:	e011      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800309a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800309e:	d10c      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	2101      	movs	r1, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f876 	bl	8003198 <RCCEx_PLLSAI1_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01e      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030c6:	4b33      	ldr	r3, [pc, #204]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030cc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030d6:	492f      	ldr	r1, [pc, #188]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 f851 	bl	8003198 <RCCEx_PLLSAI1_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003110:	4b20      	ldr	r3, [pc, #128]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003116:	f023 0204 	bic.w	r2, r3, #4
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003120:	491c      	ldr	r1, [pc, #112]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003134:	4b17      	ldr	r3, [pc, #92]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800313a:	f023 0218 	bic.w	r2, r3, #24
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003144:	4913      	ldr	r1, [pc, #76]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d017      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003158:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800315a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800315e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003168:	490a      	ldr	r1, [pc, #40]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a04      	ldr	r2, [pc, #16]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003186:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003188:	7cbb      	ldrb	r3, [r7, #18]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000

08003198 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031a6:	4b72      	ldr	r3, [pc, #456]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0203 	and.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d103      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
       ||
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d142      	bne.n	8003250 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	e03f      	b.n	8003250 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d018      	beq.n	800320a <RCCEx_PLLSAI1_Config+0x72>
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d825      	bhi.n	8003228 <RCCEx_PLLSAI1_Config+0x90>
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d002      	beq.n	80031e6 <RCCEx_PLLSAI1_Config+0x4e>
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d009      	beq.n	80031f8 <RCCEx_PLLSAI1_Config+0x60>
 80031e4:	e020      	b.n	8003228 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031e6:	4b62      	ldr	r3, [pc, #392]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11d      	bne.n	800322e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f6:	e01a      	b.n	800322e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031f8:	4b5d      	ldr	r3, [pc, #372]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d116      	bne.n	8003232 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003208:	e013      	b.n	8003232 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800320a:	4b59      	ldr	r3, [pc, #356]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003216:	4b56      	ldr	r3, [pc, #344]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003226:	e006      	b.n	8003236 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	e004      	b.n	8003238 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003236:	bf00      	nop
    }

    if(status == HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800323e:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4949      	ldr	r1, [pc, #292]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 800324c:	4313      	orrs	r3, r2
 800324e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 8086 	bne.w	8003364 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003258:	4b45      	ldr	r3, [pc, #276]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a44      	ldr	r2, [pc, #272]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 800325e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003264:	f7fe fa0c 	bl	8001680 <HAL_GetTick>
 8003268:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800326a:	e009      	b.n	8003280 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800326c:	f7fe fa08 	bl	8001680 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d902      	bls.n	8003280 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	73fb      	strb	r3, [r7, #15]
        break;
 800327e:	e005      	b.n	800328c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003280:	4b3b      	ldr	r3, [pc, #236]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ef      	bne.n	800326c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d168      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d113      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003298:	4b35      	ldr	r3, [pc, #212]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	4b35      	ldr	r3, [pc, #212]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1dc>)
 800329e:	4013      	ands	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6892      	ldr	r2, [r2, #8]
 80032a4:	0211      	lsls	r1, r2, #8
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68d2      	ldr	r2, [r2, #12]
 80032aa:	06d2      	lsls	r2, r2, #27
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6852      	ldr	r2, [r2, #4]
 80032b2:	3a01      	subs	r2, #1
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	430a      	orrs	r2, r1
 80032b8:	492d      	ldr	r1, [pc, #180]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	610b      	str	r3, [r1, #16]
 80032be:	e02d      	b.n	800331c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d115      	bne.n	80032f2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6892      	ldr	r2, [r2, #8]
 80032d2:	0211      	lsls	r1, r2, #8
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6912      	ldr	r2, [r2, #16]
 80032d8:	0852      	lsrs	r2, r2, #1
 80032da:	3a01      	subs	r2, #1
 80032dc:	0552      	lsls	r2, r2, #21
 80032de:	4311      	orrs	r1, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6852      	ldr	r2, [r2, #4]
 80032e4:	3a01      	subs	r2, #1
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	430a      	orrs	r2, r1
 80032ea:	4921      	ldr	r1, [pc, #132]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	610b      	str	r3, [r1, #16]
 80032f0:	e014      	b.n	800331c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	4b21      	ldr	r3, [pc, #132]	@ (800337c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6892      	ldr	r2, [r2, #8]
 80032fe:	0211      	lsls	r1, r2, #8
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6952      	ldr	r2, [r2, #20]
 8003304:	0852      	lsrs	r2, r2, #1
 8003306:	3a01      	subs	r2, #1
 8003308:	0652      	lsls	r2, r2, #25
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6852      	ldr	r2, [r2, #4]
 8003310:	3a01      	subs	r2, #1
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	430a      	orrs	r2, r1
 8003316:	4916      	ldr	r1, [pc, #88]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fe f9aa 	bl	8001680 <HAL_GetTick>
 800332c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800332e:	e009      	b.n	8003344 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003330:	f7fe f9a6 	bl	8001680 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d902      	bls.n	8003344 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	73fb      	strb	r3, [r7, #15]
          break;
 8003342:	e005      	b.n	8003350 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003344:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ef      	beq.n	8003330 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4904      	ldr	r1, [pc, #16]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003360:	4313      	orrs	r3, r2
 8003362:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	07ff800f 	.word	0x07ff800f
 8003378:	ff9f800f 	.word	0xff9f800f
 800337c:	f9ff800f 	.word	0xf9ff800f

08003380 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800338e:	4b72      	ldr	r3, [pc, #456]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00e      	beq.n	80033b8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800339a:	4b6f      	ldr	r3, [pc, #444]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0203 	and.w	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d103      	bne.n	80033b2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
       ||
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d142      	bne.n	8003438 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
 80033b6:	e03f      	b.n	8003438 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d018      	beq.n	80033f2 <RCCEx_PLLSAI2_Config+0x72>
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d825      	bhi.n	8003410 <RCCEx_PLLSAI2_Config+0x90>
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d002      	beq.n	80033ce <RCCEx_PLLSAI2_Config+0x4e>
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d009      	beq.n	80033e0 <RCCEx_PLLSAI2_Config+0x60>
 80033cc:	e020      	b.n	8003410 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033ce:	4b62      	ldr	r3, [pc, #392]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11d      	bne.n	8003416 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033de:	e01a      	b.n	8003416 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d116      	bne.n	800341a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f0:	e013      	b.n	800341a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033f2:	4b59      	ldr	r3, [pc, #356]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033fe:	4b56      	ldr	r3, [pc, #344]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800340e:	e006      	b.n	800341e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      break;
 8003414:	e004      	b.n	8003420 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800341e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003426:	4b4c      	ldr	r3, [pc, #304]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4949      	ldr	r1, [pc, #292]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003434:	4313      	orrs	r3, r2
 8003436:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 8086 	bne.w	800354c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003440:	4b45      	ldr	r3, [pc, #276]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a44      	ldr	r2, [pc, #272]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800344a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344c:	f7fe f918 	bl	8001680 <HAL_GetTick>
 8003450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003452:	e009      	b.n	8003468 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003454:	f7fe f914 	bl	8001680 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d902      	bls.n	8003468 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	73fb      	strb	r3, [r7, #15]
        break;
 8003466:	e005      	b.n	8003474 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003468:	4b3b      	ldr	r3, [pc, #236]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ef      	bne.n	8003454 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d168      	bne.n	800354c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d113      	bne.n	80034a8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003480:	4b35      	ldr	r3, [pc, #212]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	4b35      	ldr	r3, [pc, #212]	@ (800355c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003486:	4013      	ands	r3, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6892      	ldr	r2, [r2, #8]
 800348c:	0211      	lsls	r1, r2, #8
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68d2      	ldr	r2, [r2, #12]
 8003492:	06d2      	lsls	r2, r2, #27
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6852      	ldr	r2, [r2, #4]
 800349a:	3a01      	subs	r2, #1
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	430a      	orrs	r2, r1
 80034a0:	492d      	ldr	r1, [pc, #180]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	614b      	str	r3, [r1, #20]
 80034a6:	e02d      	b.n	8003504 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d115      	bne.n	80034da <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003560 <RCCEx_PLLSAI2_Config+0x1e0>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6892      	ldr	r2, [r2, #8]
 80034ba:	0211      	lsls	r1, r2, #8
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6912      	ldr	r2, [r2, #16]
 80034c0:	0852      	lsrs	r2, r2, #1
 80034c2:	3a01      	subs	r2, #1
 80034c4:	0552      	lsls	r2, r2, #21
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6852      	ldr	r2, [r2, #4]
 80034cc:	3a01      	subs	r2, #1
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	430a      	orrs	r2, r1
 80034d2:	4921      	ldr	r1, [pc, #132]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	614b      	str	r3, [r1, #20]
 80034d8:	e014      	b.n	8003504 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034da:	4b1f      	ldr	r3, [pc, #124]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	4b21      	ldr	r3, [pc, #132]	@ (8003564 <RCCEx_PLLSAI2_Config+0x1e4>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6892      	ldr	r2, [r2, #8]
 80034e6:	0211      	lsls	r1, r2, #8
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6952      	ldr	r2, [r2, #20]
 80034ec:	0852      	lsrs	r2, r2, #1
 80034ee:	3a01      	subs	r2, #1
 80034f0:	0652      	lsls	r2, r2, #25
 80034f2:	4311      	orrs	r1, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6852      	ldr	r2, [r2, #4]
 80034f8:	3a01      	subs	r2, #1
 80034fa:	0112      	lsls	r2, r2, #4
 80034fc:	430a      	orrs	r2, r1
 80034fe:	4916      	ldr	r1, [pc, #88]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003500:	4313      	orrs	r3, r2
 8003502:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800350e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fe f8b6 	bl	8001680 <HAL_GetTick>
 8003514:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003516:	e009      	b.n	800352c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003518:	f7fe f8b2 	bl	8001680 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d902      	bls.n	800352c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	73fb      	strb	r3, [r7, #15]
          break;
 800352a:	e005      	b.n	8003538 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800352c:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ef      	beq.n	8003518 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	4904      	ldr	r1, [pc, #16]	@ (8003558 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003548:	4313      	orrs	r3, r2
 800354a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	07ff800f 	.word	0x07ff800f
 8003560:	ff9f800f 	.word	0xff9f800f
 8003564:	f9ff800f 	.word	0xf9ff800f

08003568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e095      	b.n	80036a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d108      	bne.n	8003594 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800358a:	d009      	beq.n	80035a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	61da      	str	r2, [r3, #28]
 8003592:	e005      	b.n	80035a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fec8 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035e0:	d902      	bls.n	80035e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e002      	b.n	80035ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80035f6:	d007      	beq.n	8003608 <HAL_SPI_Init+0xa0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003600:	d002      	beq.n	8003608 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364a:	ea42 0103 	orr.w	r1, r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003652:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	0c1b      	lsrs	r3, r3, #16
 8003664:	f003 0204 	and.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003684:	ea42 0103 	orr.w	r1, r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b088      	sub	sp, #32
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_SPI_Transmit+0x22>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e15f      	b.n	8003990 <HAL_SPI_Transmit+0x2e2>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036d8:	f7fd ffd2 	bl	8001680 <HAL_GetTick>
 80036dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d002      	beq.n	80036f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
 80036f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036f2:	e148      	b.n	8003986 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_SPI_Transmit+0x52>
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003704:	e13f      	b.n	8003986 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2203      	movs	r2, #3
 800370a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	88fa      	ldrh	r2, [r7, #6]
 800371e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003750:	d10f      	bne.n	8003772 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003760:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003770:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377c:	2b40      	cmp	r3, #64	@ 0x40
 800377e:	d007      	beq.n	8003790 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003798:	d94f      	bls.n	800383a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_SPI_Transmit+0xfa>
 80037a2:	8afb      	ldrh	r3, [r7, #22]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d142      	bne.n	800382e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037cc:	e02f      	b.n	800382e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d112      	bne.n	8003802 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e0:	881a      	ldrh	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	1c9a      	adds	r2, r3, #2
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003800:	e015      	b.n	800382e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003802:	f7fd ff3d 	bl	8001680 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d803      	bhi.n	800381a <HAL_SPI_Transmit+0x16c>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003818:	d102      	bne.n	8003820 <HAL_SPI_Transmit+0x172>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800382c:	e0ab      	b.n	8003986 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ca      	bne.n	80037ce <HAL_SPI_Transmit+0x120>
 8003838:	e080      	b.n	800393c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_SPI_Transmit+0x19a>
 8003842:	8afb      	ldrh	r3, [r7, #22]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d174      	bne.n	8003932 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d912      	bls.n	8003878 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	1c9a      	adds	r2, r3, #2
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b02      	subs	r3, #2
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003876:	e05c      	b.n	8003932 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	7812      	ldrb	r2, [r2, #0]
 8003884:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800389e:	e048      	b.n	8003932 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d12b      	bne.n	8003906 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d912      	bls.n	80038de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	1c9a      	adds	r2, r3, #2
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b02      	subs	r3, #2
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038dc:	e029      	b.n	8003932 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	7812      	ldrb	r2, [r2, #0]
 80038ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003904:	e015      	b.n	8003932 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003906:	f7fd febb 	bl	8001680 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d803      	bhi.n	800391e <HAL_SPI_Transmit+0x270>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800391c:	d102      	bne.n	8003924 <HAL_SPI_Transmit+0x276>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003930:	e029      	b.n	8003986 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1b1      	bne.n	80038a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f947 	bl	8003bd4 <SPI_EndRxTxTransaction>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e003      	b.n	8003986 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800398e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039a8:	f7fd fe6a 	bl	8001680 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039b8:	f7fd fe62 	bl	8001680 <HAL_GetTick>
 80039bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039be:	4b39      	ldr	r3, [pc, #228]	@ (8003aa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	015b      	lsls	r3, r3, #5
 80039c4:	0d1b      	lsrs	r3, r3, #20
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ce:	e054      	b.n	8003a7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039d6:	d050      	beq.n	8003a7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039d8:	f7fd fe52 	bl	8001680 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d902      	bls.n	80039ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d13d      	bne.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a06:	d111      	bne.n	8003a2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a10:	d004      	beq.n	8003a1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1a:	d107      	bne.n	8003a2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a34:	d10f      	bne.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e017      	b.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4013      	ands	r3, r2
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	bf0c      	ite	eq
 8003a8a:	2301      	moveq	r3, #1
 8003a8c:	2300      	movne	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d19b      	bne.n	80039d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000004 	.word	0x20000004

08003aa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	@ 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003aba:	f7fd fde1 	bl	8001680 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003aca:	f7fd fdd9 	bl	8001680 <HAL_GetTick>
 8003ace:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00da      	lsls	r2, r3, #3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	0d1b      	lsrs	r3, r3, #20
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003af0:	e060      	b.n	8003bb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003af8:	d107      	bne.n	8003b0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b10:	d050      	beq.n	8003bb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b12:	f7fd fdb5 	bl	8001680 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d902      	bls.n	8003b28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d13d      	bne.n	8003ba4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b40:	d111      	bne.n	8003b66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4a:	d004      	beq.n	8003b56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b54:	d107      	bne.n	8003b66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b6e:	d10f      	bne.n	8003b90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e010      	b.n	8003bc6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d196      	bne.n	8003af2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3728      	adds	r7, #40	@ 0x28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff ff5b 	bl	8003aa8 <SPI_WaitFifoStateUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfc:	f043 0220 	orr.w	r2, r3, #32
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e027      	b.n	8003c58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2180      	movs	r1, #128	@ 0x80
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fec0 	bl	8003998 <SPI_WaitFlagStateUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e014      	b.n	8003c58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff34 	bl	8003aa8 <SPI_WaitFifoStateUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e000      	b.n	8003c58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e042      	b.n	8003cf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fd fba7 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2224      	movs	r2, #36	@ 0x24
 8003c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fc7c 	bl	80045a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f97d 	bl	8003fb0 <UART_SetConfig>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e01b      	b.n	8003cf8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fcfb 	bl	80046ec <UART_CheckIdleState>
 8003cf6:	4603      	mov	r3, r0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d17b      	bne.n	8003e12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_UART_Transmit+0x26>
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e074      	b.n	8003e14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2221      	movs	r2, #33	@ 0x21
 8003d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d3a:	f7fd fca1 	bl	8001680 <HAL_GetTick>
 8003d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	88fa      	ldrh	r2, [r7, #6]
 8003d44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d58:	d108      	bne.n	8003d6c <HAL_UART_Transmit+0x6c>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d104      	bne.n	8003d6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	e003      	b.n	8003d74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d74:	e030      	b.n	8003dd8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2180      	movs	r1, #128	@ 0x80
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fd5d 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e03d      	b.n	8003e14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	881a      	ldrh	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003daa:	b292      	uxth	r2, r2
 8003dac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	3302      	adds	r3, #2
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	e007      	b.n	8003dc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	781a      	ldrb	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1c8      	bne.n	8003d76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2200      	movs	r2, #0
 8003dec:	2140      	movs	r1, #64	@ 0x40
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fd26 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e006      	b.n	8003e14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	@ 0x28
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	f040 80b6 	bne.w	8003fa4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_UART_Receive+0x28>
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0ae      	b.n	8003fa6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2222      	movs	r2, #34	@ 0x22
 8003e54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd fc0f 	bl	8001680 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7c:	d10e      	bne.n	8003e9c <HAL_UART_Receive+0x80>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d105      	bne.n	8003e92 <HAL_UART_Receive+0x76>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e90:	e02d      	b.n	8003eee <HAL_UART_Receive+0xd2>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	22ff      	movs	r2, #255	@ 0xff
 8003e96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e9a:	e028      	b.n	8003eee <HAL_UART_Receive+0xd2>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_UART_Receive+0xa4>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <HAL_UART_Receive+0x9a>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	22ff      	movs	r2, #255	@ 0xff
 8003eb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003eb4:	e01b      	b.n	8003eee <HAL_UART_Receive+0xd2>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	227f      	movs	r2, #127	@ 0x7f
 8003eba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ebe:	e016      	b.n	8003eee <HAL_UART_Receive+0xd2>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_UART_Receive+0xca>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <HAL_UART_Receive+0xc0>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	227f      	movs	r2, #127	@ 0x7f
 8003ed6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003eda:	e008      	b.n	8003eee <HAL_UART_Receive+0xd2>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	223f      	movs	r2, #63	@ 0x3f
 8003ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ee4:	e003      	b.n	8003eee <HAL_UART_Receive+0xd2>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003ef4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efe:	d108      	bne.n	8003f12 <HAL_UART_Receive+0xf6>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e003      	b.n	8003f1a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f1a:	e037      	b.n	8003f8c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	2120      	movs	r1, #32
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fc8a 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e033      	b.n	8003fa6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10c      	bne.n	8003f5e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	8a7b      	ldrh	r3, [r7, #18]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	3302      	adds	r3, #2
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	e00d      	b.n	8003f7a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	8a7b      	ldrh	r3, [r7, #18]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3301      	adds	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1c1      	bne.n	8003f1c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b08c      	sub	sp, #48	@ 0x30
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4baa      	ldr	r3, [pc, #680]	@ (8004288 <UART_SetConfig+0x2d8>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a9f      	ldr	r2, [pc, #636]	@ (800428c <UART_SetConfig+0x2dc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004018:	4313      	orrs	r3, r2
 800401a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004026:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004030:	430b      	orrs	r3, r1
 8004032:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	f023 010f 	bic.w	r1, r3, #15
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a90      	ldr	r2, [pc, #576]	@ (8004290 <UART_SetConfig+0x2e0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d125      	bne.n	80040a0 <UART_SetConfig+0xf0>
 8004054:	4b8f      	ldr	r3, [pc, #572]	@ (8004294 <UART_SetConfig+0x2e4>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b03      	cmp	r3, #3
 8004060:	d81a      	bhi.n	8004098 <UART_SetConfig+0xe8>
 8004062:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <UART_SetConfig+0xb8>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	08004079 	.word	0x08004079
 800406c:	08004089 	.word	0x08004089
 8004070:	08004081 	.word	0x08004081
 8004074:	08004091 	.word	0x08004091
 8004078:	2301      	movs	r3, #1
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800407e:	e116      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004080:	2302      	movs	r3, #2
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004086:	e112      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004088:	2304      	movs	r3, #4
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408e:	e10e      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004090:	2308      	movs	r3, #8
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004096:	e10a      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004098:	2310      	movs	r3, #16
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800409e:	e106      	b.n	80042ae <UART_SetConfig+0x2fe>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a7c      	ldr	r2, [pc, #496]	@ (8004298 <UART_SetConfig+0x2e8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d138      	bne.n	800411c <UART_SetConfig+0x16c>
 80040aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004294 <UART_SetConfig+0x2e4>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d82d      	bhi.n	8004114 <UART_SetConfig+0x164>
 80040b8:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <UART_SetConfig+0x110>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	08004115 	.word	0x08004115
 80040c8:	08004115 	.word	0x08004115
 80040cc:	08004115 	.word	0x08004115
 80040d0:	08004105 	.word	0x08004105
 80040d4:	08004115 	.word	0x08004115
 80040d8:	08004115 	.word	0x08004115
 80040dc:	08004115 	.word	0x08004115
 80040e0:	080040fd 	.word	0x080040fd
 80040e4:	08004115 	.word	0x08004115
 80040e8:	08004115 	.word	0x08004115
 80040ec:	08004115 	.word	0x08004115
 80040f0:	0800410d 	.word	0x0800410d
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040fa:	e0d8      	b.n	80042ae <UART_SetConfig+0x2fe>
 80040fc:	2302      	movs	r3, #2
 80040fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004102:	e0d4      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800410a:	e0d0      	b.n	80042ae <UART_SetConfig+0x2fe>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004112:	e0cc      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800411a:	e0c8      	b.n	80042ae <UART_SetConfig+0x2fe>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a5e      	ldr	r2, [pc, #376]	@ (800429c <UART_SetConfig+0x2ec>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d125      	bne.n	8004172 <UART_SetConfig+0x1c2>
 8004126:	4b5b      	ldr	r3, [pc, #364]	@ (8004294 <UART_SetConfig+0x2e4>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004130:	2b30      	cmp	r3, #48	@ 0x30
 8004132:	d016      	beq.n	8004162 <UART_SetConfig+0x1b2>
 8004134:	2b30      	cmp	r3, #48	@ 0x30
 8004136:	d818      	bhi.n	800416a <UART_SetConfig+0x1ba>
 8004138:	2b20      	cmp	r3, #32
 800413a:	d00a      	beq.n	8004152 <UART_SetConfig+0x1a2>
 800413c:	2b20      	cmp	r3, #32
 800413e:	d814      	bhi.n	800416a <UART_SetConfig+0x1ba>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <UART_SetConfig+0x19a>
 8004144:	2b10      	cmp	r3, #16
 8004146:	d008      	beq.n	800415a <UART_SetConfig+0x1aa>
 8004148:	e00f      	b.n	800416a <UART_SetConfig+0x1ba>
 800414a:	2300      	movs	r3, #0
 800414c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004150:	e0ad      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004152:	2302      	movs	r3, #2
 8004154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004158:	e0a9      	b.n	80042ae <UART_SetConfig+0x2fe>
 800415a:	2304      	movs	r3, #4
 800415c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004160:	e0a5      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004162:	2308      	movs	r3, #8
 8004164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004168:	e0a1      	b.n	80042ae <UART_SetConfig+0x2fe>
 800416a:	2310      	movs	r3, #16
 800416c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004170:	e09d      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a4a      	ldr	r2, [pc, #296]	@ (80042a0 <UART_SetConfig+0x2f0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d125      	bne.n	80041c8 <UART_SetConfig+0x218>
 800417c:	4b45      	ldr	r3, [pc, #276]	@ (8004294 <UART_SetConfig+0x2e4>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004186:	2bc0      	cmp	r3, #192	@ 0xc0
 8004188:	d016      	beq.n	80041b8 <UART_SetConfig+0x208>
 800418a:	2bc0      	cmp	r3, #192	@ 0xc0
 800418c:	d818      	bhi.n	80041c0 <UART_SetConfig+0x210>
 800418e:	2b80      	cmp	r3, #128	@ 0x80
 8004190:	d00a      	beq.n	80041a8 <UART_SetConfig+0x1f8>
 8004192:	2b80      	cmp	r3, #128	@ 0x80
 8004194:	d814      	bhi.n	80041c0 <UART_SetConfig+0x210>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <UART_SetConfig+0x1f0>
 800419a:	2b40      	cmp	r3, #64	@ 0x40
 800419c:	d008      	beq.n	80041b0 <UART_SetConfig+0x200>
 800419e:	e00f      	b.n	80041c0 <UART_SetConfig+0x210>
 80041a0:	2300      	movs	r3, #0
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041a6:	e082      	b.n	80042ae <UART_SetConfig+0x2fe>
 80041a8:	2302      	movs	r3, #2
 80041aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ae:	e07e      	b.n	80042ae <UART_SetConfig+0x2fe>
 80041b0:	2304      	movs	r3, #4
 80041b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041b6:	e07a      	b.n	80042ae <UART_SetConfig+0x2fe>
 80041b8:	2308      	movs	r3, #8
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041be:	e076      	b.n	80042ae <UART_SetConfig+0x2fe>
 80041c0:	2310      	movs	r3, #16
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c6:	e072      	b.n	80042ae <UART_SetConfig+0x2fe>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a35      	ldr	r2, [pc, #212]	@ (80042a4 <UART_SetConfig+0x2f4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d12a      	bne.n	8004228 <UART_SetConfig+0x278>
 80041d2:	4b30      	ldr	r3, [pc, #192]	@ (8004294 <UART_SetConfig+0x2e4>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041e0:	d01a      	beq.n	8004218 <UART_SetConfig+0x268>
 80041e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041e6:	d81b      	bhi.n	8004220 <UART_SetConfig+0x270>
 80041e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ec:	d00c      	beq.n	8004208 <UART_SetConfig+0x258>
 80041ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f2:	d815      	bhi.n	8004220 <UART_SetConfig+0x270>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <UART_SetConfig+0x250>
 80041f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fc:	d008      	beq.n	8004210 <UART_SetConfig+0x260>
 80041fe:	e00f      	b.n	8004220 <UART_SetConfig+0x270>
 8004200:	2300      	movs	r3, #0
 8004202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004206:	e052      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004208:	2302      	movs	r3, #2
 800420a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800420e:	e04e      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004210:	2304      	movs	r3, #4
 8004212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004216:	e04a      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004218:	2308      	movs	r3, #8
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800421e:	e046      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004220:	2310      	movs	r3, #16
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004226:	e042      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a17      	ldr	r2, [pc, #92]	@ (800428c <UART_SetConfig+0x2dc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d13a      	bne.n	80042a8 <UART_SetConfig+0x2f8>
 8004232:	4b18      	ldr	r3, [pc, #96]	@ (8004294 <UART_SetConfig+0x2e4>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800423c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004240:	d01a      	beq.n	8004278 <UART_SetConfig+0x2c8>
 8004242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004246:	d81b      	bhi.n	8004280 <UART_SetConfig+0x2d0>
 8004248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800424c:	d00c      	beq.n	8004268 <UART_SetConfig+0x2b8>
 800424e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004252:	d815      	bhi.n	8004280 <UART_SetConfig+0x2d0>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <UART_SetConfig+0x2b0>
 8004258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425c:	d008      	beq.n	8004270 <UART_SetConfig+0x2c0>
 800425e:	e00f      	b.n	8004280 <UART_SetConfig+0x2d0>
 8004260:	2300      	movs	r3, #0
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004266:	e022      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004268:	2302      	movs	r3, #2
 800426a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800426e:	e01e      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004270:	2304      	movs	r3, #4
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004276:	e01a      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004278:	2308      	movs	r3, #8
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800427e:	e016      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004280:	2310      	movs	r3, #16
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004286:	e012      	b.n	80042ae <UART_SetConfig+0x2fe>
 8004288:	cfff69f3 	.word	0xcfff69f3
 800428c:	40008000 	.word	0x40008000
 8004290:	40013800 	.word	0x40013800
 8004294:	40021000 	.word	0x40021000
 8004298:	40004400 	.word	0x40004400
 800429c:	40004800 	.word	0x40004800
 80042a0:	40004c00 	.word	0x40004c00
 80042a4:	40005000 	.word	0x40005000
 80042a8:	2310      	movs	r3, #16
 80042aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4aae      	ldr	r2, [pc, #696]	@ (800456c <UART_SetConfig+0x5bc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	f040 8097 	bne.w	80043e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d823      	bhi.n	800430a <UART_SetConfig+0x35a>
 80042c2:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <UART_SetConfig+0x318>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	080042ed 	.word	0x080042ed
 80042cc:	0800430b 	.word	0x0800430b
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	080042fb 	.word	0x080042fb
 80042dc:	0800430b 	.word	0x0800430b
 80042e0:	0800430b 	.word	0x0800430b
 80042e4:	0800430b 	.word	0x0800430b
 80042e8:	08004303 	.word	0x08004303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7fe fb38 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 80042f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042f2:	e010      	b.n	8004316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b9e      	ldr	r3, [pc, #632]	@ (8004570 <UART_SetConfig+0x5c0>)
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042f8:	e00d      	b.n	8004316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7fe fa99 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80042fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004300:	e009      	b.n	8004316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004308:	e005      	b.n	8004316 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004314:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8130 	beq.w	800457e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	4a94      	ldr	r2, [pc, #592]	@ (8004574 <UART_SetConfig+0x5c4>)
 8004324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004328:	461a      	mov	r2, r3
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004330:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	429a      	cmp	r2, r3
 8004340:	d305      	bcc.n	800434e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	429a      	cmp	r2, r3
 800434c:	d903      	bls.n	8004356 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004354:	e113      	b.n	800457e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	2200      	movs	r2, #0
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	60fa      	str	r2, [r7, #12]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	4a84      	ldr	r2, [pc, #528]	@ (8004574 <UART_SetConfig+0x5c4>)
 8004364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004368:	b29b      	uxth	r3, r3
 800436a:	2200      	movs	r2, #0
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004374:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004378:	f7fb ff40 	bl	80001fc <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	020b      	lsls	r3, r1, #8
 800438e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004392:	0202      	lsls	r2, r0, #8
 8004394:	6979      	ldr	r1, [r7, #20]
 8004396:	6849      	ldr	r1, [r1, #4]
 8004398:	0849      	lsrs	r1, r1, #1
 800439a:	2000      	movs	r0, #0
 800439c:	460c      	mov	r4, r1
 800439e:	4605      	mov	r5, r0
 80043a0:	eb12 0804 	adds.w	r8, r2, r4
 80043a4:	eb43 0905 	adc.w	r9, r3, r5
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	469a      	mov	sl, r3
 80043b0:	4693      	mov	fp, r2
 80043b2:	4652      	mov	r2, sl
 80043b4:	465b      	mov	r3, fp
 80043b6:	4640      	mov	r0, r8
 80043b8:	4649      	mov	r1, r9
 80043ba:	f7fb ff1f 	bl	80001fc <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4613      	mov	r3, r2
 80043c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043cc:	d308      	bcc.n	80043e0 <UART_SetConfig+0x430>
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043d4:	d204      	bcs.n	80043e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	60da      	str	r2, [r3, #12]
 80043de:	e0ce      	b.n	800457e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043e6:	e0ca      	b.n	800457e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f0:	d166      	bne.n	80044c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80043f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d827      	bhi.n	800444a <UART_SetConfig+0x49a>
 80043fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004400 <UART_SetConfig+0x450>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004425 	.word	0x08004425
 8004404:	0800442d 	.word	0x0800442d
 8004408:	08004435 	.word	0x08004435
 800440c:	0800444b 	.word	0x0800444b
 8004410:	0800443b 	.word	0x0800443b
 8004414:	0800444b 	.word	0x0800444b
 8004418:	0800444b 	.word	0x0800444b
 800441c:	0800444b 	.word	0x0800444b
 8004420:	08004443 	.word	0x08004443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004424:	f7fe fa9c 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 8004428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800442a:	e014      	b.n	8004456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800442c:	f7fe faae 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8004430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004432:	e010      	b.n	8004456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004434:	4b4e      	ldr	r3, [pc, #312]	@ (8004570 <UART_SetConfig+0x5c0>)
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004438:	e00d      	b.n	8004456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7fe f9f9 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 800443e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004440:	e009      	b.n	8004456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004448:	e005      	b.n	8004456 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8090 	beq.w	800457e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	4a44      	ldr	r2, [pc, #272]	@ (8004574 <UART_SetConfig+0x5c4>)
 8004464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004468:	461a      	mov	r2, r3
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004470:	005a      	lsls	r2, r3, #1
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	441a      	add	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	d916      	bls.n	80044b8 <UART_SetConfig+0x508>
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004490:	d212      	bcs.n	80044b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f023 030f 	bic.w	r3, r3, #15
 800449a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	8bfb      	ldrh	r3, [r7, #30]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	8bfa      	ldrh	r2, [r7, #30]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	e062      	b.n	800457e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80044be:	e05e      	b.n	800457e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d828      	bhi.n	800451a <UART_SetConfig+0x56a>
 80044c8:	a201      	add	r2, pc, #4	@ (adr r2, 80044d0 <UART_SetConfig+0x520>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	08004505 	.word	0x08004505
 80044dc:	0800451b 	.word	0x0800451b
 80044e0:	0800450b 	.word	0x0800450b
 80044e4:	0800451b 	.word	0x0800451b
 80044e8:	0800451b 	.word	0x0800451b
 80044ec:	0800451b 	.word	0x0800451b
 80044f0:	08004513 	.word	0x08004513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f4:	f7fe fa34 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044fa:	e014      	b.n	8004526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044fc:	f7fe fa46 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8004500:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004502:	e010      	b.n	8004526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004504:	4b1a      	ldr	r3, [pc, #104]	@ (8004570 <UART_SetConfig+0x5c0>)
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004508:	e00d      	b.n	8004526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450a:	f7fe f991 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 800450e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004510:	e009      	b.n	8004526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004518:	e005      	b.n	8004526 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004524:	bf00      	nop
    }

    if (pclk != 0U)
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	2b00      	cmp	r3, #0
 800452a:	d028      	beq.n	800457e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	4a10      	ldr	r2, [pc, #64]	@ (8004574 <UART_SetConfig+0x5c4>)
 8004532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004536:	461a      	mov	r2, r3
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	fbb3 f2f2 	udiv	r2, r3, r2
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	441a      	add	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d910      	bls.n	8004578 <UART_SetConfig+0x5c8>
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800455c:	d20c      	bcs.n	8004578 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	b29a      	uxth	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	e009      	b.n	800457e <UART_SetConfig+0x5ce>
 800456a:	bf00      	nop
 800456c:	40008000 	.word	0x40008000
 8004570:	00f42400 	.word	0x00f42400
 8004574:	08005198 	.word	0x08005198
      }
      else
      {
        ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2201      	movs	r2, #1
 8004582:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2201      	movs	r2, #1
 800458a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2200      	movs	r2, #0
 8004598:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800459a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3730      	adds	r7, #48	@ 0x30
 80045a2:	46bd      	mov	sp, r7
 80045a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080045a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01a      	beq.n	80046be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a6:	d10a      	bne.n	80046be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b098      	sub	sp, #96	@ 0x60
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046fc:	f7fc ffc0 	bl	8001680 <HAL_GetTick>
 8004700:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b08      	cmp	r3, #8
 800470e:	d12f      	bne.n	8004770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004718:	2200      	movs	r2, #0
 800471a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f88e 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d022      	beq.n	8004770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800473e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004748:	647b      	str	r3, [r7, #68]	@ 0x44
 800474a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800474e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e6      	bne.n	800472a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e063      	b.n	8004838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d149      	bne.n	8004812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800477e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004786:	2200      	movs	r2, #0
 8004788:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f857 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d03c      	beq.n	8004812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	623b      	str	r3, [r7, #32]
   return(result);
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80047b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e6      	bne.n	8004798 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3308      	adds	r3, #8
 80047e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047ea:	61fa      	str	r2, [r7, #28]
 80047ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	69b9      	ldr	r1, [r7, #24]
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	617b      	str	r3, [r7, #20]
   return(result);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e012      	b.n	8004838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3758      	adds	r7, #88	@ 0x58
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004850:	e049      	b.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004858:	d045      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fc ff11 	bl	8001680 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <UART_WaitOnFlagUntilTimeout+0x30>
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e048      	b.n	8004906 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d031      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b08      	cmp	r3, #8
 800488e:	d110      	bne.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2208      	movs	r2, #8
 8004896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f838 	bl	800490e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2208      	movs	r2, #8
 80048a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e029      	b.n	8004906 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c0:	d111      	bne.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f81e 	bl	800490e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e00f      	b.n	8004906 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	429a      	cmp	r2, r3
 8004902:	d0a6      	beq.n	8004852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800490e:	b480      	push	{r7}
 8004910:	b095      	sub	sp, #84	@ 0x54
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800492a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004934:	643b      	str	r3, [r7, #64]	@ 0x40
 8004936:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800493a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3308      	adds	r3, #8
 800494e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	61fb      	str	r3, [r7, #28]
   return(result);
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3308      	adds	r3, #8
 800496a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800496c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e3      	bne.n	8004948 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d118      	bne.n	80049ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	60bb      	str	r3, [r7, #8]
   return(result);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f023 0310 	bic.w	r3, r3, #16
 800499c:	647b      	str	r3, [r7, #68]	@ 0x44
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6979      	ldr	r1, [r7, #20]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	613b      	str	r3, [r7, #16]
   return(result);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e6      	bne.n	8004988 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80049ce:	bf00      	nop
 80049d0:	3754      	adds	r7, #84	@ 0x54
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e027      	b.n	8004a40 <HAL_UARTEx_DisableFifoMode+0x66>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2224      	movs	r2, #36	@ 0x24
 80049fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004a1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e02d      	b.n	8004ac0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2224      	movs	r2, #36	@ 0x24
 8004a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f84f 	bl	8004b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e02d      	b.n	8004b3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2224      	movs	r2, #36	@ 0x24
 8004aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f811 	bl	8004b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d108      	bne.n	8004b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b64:	e031      	b.n	8004bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b66:	2308      	movs	r3, #8
 8004b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	0e5b      	lsrs	r3, r3, #25
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	0f5b      	lsrs	r3, r3, #29
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b8e:	7bbb      	ldrb	r3, [r7, #14]
 8004b90:	7b3a      	ldrb	r2, [r7, #12]
 8004b92:	4911      	ldr	r1, [pc, #68]	@ (8004bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8004b94:	5c8a      	ldrb	r2, [r1, r2]
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b9a:	7b3a      	ldrb	r2, [r7, #12]
 8004b9c:	490f      	ldr	r1, [pc, #60]	@ (8004bdc <UARTEx_SetNbDataToProcess+0x98>)
 8004b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	7b7a      	ldrb	r2, [r7, #13]
 8004bb0:	4909      	ldr	r1, [pc, #36]	@ (8004bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8004bb2:	5c8a      	ldrb	r2, [r1, r2]
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004bb8:	7b7a      	ldrb	r2, [r7, #13]
 8004bba:	4908      	ldr	r1, [pc, #32]	@ (8004bdc <UARTEx_SetNbDataToProcess+0x98>)
 8004bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	080051b0 	.word	0x080051b0
 8004bdc:	080051b8 	.word	0x080051b8

08004be0 <memset>:
 8004be0:	4402      	add	r2, r0
 8004be2:	4603      	mov	r3, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d100      	bne.n	8004bea <memset+0xa>
 8004be8:	4770      	bx	lr
 8004bea:	f803 1b01 	strb.w	r1, [r3], #1
 8004bee:	e7f9      	b.n	8004be4 <memset+0x4>

08004bf0 <__libc_init_array>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c28 <__libc_init_array+0x38>)
 8004bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8004c2c <__libc_init_array+0x3c>)
 8004bf6:	1b64      	subs	r4, r4, r5
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	42a6      	cmp	r6, r4
 8004bfe:	d109      	bne.n	8004c14 <__libc_init_array+0x24>
 8004c00:	4d0b      	ldr	r5, [pc, #44]	@ (8004c30 <__libc_init_array+0x40>)
 8004c02:	4c0c      	ldr	r4, [pc, #48]	@ (8004c34 <__libc_init_array+0x44>)
 8004c04:	f000 f818 	bl	8004c38 <_init>
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	42a6      	cmp	r6, r4
 8004c10:	d105      	bne.n	8004c1e <__libc_init_array+0x2e>
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c18:	4798      	blx	r3
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7ee      	b.n	8004bfc <__libc_init_array+0xc>
 8004c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c22:	4798      	blx	r3
 8004c24:	3601      	adds	r6, #1
 8004c26:	e7f2      	b.n	8004c0e <__libc_init_array+0x1e>
 8004c28:	080051c8 	.word	0x080051c8
 8004c2c:	080051c8 	.word	0x080051c8
 8004c30:	080051c8 	.word	0x080051c8
 8004c34:	080051cc 	.word	0x080051cc

08004c38 <_init>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr

08004c44 <_fini>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr
